Metadata-Version: 2.4
Name: afromessage
Version: 0.1.2
Summary: Python SDK for AfroMessage API to send SMS and OTP
Home-page: https://github.com/yonas8989/afromessage-python-sdk
Author: Yonas Fikadie
Author-email: yonasfikadie8989@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests>=2.25.0
Requires-Dist: pydantic>=2.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# AfroMessage Python SDK

A complete Python SDK for the [AfroMessage](https://afromessage.com) SMS and OTP API.  
This package makes it easy to send **single SMS**, **bulk SMS**, and handle **OTP challenges** with minimal setup.

---

## üöÄ Installation

Install the package via **pip**:

```bash
pip install afromessage
```
# Or from source:
```bash
git clone https://github.com/yonas8989/afromessage-python.git
cd afromessage-python
pip install -e .
```
# üîë Quick Start
## Create a .env file in your project root:
```bash
AFROMESSAGE_TOKEN=your_api_token_here
```
# Then in Python:
```bash
import os
from dotenv import load_dotenv
from afromessage import AfroMessage
from afromessage.models.sms_models import SendSMSRequest, BulkSMSRequest
from afromessage.models.otp_models import SendOTPRequest, VerifyOTPRequest

# Load environment variables
load_dotenv()
token = os.getenv("AFROMESSAGE_TOKEN")

if not token:
    raise ValueError("‚ö†Ô∏è Set AFROMESSAGE_TOKEN in your .env file!")

# Initialize the SDK
sdk = AfroMessage(token=token)

# --- Single SMS ---
sms_request = SendSMSRequest(
    to="+2519xxxxxxx",
    message="Hello from AfroMessage SDK!",
    from_="MySender",
    sender="MyBrand"
)
response = sdk.sms.send(sms_request)
print("‚úÖ Single SMS:", response)

# --- Bulk SMS ---
bulk_request = BulkSMSRequest(
    to=["+2519xxxxxxx", "+2519yyyyyyy"],
    message="Hello, bulk users!",
    from_="MySender",
    sender="MyBrand",
    campaign="MyCampaign"
)
bulk_response = sdk.sms.bulk_send(bulk_request)
print("‚úÖ Bulk SMS:", bulk_response)

# --- OTP Challenge ---
otp_request = SendOTPRequest(
    to="+2519xxxxxxx",
    pr="Your code",
    len_=6
)
otp_response = sdk.otp.send(otp_request)
print("‚úÖ OTP Challenge:", otp_response)

# --- Verify OTP ---
verify_request = VerifyOTPRequest(
    to="+2519xxxxxxx",
    code="123456"
)
verify_response = sdk.otp.verify(verify_request)
print("‚úÖ OTP Verify:", verify_response)
```
## üì¶ Features

## ‚úÖ Send single SMS
## ‚úÖ Send bulk SMS campaigns
## ‚úÖ Generate OTP challenges
## ‚úÖ Verify OTP codes
## ‚úÖ Built-in error handling
## ‚úÖ Request/response logging for debugging


# ‚ö° API Reference

## Single SMS
```bash
from afromessage.models.sms_models import SendSMSRequest

sms_request = SendSMSRequest(
    to="+2519xxxxxxx",
    message="Hello from AfroMessage!",
    from_="MySender",
    sender="MyBrand",
    callback="https://myapp.com/callback"  # optional
)

response = sdk.sms.send(sms_request)
```
## Single SMS (GET request)
```bash
response = sdk.sms.send_get(sms_request)
```
## Bulk SMS
```bash
from afromessage.models.sms_models import BulkSMSRequest

bulk_request = BulkSMSRequest(
    to=["+2519xxxxxxx", "+2519yyyyyyy"],
    message="Hello, everyone!",
    from_="MySender",
    sender="MyBrand",
    campaign="MyCampaign"
)

response = sdk.sms.bulk_send(bulk_request)
```
## Bulk SMS (Personalized messages)
```bash
from afromessage.models.sms_models import BulkRecipient, BulkSMSRequest

personalized_request = BulkSMSRequest(
    to=[
        BulkRecipient(to="+2519xxxxxxx", message="Hi Yonas!"),
        BulkRecipient(to="+2519yyyyyyy", message="Hi Eshetu!")
    ],
    from_="MySender",
    sender="MyBrand",
    campaign="PersonalizedCampaign"
)

response = sdk.sms.bulk_send(personalized_request)
```
## OTP Challenge
```bash
from afromessage.models.otp_models import SendOTPRequest

otp_request = SendOTPRequest(
    to="+2519xxxxxxx",
    pr="Your code",
    len_=6,
    ttl=300  # time-to-live in seconds (optional)
)

response = sdk.otp.send(otp_request)
```
## Verify OTP
```bash
from afromessage.models.otp_models import VerifyOTPRequest

verify_request = VerifyOTPRequest(
    to="+2519xxxxxxx",
    code="123456"
)

response = sdk.otp.verify(verify_request)
```
# üõ† Error Handling
## All errors are wrapped and logged automatically.
## Example:
```bash
try:
    response = sdk.sms.send(sms_request)
    print("‚úÖ Success:", response)
except Exception as e:
    print("‚ùå Error:", str(e))
```
## Errors include:

#     API errors (invalid request, authentication failure, etc.)

#     Network errors (timeouts, connection issues)

# üìë Logging
## Requests and responses are logged automatically. Example:
```bash
üì§ [POST] Request to: send
   Payload: {
     "to": "+2519xxxxxxx",
     "message": "Hello!"
   }

üì• Response from: send
   Data: {
     "acknowledge": "success",
     "response": { "code": "202", "to": "+2519xxxxxxx" }
   }
```

# üß™ Advanced Example (Real Test)

## We provide a full interactive test script in [usag/test_real.py](https://githubrepo.com)
.
## It shows how to send SMS, bulk SMS, and run OTP challenge + verification with .env loading.
## Run it with:
```bash
python usage/test_real.py
```
## ‚ö†Ô∏è Note: Running this will send real SMS/OTP messages and may incur costs.

# ü§ù Contributing

## Contributions are welcome! To contribute:

##    1. Fork the repo

##    2. Create your feature branch (git checkout -b feature/my-feature)

##    3. Commit your changes (git commit -m 'Add my feature')

##    4. Push to the branch (git push origin feature/my-feature)

##    5. Open a Pull Request

## Run tests before submitting:
```bash
pytest
```

# üìú License

## This project is licensed under the MIT License.
## See LICENSE
## for details.


# üôã Support
## For issues or feature requests, open a GitHub Issue






