Metadata-Version: 2.4
Name: afromessage
Version: 0.1.1
Summary: Python SDK for AfroMessage API to send SMS and OTP
Home-page: https://github.com/yonas8989/afromessage-python-sdk
Author: Yonas Fikadie
Author-email: yonasfikadie8989@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests>=2.25.0
Requires-Dist: pydantic>=2.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# AfroMessage Python SDK

A complete Python SDK for the [AfroMessage](https://afromessage.com) SMS and OTP API.  
This package makes it easy to send **single SMS**, **bulk SMS**, and handle **OTP challenges** with minimal setup.

---

## üöÄ Installation

Install the package via **pip**:

```bash
pip install afromessage
```
# Or from source:
```bash
git clone https://github.com/yourusername/afromessage-python.git
cd afromessage-python
pip install -e .
```
# üîë Quick Start
```bash
from afromessage import AfroMessage

# Initialize with your API token
sdk = AfroMessage(token="your_api_token_here")

# --- Single SMS ---
response = sdk.sms.send(
    request={
        "to": "+xxxxxxxxxxxx",
        "message": "Hello from AfroMessage!",
        "from_": "MySender",  # Max 11 characters
        "sender": "MyBrand"
    }
)
print(response)

# --- Bulk SMS ---
bulk_response = sdk.sms.bulk_send(
    request={
        "to": ["+xxxxxxxxxxxx", "+xxxxxxxxxxxx"],
        "message": "Hello, bulk users!",
        "from_": "MySender",  # Max 11 characters
        "sender": "MyBrand",
        "campaign": "MyCampaign"
    }
)
print(bulk_response)

# --- OTP Challenge ---
otp_response = sdk.otp.send(
    request={
        "to": "+xxxxxxxxxxxx",
        "pr": "Your code",  # Max 11 characters
        "len_": 6
    }
)
print(otp_response)

# --- Verify OTP ---
verify_response = sdk.otp.verify(
    request={
        "to": "+xxxxxxxxxxxx",
        "code": "123456"
    }
)
print(verify_response)
```
## üì¶ Features

## ‚úÖ Send single SMS
## ‚úÖ Send bulk SMS campaigns
## ‚úÖ Generate OTP challenges
## ‚úÖ Verify OTP codes
## ‚úÖ Built-in error handling
## ‚úÖ Request/response logging for debugging
# ‚ö° API Reference
## Single SMS
```bash
sdk.sms.send(
    request={
        "to": "+xxxxxxxxxxxx",
        "message": "Hello!",
        "from_": "MySender",  # Max 11 characters
        "sender": "MyBrand",
        "callback": "https://myapp.com/callback"
    }
)
```
##  Bulk SMS
```bash
sdk.sms.bulk_send(
    request={
        "to": ["+xxxxxxxxxxxx", "+xxxxxxxxxxxx"],
        "message": "Hello, group!",
        "from_": "MySender",  # Max 11 characters
        "sender": "MyBrand",
        "campaign": "MyCampaign"
    }
)
```
## OTP Challenge
```bash
sdk.otp.send(
    request={
        "to": "+xxxxxxxxxxxx",
        "pr": "Your code",  # Max 11 characters
        "len_": 6,
        "ttl": 300  # time-to-live in seconds
    }
)
```
## OTP Verification
```bash
sdk.otp.verify(
    request={
        "to": "+xxxxxxxxxxxx",
        "code": "123456"
    }
)
```
# üõ† Error Handling
## All errors are wrapped and logged automatically:
```bash 
try:
    response = sdk.sms.send(
        request={
            "to": "+xxxxxxxxxxxx",
            "message": "Hello!"
        }
    )
except Exception as e:
    print("Error:", str(e))
```
### Errors include:

### API errors (invalid request, auth failure, etc.)

### Network errors (timeout, connection issues)
# üìë Logging
## Requests and responses are logged automatically. Example log:
```bash
üì§ [POST] Request to: send
   Payload: {
     "to": "+xxxxxxxxxxxx",
     "message": "Hello!"
   }

üì• Response from: send
   Data: {
     "acknowledge": "success",
     "response": { "code": "202", "to": "+xxxxxxxxxxxx" }
   }
```
# ü§ù Contributing
## Contributions are welcome! To contribute:

##    1. Fork the repo

##    2. Create your feature branch (git checkout -b feature/my-feature)

##    3. Commit your changes (git commit -m 'Add my feature')

##    4. Push to the branch (git push origin feature/my-feature)

##    5. Open a Pull Request

## Run tests before submitting:
```bash
pytest
```
# üìú License
## This project is licensed under the MIT License.
## See LICENSE
## for details.
# üôã Support
## For issues or feature requests, open a GitHub Issue

