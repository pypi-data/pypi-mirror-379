"""
üß™ Teste do Overlay - Bot Vision Suite

Script para testar se o overlay visual est√° funcionando corretamente.
"""

import time
import sys
import os

def test_overlay_basic():
    """Teste b√°sico do overlay"""
    print("üîç Testando overlay b√°sico...")
    
    try:
        from bot_vision.core.overlay import VisualOverlay
        
        # Criar overlay
        overlay = VisualOverlay(color="red", width=4, duration=2000)
        
        # Testar regi√£o no centro da tela
        print("üìç Mostrando overlay no centro da tela por 2 segundos...")
        print("   (Voc√™ deve ver um ret√¢ngulo vermelho)")
        
        # Regi√£o de teste (centro da tela aproximadamente)
        test_region = (400, 300, 200, 100)  # x, y, width, height
        
        overlay.show(test_region, blocking=True)
        
        print("‚úÖ Teste b√°sico conclu√≠do")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste b√°sico: {e}")
        return False


def test_overlay_methods():
    """Testa diferentes m√©todos de overlay"""
    print("\nüîß Testando m√©todos de overlay...")
    
    try:
        from bot_vision.core.overlay import VisualOverlay
        
        overlay = VisualOverlay(color="blue", width=6, duration=1500)
        
        # Teste 1: Verificar se Tkinter est√° dispon√≠vel
        print(f"   Tkinter dispon√≠vel: {overlay._tkinter_available}")
        
        # Teste 2: Tentar corre√ß√£o do Tkinter
        if not overlay._tkinter_available:
            print("   üîß Tentando corrigir Tkinter...")
            fixed = overlay._fix_tkinter_environment()
            print(f"   Corre√ß√£o do Tkinter: {'‚úÖ Sucesso' if fixed else '‚ùå Falhou'}")
        
        # Teste 3: Overlay em diferentes posi√ß√µes
        positions = [
            (100, 100, 150, 80, "Canto superior esquerdo"),
            (700, 100, 150, 80, "Canto superior direito"),
            (100, 400, 150, 80, "Canto inferior esquerdo"),
            (700, 400, 150, 80, "Canto inferior direito")
        ]
        
        for x, y, w, h, desc in positions:
            print(f"üìç Testando: {desc}")
            overlay.show((x, y, w, h), blocking=True)
            time.sleep(0.5)
        
        print("‚úÖ Teste de m√©todos conclu√≠do")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de m√©todos: {e}")
        return False


def test_overlay_fallback():
    """Testa m√©todos de fallback"""
    print("\nüõ°Ô∏è Testando m√©todos de fallback...")
    
    try:
        from bot_vision.core.overlay import VisualOverlay
        
        overlay = VisualOverlay(color="green", width=3, duration=2000)
        
        # For√ßar uso do m√©todo alternativo (Windows)
        if os.name == 'nt':
            print("   üéØ Testando overlay alternativo (Windows API)...")
            overlay._create_overlay_alternative((300, 200, 300, 150))
            print("   ‚úÖ Overlay alternativo testado")
        else:
            print("   ‚ÑπÔ∏è Overlay alternativo s√≥ funciona no Windows")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de fallback: {e}")
        return False


def test_overlay_with_bot_vision():
    """Testa overlay atrav√©s da classe BotVision"""
    print("\nü§ñ Testando overlay com BotVision...")
    
    try:
        from bot_vision import BotVision
        
        # Criar bot com overlay habilitado
        bot = BotVision()
        bot.show_overlay = True
        
        print("   üìç Criando overlay atrav√©s do BotVision...")
        print("   (Este teste simula o que acontece durante automa√ß√£o)")
        
        # Simular overlay como seria usado na automa√ß√£o
        if hasattr(bot, 'overlay') or hasattr(bot, '_overlay'):
            # Usar overlay interno do bot
            overlay = getattr(bot, 'overlay', None) or getattr(bot, '_overlay', None)
            if overlay:
                overlay.show((450, 250, 200, 100), blocking=True)
                print("   ‚úÖ Overlay via BotVision funcionou")
            else:
                print("   ‚ö†Ô∏è Bot n√£o tem overlay configurado")
        else:
            # Criar overlay diretamente
            from bot_vision.core.overlay import VisualOverlay
            overlay = VisualOverlay()
            overlay.show((450, 250, 200, 100), blocking=True)
            print("   ‚úÖ Overlay direto funcionou")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste com BotVision: {e}")
        return False


def test_multiple_overlays():
    """Testa m√∫ltiplos overlays simult√¢neos"""
    print("\nüî¢ Testando m√∫ltiplos overlays...")
    
    try:
        from bot_vision.core.overlay import VisualOverlay
        
        overlay = VisualOverlay(color="purple", width=5, duration=3000)
        
        # V√°rias regi√µes
        regions = [
            (200, 150, 100, 60),  # Regi√£o 1
            (400, 150, 100, 60),  # Regi√£o 2
            (600, 150, 100, 60),  # Regi√£o 3
            (300, 300, 200, 80),  # Regi√£o central
        ]
        
        print("   üìç Mostrando 4 overlays simult√¢neos por 3 segundos...")
        overlay.show_multiple(regions, blocking=True)
        
        print("   ‚úÖ M√∫ltiplos overlays testados")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de m√∫ltiplos overlays: {e}")
        return False


def test_overlay_functions():
    """Testa fun√ß√µes de conveni√™ncia"""
    print("\nüîß Testando fun√ß√µes de conveni√™ncia...")
    
    try:
        from bot_vision.core.overlay import show_overlay, show_overlay_blocking
        
        print("   üìç Testando show_overlay (n√£o bloqueante)...")
        show_overlay((350, 200, 180, 90), duration=1000, color="orange")
        time.sleep(1.2)  # Aguardar terminar
        
        print("   üìç Testando show_overlay_blocking (bloqueante)...")
        show_overlay_blocking((500, 350, 150, 70), duration=1500, color="cyan")
        
        print("   ‚úÖ Fun√ß√µes de conveni√™ncia testadas")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de fun√ß√µes: {e}")
        return False


def main():
    """Executa todos os testes"""
    print("üß™ TESTE COMPLETO DO OVERLAY - BOT VISION SUITE")
    print("=" * 60)
    print("Este teste ir√° mostrar v√°rios ret√¢ngulos coloridos na sua tela.")
    print("Se voc√™ v√™-los, o overlay est√° funcionando corretamente!\n")
    
    # Aguardar confirma√ß√£o
    input("Pressione ENTER para come√ßar os testes...")
    print()
    
    tests = [
        ("Overlay B√°sico", test_overlay_basic),
        ("M√©todos de Overlay", test_overlay_methods),
        ("M√©todos de Fallback", test_overlay_fallback),
        ("Overlay com BotVision", test_overlay_with_bot_vision),
        ("M√∫ltiplos Overlays", test_multiple_overlays),
        ("Fun√ß√µes de Conveni√™ncia", test_overlay_functions),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erro cr√≠tico em {test_name}: {e}")
            results.append((test_name, False))
        
        if test_func != tests[-1][1]:  # N√£o pausar no √∫ltimo teste
            print(f"\nAguardando 2 segundos antes do pr√≥ximo teste...")
            time.sleep(2)
    
    # Resumo dos resultados
    print(f"\n{'='*60}")
    print("üìä RESUMO DOS TESTES")
    print("=" * 60)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name:.<40} {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ Resultados: {passed}/{len(results)} testes passaram")
    
    if passed == len(results):
        print("üéâ OVERLAY FUNCIONANDO PERFEITAMENTE!")
    elif passed > len(results) // 2:
        print("‚ö†Ô∏è Overlay parcialmente funcional")
    else:
        print("‚ùå Overlay com problemas - verifique configura√ß√£o")
    
    print("\nüí° Dicas:")
    print("- Se n√£o viu nenhum ret√¢ngulo: Tkinter n√£o est√° funcionando")
    print("- Se viu alguns ret√¢ngulos: Overlay est√° funcionando!")
    print("- M√©todos de fallback s√£o usados quando Tkinter falha")


if __name__ == "__main__":
    main()
