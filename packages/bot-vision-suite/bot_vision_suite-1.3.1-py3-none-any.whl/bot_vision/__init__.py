"""
Bot Vision Suite - Advanced GUI Automation with OCR

Uma biblioteca Python avan√ßada para automa√ß√£o de interface gr√°fica que combina
reconhecimento √≥ptico de caracteres (OCR) otimizado com detec√ß√£o de imagens
para executar tarefas automatizadas em aplica√ß√µes desktop.

‚ö†Ô∏è  REQUISITO IMPORTANTE: TESSERACT OCR DEVE ESTAR INSTALADO! ‚ö†Ô∏è

üì• INSTALA√á√ÉO DO TESSERACT:
    1. Baixe: https://github.com/UB-Mannheim/tesseract/wiki
    2. Instale em: C:\\Program Files\\Tesseract-OCR\\
    3. Adicione ao PATH do sistema
    4. Teste: tesseract --version

üöÄ FUNCIONALIDADES COMPLETAS - M√âTODOS INDIVIDUAIS E LISTAS üöÄ

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üî• BACKTRACK ENTRE M√âTODOS INDIVIDUAIS (NOVO!):
    
    >>> from bot_vision import BotVision
    >>> 
    >>> bot = BotVision()
    >>> 
    >>> # OP√á√ÉO 1: Auto-inicia sess√£o quando backtrack=True
    >>> success1 = bot.click_image('button1.png', backtrack=True)
    >>> success2 = bot.click_text('Save', backtrack=True)  # Se falhar, volta pro button1
    >>> success3 = bot.click_text('Confirm', backtrack=True)  # Se falhar, volta pro Save
    >>> 
    >>> # OP√á√ÉO 2: Controle manual da sess√£o
    >>> bot.start_task_session()  # Inicia sess√£o de backtrack
    >>> bot.click_image('button1.png', backtrack=True)
    >>> bot.click_text('agent', backtrack=True)
    >>> bot.click_text('Claude Sonnet 4', backtrack=True)
    >>> successful, total = bot.end_task_session()  # Finaliza e mostra estat√≠sticas

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìã EXECU√á√ÉO DE TAREFAS EM LISTA (M√©todo Original + NOVAS FUNCIONALIDADES):
    
    >>> from bot_vision import BotVision, execute_tasks
    >>> 
    >>> # Tarefas com TODAS as funcionalidades (incluindo NOVAS!)
    >>> tasks = [
    ...     # 1. Busca de imagem tradicional
    ...     {
    ...         'image': 'button.png',
    ...         'region': (100, 100, 200, 50),
    ...         'confidence': 0.9,
    ...         'specific': False,       # Permite varia√ß√µes de escala
    ...         'backtrack': True,       # Retry autom√°tico
    ...         'delay': 1,
    ...         'mouse_button': 'left'   # 'left', 'right', 'double', 'move_to'
    ...     },
    ...     # 2. Busca de texto OCR
    ...     {
    ...         'text': 'Login',
    ...         'region': (50, 50, 300, 100),
    ...         'occurrence': 1,         # Primeira ocorr√™ncia
    ...         'char_type': 'letters',  # Filtro de caracteres
    ...         'backtrack': True,       # Retry autom√°tico
    ...         'delay': 0.5,
    ...         'sendtext': 'usuario123' # Digita ap√≥s clique
    ...     },
    ...     # 3. NOVO! Busca de imagem relativa (√¢ncora + target)
    ...     {
    ...         'type': 'relative_image',
    ...         'anchor_image': 'warning_icon.png',    # Imagem √¢ncora √∫nica
    ...         'target_image': 'ok_button.png',       # Imagem target pr√≥xima
    ...         'max_distance': 200,                   # Dist√¢ncia m√°xima em pixels
    ...         'confidence': 0.9,
    ...         'target_region': (0, 0, 800, 600),     # Regi√£o para buscar target (opcional)
    ...         'specific': True,
    ...         'backtrack': True,
    ...         'delay': 1
    ...     },
    ...     # 4. NOVO! Clique em coordenadas espec√≠ficas
    ...     {
    ...         'type': 'click',
    ...         'x': 500,                              # Coordenada X
    ...         'y': 300,                              # Coordenada Y
    ...         'mouse_button': 'right',               # 'left', 'right', 'double', 'move_to'
    ...         'delay': 0.5,
    ...         'backtrack': False
    ...     },
    ...     # 5. NOVO! Digita√ß√£o de texto direta
    ...     {
    ...         'type': 'type_text',
    ...         'text': 'Hello World!',               # Texto a digitar
    ...         'interval': 0.05,                     # Intervalo entre caracteres
    ...         'delay': 1
    ...     },
    ...     # 6. NOVO! Comando de teclado
    ...     {
    ...         'type': 'keyboard_command',
    ...         'command': 'Ctrl+S',                  # Comando a executar
    ...         'delay': 1
    ...     }
    ... ]
    >>> 
    >>> # Execu√ß√£o simples
    >>> execute_tasks(tasks)
    >>> 
    >>> # Execu√ß√£o avan√ßada com controle
    >>> bot = BotVision()
    >>> resultados = bot.execute_tasks(tasks)

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üéØ M√âTODOS INDIVIDUAIS COM TODAS AS FUNCIONALIDADES:

üì∏ BUSCA E CLIQUE EM IMAGENS (DETALHES COMPLETOS):
    
    >>> bot = BotVision()
    >>> 
    >>> # Buscar imagem b√°sica
    >>> location = bot.find_image('button.png', 
    ...                          region=(100, 100, 300, 200),
    ...                          confidence=0.9)
    >>> 
    >>> # Clicar em imagem COM TODOS OS PAR√ÇMETROS:
    >>> success = bot.click_image('element_1_2.png',
    ...                          region=(3, 664, 41, 46),      # x, y, width, height
    ...                          confidence=0.9,               # 0.0 a 1.0 (90% precis√£o)
    ...                          delay=1,                      # Pausa 1 seg ap√≥s clique
    ...                          mouse_button='left',          # 'left', 'right', 'double', 'move_to'
    ...                          backtrack=True,               # Retry inteligente
    ...                          specific=False,               # False = permite varia√ß√µes
    ...                          max_attempts=3)               # M√°ximo 3 tentativas
    >>> 
    >>> # PAR√ÇMETROS DETALHADOS:
    >>> # region:       Define √°rea de busca (x, y, largura, altura)
    >>> # confidence:   Precis√£o da detec√ß√£o (0.8=80%, 0.95=95%)
    >>> # delay:        Pausa em segundos ap√≥s a a√ß√£o
    >>> # mouse_button: Tipo de clique a executar
    >>> # backtrack:    Se falhar, reexecuta tarefa anterior
    >>> # specific:     True=busca na regi√£o, False=busca tela inteira + varia√ß√µes
    >>> # max_attempts: Quantas vezes tentar antes de desistir

üìù BUSCA E CLIQUE EM TEXTO OCR (DETALHES COMPLETOS):
    
    >>> # Buscar texto b√°sico
    >>> location = bot.find_text('Login',
    ...                         region=(0, 0, 800, 600),
    ...                         filter_type='letters',        # 'letters', 'numbers', 'both'
    ...                         confidence_threshold=75.0,
    ...                         occurrence=1)                 # Qual ocorr√™ncia
    >>> 
    >>> # Clicar em texto COM TODOS OS PAR√ÇMETROS:
    >>> success = bot.click_text('Claude Sonnet 4',
    ...                         region=(1363, 965, 85, 23),   # x, y, width, height
    ...                         filter_type='letters',        # S√≥ letras (n√£o n√∫meros)
    ...                         delay=1,                       # Pausa 1 seg ap√≥s clique
    ...                         mouse_button='left',           # Clique esquerdo
    ...                         occurrence=1,                  # Primeira ocorr√™ncia
    ...                         backtrack=True,                # Retry inteligente
    ...                         max_attempts=3,                # M√°ximo 3 tentativas
    ...                         sendtext=None)                 # Texto para digitar depois
    >>> 
    >>> # PAR√ÇMETROS DETALHADOS:
    >>> # region:               Define √°rea de busca na tela
    >>> # filter_type:          'letters'=s√≥ letras, 'numbers'=s√≥ n√∫meros, 'both'=ambos
    >>> # delay:                Pausa ap√≥s o clique
    >>> # mouse_button:         Tipo de clique ('left', 'right', 'double', 'move_to')
    >>> # occurrence:           Qual ocorr√™ncia clicar (1=primeira, 2=segunda, etc.)
    >>> # backtrack:            Retry inteligente que reexecuta tarefas anteriores
    >>> # max_attempts:         N√∫mero de tentativas antes de desistir
    >>> # sendtext:             Texto para digitar ap√≥s o clique (None=n√£o digita)
    >>> # confidence_threshold: Precis√£o OCR (75.0=75%, 90.0=90%)

üñ±Ô∏è CLIQUES E A√á√ïES (DETALHES COMPLETOS):
    
    >>> # Clique em coordenadas espec√≠ficas COM TODOS OS PAR√ÇMETROS:
    >>> bot.click_at((100, 200, 50, 30),              # x, y, width, height
    ...              mouse_button='left',              # 'left', 'right', 'double', 'move_to'
    ...              delay=1)                          # Pausa ap√≥s clique
    >>> 
    >>> # Digitar texto COM COMANDOS ESPECIAIS:
    >>> bot.type_text('Hello World')                   # Texto simples
    >>> bot.type_text('{ctrl}a{del}Novo Texto{enter}') # Comandos especiais
    >>> 
    >>> # COMANDOS ESPECIAIS SUPORTADOS:
    >>> # {ctrl}a     = Ctrl+A (selecionar tudo)
    >>> # {del}       = Delete
    >>> # {tab}       = Tab
    >>> # {enter}     = Enter
    >>> # Texto normal = Digitado usando clipboard para maior confiabilidade

üéØ IMAGENS RELATIVAS (NOVO! - Busca Target pr√≥ximo a √Çncora):
    
    >>> # Localiza uma imagem target pr√≥xima a uma imagem √¢ncora espec√≠fica
    >>> location = bot.find_relative_image(
    ...     anchor_image='menu_button.png',     # Imagem √¢ncora (√∫nica na tela)
    ...     target_image='option.png',          # Imagem target (pode ter v√°rias)
    ...     max_distance=150,                   # Dist√¢ncia m√°xima em pixels
    ...     confidence=0.9,                     # Confian√ßa de detec√ß√£o
    ...     target_region=(0, 0, 800, 600)      # Regi√£o para buscar target (opcional)
    ... )
    >>> 
    >>> # Clique em imagem relativa COM TODOS OS PAR√ÇMETROS:
    >>> success = bot.click_relative_image(
    ...     anchor_image='anchor.png',          # √Çncora de refer√™ncia
    ...     target_image='target.png',          # Target a clicar
    ...     max_distance=200,                   # M√°ximo 200px da √¢ncora
    ...     confidence=0.9,                     # 90% de precis√£o
    ...     target_region=None,                 # None = busca tela inteira
    ...     delay=1,                           # Pausa ap√≥s clique
    ...     mouse_button='left',               # Tipo de clique
    ...     backtrack=True,                    # Retry inteligente
    ...     max_attempts=3                     # M√°ximo de tentativas
    ... )
    >>> 
    >>> # USO PR√ÅTICO: √ötil quando h√° m√∫ltiplas op√ß√µes iguais na tela
    >>> # Exemplo: V√°rias imagens "OK" mas voc√™ quer a que est√° perto do "Warning"

‚å®Ô∏è COMANDOS DE TECLADO COMPLETOS (NOVO! - Lista Expandida):
    
    >>> # Executa comando de teclado espec√≠fico
    >>> bot.keyboard_command('Ctrl+S')          # Salvar
    >>> bot.keyboard_command('F7')              # Clear Block (Oracle Forms)
    >>> bot.keyboard_command('Alt+Tab')         # Trocar janela
    >>> 
    >>> # LISTA COMPLETA DE COMANDOS SUPORTADOS:
    >>> # 
    >>> # === COMANDOS DE SISTEMA (Oracle Forms, etc.) ===
    >>> # F5, F6, F7, F8, F12 - Fun√ß√µes espec√≠ficas
    >>> # Ctrl+S, Ctrl+E, Ctrl+F11 - Commit, Edit, Enter Query
    >>> # Shift+F5, Shift+F6 - Duplicate Field/Record
    >>> # Ctrl+Up, Ctrl+Down - Delete/Insert Record
    >>> # 
    >>> # === COMANDOS GERAIS ===
    >>> # Ctrl+C, Ctrl+V, Ctrl+X - Copy, Paste, Cut
    >>> # Ctrl+A, Ctrl+Z, Ctrl+Y - Select All, Undo, Redo
    >>> # Tab, Enter, Escape, Delete, Backspace
    >>> # Arrow Up/Down/Left/Right, Home, End
    >>> # Page Up, Page Down
    >>> # 
    >>> # === COMANDOS DE NAVEGADOR ===
    >>> # Ctrl+T, Ctrl+W, Ctrl+R - New Tab, Close Tab, Refresh
    >>> # Ctrl+Shift+T - Reopen Closed Tab
    >>> # 
    >>> # === COMANDOS DE SISTEMA ===
    >>> # Alt+Tab, Alt+F4 - Switch/Close Window
    >>> # Windows+D, Windows+L - Desktop, Lock
    >>> # 
    >>> # Veja lista completa com: bot.get_available_keyboard_commands()

üìç CLIQUE EM COORDENADAS ESPEC√çFICAS (NOVO!):
    
    >>> # Clique direto em coordenadas (sem buscar imagem ou texto)
    >>> success = bot.click_coordinates(x=100, y=200,
    ...                                delay=1,
    ...                                mouse_button='left',
    ...                                backtrack=False)
    >>> 
    >>> # √ötil quando voc√™ sabe exatamente onde clicar

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üîß FUN√á√ïES DE CONVENI√äNCIA (Uso R√°pido SEM Instanciar Classe):
    
    >>> from bot_vision import (find_text, click_text, find_image, click_image,
    ...                         find_relative_image, click_relative_image,     # NOVO!
    ...                         click_coordinates, type_text_standalone,        # NOVO!
    ...                         keyboard_command_standalone)                    # NOVO!
    >>> 
    >>> # Busca r√°pida (fun√ß√µes standalone tradicionais)
    >>> location = find_text("Login", region=(100, 100, 500, 300))
    >>> location = find_image("button.png", confidence=0.9)
    >>> 
    >>> # Clique r√°pido (fun√ß√µes standalone tradicionais)
    >>> success = click_text("Confirmar", region=(200, 200, 600, 400))
    >>> success = click_image("button.png", backtrack=True)
    >>> 
    >>> # NOVAS FUNCIONALIDADES - Standalone
    >>> # Imagem relativa
    >>> location = find_relative_image("anchor.png", "target.png", max_distance=150)
    >>> success = click_relative_image("anchor.png", "target.png", backtrack=True)
    >>> 
    >>> # Coordenadas espec√≠ficas
    >>> success = click_coordinates(100, 200, delay=1, backtrack=True)
    >>> 
    >>> # Digita√ß√£o e comandos de teclado
    >>> success = type_text_standalone("Hello World!", backtrack=True)
    >>> success = keyboard_command_standalone("Ctrl+S", delay=1, backtrack=True)
    >>> 
    >>> # Lista de comandos dispon√≠veis
    >>> commands = get_available_keyboard_commands()
    >>> print(f"Total de comandos: {len(commands)}")
    >>> 
    >>> # NOTA: Estas fun√ß√µes criam uma inst√¢ncia tempor√°ria do BotVision

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìã TIPOS DE TAREFA SUPORTADOS (Para uso em listas):

    üî∏ TIPO: 'text' (Busca e clique em texto via OCR)
       Campos: text, region, char_type, occurrence, confidence, backtrack, delay, sendtext
       
    üî∏ TIPO: 'image' (Busca e clique em imagem)
       Campos: image, region, confidence, specific, backtrack, delay, mouse_button
       
    üî∏ TIPO: 'relative_image' (NOVO! - Busca target pr√≥ximo a √¢ncora)
       Campos: anchor_image, target_image, max_distance, confidence, target_region, 
               specific, backtrack, delay, mouse_button
       
    üî∏ TIPO: 'click' (NOVO! - Clique em coordenadas espec√≠ficas)
       Campos: x, y, mouse_button, delay, backtrack
       
    üî∏ TIPO: 'type_text' (NOVO! - Digita√ß√£o direta de texto)
       Campos: text, interval, delay
       
    üî∏ TIPO: 'keyboard_command' (NOVO! - Comando de teclado)
       Campos: command, delay
       
    üî∏ TIPO: 'extract_text' (NOVO! - Extra√ß√£o de texto de regi√£o espec√≠fica)
       Campos: region, filter_type, confidence_threshold, return_full_data, backtrack, delay

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚öôÔ∏è CONFIGURA√á√ÉO AVAN√áADA (Personalize o Comportamento):
    
    >>> # Configura√ß√£o personalizada COMPLETA:
    >>> config = {
    ...     "confidence_threshold": 80.0,        # Limiar OCR padr√£o (75-95)
    ...     "tesseract_lang": "por",             # Idioma: 'eng', 'por', 'spa'
    ...     "tesseract_path": r"C:\Program Files\Tesseract-OCR\tesseract.exe",
    ...     "tessdata_path": r"C:\Program Files\Tesseract-OCR\tessdata",
    ...     "preprocessing_enabled": True,        # Melhora OCR (recomendado)
    ...     "retry_attempts": 5,                 # Tentativas padr√£o
    ...     "default_delay": 1.5,               # Delay padr√£o entre a√ß√µes
    ...     "show_overlay": False,               # Desabilita overlay vermelho globalmente
    ...     "screenshot_delay": 0.1              # Delay para captura de tela
    ... }
    >>> 
    >>> bot = BotVision(config=config)
    >>> 
    >>> # PAR√ÇMETROS DE CONFIGURA√á√ÉO EXPLICADOS:
    >>> # confidence_threshold: Precis√£o m√≠nima para reconhecer texto
    >>> # tesseract_lang:       Idioma para OCR ('eng'=ingl√™s, 'por'=portugu√™s)
    >>> # tesseract_path:       Caminho do execut√°vel Tesseract
    >>> # tessdata_path:        Pasta com dados de idiomas
    >>> # preprocessing_enabled: Melhora imagem antes do OCR
    >>> # retry_attempts:       Tentativas padr√£o quando n√£o especificado
    >>> # default_delay:        Pausa padr√£o entre a√ß√µes
    >>> # show_overlay:         Controla exibi√ß√£o da marca√ß√£o vermelha antes dos cliques

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üåü FUNCIONALIDADES AVAN√áADAS (EXPLICA√á√ÉO DETALHADA):

‚úÖ BACKTRACK: Sistema inteligente de retry que, quando uma tarefa falha,
              reexecuta a tarefa anterior e tenta novamente. Funciona tanto
              em listas de tarefas quanto entre m√©todos individuais.

‚úÖ OCCURRENCE: Permite escolher qual ocorr√™ncia de texto clicar na tela.
               occurrence=1 = primeira ocorr√™ncia encontrada
               occurrence=2 = segunda ocorr√™ncia encontrada, etc.

‚úÖ SPECIFIC: Controla onde buscar imagens na tela.
             specific=True  = busca apenas na regi√£o definida (mais r√°pido)
             specific=False = busca na tela inteira + permite varia√ß√µes de escala
                             (ignora regi√£o, mais flex√≠vel)

‚úÖ FILTER_TYPE/CHAR_TYPE: Filtra caracteres durante OCR.
                          'letters' = s√≥ letras (A-Z, a-z)
                          'numbers' = s√≥ n√∫meros (0-9)
                          'both'    = letras e n√∫meros

‚úÖ SENDTEXT: Digita texto automaticamente ap√≥s clique bem-sucedido.
             Suporta comandos especiais: {ctrl}a, {del}, {tab}, {enter}
             Usa clipboard para maior confiabilidade.

‚úÖ CONFIDENCE: Controla precis√£o para OCR e detec√ß√£o de imagens.
               0.7 = 70% (mais permissivo, pode ter falsos positivos)
               0.9 = 90% (mais rigoroso, menos falsos positivos)
               0.95 = 95% (muito rigoroso, pode perder elementos v√°lidos)

‚úÖ DELAY: Pausas personaliz√°veis entre a√ß√µes em segundos.
          √ötil para aguardar carregamento de interfaces.
          delay=0.5 = meio segundo, delay=2 = dois segundos

‚úÖ SHOW_OVERLAY: Controla exibi√ß√£o da marca√ß√£o vermelha antes dos cliques.
                 show_overlay=True  = exibe marca√ß√£o (padr√£o, √∫til para debug)
                 show_overlay=False = sem marca√ß√£o (mais r√°pido, para produ√ß√£o)
                 show_overlay=None  = usa configura√ß√£o global do bot

‚úÖ MOUSE_BUTTON: Suporte completo a diferentes tipos de clique.
                 ‚Ä¢ "left" - Clique simples esquerdo (padr√£o)
                 ‚Ä¢ "right" - Clique direito (menu contextual)
                 ‚Ä¢ "double" ou "double left" - Clique duplo esquerdo (abrir/executar)
                 ‚Ä¢ "move_to" - Apenas move o mouse sem clicar (hover)
                 
                 Exemplos de uso:
                 bot.click_image('file.png', mouse_button="double")  # Abrir arquivo
                 bot.click_text('Menu', mouse_button="right")       # Menu contextual
                 bot.click_image('hover_btn.png', mouse_button="move_to")  # Apenas hover
                 bot.click_relative_image('anchor.png', 'target.png', mouse_button="left")

‚úÖ REGION: Define √°rea espec√≠fica da tela para busca.
           region=(x, y, width, height)
           x, y = coordenadas do canto superior esquerdo
           width, height = largura e altura da √°rea
           Melhora performance e evita falsos positivos.

‚úÖ MAX_ATTEMPTS: Controla quantas tentativas fazer antes de desistir.
                 max_attempts=1 = tenta s√≥ uma vez
                 max_attempts=3 = tenta at√© 3 vezes (padr√£o)
                 max_attempts=5 = tenta at√© 5 vezes (mais persistente)

üéØ DICAS DE USO:
   ‚Ä¢ Use region sempre que poss√≠vel para melhor performance
   ‚Ä¢ confidence entre 0.8-0.9 √© ideal para a maioria dos casos
   ‚Ä¢ specific=False busca na tela inteira e permite varia√ß√µes de escala
   ‚Ä¢ specific=True busca apenas na regi√£o definida (mais r√°pido)
   ‚Ä¢ backtrack=True √© recomendado para automa√ß√µes complexas
   ‚Ä¢ filter_type='letters' melhora OCR quando voc√™ busca s√≥ texto
   ‚Ä¢ delay adequado evita problemas com interfaces lentas

üö® TROUBLESHOOTING:
   ‚Ä¢ Elemento n√£o encontrado: Diminua confidence ou aumente region
   ‚Ä¢ OCR impreciso: Use preprocessing_enabled=True na configura√ß√£o
   ‚Ä¢ Clique no lugar errado: Verifique coordinates do region
   ‚Ä¢ Backtrack n√£o funciona: Certifique-se que backtrack=True em todos os m√©todos

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""

import logging
import time

# Importa classes principais
from .core.task_executor import TaskExecutor, TaskResult, execute_tasks, click_images
from .core.ocr_engine import OCREngine, OCRResult, find_text_with_multiple_preprocessing
from .core.image_processing import ImageProcessor, preprocess_image_for_ocr
from .core.overlay import VisualOverlay, show_overlay
from .core.relative_image import RelativeImageDetector  # NOVA FUNCIONALIDADE
from .core.keyboard_commands import KeyboardCommander  # NOVA FUNCIONALIDADE
from .utils.config import BotVisionConfig, get_default_config
from .utils.text_filters import limpar_texto, matches_filter
from .exceptions import *

# Vers√£o da biblioteca
__version__ = "1.3.0"
__author__ = "Automation Suite Developer"
__email__ = "developer@automation-suite.com"
__license__ = "MIT"

# Configura√ß√£o de logging padr√£o
logger = logging.getLogger(__name__)

class BotVision:
    """
    Classe principal do Bot Vision Suite.
    
    Fornece uma interface de alto n√≠vel para automa√ß√£o GUI com OCR avan√ßado.
    
    Examples:
        Uso b√°sico:
        >>> bot = BotVision()
        >>> bot.execute_tasks(tasks)
        
        Com configura√ß√£o customizada:
        >>> config = {"confidence_threshold": 80.0}
        >>> bot = BotVision(config=config)
        >>> bot.execute_tasks(tasks)
    """
    
    def __init__(self, config=None):
        """
        Inicializa o Bot Vision.
        
        Args:
            config (dict or BotVisionConfig, optional): Configura√ß√µes customizadas
        """
        if isinstance(config, dict):
            self.config = BotVisionConfig(config)
        elif isinstance(config, BotVisionConfig):
            self.config = config
        else:
            self.config = get_default_config()
        
        self.executor = TaskExecutor(self.config)
        self.ocr_engine = OCREngine(self.config)
        self.image_processor = ImageProcessor()
        
        # Configura√ß√µes de overlay - acess√≠veis via propriedades
        self._overlay_enabled = self.config.get("overlay_enabled", True)
        self._show_overlay = self.config.get("show_overlay", True)
        
        # Sistema de backtrack para m√©todos individuais
        self.individual_task_history = []  # Hist√≥rico de m√©todos executados
        self.backtrack_enabled_globally = False  # Se est√° em modo backtrack
        self.current_task_index = -1  # √çndice da tarefa atual
        self.max_backtrack_attempts = 2  # M√°ximo de tentativas de backtrack por tarefa
        self.task_session_active = False  # Se est√° em uma sess√£o de tarefas individuais
    
    def _add_to_task_history(self, method_name, args, kwargs):
        """Adiciona m√©todo ao hist√≥rico de tarefas individuais."""
        task_info = {
            'method': method_name,
            'args': args,
            'kwargs': kwargs,
            'index': len(self.individual_task_history),
            'success': None,
            'backtrack_attempts': 0,
            'timestamp': time.time()
        }
        self.individual_task_history.append(task_info)
        self.current_task_index = len(self.individual_task_history) - 1
        return self.current_task_index
    
    def start_task_session(self):
        """Inicia uma sess√£o de tarefas individuais para backtrack."""
        self.task_session_active = True
        self.individual_task_history = []
        self.current_task_index = -1
        logger.info("üöÄ Sess√£o de tarefas individuais iniciada - backtrack habilitado entre m√©todos")
    
    def end_task_session(self):
        """Finaliza uma sess√£o de tarefas individuais."""
        self.task_session_active = False
        successful_tasks = sum(1 for task in self.individual_task_history if task.get('success', False))
        total_tasks = len(self.individual_task_history)
        logger.info(f"üèÅ Sess√£o finalizada: {successful_tasks}/{total_tasks} tarefas bem-sucedidas")
        return successful_tasks, total_tasks
    
    # Propriedades de controle do overlay
    @property
    def overlay_enabled(self):
        """Controla se o sistema de overlay est√° ativo."""
        return self._overlay_enabled
    
    @overlay_enabled.setter
    def overlay_enabled(self, value):
        """Define se o sistema de overlay est√° ativo."""
        self._overlay_enabled = bool(value)
        # Atualiza tamb√©m na configura√ß√£o
        self.config.config["overlay_enabled"] = self._overlay_enabled
    
    @property
    def show_overlay(self):
        """Controla se exibe overlay visual antes dos cliques."""
        return self._show_overlay
    
    @show_overlay.setter
    def show_overlay(self, value):
        """Define se exibe overlay visual antes dos cliques."""
        self._show_overlay = bool(value)
        # Atualiza tamb√©m na configura√ß√£o
        self.config.config["show_overlay"] = self._show_overlay
    
    def configure_overlay(self, enabled=None, color=None, duration=None, width=None):
        """
        Configura par√¢metros do overlay de forma conveniente.
        
        Args:
            enabled (bool, optional): Se o overlay est√° habilitado
            color (str, optional): Cor do overlay - op√ß√µes: 'red', 'blue', 'green', 'yellow', 
                                   'purple', 'orange', 'cyan', 'magenta', 'white', 'black'
            duration (int, optional): Dura√ß√£o em milissegundos (500-5000 recomendado)
            width (int, optional): Largura da linha do overlay (1-10 recomendado)
            
        Examples:
            >>> bot = BotVision()
            >>> bot.configure_overlay(enabled=True, color="blue", duration=2000)
            >>> bot.configure_overlay(color="green", width=6)
            
        Raises:
            ValueError: Se cor inv√°lida for fornecida
        """
        valid_colors = [
            "red", "blue", "green", "yellow", 
            "purple", "orange", "cyan", "magenta", 
            "white", "black"
        ]
        
        if enabled is not None:
            self.overlay_enabled = enabled
            self.show_overlay = enabled
        
        if color is not None:
            if color.lower() not in [c.lower() for c in valid_colors]:
                raise ValueError(f"Cor '{color}' inv√°lida. Cores dispon√≠veis: {', '.join(valid_colors)}")
            self.config.config["overlay_color"] = color.lower()
            
        if duration is not None:
            if not isinstance(duration, (int, float)) or duration <= 0:
                raise ValueError(f"Dura√ß√£o deve ser um n√∫mero positivo, recebido: {duration}")
            if duration > 10000:
                logger.warning(f"Dura√ß√£o muito alta ({duration}ms). Considere usar menos de 5000ms.")
            self.config.config["overlay_duration"] = int(duration)
            
        if width is not None:
            if not isinstance(width, (int, float)) or width <= 0:
                raise ValueError(f"Largura deve ser um n√∫mero positivo, recebido: {width}")
            if width > 15:
                logger.warning(f"Largura muito alta ({width}). Considere usar menos de 10.")
            self.config.config["overlay_width"] = int(width)
    
    def get_overlay_config(self):
        """
        Retorna configura√ß√£o atual do overlay.
        
        Returns:
            dict: Configura√ß√µes do overlay
        """
        return {
            "enabled": self.overlay_enabled,
            "show_overlay": self.show_overlay,
            "color": self.config.config.get("overlay_color", "red"),
            "duration": self.config.config.get("overlay_duration", 1000),
            "width": self.config.config.get("overlay_width", 4)
        }
    
    @staticmethod
    def get_available_overlay_colors():
        """
        Retorna lista de cores dispon√≠veis para overlay.
        
        Returns:
            list: Lista de cores dispon√≠veis
            
        Examples:
            >>> colors = BotVision.get_available_overlay_colors()
            >>> print("Cores dispon√≠veis:", colors)
        """
        return [
            "red", "blue", "green", "yellow", 
            "purple", "orange", "cyan", "magenta", 
            "white", "black"
        ]
    
    def test_overlay_colors(self, duration=1500):
        """
        Testa todas as cores dispon√≠veis de overlay.
        
        Args:
            duration (int): Dura√ß√£o de cada cor em milissegundos
            
        Examples:
            >>> bot = BotVision()
            >>> bot.test_overlay_colors()  # Mostra cada cor por 1.5 segundos
        """
        from .core.overlay import VisualOverlay
        
        colors = self.get_available_overlay_colors()
        test_region = (400, 300, 200, 100)  # Centro da tela
        
        print("üé® Testando cores de overlay...")
        print("üìç Olhe para o centro da tela!")
        
        for i, color in enumerate(colors, 1):
            print(f"   {i}. Cor: {color.upper()}")
            overlay = VisualOverlay(color=color, width=6, duration=duration)
            overlay.show(test_region, blocking=True)
            
        print("‚úÖ Teste de cores conclu√≠do!")
    
    def _execute_with_individual_backtrack(self, method_name, method_func, *args, **kwargs):
        """
        Executa m√©todo individual com capacidade de backtrack.
        
        Args:
            method_name (str): Nome do m√©todo ('click_image', 'click_text', etc.)
            method_func (callable): Fun√ß√£o do m√©todo a ser executada
            *args: Argumentos posicionais
            **kwargs: Argumentos nomeados
            
        Returns:
            bool: Resultado da execu√ß√£o
        """
        backtrack = kwargs.get('backtrack', False)
        
        # Se backtrack n√£o est√° habilitado ou n√£o h√° sess√£o ativa, executa normalmente
        if not backtrack or not self.task_session_active:
            if backtrack and not self.task_session_active:
                # Auto-inicia sess√£o se backtrack=True mas sess√£o n√£o est√° ativa
                self.start_task_session()
            
            # Remove backtrack dos kwargs para evitar recurs√£o infinita
            execution_kwargs = kwargs.copy()
            execution_kwargs.pop('backtrack', None)
            return method_func(*args, **execution_kwargs)
        
        # Adiciona ao hist√≥rico
        task_index = self._add_to_task_history(method_name, args, kwargs)
        
        logger.info(f"üéØ Executando {method_name} (tarefa {task_index + 1}) com backtrack habilitado")
        
        # Remove backtrack dos kwargs para evitar recurs√£o infinita
        execution_kwargs = kwargs.copy()
        execution_kwargs.pop('backtrack', None)
        
        # Tenta executar o m√©todo
        success = method_func(*args, **execution_kwargs)
        
        # Atualiza resultado no hist√≥rico
        self.individual_task_history[task_index]['success'] = success
        
        if success:
            logger.info(f"‚úì {method_name} (tarefa {task_index + 1}) executada com sucesso!")
            return True
        else:
            # Falhou - verifica se pode fazer backtrack
            if task_index > 0:  # H√° tarefas anteriores
                current_task = self.individual_task_history[task_index]
                
                if current_task['backtrack_attempts'] < self.max_backtrack_attempts:
                    current_task['backtrack_attempts'] += 1
                    
                    # Executa tarefa anterior
                    prev_task = self.individual_task_history[task_index - 1]
                    logger.info(f"üîÑ BACKTRACK: {method_name} (tarefa {task_index + 1}) falhou. "
                              f"Reexecutando tarefa anterior ({prev_task['method']}) e tentando novamente...")
                    
                    # Reexecuta tarefa anterior
                    prev_method_name = prev_task['method']
                    prev_method_func = getattr(self, f"_{prev_method_name}_internal")
                    prev_kwargs = prev_task['kwargs'].copy()
                    prev_kwargs.pop('backtrack', None)  # Remove backtrack para evitar recurs√£o
                    
                    prev_success = prev_method_func(*prev_task['args'], **prev_kwargs)
                    self.individual_task_history[task_index - 1]['success'] = prev_success
                    
                    if prev_success:
                        logger.info(f"‚úì Tarefa anterior ({prev_task['method']}) reexecutada com sucesso")
                        
                        # Aguarda um pouco e tenta a tarefa atual novamente
                        time.sleep(0.5)
                        logger.info(f"üîÑ Tentando novamente {method_name} (tarefa {task_index + 1}) ap√≥s backtrack...")
                        
                        retry_success = method_func(*args, **execution_kwargs)
                        self.individual_task_history[task_index]['success'] = retry_success
                        
                        if retry_success:
                            logger.info(f"‚úì {method_name} (tarefa {task_index + 1}) bem-sucedida ap√≥s backtrack!")
                            return True
                        else:
                            logger.warning(f"‚úó {method_name} (tarefa {task_index + 1}) ainda falhou ap√≥s backtrack")
                    else:
                        logger.warning(f"‚úó Tarefa anterior ({prev_task['method']}) tamb√©m falhou na reexecu√ß√£o")
                else:
                    logger.warning(f"‚úó {method_name} (tarefa {task_index + 1}) falhou ap√≥s {self.max_backtrack_attempts} tentativas de backtrack")
            else:
                logger.warning(f"‚úó {method_name} (tarefa {task_index + 1}) falhou mas √© a primeira tarefa (sem backtrack poss√≠vel)")
            
            return False

    def execute_tasks(self, tasks):
        """
        Executa uma lista de tarefas sequencialmente.
        
        Args:
            tasks (list): Lista de dicion√°rios com configura√ß√µes das tarefas
            
        Returns:
            list: Lista de TaskResult com resultados de cada tarefa
            
        Examples:
            >>> # Tarefas b√°sicas
            >>> tasks = [
            ...     {'text': 'Login', 'region': (100, 100, 500, 300)},
            ...     {'image': 'button.png', 'delay': 2}
            ... ]
            >>> 
            >>> # Tarefas avan√ßadas com TODAS as novas funcionalidades:
            >>> advanced_tasks = [
            ...     # 1. Busca de texto OCR
            ...     {
            ...         'text': 'Usu√°rio',
            ...         'region': (100, 100, 500, 300),
            ...         'char_type': 'letters',
            ...         'confidence': 0.8,
            ...         'occurrence': 1,
            ...         'backtrack': True,
            ...         'delay': 1,
            ...         'sendtext': 'admin{tab}password{enter}'
            ...     },
            ...     # 2. Busca de imagem relativa (NOVO!)
            ...     {
            ...         'type': 'relative_image',
            ...         'anchor_image': 'warning_icon.png',
            ...         'target_image': 'ok_button.png',
            ...         'max_distance': 200,
            ...         'confidence': 0.9,
            ...         'target_region': (0, 0, 800, 600),
            ...         'specific': True,
            ...         'backtrack': True,
            ...         'delay': 1
            ...     },
            ...     # 3. Clique em coordenadas espec√≠ficas (NOVO!)
            ...     {
            ...         'type': 'click',
            ...         'x': 100,
            ...         'y': 200,
            ...         'mouse_button': 'right',
            ...         'delay': 0.5,
            ...         'backtrack': False
            ...     },
            ...     # 4. Digita√ß√£o de texto (NOVO!)
            ...     {
            ...         'type': 'type_text',
            ...         'text': 'Hello World!',
            ...         'interval': 0.05,
            ...         'delay': 1
            ...     },
            ...     # 5. Comando de teclado (NOVO!)
            ...     {
            ...         'type': 'keyboard_command',
            ...         'command': 'Ctrl+S',
            ...         'delay': 1
            ...     }
            ... ]
            >>> 
            >>> results = bot.execute_tasks(advanced_tasks)
        """
        return self.executor.execute_tasks(tasks)
    
    def find_text(self, text, region=None, filter_type="both", confidence_threshold=75.0,
                  occurrence=1, max_attempts=3, backtrack=False, wait_until_found=False,
                  wait_until_disappears=False, wait_timeout=None):
        """
        Encontra texto na tela usando OCR avan√ßado com todas as funcionalidades.

        Args:
            text (str): Texto a ser encontrado
            region (tuple, optional): (x, y, width, height) da regi√£o de busca
            filter_type (str): Tipo de filtro ("numbers", "letters", "both") - equivale a char_type
            confidence_threshold (float): Limiar de confian√ßa m√≠nimo
            occurrence (int): Qual ocorr√™ncia buscar (1 = primeira, 2 = segunda, etc.)
            max_attempts (int): N√∫mero m√°ximo de tentativas se backtrack=True
            backtrack (bool): Se deve tentar m√∫ltiplas vezes com ajustes
            wait_until_found (bool): üÜï v1.3.0+ - Aguarda texto aparecer automaticamente
            wait_until_disappears (bool): üÜï v1.3.0+ - Aguarda texto desaparecer
            wait_timeout (int, optional): üÜï v1.3.0+ - Timeout espec√≠fico (sobrescreve global)

        Returns:
            tuple: Coordenadas (x, y, width, height) onde o texto foi encontrado ou None
            
        Examples:
            >>> location = bot.find_text("Confirmar", region=(0, 0, 800, 600), backtrack=True)
            >>> if location:
            ...     print(f"Texto encontrado em: {location}")
        """
        import time

        # Se tem par√¢metros de wait, cria task e usa o executor com wait
        if wait_until_found or wait_until_disappears:
            temp_task = {
                'text': text,
                'region': region,
                'char_type': filter_type,
                'confidence_threshold': confidence_threshold,
                'occurrence': occurrence,
                'wait_until_found': wait_until_found,
                'wait_until_disappears': wait_until_disappears,
                'wait_timeout': wait_timeout
            }

            # Usa o m√©todo com wait do executor
            if wait_until_found:
                return self.executor._find_text_with_wait(temp_task, 0)
            elif wait_until_disappears:
                return self.executor._find_text_with_wait(temp_task, 0)

        # Comportamento original sem wait
        attempts = 0
        while attempts < max_attempts:
            if region is None:
                # Se n√£o especificou regi√£o, captura tela inteira
                import pyautogui
                screen = pyautogui.screenshot()
                region = (0, 0, screen.width, screen.height)
                region_img = screen
            else:
                region_img = self.executor._capture_region(region)
            
            found_boxes, confidence_scores, _ = self.ocr_engine.find_text(
                region_img, text, filter_type, confidence_threshold
            )
            
            if found_boxes and len(found_boxes) >= occurrence:
                # Retorna a ocorr√™ncia especificada (occurrence-1 pois lista √© 0-indexada)
                target_index = occurrence - 1
                if target_index < len(found_boxes):
                    best_box_relative = found_boxes[target_index]
                    
                    # Converte para coordenadas absolutas se necess√°rio
                    if region != (0, 0, region_img.width, region_img.height):
                        return (
                            region[0] + best_box_relative[0],
                            region[1] + best_box_relative[1],
                            best_box_relative[2],
                            best_box_relative[3]
                        )
                    else:
                        return best_box_relative
            
            # Se n√£o encontrou e backtrack est√° habilitado, tenta novamente
            if backtrack and attempts < max_attempts - 1:
                attempts += 1
                logger.info(f"Tentativa {attempts}/{max_attempts} para encontrar '{text}'")
                
                # Ajusta par√¢metros para pr√≥xima tentativa
                confidence_threshold = max(60.0, confidence_threshold - 5.0)
                time.sleep(0.5)
            else:
                break
        
        return None
    
    def click_text(self, text, region=None, filter_type="both", delay=0, mouse_button="left",
                   occurrence=1, backtrack=False, max_attempts=3, sendtext=None,
                   confidence_threshold=None, show_overlay=None, wait_until_found=False,
                   wait_until_disappears=False, wait_timeout=None):
        """
        Encontra e clica em texto com funcionalidades avan√ßadas.

        Args:
            text (str): Texto a ser clicado
            region (tuple, optional): Regi√£o de busca (x, y, width, height)
            filter_type (str): Tipo de filtro ("numbers", "letters", "both")
            delay (float): Delay ap√≥s o clique em segundos
            mouse_button (str): Tipo de clique do mouse:
                ‚Ä¢ "left" - Clique simples esquerdo (padr√£o)
                ‚Ä¢ "right" - Clique direito
                ‚Ä¢ "double" ou "double left" - Clique duplo esquerdo
                ‚Ä¢ "move_to" - Apenas move o mouse sem clicar
            occurrence (int): Qual ocorr√™ncia clicar (1=primeira)
            backtrack (bool): Se deve usar backtrack real entre m√©todos individuais
            max_attempts (int): N√∫mero m√°ximo de tentativas
            sendtext (str, optional): Texto para digitar ap√≥s o clique
            confidence_threshold (float, optional): Limiar de confian√ßa customizado
            show_overlay (bool, optional): Se deve exibir o overlay vermelho antes do clique
                                         Se None, usa a configura√ß√£o global
            wait_until_found (bool): üÜï v1.3.0+ - Aguarda texto aparecer automaticamente
            wait_until_disappears (bool): üÜï v1.3.0+ - Aguarda texto desaparecer
            wait_timeout (int, optional): üÜï v1.3.0+ - Timeout espec√≠fico (sobrescreve global)

        Returns:
            bool: True se encontrou e clicou, False caso contr√°rio
        """
        # Usa configura√ß√£o global se n√£o especificado
        if show_overlay is None:
            show_overlay = self.config.show_overlay
            
        # Se backtrack for True, usa o sistema de backtrack individual
        if backtrack:
            return self._execute_with_individual_backtrack(
                'click_text', self._click_text_internal, text, region, filter_type,
                delay, mouse_button, occurrence, max_attempts, sendtext, confidence_threshold,
                show_overlay, wait_until_found, wait_until_disappears, wait_timeout, backtrack=backtrack
            )

        # Comportamento original sem backtrack
        return self._click_text_internal(text, region, filter_type, delay, mouse_button,
                                       occurrence, max_attempts, sendtext, confidence_threshold, show_overlay,
                                       wait_until_found, wait_until_disappears, wait_timeout)
    
    def _click_text_internal(self, text, region=None, filter_type="both", delay=0, mouse_button="left",
                           occurrence=1, max_attempts=3, sendtext=None, confidence_threshold=None, show_overlay=None,
                           wait_until_found=False, wait_until_disappears=False, wait_timeout=None):
        """Vers√£o interna do click_text sem backtrack (para uso no sistema de backtrack)."""
        # Usa configura√ß√£o global se n√£o especificado
        if show_overlay is None:
            show_overlay = self.config.show_overlay
        attempts = 0
        while attempts < max_attempts:
            attempts += 1
            
            try:
                if attempts > 1:
                    logger.info(f"Tentativa {attempts}/{max_attempts} para clicar em '{text}'")
                
                # Usa limiar customizado se fornecido, sen√£o usa da configura√ß√£o
                threshold = confidence_threshold or self.config.confidence_threshold
                
                location = self.find_text(text, region, filter_type, threshold, occurrence,
                                         max_attempts=1, backtrack=False, wait_until_found=wait_until_found,
                                         wait_until_disappears=wait_until_disappears, wait_timeout=wait_timeout)
                
                if location:
                    # Cria task tempor√°ria para usar o executor
                    temp_task = {
                        'mouse_button': mouse_button,
                        'delay': delay,
                        'sendtext': sendtext,
                        'show_overlay': show_overlay
                    }
                    
                    try:
                        self.executor._perform_action(temp_task, location)
                        return True
                    except Exception as e:
                        logger.error(f"Erro ao clicar em texto: {e}")
                        if attempts >= max_attempts:
                            return False
                        time.sleep(0.5)
                else:
                    logger.warning(f"Texto '{text}' n√£o encontrado na tentativa {attempts}")
                    if attempts < max_attempts:
                        time.sleep(0.5)
                        
            except Exception as e:
                logger.error(f"Erro na tentativa {attempts} para '{text}': {e}")
                if attempts >= max_attempts:
                    return False
                time.sleep(0.5)
        
        return False
    
    def _click_image_internal(self, image_path, region=None, confidence=0.9, delay=0, mouse_button="left",
                            max_attempts=3, specific=True, sendtext=None, show_overlay=None,
                            wait_until_found=False, wait_until_disappears=False, wait_timeout=None):
        """Vers√£o interna do click_image sem backtrack (para uso no sistema de backtrack)."""
        # Usa configura√ß√£o global se n√£o especificado
        if show_overlay is None:
            show_overlay = self.config.show_overlay
            
        # Para click_image, wait_until_disappears deve aguardar AP√ìS o clique, n√£o antes
        # Ent√£o passamos apenas wait_until_found para find_image
        location = self.find_image(image_path, region, confidence, max_attempts,
                                 False, specific, wait_until_found, False, wait_timeout)  # backtrack=False para find_image
        
        if location:
            # Cria task tempor√°ria para usar o executor
            temp_task = {
                'image': image_path,
                'region': region,
                'confidence': confidence,
                'specific': specific,
                'mouse_button': mouse_button,
                'delay': delay,
                'sendtext': sendtext,
                'show_overlay': show_overlay,
                'wait_until_disappears': wait_until_disappears,
                'wait_timeout': wait_timeout
            }
            
            try:
                self.executor._perform_action(temp_task, location)
                return True
            except Exception as e:
                logger.error(f"Erro ao clicar em imagem: {e}")
                return False
        
        return False

    def type_text(self, text):
        """
        Digita texto na posi√ß√£o atual do cursor.
        
        Args:
            text (str): Texto a ser digitado (suporta comandos especiais)
            
        Examples:
            >>> bot.type_text("Hello World")
            >>> bot.type_text("{ctrl}a{del}New Text{enter}")
        """
        try:
            self.executor._process_sendtext(text)
            return True
        except Exception as e:
            logger.error(f"Erro ao digitar texto: {e}")
            return False

    def extract_text_from_region(self, region=None, filter_type="both", confidence_threshold=50.0, 
                                 return_full_data=False, max_attempts=3, backtrack=False):
        """
        Extrai todo o texto encontrado em uma regi√£o espec√≠fica da tela.
        
        Args:
            region (tuple, optional): (x, y, width, height) da regi√£o para extrair texto.
                                    Se None, extrai da tela inteira
            filter_type (str): Tipo de filtro para o texto:
                ‚Ä¢ "numbers" - Apenas n√∫meros
                ‚Ä¢ "letters" - Apenas letras
                ‚Ä¢ "both" - N√∫meros e letras (padr√£o)
            confidence_threshold (float): Limiar m√≠nimo de confian√ßa (0-100)
            return_full_data (bool): Se True, retorna dados completos com coordenadas e confian√ßa
            max_attempts (int): N√∫mero m√°ximo de tentativas se backtrack=True
            backtrack (bool): Se deve tentar m√∫ltiplas vezes com ajustes
            
        Returns:
            Se return_full_data=False:
                list: Lista de strings com todo texto encontrado
            Se return_full_data=True:
                list: Lista de dicion√°rios com:
                    - 'text': Texto encontrado
                    - 'confidence': N√≠vel de confian√ßa (0-100)
                    - 'box': Coordenadas (x, y, width, height)
                    - 'absolute_box': Coordenadas absolutas na tela
            
        Examples:
            Extra√ß√£o simples:
            >>> texts = bot.extract_text_from_region(region=(100, 100, 400, 300))
            >>> print("Textos encontrados:", texts)
            
            Extra√ß√£o com dados completos:
            >>> data = bot.extract_text_from_region(
            ...     region=(100, 100, 400, 300),
            ...     return_full_data=True,
            ...     confidence_threshold=70.0
            ... )
            >>> for item in data:
            ...     print(f"'{item['text']}' - Confian√ßa: {item['confidence']:.1f}% - Posi√ß√£o: {item['absolute_box']}")
            
            Apenas n√∫meros:
            >>> numbers = bot.extract_text_from_region(
            ...     region=(50, 50, 200, 100),
            ...     filter_type="numbers"
            ... )
        """
        import time
        
        attempts = 0
        while attempts < max_attempts:
            try:
                if region is None:
                    # Se n√£o especificou regi√£o, captura tela inteira
                    import pyautogui
                    screen = pyautogui.screenshot()
                    region = (0, 0, screen.width, screen.height)
                    region_img = screen
                else:
                    region_img = self.executor._capture_region(region)
                
                # Usa o m√©todo extract_all_text do OCR engine
                ocr_results = self.ocr_engine.extract_all_text(region_img, filter_type)
                
                # Filtra por confian√ßa
                filtered_results = [
                    result for result in ocr_results 
                    if result.confidence >= confidence_threshold
                ]
                
                if not filtered_results and backtrack and attempts < max_attempts - 1:
                    # Se n√£o encontrou nada e backtrack est√° habilitado, ajusta par√¢metros
                    attempts += 1
                    logger.info(f"Tentativa {attempts}/{max_attempts} para extra√ß√£o de texto")
                    confidence_threshold = max(30.0, confidence_threshold - 10.0)
                    time.sleep(0.5)
                    continue
                
                if return_full_data:
                    # Retorna dados completos com coordenadas absolutas
                    full_data = []
                    for result in filtered_results:
                        absolute_box = (
                            region[0] + result.box[0],
                            region[1] + result.box[1],
                            result.box[2],
                            result.box[3]
                        ) if region != (0, 0, region_img.width, region_img.height) else result.box
                        
                        full_data.append({
                            'text': result.text,
                            'confidence': result.confidence,
                            'box': result.box,  # Coordenadas relativas √† regi√£o
                            'absolute_box': absolute_box  # Coordenadas absolutas na tela
                        })
                    
                    return full_data
                else:
                    # Retorna apenas os textos
                    return [result.text for result in filtered_results]
                    
            except Exception as e:
                logger.error(f"Erro na tentativa {attempts} para extra√ß√£o de texto: {e}")
                if backtrack and attempts < max_attempts - 1:
                    attempts += 1
                    time.sleep(0.5)
                else:
                    break
        
        # Se chegou aqui, falhou
        return [] if not return_full_data else []

    def get_last_extracted_text(self):
        """
        Obt√©m o √∫ltimo texto extra√≠do quando usado em listas de tarefas.
        
        Returns:
            list: √öltimo resultado de extra√ß√£o de texto, ou None se nenhuma extra√ß√£o foi feita
            
        Examples:
            >>> tasks = [
            ...     {
            ...         'type': 'extract_text',
            ...         'region': (100, 100, 400, 300),
            ...         'filter_type': 'both'
            ...     }
            ... ]
            >>> results = bot.execute_tasks(tasks)
            >>> extracted_texts = bot.get_last_extracted_text()
            >>> print("Textos encontrados:", extracted_texts)
        """
        return getattr(self.executor, 'last_extracted_text', None)
    
    def find_image(self, image_path, region=None, confidence=0.9, max_attempts=3,
                   backtrack=False, specific=True, wait_until_found=False, wait_until_disappears=False, wait_timeout=None, scales=None):
        """
        Encontra imagem na tela com todas as funcionalidades avan√ßadas.

        Args:
            image_path (str): Caminho para a imagem
            region (tuple, optional): Regi√£o de busca
            confidence (float): N√≠vel de confian√ßa
            max_attempts (int): N√∫mero m√°ximo de tentativas se backtrack=True
            backtrack (bool): Se deve tentar m√∫ltiplas vezes com ajustes
            specific (bool): Se True, busca na regi√£o; se False, busca na tela inteira + varia√ß√µes de escala
            wait_until_found (bool): üÜï v1.3.0+ - Aguarda imagem aparecer automaticamente
            wait_until_disappears (bool): üÜï v1.3.0+ - Aguarda imagem desaparecer
            wait_timeout (int, optional): üÜï v1.3.0+ - Timeout espec√≠fico (sobrescreve global)
            scales (list, optional): Lista de escalas para tentar (ex: [1.0, 0.95, 1.05])

        Returns:
            tuple: Coordenadas da imagem ou None
        """
        import time

        if scales is None:
            scales = [1.0, 0.95, 1.05] if not specific else [1.0]

        # Se tem par√¢metros de wait, cria task e usa o executor com wait
        if wait_until_found or wait_until_disappears:
            temp_task = {
                'image': image_path,
                'region': region,
                'confidence': confidence,
                'specific': specific,
                'wait_until_found': wait_until_found,
                'wait_until_disappears': wait_until_disappears,
                'wait_timeout': wait_timeout
            }

            # Usa o m√©todo com wait do executor
            return self.executor._find_image_with_wait(temp_task, 0)

        # Comportamento original sem wait
        attempts = 0
        while attempts < max_attempts:
            try:
                # Tenta com diferentes escalas se n√£o for espec√≠fico
                for scale in scales:
                    try:
                        if scale != 1.0 and not specific:
                            # Implementa redimensionamento da imagem de refer√™ncia
                            from PIL import Image
                            import os
                            ref_img = Image.open(image_path)
                            new_width = int(ref_img.width * scale)
                            new_height = int(ref_img.height * scale)
                            scaled_img = ref_img.resize((new_width, new_height))
                            
                            # Salva temporariamente
                            temp_path = f"temp_scaled_{scale}_{attempts}.png"
                            scaled_img.save(temp_path)
                            
                            # NOVA L√ìGICA: specific controla onde buscar
                            if specific and region:
                                # Se espec√≠fico E tem regi√£o, busca na regi√£o
                                location = self.executor._locate_image_with_retry(temp_path, region, confidence)
                            else:
                                # Se n√£o espec√≠fico OU sem regi√£o, busca na tela inteira
                                location = self.executor._locate_image_with_retry(temp_path, None, confidence)
                            
                            # Remove arquivo tempor√°rio
                            if os.path.exists(temp_path):
                                os.remove(temp_path)
                        else:
                            # NOVA L√ìGICA: specific controla onde buscar
                            if specific and region:
                                # Se espec√≠fico E tem regi√£o, busca na regi√£o
                                logger.info(f"Buscando imagem na regi√£o {region} (specific=True)")
                                location = self.executor._locate_image_with_retry(image_path, region, confidence)
                            else:
                                # Se n√£o espec√≠fico OU sem regi√£o, busca na tela inteira
                                logger.info(f"Buscando imagem em toda a tela (specific=False)")
                                location = self.executor._locate_image_with_retry(image_path, None, confidence)
                        
                        if location:
                            return location
                            
                    except Exception as e:
                        logger.debug(f"Erro ao buscar imagem com escala {scale}: {e}")
                        continue
                # Se n√£o encontrou e backtrack est√° habilitado, ajusta par√¢metros
                if backtrack and attempts < max_attempts - 1:
                    attempts += 1
                    logger.info(f"Tentativa {attempts}/{max_attempts} para encontrar imagem")
                    
                    # Reduz confian√ßa gradualmente
                    confidence = max(0.7, confidence - 0.05)
                    time.sleep(0.5)
                else:
                    break
                    
            except Exception as e:
                logger.error(f"Erro ao buscar imagem: {e}")
                if not backtrack:
                    break
        
        return None
    
    def click_image(self, image_path, region=None, confidence=0.9, delay=0, mouse_button="left",
                    max_attempts=3, backtrack=False, specific=True, sendtext=None, show_overlay=None,
                    wait_until_found=False, wait_until_disappears=False, wait_timeout=None):
        """
        Encontra e clica em imagem com todas as funcionalidades avan√ßadas.

        Args:
            image_path (str): Caminho para a imagem
            region (tuple, optional): Regi√£o de busca (x, y, width, height)
            confidence (float): N√≠vel de confian√ßa (0.0-1.0)
            delay (float): Delay ap√≥s o clique em segundos
            mouse_button (str): Tipo de clique do mouse:
                ‚Ä¢ "left" - Clique simples esquerdo (padr√£o)
                ‚Ä¢ "right" - Clique direito
                ‚Ä¢ "double" ou "double left" - Clique duplo esquerdo
                ‚Ä¢ "move_to" - Apenas move o mouse sem clicar
            max_attempts (int): N√∫mero m√°ximo de tentativas se backtrack=True
            backtrack (bool): Se deve usar backtrack real entre m√©todos individuais
            specific (bool): Se True, busca exata; se False, permite varia√ß√µes
            sendtext (str, optional): Texto para digitar ap√≥s o clique
            show_overlay (bool, optional): Se deve exibir o overlay vermelho antes do clique
                                         Se None, usa a configura√ß√£o global
            wait_until_found (bool): üÜï v1.3.0+ - Aguarda imagem aparecer automaticamente
            wait_until_disappears (bool): üÜï v1.3.0+ - Aguarda imagem desaparecer
            wait_timeout (int, optional): üÜï v1.3.0+ - Timeout espec√≠fico (sobrescreve global)

        Returns:
            bool: True se encontrou e clicou, False caso contr√°rio
        """
        # Usa configura√ß√£o global se n√£o especificado
        if show_overlay is None:
            show_overlay = self.config.show_overlay
            
        # Se backtrack for True, usa o sistema de backtrack individual
        if backtrack:
            return self._execute_with_individual_backtrack(
                'click_image', self._click_image_internal, image_path, region, confidence,
                delay, mouse_button, max_attempts, specific, sendtext, show_overlay,
                wait_until_found, wait_until_disappears, wait_timeout, backtrack=backtrack
            )

        # Comportamento original sem backtrack
        return self._click_image_internal(image_path, region, confidence, delay, mouse_button,
                                        max_attempts, specific, sendtext, show_overlay,
                                        wait_until_found, wait_until_disappears, wait_timeout)

    def click_at(self, location, mouse_button="left", delay=0, show_overlay=None):
        """
        Clica em coordenadas espec√≠ficas da tela.
        
        Args:
            location (tuple): (x, y, width, height) da localiza√ß√£o
            mouse_button (str): Bot√£o do mouse ("left", "right", "double", "move_to")
            delay (float): Delay ap√≥s o clique
            show_overlay (bool, optional): Se deve exibir o overlay vermelho antes do clique
                                         Se None, usa a configura√ß√£o global
            
        Returns:
            bool: True se clicou com sucesso
            
        Examples:
            >>> bot.click_at((100, 200, 50, 30), mouse_button='left', delay=1)
        """
        try:
            # Usa configura√ß√£o global se n√£o especificado
            if show_overlay is None:
                show_overlay = self.config.show_overlay
                
            # Cria task tempor√°ria para usar o executor
            temp_task = {
                'mouse_button': mouse_button,
                'delay': delay,
                'show_overlay': show_overlay
            }
            
            self.executor._perform_action(temp_task, location)
            return True
            
        except Exception as e:
            logger.error(f"Erro ao clicar em coordenadas {location}: {e}")
            return False

    def find_relative_image(self, anchor_image, target_image, max_distance=200,
                           confidence=0.9, target_region=None, wait_until_found=False,
                           wait_until_disappears=False, wait_timeout=None):
        """
        Encontra uma imagem target pr√≥xima a uma imagem anchor.

        Args:
            anchor_image (str): Caminho para a imagem √¢ncora (√∫nica na tela)
            target_image (str): Caminho para a imagem alvo (pode ter m√∫ltiplas)
            max_distance (int): Dist√¢ncia m√°xima em pixels da √¢ncora ao target
            confidence (float): N√≠vel de confian√ßa para detec√ß√£o (0.0-1.0)
            target_region (tuple, optional): Regi√£o espec√≠fica para buscar target (x, y, width, height)
            wait_until_found (bool): üÜï v1.3.0+ - Aguarda imagem aparecer automaticamente
            wait_until_disappears (bool): üÜï v1.3.0+ - Aguarda imagem desaparecer
            wait_timeout (int, optional): üÜï v1.3.0+ - Timeout espec√≠fico (sobrescreve global)

        Returns:
            tuple: Localiza√ß√£o da imagem target mais pr√≥xima da anchor ou None
            
        Examples:
            >>> location = bot.find_relative_image('anchor.png', 'target.png', max_distance=150)
            >>> if location:
            ...     print(f"Target encontrado pr√≥ximo √† √¢ncora: {location}")
        """
        # Se tem par√¢metros de wait, cria task e usa o executor com wait
        if wait_until_found or wait_until_disappears:
            temp_task = {
                'type': 'relative_image',
                'anchor_image': anchor_image,
                'target_image': target_image,
                'max_distance': max_distance,
                'confidence': confidence,
                'target_region': target_region,
                'wait_until_found': wait_until_found,
                'wait_until_disappears': wait_until_disappears,
                'wait_timeout': wait_timeout
            }

            # Cria fun√ß√£o de busca para o wait manager
            def search_relative():
                try:
                    return self.executor.relative_detector.locate_relative_image(
                        anchor_image, target_image, confidence, max_distance, target_region
                    )
                except Exception:
                    return None

            if wait_until_found:
                return self.executor.wait_manager.wait_until_found(
                    search_relative,
                    timeout=wait_timeout or self.config.get('wait_timeout', 30),
                    description=f"imagem relativa '{target_image}' pr√≥xima a '{anchor_image}'"
                )
            elif wait_until_disappears:
                # Primeiro encontra a imagem
                result = search_relative()
                if not result:
                    return None

                # Depois aguarda ela desaparecer
                disappeared = self.executor.wait_manager.wait_until_disappears(
                    search_relative,
                    timeout=wait_timeout or self.config.get('wait_timeout', 30),
                    description=f"imagem relativa '{target_image}' pr√≥xima a '{anchor_image}'"
                )
                return result if disappeared else None

        # Comportamento original sem wait
        try:
            return self.executor.relative_detector.locate_relative_image(
                anchor_image, target_image, confidence, max_distance, target_region
            )
        except Exception as e:
            logger.error(f"Erro na busca de imagem relativa: {e}")
            return None

    def click_relative_image(self, anchor_image, target_image, max_distance=200,
                           confidence=0.9, target_region=None, delay=0,
                           mouse_button="left", backtrack=False, max_attempts=3, sendtext=None,
                           wait_until_found=False, wait_until_disappears=False, wait_timeout=None):
        """
        Clica em uma imagem target pr√≥xima a uma imagem anchor.

        Args:
            anchor_image (str): Caminho para a imagem √¢ncora
            target_image (str): Caminho para a imagem alvo
            max_distance (int): Dist√¢ncia m√°xima em pixels
            confidence (float): N√≠vel de confian√ßa (0.0-1.0)
            target_region (tuple, optional): Regi√£o para buscar target (x, y, width, height)
            delay (float): Delay ap√≥s o clique em segundos
            mouse_button (str): Tipo de clique do mouse:
                ‚Ä¢ "left" - Clique simples esquerdo (padr√£o)
                ‚Ä¢ "right" - Clique direito
                ‚Ä¢ "double" ou "double left" - Clique duplo esquerdo
                ‚Ä¢ "move_to" - Apenas move o mouse sem clicar
            backtrack (bool): Se deve usar backtrack em caso de falha
            max_attempts (int): N√∫mero m√°ximo de tentativas
            sendtext (str, optional): Texto para digitar ap√≥s o clique
            wait_until_found (bool): üÜï v1.3.0+ - Aguarda imagem aparecer automaticamente
            wait_until_disappears (bool): üÜï v1.3.0+ - Aguarda imagem desaparecer
            wait_timeout (int, optional): üÜï v1.3.0+ - Timeout espec√≠fico (sobrescreve global)

        Returns:
            bool: True se encontrou e clicou, False caso contr√°rio
            
        Examples:
            >>> # Clique simples esquerdo (padr√£o)
            >>> success = bot.click_relative_image('anchor.png', 'target.png', 
            ...                                  max_distance=150, mouse_button="left")
            
            >>> # Clique direito
            >>> success = bot.click_relative_image('anchor.png', 'target.png',
            ...                                  mouse_button="right", backtrack=True)
            
            >>> # Clique duplo esquerdo
            >>> success = bot.click_relative_image('anchor.png', 'target.png',
            ...                                  mouse_button="double", delay=1.0)
            
            >>> # Apenas mover o mouse para a posi√ß√£o (sem clicar)
            >>> success = bot.click_relative_image('anchor.png', 'target.png',
            ...                                  mouse_button="move_to", delay=0.5)

            >>> # Clique e digitar texto ap√≥s
            >>> success = bot.click_relative_image('anchor.png', 'input.png',
            ...                                  sendtext="Hello World", delay=1.0)
        """
        if backtrack:
            return self._execute_with_individual_backtrack(
                'click_relative_image', self._click_relative_image_internal,
                anchor_image, target_image, max_distance, confidence,
                target_region, delay, mouse_button, max_attempts, sendtext,
                wait_until_found, wait_until_disappears, wait_timeout, backtrack=backtrack
            )

        return self._click_relative_image_internal(
            anchor_image, target_image, max_distance, confidence,
            target_region, delay, mouse_button, max_attempts, sendtext,
            wait_until_found, wait_until_disappears, wait_timeout
        )

    def _click_relative_image_internal(self, anchor_image, target_image, max_distance,
                                     confidence, target_region, delay, mouse_button, max_attempts, sendtext=None,
                                     wait_until_found=False, wait_until_disappears=False, wait_timeout=None):
        """Implementa√ß√£o interna do clique em imagem relativa."""
        for attempt in range(max_attempts):
            # Para click_relative_image, wait_until_disappears deve aguardar AP√ìS o clique, n√£o antes
            # Ent√£o passamos apenas wait_until_found para find_relative_image
            location = self.find_relative_image(anchor_image, target_image,
                                              max_distance, confidence, target_region,
                                              wait_until_found, False, wait_timeout)  # wait_until_disappears=False
            if location:
                temp_task = {
                    'mouse_button': mouse_button,
                    'delay': delay,
                    'sendtext': sendtext,
                    'wait_until_disappears': wait_until_disappears,
                    'wait_timeout': wait_timeout,
                    'image': target_image,  # Para wait_until_disappears saber qual imagem aguardar
                    '_wait_after_click': wait_until_disappears,
                    '_wait_timeout': wait_timeout,
                    '_image_path': target_image
                }
                self.executor._perform_action(temp_task, location)
                return True

            if attempt < max_attempts - 1:
                time.sleep(0.5)

        return False

    def click_coordinates(self, x, y, delay=0, mouse_button="left", backtrack=False):
        """
        Clica em coordenadas espec√≠ficas da tela.
        
        Args:
            x (int): Coordenada X
            y (int): Coordenada Y
            delay (float): Delay ap√≥s o clique
            mouse_button (str): Bot√£o do mouse ("left", "right", "double", "move_to")
            backtrack (bool): Se deve usar backtrack
            
        Returns:
            bool: True se clicou com sucesso
            
        Examples:
            >>> success = bot.click_coordinates(100, 200, delay=1, backtrack=True)
        """
        if backtrack:
            return self._execute_with_individual_backtrack(
                'click_coordinates', self._click_coordinates_internal,
                x, y, delay, mouse_button, backtrack=backtrack
            )
        
        return self._click_coordinates_internal(x, y, delay, mouse_button)

    def _click_coordinates_internal(self, x, y, delay, mouse_button):
        """Implementa√ß√£o interna do clique em coordenadas."""
        try:
            location = (x, y, 1, 1)  # Cria regi√£o pequena
            temp_task = {
                'mouse_button': mouse_button,
                'delay': delay
            }
            self.executor._perform_action(temp_task, location)
            return True
        except Exception as e:
            logger.error(f"Erro ao clicar em coordenadas ({x}, {y}): {e}")
            return False

    def type_text(self, text, interval=0.05, delay=0, backtrack=False):
        """
        Digite texto com intervalo entre caracteres.
        
        Args:
            text (str): Texto a ser digitado
            interval (float): Intervalo entre caracteres em segundos
            delay (float): Delay ap√≥s digita√ß√£o
            backtrack (bool): Se deve usar backtrack
            
        Returns:
            bool: True se digitou com sucesso
            
        Examples:
            >>> success = bot.type_text('Hello World!', interval=0.05, backtrack=True)
            >>> success = bot.type_text('{ctrl}a{del}New text', backtrack=True)
        """
        if backtrack:
            return self._execute_with_individual_backtrack(
                'type_text', self._type_text_internal,
                text, interval, delay, backtrack=backtrack
            )
        
        return self._type_text_internal(text, interval, delay)

    def _type_text_internal(self, text, interval, delay):
        """Implementa√ß√£o interna da digita√ß√£o de texto."""
        try:
            # Verifica se tem comandos especiais
            if any(cmd in text.lower() for cmd in ['{ctrl}', '{del}', '{tab}', '{enter}']):
                self.executor.keyboard_commander.process_sendtext_command(text)
            else:
                self.executor.keyboard_commander.type_text(text, interval)
            
            if delay > 0:
                time.sleep(delay)
            return True
        except Exception as e:
            logger.error(f"Erro ao digitar texto '{text}': {e}")
            return False

    def keyboard_command(self, command, delay=0, backtrack=False):
        """
        Executa um comando de teclado.
        
        Args:
            command (str): Nome do comando a ser executado
            delay (float): Delay ap√≥s comando
            backtrack (bool): Se deve usar backtrack
            
        Returns:
            bool: True se comando foi executado com sucesso
            
        Examples:
            >>> success = bot.keyboard_command('Ctrl+S', delay=1, backtrack=True)
            >>> success = bot.keyboard_command('F7', backtrack=True)  # Oracle Forms
        """
        if backtrack:
            return self._execute_with_individual_backtrack(
                'keyboard_command', self._keyboard_command_internal,
                command, delay, backtrack=backtrack
            )
        
        return self._keyboard_command_internal(command, delay)

    def _keyboard_command_internal(self, command, delay):
        """Implementa√ß√£o interna do comando de teclado."""
        try:
            success = self.executor.keyboard_commander.execute_command(command)
            if delay > 0:
                time.sleep(delay)
            return success
        except Exception as e:
            logger.error(f"Erro ao executar comando '{command}': {e}")
            return False

    def get_available_keyboard_commands(self):
        """
        Retorna lista de comandos de teclado dispon√≠veis.
        
        Returns:
            list: Lista com todos os comandos dispon√≠veis
            
        Examples:
            >>> commands = bot.get_available_keyboard_commands()
            >>> print(f"Comandos dispon√≠veis: {len(commands)}")
            >>> for cmd in commands[:10]:  # Mostra primeiros 10
            ...     print(f"  - {cmd}")
        """
        return self.executor.keyboard_commander.get_available_commands()

    def _process_sendtext(self, sendtext):
        """
        Processa comandos especiais no sendtext e digita o texto.
        
        Args:
            sendtext (str): Texto com comandos especiais como {ctrl}a, {del}, etc.
        """
        import pyautogui
        import pyperclip
        import time
        
        text_to_write = sendtext
        commands_processed = True
        
        while commands_processed:
            commands_processed = False
            lower_text = text_to_write.lower()
            
            if lower_text.startswith('{ctrl}a'):
                pyautogui.hotkey('ctrl', 'a')
                text_to_write = text_to_write[7:]  # Remove '{ctrl}a'
                commands_processed = True
                time.sleep(0.1)
                
            elif lower_text.startswith('{del}'):
                pyautogui.press('delete')
                text_to_write = text_to_write[5:]  # Remove '{del}'
                commands_processed = True
                time.sleep(0.1)
                
            elif lower_text.startswith('{tab}'):
                pyautogui.press('tab')
                text_to_write = text_to_write[5:]  # Remove '{tab}'
                commands_processed = True
                time.sleep(0.1)
                
            elif lower_text.startswith('{enter}'):
                pyautogui.press('enter')
                text_to_write = text_to_write[7:]  # Remove '{enter}'
                commands_processed = True
                time.sleep(0.1)
        
        # Digita o texto restante usando clipboard para maior confiabilidade
        if text_to_write:
            try:
                pyperclip.copy(text_to_write)
                pyautogui.hotkey('ctrl', 'v')
            except Exception as e:
                # Fallback para digita√ß√£o direta
                pyautogui.write(text_to_write)
            time.sleep(0.1)

    def execute_with_backtrack_between_tasks(self, tasks_list):
        """
        Executa m√∫ltiplas tarefas individuais com backtrack real entre elas.
        
        Quando uma tarefa falha, volta para a anterior, executa-a, 
        e depois retorna para tentar a que falhou novamente.
        
        Args:
            tasks_list (list): Lista de dicion√°rios com configura√ß√µes de tarefas individuais
                              Cada item deve ter: {'type': 'text'|'image', 'params': {...}}
                              
        Returns:
            list: Lista de resultados booleanos
        """
        if not tasks_list:
            return []
            
        results = []
        i = 0
        backtrack_stack = []
        task_failures = {}
        
        logger.info(f"üöÄ Iniciando execu√ß√£o com backtrack entre {len(tasks_list)} tarefas individuais")
        
        while i < len(tasks_list):
            task_config = tasks_list[i]
            task_type = task_config.get('type')
            params = task_config.get('params', {})
            backtrack_enabled = params.get('backtrack', True)
            
            logger.info(f"üìã Executando tarefa {i+1}/{len(tasks_list)} - Tipo: {task_type}")
            
            success = False
            
            try:
                if task_type == 'text':
                    # Remove backtrack dos params para evitar recurs√£o
                    text_params = params.copy()
                    text_params.pop('backtrack', None)
                    success = self.click_text(**text_params)
                    
                elif task_type == 'image':
                    # Remove backtrack dos params para evitar recurs√£o
                    image_params = params.copy()
                    image_params.pop('backtrack', None)
                    success = self.click_image(**image_params)
                    
                else:
                    logger.error(f"Tipo de tarefa desconhecido: {task_type}")
                    success = False
                    
            except Exception as e:
                logger.error(f"Erro ao executar tarefa {i+1}: {e}")
                success = False
            
            # Ajusta lista de resultados
            while len(results) <= i:
                results.append(False)
            results[i] = success
            
            if success:
                logger.info(f"‚úì Tarefa {i+1}/{len(tasks_list)} executada com sucesso!")
                
                # Verifica se h√° backtracks pendentes na pilha
                if backtrack_stack:
                    # Remove o item da pilha e volta para a tarefa original que falhou
                    original_failed_task = backtrack_stack.pop()
                    logger.info(f"üîÑ Retornando para a tarefa {original_failed_task+1} que originalmente falhou ap√≥s backtrack")
                    i = original_failed_task
                    # Reseta as tentativas de falha para a tarefa original
                    if i in task_failures:
                        task_failures[i] = 0
                else:
                    # Comportamento normal: avan√ßa para a pr√≥xima tarefa
                    i += 1
                    
            else:
                # Tarefa falhou, verifica backtracking
                if backtrack_enabled and i > 0:
                    # Gerencia backtracking
                    task_failures.setdefault(i, 0)
                    task_failures[i] += 1
                    
                    if task_failures[i] <= 2:  # Limita tentativas de backtrack
                        # Adiciona a tarefa atual na pilha de backtrack (para retornar depois)
                        if i not in backtrack_stack:  # Evita duplicatas
                            backtrack_stack.append(i)
                            logger.info(f"üìå Tarefa {i+1} adicionada √† pilha de backtrack para reexecu√ß√£o posterior")
                        
                        prev_task_type = tasks_list[i-1].get('type', 'unknown')
                        logger.info(f"‚úó Tarefa {i+1}/{len(tasks_list)} ({task_type}) falhou. "
                                  f"BACKTRACKING para tarefa {i}/{len(tasks_list)} ({prev_task_type})")
                        i -= 1  # Volta para tarefa anterior (ESTA √â A LINHA CHAVE!)
                    else:
                        logger.info(f"‚úó Tarefa {i+1}/{len(tasks_list)} falhou "
                                  f"ap√≥s m√∫ltiplas tentativas de backtracking. Avan√ßando.")
                        # Remove da pilha se estiver l√°
                        if i in backtrack_stack:
                            backtrack_stack.remove(i)
                        i += 1
                else:
                    # Sem backtrack ou primeira tarefa
                    if backtrack_enabled:
                        logger.info(f"‚úó Tarefa {i+1}/{len(tasks_list)} falhou "
                                  f"mas √© a primeira tarefa. Avan√ßando.")
                    else:
                        logger.info(f"‚úó Tarefa {i+1}/{len(tasks_list)} falhou "
                                  f"e tem 'backtrack': False. Avan√ßando.")
                    i += 1
        
        successful_tasks = sum(1 for r in results if r)
        logger.info(f"üèÅ Execu√ß√£o conclu√≠da: {successful_tasks}/{len(results)} tarefas bem-sucedidas")
        
        return results

# NOVAS FUN√á√ïES DE CONVENI√äNCIA COM BACKTRACK INDIVIDUAL

def start_individual_session(config=None):
    """
    Inicia uma sess√£o de tarefas individuais com backtrack.
    
    Args:
        config (dict, optional): Configura√ß√£o customizada
        
    Returns:
        BotVision: Inst√¢ncia configurada para backtrack individual
    """
    bot = BotVision(config)
    bot.start_task_session()
    return bot


def run_individual_tasks_with_backtrack(task_functions, config=None):
    """
    Executa uma lista de fun√ß√µes de tarefas individuais com backtrack autom√°tico.
    
    Args:
        task_functions (list): Lista de tuplas (fun√ß√£o, args, kwargs)
        config (dict, optional): Configura√ß√£o customizada
        
    Returns:
        tuple: (sucessos, total, bot_instance)
        
    Examples:
        >>> tasks = [
        ...     (lambda bot: bot.click_image('btn.png', backtrack=True), (), {}),
        ...     (lambda bot: bot.click_text('Save', backtrack=True), (), {}),
        ... ]
        >>> success, total, bot = run_individual_tasks_with_backtrack(tasks)
    """
    bot = BotVision(config)
    bot.start_task_session()
    
    results = []
    for i, (func, args, kwargs) in enumerate(task_functions):
        try:
            result = func(bot, *args, **kwargs)
            results.append(result)
            logger.info(f"Tarefa {i+1}: {'‚úì Sucesso' if result else '‚úó Falhou'}")
        except Exception as e:
            logger.error(f"Erro na tarefa {i+1}: {e}")
            results.append(False)
    
    successful, total = bot.end_task_session()
    return successful, total, bot


# Fun√ß√£o principal compat√≠vel com c√≥digo legado
def execute_tasks(tasks, config=None):
    """
    Fun√ß√£o principal para executar lista de tarefas.
    
    Suporta tanto listas simples quanto listas de listas (m√∫ltiplos conjuntos).
    Esta √© a fun√ß√£o que usu√°rios migrados do c√≥digo original v√£o usar.
    
    Args:
        tasks (list): Lista de tarefas de automa√ß√£o ou lista de listas
        config (dict, optional): Configura√ß√£o customizada
        
    Returns:
        list: Lista de TaskResult ou lista de listas de TaskResult
        
    Examples:
        Lista simples:
        >>> tasks = [{'text': 'Login', 'region': (100, 100, 500, 300)}]
        >>> results = execute_tasks(tasks)
        
        M√∫ltiplas listas:
        >>> task_sets = [
        ...     [{'text': 'Login', 'region': (100, 100, 500, 300)}],
        ...     [{'text': 'Save', 'region': (200, 200, 600, 400)}]
        ... ]
        >>> results = execute_tasks(task_sets)
    """
    if not isinstance(tasks, list):
        logger.error(f"As tarefas devem ser uma lista. Tipo recebido: {type(tasks)}")
        return []
    
    if not tasks:
        logger.info("Lista de tarefas vazia.")
        return []
    
    # Verifica se √© lista de listas
    if isinstance(tasks[0], list):
        # M√∫ltiplos conjuntos de tarefas
        logger.info(f"Detectados m√∫ltiplos conjuntos de tarefas ({len(tasks)} conjuntos). Executando sequencialmente.")
        
        all_results = []
        for i, task_list in enumerate(tasks):
            if isinstance(task_list, list):
                logger.info(f"--- Iniciando conjunto de tarefas {i+1}/{len(tasks)} ({len(task_list)} tarefas) ---")
                bot = BotVision(config)
                results = bot.execute_tasks(task_list)
                all_results.append(results)
                logger.info(f"--- Finalizado conjunto de tarefas {i+1}/{len(tasks)} ---")
            else:
                logger.warning(f"Item {i} na lista principal n√£o √© uma lista de tarefas. Pulando.")
                all_results.append([])
        
        return all_results
    else:
        # Lista simples de tarefas
        bot = BotVision(config)
        return bot.execute_tasks(tasks)


# Fun√ß√£o adicional para compatibilidade total com click_images original
def click_images(tasks, default_confidence=0.9, default_margin=50):
    """
    Fun√ß√£o para compatibilidade total com c√≥digo legado.
    
    Esta fun√ß√£o replica exatamente o comportamento da fun√ß√£o click_images
    do bot_vision.py original, incluindo suporte a listas de listas.
    
    Args:
        tasks: Lista de tarefas ou lista de listas de tarefas
        default_confidence (float): Confian√ßa padr√£o para detec√ß√£o de imagens
        default_margin (int): Margem padr√£o (mantido para compatibilidade)
        
    Returns:
        list: Lista de resultados
    """
    # Cria configura√ß√£o com valores padr√£o compat√≠veis
    config = {
        'default_confidence': default_confidence,
        'default_margin': default_margin,
        'tesseract_path': r"C:\Program Files\Tesseract-OCR\tesseract.exe",
        'tessdata_path': r"C:\Program Files\Tesseract-OCR\tessdata"
    }
    
    return execute_tasks(tasks, config)


# Fun√ß√µes standalone para compatibilidade 100% com o c√≥digo original
def locate_image_with_retry(image_path: str, region=None, confidence=0.9, max_attempts=3, scales=None):
    """
    Fun√ß√£o standalone que replica exatamente a fun√ß√£o original do bot_vision.py.
    Tenta localizar uma imagem com diferentes escalas e n√≠veis de confian√ßa.
    """
    executor = TaskExecutor()
    return executor._locate_image_with_retry(image_path, region, confidence, max_attempts, scales)


# Fun√ß√µes de conveni√™ncia standalone - NOVAS FUNCIONALIDADES
def find_relative_image(anchor_image, target_image, max_distance=200, confidence=0.9, target_region=None,
                       wait_until_found=False, wait_until_disappears=False, wait_timeout=None):
    """
    Fun√ß√£o standalone para encontrar imagem relativa.
    
    Args:
        anchor_image (str): Caminho para imagem √¢ncora
        target_image (str): Caminho para imagem target
        max_distance (int): Dist√¢ncia m√°xima em pixels
        confidence (float): N√≠vel de confian√ßa
        target_region (tuple, optional): Regi√£o para buscar target
        wait_until_found (bool): üÜï v1.3.0+ - Aguarda imagem aparecer automaticamente
        wait_until_disappears (bool): üÜï v1.3.0+ - Aguarda imagem desaparecer
        wait_timeout (int, optional): üÜï v1.3.0+ - Timeout espec√≠fico (sobrescreve global)

    Returns:
        tuple: Localiza√ß√£o da imagem ou None

    Examples:
        >>> location = find_relative_image('anchor.png', 'target.png')
    """
    bot = BotVision()
    return bot.find_relative_image(anchor_image, target_image, max_distance, confidence, target_region,
                                  wait_until_found, wait_until_disappears, wait_timeout)


def click_relative_image(anchor_image, target_image, max_distance=200, confidence=0.9,
                        target_region=None, delay=0, mouse_button="left", backtrack=False,
                        wait_until_found=False, wait_until_disappears=False, wait_timeout=None):
    """
    Fun√ß√£o standalone para clicar em imagem relativa.
    
    Args:
        anchor_image (str): Caminho para imagem √¢ncora
        target_image (str): Caminho para imagem target  
        max_distance (int): Dist√¢ncia m√°xima em pixels
        confidence (float): N√≠vel de confian√ßa (0.0-1.0)
        target_region (tuple, optional): Regi√£o para buscar target (x, y, width, height)
        delay (float): Delay ap√≥s clique em segundos
        mouse_button (str): Tipo de clique do mouse:
            ‚Ä¢ "left" - Clique simples esquerdo (padr√£o)
            ‚Ä¢ "right" - Clique direito
            ‚Ä¢ "double" ou "double left" - Clique duplo esquerdo
            ‚Ä¢ "move_to" - Apenas move o mouse sem clicar
        backtrack (bool): Se deve usar backtrack em caso de falha
        
    Returns:
        bool: True se clicou com sucesso, False caso contr√°rio
        
    Examples:
        >>> # Clique simples esquerdo
        >>> success = click_relative_image('anchor.png', 'target.png')
        
        >>> # Clique direito
        >>> success = click_relative_image('anchor.png', 'target.png', 
        ...                              mouse_button="right", backtrack=True)
        
        >>> # Clique duplo esquerdo  
        >>> success = click_relative_image('anchor.png', 'target.png',
        ...                              mouse_button="double", delay=1.0)
        
        >>> # Apenas move o mouse para a posi√ß√£o (sem clicar)
        >>> success = click_relative_image('anchor.png', 'target.png',
        ...                              mouse_button="move_to", delay=0.5)

        Args adicionais v1.3.0+:
            wait_until_found (bool): Aguarda imagem aparecer automaticamente
            wait_until_disappears (bool): Aguarda imagem desaparecer
            wait_timeout (int, optional): Timeout espec√≠fico (sobrescreve global)
    """
    bot = BotVision()
    return bot.click_relative_image(anchor_image, target_image, max_distance, confidence,
                                   target_region, delay, mouse_button, backtrack, 3,
                                   wait_until_found, wait_until_disappears, wait_timeout)


def click_coordinates(x, y, delay=0, mouse_button="left", backtrack=False):
    """
    Fun√ß√£o standalone para clicar em coordenadas espec√≠ficas.
    
    Args:
        x (int): Coordenada X
        y (int): Coordenada Y
        delay (float): Delay ap√≥s clique em segundos
        mouse_button (str): Tipo de clique do mouse:
            ‚Ä¢ "left" - Clique simples esquerdo (padr√£o)
            ‚Ä¢ "right" - Clique direito
            ‚Ä¢ "double" ou "double left" - Clique duplo esquerdo
            ‚Ä¢ "move_to" - Apenas move o mouse sem clicar
        backtrack (bool): Se deve usar backtrack em caso de falha
        
    Returns:
        bool: True se clicou com sucesso, False caso contr√°rio
        
    Examples:
        >>> # Clique simples
        >>> success = click_coordinates(100, 200, delay=1)
        
        >>> # Clique direito
        >>> success = click_coordinates(100, 200, mouse_button="right", backtrack=True)
        
        >>> # Apenas move o mouse para a posi√ß√£o (sem clicar)
        >>> success = click_coordinates(100, 200, mouse_button="move_to", delay=0.5)
    """
    bot = BotVision()
    return bot.click_coordinates(x, y, delay, mouse_button, backtrack)


def type_text_standalone(text, interval=0.05, delay=0, backtrack=False):
    """
    Fun√ß√£o standalone para digitar texto.
    
    Args:
        text (str): Texto a digitar
        interval (float): Intervalo entre caracteres
        delay (float): Delay ap√≥s digita√ß√£o
        backtrack (bool): Se deve usar backtrack
        
    Returns:
        bool: True se digitou com sucesso
        
    Examples:
        >>> success = type_text_standalone('Hello World!', backtrack=True)
        >>> success = type_text_standalone('{ctrl}a{del}New text', backtrack=True)
    """
    bot = BotVision()
    return bot.type_text(text, interval, delay, backtrack)


def keyboard_command_standalone(command, delay=0, backtrack=False):
    """
    Fun√ß√£o standalone para executar comando de teclado.
    
    Args:
        command (str): Comando a executar
        delay (float): Delay ap√≥s comando
        backtrack (bool): Se deve usar backtrack
        
    Returns:
        bool: True se executou com sucesso
        
    Examples:
        >>> success = keyboard_command_standalone('Ctrl+S', delay=1, backtrack=True)
        >>> success = keyboard_command_standalone('F7', backtrack=True)
    """
    bot = BotVision()
    return bot.keyboard_command(command, delay, backtrack)


def get_available_keyboard_commands():
    """
    Fun√ß√£o standalone para obter comandos de teclado dispon√≠veis.
    
    Returns:
        list: Lista de comandos dispon√≠veis
        
    Examples:
        >>> commands = get_available_keyboard_commands()
        >>> print(f"Total de comandos: {len(commands)}")
    """
    bot = BotVision()
    return bot.get_available_keyboard_commands()


def extract_text_from_region_standalone(region=None, filter_type="both", confidence_threshold=50.0, 
                                        return_full_data=False, max_attempts=3, backtrack=False, config=None):
    """
    Fun√ß√£o standalone para extrair texto de uma regi√£o espec√≠fica da tela.
    
    Args:
        region (tuple, optional): (x, y, width, height) da regi√£o para extrair texto.
                                Se None, extrai da tela inteira
        filter_type (str): Tipo de filtro ("numbers", "letters", "both")
        confidence_threshold (float): Limiar m√≠nimo de confian√ßa (0-100)
        return_full_data (bool): Se True, retorna dados completos com coordenadas
        max_attempts (int): N√∫mero m√°ximo de tentativas se backtrack=True
        backtrack (bool): Se deve tentar m√∫ltiplas vezes com ajustes
        config (dict or BotVisionConfig, optional): Configura√ß√£o customizada
        
    Returns:
        Se return_full_data=False:
            list: Lista de strings com todo texto encontrado
        Se return_full_data=True:
            list: Lista de dicion√°rios com dados completos
            
    Examples:
        Extra√ß√£o simples:
        >>> texts = extract_text_from_region_standalone(region=(100, 100, 400, 300))
        >>> print("Textos encontrados:", texts)
        
        Extra√ß√£o com dados completos:
        >>> data = extract_text_from_region_standalone(
        ...     region=(100, 100, 400, 300),
        ...     return_full_data=True,
        ...     confidence_threshold=70.0,
        ...     backtrack=True
        ... )
        >>> for item in data:
        ...     print(f"'{item['text']}' - Confian√ßa: {item['confidence']:.1f}%")
        
        Apenas n√∫meros:
        >>> numbers = extract_text_from_region_standalone(
        ...     region=(50, 50, 200, 100),
        ...     filter_type="numbers"
        ... )
    """
    bot = BotVision(config=config)
    return bot.extract_text_from_region(
        region=region,
        filter_type=filter_type,
        confidence_threshold=confidence_threshold,
        return_full_data=return_full_data,
        max_attempts=max_attempts,
        backtrack=backtrack
    )


# Fun√ß√£o para compatibilidade total - execu√ß√£o de tarefas com suporte a listas m√∫ltiplas
def run_automation(tasks, default_confidence=0.9, default_margin=50):
    """
    Fun√ß√£o que replica o comportamento exato do if __name__ == '__main__' do bot_vision.py original.
    Suporta tanto lista simples quanto lista de listas (m√∫ltiplos conjuntos de tarefas).
    
    Args:
        tasks: Lista de tarefas ou lista de listas de tarefas (como no original)
        default_confidence (float): Confian√ßa padr√£o
        default_margin (int): Margem padr√£o
    """
    import logging
    
    # Verifica se tasks √© uma lista e n√£o est√° vazia
    if isinstance(tasks, list) and tasks:
        # Verifica se o primeiro elemento tamb√©m √© uma lista (indicando lista de listas)
        if isinstance(tasks[0], list):
            logging.info(f"Detected multiple task lists ({len(tasks)} lists). Executing sequentially.")
            # Itera atrav√©s de cada lista de tarefas
            for i, task_list in enumerate(tasks):
                if isinstance(task_list, list):
                    logging.info(f"--- Starting task list {i+1}/{len(tasks)} ({len(task_list)} tasks) ---")
                    click_images(task_list, default_confidence, default_margin)  # Passa a lista individual para a fun√ß√£o
                    logging.info(f"--- Finished task list {i+1}/{len(tasks)} ---")
                else:
                    logging.warning(f"Item {i} in the main list is not a list of tasks. Skipping.")
        else:
            # Assume que √© uma √∫nica lista plana de tarefas
            logging.info("Detected a single task list. Executing.")
            click_images(tasks, default_confidence, default_margin)
    elif isinstance(tasks, list) and not tasks:
        logging.info("The imported 'tasks' list is empty. Nothing to execute.")
    else:
        logging.error(f"The imported 'tasks' is not a list. Type: {type(tasks)}. Cannot execute.")

# Lista de s√≠mbolos exportados
__all__ = [
    # Classe principal
    "BotVision",
    
    # Fun√ß√µes principais de execu√ß√£o
    "execute_tasks",
    "run_automation",
    "click_images",  # Compatibilidade com c√≥digo legado
    
    # Fun√ß√µes de backtrack individual (NOVO!)
    "start_individual_session",
    "run_individual_tasks_with_backtrack",
    
    # Fun√ß√µes b√°sicas de conveni√™ncia
    "find_text",
    "click_text", 
    "find_image",
    "click_image",
    "type_text",
    "click_at",
    
    # Fun√ß√µes avan√ßadas de conveni√™ncia (com todas as funcionalidades)
    "click_text_advanced",
    "click_image_advanced", 
    "find_text_advanced",
    "find_image_advanced",
    
    # Classes core
    "TaskExecutor",
    "TaskResult", 
    "OCREngine",
    "OCRResult",
    "ImageProcessor",
    "VisualOverlay",
    "BotVisionConfig",
    
    # Fun√ß√µes auxiliares
    "show_overlay",
    "limpar_texto",
    "matches_filter",
    "get_default_config",
    
    # Fun√ß√µes standalone para compatibilidade 100%
    "locate_image_with_retry",
    "preprocess_image_for_ocr", 
    "find_text_with_multiple_preprocessing",
    
    # Exce√ß√µes
    "BotVisionError",
    "TesseractNotFoundError", 
    "ImageNotFoundError",
    "TextNotFoundError",
    "TaskExecutionError",
    "ConfigurationError",
    "OCRProcessingError",
    "ImageProcessingError",
]

# Configura√ß√£o inicial da biblioteca
def _setup_library():
    """Configura√ß√£o inicial da biblioteca."""
    try:
        # Configura logging se n√£o estiver configurado
        if not logging.getLogger().handlers:
            logging.basicConfig(
                level=logging.INFO,
                format="[%(levelname)s] %(name)s: %(message)s"
            )
        
        # Tenta configurar a biblioteca com configura√ß√£o padr√£o
        config = get_default_config()
        logger.debug(f"Bot Vision Suite v{__version__} inicializada")
        
    except Exception as e:
        logger.warning(f"Aviso na inicializa√ß√£o da biblioteca: {e}")

# Executa configura√ß√£o inicial
_setup_library()

# Fun√ß√µes standalone de conveni√™ncia (criam inst√¢ncia tempor√°ria do BotVision)
def find_text(text, region=None, filter_type="both", confidence_threshold=75.0,
              occurrence=1, max_attempts=3, config=None, wait_until_found=False,
              wait_until_disappears=False, wait_timeout=None):
    """
    Busca texto na tela usando uma inst√¢ncia tempor√°ria do BotVision.

    Args:
        text (str): Texto a ser encontrado
        region (tuple, optional): Regi√£o de busca (x, y, width, height)
        filter_type (str): Tipo de filtro ("letters", "numbers", "both")
        confidence_threshold (float): Limiar de confian√ßa OCR
        occurrence (int): Qual ocorr√™ncia buscar (1=primeira)
        max_attempts (int): N√∫mero m√°ximo de tentativas
        config (dict, optional): Configura√ß√£o personalizada
        wait_until_found (bool): üÜï v1.3.0+ - Aguarda texto aparecer automaticamente
        wait_until_disappears (bool): üÜï v1.3.0+ - Aguarda texto desaparecer
        wait_timeout (int, optional): üÜï v1.3.0+ - Timeout espec√≠fico (sobrescreve global)

    Returns:
        tuple: Coordenadas encontradas ou None
    """
    bot = BotVision(config)
    return bot.find_text(text, region, filter_type, confidence_threshold, occurrence, max_attempts,
                        wait_until_found=wait_until_found, wait_until_disappears=wait_until_disappears,
                        wait_timeout=wait_timeout)


def click_text(text, region=None, filter_type="both", delay=0, mouse_button="left",
               occurrence=1, max_attempts=3, sendtext=None, confidence_threshold=None,
               show_overlay=True, config=None, wait_until_found=False,
               wait_until_disappears=False, wait_timeout=None):
    """
    Clica em texto usando uma inst√¢ncia tempor√°ria do BotVision.
    
    Args:
        text (str): Texto a ser clicado
        region (tuple, optional): Regi√£o de busca (x, y, width, height)
        filter_type (str): Tipo de filtro ("letters", "numbers", "both")
        delay (float): Delay ap√≥s o clique em segundos
        mouse_button (str): Tipo de clique do mouse:
            ‚Ä¢ "left" - Clique simples esquerdo (padr√£o)
            ‚Ä¢ "right" - Clique direito
            ‚Ä¢ "double" ou "double left" - Clique duplo esquerdo
            ‚Ä¢ "move_to" - Apenas move o mouse sem clicar
        occurrence (int): Qual ocorr√™ncia clicar (1=primeira)
        max_attempts (int): N√∫mero m√°ximo de tentativas
        sendtext (str, optional): Texto para digitar ap√≥s o clique
        confidence_threshold (float, optional): Limiar de confian√ßa customizado
        show_overlay (bool): Se deve exibir o overlay vermelho antes do clique
        config (dict, optional): Configura√ß√£o personalizada
        wait_until_found (bool): üÜï v1.3.0+ - Aguarda texto aparecer automaticamente
        wait_until_disappears (bool): üÜï v1.3.0+ - Aguarda texto desaparecer
        wait_timeout (int, optional): üÜï v1.3.0+ - Timeout espec√≠fico (sobrescreve global)

    Returns:
        bool: True se encontrou e clicou, False caso contr√°rio
    """
    bot = BotVision(config)
    return bot.click_text(text, region, filter_type, delay, mouse_button, occurrence,
                         False, max_attempts, sendtext, confidence_threshold, show_overlay,
                         wait_until_found, wait_until_disappears, wait_timeout)


def find_image(image_path, region=None, confidence=0.9, max_attempts=3,
               specific=True, scales=None, config=None, wait_until_found=False,
               wait_until_disappears=False, wait_timeout=None):
    """
    Busca imagem na tela usando uma inst√¢ncia tempor√°ria do BotVision.
    
    Args:
        image_path (str): Caminho para a imagem
        region (tuple, optional): Regi√£o de busca
        confidence (float): N√≠vel de confian√ßa
        max_attempts (int): N√∫mero m√°ximo de tentativas
        specific (bool): Se True, busca na regi√£o; se False, busca na tela inteira + varia√ß√µes
        scales (list, optional): Lista de escalas para tentar
        config (dict, optional): Configura√ß√£o personalizada
        wait_until_found (bool): üÜï v1.3.0+ - Aguarda imagem aparecer automaticamente
        wait_until_disappears (bool): üÜï v1.3.0+ - Aguarda imagem desaparecer
        wait_timeout (int, optional): üÜï v1.3.0+ - Timeout espec√≠fico (sobrescreve global)

    Returns:
        tuple: Coordenadas da imagem ou None
    """
    bot = BotVision(config)
    return bot.find_image(image_path, region, confidence, max_attempts, False, specific,
                         wait_until_found, wait_until_disappears, wait_timeout, scales)


def click_image(image_path, region=None, confidence=0.9, delay=0, mouse_button="left",
                max_attempts=3, specific=True, sendtext=None, show_overlay=True, config=None,
                wait_until_found=False, wait_until_disappears=False, wait_timeout=None):
    """
    Clica em imagem usando uma inst√¢ncia tempor√°ria do BotVision.
    
    Args:
        image_path (str): Caminho para a imagem
        region (tuple, optional): Regi√£o de busca (x, y, width, height)
        confidence (float): N√≠vel de confian√ßa (0.0-1.0)
        delay (float): Delay ap√≥s o clique em segundos
        mouse_button (str): Tipo de clique do mouse:
            ‚Ä¢ "left" - Clique simples esquerdo (padr√£o)
            ‚Ä¢ "right" - Clique direito
            ‚Ä¢ "double" ou "double left" - Clique duplo esquerdo
            ‚Ä¢ "move_to" - Apenas move o mouse sem clicar
        max_attempts (int): N√∫mero m√°ximo de tentativas
        specific (bool): Se True, busca na regi√£o; se False, busca na tela inteira + varia√ß√µes
        sendtext (str, optional): Texto para digitar ap√≥s o clique
        show_overlay (bool): Se deve exibir o overlay vermelho antes do clique
        config (dict, optional): Configura√ß√£o personalizada
        wait_until_found (bool): üÜï v1.3.0+ - Aguarda imagem aparecer automaticamente
        wait_until_disappears (bool): üÜï v1.3.0+ - Aguarda imagem desaparecer
        wait_timeout (int, optional): üÜï v1.3.0+ - Timeout espec√≠fico (sobrescreve global)

    Returns:
        bool: True se encontrou e clicou, False caso contr√°rio
    """
    bot = BotVision(config)
    return bot.click_image(image_path, region, confidence, delay, mouse_button,
                          max_attempts, False, specific, sendtext, show_overlay,
                          wait_until_found, wait_until_disappears, wait_timeout)


def click_at(location, mouse_button="left", delay=0, show_overlay=True, config=None):
    """
    Clica em coordenadas espec√≠ficas usando uma inst√¢ncia tempor√°ria do BotVision.
    
    Args:
        location (tuple): (x, y, width, height) da localiza√ß√£o
        mouse_button (str): Bot√£o do mouse ("left", "right", "double", "move_to")
        delay (float): Delay ap√≥s o clique
        show_overlay (bool): Se deve exibir o overlay vermelho antes do clique
        config (dict, optional): Configura√ß√£o personalizada
        
    Returns:
        bool: True se clicou com sucesso
    """
    bot = BotVision(config)
    return bot.click_at(location, mouse_button, delay, show_overlay)


def type_text(text, config=None):
    """
    Digita texto usando uma inst√¢ncia tempor√°ria do BotVision.
    
    Args:
        text (str): Texto a ser digitado (suporta comandos especiais)
        config (dict, optional): Configura√ß√£o personalizada
        
    Returns:
        bool: True se digitou com sucesso
    """
    bot = BotVision(config)
    return bot.type_text(text)


# EXPORTA√á√ïES PRINCIPAIS
__all__ = [
    # Classe principal
    "BotVision",
    
    # Fun√ß√µes de execu√ß√£o de tarefas
    "execute_tasks",
    "click_images",  # Compatibilidade total com c√≥digo legado
    "run_automation",  # Compatibilidade com if __name__ == '__main__'
    
    # Fun√ß√µes de conveni√™ncia b√°sicas
    "find_text",
    "click_text", 
    "find_image",
    "click_image",
    "click_at",
    "type_text",
    
    # NOVAS FUNCIONALIDADES - Fun√ß√µes de conveni√™ncia para imagem relativa
    "find_relative_image",
    "click_relative_image",
    
    # NOVAS FUNCIONALIDADES - Fun√ß√µes de conveni√™ncia para coordenadas
    "click_coordinates",
    
    # NOVAS FUNCIONALIDADES - Fun√ß√µes de conveni√™ncia para teclado
    "type_text_standalone", 
    "keyboard_command_standalone",
    "get_available_keyboard_commands",
    
    # NOVA FUNCIONALIDADE - Extra√ß√£o de texto
    "extract_text_from_region_standalone",
    
    # Fun√ß√µes de backtrack individual
    "start_individual_session",
    "run_individual_tasks_with_backtrack",
    
    # Classes de core (para uso avan√ßado)
    "TaskExecutor",
    "TaskResult", 
    "OCREngine",
    "OCRResult",
    "ImageProcessor",
    "VisualOverlay",
    "RelativeImageDetector",  # NOVA
    "KeyboardCommander",      # NOVA
    
    # Utilit√°rios
    "BotVisionConfig",
    "get_default_config",
    "limpar_texto",
    "matches_filter",
    
    # Fun√ß√µes de processamento standalone (compatibilidade)
    "preprocess_image_for_ocr",
    "find_text_with_multiple_preprocessing",
    "show_overlay",
    "locate_image_with_retry",
    
    # Exce√ß√µes
    "BotVisionError",
    "ImageNotFoundError", 
    "TextNotFoundError",
    "TaskExecutionError",
    "ImageProcessingError",
    "OCRError",
    "ConfigurationError",
    
    # Informa√ß√µes da biblioteca
    "__version__",
    "__author__",
    "__email__",
    "__license__"
]
