"""
–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç H1Stars (FastAPI + async)
"""

import asyncio
import json
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
from h1stars_sdk import H1StarsClient
import uvicorn

app = FastAPI(title="H1Stars Webhook Handler")

# –í–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook –ø–æ–¥–ø–∏—Å–µ–π
WEBHOOK_SECRET = "your_webhook_secret_here"


@app.post("/webhook")
async def handle_webhook(request: Request):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç H1Stars"""

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        payload = await request.body()
        payload_str = payload.decode('utf-8')
        signature = request.headers.get('X-Signature', '')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å webhook
        if not H1StarsClient.verify_webhook_signature(payload_str, signature, WEBHOOK_SECRET):
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook!")
            raise HTTPException(status_code=400, detail="Invalid signature")

        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ webhook
        webhook_data = json.loads(payload_str)

        print(f"üì® –ü–æ–ª—É—á–µ–Ω webhook: {webhook_data['event']}")
        print(f"Payment ID: {webhook_data['payment_id']}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        if webhook_data['event'] == 'payment.completed':
            await handle_payment_completed(webhook_data)

        elif webhook_data['event'] == 'payment.expired':
            await handle_payment_expired(webhook_data)

        else:
            print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {webhook_data['event']}")

        return JSONResponse({"status": "ok"})

    except json.JSONDecodeError:
        print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ webhook")
        raise HTTPException(status_code=400, detail="Invalid JSON")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        raise HTTPException(status_code=500, detail="Internal error")


async def handle_payment_completed(webhook_data):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""

    payment_id = webhook_data['payment_id']
    amount = webhook_data['amount']
    user_id = webhook_data['user_id']

    print(f"üí∞ –ü–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!")
    print(f"–°—É–º–º–∞: {amount} RUB")
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")

    # –ó–¥–µ—Å—å –≤–∞—à–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞:
    # - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # - –í—ã–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–≤–∞—Ä/—É—Å–ª—É–≥—É
    # - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    # - –ó–∞–ø–∏—Å–∞—Ç—å –≤ –ª–æ–≥

    # –ü—Ä–∏–º–µ—Ä —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:
    # async with get_db_session() as db:
    #     order = await db.get(Order, payment_id=payment_id)
    #     order.status = 'paid'
    #     await db.commit()
    #
    #     user = await db.get(User, id=user_id)
    #     user.balance += amount
    #     await db.commit()

    # –ü—Ä–∏–º–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    # await send_notification(user_id, f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ {amount} RUB —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")


async def handle_payment_expired(webhook_data):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""

    payment_id = webhook_data['payment_id']
    user_id = webhook_data['user_id']

    print(f"‚è∞ –ü–ª–∞—Ç–µ–∂ {payment_id} –∏—Å—Ç–µ–∫")
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")

    # –ó–¥–µ—Å—å –≤–∞—à–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞:
    # - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
    # - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–ø–ª–∞—Ç—ã

    # await send_notification(user_id, "–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.")


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "healthy", "service": "H1Stars Webhook Handler"}


async def background_payment_checker():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π"""

    async with H1StarsClient(api_key="your_api_key_here") as client:
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
                balance = await client.get_partner_balance()
                print(f"üìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance['available_for_withdrawal']} RUB")

                await asyncio.sleep(60)

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
                await asyncio.sleep(10)


@app.on_event("startup")
async def startup_event():
    """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞...")
    print("üì° Webhook URL: http://localhost:8000/webhook")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    asyncio.create_task(background_payment_checker())


if __name__ == "__main__":
    uvicorn.run(
        "webhook_handler:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )