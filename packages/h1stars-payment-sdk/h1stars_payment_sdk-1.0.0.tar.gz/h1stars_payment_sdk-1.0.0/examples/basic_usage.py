"""
–ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è H1Stars SDK (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
"""

import asyncio
from h1stars_sdk import H1StarsClient, H1StarsError


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º async context manager –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π
    async with H1StarsClient(api_key="your_api_key_here") as client:
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            print("–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...")
            payment = await client.create_payment(
                amount=100.50,
                description="–ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ –≤ –∏–≥—Ä–µ",
                user_id="user123",
                callback_url="https://yoursite.com/webhook",
                return_url="https://yoursite.com/success"
            )

            print("‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"Payment ID: {payment['payment_id']}")
            print(f"Payment URL: {payment['payment_url']}")
            print(f"Amount: {payment['amount']} RUB")
            print(f"Status: {payment['status']}")
            print(f"Expires at: {payment['expires_at']}")

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ payment_url –¥–ª—è –æ–ø–ª–∞—Ç—ã
            print(f"\nüîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞: {payment['payment_url']}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
            print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment['payment_id']}...")
            payment_status = await client.get_payment(payment['payment_id'])

            print(f"Status: {payment_status['status']}")
            print(f"Created at: {payment_status['created_at']}")

            if payment_status['status'] == 'completed':
                print("üí∞ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!")

        except H1StarsError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ H1Stars: {e}")

        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")


async def multiple_payments_example():
    """–ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""

    async with H1StarsClient(api_key="your_api_key_here") as client:
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–∂–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            tasks = [
                client.create_payment(
                    amount=100.0 + i * 10,
                    description=f"–ü–ª–∞—Ç–µ–∂ #{i+1}",
                    user_id=f"user_{i+1}"
                )
                for i in range(3)
            ]

            payments = await asyncio.gather(*tasks)

            print("‚úÖ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —Å–æ–∑–¥–∞–Ω—ã:")
            for payment in payments:
                print(f"- {payment['payment_id']}: {payment['amount']} RUB")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
    asyncio.run(main())

    # –ü—Ä–∏–º–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    print("\n" + "="*50)
    print("–ü—Ä–∏–º–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π:")
    asyncio.run(multiple_payments_example())