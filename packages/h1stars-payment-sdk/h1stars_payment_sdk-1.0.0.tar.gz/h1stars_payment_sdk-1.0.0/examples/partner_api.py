"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–≥–æ API H1Stars (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
"""

import asyncio
from h1stars_sdk import H1StarsClient, H1StarsError
from datetime import datetime, timedelta


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–º API"""

    async with H1StarsClient(api_key="your_api_key_here") as client:
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            print("üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞...")
            balance = await client.get_partner_balance()

            print(f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {balance['balance']} {balance['currency']}")
            print(f"–í –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–≤–æ–¥–∞: {balance['pending_withdrawals']} {balance['currency']}")
            print(f"–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: {balance['available_for_withdrawal']} {balance['currency']}")
            print(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {balance['last_updated']}")

            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
            if balance['available_for_withdrawal'] >= 1000:
                print("\nüí≥ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥...")

                withdrawal = await client.create_withdrawal(
                    amount=1000.00,
                    payment_method="card",
                    card_number="4111111111111111",
                    cardholder_name="IVAN PETROV"
                )

                print("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!")
                print(f"–°—É–º–º–∞: {withdrawal.get('amount', 'N/A')}")
                print(f"–°—Ç–∞—Ç—É—Å: {withdrawal.get('status', 'N/A')}")

            else:
                print(f"‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ (–º–∏–Ω–∏–º—É–º 1000 RUB)")

            # –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            print("\nüìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π...")

            date_from = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
            date_to = datetime.now().strftime('%Y-%m-%d')

            transactions = await client.get_partner_transactions(
                limit=10,
                offset=0,
                date_from=date_from,
                date_to=date_to
            )

            if 'transactions' in transactions and transactions['transactions']:
                print(f"–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transactions['transactions'])}")

                for transaction in transactions['transactions'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"- {transaction.get('date', 'N/A')}: {transaction.get('amount', 'N/A')} RUB "
                          f"({transaction.get('type', 'N/A')}) - {transaction.get('description', 'N/A')}")

            else:
                print("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
            print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...")

            # –ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            current_month = datetime.now().strftime('%Y-%m-01')
            month_transactions = await client.get_partner_transactions(
                date_from=current_month,
                limit=1000
            )

            if 'transactions' in month_transactions:
                month_total = sum(
                    float(t.get('amount', 0))
                    for t in month_transactions['transactions']
                    if t.get('type') == 'payment'
                )
                print(f"–î–æ—Ö–æ–¥ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {month_total:.2f} RUB")

        except H1StarsError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ H1Stars API: {e}")

        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")


async def parallel_requests_example():
    """–ü—Ä–∏–º–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–º—É API"""

    async with H1StarsClient(api_key="your_api_key_here") as client:
        try:
            print("üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ...")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            balance_task = client.get_partner_balance()

            # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
            current_month = datetime.now().strftime('%Y-%m-01')
            last_month = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')

            current_month_task = client.get_partner_transactions(
                date_from=current_month,
                limit=100
            )

            last_month_task = client.get_partner_transactions(
                date_from=last_month,
                date_to=current_month,
                limit=100
            )

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            balance, current_transactions, last_transactions = await asyncio.gather(
                balance_task,
                current_month_task,
                last_month_task,
                return_exceptions=True
            )

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if isinstance(balance, dict):
                print(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance['available_for_withdrawal']} RUB")

            if isinstance(current_transactions, dict):
                current_count = len(current_transactions.get('transactions', []))
                print(f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥: {current_count}")

            if isinstance(last_transactions, dict):
                last_count = len(last_transactions.get('transactions', []))
                print(f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø—Ä–æ—à–ª—ã–π –ø–µ—Ä–∏–æ–¥: {last_count}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")


async def monitoring_example():
    """–ü—Ä–∏–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""

    async with H1StarsClient(api_key="your_api_key_here") as client:
        print("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)...")

        try:
            while True:
                balance = await client.get_partner_balance()
                print(f"[{datetime.now().strftime('%H:%M:%S')}] "
                      f"–ë–∞–ª–∞–Ω—Å: {balance['available_for_withdrawal']} RUB")

                # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(30)

        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")


if __name__ == "__main__":
    # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–º–µ—Ä
    print("=== –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–º–µ—Ä ===")
    asyncio.run(main())

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    print("\n=== –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã ===")
    asyncio.run(parallel_requests_example())

    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
    # print("\n=== –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ===")
    # asyncio.run(monitoring_example())