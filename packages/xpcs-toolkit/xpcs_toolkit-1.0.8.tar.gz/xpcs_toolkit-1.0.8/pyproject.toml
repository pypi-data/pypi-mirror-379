[build-system]
requires = ["setuptools>=75.6.0", "setuptools_scm[toml]>=8.2.0"]
build-backend = "setuptools.build_meta"

[project]
name = "xpcs-toolkit"
dynamic = ["version"]
description = "XPCS Toolkit: A python-based interactive tool to visualize and model XPCS dataset"
readme = "README.rst"
requires-python = ">=3.12"
authors = [{name = "Miaoqi Chu", email = "mqichu@anl.gov"}]
maintainers = [{name = "Miaoqi Chu", email = "mqichu@anl.gov"}]

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Natural Language :: English"
]

license = {text = "MIT"}
keywords = ["XPCS", "X-ray", "photon correlation spectroscopy", "synchrotron", "visualization", "science"]

dependencies = [
    "pyside6>=6.8.1",
    "numpy>=2.2.0",
    "scipy>=1.15.0",
    "h5py>=3.12.1",
    "matplotlib>=3.9.3",
    "pyqtgraph>=0.13.7",
    "pandas>=2.2.3",
    "scikit-learn>=1.6.0",
    "joblib>=1.4.2",
    "tqdm>=4.67.1",
    "psutil>=6.1.1",
    "hdf5plugin>=4.5.0"
]

[project.scripts]
xpcs-toolkit = "xpcs_toolkit.cli:main"
pyxpcsviewer = "xpcs_toolkit.cli:main"
run_viewer = "xpcs_toolkit.cli:main"

[project.optional-dependencies]
dev = [
    "coverage[toml]>=7.6.9",
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "pytest-xdist[psutil]>=3.6.1",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.14.0",
    "pytest-timeout>=2.3.1",
    "pytest-sugar>=1.0.0",
    "pytest-html>=4.1.1",
    "pytest-qt>=4.4.0",
    "hypothesis>=6.115.6",
    "mypy>=1.13.0",
    "ruff>=0.8.4",
    "bandit[toml]>=1.8.0",
    "pre-commit>=4.0.1"
]
docs = [
    "sphinx>=8.1.3",
    "sphinx-rtd-theme>=3.0.2",
    "myst-parser>=4.0.0",
    "sphinx-autodoc-typehints>=2.4.4",
    "sphinx-copybutton>=0.5.2"
]
validation = [
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
    "py-spy>=0.3.0"
]
performance = [
    "pytest-benchmark>=4.0.0",
    "memory-profiler>=0.61.0",
    "pympler>=0.9.0"
]
all = [
    # Development tools
    "coverage[toml]>=7.6.9",
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "pytest-xdist[psutil]>=3.6.1",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.14.0",
    "pytest-timeout>=2.3.1",
    "pytest-sugar>=1.0.0",
    "pytest-html>=4.1.1",
    "pytest-qt>=4.4.0",
    "hypothesis>=6.115.6",
    "mypy>=1.13.0",
    "ruff>=0.8.4",
    "bandit[toml]>=1.8.0",
    "pre-commit>=4.0.1",
    # Documentation tools
    "sphinx>=8.1.3",
    "sphinx-rtd-theme>=3.0.2",
    "myst-parser>=4.0.0",
    "sphinx-autodoc-typehints>=2.4.4",
    "sphinx-copybutton>=0.5.2",
    # Validation and profiling tools
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
    "py-spy>=0.3.0",
    "pympler>=0.9.0"
]

[project.urls]
bugs = "https://github.com/imewei/XPCS-Toolkit/issues"
changelog = "https://github.com/imewei/XPCS-Toolkit/blob/master/HISTORY.rst"
homepage = "https://github.com/imewei/XPCS-Toolkit"
repository = "https://github.com/imewei/XPCS-Toolkit.git"
documentation = "https://github.com/imewei/XPCS-Toolkit/tree/master/docs"

[tool.setuptools]

[tool.setuptools_scm]
version_scheme = "post-release"
local_scheme = "node-and-timestamp"

[tool.setuptools.packages.find]
where = ["."]

[tool.setuptools.package-data]
"xpcs_toolkit" = ["configure/*.json", "ui/*.ui", "ui/resources/*.qrc", "ui/resources/*.png"]
"*" = ["*.md", "*.rst", "*.txt", "*.yaml", "*.yml"]

# Mypy
[tool.mypy]
files = "."
strict = true
warn_unreachable = true
warn_no_return = true

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true
disable_error_code = "attr-defined"

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=xpcs_toolkit",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=11",
    "--tb=short",
    "--durations=10"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests across multiple components",
    "performance: Performance and benchmark tests",
    "gui: GUI tests requiring display (may be interactive)",
    "slow: Tests that take more than 1 second",
    "scientific: Tests that verify scientific accuracy and algorithms",
    "parametrize: Parametrized tests with multiple inputs",
    "error_handling: Tests for error conditions and edge cases",
    "end_to_end: Full workflow tests from file load to analysis",
    "memory: Memory usage and leak detection tests",
    "threading: Multithreading and async operation tests",
    "logging: Logging system functionality tests",
    "stress: Resource exhaustion and extreme load tests",
    "edge_cases: Boundary conditions and extreme input tests",
    "system_dependent: Tests that depend on system resources or environment",
    "flaky: Tests that may fail intermittently due to external factors",
    "data_integrity: Tests that verify data accuracy and corruption handling",
    "regression: Regression tests for previously fixed bugs",
    "compatibility: Cross-platform and version compatibility tests",
    "validation: Scientific validation against known results",
    "smoke: Quick smoke tests for basic functionality",
    "critical: Critical path tests that must always pass",
    "requires_data: Tests that require external test data files",
    "requires_display: Tests that require a graphical display",
    "numerical: Tests that verify numerical computation accuracy",
    "file_io: Tests for file input/output operations",
    "plotting: Tests for visualization and plotting functionality",
    "qt_validation: Qt framework validation and compatibility tests",
    "reliability: Reliability framework and robustness tests"
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::RuntimeWarning:numpy.*",
    "ignore::FutureWarning:pandas.*",
    "ignore::UserWarning:matplotlib.*"
]
timeout = 300

# Test suite profiles and execution strategies
# Development profiles:
# pytest -m "smoke" - Quick smoke tests (< 30 seconds)
# pytest -m "unit or integration" - Core tests for development (fast feedback)
# pytest -m "critical" - Must-pass tests for any commit
# pytest -m "scientific and not slow" - Fast scientific validation
#
# CI/CD profiles:
# pytest -m "not (stress or flaky or system_dependent)" - Stable CI tests
# pytest -m "performance" - Performance regression tests
# pytest -m "compatibility" - Cross-platform compatibility tests
#
# Comprehensive profiles:
# pytest -m "not stress" - All tests except stress tests
# pytest - All tests including stress tests
timeout_method = "thread"

# Test execution groups for better organization
# Usage: pytest -m "smoke or (unit and not slow)"
# Available group expressions:
# fast: -m "smoke or (unit and not slow)"
# core: -m "(unit or integration) and not slow"
# scientific: -m "scientific or numerical or validation"
# ci_stable: -m "not (stress or flaky or system_dependent or gui)"
# performance: -m "performance and not stress"
# full_validation: -m "not stress"

# Coverage configuration
[tool.coverage.run]
source = ["xpcs_toolkit"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "xpcs_toolkit/ui/*",  # GUI code hard to test
    "xpcs_toolkit/icons_rc.py",  # Generated resource file
    "*/validation/*",  # Validation scripts
    "*/scripts/*",  # Utility scripts
    "xpcs_toolkit/cli.py",  # CLI entry point (minimal logic)
    "xpcs_toolkit/viewer_ui.py",  # Auto-generated UI code
    "xpcs_toolkit/ui/resources/*",  # Resource files
    "xpcs_toolkit/default_setting.py",  # Configuration constants only
    "xpcs_toolkit/helper/logwriter.py",  # Simple utility class
    "xpcs_toolkit/fileIO/ftype_utils.py",  # File type utilities - rarely used
    "xpcs_toolkit/helper/utils.py",  # Helper utilities with minimal business logic
    "xpcs_toolkit/module/tauq.py",  # Legacy tau-q analysis module
    "xpcs_toolkit/utils/common_checks.py",  # Common validation utilities
    "xpcs_toolkit/utils/performance_monitor.py",  # Performance monitoring utilities
    "xpcs_toolkit/utils/reliability_manager.py",  # Reliability management utilities
    "xpcs_toolkit/utils/startup_optimizer.py",  # Startup optimization utilities
    "xpcs_toolkit/utils/visualization_optimizer.py",  # Visualization optimization utilities
    "xpcs_toolkit/file_locator.py",  # File discovery utility
    "xpcs_toolkit/helper/listmodel.py",  # Qt model utility
    "xpcs_toolkit/module/average_toolbox.py",  # File averaging utilities
    "xpcs_toolkit/threading/*",  # Threading infrastructure modules
    "xpcs_toolkit/utils/health_monitor.py",  # Health monitoring utilities
    "xpcs_toolkit/utils/reliability.py",  # Reliability framework
    "xpcs_toolkit/utils/state_validator.py",  # State validation utilities
    "xpcs_toolkit/utils/validation.py",  # General validation utilities
    "xpcs_toolkit/utils/memory_manager.py",  # Memory management utilities
    "xpcs_toolkit/utils/memory_predictor.py",  # Memory prediction utilities
    "xpcs_toolkit/utils/streaming_processor.py",  # Streaming processing utilities
    "xpcs_toolkit/utils/lazy_loader.py",  # Lazy loading utilities
    "xpcs_toolkit/utils/vectorized_roi.py",  # ROI processing utilities
    "xpcs_toolkit/xpcs_viewer.py",  # Main GUI application - hard to test
    "xpcs_toolkit/viewer_kernel.py",  # Application kernel - GUI dependent
    "xpcs_toolkit/plothandler/*",  # Plot handling modules - GUI dependent
]
branch = true
parallel = true
context = "test"
# Note: dynamic_context removed to fix compatibility with pytest-xdist
# Use --cov-context=test_function on command line if function-level context is needed
concurrency = ["thread", "multiprocessing"]

# Module-specific coverage targets
# Critical scientific modules: 95% minimum
# Core modules: 85% minimum
# Supporting modules: 75% minimum
# GUI modules: 50% minimum (hard to test)

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "raise ValueError\\(.*not implemented.*\\)",
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "@overload",
    "except ImportError:",
    "except ModuleNotFoundError:",
    "if TYPE_CHECKING:",
    "# pragma: no cover",
    "# coverage: ignore",
    "pass  # pragma: no cover",
    "\\.\\.\\.",  # Ellipsis for abstract methods
    "# Qt event loops - hard to test",
    "# GUI initialization - platform specific",
    "app\\.exec\\(\\)",
    "app\\.exec_\\(\\)",
    "QApplication\\.exec\\(\\)",
    "sys\\.exit\\(",
    "# Platform-specific code",
    "if platform\\.system\\(\\)",
    "# Error handling - defensive programming",
    "except Exception as.*:",
    "# Cleanup handlers",
    "try:.*finally:",
]
precision = 2
show_missing = true
skip_covered = false
sort = "Cover"
exclude_also = [
    "def __repr__",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = ["E", "F", "W", "C90", "I", "N", "UP", "S", "B", "A", "C4", "PIE", "T20", "RET", "SIM", "ARG", "ERA", "PL", "RUF"]
ignore = ["E501", "RET504", "S101", "PLR0913"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",    # Use of assert detected (OK in tests)
    "ARG",     # Unused function args (fixtures)
    "FBT",     # Boolean trap (OK in tests)
    "PLR2004", # Magic value used in comparison (OK in tests)
    "SLF001",  # Private member access (OK in tests)
    "T201",    # Print statements (OK in tests)
]
"validation/*" = [
    "T201",    # Print statements (OK in validation scripts)
    "S101",    # Assert statements (OK in validation)
]
"scripts/*" = [
    "T201",    # Print statements (OK in utility scripts)
]

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "validation", "docs", "scripts"]
skips = ["B101", "B601", "B324", "B608", "S110", "S311", "S306", "S314", "S607", "S103", "S112", "S307"]  # Skip security warnings for scientific computing
