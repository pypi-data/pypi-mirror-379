# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
coverage.json
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
bandit_report.json
bandit-report.json
.benchmarks/
.claude
.ruff_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/
docs/build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
activate_venv.sh

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Editor files
*.swp
*.swo
*~
.vscode/
.idea/
*.sublime-project
*.sublime-workspace

# Temporary files
*.tmp
*.temp
*.bak
RELEASE_GUIDE.md
WARP.md

# Security reports
bandit-report.json

# Claude Code Quality Analysis artifacts
bandit-claude-report.json
coverage-claude.json
consistency_report.json
CLAUDE_QUALITY_SUMMARY.json
scripts/claude_quality_report.py
scripts/claude_summary_display.py
CODE_QUALITY_REPORT.md
benchmark-results.json
# Trigger fresh CI run - Wed Sep 10 09:22:37 CDT 2025
# Final CI alignment - Wed Sep 10 09:27:52 CDT 2025
# Force CI update - Wed Sep 10 09:32:42 CDT 2025
# Import sorting fix applied - Wed Sep 10 09:53:48 CDT 2025

# XPCS Toolkit Specific Files
# ===========================

# Runtime generated files only - preserve source files
benchmark_performance.db
*benchmark_results*.json
*benchmark_output*.db
*performance_results*.json
*performance_output*.db

# Generated reports only - preserve framework files
*_validation_report_*.json
*_optimization_report_*.json
*_analysis_report*.json
validation_report_*.json
optimization_report_*.json
archived_reports/
archived_scripts/

# Runtime debug and log files only
debug_*.log
test_*.log
*_debug*.log
*_qselection*.log
*.log

# Generated test reports only - preserve test source code
tests/*_report*.json
tests/*_results*.json

# Generated configuration files only
production_config_generated.yaml
deployment_config_generated.yaml

# Generated documentation only - preserve source documentation
*_GENERATED.md
*_OUTPUT.md

# Temporary validation and test files (but keep core framework files)
optimization_validation_report_*.json
validation_results_*.json
test_cleanup_optimization.py
test_memory_optimization.py
verify_memory_optimization.py
validate_temp_*.py
run_phase*_temp.py

# Claude Code specific settings
.claude/
.agent-os/
