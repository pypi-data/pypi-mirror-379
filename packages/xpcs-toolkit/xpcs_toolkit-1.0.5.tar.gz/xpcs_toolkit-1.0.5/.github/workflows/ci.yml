name: CI

on:
  push:
    branches: [ master, main, develop ]
    paths-ignore:
      - '*.md'
      - '*.rst'
      - 'docs/**'
      - 'CHANGELOG*'
      - 'HISTORY*'
      - 'LICENSE*'
  pull_request:
    branches: [ master, main, develop ]
    paths-ignore:
      - '*.md'
      - '*.rst'
      - 'docs/**'
      - 'CHANGELOG*'
      - 'HISTORY*'
      - 'LICENSE*'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual CI run'
        required: false
        default: 'Manual testing'
      test_level:
        description: 'Test level to run'
        required: false
        default: 'core'
        type: choice
        options:
          - 'smoke'
          - 'core'
          - 'full'
          - 'performance'

# Cancel previous runs on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Quick smoke tests for fast feedback
  smoke-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 5

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python 3.13
      uses: actions/setup-python@v6
      with:
        python-version: "3.13"
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'

    - name: Install minimal dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        # Install essential packages for smoke tests and pre-commit checks
        pip install pytest pytest-mock ruff pre-commit --prefer-binary
        # Install minimal dependencies first
        pip install numpy scipy matplotlib pandas h5py pyside6 --prefer-binary
        # Install package without full dev dependencies for speed
        pip install -e . --no-deps

    - name: Cache pre-commit environments
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
        restore-keys: |
          pre-commit-${{ runner.os }}-

    - name: Fast quality checks
      shell: bash  # CRITICAL: Force bash for conditional syntax on Windows
      run: |
        echo "[INFO] Running fast quality checks..."
        # Quick ruff checks for immediate feedback
        ruff check --output-format=github .
        ruff format --check .

        # Run critical pre-commit hooks only for PRs
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          pre-commit run --files $(git diff --name-only --diff-filter=AM ${{ github.event.pull_request.base.sha }}..HEAD)
        fi

    - name: Run smoke tests
      run: |
        # Ultra-fast smoke tests with minimal overhead
        pytest -m "smoke" --tb=line --disable-warnings -q \
          --maxfail=1 --no-header --no-summary

  # Main test matrix
  test:
    runs-on: ${{ matrix.os }}
    needs: smoke-test
    if: always() && (needs.smoke-test.result == 'success' || github.event_name != 'pull_request')
    timeout-minutes: 45

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12", "3.13"]
        include:
          # Ensure comprehensive testing on latest stable version
          - os: ubuntu-latest
            python-version: "3.13"
            test-type: "comprehensive"
        exclude:
          # Reduce matrix size for faster execution while ensuring cross-platform coverage
          - os: windows-latest
            python-version: "3.13"
          - os: macos-latest
            python-version: "3.13"

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Full history for proper version detection

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          libgl1-mesa-dri libegl1-mesa-dev libxrandr2 libxss1 \
          libxcursor1 libxcomposite1 libasound2t64 libxi6 libxtst6 \
          xvfb

    - name: Cache build dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pre-commit
          ~/.cache/mypy
          .mypy_cache
          .ruff_cache
        key: ${{ runner.os }}-build-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml', '.pre-commit-config.yaml') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ matrix.python-version }}-
          ${{ runner.os }}-build-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        # Install test dependencies first for better error reporting
        pip install pytest pytest-xdist pytest-cov pytest-mock --prefer-binary
        # Install package with dev dependencies
        pip install -e .[dev] --prefer-binary
        # Verify critical test dependencies
        python -c "import pytest, xdist, pytest_cov; print('[OK] Test dependencies installed')"

    - name: Cache test data
      uses: actions/cache@v4
      with:
        path: ~/.cache/xpcs-toolkit
        key: ${{ runner.os }}-test-data-v2-${{ hashFiles('tests/**/*.py') }}
        restore-keys: |
          ${{ runner.os }}-test-data-v2-
          ${{ runner.os }}-test-data-

    - name: Type check with mypy (comprehensive)
      if: matrix.python-version == '3.13' && matrix.os == 'ubuntu-latest'
      run: |
        # Install mypy with stub packages
        pip install mypy types-requests types-setuptools
        mypy xpcs_toolkit --ignore-missing-imports --show-error-codes --pretty
      continue-on-error: true

    - name: Determine test level
      id: test-level
      shell: bash
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "level=core" >> $GITHUB_OUTPUT
        elif [ "${{ github.event.inputs.test_level }}" != "" ]; then
          echo "level=${{ github.event.inputs.test_level }}" >> $GITHUB_OUTPUT
        else
          echo "level=full" >> $GITHUB_OUTPUT
        fi

    - name: Test with pytest
      env:
        QT_QPA_PLATFORM: offscreen
        DISPLAY: ":99"
        # Fix Unicode encoding issues on Windows
        PYTHONIOENCODING: utf-8
        PYTHONUTF8: 1
      shell: bash  # CRITICAL: Force bash to prevent PowerShell syntax errors on Windows
      run: |
        # Start virtual display for GUI tests on Linux
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          Xvfb :99 -screen 0 1024x768x24 &
          sleep 2
        fi

        # Run tests based on level with optimized settings
        case "${{ steps.test-level.outputs.level }}" in
          "smoke")
            echo "[INFO] Running smoke tests..."
            pytest -m "smoke" --tb=short -q --maxfail=3 \
              --disable-warnings --no-cov \
              || (echo "[ERROR] Smoke tests failed" && exit 1)
            ;;
          "core")
            echo "[INFO] Running core tests (unit + integration, non-slow, excluding GUI)..."
            pytest -m "(unit or integration) and not slow and not gui" \
              --cov=xpcs_toolkit --cov-report=xml --cov-report=term-missing \
              --cov-context=test --tb=short --maxfail=5 --cov-fail-under=11 \
              -n auto --dist=worksteal \
              || (echo "[ERROR] Core tests failed" && exit 1)
            ;;
          "performance")
            echo "[INFO] Running performance tests..."
            pytest -m "performance and not stress" --benchmark-only \
              --benchmark-warmup=on --benchmark-warmup-iterations=2 \
              || (echo "[ERROR] Performance tests failed" && exit 1)
            ;;
          *)
            echo "[INFO] Running full test suite (excluding stress, system-dependent, and GUI tests)..."
            # Note: GUI tests are excluded from CI due to Qt compatibility issues with parallel execution
            # GUI tests can be run locally with: pytest -m "gui" --no-cov -x
            pytest -m "not (stress or system_dependent or gui)" \
              --cov=xpcs_toolkit --cov-report=xml --cov-report=term-missing \
              --cov-context=test --tb=short --durations=10 --maxfail=10 --cov-fail-under=11 \
              -n auto --dist=worksteal \
              || (echo "[ERROR] Full test suite failed" && exit 1)
            ;;
        esac

        echo "[SUCCESS] Test execution completed successfully"

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13' && (steps.test-level.outputs.level == 'core' || steps.test-level.outputs.level == 'full')
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: false
        flags: ${{ matrix.os }}-py${{ matrix.python-version }}

    - name: Test package installation
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
      env:
        # Fix Unicode encoding issues on Windows
        PYTHONIOENCODING: utf-8
        PYTHONUTF8: 1
      run: |
        # Quick installation test with error handling
        pip install -e . --force-reinstall --no-deps
        python -c "
        try:
            import xpcs_toolkit
            print(f'[OK] XPCS Toolkit {xpcs_toolkit.__version__} imported successfully')
            # Test basic functionality
            from xpcs_toolkit.file_locator import FileLocator
            print('[OK] Core modules accessible')
        except ImportError as e:
            print(f'[ERROR] Import failed: {e}')
            exit(1)
        except Exception as e:
            print(f'⚠️  Basic test failed: {e}')
            exit(1)
        "

    - name: Generate test summary
      if: always()
      shell: bash  # CRITICAL: Force bash to prevent PowerShell syntax errors on Windows
      run: |
        echo "## [SUMMARY] Test Summary for ${{ matrix.os }} Python ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **OS**: ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Python**: ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Level**: ${{ steps.test-level.outputs.level }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

  # Fast parallel build job
  build:
    runs-on: ubuntu-latest
    needs: smoke-test
    if: always() && (needs.smoke-test.result == 'success' || github.event_name != 'pull_request')
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Full history for version info

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: "3.13"
        cache: 'pip'

    - name: Install system dependencies for Qt
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          libgl1-mesa-dri libegl1-mesa-dev libxrandr2 libxss1 \
          libxcursor1 libxcomposite1 libasound2t64 libxi6 libxtst6

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install build twine setuptools_scm

    - name: Build package
      run: |
        # Build with optimized settings
        python -m build --wheel --sdist

    - name: Check package metadata
      run: |
        # Comprehensive package validation
        twine check dist/* --strict

        # Verify package contents
        echo "[INFO] Package contents:"
        ls -la dist/

        # Test wheel installation in clean environment
        python -m venv test_env
        source test_env/bin/activate
        pip install dist/*.whl
        # Set Qt environment for headless operation
        export QT_QPA_PLATFORM=offscreen
        export DISPLAY=:99
        export PYXPCS_SUPPRESS_QT_WARNINGS=1
        # Test basic import without GUI components
        python -c "import sys; import xpcs_toolkit; print('[OK] XPCS Toolkit imported'); print(f'[INFO] Version: {xpcs_toolkit.__version__}'); print('[OK] Wheel installs correctly')"
        deactivate
        rm -rf test_env

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ github.sha }}
        path: dist/
        retention-days: 7


  # Security scanning - parallel with tests
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true  # Don't fail CI on security warnings

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: "3.13"
        cache: 'pip'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety pip-audit

    - name: Run bandit security scan
      run: |
        bandit -r xpcs_toolkit -f json -o bandit-report.json || true
        bandit -r xpcs_toolkit --severity-level medium

    - name: Run pip-audit for dependency vulnerabilities
      run: |
        pip-audit --desc --format=json --output=pip-audit-report.json || true
        pip-audit --desc

    - name: Check dependencies with safety
      run: |
        safety scan --json --output safety-report.json || true
        safety scan --short-report

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.sha }}
        path: |
          bandit-report.json
          pip-audit-report.json
          safety-report.json
        retention-days: 30

  # Status check job - always runs
  status:
    runs-on: ubuntu-latest
    needs: [smoke-test, test, build, security]
    if: always()

    steps:
    - name: Check workflow status
      shell: bash  # CRITICAL: Force bash for conditional syntax on Windows
      run: |
        echo "## 🎯 CI/CD Pipeline Status Report" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status | Duration |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|----------|" >> $GITHUB_STEP_SUMMARY
        echo "| [SMOKE] Tests | ${{ needs.smoke-test.result }} | Fast feedback |" >> $GITHUB_STEP_SUMMARY
        echo "| [MAIN] Tests | ${{ needs.test.result }} | Cross-platform |" >> $GITHUB_STEP_SUMMARY
        echo "| [BUILD] Build | ${{ needs.build.result }} | Package validation |" >> $GITHUB_STEP_SUMMARY
        echo "| [SECURITY] Security | ${{ needs.security.result }} | Vulnerability scan |" >> $GITHUB_STEP_SUMMARY

        # Check critical paths
        if [ "${{ needs.smoke-test.result }}" = "failure" ]; then
          echo "[ERROR] Smoke tests failed - blocking merge"
          echo "::error::Smoke tests failed - critical path blocked"
          exit 1
        elif [ "${{ needs.test.result }}" = "failure" ]; then
          echo "[ERROR] Main tests failed - blocking merge"
          echo "::error::Main test suite failed - merge blocked"
          exit 1
        elif [ "${{ needs.build.result }}" = "failure" ]; then
          echo "[ERROR] Build failed - blocking merge"
          echo "::error::Package build failed - merge blocked"
          exit 1
        else
          echo "[SUCCESS] All critical checks passed - ready for merge"
          echo "[INFO] Security scan: ${{ needs.security.result }}"
          echo "::notice::CI/CD pipeline completed successfully"
        fi
