name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      reason:
        description: 'Reason for manual release'
        required: false
        default: 'Manual release testing'
      dry_run:
        description: 'Dry run (skip actual publishing)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  id-token: write  # For trusted publishing to PyPI

# Ensure only one release runs at a time
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Pre-release validation
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      release_exists: ${{ steps.check_release.outputs.exists }}

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Check if release already exists
      id: check_release
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi

        # Check if a release already exists for this tag
        if gh release view "$VERSION" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è Release $VERSION already exists - skipping automatic release workflow"
          exit 0
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "‚úÖ No existing release found for $VERSION"
        fi
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Validate version
      id: version
      if: steps.check_release.outputs.exists != 'true'
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi

        echo "version=$VERSION" >> $GITHUB_OUTPUT

        # Check if prerelease
        if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi

        echo "üì¶ Release version: $VERSION"
        echo "üîñ Pre-release: $([ "${{ steps.version.outputs.is_prerelease }}" = "true" ] && echo "Yes" || echo "No")"

    - name: Check changelog
      run: |
        if [ -f "CHANGELOG.md" ] || [ -f "HISTORY.rst" ]; then
          echo "‚úÖ Changelog found"
        else
          echo "‚ö†Ô∏è No changelog found (CHANGELOG.md or HISTORY.rst)"
        fi

  # Fast build and validation
  build:
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.release_exists != 'true'
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Full history for version info

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: "3.13"
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install build twine setuptools_scm

    - name: Build package
      run: |
        python -m build

    - name: Validate package
      run: |
        # Comprehensive package validation
        twine check dist/* --strict

        # Check wheel contents
        echo "üì¶ Wheel contents:"
        python -m zipfile -l dist/*.whl | head -20

        # Verify metadata safely
        echo "üì¶ Package files:"
        ls -la dist/

        # Check sdist contents safely
        echo "üì¶ Source distribution contents:"
        tar -tzf dist/*.tar.gz | head -10

        # Test wheel installation in clean environment
        python -m venv test_env
        source test_env/bin/activate
        pip install --upgrade pip
        pip install dist/*.whl
        python -c "import xpcs_toolkit; print(f'‚úÖ Version: {xpcs_toolkit.__version__}')"
        deactivate
        rm -rf test_env

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-release-${{ github.sha }}
        path: dist/
        retention-days: 90

  # Streamlined cross-platform testing
  test-release:
    runs-on: ${{ matrix.os }}
    needs: [validate, build]
    if: needs.validate.outputs.release_exists != 'true'
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.13"]  # Test latest stable version for releases
        include:
          - os: ubuntu-latest
            python-version: "3.12"  # Test LTS version on Linux only

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: dist-release-${{ github.sha }}
        path: dist/

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          libgl1-mesa-dri libegl1-mesa-dev libxrandr2 libxss1 \
          libxcursor1 libxcomposite1 libasound2t64 libxi6 libxtst6 \
          xvfb

    - name: Test installation from wheel
      run: |
        # Install from wheel
        pip install --find-links dist/ --prefer-binary xpcs-toolkit
        python -c "import xpcs_toolkit; print(f'‚úÖ XPCS Toolkit {xpcs_toolkit.__version__} installed successfully')"

    - name: Test CLI commands
      env:
        QT_QPA_PLATFORM: offscreen
        DISPLAY: ":99"
      run: |
        # Start virtual display for GUI tests on Linux
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          Xvfb :99 -screen 0 1024x768x24 &
          sleep 2
        fi

        echo "üß™ Testing CLI commands..."
        xpcs-toolkit --help || echo "‚ö†Ô∏è xpcs-toolkit command failed"
        pyxpcsviewer --help || echo "‚ö†Ô∏è pyxpcsviewer command failed"
        run_viewer --help || echo "‚ö†Ô∏è run_viewer command failed"
        echo "‚úÖ CLI command tests completed"

    - name: Test basic import and functionality
      env:
        QT_QPA_PLATFORM: offscreen
      run: |
        python -c "
        import xpcs_toolkit
        from xpcs_toolkit.file_locator import FileLocator
        from xpcs_toolkit.viewer_kernel import ViewerKernel
        print('‚úÖ Core modules import successfully')
        print(f'üì¶ Version: {xpcs_toolkit.__version__}')
        "

  github-release:
    runs-on: ubuntu-latest
    needs: [validate, build, test-release]
    if: needs.validate.outputs.release_exists != 'true' && (startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch') && github.event.inputs.dry_run != 'true'
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v5

    - name: Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: dist-release-${{ github.sha }}
        path: dist/

    - name: Extract release notes
      id: extract_notes
      run: |
        if [ -f "CHANGELOG.md" ]; then
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          # Extract section for this version from changelog
          awk '/^## \[?v?[0-9]/{if(found) exit; if($0 ~ /${{ needs.validate.outputs.version }}/) found=1; next} found' CHANGELOG.md | head -20 >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        elif [ -f "HISTORY.rst" ]; then
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          head -20 HISTORY.rst >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "RELEASE_NOTES=üéâ New release of XPCS Toolkit! See commit history for changes." >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate.outputs.version }}
        name: "XPCS Toolkit ${{ needs.validate.outputs.version }}"
        body: |
          ## üöÄ XPCS Toolkit ${{ needs.validate.outputs.version }}

          ### üì• Installation
          ```bash
          pip install xpcs-toolkit==${{ needs.validate.outputs.version }}
          ```

          ### üöÄ Quick Start
          ```bash
          # Launch GUI with data directory
          xpcs-toolkit path_to_hdf_directory

          # Alternative commands
          pyxpcsviewer
          run_viewer
          ```

          ### üìù Changes
          ${{ steps.extract_notes.outputs.RELEASE_NOTES }}

          ### üì¶ Package Files
          - **Source Distribution**: `xpcs_toolkit-*.tar.gz` - Full source code
          - **Universal Wheel**: `xpcs_toolkit-*-py3-none-any.whl` - Ready-to-install package

          ### üîó Links
          - [Documentation](https://github.com/imewei/XPCS-Toolkit/tree/master/docs)
          - [Issues](https://github.com/imewei/XPCS-Toolkit/issues)
          - [PyPI Package](https://pypi.org/project/xpcs-toolkit/)
        files: dist/*
        draft: false
        prerelease: ${{ needs.validate.outputs.is_prerelease == 'true' }}
        generate_release_notes: true

  # PyPI publishing with enhanced checks
  pypi-publish:
    runs-on: ubuntu-latest
    needs: [validate, build, test-release, github-release]
    if: needs.validate.outputs.release_exists != 'true' && startsWith(github.ref, 'refs/tags/') && needs.validate.outputs.is_prerelease == 'false' && github.event.inputs.dry_run != 'true'
    environment:
      name: pypi
      url: https://pypi.org/p/xpcs-toolkit
    timeout-minutes: 10

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: dist-release-${{ github.sha }}
        path: dist/

    - name: Verify package before upload
      run: |
        # Final verification before PyPI upload
        ls -la dist/
        echo "üì¶ Package contents:"
        for file in dist/*; do
          echo "  $(basename "$file"): $(stat -c%s "$file" | numfmt --to=iec)B"
        done

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verify-metadata: true
        verbose: true
        print-hash: true

  # Test PyPI for pre-releases and testing
  test-pypi-publish:
    runs-on: ubuntu-latest
    needs: [validate, build, test-release]
    if: needs.validate.outputs.release_exists != 'true' && ((startsWith(github.ref, 'refs/tags/') && needs.validate.outputs.is_prerelease == 'true') || github.event.inputs.dry_run == 'true')
    environment:
      name: testpypi
      url: https://test.pypi.org/p/xpcs-toolkit
    timeout-minutes: 10

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: dist-release-${{ github.sha }}
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        verify-metadata: true
        verbose: true
        print-hash: true

  # Final status summary
  release-status:
    runs-on: ubuntu-latest
    needs: [validate, build, test-release, github-release, pypi-publish, test-pypi-publish]
    if: always()

    steps:
    - name: Release Summary
      run: |
        echo "üèÅ Release Workflow Summary"
        echo "=========================="
        echo "üì¶ Version: ${{ needs.validate.outputs.version }}"
        echo "üîñ Pre-release: ${{ needs.validate.outputs.is_prerelease }}"
        echo "üèóÔ∏è Build: ${{ needs.build.result }}"
        echo "üß™ Tests: ${{ needs.test-release.result }}"
        echo "üìù GitHub Release: ${{ needs.github-release.result }}"
        echo "üêç PyPI: ${{ needs.pypi-publish.result || 'skipped' }}"
        echo "üß™ Test PyPI: ${{ needs.test-pypi-publish.result || 'skipped' }}"

        if [ "${{ needs.build.result }}" = "failure" ] || [ "${{ needs.test-release.result }}" = "failure" ]; then
          echo "‚ùå Release failed - check job logs"
          exit 1
        else
          echo "‚úÖ Release completed successfully!"
        fi
