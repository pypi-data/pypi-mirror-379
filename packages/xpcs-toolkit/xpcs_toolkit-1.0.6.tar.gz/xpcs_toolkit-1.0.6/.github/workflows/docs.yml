name: Documentation

on:
  push:
    branches: [ master, main, develop ]
    paths:
      - 'docs/**'
      - 'xpcs_toolkit/**/*.py'
      - 'README.rst'
      - 'README.md'
      - 'pyproject.toml'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ master, main, develop ]
    paths:
      - 'docs/**'
      - 'xpcs_toolkit/**/*.py'
      - 'README.rst'
      - 'README.md'
      - 'pyproject.toml'
      - '.github/workflows/docs.yml'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual docs build'
        required: false
        default: 'Manual documentation testing'
      deploy:
        description: 'Deploy to GitHub Pages (DISABLED - not configured)'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  # pages: write      # Disabled - GitHub Pages not configured
  # id-token: write   # Disabled - GitHub Pages not configured

# Prevent multiple concurrent docs builds
concurrency:
  group: docs-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-docs:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Full history for proper version detection

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: "3.13"
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'

    - name: Install system dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          libgl1-mesa-dri libegl1-mesa-dev libxrandr2 libxss1 \
          libxcursor1 libxcomposite1 libasound2t64 libxi6 libxtst6 \
          pandoc graphviz

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install -e .[docs] --prefer-binary

    - name: Build documentation with Sphinx
      env:
        SPHINXOPTS: "-W --keep-going -j auto"
      run: |
        cd docs
        make clean
        make html

        # Add version info
        echo "Built on $(date)" > _build/html/build_info.txt
        echo "Commit: ${{ github.sha }}" >> _build/html/build_info.txt

        # Copy additional markdown docs if they exist
        for doc in DOCUMENTATION_INDEX.md OPTIMIZATION_GUIDE.md LOGGING_SYSTEM.md TESTING.md PRODUCTION_READINESS_FINAL_REPORT.md; do
          if [ -f "$doc" ]; then
            cp "$doc" _build/html/
          fi
        done

        # Generate simple index for markdown files
        echo "<h2>Additional Documentation</h2><ul>" > _build/html/markdown_index.html
        for doc in _build/html/*.md; do
          if [ -f "$doc" ]; then
            basename=$(basename "$doc" .md)
            echo "<li><a href=\"$basename.md\">$basename</a></li>" >> _build/html/markdown_index.html
          fi
        done
        echo "</ul>" >> _build/html/markdown_index.html

    - name: Check documentation
      run: |
        # Basic validation
        ls -la docs/_build/html/
        echo "üìö Documentation files:"
        find docs/_build/html/ -name "*.html" | head -10

        # Check for common issues
        if grep -r "TODO\|FIXME\|XXX" docs/_build/html/ --include="*.html"; then
          echo "‚ö†Ô∏è Found TODO/FIXME markers in docs"
        fi

    - name: Upload docs artifacts
      uses: actions/upload-artifact@v4
      with:
        name: docs-build-${{ github.sha }}
        path: docs/_build/html
        retention-days: 30

    - name: Upload docs artifacts (PR preview)
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: docs-preview-pr-${{ github.event.number }}
        path: docs/_build/html
        retention-days: 7


  # Link checking and validation
  link-check:
    runs-on: ubuntu-latest
    needs: build-docs
    timeout-minutes: 10
    continue-on-error: true  # Don't fail docs build on link issues

    steps:
    - name: Download built docs
      uses: actions/download-artifact@v5
      with:
        name: ${{ github.event_name == 'pull_request' && format('docs-preview-pr-{0}', github.event.number) || format('docs-build-{0}', github.sha) }}
        path: _site

    - name: Link Checker
      uses: lycheeverse/lychee-action@v2
      with:
        args: --verbose --no-progress '_site/**/*.html' --base _site --exclude-mail
        fail: false
        format: markdown
        output: link-check-report.md

    - name: Upload link check report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: link-check-report-${{ github.sha }}
        path: link-check-report.md
        retention-days: 7

  # Deploy to GitHub Pages - DISABLED (GitHub Pages not configured)
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [build-docs, link-check]
  #   if: false  # Disabled - GitHub Pages not configured
  #   timeout-minutes: 10
  #
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #
  #   steps:
  #   - name: Setup Pages
  #     uses: actions/configure-pages@v4
  #
  #   - name: Download built docs
  #     uses: actions/download-artifact@v5
  #     with:
  #       name: docs-build-${{ github.sha }}
  #       path: _site
  #
  #   - name: Upload to GitHub Pages
  #     uses: actions/upload-pages-artifact@v4
  #     with:
  #       path: _site
  #
  #   - name: Deploy to GitHub Pages
  #     id: deployment
  #     uses: actions/deploy-pages@v4

  # Status summary
  docs-status:
    runs-on: ubuntu-latest
    needs: [build-docs, link-check]  # Removed deploy dependency
    if: always()

    steps:
    - name: Documentation Status
      run: |
        echo "üìö Documentation Workflow Summary"
        echo "================================="
        echo "üèóÔ∏è Build: ${{ needs.build-docs.result }}"
        echo "üîó Link Check: ${{ needs.link-check.result || 'skipped' }}"
        echo "üöÄ Deploy: disabled (GitHub Pages not configured)"

        if [ "${{ needs.build-docs.result }}" = "failure" ]; then
          echo "‚ùå Documentation build failed"
          exit 1
        else
          echo "‚úÖ Documentation workflow completed"
        fi
