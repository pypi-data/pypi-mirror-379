# -*- coding: utf-8 -*-

import typing as T
import dataclasses
from functools import cached_property

if T.TYPE_CHECKING:  # pragma: no cover
    from mypy_boto3_sagemaker import type_defs


def field(name: str):
    def getter(self):
        return self.boto3_raw_data[name]

    return cached_property(getter)


@dataclasses.dataclass(frozen=True)
class ActionSource:
    boto3_raw_data: "type_defs.ActionSourceTypeDef" = dataclasses.field()

    SourceUri = field("SourceUri")
    SourceType = field("SourceType")
    SourceId = field("SourceId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ActionSourceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ActionSourceTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AddAssociationRequest:
    boto3_raw_data: "type_defs.AddAssociationRequestTypeDef" = dataclasses.field()

    SourceArn = field("SourceArn")
    DestinationArn = field("DestinationArn")
    AssociationType = field("AssociationType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AddAssociationRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AddAssociationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResponseMetadata:
    boto3_raw_data: "type_defs.ResponseMetadataTypeDef" = dataclasses.field()

    RequestId = field("RequestId")
    HTTPStatusCode = field("HTTPStatusCode")
    HTTPHeaders = field("HTTPHeaders")
    RetryAttempts = field("RetryAttempts")
    HostId = field("HostId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ResponseMetadataTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResponseMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AddClusterNodeSpecification:
    boto3_raw_data: "type_defs.AddClusterNodeSpecificationTypeDef" = dataclasses.field()

    InstanceGroupName = field("InstanceGroupName")
    IncrementTargetCountBy = field("IncrementTargetCountBy")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AddClusterNodeSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AddClusterNodeSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Tag:
    boto3_raw_data: "type_defs.TagTypeDef" = dataclasses.field()

    Key = field("Key")
    Value = field("Value")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TagTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TagTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AdditionalEnis:
    boto3_raw_data: "type_defs.AdditionalEnisTypeDef" = dataclasses.field()

    EfaEnis = field("EfaEnis")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AdditionalEnisTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AdditionalEnisTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AdditionalS3DataSource:
    boto3_raw_data: "type_defs.AdditionalS3DataSourceTypeDef" = dataclasses.field()

    S3DataType = field("S3DataType")
    S3Uri = field("S3Uri")
    CompressionType = field("CompressionType")
    ETag = field("ETag")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AdditionalS3DataSourceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AdditionalS3DataSourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AgentVersion:
    boto3_raw_data: "type_defs.AgentVersionTypeDef" = dataclasses.field()

    Version = field("Version")
    AgentCount = field("AgentCount")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AgentVersionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AgentVersionTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AlarmDetails:
    boto3_raw_data: "type_defs.AlarmDetailsTypeDef" = dataclasses.field()

    AlarmName = field("AlarmName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AlarmDetailsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AlarmDetailsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Alarm:
    boto3_raw_data: "type_defs.AlarmTypeDef" = dataclasses.field()

    AlarmName = field("AlarmName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AlarmTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AlarmTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MetricDefinition:
    boto3_raw_data: "type_defs.MetricDefinitionTypeDef" = dataclasses.field()

    Name = field("Name")
    Regex = field("Regex")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MetricDefinitionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MetricDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AlgorithmStatusItem:
    boto3_raw_data: "type_defs.AlgorithmStatusItemTypeDef" = dataclasses.field()

    Name = field("Name")
    Status = field("Status")
    FailureReason = field("FailureReason")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AlgorithmStatusItemTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AlgorithmStatusItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AlgorithmSummary:
    boto3_raw_data: "type_defs.AlgorithmSummaryTypeDef" = dataclasses.field()

    AlgorithmName = field("AlgorithmName")
    AlgorithmArn = field("AlgorithmArn")
    CreationTime = field("CreationTime")
    AlgorithmStatus = field("AlgorithmStatus")
    AlgorithmDescription = field("AlgorithmDescription")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AlgorithmSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AlgorithmSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AmazonQSettings:
    boto3_raw_data: "type_defs.AmazonQSettingsTypeDef" = dataclasses.field()

    Status = field("Status")
    QProfileArn = field("QProfileArn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AmazonQSettingsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AmazonQSettingsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AnnotationConsolidationConfig:
    boto3_raw_data: "type_defs.AnnotationConsolidationConfigTypeDef" = (
        dataclasses.field()
    )

    AnnotationConsolidationLambdaArn = field("AnnotationConsolidationLambdaArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AnnotationConsolidationConfigTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AnnotationConsolidationConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourceSpec:
    boto3_raw_data: "type_defs.ResourceSpecTypeDef" = dataclasses.field()

    SageMakerImageArn = field("SageMakerImageArn")
    SageMakerImageVersionArn = field("SageMakerImageVersionArn")
    SageMakerImageVersionAlias = field("SageMakerImageVersionAlias")
    InstanceType = field("InstanceType")
    LifecycleConfigArn = field("LifecycleConfigArn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ResourceSpecTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ResourceSpecTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IdleSettings:
    boto3_raw_data: "type_defs.IdleSettingsTypeDef" = dataclasses.field()

    LifecycleManagement = field("LifecycleManagement")
    IdleTimeoutInMinutes = field("IdleTimeoutInMinutes")
    MinIdleTimeoutInMinutes = field("MinIdleTimeoutInMinutes")
    MaxIdleTimeoutInMinutes = field("MaxIdleTimeoutInMinutes")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.IdleSettingsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.IdleSettingsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AppSpecificationOutput:
    boto3_raw_data: "type_defs.AppSpecificationOutputTypeDef" = dataclasses.field()

    ImageUri = field("ImageUri")
    ContainerEntrypoint = field("ContainerEntrypoint")
    ContainerArguments = field("ContainerArguments")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AppSpecificationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AppSpecificationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AppSpecification:
    boto3_raw_data: "type_defs.AppSpecificationTypeDef" = dataclasses.field()

    ImageUri = field("ImageUri")
    ContainerEntrypoint = field("ContainerEntrypoint")
    ContainerArguments = field("ContainerArguments")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AppSpecificationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AppSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ArtifactSourceType:
    boto3_raw_data: "type_defs.ArtifactSourceTypeTypeDef" = dataclasses.field()

    SourceIdType = field("SourceIdType")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ArtifactSourceTypeTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ArtifactSourceTypeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateTrialComponentRequest:
    boto3_raw_data: "type_defs.AssociateTrialComponentRequestTypeDef" = (
        dataclasses.field()
    )

    TrialComponentName = field("TrialComponentName")
    TrialName = field("TrialName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AssociateTrialComponentRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateTrialComponentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AsyncInferenceClientConfig:
    boto3_raw_data: "type_defs.AsyncInferenceClientConfigTypeDef" = dataclasses.field()

    MaxConcurrentInvocationsPerInstance = field("MaxConcurrentInvocationsPerInstance")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AsyncInferenceClientConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AsyncInferenceClientConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AsyncInferenceNotificationConfigOutput:
    boto3_raw_data: "type_defs.AsyncInferenceNotificationConfigOutputTypeDef" = (
        dataclasses.field()
    )

    SuccessTopic = field("SuccessTopic")
    ErrorTopic = field("ErrorTopic")
    IncludeInferenceResponseIn = field("IncludeInferenceResponseIn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AsyncInferenceNotificationConfigOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AsyncInferenceNotificationConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AsyncInferenceNotificationConfig:
    boto3_raw_data: "type_defs.AsyncInferenceNotificationConfigTypeDef" = (
        dataclasses.field()
    )

    SuccessTopic = field("SuccessTopic")
    ErrorTopic = field("ErrorTopic")
    IncludeInferenceResponseIn = field("IncludeInferenceResponseIn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AsyncInferenceNotificationConfigTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AsyncInferenceNotificationConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AthenaDatasetDefinition:
    boto3_raw_data: "type_defs.AthenaDatasetDefinitionTypeDef" = dataclasses.field()

    Catalog = field("Catalog")
    Database = field("Database")
    QueryString = field("QueryString")
    OutputS3Uri = field("OutputS3Uri")
    OutputFormat = field("OutputFormat")
    WorkGroup = field("WorkGroup")
    KmsKeyId = field("KmsKeyId")
    OutputCompression = field("OutputCompression")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AthenaDatasetDefinitionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AthenaDatasetDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttachClusterNodeVolumeRequest:
    boto3_raw_data: "type_defs.AttachClusterNodeVolumeRequestTypeDef" = (
        dataclasses.field()
    )

    ClusterArn = field("ClusterArn")
    NodeId = field("NodeId")
    VolumeId = field("VolumeId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AttachClusterNodeVolumeRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AttachClusterNodeVolumeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AuthorizedUrl:
    boto3_raw_data: "type_defs.AuthorizedUrlTypeDef" = dataclasses.field()

    Url = field("Url")
    LocalPath = field("LocalPath")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AuthorizedUrlTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AuthorizedUrlTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLAlgorithmConfigOutput:
    boto3_raw_data: "type_defs.AutoMLAlgorithmConfigOutputTypeDef" = dataclasses.field()

    AutoMLAlgorithms = field("AutoMLAlgorithms")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutoMLAlgorithmConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLAlgorithmConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLAlgorithmConfig:
    boto3_raw_data: "type_defs.AutoMLAlgorithmConfigTypeDef" = dataclasses.field()

    AutoMLAlgorithms = field("AutoMLAlgorithms")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutoMLAlgorithmConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLAlgorithmConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLCandidateStep:
    boto3_raw_data: "type_defs.AutoMLCandidateStepTypeDef" = dataclasses.field()

    CandidateStepType = field("CandidateStepType")
    CandidateStepArn = field("CandidateStepArn")
    CandidateStepName = field("CandidateStepName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutoMLCandidateStepTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLCandidateStepTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLContainerDefinition:
    boto3_raw_data: "type_defs.AutoMLContainerDefinitionTypeDef" = dataclasses.field()

    Image = field("Image")
    ModelDataUrl = field("ModelDataUrl")
    Environment = field("Environment")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutoMLContainerDefinitionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLContainerDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FinalAutoMLJobObjectiveMetric:
    boto3_raw_data: "type_defs.FinalAutoMLJobObjectiveMetricTypeDef" = (
        dataclasses.field()
    )

    MetricName = field("MetricName")
    Value = field("Value")
    Type = field("Type")
    StandardMetricName = field("StandardMetricName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.FinalAutoMLJobObjectiveMetricTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FinalAutoMLJobObjectiveMetricTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EmrServerlessComputeConfig:
    boto3_raw_data: "type_defs.EmrServerlessComputeConfigTypeDef" = dataclasses.field()

    ExecutionRoleARN = field("ExecutionRoleARN")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EmrServerlessComputeConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EmrServerlessComputeConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLS3DataSource:
    boto3_raw_data: "type_defs.AutoMLS3DataSourceTypeDef" = dataclasses.field()

    S3DataType = field("S3DataType")
    S3Uri = field("S3Uri")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutoMLS3DataSourceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLS3DataSourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLDataSplitConfig:
    boto3_raw_data: "type_defs.AutoMLDataSplitConfigTypeDef" = dataclasses.field()

    ValidationFraction = field("ValidationFraction")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutoMLDataSplitConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLDataSplitConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLJobArtifacts:
    boto3_raw_data: "type_defs.AutoMLJobArtifactsTypeDef" = dataclasses.field()

    CandidateDefinitionNotebookLocation = field("CandidateDefinitionNotebookLocation")
    DataExplorationNotebookLocation = field("DataExplorationNotebookLocation")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutoMLJobArtifactsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLJobArtifactsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLJobCompletionCriteria:
    boto3_raw_data: "type_defs.AutoMLJobCompletionCriteriaTypeDef" = dataclasses.field()

    MaxCandidates = field("MaxCandidates")
    MaxRuntimePerTrainingJobInSeconds = field("MaxRuntimePerTrainingJobInSeconds")
    MaxAutoMLJobRuntimeInSeconds = field("MaxAutoMLJobRuntimeInSeconds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutoMLJobCompletionCriteriaTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLJobCompletionCriteriaTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLJobObjective:
    boto3_raw_data: "type_defs.AutoMLJobObjectiveTypeDef" = dataclasses.field()

    MetricName = field("MetricName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutoMLJobObjectiveTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLJobObjectiveTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLJobStepMetadata:
    boto3_raw_data: "type_defs.AutoMLJobStepMetadataTypeDef" = dataclasses.field()

    Arn = field("Arn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutoMLJobStepMetadataTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLJobStepMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLPartialFailureReason:
    boto3_raw_data: "type_defs.AutoMLPartialFailureReasonTypeDef" = dataclasses.field()

    PartialFailureMessage = field("PartialFailureMessage")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutoMLPartialFailureReasonTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLPartialFailureReasonTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLOutputDataConfig:
    boto3_raw_data: "type_defs.AutoMLOutputDataConfigTypeDef" = dataclasses.field()

    S3OutputPath = field("S3OutputPath")
    KmsKeyId = field("KmsKeyId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutoMLOutputDataConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLOutputDataConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TabularResolvedAttributes:
    boto3_raw_data: "type_defs.TabularResolvedAttributesTypeDef" = dataclasses.field()

    ProblemType = field("ProblemType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TabularResolvedAttributesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TabularResolvedAttributesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TextGenerationResolvedAttributes:
    boto3_raw_data: "type_defs.TextGenerationResolvedAttributesTypeDef" = (
        dataclasses.field()
    )

    BaseModelName = field("BaseModelName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.TextGenerationResolvedAttributesTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TextGenerationResolvedAttributesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpcConfigOutput:
    boto3_raw_data: "type_defs.VpcConfigOutputTypeDef" = dataclasses.field()

    SecurityGroupIds = field("SecurityGroupIds")
    Subnets = field("Subnets")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VpcConfigOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VpcConfigOutputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpcConfig:
    boto3_raw_data: "type_defs.VpcConfigTypeDef" = dataclasses.field()

    SecurityGroupIds = field("SecurityGroupIds")
    Subnets = field("Subnets")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VpcConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VpcConfigTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoParameter:
    boto3_raw_data: "type_defs.AutoParameterTypeDef" = dataclasses.field()

    Name = field("Name")
    ValueHint = field("ValueHint")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AutoParameterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AutoParameterTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Autotune:
    boto3_raw_data: "type_defs.AutotuneTypeDef" = dataclasses.field()

    Mode = field("Mode")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AutotuneTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AutotuneTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchAddClusterNodesError:
    boto3_raw_data: "type_defs.BatchAddClusterNodesErrorTypeDef" = dataclasses.field()

    InstanceGroupName = field("InstanceGroupName")
    ErrorCode = field("ErrorCode")
    FailedCount = field("FailedCount")
    Message = field("Message")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BatchAddClusterNodesErrorTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchAddClusterNodesErrorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NodeAdditionResult:
    boto3_raw_data: "type_defs.NodeAdditionResultTypeDef" = dataclasses.field()

    NodeLogicalId = field("NodeLogicalId")
    InstanceGroupName = field("InstanceGroupName")
    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NodeAdditionResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NodeAdditionResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchDataCaptureConfig:
    boto3_raw_data: "type_defs.BatchDataCaptureConfigTypeDef" = dataclasses.field()

    DestinationS3Uri = field("DestinationS3Uri")
    KmsKeyId = field("KmsKeyId")
    GenerateInferenceId = field("GenerateInferenceId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BatchDataCaptureConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchDataCaptureConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchDeleteClusterNodeLogicalIdsError:
    boto3_raw_data: "type_defs.BatchDeleteClusterNodeLogicalIdsErrorTypeDef" = (
        dataclasses.field()
    )

    Code = field("Code")
    Message = field("Message")
    NodeLogicalId = field("NodeLogicalId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BatchDeleteClusterNodeLogicalIdsErrorTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchDeleteClusterNodeLogicalIdsErrorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchDeleteClusterNodesError:
    boto3_raw_data: "type_defs.BatchDeleteClusterNodesErrorTypeDef" = (
        dataclasses.field()
    )

    Code = field("Code")
    Message = field("Message")
    NodeId = field("NodeId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BatchDeleteClusterNodesErrorTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchDeleteClusterNodesErrorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchDeleteClusterNodesRequest:
    boto3_raw_data: "type_defs.BatchDeleteClusterNodesRequestTypeDef" = (
        dataclasses.field()
    )

    ClusterName = field("ClusterName")
    NodeIds = field("NodeIds")
    NodeLogicalIds = field("NodeLogicalIds")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.BatchDeleteClusterNodesRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchDeleteClusterNodesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchDescribeModelPackageError:
    boto3_raw_data: "type_defs.BatchDescribeModelPackageErrorTypeDef" = (
        dataclasses.field()
    )

    ErrorCode = field("ErrorCode")
    ErrorResponse = field("ErrorResponse")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.BatchDescribeModelPackageErrorTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchDescribeModelPackageErrorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchDescribeModelPackageInput:
    boto3_raw_data: "type_defs.BatchDescribeModelPackageInputTypeDef" = (
        dataclasses.field()
    )

    ModelPackageArnList = field("ModelPackageArnList")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.BatchDescribeModelPackageInputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchDescribeModelPackageInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BestObjectiveNotImproving:
    boto3_raw_data: "type_defs.BestObjectiveNotImprovingTypeDef" = dataclasses.field()

    MaxNumberOfTrainingJobsNotImproving = field("MaxNumberOfTrainingJobsNotImproving")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BestObjectiveNotImprovingTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BestObjectiveNotImprovingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MetricsSource:
    boto3_raw_data: "type_defs.MetricsSourceTypeDef" = dataclasses.field()

    ContentType = field("ContentType")
    S3Uri = field("S3Uri")
    ContentDigest = field("ContentDigest")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MetricsSourceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.MetricsSourceTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CacheHitResult:
    boto3_raw_data: "type_defs.CacheHitResultTypeDef" = dataclasses.field()

    SourcePipelineExecutionArn = field("SourcePipelineExecutionArn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CacheHitResultTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CacheHitResultTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OutputParameter:
    boto3_raw_data: "type_defs.OutputParameterTypeDef" = dataclasses.field()

    Name = field("Name")
    Value = field("Value")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.OutputParameterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.OutputParameterTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CandidateArtifactLocations:
    boto3_raw_data: "type_defs.CandidateArtifactLocationsTypeDef" = dataclasses.field()

    Explainability = field("Explainability")
    ModelInsights = field("ModelInsights")
    BacktestResults = field("BacktestResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CandidateArtifactLocationsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CandidateArtifactLocationsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MetricDatum:
    boto3_raw_data: "type_defs.MetricDatumTypeDef" = dataclasses.field()

    MetricName = field("MetricName")
    StandardMetricName = field("StandardMetricName")
    Value = field("Value")
    Set = field("Set")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MetricDatumTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.MetricDatumTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DirectDeploySettings:
    boto3_raw_data: "type_defs.DirectDeploySettingsTypeDef" = dataclasses.field()

    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DirectDeploySettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DirectDeploySettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EmrServerlessSettings:
    boto3_raw_data: "type_defs.EmrServerlessSettingsTypeDef" = dataclasses.field()

    ExecutionRoleArn = field("ExecutionRoleArn")
    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EmrServerlessSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EmrServerlessSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GenerativeAiSettings:
    boto3_raw_data: "type_defs.GenerativeAiSettingsTypeDef" = dataclasses.field()

    AmazonBedrockRoleArn = field("AmazonBedrockRoleArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GenerativeAiSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GenerativeAiSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IdentityProviderOAuthSetting:
    boto3_raw_data: "type_defs.IdentityProviderOAuthSettingTypeDef" = (
        dataclasses.field()
    )

    DataSourceName = field("DataSourceName")
    Status = field("Status")
    SecretArn = field("SecretArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IdentityProviderOAuthSettingTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IdentityProviderOAuthSettingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KendraSettings:
    boto3_raw_data: "type_defs.KendraSettingsTypeDef" = dataclasses.field()

    Status = field("Status")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.KendraSettingsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.KendraSettingsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelRegisterSettings:
    boto3_raw_data: "type_defs.ModelRegisterSettingsTypeDef" = dataclasses.field()

    Status = field("Status")
    CrossAccountModelRegisterRoleArn = field("CrossAccountModelRegisterRoleArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelRegisterSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelRegisterSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TimeSeriesForecastingSettings:
    boto3_raw_data: "type_defs.TimeSeriesForecastingSettingsTypeDef" = (
        dataclasses.field()
    )

    Status = field("Status")
    AmazonForecastRoleArn = field("AmazonForecastRoleArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.TimeSeriesForecastingSettingsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TimeSeriesForecastingSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WorkspaceSettings:
    boto3_raw_data: "type_defs.WorkspaceSettingsTypeDef" = dataclasses.field()

    S3ArtifactPath = field("S3ArtifactPath")
    S3KmsKeyId = field("S3KmsKeyId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.WorkspaceSettingsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WorkspaceSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CapacityReservation:
    boto3_raw_data: "type_defs.CapacityReservationTypeDef" = dataclasses.field()

    Arn = field("Arn")
    Type = field("Type")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CapacityReservationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CapacityReservationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CapacitySizeConfig:
    boto3_raw_data: "type_defs.CapacitySizeConfigTypeDef" = dataclasses.field()

    Type = field("Type")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CapacitySizeConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CapacitySizeConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CapacitySize:
    boto3_raw_data: "type_defs.CapacitySizeTypeDef" = dataclasses.field()

    Type = field("Type")
    Value = field("Value")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CapacitySizeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CapacitySizeTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CaptureContentTypeHeaderOutput:
    boto3_raw_data: "type_defs.CaptureContentTypeHeaderOutputTypeDef" = (
        dataclasses.field()
    )

    CsvContentTypes = field("CsvContentTypes")
    JsonContentTypes = field("JsonContentTypes")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CaptureContentTypeHeaderOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CaptureContentTypeHeaderOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CaptureContentTypeHeader:
    boto3_raw_data: "type_defs.CaptureContentTypeHeaderTypeDef" = dataclasses.field()

    CsvContentTypes = field("CsvContentTypes")
    JsonContentTypes = field("JsonContentTypes")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CaptureContentTypeHeaderTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CaptureContentTypeHeaderTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CaptureOption:
    boto3_raw_data: "type_defs.CaptureOptionTypeDef" = dataclasses.field()

    CaptureMode = field("CaptureMode")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CaptureOptionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CaptureOptionTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CategoricalParameterOutput:
    boto3_raw_data: "type_defs.CategoricalParameterOutputTypeDef" = dataclasses.field()

    Name = field("Name")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CategoricalParameterOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CategoricalParameterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CategoricalParameterRangeOutput:
    boto3_raw_data: "type_defs.CategoricalParameterRangeOutputTypeDef" = (
        dataclasses.field()
    )

    Name = field("Name")
    Values = field("Values")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CategoricalParameterRangeOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CategoricalParameterRangeOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CategoricalParameterRangeSpecificationOutput:
    boto3_raw_data: "type_defs.CategoricalParameterRangeSpecificationOutputTypeDef" = (
        dataclasses.field()
    )

    Values = field("Values")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CategoricalParameterRangeSpecificationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CategoricalParameterRangeSpecificationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CategoricalParameterRangeSpecification:
    boto3_raw_data: "type_defs.CategoricalParameterRangeSpecificationTypeDef" = (
        dataclasses.field()
    )

    Values = field("Values")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CategoricalParameterRangeSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CategoricalParameterRangeSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CategoricalParameterRange:
    boto3_raw_data: "type_defs.CategoricalParameterRangeTypeDef" = dataclasses.field()

    Name = field("Name")
    Values = field("Values")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CategoricalParameterRangeTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CategoricalParameterRangeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CategoricalParameter:
    boto3_raw_data: "type_defs.CategoricalParameterTypeDef" = dataclasses.field()

    Name = field("Name")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CategoricalParameterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CategoricalParameterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CfnStackCreateParameter:
    boto3_raw_data: "type_defs.CfnStackCreateParameterTypeDef" = dataclasses.field()

    Key = field("Key")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CfnStackCreateParameterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CfnStackCreateParameterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CfnStackDetail:
    boto3_raw_data: "type_defs.CfnStackDetailTypeDef" = dataclasses.field()

    StatusMessage = field("StatusMessage")
    Name = field("Name")
    Id = field("Id")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CfnStackDetailTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CfnStackDetailTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CfnStackParameter:
    boto3_raw_data: "type_defs.CfnStackParameterTypeDef" = dataclasses.field()

    Key = field("Key")
    Value = field("Value")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CfnStackParameterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CfnStackParameterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CfnStackUpdateParameter:
    boto3_raw_data: "type_defs.CfnStackUpdateParameterTypeDef" = dataclasses.field()

    Key = field("Key")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CfnStackUpdateParameterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CfnStackUpdateParameterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ShuffleConfig:
    boto3_raw_data: "type_defs.ShuffleConfigTypeDef" = dataclasses.field()

    Seed = field("Seed")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ShuffleConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ShuffleConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ChannelSpecificationOutput:
    boto3_raw_data: "type_defs.ChannelSpecificationOutputTypeDef" = dataclasses.field()

    Name = field("Name")
    SupportedContentTypes = field("SupportedContentTypes")
    SupportedInputModes = field("SupportedInputModes")
    Description = field("Description")
    IsRequired = field("IsRequired")
    SupportedCompressionTypes = field("SupportedCompressionTypes")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ChannelSpecificationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ChannelSpecificationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ChannelSpecification:
    boto3_raw_data: "type_defs.ChannelSpecificationTypeDef" = dataclasses.field()

    Name = field("Name")
    SupportedContentTypes = field("SupportedContentTypes")
    SupportedInputModes = field("SupportedInputModes")
    Description = field("Description")
    IsRequired = field("IsRequired")
    SupportedCompressionTypes = field("SupportedCompressionTypes")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ChannelSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ChannelSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CheckpointConfig:
    boto3_raw_data: "type_defs.CheckpointConfigTypeDef" = dataclasses.field()

    S3Uri = field("S3Uri")
    LocalPath = field("LocalPath")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CheckpointConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CheckpointConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClarifyCheckStepMetadata:
    boto3_raw_data: "type_defs.ClarifyCheckStepMetadataTypeDef" = dataclasses.field()

    CheckType = field("CheckType")
    BaselineUsedForDriftCheckConstraints = field("BaselineUsedForDriftCheckConstraints")
    CalculatedBaselineConstraints = field("CalculatedBaselineConstraints")
    ModelPackageGroupName = field("ModelPackageGroupName")
    ViolationReport = field("ViolationReport")
    CheckJobArn = field("CheckJobArn")
    SkipCheck = field("SkipCheck")
    RegisterNewBaseline = field("RegisterNewBaseline")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClarifyCheckStepMetadataTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClarifyCheckStepMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClarifyInferenceConfigOutput:
    boto3_raw_data: "type_defs.ClarifyInferenceConfigOutputTypeDef" = (
        dataclasses.field()
    )

    FeaturesAttribute = field("FeaturesAttribute")
    ContentTemplate = field("ContentTemplate")
    MaxRecordCount = field("MaxRecordCount")
    MaxPayloadInMB = field("MaxPayloadInMB")
    ProbabilityIndex = field("ProbabilityIndex")
    LabelIndex = field("LabelIndex")
    ProbabilityAttribute = field("ProbabilityAttribute")
    LabelAttribute = field("LabelAttribute")
    LabelHeaders = field("LabelHeaders")
    FeatureHeaders = field("FeatureHeaders")
    FeatureTypes = field("FeatureTypes")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClarifyInferenceConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClarifyInferenceConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClarifyInferenceConfig:
    boto3_raw_data: "type_defs.ClarifyInferenceConfigTypeDef" = dataclasses.field()

    FeaturesAttribute = field("FeaturesAttribute")
    ContentTemplate = field("ContentTemplate")
    MaxRecordCount = field("MaxRecordCount")
    MaxPayloadInMB = field("MaxPayloadInMB")
    ProbabilityIndex = field("ProbabilityIndex")
    LabelIndex = field("LabelIndex")
    ProbabilityAttribute = field("ProbabilityAttribute")
    LabelAttribute = field("LabelAttribute")
    LabelHeaders = field("LabelHeaders")
    FeatureHeaders = field("FeatureHeaders")
    FeatureTypes = field("FeatureTypes")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClarifyInferenceConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClarifyInferenceConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClarifyShapBaselineConfig:
    boto3_raw_data: "type_defs.ClarifyShapBaselineConfigTypeDef" = dataclasses.field()

    MimeType = field("MimeType")
    ShapBaseline = field("ShapBaseline")
    ShapBaselineUri = field("ShapBaselineUri")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClarifyShapBaselineConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClarifyShapBaselineConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClarifyTextConfig:
    boto3_raw_data: "type_defs.ClarifyTextConfigTypeDef" = dataclasses.field()

    Language = field("Language")
    Granularity = field("Granularity")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ClarifyTextConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClarifyTextConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClusterAutoScalingConfigOutput:
    boto3_raw_data: "type_defs.ClusterAutoScalingConfigOutputTypeDef" = (
        dataclasses.field()
    )

    Mode = field("Mode")
    Status = field("Status")
    AutoScalerType = field("AutoScalerType")
    FailureMessage = field("FailureMessage")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ClusterAutoScalingConfigOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClusterAutoScalingConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClusterAutoScalingConfig:
    boto3_raw_data: "type_defs.ClusterAutoScalingConfigTypeDef" = dataclasses.field()

    Mode = field("Mode")
    AutoScalerType = field("AutoScalerType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClusterAutoScalingConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClusterAutoScalingConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClusterEbsVolumeConfig:
    boto3_raw_data: "type_defs.ClusterEbsVolumeConfigTypeDef" = dataclasses.field()

    VolumeSizeInGB = field("VolumeSizeInGB")
    VolumeKmsKeyId = field("VolumeKmsKeyId")
    RootVolume = field("RootVolume")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClusterEbsVolumeConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClusterEbsVolumeConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClusterEventSummary:
    boto3_raw_data: "type_defs.ClusterEventSummaryTypeDef" = dataclasses.field()

    EventId = field("EventId")
    ClusterArn = field("ClusterArn")
    ClusterName = field("ClusterName")
    ResourceType = field("ResourceType")
    EventTime = field("EventTime")
    InstanceGroupName = field("InstanceGroupName")
    InstanceId = field("InstanceId")
    Description = field("Description")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClusterEventSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClusterEventSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClusterLifeCycleConfig:
    boto3_raw_data: "type_defs.ClusterLifeCycleConfigTypeDef" = dataclasses.field()

    SourceS3Uri = field("SourceS3Uri")
    OnCreate = field("OnCreate")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClusterLifeCycleConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClusterLifeCycleConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClusterInstancePlacement:
    boto3_raw_data: "type_defs.ClusterInstancePlacementTypeDef" = dataclasses.field()

    AvailabilityZone = field("AvailabilityZone")
    AvailabilityZoneId = field("AvailabilityZoneId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClusterInstancePlacementTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClusterInstancePlacementTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClusterInstanceStatusDetails:
    boto3_raw_data: "type_defs.ClusterInstanceStatusDetailsTypeDef" = (
        dataclasses.field()
    )

    Status = field("Status")
    Message = field("Message")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClusterInstanceStatusDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClusterInstanceStatusDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClusterMetadata:
    boto3_raw_data: "type_defs.ClusterMetadataTypeDef" = dataclasses.field()

    FailureMessage = field("FailureMessage")
    EksRoleAccessEntries = field("EksRoleAccessEntries")
    SlrAccessEntry = field("SlrAccessEntry")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ClusterMetadataTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ClusterMetadataTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UltraServerInfo:
    boto3_raw_data: "type_defs.UltraServerInfoTypeDef" = dataclasses.field()

    Id = field("Id")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.UltraServerInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.UltraServerInfoTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClusterOrchestratorEksConfig:
    boto3_raw_data: "type_defs.ClusterOrchestratorEksConfigTypeDef" = (
        dataclasses.field()
    )

    ClusterArn = field("ClusterArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClusterOrchestratorEksConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClusterOrchestratorEksConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClusterSchedulerConfigSummary:
    boto3_raw_data: "type_defs.ClusterSchedulerConfigSummaryTypeDef" = (
        dataclasses.field()
    )

    ClusterSchedulerConfigArn = field("ClusterSchedulerConfigArn")
    ClusterSchedulerConfigId = field("ClusterSchedulerConfigId")
    Name = field("Name")
    CreationTime = field("CreationTime")
    Status = field("Status")
    ClusterSchedulerConfigVersion = field("ClusterSchedulerConfigVersion")
    LastModifiedTime = field("LastModifiedTime")
    ClusterArn = field("ClusterArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ClusterSchedulerConfigSummaryTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClusterSchedulerConfigSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClusterSummary:
    boto3_raw_data: "type_defs.ClusterSummaryTypeDef" = dataclasses.field()

    ClusterArn = field("ClusterArn")
    ClusterName = field("ClusterName")
    CreationTime = field("CreationTime")
    ClusterStatus = field("ClusterStatus")
    TrainingPlanArns = field("TrainingPlanArns")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ClusterSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ClusterSummaryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClusterTieredStorageConfig:
    boto3_raw_data: "type_defs.ClusterTieredStorageConfigTypeDef" = dataclasses.field()

    Mode = field("Mode")
    InstanceMemoryAllocationPercentage = field("InstanceMemoryAllocationPercentage")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClusterTieredStorageConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClusterTieredStorageConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ContainerConfigOutput:
    boto3_raw_data: "type_defs.ContainerConfigOutputTypeDef" = dataclasses.field()

    ContainerArguments = field("ContainerArguments")
    ContainerEntrypoint = field("ContainerEntrypoint")
    ContainerEnvironmentVariables = field("ContainerEnvironmentVariables")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ContainerConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ContainerConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FileSystemConfig:
    boto3_raw_data: "type_defs.FileSystemConfigTypeDef" = dataclasses.field()

    MountPath = field("MountPath")
    DefaultUid = field("DefaultUid")
    DefaultGid = field("DefaultGid")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FileSystemConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FileSystemConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ContainerConfig:
    boto3_raw_data: "type_defs.ContainerConfigTypeDef" = dataclasses.field()

    ContainerArguments = field("ContainerArguments")
    ContainerEntrypoint = field("ContainerEntrypoint")
    ContainerEnvironmentVariables = field("ContainerEnvironmentVariables")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ContainerConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ContainerConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomImage:
    boto3_raw_data: "type_defs.CustomImageTypeDef" = dataclasses.field()

    ImageName = field("ImageName")
    AppImageConfigName = field("AppImageConfigName")
    ImageVersionNumber = field("ImageVersionNumber")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CustomImageTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CustomImageTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GitConfig:
    boto3_raw_data: "type_defs.GitConfigTypeDef" = dataclasses.field()

    RepositoryUrl = field("RepositoryUrl")
    Branch = field("Branch")
    SecretArn = field("SecretArn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.GitConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.GitConfigTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CodeRepository:
    boto3_raw_data: "type_defs.CodeRepositoryTypeDef" = dataclasses.field()

    RepositoryUrl = field("RepositoryUrl")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CodeRepositoryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CodeRepositoryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CognitoConfig:
    boto3_raw_data: "type_defs.CognitoConfigTypeDef" = dataclasses.field()

    UserPool = field("UserPool")
    ClientId = field("ClientId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CognitoConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CognitoConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CognitoMemberDefinition:
    boto3_raw_data: "type_defs.CognitoMemberDefinitionTypeDef" = dataclasses.field()

    UserPool = field("UserPool")
    UserGroup = field("UserGroup")
    ClientId = field("ClientId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CognitoMemberDefinitionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CognitoMemberDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VectorConfig:
    boto3_raw_data: "type_defs.VectorConfigTypeDef" = dataclasses.field()

    Dimension = field("Dimension")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VectorConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VectorConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CollectionConfigurationOutput:
    boto3_raw_data: "type_defs.CollectionConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    CollectionName = field("CollectionName")
    CollectionParameters = field("CollectionParameters")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CollectionConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CollectionConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CollectionConfiguration:
    boto3_raw_data: "type_defs.CollectionConfigurationTypeDef" = dataclasses.field()

    CollectionName = field("CollectionName")
    CollectionParameters = field("CollectionParameters")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CollectionConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CollectionConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CompilationJobSummary:
    boto3_raw_data: "type_defs.CompilationJobSummaryTypeDef" = dataclasses.field()

    CompilationJobName = field("CompilationJobName")
    CompilationJobArn = field("CompilationJobArn")
    CreationTime = field("CreationTime")
    CompilationJobStatus = field("CompilationJobStatus")
    CompilationStartTime = field("CompilationStartTime")
    CompilationEndTime = field("CompilationEndTime")
    CompilationTargetDevice = field("CompilationTargetDevice")
    CompilationTargetPlatformOs = field("CompilationTargetPlatformOs")
    CompilationTargetPlatformArch = field("CompilationTargetPlatformArch")
    CompilationTargetPlatformAccelerator = field("CompilationTargetPlatformAccelerator")
    LastModifiedTime = field("LastModifiedTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CompilationJobSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CompilationJobSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ComputeQuotaResourceConfig:
    boto3_raw_data: "type_defs.ComputeQuotaResourceConfigTypeDef" = dataclasses.field()

    InstanceType = field("InstanceType")
    Count = field("Count")
    Accelerators = field("Accelerators")
    VCpu = field("VCpu")
    MemoryInGiB = field("MemoryInGiB")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ComputeQuotaResourceConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ComputeQuotaResourceConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourceSharingConfig:
    boto3_raw_data: "type_defs.ResourceSharingConfigTypeDef" = dataclasses.field()

    Strategy = field("Strategy")
    BorrowLimit = field("BorrowLimit")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ResourceSharingConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResourceSharingConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ComputeQuotaTarget:
    boto3_raw_data: "type_defs.ComputeQuotaTargetTypeDef" = dataclasses.field()

    TeamName = field("TeamName")
    FairShareWeight = field("FairShareWeight")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ComputeQuotaTargetTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ComputeQuotaTargetTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConditionStepMetadata:
    boto3_raw_data: "type_defs.ConditionStepMetadataTypeDef" = dataclasses.field()

    Outcome = field("Outcome")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ConditionStepMetadataTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConditionStepMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MultiModelConfig:
    boto3_raw_data: "type_defs.MultiModelConfigTypeDef" = dataclasses.field()

    ModelCacheSetting = field("ModelCacheSetting")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MultiModelConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MultiModelConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ContextSource:
    boto3_raw_data: "type_defs.ContextSourceTypeDef" = dataclasses.field()

    SourceUri = field("SourceUri")
    SourceType = field("SourceType")
    SourceId = field("SourceId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ContextSourceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ContextSourceTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ContinuousParameterRangeSpecification:
    boto3_raw_data: "type_defs.ContinuousParameterRangeSpecificationTypeDef" = (
        dataclasses.field()
    )

    MinValue = field("MinValue")
    MaxValue = field("MaxValue")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ContinuousParameterRangeSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ContinuousParameterRangeSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ContinuousParameterRange:
    boto3_raw_data: "type_defs.ContinuousParameterRangeTypeDef" = dataclasses.field()

    Name = field("Name")
    MinValue = field("MinValue")
    MaxValue = field("MaxValue")
    ScalingType = field("ScalingType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ContinuousParameterRangeTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ContinuousParameterRangeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConvergenceDetected:
    boto3_raw_data: "type_defs.ConvergenceDetectedTypeDef" = dataclasses.field()

    CompleteOnConvergence = field("CompleteOnConvergence")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ConvergenceDetectedTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConvergenceDetectedTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MetadataProperties:
    boto3_raw_data: "type_defs.MetadataPropertiesTypeDef" = dataclasses.field()

    CommitId = field("CommitId")
    Repository = field("Repository")
    GeneratedBy = field("GeneratedBy")
    ProjectId = field("ProjectId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MetadataPropertiesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MetadataPropertiesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelDeployConfig:
    boto3_raw_data: "type_defs.ModelDeployConfigTypeDef" = dataclasses.field()

    AutoGenerateEndpointName = field("AutoGenerateEndpointName")
    EndpointName = field("EndpointName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ModelDeployConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelDeployConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InputConfig:
    boto3_raw_data: "type_defs.InputConfigTypeDef" = dataclasses.field()

    S3Uri = field("S3Uri")
    Framework = field("Framework")
    DataInputConfig = field("DataInputConfig")
    FrameworkVersion = field("FrameworkVersion")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.InputConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.InputConfigTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StoppingCondition:
    boto3_raw_data: "type_defs.StoppingConditionTypeDef" = dataclasses.field()

    MaxRuntimeInSeconds = field("MaxRuntimeInSeconds")
    MaxWaitTimeInSeconds = field("MaxWaitTimeInSeconds")
    MaxPendingTimeInSeconds = field("MaxPendingTimeInSeconds")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.StoppingConditionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StoppingConditionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringStoppingCondition:
    boto3_raw_data: "type_defs.MonitoringStoppingConditionTypeDef" = dataclasses.field()

    MaxRuntimeInSeconds = field("MaxRuntimeInSeconds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MonitoringStoppingConditionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringStoppingConditionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EdgeOutputConfig:
    boto3_raw_data: "type_defs.EdgeOutputConfigTypeDef" = dataclasses.field()

    S3OutputLocation = field("S3OutputLocation")
    KmsKeyId = field("KmsKeyId")
    PresetDeploymentType = field("PresetDeploymentType")
    PresetDeploymentConfig = field("PresetDeploymentConfig")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EdgeOutputConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EdgeOutputConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EdgeDeploymentModelConfig:
    boto3_raw_data: "type_defs.EdgeDeploymentModelConfigTypeDef" = dataclasses.field()

    ModelHandle = field("ModelHandle")
    EdgePackagingJobName = field("EdgePackagingJobName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EdgeDeploymentModelConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EdgeDeploymentModelConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ThroughputConfig:
    boto3_raw_data: "type_defs.ThroughputConfigTypeDef" = dataclasses.field()

    ThroughputMode = field("ThroughputMode")
    ProvisionedReadCapacityUnits = field("ProvisionedReadCapacityUnits")
    ProvisionedWriteCapacityUnits = field("ProvisionedWriteCapacityUnits")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ThroughputConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ThroughputConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FlowDefinitionOutputConfig:
    boto3_raw_data: "type_defs.FlowDefinitionOutputConfigTypeDef" = dataclasses.field()

    S3OutputPath = field("S3OutputPath")
    KmsKeyId = field("KmsKeyId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FlowDefinitionOutputConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FlowDefinitionOutputConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HumanLoopRequestSource:
    boto3_raw_data: "type_defs.HumanLoopRequestSourceTypeDef" = dataclasses.field()

    AwsManagedHumanLoopRequestSource = field("AwsManagedHumanLoopRequestSource")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HumanLoopRequestSourceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HumanLoopRequestSourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PaginatorConfig:
    boto3_raw_data: "type_defs.PaginatorConfigTypeDef" = dataclasses.field()

    MaxItems = field("MaxItems")
    PageSize = field("PageSize")
    StartingToken = field("StartingToken")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PaginatorConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PaginatorConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PresignedUrlAccessConfig:
    boto3_raw_data: "type_defs.PresignedUrlAccessConfigTypeDef" = dataclasses.field()

    AcceptEula = field("AcceptEula")
    ExpectedS3Url = field("ExpectedS3Url")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PresignedUrlAccessConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PresignedUrlAccessConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HubS3StorageConfig:
    boto3_raw_data: "type_defs.HubS3StorageConfigTypeDef" = dataclasses.field()

    S3OutputPath = field("S3OutputPath")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HubS3StorageConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HubS3StorageConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UiTemplate:
    boto3_raw_data: "type_defs.UiTemplateTypeDef" = dataclasses.field()

    Content = field("Content")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.UiTemplateTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.UiTemplateTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateImageVersionRequest:
    boto3_raw_data: "type_defs.CreateImageVersionRequestTypeDef" = dataclasses.field()

    BaseImage = field("BaseImage")
    ClientToken = field("ClientToken")
    ImageName = field("ImageName")
    Aliases = field("Aliases")
    VendorGuidance = field("VendorGuidance")
    JobType = field("JobType")
    MLFramework = field("MLFramework")
    ProgrammingLang = field("ProgrammingLang")
    Processor = field("Processor")
    Horovod = field("Horovod")
    ReleaseNotes = field("ReleaseNotes")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateImageVersionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateImageVersionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceComponentRuntimeConfig:
    boto3_raw_data: "type_defs.InferenceComponentRuntimeConfigTypeDef" = (
        dataclasses.field()
    )

    CopyCount = field("CopyCount")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.InferenceComponentRuntimeConfigTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceComponentRuntimeConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LabelingJobOutputConfig:
    boto3_raw_data: "type_defs.LabelingJobOutputConfigTypeDef" = dataclasses.field()

    S3OutputPath = field("S3OutputPath")
    KmsKeyId = field("KmsKeyId")
    SnsTopicArn = field("SnsTopicArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LabelingJobOutputConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LabelingJobOutputConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LabelingJobStoppingConditions:
    boto3_raw_data: "type_defs.LabelingJobStoppingConditionsTypeDef" = (
        dataclasses.field()
    )

    MaxHumanLabeledObjectCount = field("MaxHumanLabeledObjectCount")
    MaxPercentageOfInputDatasetLabeled = field("MaxPercentageOfInputDatasetLabeled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.LabelingJobStoppingConditionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LabelingJobStoppingConditionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelCardExportOutputConfig:
    boto3_raw_data: "type_defs.ModelCardExportOutputConfigTypeDef" = dataclasses.field()

    S3OutputPath = field("S3OutputPath")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelCardExportOutputConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelCardExportOutputConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelCardSecurityConfig:
    boto3_raw_data: "type_defs.ModelCardSecurityConfigTypeDef" = dataclasses.field()

    KmsKeyId = field("KmsKeyId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelCardSecurityConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelCardSecurityConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceExecutionConfig:
    boto3_raw_data: "type_defs.InferenceExecutionConfigTypeDef" = dataclasses.field()

    Mode = field("Mode")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InferenceExecutionConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceExecutionConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelLifeCycle:
    boto3_raw_data: "type_defs.ModelLifeCycleTypeDef" = dataclasses.field()

    Stage = field("Stage")
    StageStatus = field("StageStatus")
    StageDescription = field("StageDescription")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ModelLifeCycleTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ModelLifeCycleTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelPackageModelCard:
    boto3_raw_data: "type_defs.ModelPackageModelCardTypeDef" = dataclasses.field()

    ModelCardContent = field("ModelCardContent")
    ModelCardStatus = field("ModelCardStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelPackageModelCardTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelPackageModelCardTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelPackageSecurityConfig:
    boto3_raw_data: "type_defs.ModelPackageSecurityConfigTypeDef" = dataclasses.field()

    KmsKeyId = field("KmsKeyId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelPackageSecurityConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelPackageSecurityConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceMetadataServiceConfiguration:
    boto3_raw_data: "type_defs.InstanceMetadataServiceConfigurationTypeDef" = (
        dataclasses.field()
    )

    MinimumInstanceMetadataServiceVersion = field(
        "MinimumInstanceMetadataServiceVersion"
    )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InstanceMetadataServiceConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceMetadataServiceConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NotebookInstanceLifecycleHook:
    boto3_raw_data: "type_defs.NotebookInstanceLifecycleHookTypeDef" = (
        dataclasses.field()
    )

    Content = field("Content")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.NotebookInstanceLifecycleHookTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NotebookInstanceLifecycleHookTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OptimizationJobOutputConfig:
    boto3_raw_data: "type_defs.OptimizationJobOutputConfigTypeDef" = dataclasses.field()

    S3OutputLocation = field("S3OutputLocation")
    KmsKeyId = field("KmsKeyId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.OptimizationJobOutputConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OptimizationJobOutputConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreatePartnerAppPresignedUrlRequest:
    boto3_raw_data: "type_defs.CreatePartnerAppPresignedUrlRequestTypeDef" = (
        dataclasses.field()
    )

    Arn = field("Arn")
    ExpiresInSeconds = field("ExpiresInSeconds")
    SessionExpirationDurationInSeconds = field("SessionExpirationDurationInSeconds")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreatePartnerAppPresignedUrlRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreatePartnerAppPresignedUrlRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PartnerAppMaintenanceConfig:
    boto3_raw_data: "type_defs.PartnerAppMaintenanceConfigTypeDef" = dataclasses.field()

    MaintenanceWindowStart = field("MaintenanceWindowStart")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PartnerAppMaintenanceConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PartnerAppMaintenanceConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParallelismConfiguration:
    boto3_raw_data: "type_defs.ParallelismConfigurationTypeDef" = dataclasses.field()

    MaxParallelExecutionSteps = field("MaxParallelExecutionSteps")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ParallelismConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ParallelismConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PipelineDefinitionS3Location:
    boto3_raw_data: "type_defs.PipelineDefinitionS3LocationTypeDef" = (
        dataclasses.field()
    )

    Bucket = field("Bucket")
    ObjectKey = field("ObjectKey")
    VersionId = field("VersionId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PipelineDefinitionS3LocationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PipelineDefinitionS3LocationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreatePresignedDomainUrlRequest:
    boto3_raw_data: "type_defs.CreatePresignedDomainUrlRequestTypeDef" = (
        dataclasses.field()
    )

    DomainId = field("DomainId")
    UserProfileName = field("UserProfileName")
    SessionExpirationDurationInSeconds = field("SessionExpirationDurationInSeconds")
    ExpiresInSeconds = field("ExpiresInSeconds")
    SpaceName = field("SpaceName")
    LandingUri = field("LandingUri")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreatePresignedDomainUrlRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreatePresignedDomainUrlRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreatePresignedMlflowTrackingServerUrlRequest:
    boto3_raw_data: "type_defs.CreatePresignedMlflowTrackingServerUrlRequestTypeDef" = (
        dataclasses.field()
    )

    TrackingServerName = field("TrackingServerName")
    ExpiresInSeconds = field("ExpiresInSeconds")
    SessionExpirationDurationInSeconds = field("SessionExpirationDurationInSeconds")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreatePresignedMlflowTrackingServerUrlRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreatePresignedMlflowTrackingServerUrlRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreatePresignedNotebookInstanceUrlInput:
    boto3_raw_data: "type_defs.CreatePresignedNotebookInstanceUrlInputTypeDef" = (
        dataclasses.field()
    )

    NotebookInstanceName = field("NotebookInstanceName")
    SessionExpirationDurationInSeconds = field("SessionExpirationDurationInSeconds")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreatePresignedNotebookInstanceUrlInputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreatePresignedNotebookInstanceUrlInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExperimentConfig:
    boto3_raw_data: "type_defs.ExperimentConfigTypeDef" = dataclasses.field()

    ExperimentName = field("ExperimentName")
    TrialName = field("TrialName")
    TrialComponentDisplayName = field("TrialComponentDisplayName")
    RunName = field("RunName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ExperimentConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ExperimentConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProcessingStoppingCondition:
    boto3_raw_data: "type_defs.ProcessingStoppingConditionTypeDef" = dataclasses.field()

    MaxRuntimeInSeconds = field("MaxRuntimeInSeconds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProcessingStoppingConditionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProcessingStoppingConditionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OwnershipSettings:
    boto3_raw_data: "type_defs.OwnershipSettingsTypeDef" = dataclasses.field()

    OwnerUserProfileName = field("OwnerUserProfileName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.OwnershipSettingsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OwnershipSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpaceSharingSettings:
    boto3_raw_data: "type_defs.SpaceSharingSettingsTypeDef" = dataclasses.field()

    SharingType = field("SharingType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SpaceSharingSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpaceSharingSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InfraCheckConfig:
    boto3_raw_data: "type_defs.InfraCheckConfigTypeDef" = dataclasses.field()

    EnableInfraCheck = field("EnableInfraCheck")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.InfraCheckConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InfraCheckConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OutputDataConfig:
    boto3_raw_data: "type_defs.OutputDataConfigTypeDef" = dataclasses.field()

    S3OutputPath = field("S3OutputPath")
    KmsKeyId = field("KmsKeyId")
    CompressionType = field("CompressionType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.OutputDataConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OutputDataConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RemoteDebugConfig:
    boto3_raw_data: "type_defs.RemoteDebugConfigTypeDef" = dataclasses.field()

    EnableRemoteDebug = field("EnableRemoteDebug")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RemoteDebugConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RemoteDebugConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RetryStrategy:
    boto3_raw_data: "type_defs.RetryStrategyTypeDef" = dataclasses.field()

    MaximumRetryAttempts = field("MaximumRetryAttempts")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RetryStrategyTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.RetryStrategyTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SessionChainingConfig:
    boto3_raw_data: "type_defs.SessionChainingConfigTypeDef" = dataclasses.field()

    EnableSessionTagChaining = field("EnableSessionTagChaining")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SessionChainingConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SessionChainingConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TensorBoardOutputConfig:
    boto3_raw_data: "type_defs.TensorBoardOutputConfigTypeDef" = dataclasses.field()

    S3OutputPath = field("S3OutputPath")
    LocalPath = field("LocalPath")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TensorBoardOutputConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TensorBoardOutputConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataProcessing:
    boto3_raw_data: "type_defs.DataProcessingTypeDef" = dataclasses.field()

    InputFilter = field("InputFilter")
    OutputFilter = field("OutputFilter")
    JoinSource = field("JoinSource")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DataProcessingTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DataProcessingTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelClientConfig:
    boto3_raw_data: "type_defs.ModelClientConfigTypeDef" = dataclasses.field()

    InvocationsTimeoutInSeconds = field("InvocationsTimeoutInSeconds")
    InvocationsMaxRetries = field("InvocationsMaxRetries")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ModelClientConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelClientConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransformOutput:
    boto3_raw_data: "type_defs.TransformOutputTypeDef" = dataclasses.field()

    S3OutputPath = field("S3OutputPath")
    Accept = field("Accept")
    AssembleWith = field("AssembleWith")
    KmsKeyId = field("KmsKeyId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TransformOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TransformOutputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransformResources:
    boto3_raw_data: "type_defs.TransformResourcesTypeDef" = dataclasses.field()

    InstanceType = field("InstanceType")
    InstanceCount = field("InstanceCount")
    VolumeKmsKeyId = field("VolumeKmsKeyId")
    TransformAmiVersion = field("TransformAmiVersion")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TransformResourcesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransformResourcesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrialComponentArtifact:
    boto3_raw_data: "type_defs.TrialComponentArtifactTypeDef" = dataclasses.field()

    Value = field("Value")
    MediaType = field("MediaType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrialComponentArtifactTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrialComponentArtifactTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrialComponentParameterValue:
    boto3_raw_data: "type_defs.TrialComponentParameterValueTypeDef" = (
        dataclasses.field()
    )

    StringValue = field("StringValue")
    NumberValue = field("NumberValue")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrialComponentParameterValueTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrialComponentParameterValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrialComponentStatus:
    boto3_raw_data: "type_defs.TrialComponentStatusTypeDef" = dataclasses.field()

    PrimaryStatus = field("PrimaryStatus")
    Message = field("Message")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrialComponentStatusTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrialComponentStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OidcConfig:
    boto3_raw_data: "type_defs.OidcConfigTypeDef" = dataclasses.field()

    ClientId = field("ClientId")
    ClientSecret = field("ClientSecret")
    Issuer = field("Issuer")
    AuthorizationEndpoint = field("AuthorizationEndpoint")
    TokenEndpoint = field("TokenEndpoint")
    UserInfoEndpoint = field("UserInfoEndpoint")
    LogoutEndpoint = field("LogoutEndpoint")
    JwksUri = field("JwksUri")
    Scope = field("Scope")
    AuthenticationRequestExtraParams = field("AuthenticationRequestExtraParams")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.OidcConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.OidcConfigTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WorkforceVpcConfigRequest:
    boto3_raw_data: "type_defs.WorkforceVpcConfigRequestTypeDef" = dataclasses.field()

    VpcId = field("VpcId")
    SecurityGroupIds = field("SecurityGroupIds")
    Subnets = field("Subnets")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.WorkforceVpcConfigRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WorkforceVpcConfigRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NotificationConfiguration:
    boto3_raw_data: "type_defs.NotificationConfigurationTypeDef" = dataclasses.field()

    NotificationTopicArn = field("NotificationTopicArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NotificationConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NotificationConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EFSFileSystemConfig:
    boto3_raw_data: "type_defs.EFSFileSystemConfigTypeDef" = dataclasses.field()

    FileSystemId = field("FileSystemId")
    FileSystemPath = field("FileSystemPath")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EFSFileSystemConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EFSFileSystemConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FSxLustreFileSystemConfig:
    boto3_raw_data: "type_defs.FSxLustreFileSystemConfigTypeDef" = dataclasses.field()

    FileSystemId = field("FileSystemId")
    FileSystemPath = field("FileSystemPath")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FSxLustreFileSystemConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FSxLustreFileSystemConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class S3FileSystemConfig:
    boto3_raw_data: "type_defs.S3FileSystemConfigTypeDef" = dataclasses.field()

    S3Uri = field("S3Uri")
    MountPath = field("MountPath")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.S3FileSystemConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.S3FileSystemConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EFSFileSystem:
    boto3_raw_data: "type_defs.EFSFileSystemTypeDef" = dataclasses.field()

    FileSystemId = field("FileSystemId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EFSFileSystemTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.EFSFileSystemTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FSxLustreFileSystem:
    boto3_raw_data: "type_defs.FSxLustreFileSystemTypeDef" = dataclasses.field()

    FileSystemId = field("FileSystemId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FSxLustreFileSystemTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FSxLustreFileSystemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class S3FileSystem:
    boto3_raw_data: "type_defs.S3FileSystemTypeDef" = dataclasses.field()

    S3Uri = field("S3Uri")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.S3FileSystemTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.S3FileSystemTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomPosixUserConfig:
    boto3_raw_data: "type_defs.CustomPosixUserConfigTypeDef" = dataclasses.field()

    Uid = field("Uid")
    Gid = field("Gid")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CustomPosixUserConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomPosixUserConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomizedMetricSpecification:
    boto3_raw_data: "type_defs.CustomizedMetricSpecificationTypeDef" = (
        dataclasses.field()
    )

    MetricName = field("MetricName")
    Namespace = field("Namespace")
    Statistic = field("Statistic")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CustomizedMetricSpecificationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomizedMetricSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataCaptureConfigSummary:
    boto3_raw_data: "type_defs.DataCaptureConfigSummaryTypeDef" = dataclasses.field()

    EnableCapture = field("EnableCapture")
    CaptureStatus = field("CaptureStatus")
    CurrentSamplingPercentage = field("CurrentSamplingPercentage")
    DestinationS3Uri = field("DestinationS3Uri")
    KmsKeyId = field("KmsKeyId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataCaptureConfigSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataCaptureConfigSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataCatalogConfig:
    boto3_raw_data: "type_defs.DataCatalogConfigTypeDef" = dataclasses.field()

    TableName = field("TableName")
    Catalog = field("Catalog")
    Database = field("Database")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DataCatalogConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataCatalogConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataQualityAppSpecificationOutput:
    boto3_raw_data: "type_defs.DataQualityAppSpecificationOutputTypeDef" = (
        dataclasses.field()
    )

    ImageUri = field("ImageUri")
    ContainerEntrypoint = field("ContainerEntrypoint")
    ContainerArguments = field("ContainerArguments")
    RecordPreprocessorSourceUri = field("RecordPreprocessorSourceUri")
    PostAnalyticsProcessorSourceUri = field("PostAnalyticsProcessorSourceUri")
    Environment = field("Environment")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DataQualityAppSpecificationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataQualityAppSpecificationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataQualityAppSpecification:
    boto3_raw_data: "type_defs.DataQualityAppSpecificationTypeDef" = dataclasses.field()

    ImageUri = field("ImageUri")
    ContainerEntrypoint = field("ContainerEntrypoint")
    ContainerArguments = field("ContainerArguments")
    RecordPreprocessorSourceUri = field("RecordPreprocessorSourceUri")
    PostAnalyticsProcessorSourceUri = field("PostAnalyticsProcessorSourceUri")
    Environment = field("Environment")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataQualityAppSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataQualityAppSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringConstraintsResource:
    boto3_raw_data: "type_defs.MonitoringConstraintsResourceTypeDef" = (
        dataclasses.field()
    )

    S3Uri = field("S3Uri")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.MonitoringConstraintsResourceTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringConstraintsResourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringStatisticsResource:
    boto3_raw_data: "type_defs.MonitoringStatisticsResourceTypeDef" = (
        dataclasses.field()
    )

    S3Uri = field("S3Uri")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MonitoringStatisticsResourceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringStatisticsResourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EndpointInput:
    boto3_raw_data: "type_defs.EndpointInputTypeDef" = dataclasses.field()

    EndpointName = field("EndpointName")
    LocalPath = field("LocalPath")
    S3InputMode = field("S3InputMode")
    S3DataDistributionType = field("S3DataDistributionType")
    FeaturesAttribute = field("FeaturesAttribute")
    InferenceAttribute = field("InferenceAttribute")
    ProbabilityAttribute = field("ProbabilityAttribute")
    ProbabilityThresholdAttribute = field("ProbabilityThresholdAttribute")
    StartTimeOffset = field("StartTimeOffset")
    EndTimeOffset = field("EndTimeOffset")
    ExcludeFeaturesAttribute = field("ExcludeFeaturesAttribute")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EndpointInputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.EndpointInputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FileSystemDataSource:
    boto3_raw_data: "type_defs.FileSystemDataSourceTypeDef" = dataclasses.field()

    FileSystemId = field("FileSystemId")
    FileSystemAccessMode = field("FileSystemAccessMode")
    FileSystemType = field("FileSystemType")
    DirectoryPath = field("DirectoryPath")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FileSystemDataSourceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FileSystemDataSourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RedshiftDatasetDefinition:
    boto3_raw_data: "type_defs.RedshiftDatasetDefinitionTypeDef" = dataclasses.field()

    ClusterId = field("ClusterId")
    Database = field("Database")
    DbUser = field("DbUser")
    QueryString = field("QueryString")
    ClusterRoleArn = field("ClusterRoleArn")
    OutputS3Uri = field("OutputS3Uri")
    OutputFormat = field("OutputFormat")
    KmsKeyId = field("KmsKeyId")
    OutputCompression = field("OutputCompression")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RedshiftDatasetDefinitionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RedshiftDatasetDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DebugRuleConfigurationOutput:
    boto3_raw_data: "type_defs.DebugRuleConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    RuleConfigurationName = field("RuleConfigurationName")
    RuleEvaluatorImage = field("RuleEvaluatorImage")
    LocalPath = field("LocalPath")
    S3OutputPath = field("S3OutputPath")
    InstanceType = field("InstanceType")
    VolumeSizeInGB = field("VolumeSizeInGB")
    RuleParameters = field("RuleParameters")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DebugRuleConfigurationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DebugRuleConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DebugRuleConfiguration:
    boto3_raw_data: "type_defs.DebugRuleConfigurationTypeDef" = dataclasses.field()

    RuleConfigurationName = field("RuleConfigurationName")
    RuleEvaluatorImage = field("RuleEvaluatorImage")
    LocalPath = field("LocalPath")
    S3OutputPath = field("S3OutputPath")
    InstanceType = field("InstanceType")
    VolumeSizeInGB = field("VolumeSizeInGB")
    RuleParameters = field("RuleParameters")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DebugRuleConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DebugRuleConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DebugRuleEvaluationStatus:
    boto3_raw_data: "type_defs.DebugRuleEvaluationStatusTypeDef" = dataclasses.field()

    RuleConfigurationName = field("RuleConfigurationName")
    RuleEvaluationJobArn = field("RuleEvaluationJobArn")
    RuleEvaluationStatus = field("RuleEvaluationStatus")
    StatusDetails = field("StatusDetails")
    LastModifiedTime = field("LastModifiedTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DebugRuleEvaluationStatusTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DebugRuleEvaluationStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DefaultEbsStorageSettings:
    boto3_raw_data: "type_defs.DefaultEbsStorageSettingsTypeDef" = dataclasses.field()

    DefaultEbsVolumeSizeInGb = field("DefaultEbsVolumeSizeInGb")
    MaximumEbsVolumeSizeInGb = field("MaximumEbsVolumeSizeInGb")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DefaultEbsStorageSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DefaultEbsStorageSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteActionRequest:
    boto3_raw_data: "type_defs.DeleteActionRequestTypeDef" = dataclasses.field()

    ActionName = field("ActionName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteActionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteActionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteAlgorithmInput:
    boto3_raw_data: "type_defs.DeleteAlgorithmInputTypeDef" = dataclasses.field()

    AlgorithmName = field("AlgorithmName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteAlgorithmInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteAlgorithmInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteAppImageConfigRequest:
    boto3_raw_data: "type_defs.DeleteAppImageConfigRequestTypeDef" = dataclasses.field()

    AppImageConfigName = field("AppImageConfigName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteAppImageConfigRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteAppImageConfigRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteAppRequest:
    boto3_raw_data: "type_defs.DeleteAppRequestTypeDef" = dataclasses.field()

    DomainId = field("DomainId")
    AppType = field("AppType")
    AppName = field("AppName")
    UserProfileName = field("UserProfileName")
    SpaceName = field("SpaceName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DeleteAppRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteAppRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteAssociationRequest:
    boto3_raw_data: "type_defs.DeleteAssociationRequestTypeDef" = dataclasses.field()

    SourceArn = field("SourceArn")
    DestinationArn = field("DestinationArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteAssociationRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteAssociationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteClusterRequest:
    boto3_raw_data: "type_defs.DeleteClusterRequestTypeDef" = dataclasses.field()

    ClusterName = field("ClusterName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteClusterRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteClusterRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteClusterSchedulerConfigRequest:
    boto3_raw_data: "type_defs.DeleteClusterSchedulerConfigRequestTypeDef" = (
        dataclasses.field()
    )

    ClusterSchedulerConfigId = field("ClusterSchedulerConfigId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteClusterSchedulerConfigRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteClusterSchedulerConfigRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteCodeRepositoryInput:
    boto3_raw_data: "type_defs.DeleteCodeRepositoryInputTypeDef" = dataclasses.field()

    CodeRepositoryName = field("CodeRepositoryName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteCodeRepositoryInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteCodeRepositoryInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteCompilationJobRequest:
    boto3_raw_data: "type_defs.DeleteCompilationJobRequestTypeDef" = dataclasses.field()

    CompilationJobName = field("CompilationJobName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteCompilationJobRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteCompilationJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteComputeQuotaRequest:
    boto3_raw_data: "type_defs.DeleteComputeQuotaRequestTypeDef" = dataclasses.field()

    ComputeQuotaId = field("ComputeQuotaId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteComputeQuotaRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteComputeQuotaRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteContextRequest:
    boto3_raw_data: "type_defs.DeleteContextRequestTypeDef" = dataclasses.field()

    ContextName = field("ContextName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteContextRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteContextRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteDataQualityJobDefinitionRequest:
    boto3_raw_data: "type_defs.DeleteDataQualityJobDefinitionRequestTypeDef" = (
        dataclasses.field()
    )

    JobDefinitionName = field("JobDefinitionName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteDataQualityJobDefinitionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteDataQualityJobDefinitionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteDeviceFleetRequest:
    boto3_raw_data: "type_defs.DeleteDeviceFleetRequestTypeDef" = dataclasses.field()

    DeviceFleetName = field("DeviceFleetName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteDeviceFleetRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteDeviceFleetRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RetentionPolicy:
    boto3_raw_data: "type_defs.RetentionPolicyTypeDef" = dataclasses.field()

    HomeEfsFileSystem = field("HomeEfsFileSystem")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RetentionPolicyTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.RetentionPolicyTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteEdgeDeploymentPlanRequest:
    boto3_raw_data: "type_defs.DeleteEdgeDeploymentPlanRequestTypeDef" = (
        dataclasses.field()
    )

    EdgeDeploymentPlanName = field("EdgeDeploymentPlanName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteEdgeDeploymentPlanRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteEdgeDeploymentPlanRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteEdgeDeploymentStageRequest:
    boto3_raw_data: "type_defs.DeleteEdgeDeploymentStageRequestTypeDef" = (
        dataclasses.field()
    )

    EdgeDeploymentPlanName = field("EdgeDeploymentPlanName")
    StageName = field("StageName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteEdgeDeploymentStageRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteEdgeDeploymentStageRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteEndpointConfigInput:
    boto3_raw_data: "type_defs.DeleteEndpointConfigInputTypeDef" = dataclasses.field()

    EndpointConfigName = field("EndpointConfigName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteEndpointConfigInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteEndpointConfigInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteEndpointInput:
    boto3_raw_data: "type_defs.DeleteEndpointInputTypeDef" = dataclasses.field()

    EndpointName = field("EndpointName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteEndpointInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteEndpointInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteExperimentRequest:
    boto3_raw_data: "type_defs.DeleteExperimentRequestTypeDef" = dataclasses.field()

    ExperimentName = field("ExperimentName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteExperimentRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteExperimentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteFeatureGroupRequest:
    boto3_raw_data: "type_defs.DeleteFeatureGroupRequestTypeDef" = dataclasses.field()

    FeatureGroupName = field("FeatureGroupName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteFeatureGroupRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteFeatureGroupRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteFlowDefinitionRequest:
    boto3_raw_data: "type_defs.DeleteFlowDefinitionRequestTypeDef" = dataclasses.field()

    FlowDefinitionName = field("FlowDefinitionName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteFlowDefinitionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteFlowDefinitionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteHubContentReferenceRequest:
    boto3_raw_data: "type_defs.DeleteHubContentReferenceRequestTypeDef" = (
        dataclasses.field()
    )

    HubName = field("HubName")
    HubContentType = field("HubContentType")
    HubContentName = field("HubContentName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteHubContentReferenceRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteHubContentReferenceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteHubContentRequest:
    boto3_raw_data: "type_defs.DeleteHubContentRequestTypeDef" = dataclasses.field()

    HubName = field("HubName")
    HubContentType = field("HubContentType")
    HubContentName = field("HubContentName")
    HubContentVersion = field("HubContentVersion")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteHubContentRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteHubContentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteHubRequest:
    boto3_raw_data: "type_defs.DeleteHubRequestTypeDef" = dataclasses.field()

    HubName = field("HubName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DeleteHubRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteHubRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteHumanTaskUiRequest:
    boto3_raw_data: "type_defs.DeleteHumanTaskUiRequestTypeDef" = dataclasses.field()

    HumanTaskUiName = field("HumanTaskUiName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteHumanTaskUiRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteHumanTaskUiRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteHyperParameterTuningJobRequest:
    boto3_raw_data: "type_defs.DeleteHyperParameterTuningJobRequestTypeDef" = (
        dataclasses.field()
    )

    HyperParameterTuningJobName = field("HyperParameterTuningJobName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteHyperParameterTuningJobRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteHyperParameterTuningJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteImageRequest:
    boto3_raw_data: "type_defs.DeleteImageRequestTypeDef" = dataclasses.field()

    ImageName = field("ImageName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteImageRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteImageRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteImageVersionRequest:
    boto3_raw_data: "type_defs.DeleteImageVersionRequestTypeDef" = dataclasses.field()

    ImageName = field("ImageName")
    Version = field("Version")
    Alias = field("Alias")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteImageVersionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteImageVersionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteInferenceComponentInput:
    boto3_raw_data: "type_defs.DeleteInferenceComponentInputTypeDef" = (
        dataclasses.field()
    )

    InferenceComponentName = field("InferenceComponentName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteInferenceComponentInputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteInferenceComponentInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteInferenceExperimentRequest:
    boto3_raw_data: "type_defs.DeleteInferenceExperimentRequestTypeDef" = (
        dataclasses.field()
    )

    Name = field("Name")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteInferenceExperimentRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteInferenceExperimentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteMlflowTrackingServerRequest:
    boto3_raw_data: "type_defs.DeleteMlflowTrackingServerRequestTypeDef" = (
        dataclasses.field()
    )

    TrackingServerName = field("TrackingServerName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteMlflowTrackingServerRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteMlflowTrackingServerRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteModelBiasJobDefinitionRequest:
    boto3_raw_data: "type_defs.DeleteModelBiasJobDefinitionRequestTypeDef" = (
        dataclasses.field()
    )

    JobDefinitionName = field("JobDefinitionName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteModelBiasJobDefinitionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteModelBiasJobDefinitionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteModelCardRequest:
    boto3_raw_data: "type_defs.DeleteModelCardRequestTypeDef" = dataclasses.field()

    ModelCardName = field("ModelCardName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteModelCardRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteModelCardRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteModelExplainabilityJobDefinitionRequest:
    boto3_raw_data: "type_defs.DeleteModelExplainabilityJobDefinitionRequestTypeDef" = (
        dataclasses.field()
    )

    JobDefinitionName = field("JobDefinitionName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteModelExplainabilityJobDefinitionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteModelExplainabilityJobDefinitionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteModelInput:
    boto3_raw_data: "type_defs.DeleteModelInputTypeDef" = dataclasses.field()

    ModelName = field("ModelName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DeleteModelInputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteModelInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteModelPackageGroupInput:
    boto3_raw_data: "type_defs.DeleteModelPackageGroupInputTypeDef" = (
        dataclasses.field()
    )

    ModelPackageGroupName = field("ModelPackageGroupName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteModelPackageGroupInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteModelPackageGroupInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteModelPackageGroupPolicyInput:
    boto3_raw_data: "type_defs.DeleteModelPackageGroupPolicyInputTypeDef" = (
        dataclasses.field()
    )

    ModelPackageGroupName = field("ModelPackageGroupName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteModelPackageGroupPolicyInputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteModelPackageGroupPolicyInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteModelPackageInput:
    boto3_raw_data: "type_defs.DeleteModelPackageInputTypeDef" = dataclasses.field()

    ModelPackageName = field("ModelPackageName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteModelPackageInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteModelPackageInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteModelQualityJobDefinitionRequest:
    boto3_raw_data: "type_defs.DeleteModelQualityJobDefinitionRequestTypeDef" = (
        dataclasses.field()
    )

    JobDefinitionName = field("JobDefinitionName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteModelQualityJobDefinitionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteModelQualityJobDefinitionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteMonitoringScheduleRequest:
    boto3_raw_data: "type_defs.DeleteMonitoringScheduleRequestTypeDef" = (
        dataclasses.field()
    )

    MonitoringScheduleName = field("MonitoringScheduleName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteMonitoringScheduleRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteMonitoringScheduleRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteNotebookInstanceInput:
    boto3_raw_data: "type_defs.DeleteNotebookInstanceInputTypeDef" = dataclasses.field()

    NotebookInstanceName = field("NotebookInstanceName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteNotebookInstanceInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteNotebookInstanceInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteNotebookInstanceLifecycleConfigInput:
    boto3_raw_data: "type_defs.DeleteNotebookInstanceLifecycleConfigInputTypeDef" = (
        dataclasses.field()
    )

    NotebookInstanceLifecycleConfigName = field("NotebookInstanceLifecycleConfigName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteNotebookInstanceLifecycleConfigInputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteNotebookInstanceLifecycleConfigInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteOptimizationJobRequest:
    boto3_raw_data: "type_defs.DeleteOptimizationJobRequestTypeDef" = (
        dataclasses.field()
    )

    OptimizationJobName = field("OptimizationJobName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteOptimizationJobRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteOptimizationJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeletePartnerAppRequest:
    boto3_raw_data: "type_defs.DeletePartnerAppRequestTypeDef" = dataclasses.field()

    Arn = field("Arn")
    ClientToken = field("ClientToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeletePartnerAppRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeletePartnerAppRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeletePipelineRequest:
    boto3_raw_data: "type_defs.DeletePipelineRequestTypeDef" = dataclasses.field()

    PipelineName = field("PipelineName")
    ClientRequestToken = field("ClientRequestToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeletePipelineRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeletePipelineRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteProjectInput:
    boto3_raw_data: "type_defs.DeleteProjectInputTypeDef" = dataclasses.field()

    ProjectName = field("ProjectName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteProjectInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteProjectInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteSpaceRequest:
    boto3_raw_data: "type_defs.DeleteSpaceRequestTypeDef" = dataclasses.field()

    DomainId = field("DomainId")
    SpaceName = field("SpaceName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteSpaceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteSpaceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteStudioLifecycleConfigRequest:
    boto3_raw_data: "type_defs.DeleteStudioLifecycleConfigRequestTypeDef" = (
        dataclasses.field()
    )

    StudioLifecycleConfigName = field("StudioLifecycleConfigName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteStudioLifecycleConfigRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteStudioLifecycleConfigRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTagsInput:
    boto3_raw_data: "type_defs.DeleteTagsInputTypeDef" = dataclasses.field()

    ResourceArn = field("ResourceArn")
    TagKeys = field("TagKeys")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DeleteTagsInputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DeleteTagsInputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTrialComponentRequest:
    boto3_raw_data: "type_defs.DeleteTrialComponentRequestTypeDef" = dataclasses.field()

    TrialComponentName = field("TrialComponentName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteTrialComponentRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTrialComponentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTrialRequest:
    boto3_raw_data: "type_defs.DeleteTrialRequestTypeDef" = dataclasses.field()

    TrialName = field("TrialName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteTrialRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTrialRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteUserProfileRequest:
    boto3_raw_data: "type_defs.DeleteUserProfileRequestTypeDef" = dataclasses.field()

    DomainId = field("DomainId")
    UserProfileName = field("UserProfileName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteUserProfileRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteUserProfileRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteWorkforceRequest:
    boto3_raw_data: "type_defs.DeleteWorkforceRequestTypeDef" = dataclasses.field()

    WorkforceName = field("WorkforceName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteWorkforceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteWorkforceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteWorkteamRequest:
    boto3_raw_data: "type_defs.DeleteWorkteamRequestTypeDef" = dataclasses.field()

    WorkteamName = field("WorkteamName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteWorkteamRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteWorkteamRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeployedImage:
    boto3_raw_data: "type_defs.DeployedImageTypeDef" = dataclasses.field()

    SpecifiedImage = field("SpecifiedImage")
    ResolvedImage = field("ResolvedImage")
    ResolutionTime = field("ResolutionTime")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DeployedImageTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DeployedImageTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RealTimeInferenceRecommendation:
    boto3_raw_data: "type_defs.RealTimeInferenceRecommendationTypeDef" = (
        dataclasses.field()
    )

    RecommendationId = field("RecommendationId")
    InstanceType = field("InstanceType")
    Environment = field("Environment")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RealTimeInferenceRecommendationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RealTimeInferenceRecommendationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeviceSelectionConfigOutput:
    boto3_raw_data: "type_defs.DeviceSelectionConfigOutputTypeDef" = dataclasses.field()

    DeviceSubsetType = field("DeviceSubsetType")
    Percentage = field("Percentage")
    DeviceNames = field("DeviceNames")
    DeviceNameContains = field("DeviceNameContains")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeviceSelectionConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeviceSelectionConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EdgeDeploymentConfig:
    boto3_raw_data: "type_defs.EdgeDeploymentConfigTypeDef" = dataclasses.field()

    FailureHandlingPolicy = field("FailureHandlingPolicy")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EdgeDeploymentConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EdgeDeploymentConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EdgeDeploymentStatus:
    boto3_raw_data: "type_defs.EdgeDeploymentStatusTypeDef" = dataclasses.field()

    StageStatus = field("StageStatus")
    EdgeDeploymentSuccessInStage = field("EdgeDeploymentSuccessInStage")
    EdgeDeploymentPendingInStage = field("EdgeDeploymentPendingInStage")
    EdgeDeploymentFailedInStage = field("EdgeDeploymentFailedInStage")
    EdgeDeploymentStatusMessage = field("EdgeDeploymentStatusMessage")
    EdgeDeploymentStageStartTime = field("EdgeDeploymentStageStartTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EdgeDeploymentStatusTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EdgeDeploymentStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeregisterDevicesRequest:
    boto3_raw_data: "type_defs.DeregisterDevicesRequestTypeDef" = dataclasses.field()

    DeviceFleetName = field("DeviceFleetName")
    DeviceNames = field("DeviceNames")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeregisterDevicesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeregisterDevicesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DerivedInformation:
    boto3_raw_data: "type_defs.DerivedInformationTypeDef" = dataclasses.field()

    DerivedDataInputConfig = field("DerivedDataInputConfig")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DerivedInformationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DerivedInformationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeActionRequest:
    boto3_raw_data: "type_defs.DescribeActionRequestTypeDef" = dataclasses.field()

    ActionName = field("ActionName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeActionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeActionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAlgorithmInput:
    boto3_raw_data: "type_defs.DescribeAlgorithmInputTypeDef" = dataclasses.field()

    AlgorithmName = field("AlgorithmName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeAlgorithmInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAlgorithmInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAppImageConfigRequest:
    boto3_raw_data: "type_defs.DescribeAppImageConfigRequestTypeDef" = (
        dataclasses.field()
    )

    AppImageConfigName = field("AppImageConfigName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeAppImageConfigRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAppImageConfigRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAppRequest:
    boto3_raw_data: "type_defs.DescribeAppRequestTypeDef" = dataclasses.field()

    DomainId = field("DomainId")
    AppType = field("AppType")
    AppName = field("AppName")
    UserProfileName = field("UserProfileName")
    SpaceName = field("SpaceName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeAppRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAppRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeArtifactRequest:
    boto3_raw_data: "type_defs.DescribeArtifactRequestTypeDef" = dataclasses.field()

    ArtifactArn = field("ArtifactArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeArtifactRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeArtifactRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAutoMLJobRequest:
    boto3_raw_data: "type_defs.DescribeAutoMLJobRequestTypeDef" = dataclasses.field()

    AutoMLJobName = field("AutoMLJobName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeAutoMLJobRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAutoMLJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelDeployResult:
    boto3_raw_data: "type_defs.ModelDeployResultTypeDef" = dataclasses.field()

    EndpointName = field("EndpointName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ModelDeployResultTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelDeployResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAutoMLJobV2Request:
    boto3_raw_data: "type_defs.DescribeAutoMLJobV2RequestTypeDef" = dataclasses.field()

    AutoMLJobName = field("AutoMLJobName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeAutoMLJobV2RequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAutoMLJobV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClusterEventRequest:
    boto3_raw_data: "type_defs.DescribeClusterEventRequestTypeDef" = dataclasses.field()

    EventId = field("EventId")
    ClusterName = field("ClusterName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeClusterEventRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeClusterEventRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClusterNodeRequest:
    boto3_raw_data: "type_defs.DescribeClusterNodeRequestTypeDef" = dataclasses.field()

    ClusterName = field("ClusterName")
    NodeId = field("NodeId")
    NodeLogicalId = field("NodeLogicalId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeClusterNodeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeClusterNodeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClusterRequest:
    boto3_raw_data: "type_defs.DescribeClusterRequestTypeDef" = dataclasses.field()

    ClusterName = field("ClusterName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeClusterRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeClusterRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClusterSchedulerConfigRequest:
    boto3_raw_data: "type_defs.DescribeClusterSchedulerConfigRequestTypeDef" = (
        dataclasses.field()
    )

    ClusterSchedulerConfigId = field("ClusterSchedulerConfigId")
    ClusterSchedulerConfigVersion = field("ClusterSchedulerConfigVersion")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeClusterSchedulerConfigRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeClusterSchedulerConfigRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCodeRepositoryInput:
    boto3_raw_data: "type_defs.DescribeCodeRepositoryInputTypeDef" = dataclasses.field()

    CodeRepositoryName = field("CodeRepositoryName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeCodeRepositoryInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCodeRepositoryInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCompilationJobRequest:
    boto3_raw_data: "type_defs.DescribeCompilationJobRequestTypeDef" = (
        dataclasses.field()
    )

    CompilationJobName = field("CompilationJobName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeCompilationJobRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCompilationJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelArtifacts:
    boto3_raw_data: "type_defs.ModelArtifactsTypeDef" = dataclasses.field()

    S3ModelArtifacts = field("S3ModelArtifacts")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ModelArtifactsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ModelArtifactsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelDigests:
    boto3_raw_data: "type_defs.ModelDigestsTypeDef" = dataclasses.field()

    ArtifactDigest = field("ArtifactDigest")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ModelDigestsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ModelDigestsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NeoVpcConfigOutput:
    boto3_raw_data: "type_defs.NeoVpcConfigOutputTypeDef" = dataclasses.field()

    SecurityGroupIds = field("SecurityGroupIds")
    Subnets = field("Subnets")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NeoVpcConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NeoVpcConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeComputeQuotaRequest:
    boto3_raw_data: "type_defs.DescribeComputeQuotaRequestTypeDef" = dataclasses.field()

    ComputeQuotaId = field("ComputeQuotaId")
    ComputeQuotaVersion = field("ComputeQuotaVersion")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeComputeQuotaRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeComputeQuotaRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeContextRequest:
    boto3_raw_data: "type_defs.DescribeContextRequestTypeDef" = dataclasses.field()

    ContextName = field("ContextName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeContextRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeContextRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDataQualityJobDefinitionRequest:
    boto3_raw_data: "type_defs.DescribeDataQualityJobDefinitionRequestTypeDef" = (
        dataclasses.field()
    )

    JobDefinitionName = field("JobDefinitionName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeDataQualityJobDefinitionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDataQualityJobDefinitionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDeviceFleetRequest:
    boto3_raw_data: "type_defs.DescribeDeviceFleetRequestTypeDef" = dataclasses.field()

    DeviceFleetName = field("DeviceFleetName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeDeviceFleetRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDeviceFleetRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDeviceRequest:
    boto3_raw_data: "type_defs.DescribeDeviceRequestTypeDef" = dataclasses.field()

    DeviceName = field("DeviceName")
    DeviceFleetName = field("DeviceFleetName")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeDeviceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDeviceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EdgeModel:
    boto3_raw_data: "type_defs.EdgeModelTypeDef" = dataclasses.field()

    ModelName = field("ModelName")
    ModelVersion = field("ModelVersion")
    LatestSampleTime = field("LatestSampleTime")
    LatestInference = field("LatestInference")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EdgeModelTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.EdgeModelTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDomainRequest:
    boto3_raw_data: "type_defs.DescribeDomainRequestTypeDef" = dataclasses.field()

    DomainId = field("DomainId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeDomainRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDomainRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeEdgeDeploymentPlanRequest:
    boto3_raw_data: "type_defs.DescribeEdgeDeploymentPlanRequestTypeDef" = (
        dataclasses.field()
    )

    EdgeDeploymentPlanName = field("EdgeDeploymentPlanName")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeEdgeDeploymentPlanRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeEdgeDeploymentPlanRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeEdgePackagingJobRequest:
    boto3_raw_data: "type_defs.DescribeEdgePackagingJobRequestTypeDef" = (
        dataclasses.field()
    )

    EdgePackagingJobName = field("EdgePackagingJobName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeEdgePackagingJobRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeEdgePackagingJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EdgePresetDeploymentOutput:
    boto3_raw_data: "type_defs.EdgePresetDeploymentOutputTypeDef" = dataclasses.field()

    Type = field("Type")
    Artifact = field("Artifact")
    Status = field("Status")
    StatusMessage = field("StatusMessage")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EdgePresetDeploymentOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EdgePresetDeploymentOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeEndpointConfigInput:
    boto3_raw_data: "type_defs.DescribeEndpointConfigInputTypeDef" = dataclasses.field()

    EndpointConfigName = field("EndpointConfigName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeEndpointConfigInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeEndpointConfigInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeEndpointInput:
    boto3_raw_data: "type_defs.DescribeEndpointInputTypeDef" = dataclasses.field()

    EndpointName = field("EndpointName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeEndpointInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeEndpointInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WaiterConfig:
    boto3_raw_data: "type_defs.WaiterConfigTypeDef" = dataclasses.field()

    Delay = field("Delay")
    MaxAttempts = field("MaxAttempts")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.WaiterConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.WaiterConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeExperimentRequest:
    boto3_raw_data: "type_defs.DescribeExperimentRequestTypeDef" = dataclasses.field()

    ExperimentName = field("ExperimentName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeExperimentRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeExperimentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExperimentSource:
    boto3_raw_data: "type_defs.ExperimentSourceTypeDef" = dataclasses.field()

    SourceArn = field("SourceArn")
    SourceType = field("SourceType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ExperimentSourceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ExperimentSourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFeatureGroupRequest:
    boto3_raw_data: "type_defs.DescribeFeatureGroupRequestTypeDef" = dataclasses.field()

    FeatureGroupName = field("FeatureGroupName")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeFeatureGroupRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFeatureGroupRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LastUpdateStatus:
    boto3_raw_data: "type_defs.LastUpdateStatusTypeDef" = dataclasses.field()

    Status = field("Status")
    FailureReason = field("FailureReason")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.LastUpdateStatusTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LastUpdateStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OfflineStoreStatus:
    boto3_raw_data: "type_defs.OfflineStoreStatusTypeDef" = dataclasses.field()

    Status = field("Status")
    BlockedReason = field("BlockedReason")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.OfflineStoreStatusTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OfflineStoreStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ThroughputConfigDescription:
    boto3_raw_data: "type_defs.ThroughputConfigDescriptionTypeDef" = dataclasses.field()

    ThroughputMode = field("ThroughputMode")
    ProvisionedReadCapacityUnits = field("ProvisionedReadCapacityUnits")
    ProvisionedWriteCapacityUnits = field("ProvisionedWriteCapacityUnits")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ThroughputConfigDescriptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ThroughputConfigDescriptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFeatureMetadataRequest:
    boto3_raw_data: "type_defs.DescribeFeatureMetadataRequestTypeDef" = (
        dataclasses.field()
    )

    FeatureGroupName = field("FeatureGroupName")
    FeatureName = field("FeatureName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeFeatureMetadataRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFeatureMetadataRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FeatureParameter:
    boto3_raw_data: "type_defs.FeatureParameterTypeDef" = dataclasses.field()

    Key = field("Key")
    Value = field("Value")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FeatureParameterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FeatureParameterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFlowDefinitionRequest:
    boto3_raw_data: "type_defs.DescribeFlowDefinitionRequestTypeDef" = (
        dataclasses.field()
    )

    FlowDefinitionName = field("FlowDefinitionName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeFlowDefinitionRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFlowDefinitionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeHubContentRequest:
    boto3_raw_data: "type_defs.DescribeHubContentRequestTypeDef" = dataclasses.field()

    HubName = field("HubName")
    HubContentType = field("HubContentType")
    HubContentName = field("HubContentName")
    HubContentVersion = field("HubContentVersion")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeHubContentRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeHubContentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HubContentDependency:
    boto3_raw_data: "type_defs.HubContentDependencyTypeDef" = dataclasses.field()

    DependencyOriginPath = field("DependencyOriginPath")
    DependencyCopyPath = field("DependencyCopyPath")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HubContentDependencyTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HubContentDependencyTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeHubRequest:
    boto3_raw_data: "type_defs.DescribeHubRequestTypeDef" = dataclasses.field()

    HubName = field("HubName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeHubRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeHubRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeHumanTaskUiRequest:
    boto3_raw_data: "type_defs.DescribeHumanTaskUiRequestTypeDef" = dataclasses.field()

    HumanTaskUiName = field("HumanTaskUiName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeHumanTaskUiRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeHumanTaskUiRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UiTemplateInfo:
    boto3_raw_data: "type_defs.UiTemplateInfoTypeDef" = dataclasses.field()

    Url = field("Url")
    ContentSha256 = field("ContentSha256")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.UiTemplateInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.UiTemplateInfoTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeHyperParameterTuningJobRequest:
    boto3_raw_data: "type_defs.DescribeHyperParameterTuningJobRequestTypeDef" = (
        dataclasses.field()
    )

    HyperParameterTuningJobName = field("HyperParameterTuningJobName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeHyperParameterTuningJobRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeHyperParameterTuningJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HyperParameterTuningJobCompletionDetails:
    boto3_raw_data: "type_defs.HyperParameterTuningJobCompletionDetailsTypeDef" = (
        dataclasses.field()
    )

    NumberOfTrainingJobsObjectiveNotImproving = field(
        "NumberOfTrainingJobsObjectiveNotImproving"
    )
    ConvergenceDetectedTime = field("ConvergenceDetectedTime")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.HyperParameterTuningJobCompletionDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HyperParameterTuningJobCompletionDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HyperParameterTuningJobConsumedResources:
    boto3_raw_data: "type_defs.HyperParameterTuningJobConsumedResourcesTypeDef" = (
        dataclasses.field()
    )

    RuntimeInSeconds = field("RuntimeInSeconds")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.HyperParameterTuningJobConsumedResourcesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HyperParameterTuningJobConsumedResourcesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ObjectiveStatusCounters:
    boto3_raw_data: "type_defs.ObjectiveStatusCountersTypeDef" = dataclasses.field()

    Succeeded = field("Succeeded")
    Pending = field("Pending")
    Failed = field("Failed")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ObjectiveStatusCountersTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ObjectiveStatusCountersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrainingJobStatusCounters:
    boto3_raw_data: "type_defs.TrainingJobStatusCountersTypeDef" = dataclasses.field()

    Completed = field("Completed")
    InProgress = field("InProgress")
    RetryableError = field("RetryableError")
    NonRetryableError = field("NonRetryableError")
    Stopped = field("Stopped")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrainingJobStatusCountersTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrainingJobStatusCountersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImageRequest:
    boto3_raw_data: "type_defs.DescribeImageRequestTypeDef" = dataclasses.field()

    ImageName = field("ImageName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeImageRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImageRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImageVersionRequest:
    boto3_raw_data: "type_defs.DescribeImageVersionRequestTypeDef" = dataclasses.field()

    ImageName = field("ImageName")
    Version = field("Version")
    Alias = field("Alias")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeImageVersionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImageVersionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInferenceComponentInput:
    boto3_raw_data: "type_defs.DescribeInferenceComponentInputTypeDef" = (
        dataclasses.field()
    )

    InferenceComponentName = field("InferenceComponentName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeInferenceComponentInputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInferenceComponentInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceComponentRuntimeConfigSummary:
    boto3_raw_data: "type_defs.InferenceComponentRuntimeConfigSummaryTypeDef" = (
        dataclasses.field()
    )

    DesiredCopyCount = field("DesiredCopyCount")
    CurrentCopyCount = field("CurrentCopyCount")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InferenceComponentRuntimeConfigSummaryTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceComponentRuntimeConfigSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInferenceExperimentRequest:
    boto3_raw_data: "type_defs.DescribeInferenceExperimentRequestTypeDef" = (
        dataclasses.field()
    )

    Name = field("Name")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInferenceExperimentRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInferenceExperimentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EndpointMetadata:
    boto3_raw_data: "type_defs.EndpointMetadataTypeDef" = dataclasses.field()

    EndpointName = field("EndpointName")
    EndpointConfigName = field("EndpointConfigName")
    EndpointStatus = field("EndpointStatus")
    FailureReason = field("FailureReason")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EndpointMetadataTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EndpointMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceExperimentScheduleOutput:
    boto3_raw_data: "type_defs.InferenceExperimentScheduleOutputTypeDef" = (
        dataclasses.field()
    )

    StartTime = field("StartTime")
    EndTime = field("EndTime")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InferenceExperimentScheduleOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceExperimentScheduleOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInferenceRecommendationsJobRequest:
    boto3_raw_data: "type_defs.DescribeInferenceRecommendationsJobRequestTypeDef" = (
        dataclasses.field()
    )

    JobName = field("JobName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInferenceRecommendationsJobRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInferenceRecommendationsJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLabelingJobRequest:
    boto3_raw_data: "type_defs.DescribeLabelingJobRequestTypeDef" = dataclasses.field()

    LabelingJobName = field("LabelingJobName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeLabelingJobRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeLabelingJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LabelCounters:
    boto3_raw_data: "type_defs.LabelCountersTypeDef" = dataclasses.field()

    TotalLabeled = field("TotalLabeled")
    HumanLabeled = field("HumanLabeled")
    MachineLabeled = field("MachineLabeled")
    FailedNonRetryableError = field("FailedNonRetryableError")
    Unlabeled = field("Unlabeled")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.LabelCountersTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.LabelCountersTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LabelingJobOutput:
    boto3_raw_data: "type_defs.LabelingJobOutputTypeDef" = dataclasses.field()

    OutputDatasetS3Uri = field("OutputDatasetS3Uri")
    FinalActiveLearningModelArn = field("FinalActiveLearningModelArn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.LabelingJobOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LabelingJobOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLineageGroupRequest:
    boto3_raw_data: "type_defs.DescribeLineageGroupRequestTypeDef" = dataclasses.field()

    LineageGroupName = field("LineageGroupName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeLineageGroupRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeLineageGroupRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeMlflowTrackingServerRequest:
    boto3_raw_data: "type_defs.DescribeMlflowTrackingServerRequestTypeDef" = (
        dataclasses.field()
    )

    TrackingServerName = field("TrackingServerName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeMlflowTrackingServerRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeMlflowTrackingServerRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeModelBiasJobDefinitionRequest:
    boto3_raw_data: "type_defs.DescribeModelBiasJobDefinitionRequestTypeDef" = (
        dataclasses.field()
    )

    JobDefinitionName = field("JobDefinitionName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeModelBiasJobDefinitionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeModelBiasJobDefinitionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelBiasAppSpecificationOutput:
    boto3_raw_data: "type_defs.ModelBiasAppSpecificationOutputTypeDef" = (
        dataclasses.field()
    )

    ImageUri = field("ImageUri")
    ConfigUri = field("ConfigUri")
    Environment = field("Environment")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModelBiasAppSpecificationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelBiasAppSpecificationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeModelCardExportJobRequest:
    boto3_raw_data: "type_defs.DescribeModelCardExportJobRequestTypeDef" = (
        dataclasses.field()
    )

    ModelCardExportJobArn = field("ModelCardExportJobArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeModelCardExportJobRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeModelCardExportJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelCardExportArtifacts:
    boto3_raw_data: "type_defs.ModelCardExportArtifactsTypeDef" = dataclasses.field()

    S3ExportArtifacts = field("S3ExportArtifacts")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelCardExportArtifactsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelCardExportArtifactsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeModelCardRequest:
    boto3_raw_data: "type_defs.DescribeModelCardRequestTypeDef" = dataclasses.field()

    ModelCardName = field("ModelCardName")
    ModelCardVersion = field("ModelCardVersion")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeModelCardRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeModelCardRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeModelExplainabilityJobDefinitionRequest:
    boto3_raw_data: (
        "type_defs.DescribeModelExplainabilityJobDefinitionRequestTypeDef"
    ) = dataclasses.field()

    JobDefinitionName = field("JobDefinitionName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeModelExplainabilityJobDefinitionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeModelExplainabilityJobDefinitionRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelExplainabilityAppSpecificationOutput:
    boto3_raw_data: "type_defs.ModelExplainabilityAppSpecificationOutputTypeDef" = (
        dataclasses.field()
    )

    ImageUri = field("ImageUri")
    ConfigUri = field("ConfigUri")
    Environment = field("Environment")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModelExplainabilityAppSpecificationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelExplainabilityAppSpecificationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeModelInput:
    boto3_raw_data: "type_defs.DescribeModelInputTypeDef" = dataclasses.field()

    ModelName = field("ModelName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeModelInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeModelInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeModelPackageGroupInput:
    boto3_raw_data: "type_defs.DescribeModelPackageGroupInputTypeDef" = (
        dataclasses.field()
    )

    ModelPackageGroupName = field("ModelPackageGroupName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeModelPackageGroupInputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeModelPackageGroupInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeModelPackageInput:
    boto3_raw_data: "type_defs.DescribeModelPackageInputTypeDef" = dataclasses.field()

    ModelPackageName = field("ModelPackageName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeModelPackageInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeModelPackageInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeModelQualityJobDefinitionRequest:
    boto3_raw_data: "type_defs.DescribeModelQualityJobDefinitionRequestTypeDef" = (
        dataclasses.field()
    )

    JobDefinitionName = field("JobDefinitionName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeModelQualityJobDefinitionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeModelQualityJobDefinitionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelQualityAppSpecificationOutput:
    boto3_raw_data: "type_defs.ModelQualityAppSpecificationOutputTypeDef" = (
        dataclasses.field()
    )

    ImageUri = field("ImageUri")
    ContainerEntrypoint = field("ContainerEntrypoint")
    ContainerArguments = field("ContainerArguments")
    RecordPreprocessorSourceUri = field("RecordPreprocessorSourceUri")
    PostAnalyticsProcessorSourceUri = field("PostAnalyticsProcessorSourceUri")
    ProblemType = field("ProblemType")
    Environment = field("Environment")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModelQualityAppSpecificationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelQualityAppSpecificationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeMonitoringScheduleRequest:
    boto3_raw_data: "type_defs.DescribeMonitoringScheduleRequestTypeDef" = (
        dataclasses.field()
    )

    MonitoringScheduleName = field("MonitoringScheduleName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeMonitoringScheduleRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeMonitoringScheduleRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringExecutionSummary:
    boto3_raw_data: "type_defs.MonitoringExecutionSummaryTypeDef" = dataclasses.field()

    MonitoringScheduleName = field("MonitoringScheduleName")
    ScheduledTime = field("ScheduledTime")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    MonitoringExecutionStatus = field("MonitoringExecutionStatus")
    ProcessingJobArn = field("ProcessingJobArn")
    EndpointName = field("EndpointName")
    FailureReason = field("FailureReason")
    MonitoringJobDefinitionName = field("MonitoringJobDefinitionName")
    MonitoringType = field("MonitoringType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MonitoringExecutionSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringExecutionSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNotebookInstanceInput:
    boto3_raw_data: "type_defs.DescribeNotebookInstanceInputTypeDef" = (
        dataclasses.field()
    )

    NotebookInstanceName = field("NotebookInstanceName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeNotebookInstanceInputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNotebookInstanceInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNotebookInstanceLifecycleConfigInput:
    boto3_raw_data: "type_defs.DescribeNotebookInstanceLifecycleConfigInputTypeDef" = (
        dataclasses.field()
    )

    NotebookInstanceLifecycleConfigName = field("NotebookInstanceLifecycleConfigName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNotebookInstanceLifecycleConfigInputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNotebookInstanceLifecycleConfigInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeOptimizationJobRequest:
    boto3_raw_data: "type_defs.DescribeOptimizationJobRequestTypeDef" = (
        dataclasses.field()
    )

    OptimizationJobName = field("OptimizationJobName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeOptimizationJobRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeOptimizationJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OptimizationOutput:
    boto3_raw_data: "type_defs.OptimizationOutputTypeDef" = dataclasses.field()

    RecommendedInferenceImage = field("RecommendedInferenceImage")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.OptimizationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OptimizationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OptimizationVpcConfigOutput:
    boto3_raw_data: "type_defs.OptimizationVpcConfigOutputTypeDef" = dataclasses.field()

    SecurityGroupIds = field("SecurityGroupIds")
    Subnets = field("Subnets")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.OptimizationVpcConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OptimizationVpcConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribePartnerAppRequest:
    boto3_raw_data: "type_defs.DescribePartnerAppRequestTypeDef" = dataclasses.field()

    Arn = field("Arn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribePartnerAppRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribePartnerAppRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ErrorInfo:
    boto3_raw_data: "type_defs.ErrorInfoTypeDef" = dataclasses.field()

    Code = field("Code")
    Reason = field("Reason")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ErrorInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ErrorInfoTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PartnerAppConfigOutput:
    boto3_raw_data: "type_defs.PartnerAppConfigOutputTypeDef" = dataclasses.field()

    AdminUsers = field("AdminUsers")
    Arguments = field("Arguments")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PartnerAppConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PartnerAppConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribePipelineDefinitionForExecutionRequest:
    boto3_raw_data: "type_defs.DescribePipelineDefinitionForExecutionRequestTypeDef" = (
        dataclasses.field()
    )

    PipelineExecutionArn = field("PipelineExecutionArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribePipelineDefinitionForExecutionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribePipelineDefinitionForExecutionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribePipelineExecutionRequest:
    boto3_raw_data: "type_defs.DescribePipelineExecutionRequestTypeDef" = (
        dataclasses.field()
    )

    PipelineExecutionArn = field("PipelineExecutionArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribePipelineExecutionRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribePipelineExecutionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PipelineExperimentConfig:
    boto3_raw_data: "type_defs.PipelineExperimentConfigTypeDef" = dataclasses.field()

    ExperimentName = field("ExperimentName")
    TrialName = field("TrialName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PipelineExperimentConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PipelineExperimentConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribePipelineRequest:
    boto3_raw_data: "type_defs.DescribePipelineRequestTypeDef" = dataclasses.field()

    PipelineName = field("PipelineName")
    PipelineVersionId = field("PipelineVersionId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribePipelineRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribePipelineRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeProcessingJobRequest:
    boto3_raw_data: "type_defs.DescribeProcessingJobRequestTypeDef" = (
        dataclasses.field()
    )

    ProcessingJobName = field("ProcessingJobName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeProcessingJobRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeProcessingJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeProjectInput:
    boto3_raw_data: "type_defs.DescribeProjectInputTypeDef" = dataclasses.field()

    ProjectName = field("ProjectName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeProjectInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeProjectInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ServiceCatalogProvisionedProductDetails:
    boto3_raw_data: "type_defs.ServiceCatalogProvisionedProductDetailsTypeDef" = (
        dataclasses.field()
    )

    ProvisionedProductId = field("ProvisionedProductId")
    ProvisionedProductStatusMessage = field("ProvisionedProductStatusMessage")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ServiceCatalogProvisionedProductDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ServiceCatalogProvisionedProductDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeReservedCapacityRequest:
    boto3_raw_data: "type_defs.DescribeReservedCapacityRequestTypeDef" = (
        dataclasses.field()
    )

    ReservedCapacityArn = field("ReservedCapacityArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeReservedCapacityRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeReservedCapacityRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UltraServerSummary:
    boto3_raw_data: "type_defs.UltraServerSummaryTypeDef" = dataclasses.field()

    UltraServerType = field("UltraServerType")
    InstanceType = field("InstanceType")
    UltraServerCount = field("UltraServerCount")
    AvailableSpareInstanceCount = field("AvailableSpareInstanceCount")
    UnhealthyInstanceCount = field("UnhealthyInstanceCount")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UltraServerSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UltraServerSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSpaceRequest:
    boto3_raw_data: "type_defs.DescribeSpaceRequestTypeDef" = dataclasses.field()

    DomainId = field("DomainId")
    SpaceName = field("SpaceName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeSpaceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSpaceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeStudioLifecycleConfigRequest:
    boto3_raw_data: "type_defs.DescribeStudioLifecycleConfigRequestTypeDef" = (
        dataclasses.field()
    )

    StudioLifecycleConfigName = field("StudioLifecycleConfigName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeStudioLifecycleConfigRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeStudioLifecycleConfigRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSubscribedWorkteamRequest:
    boto3_raw_data: "type_defs.DescribeSubscribedWorkteamRequestTypeDef" = (
        dataclasses.field()
    )

    WorkteamArn = field("WorkteamArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSubscribedWorkteamRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSubscribedWorkteamRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SubscribedWorkteam:
    boto3_raw_data: "type_defs.SubscribedWorkteamTypeDef" = dataclasses.field()

    WorkteamArn = field("WorkteamArn")
    MarketplaceTitle = field("MarketplaceTitle")
    SellerName = field("SellerName")
    MarketplaceDescription = field("MarketplaceDescription")
    ListingId = field("ListingId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SubscribedWorkteamTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SubscribedWorkteamTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTrainingJobRequest:
    boto3_raw_data: "type_defs.DescribeTrainingJobRequestTypeDef" = dataclasses.field()

    TrainingJobName = field("TrainingJobName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeTrainingJobRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTrainingJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MetricData:
    boto3_raw_data: "type_defs.MetricDataTypeDef" = dataclasses.field()

    MetricName = field("MetricName")
    Value = field("Value")
    Timestamp = field("Timestamp")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MetricDataTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.MetricDataTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProfilerConfigOutput:
    boto3_raw_data: "type_defs.ProfilerConfigOutputTypeDef" = dataclasses.field()

    S3OutputPath = field("S3OutputPath")
    ProfilingIntervalInMilliseconds = field("ProfilingIntervalInMilliseconds")
    ProfilingParameters = field("ProfilingParameters")
    DisableProfiler = field("DisableProfiler")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProfilerConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProfilerConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProfilerRuleConfigurationOutput:
    boto3_raw_data: "type_defs.ProfilerRuleConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    RuleConfigurationName = field("RuleConfigurationName")
    RuleEvaluatorImage = field("RuleEvaluatorImage")
    LocalPath = field("LocalPath")
    S3OutputPath = field("S3OutputPath")
    InstanceType = field("InstanceType")
    VolumeSizeInGB = field("VolumeSizeInGB")
    RuleParameters = field("RuleParameters")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ProfilerRuleConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProfilerRuleConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProfilerRuleEvaluationStatus:
    boto3_raw_data: "type_defs.ProfilerRuleEvaluationStatusTypeDef" = (
        dataclasses.field()
    )

    RuleConfigurationName = field("RuleConfigurationName")
    RuleEvaluationJobArn = field("RuleEvaluationJobArn")
    RuleEvaluationStatus = field("RuleEvaluationStatus")
    StatusDetails = field("StatusDetails")
    LastModifiedTime = field("LastModifiedTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProfilerRuleEvaluationStatusTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProfilerRuleEvaluationStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SecondaryStatusTransition:
    boto3_raw_data: "type_defs.SecondaryStatusTransitionTypeDef" = dataclasses.field()

    Status = field("Status")
    StartTime = field("StartTime")
    EndTime = field("EndTime")
    StatusMessage = field("StatusMessage")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SecondaryStatusTransitionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SecondaryStatusTransitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WarmPoolStatus:
    boto3_raw_data: "type_defs.WarmPoolStatusTypeDef" = dataclasses.field()

    Status = field("Status")
    ResourceRetainedBillableTimeInSeconds = field(
        "ResourceRetainedBillableTimeInSeconds"
    )
    ReusedByJob = field("ReusedByJob")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.WarmPoolStatusTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.WarmPoolStatusTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTrainingPlanRequest:
    boto3_raw_data: "type_defs.DescribeTrainingPlanRequestTypeDef" = dataclasses.field()

    TrainingPlanName = field("TrainingPlanName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeTrainingPlanRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTrainingPlanRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReservedCapacitySummary:
    boto3_raw_data: "type_defs.ReservedCapacitySummaryTypeDef" = dataclasses.field()

    ReservedCapacityArn = field("ReservedCapacityArn")
    InstanceType = field("InstanceType")
    TotalInstanceCount = field("TotalInstanceCount")
    Status = field("Status")
    ReservedCapacityType = field("ReservedCapacityType")
    UltraServerType = field("UltraServerType")
    UltraServerCount = field("UltraServerCount")
    AvailabilityZone = field("AvailabilityZone")
    DurationHours = field("DurationHours")
    DurationMinutes = field("DurationMinutes")
    StartTime = field("StartTime")
    EndTime = field("EndTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ReservedCapacitySummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReservedCapacitySummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransformJobRequest:
    boto3_raw_data: "type_defs.DescribeTransformJobRequestTypeDef" = dataclasses.field()

    TransformJobName = field("TransformJobName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeTransformJobRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTransformJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTrialComponentRequest:
    boto3_raw_data: "type_defs.DescribeTrialComponentRequestTypeDef" = (
        dataclasses.field()
    )

    TrialComponentName = field("TrialComponentName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeTrialComponentRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTrialComponentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrialComponentMetricSummary:
    boto3_raw_data: "type_defs.TrialComponentMetricSummaryTypeDef" = dataclasses.field()

    MetricName = field("MetricName")
    SourceArn = field("SourceArn")
    TimeStamp = field("TimeStamp")
    Max = field("Max")
    Min = field("Min")
    Last = field("Last")
    Count = field("Count")
    Avg = field("Avg")
    StdDev = field("StdDev")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrialComponentMetricSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrialComponentMetricSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrialComponentSource:
    boto3_raw_data: "type_defs.TrialComponentSourceTypeDef" = dataclasses.field()

    SourceArn = field("SourceArn")
    SourceType = field("SourceType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrialComponentSourceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrialComponentSourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTrialRequest:
    boto3_raw_data: "type_defs.DescribeTrialRequestTypeDef" = dataclasses.field()

    TrialName = field("TrialName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeTrialRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTrialRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrialSource:
    boto3_raw_data: "type_defs.TrialSourceTypeDef" = dataclasses.field()

    SourceArn = field("SourceArn")
    SourceType = field("SourceType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TrialSourceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TrialSourceTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeUserProfileRequest:
    boto3_raw_data: "type_defs.DescribeUserProfileRequestTypeDef" = dataclasses.field()

    DomainId = field("DomainId")
    UserProfileName = field("UserProfileName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeUserProfileRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeUserProfileRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeWorkforceRequest:
    boto3_raw_data: "type_defs.DescribeWorkforceRequestTypeDef" = dataclasses.field()

    WorkforceName = field("WorkforceName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeWorkforceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeWorkforceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeWorkteamRequest:
    boto3_raw_data: "type_defs.DescribeWorkteamRequestTypeDef" = dataclasses.field()

    WorkteamName = field("WorkteamName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeWorkteamRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeWorkteamRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProductionVariantServerlessUpdateConfig:
    boto3_raw_data: "type_defs.ProductionVariantServerlessUpdateConfigTypeDef" = (
        dataclasses.field()
    )

    MaxConcurrency = field("MaxConcurrency")
    ProvisionedConcurrency = field("ProvisionedConcurrency")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ProductionVariantServerlessUpdateConfigTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProductionVariantServerlessUpdateConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DetachClusterNodeVolumeRequest:
    boto3_raw_data: "type_defs.DetachClusterNodeVolumeRequestTypeDef" = (
        dataclasses.field()
    )

    ClusterArn = field("ClusterArn")
    NodeId = field("NodeId")
    VolumeId = field("VolumeId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DetachClusterNodeVolumeRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DetachClusterNodeVolumeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeviceDeploymentSummary:
    boto3_raw_data: "type_defs.DeviceDeploymentSummaryTypeDef" = dataclasses.field()

    EdgeDeploymentPlanArn = field("EdgeDeploymentPlanArn")
    EdgeDeploymentPlanName = field("EdgeDeploymentPlanName")
    StageName = field("StageName")
    DeviceName = field("DeviceName")
    DeviceArn = field("DeviceArn")
    DeployedStageName = field("DeployedStageName")
    DeviceFleetName = field("DeviceFleetName")
    DeviceDeploymentStatus = field("DeviceDeploymentStatus")
    DeviceDeploymentStatusMessage = field("DeviceDeploymentStatusMessage")
    Description = field("Description")
    DeploymentStartTime = field("DeploymentStartTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeviceDeploymentSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeviceDeploymentSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeviceFleetSummary:
    boto3_raw_data: "type_defs.DeviceFleetSummaryTypeDef" = dataclasses.field()

    DeviceFleetArn = field("DeviceFleetArn")
    DeviceFleetName = field("DeviceFleetName")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeviceFleetSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeviceFleetSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeviceSelectionConfig:
    boto3_raw_data: "type_defs.DeviceSelectionConfigTypeDef" = dataclasses.field()

    DeviceSubsetType = field("DeviceSubsetType")
    Percentage = field("Percentage")
    DeviceNames = field("DeviceNames")
    DeviceNameContains = field("DeviceNameContains")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeviceSelectionConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeviceSelectionConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeviceStats:
    boto3_raw_data: "type_defs.DeviceStatsTypeDef" = dataclasses.field()

    ConnectedDeviceCount = field("ConnectedDeviceCount")
    RegisteredDeviceCount = field("RegisteredDeviceCount")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DeviceStatsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DeviceStatsTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EdgeModelSummary:
    boto3_raw_data: "type_defs.EdgeModelSummaryTypeDef" = dataclasses.field()

    ModelName = field("ModelName")
    ModelVersion = field("ModelVersion")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EdgeModelSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EdgeModelSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Device:
    boto3_raw_data: "type_defs.DeviceTypeDef" = dataclasses.field()

    DeviceName = field("DeviceName")
    Description = field("Description")
    IotThingName = field("IotThingName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DeviceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DeviceTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateTrialComponentRequest:
    boto3_raw_data: "type_defs.DisassociateTrialComponentRequestTypeDef" = (
        dataclasses.field()
    )

    TrialComponentName = field("TrialComponentName")
    TrialName = field("TrialName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateTrialComponentRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateTrialComponentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DockerSettingsOutput:
    boto3_raw_data: "type_defs.DockerSettingsOutputTypeDef" = dataclasses.field()

    EnableDockerAccess = field("EnableDockerAccess")
    VpcOnlyTrustedAccounts = field("VpcOnlyTrustedAccounts")
    RootlessDocker = field("RootlessDocker")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DockerSettingsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DockerSettingsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DockerSettings:
    boto3_raw_data: "type_defs.DockerSettingsTypeDef" = dataclasses.field()

    EnableDockerAccess = field("EnableDockerAccess")
    VpcOnlyTrustedAccounts = field("VpcOnlyTrustedAccounts")
    RootlessDocker = field("RootlessDocker")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DockerSettingsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DockerSettingsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DomainDetails:
    boto3_raw_data: "type_defs.DomainDetailsTypeDef" = dataclasses.field()

    DomainArn = field("DomainArn")
    DomainId = field("DomainId")
    DomainName = field("DomainName")
    Status = field("Status")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    Url = field("Url")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DomainDetailsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DomainDetailsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrustedIdentityPropagationSettings:
    boto3_raw_data: "type_defs.TrustedIdentityPropagationSettingsTypeDef" = (
        dataclasses.field()
    )

    Status = field("Status")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TrustedIdentityPropagationSettingsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrustedIdentityPropagationSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UnifiedStudioSettings:
    boto3_raw_data: "type_defs.UnifiedStudioSettingsTypeDef" = dataclasses.field()

    StudioWebPortalAccess = field("StudioWebPortalAccess")
    DomainAccountId = field("DomainAccountId")
    DomainRegion = field("DomainRegion")
    DomainId = field("DomainId")
    ProjectId = field("ProjectId")
    EnvironmentId = field("EnvironmentId")
    ProjectS3Path = field("ProjectS3Path")
    SingleSignOnApplicationArn = field("SingleSignOnApplicationArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UnifiedStudioSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UnifiedStudioSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FileSource:
    boto3_raw_data: "type_defs.FileSourceTypeDef" = dataclasses.field()

    S3Uri = field("S3Uri")
    ContentType = field("ContentType")
    ContentDigest = field("ContentDigest")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FileSourceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FileSourceTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EMRStepMetadata:
    boto3_raw_data: "type_defs.EMRStepMetadataTypeDef" = dataclasses.field()

    ClusterId = field("ClusterId")
    StepId = field("StepId")
    StepName = field("StepName")
    LogFilePath = field("LogFilePath")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EMRStepMetadataTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.EMRStepMetadataTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EbsStorageSettings:
    boto3_raw_data: "type_defs.EbsStorageSettingsTypeDef" = dataclasses.field()

    EbsVolumeSizeInGb = field("EbsVolumeSizeInGb")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EbsStorageSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EbsStorageSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Ec2CapacityReservation:
    boto3_raw_data: "type_defs.Ec2CapacityReservationTypeDef" = dataclasses.field()

    Ec2CapacityReservationId = field("Ec2CapacityReservationId")
    TotalInstanceCount = field("TotalInstanceCount")
    AvailableInstanceCount = field("AvailableInstanceCount")
    UsedByCurrentEndpoint = field("UsedByCurrentEndpoint")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.Ec2CapacityReservationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.Ec2CapacityReservationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EdgeDeploymentPlanSummary:
    boto3_raw_data: "type_defs.EdgeDeploymentPlanSummaryTypeDef" = dataclasses.field()

    EdgeDeploymentPlanArn = field("EdgeDeploymentPlanArn")
    EdgeDeploymentPlanName = field("EdgeDeploymentPlanName")
    DeviceFleetName = field("DeviceFleetName")
    EdgeDeploymentSuccess = field("EdgeDeploymentSuccess")
    EdgeDeploymentPending = field("EdgeDeploymentPending")
    EdgeDeploymentFailed = field("EdgeDeploymentFailed")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EdgeDeploymentPlanSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EdgeDeploymentPlanSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EdgeModelStat:
    boto3_raw_data: "type_defs.EdgeModelStatTypeDef" = dataclasses.field()

    ModelName = field("ModelName")
    ModelVersion = field("ModelVersion")
    OfflineDeviceCount = field("OfflineDeviceCount")
    ConnectedDeviceCount = field("ConnectedDeviceCount")
    ActiveDeviceCount = field("ActiveDeviceCount")
    SamplingDeviceCount = field("SamplingDeviceCount")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EdgeModelStatTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.EdgeModelStatTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EdgePackagingJobSummary:
    boto3_raw_data: "type_defs.EdgePackagingJobSummaryTypeDef" = dataclasses.field()

    EdgePackagingJobArn = field("EdgePackagingJobArn")
    EdgePackagingJobName = field("EdgePackagingJobName")
    EdgePackagingJobStatus = field("EdgePackagingJobStatus")
    CompilationJobName = field("CompilationJobName")
    ModelName = field("ModelName")
    ModelVersion = field("ModelVersion")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EdgePackagingJobSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EdgePackagingJobSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Edge:
    boto3_raw_data: "type_defs.EdgeTypeDef" = dataclasses.field()

    SourceArn = field("SourceArn")
    DestinationArn = field("DestinationArn")
    AssociationType = field("AssociationType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EdgeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.EdgeTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EmrSettingsOutput:
    boto3_raw_data: "type_defs.EmrSettingsOutputTypeDef" = dataclasses.field()

    AssumableRoleArns = field("AssumableRoleArns")
    ExecutionRoleArns = field("ExecutionRoleArns")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EmrSettingsOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EmrSettingsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EmrSettings:
    boto3_raw_data: "type_defs.EmrSettingsTypeDef" = dataclasses.field()

    AssumableRoleArns = field("AssumableRoleArns")
    ExecutionRoleArns = field("ExecutionRoleArns")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EmrSettingsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.EmrSettingsTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EndpointConfigStepMetadata:
    boto3_raw_data: "type_defs.EndpointConfigStepMetadataTypeDef" = dataclasses.field()

    Arn = field("Arn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EndpointConfigStepMetadataTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EndpointConfigStepMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EndpointConfigSummary:
    boto3_raw_data: "type_defs.EndpointConfigSummaryTypeDef" = dataclasses.field()

    EndpointConfigName = field("EndpointConfigName")
    EndpointConfigArn = field("EndpointConfigArn")
    CreationTime = field("CreationTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EndpointConfigSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EndpointConfigSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EndpointInfo:
    boto3_raw_data: "type_defs.EndpointInfoTypeDef" = dataclasses.field()

    EndpointName = field("EndpointName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EndpointInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.EndpointInfoTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProductionVariantServerlessConfig:
    boto3_raw_data: "type_defs.ProductionVariantServerlessConfigTypeDef" = (
        dataclasses.field()
    )

    MemorySizeInMB = field("MemorySizeInMB")
    MaxConcurrency = field("MaxConcurrency")
    ProvisionedConcurrency = field("ProvisionedConcurrency")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ProductionVariantServerlessConfigTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProductionVariantServerlessConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceMetrics:
    boto3_raw_data: "type_defs.InferenceMetricsTypeDef" = dataclasses.field()

    MaxInvocations = field("MaxInvocations")
    ModelLatency = field("ModelLatency")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.InferenceMetricsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceMetricsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EndpointStepMetadata:
    boto3_raw_data: "type_defs.EndpointStepMetadataTypeDef" = dataclasses.field()

    Arn = field("Arn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EndpointStepMetadataTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EndpointStepMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EndpointSummary:
    boto3_raw_data: "type_defs.EndpointSummaryTypeDef" = dataclasses.field()

    EndpointName = field("EndpointName")
    EndpointArn = field("EndpointArn")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    EndpointStatus = field("EndpointStatus")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EndpointSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.EndpointSummaryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FSxLustreConfig:
    boto3_raw_data: "type_defs.FSxLustreConfigTypeDef" = dataclasses.field()

    SizeInGiB = field("SizeInGiB")
    PerUnitStorageThroughput = field("PerUnitStorageThroughput")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FSxLustreConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FSxLustreConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnvironmentParameter:
    boto3_raw_data: "type_defs.EnvironmentParameterTypeDef" = dataclasses.field()

    Key = field("Key")
    ValueType = field("ValueType")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EnvironmentParameterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnvironmentParameterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceGroupScalingMetadata:
    boto3_raw_data: "type_defs.InstanceGroupScalingMetadataTypeDef" = (
        dataclasses.field()
    )

    InstanceCount = field("InstanceCount")
    TargetCount = field("TargetCount")
    FailureMessage = field("FailureMessage")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceGroupScalingMetadataTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceGroupScalingMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FailStepMetadata:
    boto3_raw_data: "type_defs.FailStepMetadataTypeDef" = dataclasses.field()

    ErrorMessage = field("ErrorMessage")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FailStepMetadataTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FailStepMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Filter:
    boto3_raw_data: "type_defs.FilterTypeDef" = dataclasses.field()

    Name = field("Name")
    Operator = field("Operator")
    Value = field("Value")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FilterTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FinalHyperParameterTuningJobObjectiveMetric:
    boto3_raw_data: "type_defs.FinalHyperParameterTuningJobObjectiveMetricTypeDef" = (
        dataclasses.field()
    )

    MetricName = field("MetricName")
    Value = field("Value")
    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FinalHyperParameterTuningJobObjectiveMetricTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FinalHyperParameterTuningJobObjectiveMetricTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FlowDefinitionSummary:
    boto3_raw_data: "type_defs.FlowDefinitionSummaryTypeDef" = dataclasses.field()

    FlowDefinitionName = field("FlowDefinitionName")
    FlowDefinitionArn = field("FlowDefinitionArn")
    FlowDefinitionStatus = field("FlowDefinitionStatus")
    CreationTime = field("CreationTime")
    FailureReason = field("FailureReason")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FlowDefinitionSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FlowDefinitionSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetDeviceFleetReportRequest:
    boto3_raw_data: "type_defs.GetDeviceFleetReportRequestTypeDef" = dataclasses.field()

    DeviceFleetName = field("DeviceFleetName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetDeviceFleetReportRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetDeviceFleetReportRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetLineageGroupPolicyRequest:
    boto3_raw_data: "type_defs.GetLineageGroupPolicyRequestTypeDef" = (
        dataclasses.field()
    )

    LineageGroupName = field("LineageGroupName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetLineageGroupPolicyRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetLineageGroupPolicyRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetModelPackageGroupPolicyInput:
    boto3_raw_data: "type_defs.GetModelPackageGroupPolicyInputTypeDef" = (
        dataclasses.field()
    )

    ModelPackageGroupName = field("ModelPackageGroupName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetModelPackageGroupPolicyInputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetModelPackageGroupPolicyInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScalingPolicyObjective:
    boto3_raw_data: "type_defs.ScalingPolicyObjectiveTypeDef" = dataclasses.field()

    MinInvocationsPerMinute = field("MinInvocationsPerMinute")
    MaxInvocationsPerMinute = field("MaxInvocationsPerMinute")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ScalingPolicyObjectiveTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScalingPolicyObjectiveTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScalingPolicyMetric:
    boto3_raw_data: "type_defs.ScalingPolicyMetricTypeDef" = dataclasses.field()

    InvocationsPerInstance = field("InvocationsPerInstance")
    ModelLatency = field("ModelLatency")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ScalingPolicyMetricTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScalingPolicyMetricTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PropertyNameSuggestion:
    boto3_raw_data: "type_defs.PropertyNameSuggestionTypeDef" = dataclasses.field()

    PropertyName = field("PropertyName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PropertyNameSuggestionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PropertyNameSuggestionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GitConfigForUpdate:
    boto3_raw_data: "type_defs.GitConfigForUpdateTypeDef" = dataclasses.field()

    SecretArn = field("SecretArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GitConfigForUpdateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GitConfigForUpdateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HiddenSageMakerImageOutput:
    boto3_raw_data: "type_defs.HiddenSageMakerImageOutputTypeDef" = dataclasses.field()

    SageMakerImageName = field("SageMakerImageName")
    VersionAliases = field("VersionAliases")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HiddenSageMakerImageOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HiddenSageMakerImageOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HiddenSageMakerImage:
    boto3_raw_data: "type_defs.HiddenSageMakerImageTypeDef" = dataclasses.field()

    SageMakerImageName = field("SageMakerImageName")
    VersionAliases = field("VersionAliases")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HiddenSageMakerImageTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HiddenSageMakerImageTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HolidayConfigAttributes:
    boto3_raw_data: "type_defs.HolidayConfigAttributesTypeDef" = dataclasses.field()

    CountryCode = field("CountryCode")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HolidayConfigAttributesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HolidayConfigAttributesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HubAccessConfig:
    boto3_raw_data: "type_defs.HubAccessConfigTypeDef" = dataclasses.field()

    HubContentArn = field("HubContentArn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.HubAccessConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.HubAccessConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HubContentInfo:
    boto3_raw_data: "type_defs.HubContentInfoTypeDef" = dataclasses.field()

    HubContentName = field("HubContentName")
    HubContentArn = field("HubContentArn")
    HubContentVersion = field("HubContentVersion")
    HubContentType = field("HubContentType")
    DocumentSchemaVersion = field("DocumentSchemaVersion")
    HubContentStatus = field("HubContentStatus")
    CreationTime = field("CreationTime")
    SageMakerPublicHubContentArn = field("SageMakerPublicHubContentArn")
    HubContentDisplayName = field("HubContentDisplayName")
    HubContentDescription = field("HubContentDescription")
    SupportStatus = field("SupportStatus")
    HubContentSearchKeywords = field("HubContentSearchKeywords")
    OriginalCreationTime = field("OriginalCreationTime")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.HubContentInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.HubContentInfoTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HubInfo:
    boto3_raw_data: "type_defs.HubInfoTypeDef" = dataclasses.field()

    HubName = field("HubName")
    HubArn = field("HubArn")
    HubStatus = field("HubStatus")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    HubDisplayName = field("HubDisplayName")
    HubDescription = field("HubDescription")
    HubSearchKeywords = field("HubSearchKeywords")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.HubInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.HubInfoTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HumanLoopActivationConditionsConfig:
    boto3_raw_data: "type_defs.HumanLoopActivationConditionsConfigTypeDef" = (
        dataclasses.field()
    )

    HumanLoopActivationConditions = field("HumanLoopActivationConditions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.HumanLoopActivationConditionsConfigTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HumanLoopActivationConditionsConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UiConfig:
    boto3_raw_data: "type_defs.UiConfigTypeDef" = dataclasses.field()

    UiTemplateS3Uri = field("UiTemplateS3Uri")
    HumanTaskUiArn = field("HumanTaskUiArn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.UiConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.UiConfigTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HumanTaskUiSummary:
    boto3_raw_data: "type_defs.HumanTaskUiSummaryTypeDef" = dataclasses.field()

    HumanTaskUiName = field("HumanTaskUiName")
    HumanTaskUiArn = field("HumanTaskUiArn")
    CreationTime = field("CreationTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HumanTaskUiSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HumanTaskUiSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HyperParameterTuningJobObjective:
    boto3_raw_data: "type_defs.HyperParameterTuningJobObjectiveTypeDef" = (
        dataclasses.field()
    )

    Type = field("Type")
    MetricName = field("MetricName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.HyperParameterTuningJobObjectiveTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HyperParameterTuningJobObjectiveTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HyperParameterTuningInstanceConfig:
    boto3_raw_data: "type_defs.HyperParameterTuningInstanceConfigTypeDef" = (
        dataclasses.field()
    )

    InstanceType = field("InstanceType")
    InstanceCount = field("InstanceCount")
    VolumeSizeInGB = field("VolumeSizeInGB")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.HyperParameterTuningInstanceConfigTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HyperParameterTuningInstanceConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourceLimits:
    boto3_raw_data: "type_defs.ResourceLimitsTypeDef" = dataclasses.field()

    MaxParallelTrainingJobs = field("MaxParallelTrainingJobs")
    MaxNumberOfTrainingJobs = field("MaxNumberOfTrainingJobs")
    MaxRuntimeInSeconds = field("MaxRuntimeInSeconds")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ResourceLimitsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ResourceLimitsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HyperbandStrategyConfig:
    boto3_raw_data: "type_defs.HyperbandStrategyConfigTypeDef" = dataclasses.field()

    MinResource = field("MinResource")
    MaxResource = field("MaxResource")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HyperbandStrategyConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HyperbandStrategyConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParentHyperParameterTuningJob:
    boto3_raw_data: "type_defs.ParentHyperParameterTuningJobTypeDef" = (
        dataclasses.field()
    )

    HyperParameterTuningJobName = field("HyperParameterTuningJobName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ParentHyperParameterTuningJobTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ParentHyperParameterTuningJobTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IamIdentity:
    boto3_raw_data: "type_defs.IamIdentityTypeDef" = dataclasses.field()

    Arn = field("Arn")
    PrincipalId = field("PrincipalId")
    SourceIdentity = field("SourceIdentity")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.IamIdentityTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.IamIdentityTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IamPolicyConstraints:
    boto3_raw_data: "type_defs.IamPolicyConstraintsTypeDef" = dataclasses.field()

    SourceIp = field("SourceIp")
    VpcSourceIp = field("VpcSourceIp")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IamPolicyConstraintsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IamPolicyConstraintsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RepositoryAuthConfig:
    boto3_raw_data: "type_defs.RepositoryAuthConfigTypeDef" = dataclasses.field()

    RepositoryCredentialsProviderArn = field("RepositoryCredentialsProviderArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RepositoryAuthConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RepositoryAuthConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Image:
    boto3_raw_data: "type_defs.ImageTypeDef" = dataclasses.field()

    CreationTime = field("CreationTime")
    ImageArn = field("ImageArn")
    ImageName = field("ImageName")
    ImageStatus = field("ImageStatus")
    LastModifiedTime = field("LastModifiedTime")
    Description = field("Description")
    DisplayName = field("DisplayName")
    FailureReason = field("FailureReason")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ImageTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ImageTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageVersion:
    boto3_raw_data: "type_defs.ImageVersionTypeDef" = dataclasses.field()

    CreationTime = field("CreationTime")
    ImageArn = field("ImageArn")
    ImageVersionArn = field("ImageVersionArn")
    ImageVersionStatus = field("ImageVersionStatus")
    LastModifiedTime = field("LastModifiedTime")
    Version = field("Version")
    FailureReason = field("FailureReason")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ImageVersionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ImageVersionTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceComponentCapacitySize:
    boto3_raw_data: "type_defs.InferenceComponentCapacitySizeTypeDef" = (
        dataclasses.field()
    )

    Type = field("Type")
    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.InferenceComponentCapacitySizeTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceComponentCapacitySizeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceComponentComputeResourceRequirements:
    boto3_raw_data: "type_defs.InferenceComponentComputeResourceRequirementsTypeDef" = (
        dataclasses.field()
    )

    MinMemoryRequiredInMb = field("MinMemoryRequiredInMb")
    NumberOfCpuCoresRequired = field("NumberOfCpuCoresRequired")
    NumberOfAcceleratorDevicesRequired = field("NumberOfAcceleratorDevicesRequired")
    MaxMemoryRequiredInMb = field("MaxMemoryRequiredInMb")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InferenceComponentComputeResourceRequirementsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceComponentComputeResourceRequirementsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceComponentContainerSpecification:
    boto3_raw_data: "type_defs.InferenceComponentContainerSpecificationTypeDef" = (
        dataclasses.field()
    )

    Image = field("Image")
    ArtifactUrl = field("ArtifactUrl")
    Environment = field("Environment")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InferenceComponentContainerSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceComponentContainerSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceComponentStartupParameters:
    boto3_raw_data: "type_defs.InferenceComponentStartupParametersTypeDef" = (
        dataclasses.field()
    )

    ModelDataDownloadTimeoutInSeconds = field("ModelDataDownloadTimeoutInSeconds")
    ContainerStartupHealthCheckTimeoutInSeconds = field(
        "ContainerStartupHealthCheckTimeoutInSeconds"
    )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InferenceComponentStartupParametersTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceComponentStartupParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceComponentSummary:
    boto3_raw_data: "type_defs.InferenceComponentSummaryTypeDef" = dataclasses.field()

    CreationTime = field("CreationTime")
    InferenceComponentArn = field("InferenceComponentArn")
    InferenceComponentName = field("InferenceComponentName")
    EndpointArn = field("EndpointArn")
    EndpointName = field("EndpointName")
    VariantName = field("VariantName")
    LastModifiedTime = field("LastModifiedTime")
    InferenceComponentStatus = field("InferenceComponentStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InferenceComponentSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceComponentSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceHubAccessConfig:
    boto3_raw_data: "type_defs.InferenceHubAccessConfigTypeDef" = dataclasses.field()

    HubContentArn = field("HubContentArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InferenceHubAccessConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceHubAccessConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RecommendationMetrics:
    boto3_raw_data: "type_defs.RecommendationMetricsTypeDef" = dataclasses.field()

    CostPerHour = field("CostPerHour")
    CostPerInference = field("CostPerInference")
    MaxInvocations = field("MaxInvocations")
    ModelLatency = field("ModelLatency")
    CpuUtilization = field("CpuUtilization")
    MemoryUtilization = field("MemoryUtilization")
    ModelSetupTime = field("ModelSetupTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RecommendationMetricsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RecommendationMetricsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceRecommendationsJob:
    boto3_raw_data: "type_defs.InferenceRecommendationsJobTypeDef" = dataclasses.field()

    JobName = field("JobName")
    JobDescription = field("JobDescription")
    JobType = field("JobType")
    JobArn = field("JobArn")
    Status = field("Status")
    CreationTime = field("CreationTime")
    RoleArn = field("RoleArn")
    LastModifiedTime = field("LastModifiedTime")
    CompletionTime = field("CompletionTime")
    FailureReason = field("FailureReason")
    ModelName = field("ModelName")
    SamplePayloadUrl = field("SamplePayloadUrl")
    ModelPackageVersionArn = field("ModelPackageVersionArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InferenceRecommendationsJobTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceRecommendationsJobTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceGroup:
    boto3_raw_data: "type_defs.InstanceGroupTypeDef" = dataclasses.field()

    InstanceType = field("InstanceType")
    InstanceCount = field("InstanceCount")
    InstanceGroupName = field("InstanceGroupName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.InstanceGroupTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.InstanceGroupTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PlacementSpecification:
    boto3_raw_data: "type_defs.PlacementSpecificationTypeDef" = dataclasses.field()

    InstanceCount = field("InstanceCount")
    UltraServerId = field("UltraServerId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PlacementSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PlacementSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IntegerParameterRangeSpecification:
    boto3_raw_data: "type_defs.IntegerParameterRangeSpecificationTypeDef" = (
        dataclasses.field()
    )

    MinValue = field("MinValue")
    MaxValue = field("MaxValue")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.IntegerParameterRangeSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IntegerParameterRangeSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IntegerParameterRange:
    boto3_raw_data: "type_defs.IntegerParameterRangeTypeDef" = dataclasses.field()

    Name = field("Name")
    MinValue = field("MinValue")
    MaxValue = field("MaxValue")
    ScalingType = field("ScalingType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IntegerParameterRangeTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IntegerParameterRangeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KernelSpec:
    boto3_raw_data: "type_defs.KernelSpecTypeDef" = dataclasses.field()

    Name = field("Name")
    DisplayName = field("DisplayName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.KernelSpecTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.KernelSpecTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LabelCountersForWorkteam:
    boto3_raw_data: "type_defs.LabelCountersForWorkteamTypeDef" = dataclasses.field()

    HumanLabeled = field("HumanLabeled")
    PendingHuman = field("PendingHuman")
    Total = field("Total")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LabelCountersForWorkteamTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LabelCountersForWorkteamTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LabelingJobDataAttributesOutput:
    boto3_raw_data: "type_defs.LabelingJobDataAttributesOutputTypeDef" = (
        dataclasses.field()
    )

    ContentClassifiers = field("ContentClassifiers")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.LabelingJobDataAttributesOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LabelingJobDataAttributesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LabelingJobDataAttributes:
    boto3_raw_data: "type_defs.LabelingJobDataAttributesTypeDef" = dataclasses.field()

    ContentClassifiers = field("ContentClassifiers")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LabelingJobDataAttributesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LabelingJobDataAttributesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LabelingJobS3DataSource:
    boto3_raw_data: "type_defs.LabelingJobS3DataSourceTypeDef" = dataclasses.field()

    ManifestS3Uri = field("ManifestS3Uri")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LabelingJobS3DataSourceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LabelingJobS3DataSourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LabelingJobSnsDataSource:
    boto3_raw_data: "type_defs.LabelingJobSnsDataSourceTypeDef" = dataclasses.field()

    SnsTopicArn = field("SnsTopicArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LabelingJobSnsDataSourceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LabelingJobSnsDataSourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LineageGroupSummary:
    boto3_raw_data: "type_defs.LineageGroupSummaryTypeDef" = dataclasses.field()

    LineageGroupArn = field("LineageGroupArn")
    LineageGroupName = field("LineageGroupName")
    DisplayName = field("DisplayName")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LineageGroupSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LineageGroupSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAliasesRequest:
    boto3_raw_data: "type_defs.ListAliasesRequestTypeDef" = dataclasses.field()

    ImageName = field("ImageName")
    Alias = field("Alias")
    Version = field("Version")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListAliasesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAliasesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAppsRequest:
    boto3_raw_data: "type_defs.ListAppsRequestTypeDef" = dataclasses.field()

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    SortOrder = field("SortOrder")
    SortBy = field("SortBy")
    DomainIdEquals = field("DomainIdEquals")
    UserProfileNameEquals = field("UserProfileNameEquals")
    SpaceNameEquals = field("SpaceNameEquals")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ListAppsRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ListAppsRequestTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListCandidatesForAutoMLJobRequest:
    boto3_raw_data: "type_defs.ListCandidatesForAutoMLJobRequestTypeDef" = (
        dataclasses.field()
    )

    AutoMLJobName = field("AutoMLJobName")
    StatusEquals = field("StatusEquals")
    CandidateNameEquals = field("CandidateNameEquals")
    SortOrder = field("SortOrder")
    SortBy = field("SortBy")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListCandidatesForAutoMLJobRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListCandidatesForAutoMLJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringJobDefinitionSummary:
    boto3_raw_data: "type_defs.MonitoringJobDefinitionSummaryTypeDef" = (
        dataclasses.field()
    )

    MonitoringJobDefinitionName = field("MonitoringJobDefinitionName")
    MonitoringJobDefinitionArn = field("MonitoringJobDefinitionArn")
    CreationTime = field("CreationTime")
    EndpointName = field("EndpointName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.MonitoringJobDefinitionSummaryTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringJobDefinitionSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListDomainsRequest:
    boto3_raw_data: "type_defs.ListDomainsRequestTypeDef" = dataclasses.field()

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListDomainsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListDomainsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListInferenceRecommendationsJobStepsRequest:
    boto3_raw_data: "type_defs.ListInferenceRecommendationsJobStepsRequestTypeDef" = (
        dataclasses.field()
    )

    JobName = field("JobName")
    Status = field("Status")
    StepType = field("StepType")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListInferenceRecommendationsJobStepsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListInferenceRecommendationsJobStepsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrackingServerSummary:
    boto3_raw_data: "type_defs.TrackingServerSummaryTypeDef" = dataclasses.field()

    TrackingServerArn = field("TrackingServerArn")
    TrackingServerName = field("TrackingServerName")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    TrackingServerStatus = field("TrackingServerStatus")
    IsActive = field("IsActive")
    MlflowVersion = field("MlflowVersion")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrackingServerSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrackingServerSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelCardExportJobSummary:
    boto3_raw_data: "type_defs.ModelCardExportJobSummaryTypeDef" = dataclasses.field()

    ModelCardExportJobName = field("ModelCardExportJobName")
    ModelCardExportJobArn = field("ModelCardExportJobArn")
    Status = field("Status")
    ModelCardName = field("ModelCardName")
    ModelCardVersion = field("ModelCardVersion")
    CreatedAt = field("CreatedAt")
    LastModifiedAt = field("LastModifiedAt")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelCardExportJobSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelCardExportJobSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelCardVersionSummary:
    boto3_raw_data: "type_defs.ModelCardVersionSummaryTypeDef" = dataclasses.field()

    ModelCardName = field("ModelCardName")
    ModelCardArn = field("ModelCardArn")
    ModelCardStatus = field("ModelCardStatus")
    ModelCardVersion = field("ModelCardVersion")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelCardVersionSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelCardVersionSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelCardSummary:
    boto3_raw_data: "type_defs.ModelCardSummaryTypeDef" = dataclasses.field()

    ModelCardName = field("ModelCardName")
    ModelCardArn = field("ModelCardArn")
    ModelCardStatus = field("ModelCardStatus")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ModelCardSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelCardSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelMetadataSummary:
    boto3_raw_data: "type_defs.ModelMetadataSummaryTypeDef" = dataclasses.field()

    Domain = field("Domain")
    Framework = field("Framework")
    Task = field("Task")
    Model = field("Model")
    FrameworkVersion = field("FrameworkVersion")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelMetadataSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelMetadataSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelPackageGroupSummary:
    boto3_raw_data: "type_defs.ModelPackageGroupSummaryTypeDef" = dataclasses.field()

    ModelPackageGroupName = field("ModelPackageGroupName")
    ModelPackageGroupArn = field("ModelPackageGroupArn")
    CreationTime = field("CreationTime")
    ModelPackageGroupStatus = field("ModelPackageGroupStatus")
    ModelPackageGroupDescription = field("ModelPackageGroupDescription")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelPackageGroupSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelPackageGroupSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelSummary:
    boto3_raw_data: "type_defs.ModelSummaryTypeDef" = dataclasses.field()

    ModelName = field("ModelName")
    ModelArn = field("ModelArn")
    CreationTime = field("CreationTime")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ModelSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ModelSummaryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringAlertHistorySummary:
    boto3_raw_data: "type_defs.MonitoringAlertHistorySummaryTypeDef" = (
        dataclasses.field()
    )

    MonitoringScheduleName = field("MonitoringScheduleName")
    MonitoringAlertName = field("MonitoringAlertName")
    CreationTime = field("CreationTime")
    AlertStatus = field("AlertStatus")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.MonitoringAlertHistorySummaryTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringAlertHistorySummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListMonitoringAlertsRequest:
    boto3_raw_data: "type_defs.ListMonitoringAlertsRequestTypeDef" = dataclasses.field()

    MonitoringScheduleName = field("MonitoringScheduleName")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListMonitoringAlertsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListMonitoringAlertsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringScheduleSummary:
    boto3_raw_data: "type_defs.MonitoringScheduleSummaryTypeDef" = dataclasses.field()

    MonitoringScheduleName = field("MonitoringScheduleName")
    MonitoringScheduleArn = field("MonitoringScheduleArn")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    MonitoringScheduleStatus = field("MonitoringScheduleStatus")
    EndpointName = field("EndpointName")
    MonitoringJobDefinitionName = field("MonitoringJobDefinitionName")
    MonitoringType = field("MonitoringType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MonitoringScheduleSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringScheduleSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NotebookInstanceLifecycleConfigSummary:
    boto3_raw_data: "type_defs.NotebookInstanceLifecycleConfigSummaryTypeDef" = (
        dataclasses.field()
    )

    NotebookInstanceLifecycleConfigName = field("NotebookInstanceLifecycleConfigName")
    NotebookInstanceLifecycleConfigArn = field("NotebookInstanceLifecycleConfigArn")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.NotebookInstanceLifecycleConfigSummaryTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NotebookInstanceLifecycleConfigSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NotebookInstanceSummary:
    boto3_raw_data: "type_defs.NotebookInstanceSummaryTypeDef" = dataclasses.field()

    NotebookInstanceName = field("NotebookInstanceName")
    NotebookInstanceArn = field("NotebookInstanceArn")
    NotebookInstanceStatus = field("NotebookInstanceStatus")
    Url = field("Url")
    InstanceType = field("InstanceType")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    NotebookInstanceLifecycleConfigName = field("NotebookInstanceLifecycleConfigName")
    DefaultCodeRepository = field("DefaultCodeRepository")
    AdditionalCodeRepositories = field("AdditionalCodeRepositories")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NotebookInstanceSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NotebookInstanceSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OptimizationJobSummary:
    boto3_raw_data: "type_defs.OptimizationJobSummaryTypeDef" = dataclasses.field()

    OptimizationJobName = field("OptimizationJobName")
    OptimizationJobArn = field("OptimizationJobArn")
    CreationTime = field("CreationTime")
    OptimizationJobStatus = field("OptimizationJobStatus")
    DeploymentInstanceType = field("DeploymentInstanceType")
    OptimizationTypes = field("OptimizationTypes")
    OptimizationStartTime = field("OptimizationStartTime")
    OptimizationEndTime = field("OptimizationEndTime")
    LastModifiedTime = field("LastModifiedTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.OptimizationJobSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OptimizationJobSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListPartnerAppsRequest:
    boto3_raw_data: "type_defs.ListPartnerAppsRequestTypeDef" = dataclasses.field()

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListPartnerAppsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListPartnerAppsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PartnerAppSummary:
    boto3_raw_data: "type_defs.PartnerAppSummaryTypeDef" = dataclasses.field()

    Arn = field("Arn")
    Name = field("Name")
    Type = field("Type")
    Status = field("Status")
    CreationTime = field("CreationTime")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PartnerAppSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PartnerAppSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListPipelineExecutionStepsRequest:
    boto3_raw_data: "type_defs.ListPipelineExecutionStepsRequestTypeDef" = (
        dataclasses.field()
    )

    PipelineExecutionArn = field("PipelineExecutionArn")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    SortOrder = field("SortOrder")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListPipelineExecutionStepsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListPipelineExecutionStepsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PipelineExecutionSummary:
    boto3_raw_data: "type_defs.PipelineExecutionSummaryTypeDef" = dataclasses.field()

    PipelineExecutionArn = field("PipelineExecutionArn")
    StartTime = field("StartTime")
    PipelineExecutionStatus = field("PipelineExecutionStatus")
    PipelineExecutionDescription = field("PipelineExecutionDescription")
    PipelineExecutionDisplayName = field("PipelineExecutionDisplayName")
    PipelineExecutionFailureReason = field("PipelineExecutionFailureReason")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PipelineExecutionSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PipelineExecutionSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListPipelineParametersForExecutionRequest:
    boto3_raw_data: "type_defs.ListPipelineParametersForExecutionRequestTypeDef" = (
        dataclasses.field()
    )

    PipelineExecutionArn = field("PipelineExecutionArn")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListPipelineParametersForExecutionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListPipelineParametersForExecutionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Parameter:
    boto3_raw_data: "type_defs.ParameterTypeDef" = dataclasses.field()

    Name = field("Name")
    Value = field("Value")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ParameterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ParameterTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PipelineVersionSummary:
    boto3_raw_data: "type_defs.PipelineVersionSummaryTypeDef" = dataclasses.field()

    PipelineArn = field("PipelineArn")
    PipelineVersionId = field("PipelineVersionId")
    CreationTime = field("CreationTime")
    PipelineVersionDescription = field("PipelineVersionDescription")
    PipelineVersionDisplayName = field("PipelineVersionDisplayName")
    LastExecutionPipelineExecutionArn = field("LastExecutionPipelineExecutionArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PipelineVersionSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PipelineVersionSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PipelineSummary:
    boto3_raw_data: "type_defs.PipelineSummaryTypeDef" = dataclasses.field()

    PipelineArn = field("PipelineArn")
    PipelineName = field("PipelineName")
    PipelineDisplayName = field("PipelineDisplayName")
    PipelineDescription = field("PipelineDescription")
    RoleArn = field("RoleArn")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    LastExecutionTime = field("LastExecutionTime")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PipelineSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PipelineSummaryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProcessingJobSummary:
    boto3_raw_data: "type_defs.ProcessingJobSummaryTypeDef" = dataclasses.field()

    ProcessingJobName = field("ProcessingJobName")
    ProcessingJobArn = field("ProcessingJobArn")
    CreationTime = field("CreationTime")
    ProcessingJobStatus = field("ProcessingJobStatus")
    ProcessingEndTime = field("ProcessingEndTime")
    LastModifiedTime = field("LastModifiedTime")
    FailureReason = field("FailureReason")
    ExitMessage = field("ExitMessage")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProcessingJobSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProcessingJobSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProjectSummary:
    boto3_raw_data: "type_defs.ProjectSummaryTypeDef" = dataclasses.field()

    ProjectName = field("ProjectName")
    ProjectArn = field("ProjectArn")
    ProjectId = field("ProjectId")
    CreationTime = field("CreationTime")
    ProjectStatus = field("ProjectStatus")
    ProjectDescription = field("ProjectDescription")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ProjectSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ProjectSummaryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourceCatalog:
    boto3_raw_data: "type_defs.ResourceCatalogTypeDef" = dataclasses.field()

    ResourceCatalogArn = field("ResourceCatalogArn")
    ResourceCatalogName = field("ResourceCatalogName")
    Description = field("Description")
    CreationTime = field("CreationTime")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ResourceCatalogTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ResourceCatalogTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListSpacesRequest:
    boto3_raw_data: "type_defs.ListSpacesRequestTypeDef" = dataclasses.field()

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    SortOrder = field("SortOrder")
    SortBy = field("SortBy")
    DomainIdEquals = field("DomainIdEquals")
    SpaceNameContains = field("SpaceNameContains")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ListSpacesRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListSpacesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListStageDevicesRequest:
    boto3_raw_data: "type_defs.ListStageDevicesRequestTypeDef" = dataclasses.field()

    EdgeDeploymentPlanName = field("EdgeDeploymentPlanName")
    StageName = field("StageName")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    ExcludeDevicesDeployedInOtherStage = field("ExcludeDevicesDeployedInOtherStage")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListStageDevicesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListStageDevicesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StudioLifecycleConfigDetails:
    boto3_raw_data: "type_defs.StudioLifecycleConfigDetailsTypeDef" = (
        dataclasses.field()
    )

    StudioLifecycleConfigArn = field("StudioLifecycleConfigArn")
    StudioLifecycleConfigName = field("StudioLifecycleConfigName")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    StudioLifecycleConfigAppType = field("StudioLifecycleConfigAppType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StudioLifecycleConfigDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StudioLifecycleConfigDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListSubscribedWorkteamsRequest:
    boto3_raw_data: "type_defs.ListSubscribedWorkteamsRequestTypeDef" = (
        dataclasses.field()
    )

    NameContains = field("NameContains")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListSubscribedWorkteamsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListSubscribedWorkteamsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTagsInput:
    boto3_raw_data: "type_defs.ListTagsInputTypeDef" = dataclasses.field()

    ResourceArn = field("ResourceArn")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ListTagsInputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ListTagsInputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTrainingJobsForHyperParameterTuningJobRequest:
    boto3_raw_data: (
        "type_defs.ListTrainingJobsForHyperParameterTuningJobRequestTypeDef"
    ) = dataclasses.field()

    HyperParameterTuningJobName = field("HyperParameterTuningJobName")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    StatusEquals = field("StatusEquals")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListTrainingJobsForHyperParameterTuningJobRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ListTrainingJobsForHyperParameterTuningJobRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrainingPlanFilter:
    boto3_raw_data: "type_defs.TrainingPlanFilterTypeDef" = dataclasses.field()

    Name = field("Name")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrainingPlanFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrainingPlanFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransformJobSummary:
    boto3_raw_data: "type_defs.TransformJobSummaryTypeDef" = dataclasses.field()

    TransformJobName = field("TransformJobName")
    TransformJobArn = field("TransformJobArn")
    CreationTime = field("CreationTime")
    TransformJobStatus = field("TransformJobStatus")
    TransformEndTime = field("TransformEndTime")
    LastModifiedTime = field("LastModifiedTime")
    FailureReason = field("FailureReason")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TransformJobSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransformJobSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListUltraServersByReservedCapacityRequest:
    boto3_raw_data: "type_defs.ListUltraServersByReservedCapacityRequestTypeDef" = (
        dataclasses.field()
    )

    ReservedCapacityArn = field("ReservedCapacityArn")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListUltraServersByReservedCapacityRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListUltraServersByReservedCapacityRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UltraServer:
    boto3_raw_data: "type_defs.UltraServerTypeDef" = dataclasses.field()

    UltraServerId = field("UltraServerId")
    UltraServerType = field("UltraServerType")
    AvailabilityZone = field("AvailabilityZone")
    InstanceType = field("InstanceType")
    TotalInstanceCount = field("TotalInstanceCount")
    ConfiguredSpareInstanceCount = field("ConfiguredSpareInstanceCount")
    AvailableInstanceCount = field("AvailableInstanceCount")
    InUseInstanceCount = field("InUseInstanceCount")
    AvailableSpareInstanceCount = field("AvailableSpareInstanceCount")
    UnhealthyInstanceCount = field("UnhealthyInstanceCount")
    HealthStatus = field("HealthStatus")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.UltraServerTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.UltraServerTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListUserProfilesRequest:
    boto3_raw_data: "type_defs.ListUserProfilesRequestTypeDef" = dataclasses.field()

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    SortOrder = field("SortOrder")
    SortBy = field("SortBy")
    DomainIdEquals = field("DomainIdEquals")
    UserProfileNameContains = field("UserProfileNameContains")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListUserProfilesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListUserProfilesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UserProfileDetails:
    boto3_raw_data: "type_defs.UserProfileDetailsTypeDef" = dataclasses.field()

    DomainId = field("DomainId")
    UserProfileName = field("UserProfileName")
    Status = field("Status")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UserProfileDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UserProfileDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListWorkforcesRequest:
    boto3_raw_data: "type_defs.ListWorkforcesRequestTypeDef" = dataclasses.field()

    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NameContains = field("NameContains")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListWorkforcesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListWorkforcesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListWorkteamsRequest:
    boto3_raw_data: "type_defs.ListWorkteamsRequestTypeDef" = dataclasses.field()

    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NameContains = field("NameContains")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListWorkteamsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListWorkteamsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OidcMemberDefinitionOutput:
    boto3_raw_data: "type_defs.OidcMemberDefinitionOutputTypeDef" = dataclasses.field()

    Groups = field("Groups")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.OidcMemberDefinitionOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OidcMemberDefinitionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PredefinedMetricSpecification:
    boto3_raw_data: "type_defs.PredefinedMetricSpecificationTypeDef" = (
        dataclasses.field()
    )

    PredefinedMetricType = field("PredefinedMetricType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.PredefinedMetricSpecificationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PredefinedMetricSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelAccessConfig:
    boto3_raw_data: "type_defs.ModelAccessConfigTypeDef" = dataclasses.field()

    AcceptEula = field("AcceptEula")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ModelAccessConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelAccessConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelBiasAppSpecification:
    boto3_raw_data: "type_defs.ModelBiasAppSpecificationTypeDef" = dataclasses.field()

    ImageUri = field("ImageUri")
    ConfigUri = field("ConfigUri")
    Environment = field("Environment")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelBiasAppSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelBiasAppSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringGroundTruthS3Input:
    boto3_raw_data: "type_defs.MonitoringGroundTruthS3InputTypeDef" = (
        dataclasses.field()
    )

    S3Uri = field("S3Uri")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MonitoringGroundTruthS3InputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringGroundTruthS3InputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelCompilationConfigOutput:
    boto3_raw_data: "type_defs.ModelCompilationConfigOutputTypeDef" = (
        dataclasses.field()
    )

    Image = field("Image")
    OverrideEnvironment = field("OverrideEnvironment")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelCompilationConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelCompilationConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelCompilationConfig:
    boto3_raw_data: "type_defs.ModelCompilationConfigTypeDef" = dataclasses.field()

    Image = field("Image")
    OverrideEnvironment = field("OverrideEnvironment")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelCompilationConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelCompilationConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelDashboardEndpoint:
    boto3_raw_data: "type_defs.ModelDashboardEndpointTypeDef" = dataclasses.field()

    EndpointName = field("EndpointName")
    EndpointArn = field("EndpointArn")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    EndpointStatus = field("EndpointStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelDashboardEndpointTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelDashboardEndpointTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelDashboardIndicatorAction:
    boto3_raw_data: "type_defs.ModelDashboardIndicatorActionTypeDef" = (
        dataclasses.field()
    )

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModelDashboardIndicatorActionTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelDashboardIndicatorActionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelExplainabilityAppSpecification:
    boto3_raw_data: "type_defs.ModelExplainabilityAppSpecificationTypeDef" = (
        dataclasses.field()
    )

    ImageUri = field("ImageUri")
    ConfigUri = field("ConfigUri")
    Environment = field("Environment")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModelExplainabilityAppSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelExplainabilityAppSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RealTimeInferenceConfig:
    boto3_raw_data: "type_defs.RealTimeInferenceConfigTypeDef" = dataclasses.field()

    InstanceType = field("InstanceType")
    InstanceCount = field("InstanceCount")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RealTimeInferenceConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RealTimeInferenceConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelInput:
    boto3_raw_data: "type_defs.ModelInputTypeDef" = dataclasses.field()

    DataInputConfig = field("DataInputConfig")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ModelInputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ModelInputTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelLatencyThreshold:
    boto3_raw_data: "type_defs.ModelLatencyThresholdTypeDef" = dataclasses.field()

    Percentile = field("Percentile")
    ValueInMilliseconds = field("ValueInMilliseconds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelLatencyThresholdTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelLatencyThresholdTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelMetadataFilter:
    boto3_raw_data: "type_defs.ModelMetadataFilterTypeDef" = dataclasses.field()

    Name = field("Name")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelMetadataFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelMetadataFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelPackageStatusItem:
    boto3_raw_data: "type_defs.ModelPackageStatusItemTypeDef" = dataclasses.field()

    Name = field("Name")
    Status = field("Status")
    FailureReason = field("FailureReason")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelPackageStatusItemTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelPackageStatusItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelQualityAppSpecification:
    boto3_raw_data: "type_defs.ModelQualityAppSpecificationTypeDef" = (
        dataclasses.field()
    )

    ImageUri = field("ImageUri")
    ContainerEntrypoint = field("ContainerEntrypoint")
    ContainerArguments = field("ContainerArguments")
    RecordPreprocessorSourceUri = field("RecordPreprocessorSourceUri")
    PostAnalyticsProcessorSourceUri = field("PostAnalyticsProcessorSourceUri")
    ProblemType = field("ProblemType")
    Environment = field("Environment")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelQualityAppSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelQualityAppSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelQuantizationConfigOutput:
    boto3_raw_data: "type_defs.ModelQuantizationConfigOutputTypeDef" = (
        dataclasses.field()
    )

    Image = field("Image")
    OverrideEnvironment = field("OverrideEnvironment")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModelQuantizationConfigOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelQuantizationConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelQuantizationConfig:
    boto3_raw_data: "type_defs.ModelQuantizationConfigTypeDef" = dataclasses.field()

    Image = field("Image")
    OverrideEnvironment = field("OverrideEnvironment")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelQuantizationConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelQuantizationConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelShardingConfigOutput:
    boto3_raw_data: "type_defs.ModelShardingConfigOutputTypeDef" = dataclasses.field()

    Image = field("Image")
    OverrideEnvironment = field("OverrideEnvironment")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelShardingConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelShardingConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelShardingConfig:
    boto3_raw_data: "type_defs.ModelShardingConfigTypeDef" = dataclasses.field()

    Image = field("Image")
    OverrideEnvironment = field("OverrideEnvironment")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelShardingConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelShardingConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelStepMetadata:
    boto3_raw_data: "type_defs.ModelStepMetadataTypeDef" = dataclasses.field()

    Arn = field("Arn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ModelStepMetadataTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelStepMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringAppSpecificationOutput:
    boto3_raw_data: "type_defs.MonitoringAppSpecificationOutputTypeDef" = (
        dataclasses.field()
    )

    ImageUri = field("ImageUri")
    ContainerEntrypoint = field("ContainerEntrypoint")
    ContainerArguments = field("ContainerArguments")
    RecordPreprocessorSourceUri = field("RecordPreprocessorSourceUri")
    PostAnalyticsProcessorSourceUri = field("PostAnalyticsProcessorSourceUri")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.MonitoringAppSpecificationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringAppSpecificationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringAppSpecification:
    boto3_raw_data: "type_defs.MonitoringAppSpecificationTypeDef" = dataclasses.field()

    ImageUri = field("ImageUri")
    ContainerEntrypoint = field("ContainerEntrypoint")
    ContainerArguments = field("ContainerArguments")
    RecordPreprocessorSourceUri = field("RecordPreprocessorSourceUri")
    PostAnalyticsProcessorSourceUri = field("PostAnalyticsProcessorSourceUri")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MonitoringAppSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringAppSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringClusterConfig:
    boto3_raw_data: "type_defs.MonitoringClusterConfigTypeDef" = dataclasses.field()

    InstanceCount = field("InstanceCount")
    InstanceType = field("InstanceType")
    VolumeSizeInGB = field("VolumeSizeInGB")
    VolumeKmsKeyId = field("VolumeKmsKeyId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MonitoringClusterConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringClusterConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringCsvDatasetFormat:
    boto3_raw_data: "type_defs.MonitoringCsvDatasetFormatTypeDef" = dataclasses.field()

    Header = field("Header")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MonitoringCsvDatasetFormatTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringCsvDatasetFormatTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringJsonDatasetFormat:
    boto3_raw_data: "type_defs.MonitoringJsonDatasetFormatTypeDef" = dataclasses.field()

    Line = field("Line")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MonitoringJsonDatasetFormatTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringJsonDatasetFormatTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringS3Output:
    boto3_raw_data: "type_defs.MonitoringS3OutputTypeDef" = dataclasses.field()

    S3Uri = field("S3Uri")
    LocalPath = field("LocalPath")
    S3UploadMode = field("S3UploadMode")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MonitoringS3OutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringS3OutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScheduleConfig:
    boto3_raw_data: "type_defs.ScheduleConfigTypeDef" = dataclasses.field()

    ScheduleExpression = field("ScheduleExpression")
    DataAnalysisStartTime = field("DataAnalysisStartTime")
    DataAnalysisEndTime = field("DataAnalysisEndTime")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ScheduleConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ScheduleConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NeoVpcConfig:
    boto3_raw_data: "type_defs.NeoVpcConfigTypeDef" = dataclasses.field()

    SecurityGroupIds = field("SecurityGroupIds")
    Subnets = field("Subnets")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NeoVpcConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.NeoVpcConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class S3StorageConfig:
    boto3_raw_data: "type_defs.S3StorageConfigTypeDef" = dataclasses.field()

    S3Uri = field("S3Uri")
    KmsKeyId = field("KmsKeyId")
    ResolvedOutputS3Uri = field("ResolvedOutputS3Uri")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.S3StorageConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.S3StorageConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OidcConfigForResponse:
    boto3_raw_data: "type_defs.OidcConfigForResponseTypeDef" = dataclasses.field()

    ClientId = field("ClientId")
    Issuer = field("Issuer")
    AuthorizationEndpoint = field("AuthorizationEndpoint")
    TokenEndpoint = field("TokenEndpoint")
    UserInfoEndpoint = field("UserInfoEndpoint")
    LogoutEndpoint = field("LogoutEndpoint")
    JwksUri = field("JwksUri")
    Scope = field("Scope")
    AuthenticationRequestExtraParams = field("AuthenticationRequestExtraParams")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.OidcConfigForResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OidcConfigForResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OidcMemberDefinition:
    boto3_raw_data: "type_defs.OidcMemberDefinitionTypeDef" = dataclasses.field()

    Groups = field("Groups")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.OidcMemberDefinitionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OidcMemberDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OnlineStoreSecurityConfig:
    boto3_raw_data: "type_defs.OnlineStoreSecurityConfigTypeDef" = dataclasses.field()

    KmsKeyId = field("KmsKeyId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.OnlineStoreSecurityConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OnlineStoreSecurityConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TtlDuration:
    boto3_raw_data: "type_defs.TtlDurationTypeDef" = dataclasses.field()

    Unit = field("Unit")
    Value = field("Value")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TtlDurationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TtlDurationTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OptimizationModelAccessConfig:
    boto3_raw_data: "type_defs.OptimizationModelAccessConfigTypeDef" = (
        dataclasses.field()
    )

    AcceptEula = field("AcceptEula")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.OptimizationModelAccessConfigTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OptimizationModelAccessConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OptimizationVpcConfig:
    boto3_raw_data: "type_defs.OptimizationVpcConfigTypeDef" = dataclasses.field()

    SecurityGroupIds = field("SecurityGroupIds")
    Subnets = field("Subnets")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.OptimizationVpcConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OptimizationVpcConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TargetPlatform:
    boto3_raw_data: "type_defs.TargetPlatformTypeDef" = dataclasses.field()

    Os = field("Os")
    Arch = field("Arch")
    Accelerator = field("Accelerator")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TargetPlatformTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TargetPlatformTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OwnershipSettingsSummary:
    boto3_raw_data: "type_defs.OwnershipSettingsSummaryTypeDef" = dataclasses.field()

    OwnerUserProfileName = field("OwnerUserProfileName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.OwnershipSettingsSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OwnershipSettingsSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Parent:
    boto3_raw_data: "type_defs.ParentTypeDef" = dataclasses.field()

    TrialName = field("TrialName")
    ExperimentName = field("ExperimentName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ParentTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ParentTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PartnerAppConfig:
    boto3_raw_data: "type_defs.PartnerAppConfigTypeDef" = dataclasses.field()

    AdminUsers = field("AdminUsers")
    Arguments = field("Arguments")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PartnerAppConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PartnerAppConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProductionVariantManagedInstanceScaling:
    boto3_raw_data: "type_defs.ProductionVariantManagedInstanceScalingTypeDef" = (
        dataclasses.field()
    )

    Status = field("Status")
    MinInstanceCount = field("MinInstanceCount")
    MaxInstanceCount = field("MaxInstanceCount")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ProductionVariantManagedInstanceScalingTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProductionVariantManagedInstanceScalingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProductionVariantRoutingConfig:
    boto3_raw_data: "type_defs.ProductionVariantRoutingConfigTypeDef" = (
        dataclasses.field()
    )

    RoutingStrategy = field("RoutingStrategy")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ProductionVariantRoutingConfigTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProductionVariantRoutingConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProductionVariantStatus:
    boto3_raw_data: "type_defs.ProductionVariantStatusTypeDef" = dataclasses.field()

    Status = field("Status")
    StatusMessage = field("StatusMessage")
    StartTime = field("StartTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProductionVariantStatusTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProductionVariantStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Phase:
    boto3_raw_data: "type_defs.PhaseTypeDef" = dataclasses.field()

    InitialNumberOfUsers = field("InitialNumberOfUsers")
    SpawnRate = field("SpawnRate")
    DurationInSeconds = field("DurationInSeconds")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PhaseTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PhaseTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProcessingJobStepMetadata:
    boto3_raw_data: "type_defs.ProcessingJobStepMetadataTypeDef" = dataclasses.field()

    Arn = field("Arn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProcessingJobStepMetadataTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProcessingJobStepMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class QualityCheckStepMetadata:
    boto3_raw_data: "type_defs.QualityCheckStepMetadataTypeDef" = dataclasses.field()

    CheckType = field("CheckType")
    BaselineUsedForDriftCheckStatistics = field("BaselineUsedForDriftCheckStatistics")
    BaselineUsedForDriftCheckConstraints = field("BaselineUsedForDriftCheckConstraints")
    CalculatedBaselineStatistics = field("CalculatedBaselineStatistics")
    CalculatedBaselineConstraints = field("CalculatedBaselineConstraints")
    ModelPackageGroupName = field("ModelPackageGroupName")
    ViolationReport = field("ViolationReport")
    CheckJobArn = field("CheckJobArn")
    SkipCheck = field("SkipCheck")
    RegisterNewBaseline = field("RegisterNewBaseline")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.QualityCheckStepMetadataTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.QualityCheckStepMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RegisterModelStepMetadata:
    boto3_raw_data: "type_defs.RegisterModelStepMetadataTypeDef" = dataclasses.field()

    Arn = field("Arn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RegisterModelStepMetadataTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RegisterModelStepMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrainingJobStepMetadata:
    boto3_raw_data: "type_defs.TrainingJobStepMetadataTypeDef" = dataclasses.field()

    Arn = field("Arn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrainingJobStepMetadataTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrainingJobStepMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransformJobStepMetadata:
    boto3_raw_data: "type_defs.TransformJobStepMetadataTypeDef" = dataclasses.field()

    Arn = field("Arn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TransformJobStepMetadataTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransformJobStepMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TuningJobStepMetaData:
    boto3_raw_data: "type_defs.TuningJobStepMetaDataTypeDef" = dataclasses.field()

    Arn = field("Arn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TuningJobStepMetaDataTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TuningJobStepMetaDataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SelectiveExecutionResult:
    boto3_raw_data: "type_defs.SelectiveExecutionResultTypeDef" = dataclasses.field()

    SourcePipelineExecutionArn = field("SourcePipelineExecutionArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SelectiveExecutionResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SelectiveExecutionResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PriorityClass:
    boto3_raw_data: "type_defs.PriorityClassTypeDef" = dataclasses.field()

    Name = field("Name")
    Weight = field("Weight")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PriorityClassTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PriorityClassTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProcessingClusterConfig:
    boto3_raw_data: "type_defs.ProcessingClusterConfigTypeDef" = dataclasses.field()

    InstanceCount = field("InstanceCount")
    InstanceType = field("InstanceType")
    VolumeSizeInGB = field("VolumeSizeInGB")
    VolumeKmsKeyId = field("VolumeKmsKeyId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProcessingClusterConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProcessingClusterConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProcessingFeatureStoreOutput:
    boto3_raw_data: "type_defs.ProcessingFeatureStoreOutputTypeDef" = (
        dataclasses.field()
    )

    FeatureGroupName = field("FeatureGroupName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProcessingFeatureStoreOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProcessingFeatureStoreOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProcessingS3Input:
    boto3_raw_data: "type_defs.ProcessingS3InputTypeDef" = dataclasses.field()

    S3Uri = field("S3Uri")
    S3DataType = field("S3DataType")
    LocalPath = field("LocalPath")
    S3InputMode = field("S3InputMode")
    S3DataDistributionType = field("S3DataDistributionType")
    S3CompressionType = field("S3CompressionType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ProcessingS3InputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProcessingS3InputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProcessingS3Output:
    boto3_raw_data: "type_defs.ProcessingS3OutputTypeDef" = dataclasses.field()

    S3Uri = field("S3Uri")
    S3UploadMode = field("S3UploadMode")
    LocalPath = field("LocalPath")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProcessingS3OutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProcessingS3OutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProductionVariantCapacityReservationConfig:
    boto3_raw_data: "type_defs.ProductionVariantCapacityReservationConfigTypeDef" = (
        dataclasses.field()
    )

    CapacityReservationPreference = field("CapacityReservationPreference")
    MlReservationArn = field("MlReservationArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ProductionVariantCapacityReservationConfigTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProductionVariantCapacityReservationConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProductionVariantCoreDumpConfig:
    boto3_raw_data: "type_defs.ProductionVariantCoreDumpConfigTypeDef" = (
        dataclasses.field()
    )

    DestinationS3Uri = field("DestinationS3Uri")
    KmsKeyId = field("KmsKeyId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ProductionVariantCoreDumpConfigTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProductionVariantCoreDumpConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProfilerConfigForUpdate:
    boto3_raw_data: "type_defs.ProfilerConfigForUpdateTypeDef" = dataclasses.field()

    S3OutputPath = field("S3OutputPath")
    ProfilingIntervalInMilliseconds = field("ProfilingIntervalInMilliseconds")
    ProfilingParameters = field("ProfilingParameters")
    DisableProfiler = field("DisableProfiler")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProfilerConfigForUpdateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProfilerConfigForUpdateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProfilerConfig:
    boto3_raw_data: "type_defs.ProfilerConfigTypeDef" = dataclasses.field()

    S3OutputPath = field("S3OutputPath")
    ProfilingIntervalInMilliseconds = field("ProfilingIntervalInMilliseconds")
    ProfilingParameters = field("ProfilingParameters")
    DisableProfiler = field("DisableProfiler")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ProfilerConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ProfilerConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProfilerRuleConfiguration:
    boto3_raw_data: "type_defs.ProfilerRuleConfigurationTypeDef" = dataclasses.field()

    RuleConfigurationName = field("RuleConfigurationName")
    RuleEvaluatorImage = field("RuleEvaluatorImage")
    LocalPath = field("LocalPath")
    S3OutputPath = field("S3OutputPath")
    InstanceType = field("InstanceType")
    VolumeSizeInGB = field("VolumeSizeInGB")
    RuleParameters = field("RuleParameters")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProfilerRuleConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProfilerRuleConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PropertyNameQuery:
    boto3_raw_data: "type_defs.PropertyNameQueryTypeDef" = dataclasses.field()

    PropertyNameHint = field("PropertyNameHint")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PropertyNameQueryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PropertyNameQueryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProvisioningParameter:
    boto3_raw_data: "type_defs.ProvisioningParameterTypeDef" = dataclasses.field()

    Key = field("Key")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProvisioningParameterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProvisioningParameterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class USD:
    boto3_raw_data: "type_defs.USDTypeDef" = dataclasses.field()

    Dollars = field("Dollars")
    Cents = field("Cents")
    TenthFractionsOfACent = field("TenthFractionsOfACent")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.USDTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.USDTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PutModelPackageGroupPolicyInput:
    boto3_raw_data: "type_defs.PutModelPackageGroupPolicyInputTypeDef" = (
        dataclasses.field()
    )

    ModelPackageGroupName = field("ModelPackageGroupName")
    ResourcePolicy = field("ResourcePolicy")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.PutModelPackageGroupPolicyInputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PutModelPackageGroupPolicyInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Vertex:
    boto3_raw_data: "type_defs.VertexTypeDef" = dataclasses.field()

    Arn = field("Arn")
    Type = field("Type")
    LineageType = field("LineageType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VertexTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VertexTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RStudioServerProAppSettings:
    boto3_raw_data: "type_defs.RStudioServerProAppSettingsTypeDef" = dataclasses.field()

    AccessStatus = field("AccessStatus")
    UserGroup = field("UserGroup")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RStudioServerProAppSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RStudioServerProAppSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RecommendationJobCompiledOutputConfig:
    boto3_raw_data: "type_defs.RecommendationJobCompiledOutputConfigTypeDef" = (
        dataclasses.field()
    )

    S3OutputUri = field("S3OutputUri")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RecommendationJobCompiledOutputConfigTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RecommendationJobCompiledOutputConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RecommendationJobPayloadConfigOutput:
    boto3_raw_data: "type_defs.RecommendationJobPayloadConfigOutputTypeDef" = (
        dataclasses.field()
    )

    SamplePayloadUrl = field("SamplePayloadUrl")
    SupportedContentTypes = field("SupportedContentTypes")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RecommendationJobPayloadConfigOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RecommendationJobPayloadConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RecommendationJobPayloadConfig:
    boto3_raw_data: "type_defs.RecommendationJobPayloadConfigTypeDef" = (
        dataclasses.field()
    )

    SamplePayloadUrl = field("SamplePayloadUrl")
    SupportedContentTypes = field("SupportedContentTypes")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RecommendationJobPayloadConfigTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RecommendationJobPayloadConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RecommendationJobResourceLimit:
    boto3_raw_data: "type_defs.RecommendationJobResourceLimitTypeDef" = (
        dataclasses.field()
    )

    MaxNumberOfTests = field("MaxNumberOfTests")
    MaxParallelOfTests = field("MaxParallelOfTests")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RecommendationJobResourceLimitTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RecommendationJobResourceLimitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RecommendationJobVpcConfigOutput:
    boto3_raw_data: "type_defs.RecommendationJobVpcConfigOutputTypeDef" = (
        dataclasses.field()
    )

    SecurityGroupIds = field("SecurityGroupIds")
    Subnets = field("Subnets")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RecommendationJobVpcConfigOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RecommendationJobVpcConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RecommendationJobVpcConfig:
    boto3_raw_data: "type_defs.RecommendationJobVpcConfigTypeDef" = dataclasses.field()

    SecurityGroupIds = field("SecurityGroupIds")
    Subnets = field("Subnets")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RecommendationJobVpcConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RecommendationJobVpcConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RemoteDebugConfigForUpdate:
    boto3_raw_data: "type_defs.RemoteDebugConfigForUpdateTypeDef" = dataclasses.field()

    EnableRemoteDebug = field("EnableRemoteDebug")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RemoteDebugConfigForUpdateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RemoteDebugConfigForUpdateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RenderableTask:
    boto3_raw_data: "type_defs.RenderableTaskTypeDef" = dataclasses.field()

    Input = field("Input")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RenderableTaskTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.RenderableTaskTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RenderingError:
    boto3_raw_data: "type_defs.RenderingErrorTypeDef" = dataclasses.field()

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RenderingErrorTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.RenderingErrorTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReservedCapacityOffering:
    boto3_raw_data: "type_defs.ReservedCapacityOfferingTypeDef" = dataclasses.field()

    InstanceType = field("InstanceType")
    InstanceCount = field("InstanceCount")
    ReservedCapacityType = field("ReservedCapacityType")
    UltraServerType = field("UltraServerType")
    UltraServerCount = field("UltraServerCount")
    AvailabilityZone = field("AvailabilityZone")
    DurationHours = field("DurationHours")
    DurationMinutes = field("DurationMinutes")
    StartTime = field("StartTime")
    EndTime = field("EndTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ReservedCapacityOfferingTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReservedCapacityOfferingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourceConfigForUpdate:
    boto3_raw_data: "type_defs.ResourceConfigForUpdateTypeDef" = dataclasses.field()

    KeepAlivePeriodInSeconds = field("KeepAlivePeriodInSeconds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ResourceConfigForUpdateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResourceConfigForUpdateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VisibilityConditions:
    boto3_raw_data: "type_defs.VisibilityConditionsTypeDef" = dataclasses.field()

    Key = field("Key")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VisibilityConditionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VisibilityConditionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TotalHits:
    boto3_raw_data: "type_defs.TotalHitsTypeDef" = dataclasses.field()

    Value = field("Value")
    Relation = field("Relation")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TotalHitsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TotalHitsTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SelectedStep:
    boto3_raw_data: "type_defs.SelectedStepTypeDef" = dataclasses.field()

    StepName = field("StepName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SelectedStepTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SelectedStepTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SendPipelineExecutionStepFailureRequest:
    boto3_raw_data: "type_defs.SendPipelineExecutionStepFailureRequestTypeDef" = (
        dataclasses.field()
    )

    CallbackToken = field("CallbackToken")
    FailureReason = field("FailureReason")
    ClientRequestToken = field("ClientRequestToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SendPipelineExecutionStepFailureRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SendPipelineExecutionStepFailureRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ShadowModelVariantConfig:
    boto3_raw_data: "type_defs.ShadowModelVariantConfigTypeDef" = dataclasses.field()

    ShadowModelVariantName = field("ShadowModelVariantName")
    SamplingPercentage = field("SamplingPercentage")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ShadowModelVariantConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ShadowModelVariantConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SharingSettings:
    boto3_raw_data: "type_defs.SharingSettingsTypeDef" = dataclasses.field()

    NotebookOutputOption = field("NotebookOutputOption")
    S3OutputPath = field("S3OutputPath")
    S3KmsKeyId = field("S3KmsKeyId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SharingSettingsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SharingSettingsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SourceIpConfigOutput:
    boto3_raw_data: "type_defs.SourceIpConfigOutputTypeDef" = dataclasses.field()

    Cidrs = field("Cidrs")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SourceIpConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SourceIpConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SourceIpConfig:
    boto3_raw_data: "type_defs.SourceIpConfigTypeDef" = dataclasses.field()

    Cidrs = field("Cidrs")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SourceIpConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SourceIpConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpaceIdleSettings:
    boto3_raw_data: "type_defs.SpaceIdleSettingsTypeDef" = dataclasses.field()

    IdleTimeoutInMinutes = field("IdleTimeoutInMinutes")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SpaceIdleSettingsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpaceIdleSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpaceSharingSettingsSummary:
    boto3_raw_data: "type_defs.SpaceSharingSettingsSummaryTypeDef" = dataclasses.field()

    SharingType = field("SharingType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SpaceSharingSettingsSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpaceSharingSettingsSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Stairs:
    boto3_raw_data: "type_defs.StairsTypeDef" = dataclasses.field()

    DurationInSeconds = field("DurationInSeconds")
    NumberOfSteps = field("NumberOfSteps")
    UsersPerStep = field("UsersPerStep")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.StairsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.StairsTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartEdgeDeploymentStageRequest:
    boto3_raw_data: "type_defs.StartEdgeDeploymentStageRequestTypeDef" = (
        dataclasses.field()
    )

    EdgeDeploymentPlanName = field("EdgeDeploymentPlanName")
    StageName = field("StageName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.StartEdgeDeploymentStageRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartEdgeDeploymentStageRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartInferenceExperimentRequest:
    boto3_raw_data: "type_defs.StartInferenceExperimentRequestTypeDef" = (
        dataclasses.field()
    )

    Name = field("Name")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.StartInferenceExperimentRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartInferenceExperimentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartMlflowTrackingServerRequest:
    boto3_raw_data: "type_defs.StartMlflowTrackingServerRequestTypeDef" = (
        dataclasses.field()
    )

    TrackingServerName = field("TrackingServerName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.StartMlflowTrackingServerRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartMlflowTrackingServerRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartMonitoringScheduleRequest:
    boto3_raw_data: "type_defs.StartMonitoringScheduleRequestTypeDef" = (
        dataclasses.field()
    )

    MonitoringScheduleName = field("MonitoringScheduleName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.StartMonitoringScheduleRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartMonitoringScheduleRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartNotebookInstanceInput:
    boto3_raw_data: "type_defs.StartNotebookInstanceInputTypeDef" = dataclasses.field()

    NotebookInstanceName = field("NotebookInstanceName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StartNotebookInstanceInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartNotebookInstanceInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartSessionRequest:
    boto3_raw_data: "type_defs.StartSessionRequestTypeDef" = dataclasses.field()

    ResourceIdentifier = field("ResourceIdentifier")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StartSessionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartSessionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StopAutoMLJobRequest:
    boto3_raw_data: "type_defs.StopAutoMLJobRequestTypeDef" = dataclasses.field()

    AutoMLJobName = field("AutoMLJobName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StopAutoMLJobRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StopAutoMLJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StopCompilationJobRequest:
    boto3_raw_data: "type_defs.StopCompilationJobRequestTypeDef" = dataclasses.field()

    CompilationJobName = field("CompilationJobName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StopCompilationJobRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StopCompilationJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StopEdgeDeploymentStageRequest:
    boto3_raw_data: "type_defs.StopEdgeDeploymentStageRequestTypeDef" = (
        dataclasses.field()
    )

    EdgeDeploymentPlanName = field("EdgeDeploymentPlanName")
    StageName = field("StageName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.StopEdgeDeploymentStageRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StopEdgeDeploymentStageRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StopEdgePackagingJobRequest:
    boto3_raw_data: "type_defs.StopEdgePackagingJobRequestTypeDef" = dataclasses.field()

    EdgePackagingJobName = field("EdgePackagingJobName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StopEdgePackagingJobRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StopEdgePackagingJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StopHyperParameterTuningJobRequest:
    boto3_raw_data: "type_defs.StopHyperParameterTuningJobRequestTypeDef" = (
        dataclasses.field()
    )

    HyperParameterTuningJobName = field("HyperParameterTuningJobName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StopHyperParameterTuningJobRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StopHyperParameterTuningJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StopInferenceRecommendationsJobRequest:
    boto3_raw_data: "type_defs.StopInferenceRecommendationsJobRequestTypeDef" = (
        dataclasses.field()
    )

    JobName = field("JobName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StopInferenceRecommendationsJobRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StopInferenceRecommendationsJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StopLabelingJobRequest:
    boto3_raw_data: "type_defs.StopLabelingJobRequestTypeDef" = dataclasses.field()

    LabelingJobName = field("LabelingJobName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StopLabelingJobRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StopLabelingJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StopMlflowTrackingServerRequest:
    boto3_raw_data: "type_defs.StopMlflowTrackingServerRequestTypeDef" = (
        dataclasses.field()
    )

    TrackingServerName = field("TrackingServerName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.StopMlflowTrackingServerRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StopMlflowTrackingServerRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StopMonitoringScheduleRequest:
    boto3_raw_data: "type_defs.StopMonitoringScheduleRequestTypeDef" = (
        dataclasses.field()
    )

    MonitoringScheduleName = field("MonitoringScheduleName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.StopMonitoringScheduleRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StopMonitoringScheduleRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StopNotebookInstanceInput:
    boto3_raw_data: "type_defs.StopNotebookInstanceInputTypeDef" = dataclasses.field()

    NotebookInstanceName = field("NotebookInstanceName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StopNotebookInstanceInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StopNotebookInstanceInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StopOptimizationJobRequest:
    boto3_raw_data: "type_defs.StopOptimizationJobRequestTypeDef" = dataclasses.field()

    OptimizationJobName = field("OptimizationJobName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StopOptimizationJobRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StopOptimizationJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StopPipelineExecutionRequest:
    boto3_raw_data: "type_defs.StopPipelineExecutionRequestTypeDef" = (
        dataclasses.field()
    )

    PipelineExecutionArn = field("PipelineExecutionArn")
    ClientRequestToken = field("ClientRequestToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StopPipelineExecutionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StopPipelineExecutionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StopProcessingJobRequest:
    boto3_raw_data: "type_defs.StopProcessingJobRequestTypeDef" = dataclasses.field()

    ProcessingJobName = field("ProcessingJobName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StopProcessingJobRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StopProcessingJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StopTrainingJobRequest:
    boto3_raw_data: "type_defs.StopTrainingJobRequestTypeDef" = dataclasses.field()

    TrainingJobName = field("TrainingJobName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StopTrainingJobRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StopTrainingJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StopTransformJobRequest:
    boto3_raw_data: "type_defs.StopTransformJobRequestTypeDef" = dataclasses.field()

    TransformJobName = field("TransformJobName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StopTransformJobRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StopTransformJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ThroughputConfigUpdate:
    boto3_raw_data: "type_defs.ThroughputConfigUpdateTypeDef" = dataclasses.field()

    ThroughputMode = field("ThroughputMode")
    ProvisionedReadCapacityUnits = field("ProvisionedReadCapacityUnits")
    ProvisionedWriteCapacityUnits = field("ProvisionedWriteCapacityUnits")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ThroughputConfigUpdateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ThroughputConfigUpdateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TimeSeriesConfigOutput:
    boto3_raw_data: "type_defs.TimeSeriesConfigOutputTypeDef" = dataclasses.field()

    TargetAttributeName = field("TargetAttributeName")
    TimestampAttributeName = field("TimestampAttributeName")
    ItemIdentifierAttributeName = field("ItemIdentifierAttributeName")
    GroupingAttributeNames = field("GroupingAttributeNames")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TimeSeriesConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TimeSeriesConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TimeSeriesConfig:
    boto3_raw_data: "type_defs.TimeSeriesConfigTypeDef" = dataclasses.field()

    TargetAttributeName = field("TargetAttributeName")
    TimestampAttributeName = field("TimestampAttributeName")
    ItemIdentifierAttributeName = field("ItemIdentifierAttributeName")
    GroupingAttributeNames = field("GroupingAttributeNames")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TimeSeriesConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TimeSeriesConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TimeSeriesTransformationsOutput:
    boto3_raw_data: "type_defs.TimeSeriesTransformationsOutputTypeDef" = (
        dataclasses.field()
    )

    Filling = field("Filling")
    Aggregation = field("Aggregation")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.TimeSeriesTransformationsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TimeSeriesTransformationsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TimeSeriesTransformations:
    boto3_raw_data: "type_defs.TimeSeriesTransformationsTypeDef" = dataclasses.field()

    Filling = field("Filling")
    Aggregation = field("Aggregation")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TimeSeriesTransformationsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TimeSeriesTransformationsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrainingRepositoryAuthConfig:
    boto3_raw_data: "type_defs.TrainingRepositoryAuthConfigTypeDef" = (
        dataclasses.field()
    )

    TrainingRepositoryCredentialsProviderArn = field(
        "TrainingRepositoryCredentialsProviderArn"
    )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrainingRepositoryAuthConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrainingRepositoryAuthConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransformS3DataSource:
    boto3_raw_data: "type_defs.TransformS3DataSourceTypeDef" = dataclasses.field()

    S3DataType = field("S3DataType")
    S3Uri = field("S3Uri")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TransformS3DataSourceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransformS3DataSourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateActionRequest:
    boto3_raw_data: "type_defs.UpdateActionRequestTypeDef" = dataclasses.field()

    ActionName = field("ActionName")
    Description = field("Description")
    Status = field("Status")
    Properties = field("Properties")
    PropertiesToRemove = field("PropertiesToRemove")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateActionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateActionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateArtifactRequest:
    boto3_raw_data: "type_defs.UpdateArtifactRequestTypeDef" = dataclasses.field()

    ArtifactArn = field("ArtifactArn")
    ArtifactName = field("ArtifactName")
    Properties = field("Properties")
    PropertiesToRemove = field("PropertiesToRemove")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateArtifactRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateArtifactRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateClusterSoftwareInstanceGroupSpecification:
    boto3_raw_data: (
        "type_defs.UpdateClusterSoftwareInstanceGroupSpecificationTypeDef"
    ) = dataclasses.field()

    InstanceGroupName = field("InstanceGroupName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateClusterSoftwareInstanceGroupSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.UpdateClusterSoftwareInstanceGroupSpecificationTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateContextRequest:
    boto3_raw_data: "type_defs.UpdateContextRequestTypeDef" = dataclasses.field()

    ContextName = field("ContextName")
    Description = field("Description")
    Properties = field("Properties")
    PropertiesToRemove = field("PropertiesToRemove")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateContextRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateContextRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VariantProperty:
    boto3_raw_data: "type_defs.VariantPropertyTypeDef" = dataclasses.field()

    VariantPropertyType = field("VariantPropertyType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VariantPropertyTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VariantPropertyTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateExperimentRequest:
    boto3_raw_data: "type_defs.UpdateExperimentRequestTypeDef" = dataclasses.field()

    ExperimentName = field("ExperimentName")
    DisplayName = field("DisplayName")
    Description = field("Description")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateExperimentRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateExperimentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateHubContentReferenceRequest:
    boto3_raw_data: "type_defs.UpdateHubContentReferenceRequestTypeDef" = (
        dataclasses.field()
    )

    HubName = field("HubName")
    HubContentName = field("HubContentName")
    HubContentType = field("HubContentType")
    MinVersion = field("MinVersion")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateHubContentReferenceRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateHubContentReferenceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateHubContentRequest:
    boto3_raw_data: "type_defs.UpdateHubContentRequestTypeDef" = dataclasses.field()

    HubName = field("HubName")
    HubContentName = field("HubContentName")
    HubContentType = field("HubContentType")
    HubContentVersion = field("HubContentVersion")
    HubContentDisplayName = field("HubContentDisplayName")
    HubContentDescription = field("HubContentDescription")
    HubContentMarkdown = field("HubContentMarkdown")
    HubContentSearchKeywords = field("HubContentSearchKeywords")
    SupportStatus = field("SupportStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateHubContentRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateHubContentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateHubRequest:
    boto3_raw_data: "type_defs.UpdateHubRequestTypeDef" = dataclasses.field()

    HubName = field("HubName")
    HubDescription = field("HubDescription")
    HubDisplayName = field("HubDisplayName")
    HubSearchKeywords = field("HubSearchKeywords")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.UpdateHubRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateHubRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateImageRequest:
    boto3_raw_data: "type_defs.UpdateImageRequestTypeDef" = dataclasses.field()

    ImageName = field("ImageName")
    DeleteProperties = field("DeleteProperties")
    Description = field("Description")
    DisplayName = field("DisplayName")
    RoleArn = field("RoleArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateImageRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateImageRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateImageVersionRequest:
    boto3_raw_data: "type_defs.UpdateImageVersionRequestTypeDef" = dataclasses.field()

    ImageName = field("ImageName")
    Alias = field("Alias")
    Version = field("Version")
    AliasesToAdd = field("AliasesToAdd")
    AliasesToDelete = field("AliasesToDelete")
    VendorGuidance = field("VendorGuidance")
    JobType = field("JobType")
    MLFramework = field("MLFramework")
    ProgrammingLang = field("ProgrammingLang")
    Processor = field("Processor")
    Horovod = field("Horovod")
    ReleaseNotes = field("ReleaseNotes")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateImageVersionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateImageVersionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateMlflowTrackingServerRequest:
    boto3_raw_data: "type_defs.UpdateMlflowTrackingServerRequestTypeDef" = (
        dataclasses.field()
    )

    TrackingServerName = field("TrackingServerName")
    ArtifactStoreUri = field("ArtifactStoreUri")
    TrackingServerSize = field("TrackingServerSize")
    AutomaticModelRegistration = field("AutomaticModelRegistration")
    WeeklyMaintenanceWindowStart = field("WeeklyMaintenanceWindowStart")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateMlflowTrackingServerRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateMlflowTrackingServerRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateModelCardRequest:
    boto3_raw_data: "type_defs.UpdateModelCardRequestTypeDef" = dataclasses.field()

    ModelCardName = field("ModelCardName")
    Content = field("Content")
    ModelCardStatus = field("ModelCardStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateModelCardRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateModelCardRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateMonitoringAlertRequest:
    boto3_raw_data: "type_defs.UpdateMonitoringAlertRequestTypeDef" = (
        dataclasses.field()
    )

    MonitoringScheduleName = field("MonitoringScheduleName")
    MonitoringAlertName = field("MonitoringAlertName")
    DatapointsToAlert = field("DatapointsToAlert")
    EvaluationPeriod = field("EvaluationPeriod")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateMonitoringAlertRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateMonitoringAlertRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdatePipelineVersionRequest:
    boto3_raw_data: "type_defs.UpdatePipelineVersionRequestTypeDef" = (
        dataclasses.field()
    )

    PipelineArn = field("PipelineArn")
    PipelineVersionId = field("PipelineVersionId")
    PipelineVersionDisplayName = field("PipelineVersionDisplayName")
    PipelineVersionDescription = field("PipelineVersionDescription")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdatePipelineVersionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdatePipelineVersionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateTrialRequest:
    boto3_raw_data: "type_defs.UpdateTrialRequestTypeDef" = dataclasses.field()

    TrialName = field("TrialName")
    DisplayName = field("DisplayName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateTrialRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateTrialRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WorkforceVpcConfigResponse:
    boto3_raw_data: "type_defs.WorkforceVpcConfigResponseTypeDef" = dataclasses.field()

    VpcId = field("VpcId")
    SecurityGroupIds = field("SecurityGroupIds")
    Subnets = field("Subnets")
    VpcEndpointId = field("VpcEndpointId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.WorkforceVpcConfigResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WorkforceVpcConfigResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ActionSummary:
    boto3_raw_data: "type_defs.ActionSummaryTypeDef" = dataclasses.field()

    ActionArn = field("ActionArn")
    ActionName = field("ActionName")

    @cached_property
    def Source(self):  # pragma: no cover
        return ActionSource.make_one(self.boto3_raw_data["Source"])

    ActionType = field("ActionType")
    Status = field("Status")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ActionSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ActionSummaryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AddAssociationResponse:
    boto3_raw_data: "type_defs.AddAssociationResponseTypeDef" = dataclasses.field()

    SourceArn = field("SourceArn")
    DestinationArn = field("DestinationArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AddAssociationResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AddAssociationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociateTrialComponentResponse:
    boto3_raw_data: "type_defs.AssociateTrialComponentResponseTypeDef" = (
        dataclasses.field()
    )

    TrialComponentArn = field("TrialComponentArn")
    TrialArn = field("TrialArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AssociateTrialComponentResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociateTrialComponentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttachClusterNodeVolumeResponse:
    boto3_raw_data: "type_defs.AttachClusterNodeVolumeResponseTypeDef" = (
        dataclasses.field()
    )

    ClusterArn = field("ClusterArn")
    NodeId = field("NodeId")
    VolumeId = field("VolumeId")
    AttachTime = field("AttachTime")
    Status = field("Status")
    DeviceName = field("DeviceName")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AttachClusterNodeVolumeResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AttachClusterNodeVolumeResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateActionResponse:
    boto3_raw_data: "type_defs.CreateActionResponseTypeDef" = dataclasses.field()

    ActionArn = field("ActionArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateActionResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateActionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateAlgorithmOutput:
    boto3_raw_data: "type_defs.CreateAlgorithmOutputTypeDef" = dataclasses.field()

    AlgorithmArn = field("AlgorithmArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateAlgorithmOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateAlgorithmOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateAppImageConfigResponse:
    boto3_raw_data: "type_defs.CreateAppImageConfigResponseTypeDef" = (
        dataclasses.field()
    )

    AppImageConfigArn = field("AppImageConfigArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateAppImageConfigResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateAppImageConfigResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateAppResponse:
    boto3_raw_data: "type_defs.CreateAppResponseTypeDef" = dataclasses.field()

    AppArn = field("AppArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CreateAppResponseTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateAppResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateArtifactResponse:
    boto3_raw_data: "type_defs.CreateArtifactResponseTypeDef" = dataclasses.field()

    ArtifactArn = field("ArtifactArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateArtifactResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateArtifactResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateAutoMLJobResponse:
    boto3_raw_data: "type_defs.CreateAutoMLJobResponseTypeDef" = dataclasses.field()

    AutoMLJobArn = field("AutoMLJobArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateAutoMLJobResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateAutoMLJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateAutoMLJobV2Response:
    boto3_raw_data: "type_defs.CreateAutoMLJobV2ResponseTypeDef" = dataclasses.field()

    AutoMLJobArn = field("AutoMLJobArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateAutoMLJobV2ResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateAutoMLJobV2ResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateClusterResponse:
    boto3_raw_data: "type_defs.CreateClusterResponseTypeDef" = dataclasses.field()

    ClusterArn = field("ClusterArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateClusterResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateClusterResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateClusterSchedulerConfigResponse:
    boto3_raw_data: "type_defs.CreateClusterSchedulerConfigResponseTypeDef" = (
        dataclasses.field()
    )

    ClusterSchedulerConfigArn = field("ClusterSchedulerConfigArn")
    ClusterSchedulerConfigId = field("ClusterSchedulerConfigId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateClusterSchedulerConfigResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateClusterSchedulerConfigResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateCodeRepositoryOutput:
    boto3_raw_data: "type_defs.CreateCodeRepositoryOutputTypeDef" = dataclasses.field()

    CodeRepositoryArn = field("CodeRepositoryArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateCodeRepositoryOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateCodeRepositoryOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateCompilationJobResponse:
    boto3_raw_data: "type_defs.CreateCompilationJobResponseTypeDef" = (
        dataclasses.field()
    )

    CompilationJobArn = field("CompilationJobArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateCompilationJobResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateCompilationJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateComputeQuotaResponse:
    boto3_raw_data: "type_defs.CreateComputeQuotaResponseTypeDef" = dataclasses.field()

    ComputeQuotaArn = field("ComputeQuotaArn")
    ComputeQuotaId = field("ComputeQuotaId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateComputeQuotaResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateComputeQuotaResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateContextResponse:
    boto3_raw_data: "type_defs.CreateContextResponseTypeDef" = dataclasses.field()

    ContextArn = field("ContextArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateContextResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateContextResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateDataQualityJobDefinitionResponse:
    boto3_raw_data: "type_defs.CreateDataQualityJobDefinitionResponseTypeDef" = (
        dataclasses.field()
    )

    JobDefinitionArn = field("JobDefinitionArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateDataQualityJobDefinitionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateDataQualityJobDefinitionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateDomainResponse:
    boto3_raw_data: "type_defs.CreateDomainResponseTypeDef" = dataclasses.field()

    DomainArn = field("DomainArn")
    DomainId = field("DomainId")
    Url = field("Url")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateDomainResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateDomainResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateEdgeDeploymentPlanResponse:
    boto3_raw_data: "type_defs.CreateEdgeDeploymentPlanResponseTypeDef" = (
        dataclasses.field()
    )

    EdgeDeploymentPlanArn = field("EdgeDeploymentPlanArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateEdgeDeploymentPlanResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateEdgeDeploymentPlanResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateEndpointConfigOutput:
    boto3_raw_data: "type_defs.CreateEndpointConfigOutputTypeDef" = dataclasses.field()

    EndpointConfigArn = field("EndpointConfigArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateEndpointConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateEndpointConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateEndpointOutput:
    boto3_raw_data: "type_defs.CreateEndpointOutputTypeDef" = dataclasses.field()

    EndpointArn = field("EndpointArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateEndpointOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateEndpointOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateExperimentResponse:
    boto3_raw_data: "type_defs.CreateExperimentResponseTypeDef" = dataclasses.field()

    ExperimentArn = field("ExperimentArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateExperimentResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateExperimentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateFeatureGroupResponse:
    boto3_raw_data: "type_defs.CreateFeatureGroupResponseTypeDef" = dataclasses.field()

    FeatureGroupArn = field("FeatureGroupArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateFeatureGroupResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateFeatureGroupResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateFlowDefinitionResponse:
    boto3_raw_data: "type_defs.CreateFlowDefinitionResponseTypeDef" = (
        dataclasses.field()
    )

    FlowDefinitionArn = field("FlowDefinitionArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateFlowDefinitionResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateFlowDefinitionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateHubContentReferenceResponse:
    boto3_raw_data: "type_defs.CreateHubContentReferenceResponseTypeDef" = (
        dataclasses.field()
    )

    HubArn = field("HubArn")
    HubContentArn = field("HubContentArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateHubContentReferenceResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateHubContentReferenceResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateHubResponse:
    boto3_raw_data: "type_defs.CreateHubResponseTypeDef" = dataclasses.field()

    HubArn = field("HubArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CreateHubResponseTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateHubResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateHumanTaskUiResponse:
    boto3_raw_data: "type_defs.CreateHumanTaskUiResponseTypeDef" = dataclasses.field()

    HumanTaskUiArn = field("HumanTaskUiArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateHumanTaskUiResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateHumanTaskUiResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateHyperParameterTuningJobResponse:
    boto3_raw_data: "type_defs.CreateHyperParameterTuningJobResponseTypeDef" = (
        dataclasses.field()
    )

    HyperParameterTuningJobArn = field("HyperParameterTuningJobArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateHyperParameterTuningJobResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateHyperParameterTuningJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateImageResponse:
    boto3_raw_data: "type_defs.CreateImageResponseTypeDef" = dataclasses.field()

    ImageArn = field("ImageArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateImageResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateImageResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateImageVersionResponse:
    boto3_raw_data: "type_defs.CreateImageVersionResponseTypeDef" = dataclasses.field()

    ImageVersionArn = field("ImageVersionArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateImageVersionResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateImageVersionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateInferenceComponentOutput:
    boto3_raw_data: "type_defs.CreateInferenceComponentOutputTypeDef" = (
        dataclasses.field()
    )

    InferenceComponentArn = field("InferenceComponentArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateInferenceComponentOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateInferenceComponentOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateInferenceExperimentResponse:
    boto3_raw_data: "type_defs.CreateInferenceExperimentResponseTypeDef" = (
        dataclasses.field()
    )

    InferenceExperimentArn = field("InferenceExperimentArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateInferenceExperimentResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateInferenceExperimentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateInferenceRecommendationsJobResponse:
    boto3_raw_data: "type_defs.CreateInferenceRecommendationsJobResponseTypeDef" = (
        dataclasses.field()
    )

    JobArn = field("JobArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateInferenceRecommendationsJobResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateInferenceRecommendationsJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateLabelingJobResponse:
    boto3_raw_data: "type_defs.CreateLabelingJobResponseTypeDef" = dataclasses.field()

    LabelingJobArn = field("LabelingJobArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateLabelingJobResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateLabelingJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateMlflowTrackingServerResponse:
    boto3_raw_data: "type_defs.CreateMlflowTrackingServerResponseTypeDef" = (
        dataclasses.field()
    )

    TrackingServerArn = field("TrackingServerArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateMlflowTrackingServerResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateMlflowTrackingServerResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateModelBiasJobDefinitionResponse:
    boto3_raw_data: "type_defs.CreateModelBiasJobDefinitionResponseTypeDef" = (
        dataclasses.field()
    )

    JobDefinitionArn = field("JobDefinitionArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateModelBiasJobDefinitionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateModelBiasJobDefinitionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateModelCardExportJobResponse:
    boto3_raw_data: "type_defs.CreateModelCardExportJobResponseTypeDef" = (
        dataclasses.field()
    )

    ModelCardExportJobArn = field("ModelCardExportJobArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateModelCardExportJobResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateModelCardExportJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateModelCardResponse:
    boto3_raw_data: "type_defs.CreateModelCardResponseTypeDef" = dataclasses.field()

    ModelCardArn = field("ModelCardArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateModelCardResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateModelCardResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateModelExplainabilityJobDefinitionResponse:
    boto3_raw_data: (
        "type_defs.CreateModelExplainabilityJobDefinitionResponseTypeDef"
    ) = dataclasses.field()

    JobDefinitionArn = field("JobDefinitionArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateModelExplainabilityJobDefinitionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreateModelExplainabilityJobDefinitionResponseTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateModelOutput:
    boto3_raw_data: "type_defs.CreateModelOutputTypeDef" = dataclasses.field()

    ModelArn = field("ModelArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CreateModelOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateModelOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateModelPackageGroupOutput:
    boto3_raw_data: "type_defs.CreateModelPackageGroupOutputTypeDef" = (
        dataclasses.field()
    )

    ModelPackageGroupArn = field("ModelPackageGroupArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateModelPackageGroupOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateModelPackageGroupOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateModelPackageOutput:
    boto3_raw_data: "type_defs.CreateModelPackageOutputTypeDef" = dataclasses.field()

    ModelPackageArn = field("ModelPackageArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateModelPackageOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateModelPackageOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateModelQualityJobDefinitionResponse:
    boto3_raw_data: "type_defs.CreateModelQualityJobDefinitionResponseTypeDef" = (
        dataclasses.field()
    )

    JobDefinitionArn = field("JobDefinitionArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateModelQualityJobDefinitionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateModelQualityJobDefinitionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateMonitoringScheduleResponse:
    boto3_raw_data: "type_defs.CreateMonitoringScheduleResponseTypeDef" = (
        dataclasses.field()
    )

    MonitoringScheduleArn = field("MonitoringScheduleArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateMonitoringScheduleResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateMonitoringScheduleResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateNotebookInstanceLifecycleConfigOutput:
    boto3_raw_data: "type_defs.CreateNotebookInstanceLifecycleConfigOutputTypeDef" = (
        dataclasses.field()
    )

    NotebookInstanceLifecycleConfigArn = field("NotebookInstanceLifecycleConfigArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateNotebookInstanceLifecycleConfigOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateNotebookInstanceLifecycleConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateNotebookInstanceOutput:
    boto3_raw_data: "type_defs.CreateNotebookInstanceOutputTypeDef" = (
        dataclasses.field()
    )

    NotebookInstanceArn = field("NotebookInstanceArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateNotebookInstanceOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateNotebookInstanceOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateOptimizationJobResponse:
    boto3_raw_data: "type_defs.CreateOptimizationJobResponseTypeDef" = (
        dataclasses.field()
    )

    OptimizationJobArn = field("OptimizationJobArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateOptimizationJobResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateOptimizationJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreatePartnerAppPresignedUrlResponse:
    boto3_raw_data: "type_defs.CreatePartnerAppPresignedUrlResponseTypeDef" = (
        dataclasses.field()
    )

    Url = field("Url")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreatePartnerAppPresignedUrlResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreatePartnerAppPresignedUrlResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreatePartnerAppResponse:
    boto3_raw_data: "type_defs.CreatePartnerAppResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreatePartnerAppResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreatePartnerAppResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreatePipelineResponse:
    boto3_raw_data: "type_defs.CreatePipelineResponseTypeDef" = dataclasses.field()

    PipelineArn = field("PipelineArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreatePipelineResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreatePipelineResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreatePresignedDomainUrlResponse:
    boto3_raw_data: "type_defs.CreatePresignedDomainUrlResponseTypeDef" = (
        dataclasses.field()
    )

    AuthorizedUrl = field("AuthorizedUrl")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreatePresignedDomainUrlResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreatePresignedDomainUrlResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreatePresignedMlflowTrackingServerUrlResponse:
    boto3_raw_data: (
        "type_defs.CreatePresignedMlflowTrackingServerUrlResponseTypeDef"
    ) = dataclasses.field()

    AuthorizedUrl = field("AuthorizedUrl")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreatePresignedMlflowTrackingServerUrlResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.CreatePresignedMlflowTrackingServerUrlResponseTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreatePresignedNotebookInstanceUrlOutput:
    boto3_raw_data: "type_defs.CreatePresignedNotebookInstanceUrlOutputTypeDef" = (
        dataclasses.field()
    )

    AuthorizedUrl = field("AuthorizedUrl")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreatePresignedNotebookInstanceUrlOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreatePresignedNotebookInstanceUrlOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateProcessingJobResponse:
    boto3_raw_data: "type_defs.CreateProcessingJobResponseTypeDef" = dataclasses.field()

    ProcessingJobArn = field("ProcessingJobArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateProcessingJobResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateProcessingJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateProjectOutput:
    boto3_raw_data: "type_defs.CreateProjectOutputTypeDef" = dataclasses.field()

    ProjectArn = field("ProjectArn")
    ProjectId = field("ProjectId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateProjectOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateProjectOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateSpaceResponse:
    boto3_raw_data: "type_defs.CreateSpaceResponseTypeDef" = dataclasses.field()

    SpaceArn = field("SpaceArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateSpaceResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateSpaceResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateStudioLifecycleConfigResponse:
    boto3_raw_data: "type_defs.CreateStudioLifecycleConfigResponseTypeDef" = (
        dataclasses.field()
    )

    StudioLifecycleConfigArn = field("StudioLifecycleConfigArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateStudioLifecycleConfigResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateStudioLifecycleConfigResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTrainingJobResponse:
    boto3_raw_data: "type_defs.CreateTrainingJobResponseTypeDef" = dataclasses.field()

    TrainingJobArn = field("TrainingJobArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateTrainingJobResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTrainingJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTrainingPlanResponse:
    boto3_raw_data: "type_defs.CreateTrainingPlanResponseTypeDef" = dataclasses.field()

    TrainingPlanArn = field("TrainingPlanArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateTrainingPlanResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTrainingPlanResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransformJobResponse:
    boto3_raw_data: "type_defs.CreateTransformJobResponseTypeDef" = dataclasses.field()

    TransformJobArn = field("TransformJobArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateTransformJobResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTransformJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTrialComponentResponse:
    boto3_raw_data: "type_defs.CreateTrialComponentResponseTypeDef" = (
        dataclasses.field()
    )

    TrialComponentArn = field("TrialComponentArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateTrialComponentResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTrialComponentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTrialResponse:
    boto3_raw_data: "type_defs.CreateTrialResponseTypeDef" = dataclasses.field()

    TrialArn = field("TrialArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateTrialResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTrialResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateUserProfileResponse:
    boto3_raw_data: "type_defs.CreateUserProfileResponseTypeDef" = dataclasses.field()

    UserProfileArn = field("UserProfileArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateUserProfileResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateUserProfileResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateWorkforceResponse:
    boto3_raw_data: "type_defs.CreateWorkforceResponseTypeDef" = dataclasses.field()

    WorkforceArn = field("WorkforceArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateWorkforceResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateWorkforceResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateWorkteamResponse:
    boto3_raw_data: "type_defs.CreateWorkteamResponseTypeDef" = dataclasses.field()

    WorkteamArn = field("WorkteamArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateWorkteamResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateWorkteamResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteActionResponse:
    boto3_raw_data: "type_defs.DeleteActionResponseTypeDef" = dataclasses.field()

    ActionArn = field("ActionArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteActionResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteActionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteArtifactResponse:
    boto3_raw_data: "type_defs.DeleteArtifactResponseTypeDef" = dataclasses.field()

    ArtifactArn = field("ArtifactArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteArtifactResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteArtifactResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteAssociationResponse:
    boto3_raw_data: "type_defs.DeleteAssociationResponseTypeDef" = dataclasses.field()

    SourceArn = field("SourceArn")
    DestinationArn = field("DestinationArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteAssociationResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteAssociationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteClusterResponse:
    boto3_raw_data: "type_defs.DeleteClusterResponseTypeDef" = dataclasses.field()

    ClusterArn = field("ClusterArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteClusterResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteClusterResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteContextResponse:
    boto3_raw_data: "type_defs.DeleteContextResponseTypeDef" = dataclasses.field()

    ContextArn = field("ContextArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteContextResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteContextResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteExperimentResponse:
    boto3_raw_data: "type_defs.DeleteExperimentResponseTypeDef" = dataclasses.field()

    ExperimentArn = field("ExperimentArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteExperimentResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteExperimentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteInferenceExperimentResponse:
    boto3_raw_data: "type_defs.DeleteInferenceExperimentResponseTypeDef" = (
        dataclasses.field()
    )

    InferenceExperimentArn = field("InferenceExperimentArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteInferenceExperimentResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteInferenceExperimentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteMlflowTrackingServerResponse:
    boto3_raw_data: "type_defs.DeleteMlflowTrackingServerResponseTypeDef" = (
        dataclasses.field()
    )

    TrackingServerArn = field("TrackingServerArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteMlflowTrackingServerResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteMlflowTrackingServerResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeletePartnerAppResponse:
    boto3_raw_data: "type_defs.DeletePartnerAppResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeletePartnerAppResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeletePartnerAppResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeletePipelineResponse:
    boto3_raw_data: "type_defs.DeletePipelineResponseTypeDef" = dataclasses.field()

    PipelineArn = field("PipelineArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeletePipelineResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeletePipelineResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTrialComponentResponse:
    boto3_raw_data: "type_defs.DeleteTrialComponentResponseTypeDef" = (
        dataclasses.field()
    )

    TrialComponentArn = field("TrialComponentArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteTrialComponentResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTrialComponentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTrialResponse:
    boto3_raw_data: "type_defs.DeleteTrialResponseTypeDef" = dataclasses.field()

    TrialArn = field("TrialArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteTrialResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTrialResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteWorkteamResponse:
    boto3_raw_data: "type_defs.DeleteWorkteamResponseTypeDef" = dataclasses.field()

    Success = field("Success")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteWorkteamResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteWorkteamResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImageResponse:
    boto3_raw_data: "type_defs.DescribeImageResponseTypeDef" = dataclasses.field()

    CreationTime = field("CreationTime")
    Description = field("Description")
    DisplayName = field("DisplayName")
    FailureReason = field("FailureReason")
    ImageArn = field("ImageArn")
    ImageName = field("ImageName")
    ImageStatus = field("ImageStatus")
    LastModifiedTime = field("LastModifiedTime")
    RoleArn = field("RoleArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeImageResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImageResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImageVersionResponse:
    boto3_raw_data: "type_defs.DescribeImageVersionResponseTypeDef" = (
        dataclasses.field()
    )

    BaseImage = field("BaseImage")
    ContainerImage = field("ContainerImage")
    CreationTime = field("CreationTime")
    FailureReason = field("FailureReason")
    ImageArn = field("ImageArn")
    ImageVersionArn = field("ImageVersionArn")
    ImageVersionStatus = field("ImageVersionStatus")
    LastModifiedTime = field("LastModifiedTime")
    Version = field("Version")
    VendorGuidance = field("VendorGuidance")
    JobType = field("JobType")
    MLFramework = field("MLFramework")
    ProgrammingLang = field("ProgrammingLang")
    Processor = field("Processor")
    Horovod = field("Horovod")
    ReleaseNotes = field("ReleaseNotes")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeImageVersionResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImageVersionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribePipelineDefinitionForExecutionResponse:
    boto3_raw_data: (
        "type_defs.DescribePipelineDefinitionForExecutionResponseTypeDef"
    ) = dataclasses.field()

    PipelineDefinition = field("PipelineDefinition")
    CreationTime = field("CreationTime")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribePipelineDefinitionForExecutionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribePipelineDefinitionForExecutionResponseTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeStudioLifecycleConfigResponse:
    boto3_raw_data: "type_defs.DescribeStudioLifecycleConfigResponseTypeDef" = (
        dataclasses.field()
    )

    StudioLifecycleConfigArn = field("StudioLifecycleConfigArn")
    StudioLifecycleConfigName = field("StudioLifecycleConfigName")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    StudioLifecycleConfigContent = field("StudioLifecycleConfigContent")
    StudioLifecycleConfigAppType = field("StudioLifecycleConfigAppType")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeStudioLifecycleConfigResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeStudioLifecycleConfigResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DetachClusterNodeVolumeResponse:
    boto3_raw_data: "type_defs.DetachClusterNodeVolumeResponseTypeDef" = (
        dataclasses.field()
    )

    ClusterArn = field("ClusterArn")
    NodeId = field("NodeId")
    VolumeId = field("VolumeId")
    AttachTime = field("AttachTime")
    Status = field("Status")
    DeviceName = field("DeviceName")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DetachClusterNodeVolumeResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DetachClusterNodeVolumeResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateTrialComponentResponse:
    boto3_raw_data: "type_defs.DisassociateTrialComponentResponseTypeDef" = (
        dataclasses.field()
    )

    TrialComponentArn = field("TrialComponentArn")
    TrialArn = field("TrialArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisassociateTrialComponentResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateTrialComponentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EmptyResponseMetadata:
    boto3_raw_data: "type_defs.EmptyResponseMetadataTypeDef" = dataclasses.field()

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EmptyResponseMetadataTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EmptyResponseMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetLineageGroupPolicyResponse:
    boto3_raw_data: "type_defs.GetLineageGroupPolicyResponseTypeDef" = (
        dataclasses.field()
    )

    LineageGroupArn = field("LineageGroupArn")
    ResourcePolicy = field("ResourcePolicy")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetLineageGroupPolicyResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetLineageGroupPolicyResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetModelPackageGroupPolicyOutput:
    boto3_raw_data: "type_defs.GetModelPackageGroupPolicyOutputTypeDef" = (
        dataclasses.field()
    )

    ResourcePolicy = field("ResourcePolicy")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetModelPackageGroupPolicyOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetModelPackageGroupPolicyOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetSagemakerServicecatalogPortfolioStatusOutput:
    boto3_raw_data: (
        "type_defs.GetSagemakerServicecatalogPortfolioStatusOutputTypeDef"
    ) = dataclasses.field()

    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetSagemakerServicecatalogPortfolioStatusOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GetSagemakerServicecatalogPortfolioStatusOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImportHubContentResponse:
    boto3_raw_data: "type_defs.ImportHubContentResponseTypeDef" = dataclasses.field()

    HubArn = field("HubArn")
    HubContentArn = field("HubContentArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImportHubContentResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImportHubContentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAliasesResponse:
    boto3_raw_data: "type_defs.ListAliasesResponseTypeDef" = dataclasses.field()

    SageMakerImageVersionAliases = field("SageMakerImageVersionAliases")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListAliasesResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAliasesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PutModelPackageGroupPolicyOutput:
    boto3_raw_data: "type_defs.PutModelPackageGroupPolicyOutputTypeDef" = (
        dataclasses.field()
    )

    ModelPackageGroupArn = field("ModelPackageGroupArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.PutModelPackageGroupPolicyOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PutModelPackageGroupPolicyOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RetryPipelineExecutionResponse:
    boto3_raw_data: "type_defs.RetryPipelineExecutionResponseTypeDef" = (
        dataclasses.field()
    )

    PipelineExecutionArn = field("PipelineExecutionArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RetryPipelineExecutionResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RetryPipelineExecutionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SendPipelineExecutionStepFailureResponse:
    boto3_raw_data: "type_defs.SendPipelineExecutionStepFailureResponseTypeDef" = (
        dataclasses.field()
    )

    PipelineExecutionArn = field("PipelineExecutionArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SendPipelineExecutionStepFailureResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SendPipelineExecutionStepFailureResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SendPipelineExecutionStepSuccessResponse:
    boto3_raw_data: "type_defs.SendPipelineExecutionStepSuccessResponseTypeDef" = (
        dataclasses.field()
    )

    PipelineExecutionArn = field("PipelineExecutionArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SendPipelineExecutionStepSuccessResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SendPipelineExecutionStepSuccessResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartInferenceExperimentResponse:
    boto3_raw_data: "type_defs.StartInferenceExperimentResponseTypeDef" = (
        dataclasses.field()
    )

    InferenceExperimentArn = field("InferenceExperimentArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.StartInferenceExperimentResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartInferenceExperimentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartMlflowTrackingServerResponse:
    boto3_raw_data: "type_defs.StartMlflowTrackingServerResponseTypeDef" = (
        dataclasses.field()
    )

    TrackingServerArn = field("TrackingServerArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StartMlflowTrackingServerResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartMlflowTrackingServerResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartPipelineExecutionResponse:
    boto3_raw_data: "type_defs.StartPipelineExecutionResponseTypeDef" = (
        dataclasses.field()
    )

    PipelineExecutionArn = field("PipelineExecutionArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.StartPipelineExecutionResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartPipelineExecutionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartSessionResponse:
    boto3_raw_data: "type_defs.StartSessionResponseTypeDef" = dataclasses.field()

    SessionId = field("SessionId")
    StreamUrl = field("StreamUrl")
    TokenValue = field("TokenValue")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StartSessionResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartSessionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StopInferenceExperimentResponse:
    boto3_raw_data: "type_defs.StopInferenceExperimentResponseTypeDef" = (
        dataclasses.field()
    )

    InferenceExperimentArn = field("InferenceExperimentArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.StopInferenceExperimentResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StopInferenceExperimentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StopMlflowTrackingServerResponse:
    boto3_raw_data: "type_defs.StopMlflowTrackingServerResponseTypeDef" = (
        dataclasses.field()
    )

    TrackingServerArn = field("TrackingServerArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.StopMlflowTrackingServerResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StopMlflowTrackingServerResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StopPipelineExecutionResponse:
    boto3_raw_data: "type_defs.StopPipelineExecutionResponseTypeDef" = (
        dataclasses.field()
    )

    PipelineExecutionArn = field("PipelineExecutionArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.StopPipelineExecutionResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StopPipelineExecutionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateActionResponse:
    boto3_raw_data: "type_defs.UpdateActionResponseTypeDef" = dataclasses.field()

    ActionArn = field("ActionArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateActionResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateActionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateAppImageConfigResponse:
    boto3_raw_data: "type_defs.UpdateAppImageConfigResponseTypeDef" = (
        dataclasses.field()
    )

    AppImageConfigArn = field("AppImageConfigArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateAppImageConfigResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateAppImageConfigResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateArtifactResponse:
    boto3_raw_data: "type_defs.UpdateArtifactResponseTypeDef" = dataclasses.field()

    ArtifactArn = field("ArtifactArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateArtifactResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateArtifactResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateClusterResponse:
    boto3_raw_data: "type_defs.UpdateClusterResponseTypeDef" = dataclasses.field()

    ClusterArn = field("ClusterArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateClusterResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateClusterResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateClusterSchedulerConfigResponse:
    boto3_raw_data: "type_defs.UpdateClusterSchedulerConfigResponseTypeDef" = (
        dataclasses.field()
    )

    ClusterSchedulerConfigArn = field("ClusterSchedulerConfigArn")
    ClusterSchedulerConfigVersion = field("ClusterSchedulerConfigVersion")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateClusterSchedulerConfigResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateClusterSchedulerConfigResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateClusterSoftwareResponse:
    boto3_raw_data: "type_defs.UpdateClusterSoftwareResponseTypeDef" = (
        dataclasses.field()
    )

    ClusterArn = field("ClusterArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateClusterSoftwareResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateClusterSoftwareResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateCodeRepositoryOutput:
    boto3_raw_data: "type_defs.UpdateCodeRepositoryOutputTypeDef" = dataclasses.field()

    CodeRepositoryArn = field("CodeRepositoryArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateCodeRepositoryOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateCodeRepositoryOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateComputeQuotaResponse:
    boto3_raw_data: "type_defs.UpdateComputeQuotaResponseTypeDef" = dataclasses.field()

    ComputeQuotaArn = field("ComputeQuotaArn")
    ComputeQuotaVersion = field("ComputeQuotaVersion")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateComputeQuotaResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateComputeQuotaResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateContextResponse:
    boto3_raw_data: "type_defs.UpdateContextResponseTypeDef" = dataclasses.field()

    ContextArn = field("ContextArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateContextResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateContextResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateDomainResponse:
    boto3_raw_data: "type_defs.UpdateDomainResponseTypeDef" = dataclasses.field()

    DomainArn = field("DomainArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateDomainResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateDomainResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateEndpointOutput:
    boto3_raw_data: "type_defs.UpdateEndpointOutputTypeDef" = dataclasses.field()

    EndpointArn = field("EndpointArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateEndpointOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateEndpointOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateEndpointWeightsAndCapacitiesOutput:
    boto3_raw_data: "type_defs.UpdateEndpointWeightsAndCapacitiesOutputTypeDef" = (
        dataclasses.field()
    )

    EndpointArn = field("EndpointArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateEndpointWeightsAndCapacitiesOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateEndpointWeightsAndCapacitiesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateExperimentResponse:
    boto3_raw_data: "type_defs.UpdateExperimentResponseTypeDef" = dataclasses.field()

    ExperimentArn = field("ExperimentArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateExperimentResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateExperimentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateFeatureGroupResponse:
    boto3_raw_data: "type_defs.UpdateFeatureGroupResponseTypeDef" = dataclasses.field()

    FeatureGroupArn = field("FeatureGroupArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateFeatureGroupResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateFeatureGroupResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateHubContentReferenceResponse:
    boto3_raw_data: "type_defs.UpdateHubContentReferenceResponseTypeDef" = (
        dataclasses.field()
    )

    HubArn = field("HubArn")
    HubContentArn = field("HubContentArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateHubContentReferenceResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateHubContentReferenceResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateHubContentResponse:
    boto3_raw_data: "type_defs.UpdateHubContentResponseTypeDef" = dataclasses.field()

    HubArn = field("HubArn")
    HubContentArn = field("HubContentArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateHubContentResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateHubContentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateHubResponse:
    boto3_raw_data: "type_defs.UpdateHubResponseTypeDef" = dataclasses.field()

    HubArn = field("HubArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.UpdateHubResponseTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateHubResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateImageResponse:
    boto3_raw_data: "type_defs.UpdateImageResponseTypeDef" = dataclasses.field()

    ImageArn = field("ImageArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateImageResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateImageResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateImageVersionResponse:
    boto3_raw_data: "type_defs.UpdateImageVersionResponseTypeDef" = dataclasses.field()

    ImageVersionArn = field("ImageVersionArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateImageVersionResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateImageVersionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateInferenceComponentOutput:
    boto3_raw_data: "type_defs.UpdateInferenceComponentOutputTypeDef" = (
        dataclasses.field()
    )

    InferenceComponentArn = field("InferenceComponentArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateInferenceComponentOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateInferenceComponentOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateInferenceComponentRuntimeConfigOutput:
    boto3_raw_data: "type_defs.UpdateInferenceComponentRuntimeConfigOutputTypeDef" = (
        dataclasses.field()
    )

    InferenceComponentArn = field("InferenceComponentArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateInferenceComponentRuntimeConfigOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateInferenceComponentRuntimeConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateInferenceExperimentResponse:
    boto3_raw_data: "type_defs.UpdateInferenceExperimentResponseTypeDef" = (
        dataclasses.field()
    )

    InferenceExperimentArn = field("InferenceExperimentArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateInferenceExperimentResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateInferenceExperimentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateMlflowTrackingServerResponse:
    boto3_raw_data: "type_defs.UpdateMlflowTrackingServerResponseTypeDef" = (
        dataclasses.field()
    )

    TrackingServerArn = field("TrackingServerArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateMlflowTrackingServerResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateMlflowTrackingServerResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateModelCardResponse:
    boto3_raw_data: "type_defs.UpdateModelCardResponseTypeDef" = dataclasses.field()

    ModelCardArn = field("ModelCardArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateModelCardResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateModelCardResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateModelPackageOutput:
    boto3_raw_data: "type_defs.UpdateModelPackageOutputTypeDef" = dataclasses.field()

    ModelPackageArn = field("ModelPackageArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateModelPackageOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateModelPackageOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateMonitoringAlertResponse:
    boto3_raw_data: "type_defs.UpdateMonitoringAlertResponseTypeDef" = (
        dataclasses.field()
    )

    MonitoringScheduleArn = field("MonitoringScheduleArn")
    MonitoringAlertName = field("MonitoringAlertName")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateMonitoringAlertResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateMonitoringAlertResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateMonitoringScheduleResponse:
    boto3_raw_data: "type_defs.UpdateMonitoringScheduleResponseTypeDef" = (
        dataclasses.field()
    )

    MonitoringScheduleArn = field("MonitoringScheduleArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateMonitoringScheduleResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateMonitoringScheduleResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdatePartnerAppResponse:
    boto3_raw_data: "type_defs.UpdatePartnerAppResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdatePartnerAppResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdatePartnerAppResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdatePipelineExecutionResponse:
    boto3_raw_data: "type_defs.UpdatePipelineExecutionResponseTypeDef" = (
        dataclasses.field()
    )

    PipelineExecutionArn = field("PipelineExecutionArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdatePipelineExecutionResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdatePipelineExecutionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdatePipelineResponse:
    boto3_raw_data: "type_defs.UpdatePipelineResponseTypeDef" = dataclasses.field()

    PipelineArn = field("PipelineArn")
    PipelineVersionId = field("PipelineVersionId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdatePipelineResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdatePipelineResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdatePipelineVersionResponse:
    boto3_raw_data: "type_defs.UpdatePipelineVersionResponseTypeDef" = (
        dataclasses.field()
    )

    PipelineArn = field("PipelineArn")
    PipelineVersionId = field("PipelineVersionId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdatePipelineVersionResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdatePipelineVersionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateProjectOutput:
    boto3_raw_data: "type_defs.UpdateProjectOutputTypeDef" = dataclasses.field()

    ProjectArn = field("ProjectArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateProjectOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateProjectOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateSpaceResponse:
    boto3_raw_data: "type_defs.UpdateSpaceResponseTypeDef" = dataclasses.field()

    SpaceArn = field("SpaceArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateSpaceResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateSpaceResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateTrainingJobResponse:
    boto3_raw_data: "type_defs.UpdateTrainingJobResponseTypeDef" = dataclasses.field()

    TrainingJobArn = field("TrainingJobArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateTrainingJobResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateTrainingJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateTrialComponentResponse:
    boto3_raw_data: "type_defs.UpdateTrialComponentResponseTypeDef" = (
        dataclasses.field()
    )

    TrialComponentArn = field("TrialComponentArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateTrialComponentResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateTrialComponentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateTrialResponse:
    boto3_raw_data: "type_defs.UpdateTrialResponseTypeDef" = dataclasses.field()

    TrialArn = field("TrialArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateTrialResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateTrialResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateUserProfileResponse:
    boto3_raw_data: "type_defs.UpdateUserProfileResponseTypeDef" = dataclasses.field()

    UserProfileArn = field("UserProfileArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateUserProfileResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateUserProfileResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchAddClusterNodesRequest:
    boto3_raw_data: "type_defs.BatchAddClusterNodesRequestTypeDef" = dataclasses.field()

    ClusterName = field("ClusterName")

    @cached_property
    def NodesToAdd(self):  # pragma: no cover
        return AddClusterNodeSpecification.make_many(self.boto3_raw_data["NodesToAdd"])

    ClientToken = field("ClientToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BatchAddClusterNodesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchAddClusterNodesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AddTagsInput:
    boto3_raw_data: "type_defs.AddTagsInputTypeDef" = dataclasses.field()

    ResourceArn = field("ResourceArn")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AddTagsInputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AddTagsInputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AddTagsOutput:
    boto3_raw_data: "type_defs.AddTagsOutputTypeDef" = dataclasses.field()

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AddTagsOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AddTagsOutputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateExperimentRequest:
    boto3_raw_data: "type_defs.CreateExperimentRequestTypeDef" = dataclasses.field()

    ExperimentName = field("ExperimentName")
    DisplayName = field("DisplayName")
    Description = field("Description")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateExperimentRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateExperimentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateHubContentReferenceRequest:
    boto3_raw_data: "type_defs.CreateHubContentReferenceRequestTypeDef" = (
        dataclasses.field()
    )

    HubName = field("HubName")
    SageMakerPublicHubContentArn = field("SageMakerPublicHubContentArn")
    HubContentName = field("HubContentName")
    MinVersion = field("MinVersion")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateHubContentReferenceRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateHubContentReferenceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateImageRequest:
    boto3_raw_data: "type_defs.CreateImageRequestTypeDef" = dataclasses.field()

    ImageName = field("ImageName")
    RoleArn = field("RoleArn")
    Description = field("Description")
    DisplayName = field("DisplayName")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateImageRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateImageRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateMlflowTrackingServerRequest:
    boto3_raw_data: "type_defs.CreateMlflowTrackingServerRequestTypeDef" = (
        dataclasses.field()
    )

    TrackingServerName = field("TrackingServerName")
    ArtifactStoreUri = field("ArtifactStoreUri")
    RoleArn = field("RoleArn")
    TrackingServerSize = field("TrackingServerSize")
    MlflowVersion = field("MlflowVersion")
    AutomaticModelRegistration = field("AutomaticModelRegistration")
    WeeklyMaintenanceWindowStart = field("WeeklyMaintenanceWindowStart")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateMlflowTrackingServerRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateMlflowTrackingServerRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateModelPackageGroupInput:
    boto3_raw_data: "type_defs.CreateModelPackageGroupInputTypeDef" = (
        dataclasses.field()
    )

    ModelPackageGroupName = field("ModelPackageGroupName")
    ModelPackageGroupDescription = field("ModelPackageGroupDescription")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateModelPackageGroupInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateModelPackageGroupInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateStudioLifecycleConfigRequest:
    boto3_raw_data: "type_defs.CreateStudioLifecycleConfigRequestTypeDef" = (
        dataclasses.field()
    )

    StudioLifecycleConfigName = field("StudioLifecycleConfigName")
    StudioLifecycleConfigContent = field("StudioLifecycleConfigContent")
    StudioLifecycleConfigAppType = field("StudioLifecycleConfigAppType")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateStudioLifecycleConfigRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateStudioLifecycleConfigRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTrainingPlanRequest:
    boto3_raw_data: "type_defs.CreateTrainingPlanRequestTypeDef" = dataclasses.field()

    TrainingPlanName = field("TrainingPlanName")
    TrainingPlanOfferingId = field("TrainingPlanOfferingId")
    SpareInstanceCountPerUltraServer = field("SpareInstanceCountPerUltraServer")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateTrainingPlanRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTrainingPlanRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImportHubContentRequest:
    boto3_raw_data: "type_defs.ImportHubContentRequestTypeDef" = dataclasses.field()

    HubContentName = field("HubContentName")
    HubContentType = field("HubContentType")
    DocumentSchemaVersion = field("DocumentSchemaVersion")
    HubName = field("HubName")
    HubContentDocument = field("HubContentDocument")
    HubContentVersion = field("HubContentVersion")
    HubContentDisplayName = field("HubContentDisplayName")
    HubContentDescription = field("HubContentDescription")
    HubContentMarkdown = field("HubContentMarkdown")
    SupportStatus = field("SupportStatus")
    HubContentSearchKeywords = field("HubContentSearchKeywords")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImportHubContentRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImportHubContentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTagsOutput:
    boto3_raw_data: "type_defs.ListTagsOutputTypeDef" = dataclasses.field()

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ListTagsOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ListTagsOutputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoRollbackConfigOutput:
    boto3_raw_data: "type_defs.AutoRollbackConfigOutputTypeDef" = dataclasses.field()

    @cached_property
    def Alarms(self):  # pragma: no cover
        return Alarm.make_many(self.boto3_raw_data["Alarms"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutoRollbackConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoRollbackConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoRollbackConfig:
    boto3_raw_data: "type_defs.AutoRollbackConfigTypeDef" = dataclasses.field()

    @cached_property
    def Alarms(self):  # pragma: no cover
        return Alarm.make_many(self.boto3_raw_data["Alarms"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutoRollbackConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoRollbackConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HyperParameterAlgorithmSpecificationOutput:
    boto3_raw_data: "type_defs.HyperParameterAlgorithmSpecificationOutputTypeDef" = (
        dataclasses.field()
    )

    TrainingInputMode = field("TrainingInputMode")
    TrainingImage = field("TrainingImage")
    AlgorithmName = field("AlgorithmName")

    @cached_property
    def MetricDefinitions(self):  # pragma: no cover
        return MetricDefinition.make_many(self.boto3_raw_data["MetricDefinitions"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.HyperParameterAlgorithmSpecificationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HyperParameterAlgorithmSpecificationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HyperParameterAlgorithmSpecification:
    boto3_raw_data: "type_defs.HyperParameterAlgorithmSpecificationTypeDef" = (
        dataclasses.field()
    )

    TrainingInputMode = field("TrainingInputMode")
    TrainingImage = field("TrainingImage")
    AlgorithmName = field("AlgorithmName")

    @cached_property
    def MetricDefinitions(self):  # pragma: no cover
        return MetricDefinition.make_many(self.boto3_raw_data["MetricDefinitions"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.HyperParameterAlgorithmSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HyperParameterAlgorithmSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AlgorithmStatusDetails:
    boto3_raw_data: "type_defs.AlgorithmStatusDetailsTypeDef" = dataclasses.field()

    @cached_property
    def ValidationStatuses(self):  # pragma: no cover
        return AlgorithmStatusItem.make_many(self.boto3_raw_data["ValidationStatuses"])

    @cached_property
    def ImageScanStatuses(self):  # pragma: no cover
        return AlgorithmStatusItem.make_many(self.boto3_raw_data["ImageScanStatuses"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AlgorithmStatusDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AlgorithmStatusDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAlgorithmsOutput:
    boto3_raw_data: "type_defs.ListAlgorithmsOutputTypeDef" = dataclasses.field()

    @cached_property
    def AlgorithmSummaryList(self):  # pragma: no cover
        return AlgorithmSummary.make_many(self.boto3_raw_data["AlgorithmSummaryList"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListAlgorithmsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAlgorithmsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AppDetails:
    boto3_raw_data: "type_defs.AppDetailsTypeDef" = dataclasses.field()

    DomainId = field("DomainId")
    UserProfileName = field("UserProfileName")
    SpaceName = field("SpaceName")
    AppType = field("AppType")
    AppName = field("AppName")
    Status = field("Status")
    CreationTime = field("CreationTime")

    @cached_property
    def ResourceSpec(self):  # pragma: no cover
        return ResourceSpec.make_one(self.boto3_raw_data["ResourceSpec"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AppDetailsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AppDetailsTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateAppRequest:
    boto3_raw_data: "type_defs.CreateAppRequestTypeDef" = dataclasses.field()

    DomainId = field("DomainId")
    AppType = field("AppType")
    AppName = field("AppName")
    UserProfileName = field("UserProfileName")
    SpaceName = field("SpaceName")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def ResourceSpec(self):  # pragma: no cover
        return ResourceSpec.make_one(self.boto3_raw_data["ResourceSpec"])

    RecoveryMode = field("RecoveryMode")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CreateAppRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateAppRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAppResponse:
    boto3_raw_data: "type_defs.DescribeAppResponseTypeDef" = dataclasses.field()

    AppArn = field("AppArn")
    AppType = field("AppType")
    AppName = field("AppName")
    DomainId = field("DomainId")
    UserProfileName = field("UserProfileName")
    SpaceName = field("SpaceName")
    Status = field("Status")
    EffectiveTrustedIdentityPropagationStatus = field(
        "EffectiveTrustedIdentityPropagationStatus"
    )
    RecoveryMode = field("RecoveryMode")
    LastHealthCheckTimestamp = field("LastHealthCheckTimestamp")
    LastUserActivityTimestamp = field("LastUserActivityTimestamp")
    CreationTime = field("CreationTime")
    FailureReason = field("FailureReason")

    @cached_property
    def ResourceSpec(self):  # pragma: no cover
        return ResourceSpec.make_one(self.boto3_raw_data["ResourceSpec"])

    BuiltInLifecycleConfigArn = field("BuiltInLifecycleConfigArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeAppResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAppResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RStudioServerProDomainSettingsForUpdate:
    boto3_raw_data: "type_defs.RStudioServerProDomainSettingsForUpdateTypeDef" = (
        dataclasses.field()
    )

    DomainExecutionRoleArn = field("DomainExecutionRoleArn")

    @cached_property
    def DefaultResourceSpec(self):  # pragma: no cover
        return ResourceSpec.make_one(self.boto3_raw_data["DefaultResourceSpec"])

    RStudioConnectUrl = field("RStudioConnectUrl")
    RStudioPackageManagerUrl = field("RStudioPackageManagerUrl")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RStudioServerProDomainSettingsForUpdateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RStudioServerProDomainSettingsForUpdateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RStudioServerProDomainSettings:
    boto3_raw_data: "type_defs.RStudioServerProDomainSettingsTypeDef" = (
        dataclasses.field()
    )

    DomainExecutionRoleArn = field("DomainExecutionRoleArn")
    RStudioConnectUrl = field("RStudioConnectUrl")
    RStudioPackageManagerUrl = field("RStudioPackageManagerUrl")

    @cached_property
    def DefaultResourceSpec(self):  # pragma: no cover
        return ResourceSpec.make_one(self.boto3_raw_data["DefaultResourceSpec"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RStudioServerProDomainSettingsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RStudioServerProDomainSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TensorBoardAppSettings:
    boto3_raw_data: "type_defs.TensorBoardAppSettingsTypeDef" = dataclasses.field()

    @cached_property
    def DefaultResourceSpec(self):  # pragma: no cover
        return ResourceSpec.make_one(self.boto3_raw_data["DefaultResourceSpec"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TensorBoardAppSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TensorBoardAppSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AppLifecycleManagement:
    boto3_raw_data: "type_defs.AppLifecycleManagementTypeDef" = dataclasses.field()

    @cached_property
    def IdleSettings(self):  # pragma: no cover
        return IdleSettings.make_one(self.boto3_raw_data["IdleSettings"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AppLifecycleManagementTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AppLifecycleManagementTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ArtifactSourceOutput:
    boto3_raw_data: "type_defs.ArtifactSourceOutputTypeDef" = dataclasses.field()

    SourceUri = field("SourceUri")

    @cached_property
    def SourceTypes(self):  # pragma: no cover
        return ArtifactSourceType.make_many(self.boto3_raw_data["SourceTypes"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ArtifactSourceOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ArtifactSourceOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ArtifactSource:
    boto3_raw_data: "type_defs.ArtifactSourceTypeDef" = dataclasses.field()

    SourceUri = field("SourceUri")

    @cached_property
    def SourceTypes(self):  # pragma: no cover
        return ArtifactSourceType.make_many(self.boto3_raw_data["SourceTypes"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ArtifactSourceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ArtifactSourceTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AsyncInferenceOutputConfigOutput:
    boto3_raw_data: "type_defs.AsyncInferenceOutputConfigOutputTypeDef" = (
        dataclasses.field()
    )

    KmsKeyId = field("KmsKeyId")
    S3OutputPath = field("S3OutputPath")

    @cached_property
    def NotificationConfig(self):  # pragma: no cover
        return AsyncInferenceNotificationConfigOutput.make_one(
            self.boto3_raw_data["NotificationConfig"]
        )

    S3FailurePath = field("S3FailurePath")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AsyncInferenceOutputConfigOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AsyncInferenceOutputConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AsyncInferenceOutputConfig:
    boto3_raw_data: "type_defs.AsyncInferenceOutputConfigTypeDef" = dataclasses.field()

    KmsKeyId = field("KmsKeyId")
    S3OutputPath = field("S3OutputPath")

    @cached_property
    def NotificationConfig(self):  # pragma: no cover
        return AsyncInferenceNotificationConfig.make_one(
            self.boto3_raw_data["NotificationConfig"]
        )

    S3FailurePath = field("S3FailurePath")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AsyncInferenceOutputConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AsyncInferenceOutputConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateHubContentPresignedUrlsResponse:
    boto3_raw_data: "type_defs.CreateHubContentPresignedUrlsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AuthorizedUrlConfigs(self):  # pragma: no cover
        return AuthorizedUrl.make_many(self.boto3_raw_data["AuthorizedUrlConfigs"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateHubContentPresignedUrlsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateHubContentPresignedUrlsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLCandidateGenerationConfigOutput:
    boto3_raw_data: "type_defs.AutoMLCandidateGenerationConfigOutputTypeDef" = (
        dataclasses.field()
    )

    FeatureSpecificationS3Uri = field("FeatureSpecificationS3Uri")

    @cached_property
    def AlgorithmsConfig(self):  # pragma: no cover
        return AutoMLAlgorithmConfigOutput.make_many(
            self.boto3_raw_data["AlgorithmsConfig"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AutoMLCandidateGenerationConfigOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLCandidateGenerationConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CandidateGenerationConfigOutput:
    boto3_raw_data: "type_defs.CandidateGenerationConfigOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AlgorithmsConfig(self):  # pragma: no cover
        return AutoMLAlgorithmConfigOutput.make_many(
            self.boto3_raw_data["AlgorithmsConfig"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CandidateGenerationConfigOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CandidateGenerationConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLCandidateGenerationConfig:
    boto3_raw_data: "type_defs.AutoMLCandidateGenerationConfigTypeDef" = (
        dataclasses.field()
    )

    FeatureSpecificationS3Uri = field("FeatureSpecificationS3Uri")

    @cached_property
    def AlgorithmsConfig(self):  # pragma: no cover
        return AutoMLAlgorithmConfig.make_many(self.boto3_raw_data["AlgorithmsConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AutoMLCandidateGenerationConfigTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLCandidateGenerationConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CandidateGenerationConfig:
    boto3_raw_data: "type_defs.CandidateGenerationConfigTypeDef" = dataclasses.field()

    @cached_property
    def AlgorithmsConfig(self):  # pragma: no cover
        return AutoMLAlgorithmConfig.make_many(self.boto3_raw_data["AlgorithmsConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CandidateGenerationConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CandidateGenerationConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLComputeConfig:
    boto3_raw_data: "type_defs.AutoMLComputeConfigTypeDef" = dataclasses.field()

    @cached_property
    def EmrServerlessComputeConfig(self):  # pragma: no cover
        return EmrServerlessComputeConfig.make_one(
            self.boto3_raw_data["EmrServerlessComputeConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutoMLComputeConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLComputeConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLDataSource:
    boto3_raw_data: "type_defs.AutoMLDataSourceTypeDef" = dataclasses.field()

    @cached_property
    def S3DataSource(self):  # pragma: no cover
        return AutoMLS3DataSource.make_one(self.boto3_raw_data["S3DataSource"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AutoMLDataSourceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLDataSourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageClassificationJobConfig:
    boto3_raw_data: "type_defs.ImageClassificationJobConfigTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CompletionCriteria(self):  # pragma: no cover
        return AutoMLJobCompletionCriteria.make_one(
            self.boto3_raw_data["CompletionCriteria"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImageClassificationJobConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImageClassificationJobConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TextClassificationJobConfig:
    boto3_raw_data: "type_defs.TextClassificationJobConfigTypeDef" = dataclasses.field()

    ContentColumn = field("ContentColumn")
    TargetLabelColumn = field("TargetLabelColumn")

    @cached_property
    def CompletionCriteria(self):  # pragma: no cover
        return AutoMLJobCompletionCriteria.make_one(
            self.boto3_raw_data["CompletionCriteria"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TextClassificationJobConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TextClassificationJobConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResolvedAttributes:
    boto3_raw_data: "type_defs.ResolvedAttributesTypeDef" = dataclasses.field()

    @cached_property
    def AutoMLJobObjective(self):  # pragma: no cover
        return AutoMLJobObjective.make_one(self.boto3_raw_data["AutoMLJobObjective"])

    ProblemType = field("ProblemType")

    @cached_property
    def CompletionCriteria(self):  # pragma: no cover
        return AutoMLJobCompletionCriteria.make_one(
            self.boto3_raw_data["CompletionCriteria"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ResolvedAttributesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResolvedAttributesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLJobSummary:
    boto3_raw_data: "type_defs.AutoMLJobSummaryTypeDef" = dataclasses.field()

    AutoMLJobName = field("AutoMLJobName")
    AutoMLJobArn = field("AutoMLJobArn")
    AutoMLJobStatus = field("AutoMLJobStatus")
    AutoMLJobSecondaryStatus = field("AutoMLJobSecondaryStatus")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    EndTime = field("EndTime")
    FailureReason = field("FailureReason")

    @cached_property
    def PartialFailureReasons(self):  # pragma: no cover
        return AutoMLPartialFailureReason.make_many(
            self.boto3_raw_data["PartialFailureReasons"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AutoMLJobSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLJobSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLProblemTypeResolvedAttributes:
    boto3_raw_data: "type_defs.AutoMLProblemTypeResolvedAttributesTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TabularResolvedAttributes(self):  # pragma: no cover
        return TabularResolvedAttributes.make_one(
            self.boto3_raw_data["TabularResolvedAttributes"]
        )

    @cached_property
    def TextGenerationResolvedAttributes(self):  # pragma: no cover
        return TextGenerationResolvedAttributes.make_one(
            self.boto3_raw_data["TextGenerationResolvedAttributes"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AutoMLProblemTypeResolvedAttributesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLProblemTypeResolvedAttributesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLSecurityConfigOutput:
    boto3_raw_data: "type_defs.AutoMLSecurityConfigOutputTypeDef" = dataclasses.field()

    VolumeKmsKeyId = field("VolumeKmsKeyId")
    EnableInterContainerTrafficEncryption = field(
        "EnableInterContainerTrafficEncryption"
    )

    @cached_property
    def VpcConfig(self):  # pragma: no cover
        return VpcConfigOutput.make_one(self.boto3_raw_data["VpcConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutoMLSecurityConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLSecurityConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LabelingJobResourceConfigOutput:
    boto3_raw_data: "type_defs.LabelingJobResourceConfigOutputTypeDef" = (
        dataclasses.field()
    )

    VolumeKmsKeyId = field("VolumeKmsKeyId")

    @cached_property
    def VpcConfig(self):  # pragma: no cover
        return VpcConfigOutput.make_one(self.boto3_raw_data["VpcConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.LabelingJobResourceConfigOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LabelingJobResourceConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringNetworkConfigOutput:
    boto3_raw_data: "type_defs.MonitoringNetworkConfigOutputTypeDef" = (
        dataclasses.field()
    )

    EnableInterContainerTrafficEncryption = field(
        "EnableInterContainerTrafficEncryption"
    )
    EnableNetworkIsolation = field("EnableNetworkIsolation")

    @cached_property
    def VpcConfig(self):  # pragma: no cover
        return VpcConfigOutput.make_one(self.boto3_raw_data["VpcConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.MonitoringNetworkConfigOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringNetworkConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkConfigOutput:
    boto3_raw_data: "type_defs.NetworkConfigOutputTypeDef" = dataclasses.field()

    EnableInterContainerTrafficEncryption = field(
        "EnableInterContainerTrafficEncryption"
    )
    EnableNetworkIsolation = field("EnableNetworkIsolation")

    @cached_property
    def VpcConfig(self):  # pragma: no cover
        return VpcConfigOutput.make_one(self.boto3_raw_data["VpcConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NetworkConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLSecurityConfig:
    boto3_raw_data: "type_defs.AutoMLSecurityConfigTypeDef" = dataclasses.field()

    VolumeKmsKeyId = field("VolumeKmsKeyId")
    EnableInterContainerTrafficEncryption = field(
        "EnableInterContainerTrafficEncryption"
    )

    @cached_property
    def VpcConfig(self):  # pragma: no cover
        return VpcConfig.make_one(self.boto3_raw_data["VpcConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutoMLSecurityConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLSecurityConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LabelingJobResourceConfig:
    boto3_raw_data: "type_defs.LabelingJobResourceConfigTypeDef" = dataclasses.field()

    VolumeKmsKeyId = field("VolumeKmsKeyId")

    @cached_property
    def VpcConfig(self):  # pragma: no cover
        return VpcConfig.make_one(self.boto3_raw_data["VpcConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LabelingJobResourceConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LabelingJobResourceConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringNetworkConfig:
    boto3_raw_data: "type_defs.MonitoringNetworkConfigTypeDef" = dataclasses.field()

    EnableInterContainerTrafficEncryption = field(
        "EnableInterContainerTrafficEncryption"
    )
    EnableNetworkIsolation = field("EnableNetworkIsolation")

    @cached_property
    def VpcConfig(self):  # pragma: no cover
        return VpcConfig.make_one(self.boto3_raw_data["VpcConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MonitoringNetworkConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringNetworkConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkConfig:
    boto3_raw_data: "type_defs.NetworkConfigTypeDef" = dataclasses.field()

    EnableInterContainerTrafficEncryption = field(
        "EnableInterContainerTrafficEncryption"
    )
    EnableNetworkIsolation = field("EnableNetworkIsolation")

    @cached_property
    def VpcConfig(self):  # pragma: no cover
        return VpcConfig.make_one(self.boto3_raw_data["VpcConfig"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NetworkConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.NetworkConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchAddClusterNodesResponse:
    boto3_raw_data: "type_defs.BatchAddClusterNodesResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Successful(self):  # pragma: no cover
        return NodeAdditionResult.make_many(self.boto3_raw_data["Successful"])

    @cached_property
    def Failed(self):  # pragma: no cover
        return BatchAddClusterNodesError.make_many(self.boto3_raw_data["Failed"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BatchAddClusterNodesResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchAddClusterNodesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchDeleteClusterNodesResponse:
    boto3_raw_data: "type_defs.BatchDeleteClusterNodesResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Failed(self):  # pragma: no cover
        return BatchDeleteClusterNodesError.make_many(self.boto3_raw_data["Failed"])

    Successful = field("Successful")

    @cached_property
    def FailedNodeLogicalIds(self):  # pragma: no cover
        return BatchDeleteClusterNodeLogicalIdsError.make_many(
            self.boto3_raw_data["FailedNodeLogicalIds"]
        )

    SuccessfulNodeLogicalIds = field("SuccessfulNodeLogicalIds")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.BatchDeleteClusterNodesResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchDeleteClusterNodesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Bias:
    boto3_raw_data: "type_defs.BiasTypeDef" = dataclasses.field()

    @cached_property
    def Report(self):  # pragma: no cover
        return MetricsSource.make_one(self.boto3_raw_data["Report"])

    @cached_property
    def PreTrainingReport(self):  # pragma: no cover
        return MetricsSource.make_one(self.boto3_raw_data["PreTrainingReport"])

    @cached_property
    def PostTrainingReport(self):  # pragma: no cover
        return MetricsSource.make_one(self.boto3_raw_data["PostTrainingReport"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.BiasTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.BiasTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DriftCheckModelDataQuality:
    boto3_raw_data: "type_defs.DriftCheckModelDataQualityTypeDef" = dataclasses.field()

    @cached_property
    def Statistics(self):  # pragma: no cover
        return MetricsSource.make_one(self.boto3_raw_data["Statistics"])

    @cached_property
    def Constraints(self):  # pragma: no cover
        return MetricsSource.make_one(self.boto3_raw_data["Constraints"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DriftCheckModelDataQualityTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DriftCheckModelDataQualityTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DriftCheckModelQuality:
    boto3_raw_data: "type_defs.DriftCheckModelQualityTypeDef" = dataclasses.field()

    @cached_property
    def Statistics(self):  # pragma: no cover
        return MetricsSource.make_one(self.boto3_raw_data["Statistics"])

    @cached_property
    def Constraints(self):  # pragma: no cover
        return MetricsSource.make_one(self.boto3_raw_data["Constraints"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DriftCheckModelQualityTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DriftCheckModelQualityTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Explainability:
    boto3_raw_data: "type_defs.ExplainabilityTypeDef" = dataclasses.field()

    @cached_property
    def Report(self):  # pragma: no cover
        return MetricsSource.make_one(self.boto3_raw_data["Report"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ExplainabilityTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ExplainabilityTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelDataQuality:
    boto3_raw_data: "type_defs.ModelDataQualityTypeDef" = dataclasses.field()

    @cached_property
    def Statistics(self):  # pragma: no cover
        return MetricsSource.make_one(self.boto3_raw_data["Statistics"])

    @cached_property
    def Constraints(self):  # pragma: no cover
        return MetricsSource.make_one(self.boto3_raw_data["Constraints"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ModelDataQualityTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelDataQualityTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelQuality:
    boto3_raw_data: "type_defs.ModelQualityTypeDef" = dataclasses.field()

    @cached_property
    def Statistics(self):  # pragma: no cover
        return MetricsSource.make_one(self.boto3_raw_data["Statistics"])

    @cached_property
    def Constraints(self):  # pragma: no cover
        return MetricsSource.make_one(self.boto3_raw_data["Constraints"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ModelQualityTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ModelQualityTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CallbackStepMetadata:
    boto3_raw_data: "type_defs.CallbackStepMetadataTypeDef" = dataclasses.field()

    CallbackToken = field("CallbackToken")
    SqsQueueUrl = field("SqsQueueUrl")

    @cached_property
    def OutputParameters(self):  # pragma: no cover
        return OutputParameter.make_many(self.boto3_raw_data["OutputParameters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CallbackStepMetadataTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CallbackStepMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LambdaStepMetadata:
    boto3_raw_data: "type_defs.LambdaStepMetadataTypeDef" = dataclasses.field()

    Arn = field("Arn")

    @cached_property
    def OutputParameters(self):  # pragma: no cover
        return OutputParameter.make_many(self.boto3_raw_data["OutputParameters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LambdaStepMetadataTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LambdaStepMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SendPipelineExecutionStepSuccessRequest:
    boto3_raw_data: "type_defs.SendPipelineExecutionStepSuccessRequestTypeDef" = (
        dataclasses.field()
    )

    CallbackToken = field("CallbackToken")

    @cached_property
    def OutputParameters(self):  # pragma: no cover
        return OutputParameter.make_many(self.boto3_raw_data["OutputParameters"])

    ClientRequestToken = field("ClientRequestToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SendPipelineExecutionStepSuccessRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SendPipelineExecutionStepSuccessRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CandidateProperties:
    boto3_raw_data: "type_defs.CandidatePropertiesTypeDef" = dataclasses.field()

    @cached_property
    def CandidateArtifactLocations(self):  # pragma: no cover
        return CandidateArtifactLocations.make_one(
            self.boto3_raw_data["CandidateArtifactLocations"]
        )

    @cached_property
    def CandidateMetrics(self):  # pragma: no cover
        return MetricDatum.make_many(self.boto3_raw_data["CandidateMetrics"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CandidatePropertiesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CandidatePropertiesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CanvasAppSettingsOutput:
    boto3_raw_data: "type_defs.CanvasAppSettingsOutputTypeDef" = dataclasses.field()

    @cached_property
    def TimeSeriesForecastingSettings(self):  # pragma: no cover
        return TimeSeriesForecastingSettings.make_one(
            self.boto3_raw_data["TimeSeriesForecastingSettings"]
        )

    @cached_property
    def ModelRegisterSettings(self):  # pragma: no cover
        return ModelRegisterSettings.make_one(
            self.boto3_raw_data["ModelRegisterSettings"]
        )

    @cached_property
    def WorkspaceSettings(self):  # pragma: no cover
        return WorkspaceSettings.make_one(self.boto3_raw_data["WorkspaceSettings"])

    @cached_property
    def IdentityProviderOAuthSettings(self):  # pragma: no cover
        return IdentityProviderOAuthSetting.make_many(
            self.boto3_raw_data["IdentityProviderOAuthSettings"]
        )

    @cached_property
    def DirectDeploySettings(self):  # pragma: no cover
        return DirectDeploySettings.make_one(
            self.boto3_raw_data["DirectDeploySettings"]
        )

    @cached_property
    def KendraSettings(self):  # pragma: no cover
        return KendraSettings.make_one(self.boto3_raw_data["KendraSettings"])

    @cached_property
    def GenerativeAiSettings(self):  # pragma: no cover
        return GenerativeAiSettings.make_one(
            self.boto3_raw_data["GenerativeAiSettings"]
        )

    @cached_property
    def EmrServerlessSettings(self):  # pragma: no cover
        return EmrServerlessSettings.make_one(
            self.boto3_raw_data["EmrServerlessSettings"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CanvasAppSettingsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CanvasAppSettingsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CanvasAppSettings:
    boto3_raw_data: "type_defs.CanvasAppSettingsTypeDef" = dataclasses.field()

    @cached_property
    def TimeSeriesForecastingSettings(self):  # pragma: no cover
        return TimeSeriesForecastingSettings.make_one(
            self.boto3_raw_data["TimeSeriesForecastingSettings"]
        )

    @cached_property
    def ModelRegisterSettings(self):  # pragma: no cover
        return ModelRegisterSettings.make_one(
            self.boto3_raw_data["ModelRegisterSettings"]
        )

    @cached_property
    def WorkspaceSettings(self):  # pragma: no cover
        return WorkspaceSettings.make_one(self.boto3_raw_data["WorkspaceSettings"])

    @cached_property
    def IdentityProviderOAuthSettings(self):  # pragma: no cover
        return IdentityProviderOAuthSetting.make_many(
            self.boto3_raw_data["IdentityProviderOAuthSettings"]
        )

    @cached_property
    def DirectDeploySettings(self):  # pragma: no cover
        return DirectDeploySettings.make_one(
            self.boto3_raw_data["DirectDeploySettings"]
        )

    @cached_property
    def KendraSettings(self):  # pragma: no cover
        return KendraSettings.make_one(self.boto3_raw_data["KendraSettings"])

    @cached_property
    def GenerativeAiSettings(self):  # pragma: no cover
        return GenerativeAiSettings.make_one(
            self.boto3_raw_data["GenerativeAiSettings"]
        )

    @cached_property
    def EmrServerlessSettings(self):  # pragma: no cover
        return EmrServerlessSettings.make_one(
            self.boto3_raw_data["EmrServerlessSettings"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CanvasAppSettingsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CanvasAppSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceGroupMetadata:
    boto3_raw_data: "type_defs.InstanceGroupMetadataTypeDef" = dataclasses.field()

    FailureMessage = field("FailureMessage")
    AvailabilityZoneId = field("AvailabilityZoneId")

    @cached_property
    def CapacityReservation(self):  # pragma: no cover
        return CapacityReservation.make_one(self.boto3_raw_data["CapacityReservation"])

    SubnetId = field("SubnetId")
    SecurityGroupIds = field("SecurityGroupIds")
    AmiOverride = field("AmiOverride")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstanceGroupMetadataTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceGroupMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstanceMetadata:
    boto3_raw_data: "type_defs.InstanceMetadataTypeDef" = dataclasses.field()

    CustomerEni = field("CustomerEni")

    @cached_property
    def AdditionalEnis(self):  # pragma: no cover
        return AdditionalEnis.make_one(self.boto3_raw_data["AdditionalEnis"])

    @cached_property
    def CapacityReservation(self):  # pragma: no cover
        return CapacityReservation.make_one(self.boto3_raw_data["CapacityReservation"])

    FailureMessage = field("FailureMessage")
    LcsExecutionState = field("LcsExecutionState")
    NodeLogicalId = field("NodeLogicalId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.InstanceMetadataTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstanceMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RollingDeploymentPolicy:
    boto3_raw_data: "type_defs.RollingDeploymentPolicyTypeDef" = dataclasses.field()

    @cached_property
    def MaximumBatchSize(self):  # pragma: no cover
        return CapacitySizeConfig.make_one(self.boto3_raw_data["MaximumBatchSize"])

    @cached_property
    def RollbackMaximumBatchSize(self):  # pragma: no cover
        return CapacitySizeConfig.make_one(
            self.boto3_raw_data["RollbackMaximumBatchSize"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RollingDeploymentPolicyTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RollingDeploymentPolicyTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RollingUpdatePolicy:
    boto3_raw_data: "type_defs.RollingUpdatePolicyTypeDef" = dataclasses.field()

    @cached_property
    def MaximumBatchSize(self):  # pragma: no cover
        return CapacitySize.make_one(self.boto3_raw_data["MaximumBatchSize"])

    WaitIntervalInSeconds = field("WaitIntervalInSeconds")
    MaximumExecutionTimeoutInSeconds = field("MaximumExecutionTimeoutInSeconds")

    @cached_property
    def RollbackMaximumBatchSize(self):  # pragma: no cover
        return CapacitySize.make_one(self.boto3_raw_data["RollbackMaximumBatchSize"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RollingUpdatePolicyTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RollingUpdatePolicyTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrafficRoutingConfig:
    boto3_raw_data: "type_defs.TrafficRoutingConfigTypeDef" = dataclasses.field()

    Type = field("Type")
    WaitIntervalInSeconds = field("WaitIntervalInSeconds")

    @cached_property
    def CanarySize(self):  # pragma: no cover
        return CapacitySize.make_one(self.boto3_raw_data["CanarySize"])

    @cached_property
    def LinearStepSize(self):  # pragma: no cover
        return CapacitySize.make_one(self.boto3_raw_data["LinearStepSize"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrafficRoutingConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrafficRoutingConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceExperimentDataStorageConfigOutput:
    boto3_raw_data: "type_defs.InferenceExperimentDataStorageConfigOutputTypeDef" = (
        dataclasses.field()
    )

    Destination = field("Destination")
    KmsKey = field("KmsKey")

    @cached_property
    def ContentType(self):  # pragma: no cover
        return CaptureContentTypeHeaderOutput.make_one(
            self.boto3_raw_data["ContentType"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InferenceExperimentDataStorageConfigOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceExperimentDataStorageConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceExperimentDataStorageConfig:
    boto3_raw_data: "type_defs.InferenceExperimentDataStorageConfigTypeDef" = (
        dataclasses.field()
    )

    Destination = field("Destination")
    KmsKey = field("KmsKey")

    @cached_property
    def ContentType(self):  # pragma: no cover
        return CaptureContentTypeHeader.make_one(self.boto3_raw_data["ContentType"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InferenceExperimentDataStorageConfigTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceExperimentDataStorageConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataCaptureConfigOutput:
    boto3_raw_data: "type_defs.DataCaptureConfigOutputTypeDef" = dataclasses.field()

    InitialSamplingPercentage = field("InitialSamplingPercentage")
    DestinationS3Uri = field("DestinationS3Uri")

    @cached_property
    def CaptureOptions(self):  # pragma: no cover
        return CaptureOption.make_many(self.boto3_raw_data["CaptureOptions"])

    EnableCapture = field("EnableCapture")
    KmsKeyId = field("KmsKeyId")

    @cached_property
    def CaptureContentTypeHeader(self):  # pragma: no cover
        return CaptureContentTypeHeaderOutput.make_one(
            self.boto3_raw_data["CaptureContentTypeHeader"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataCaptureConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataCaptureConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataCaptureConfig:
    boto3_raw_data: "type_defs.DataCaptureConfigTypeDef" = dataclasses.field()

    InitialSamplingPercentage = field("InitialSamplingPercentage")
    DestinationS3Uri = field("DestinationS3Uri")

    @cached_property
    def CaptureOptions(self):  # pragma: no cover
        return CaptureOption.make_many(self.boto3_raw_data["CaptureOptions"])

    EnableCapture = field("EnableCapture")
    KmsKeyId = field("KmsKeyId")

    @cached_property
    def CaptureContentTypeHeader(self):  # pragma: no cover
        return CaptureContentTypeHeader.make_one(
            self.boto3_raw_data["CaptureContentTypeHeader"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DataCaptureConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataCaptureConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnvironmentParameterRangesOutput:
    boto3_raw_data: "type_defs.EnvironmentParameterRangesOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CategoricalParameterRanges(self):  # pragma: no cover
        return CategoricalParameterOutput.make_many(
            self.boto3_raw_data["CategoricalParameterRanges"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.EnvironmentParameterRangesOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnvironmentParameterRangesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnvironmentParameterRanges:
    boto3_raw_data: "type_defs.EnvironmentParameterRangesTypeDef" = dataclasses.field()

    @cached_property
    def CategoricalParameterRanges(self):  # pragma: no cover
        return CategoricalParameter.make_many(
            self.boto3_raw_data["CategoricalParameterRanges"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EnvironmentParameterRangesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnvironmentParameterRangesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CfnCreateTemplateProvider:
    boto3_raw_data: "type_defs.CfnCreateTemplateProviderTypeDef" = dataclasses.field()

    TemplateName = field("TemplateName")
    TemplateURL = field("TemplateURL")
    RoleARN = field("RoleARN")

    @cached_property
    def Parameters(self):  # pragma: no cover
        return CfnStackCreateParameter.make_many(self.boto3_raw_data["Parameters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CfnCreateTemplateProviderTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CfnCreateTemplateProviderTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CfnTemplateProviderDetail:
    boto3_raw_data: "type_defs.CfnTemplateProviderDetailTypeDef" = dataclasses.field()

    TemplateName = field("TemplateName")
    TemplateURL = field("TemplateURL")
    RoleARN = field("RoleARN")

    @cached_property
    def Parameters(self):  # pragma: no cover
        return CfnStackParameter.make_many(self.boto3_raw_data["Parameters"])

    @cached_property
    def StackDetail(self):  # pragma: no cover
        return CfnStackDetail.make_one(self.boto3_raw_data["StackDetail"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CfnTemplateProviderDetailTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CfnTemplateProviderDetailTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CfnUpdateTemplateProvider:
    boto3_raw_data: "type_defs.CfnUpdateTemplateProviderTypeDef" = dataclasses.field()

    TemplateName = field("TemplateName")
    TemplateURL = field("TemplateURL")

    @cached_property
    def Parameters(self):  # pragma: no cover
        return CfnStackUpdateParameter.make_many(self.boto3_raw_data["Parameters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CfnUpdateTemplateProviderTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CfnUpdateTemplateProviderTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClarifyShapConfig:
    boto3_raw_data: "type_defs.ClarifyShapConfigTypeDef" = dataclasses.field()

    @cached_property
    def ShapBaselineConfig(self):  # pragma: no cover
        return ClarifyShapBaselineConfig.make_one(
            self.boto3_raw_data["ShapBaselineConfig"]
        )

    NumberOfSamples = field("NumberOfSamples")
    UseLogit = field("UseLogit")
    Seed = field("Seed")

    @cached_property
    def TextConfig(self):  # pragma: no cover
        return ClarifyTextConfig.make_one(self.boto3_raw_data["TextConfig"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ClarifyShapConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClarifyShapConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClusterInstanceStorageConfig:
    boto3_raw_data: "type_defs.ClusterInstanceStorageConfigTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def EbsVolumeConfig(self):  # pragma: no cover
        return ClusterEbsVolumeConfig.make_one(self.boto3_raw_data["EbsVolumeConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClusterInstanceStorageConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClusterInstanceStorageConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListClusterEventsResponse:
    boto3_raw_data: "type_defs.ListClusterEventsResponseTypeDef" = dataclasses.field()

    @cached_property
    def Events(self):  # pragma: no cover
        return ClusterEventSummary.make_many(self.boto3_raw_data["Events"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListClusterEventsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListClusterEventsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClusterNodeSummary:
    boto3_raw_data: "type_defs.ClusterNodeSummaryTypeDef" = dataclasses.field()

    InstanceGroupName = field("InstanceGroupName")
    InstanceId = field("InstanceId")
    InstanceType = field("InstanceType")
    LaunchTime = field("LaunchTime")

    @cached_property
    def InstanceStatus(self):  # pragma: no cover
        return ClusterInstanceStatusDetails.make_one(
            self.boto3_raw_data["InstanceStatus"]
        )

    NodeLogicalId = field("NodeLogicalId")
    LastSoftwareUpdateTime = field("LastSoftwareUpdateTime")

    @cached_property
    def UltraServerInfo(self):  # pragma: no cover
        return UltraServerInfo.make_one(self.boto3_raw_data["UltraServerInfo"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClusterNodeSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClusterNodeSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClusterOrchestrator:
    boto3_raw_data: "type_defs.ClusterOrchestratorTypeDef" = dataclasses.field()

    @cached_property
    def Eks(self):  # pragma: no cover
        return ClusterOrchestratorEksConfig.make_one(self.boto3_raw_data["Eks"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClusterOrchestratorTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClusterOrchestratorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListClusterSchedulerConfigsResponse:
    boto3_raw_data: "type_defs.ListClusterSchedulerConfigsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ClusterSchedulerConfigSummaries(self):  # pragma: no cover
        return ClusterSchedulerConfigSummary.make_many(
            self.boto3_raw_data["ClusterSchedulerConfigSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListClusterSchedulerConfigsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListClusterSchedulerConfigsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListClustersResponse:
    boto3_raw_data: "type_defs.ListClustersResponseTypeDef" = dataclasses.field()

    @cached_property
    def ClusterSummaries(self):  # pragma: no cover
        return ClusterSummary.make_many(self.boto3_raw_data["ClusterSummaries"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListClustersResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListClustersResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CodeEditorAppImageConfigOutput:
    boto3_raw_data: "type_defs.CodeEditorAppImageConfigOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FileSystemConfig(self):  # pragma: no cover
        return FileSystemConfig.make_one(self.boto3_raw_data["FileSystemConfig"])

    @cached_property
    def ContainerConfig(self):  # pragma: no cover
        return ContainerConfigOutput.make_one(self.boto3_raw_data["ContainerConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CodeEditorAppImageConfigOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CodeEditorAppImageConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class JupyterLabAppImageConfigOutput:
    boto3_raw_data: "type_defs.JupyterLabAppImageConfigOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FileSystemConfig(self):  # pragma: no cover
        return FileSystemConfig.make_one(self.boto3_raw_data["FileSystemConfig"])

    @cached_property
    def ContainerConfig(self):  # pragma: no cover
        return ContainerConfigOutput.make_one(self.boto3_raw_data["ContainerConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.JupyterLabAppImageConfigOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.JupyterLabAppImageConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CodeEditorAppImageConfig:
    boto3_raw_data: "type_defs.CodeEditorAppImageConfigTypeDef" = dataclasses.field()

    @cached_property
    def FileSystemConfig(self):  # pragma: no cover
        return FileSystemConfig.make_one(self.boto3_raw_data["FileSystemConfig"])

    @cached_property
    def ContainerConfig(self):  # pragma: no cover
        return ContainerConfig.make_one(self.boto3_raw_data["ContainerConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CodeEditorAppImageConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CodeEditorAppImageConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class JupyterLabAppImageConfig:
    boto3_raw_data: "type_defs.JupyterLabAppImageConfigTypeDef" = dataclasses.field()

    @cached_property
    def FileSystemConfig(self):  # pragma: no cover
        return FileSystemConfig.make_one(self.boto3_raw_data["FileSystemConfig"])

    @cached_property
    def ContainerConfig(self):  # pragma: no cover
        return ContainerConfig.make_one(self.boto3_raw_data["ContainerConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.JupyterLabAppImageConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.JupyterLabAppImageConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KernelGatewayAppSettingsOutput:
    boto3_raw_data: "type_defs.KernelGatewayAppSettingsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DefaultResourceSpec(self):  # pragma: no cover
        return ResourceSpec.make_one(self.boto3_raw_data["DefaultResourceSpec"])

    @cached_property
    def CustomImages(self):  # pragma: no cover
        return CustomImage.make_many(self.boto3_raw_data["CustomImages"])

    LifecycleConfigArns = field("LifecycleConfigArns")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.KernelGatewayAppSettingsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.KernelGatewayAppSettingsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KernelGatewayAppSettings:
    boto3_raw_data: "type_defs.KernelGatewayAppSettingsTypeDef" = dataclasses.field()

    @cached_property
    def DefaultResourceSpec(self):  # pragma: no cover
        return ResourceSpec.make_one(self.boto3_raw_data["DefaultResourceSpec"])

    @cached_property
    def CustomImages(self):  # pragma: no cover
        return CustomImage.make_many(self.boto3_raw_data["CustomImages"])

    LifecycleConfigArns = field("LifecycleConfigArns")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.KernelGatewayAppSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.KernelGatewayAppSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RSessionAppSettingsOutput:
    boto3_raw_data: "type_defs.RSessionAppSettingsOutputTypeDef" = dataclasses.field()

    @cached_property
    def DefaultResourceSpec(self):  # pragma: no cover
        return ResourceSpec.make_one(self.boto3_raw_data["DefaultResourceSpec"])

    @cached_property
    def CustomImages(self):  # pragma: no cover
        return CustomImage.make_many(self.boto3_raw_data["CustomImages"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RSessionAppSettingsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RSessionAppSettingsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RSessionAppSettings:
    boto3_raw_data: "type_defs.RSessionAppSettingsTypeDef" = dataclasses.field()

    @cached_property
    def DefaultResourceSpec(self):  # pragma: no cover
        return ResourceSpec.make_one(self.boto3_raw_data["DefaultResourceSpec"])

    @cached_property
    def CustomImages(self):  # pragma: no cover
        return CustomImage.make_many(self.boto3_raw_data["CustomImages"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RSessionAppSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RSessionAppSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CodeRepositorySummary:
    boto3_raw_data: "type_defs.CodeRepositorySummaryTypeDef" = dataclasses.field()

    CodeRepositoryName = field("CodeRepositoryName")
    CodeRepositoryArn = field("CodeRepositoryArn")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def GitConfig(self):  # pragma: no cover
        return GitConfig.make_one(self.boto3_raw_data["GitConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CodeRepositorySummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CodeRepositorySummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateCodeRepositoryInput:
    boto3_raw_data: "type_defs.CreateCodeRepositoryInputTypeDef" = dataclasses.field()

    CodeRepositoryName = field("CodeRepositoryName")

    @cached_property
    def GitConfig(self):  # pragma: no cover
        return GitConfig.make_one(self.boto3_raw_data["GitConfig"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateCodeRepositoryInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateCodeRepositoryInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCodeRepositoryOutput:
    boto3_raw_data: "type_defs.DescribeCodeRepositoryOutputTypeDef" = (
        dataclasses.field()
    )

    CodeRepositoryName = field("CodeRepositoryName")
    CodeRepositoryArn = field("CodeRepositoryArn")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def GitConfig(self):  # pragma: no cover
        return GitConfig.make_one(self.boto3_raw_data["GitConfig"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeCodeRepositoryOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCodeRepositoryOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class JupyterServerAppSettingsOutput:
    boto3_raw_data: "type_defs.JupyterServerAppSettingsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DefaultResourceSpec(self):  # pragma: no cover
        return ResourceSpec.make_one(self.boto3_raw_data["DefaultResourceSpec"])

    LifecycleConfigArns = field("LifecycleConfigArns")

    @cached_property
    def CodeRepositories(self):  # pragma: no cover
        return CodeRepository.make_many(self.boto3_raw_data["CodeRepositories"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.JupyterServerAppSettingsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.JupyterServerAppSettingsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class JupyterServerAppSettings:
    boto3_raw_data: "type_defs.JupyterServerAppSettingsTypeDef" = dataclasses.field()

    @cached_property
    def DefaultResourceSpec(self):  # pragma: no cover
        return ResourceSpec.make_one(self.boto3_raw_data["DefaultResourceSpec"])

    LifecycleConfigArns = field("LifecycleConfigArns")

    @cached_property
    def CodeRepositories(self):  # pragma: no cover
        return CodeRepository.make_many(self.boto3_raw_data["CodeRepositories"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.JupyterServerAppSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.JupyterServerAppSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CollectionConfig:
    boto3_raw_data: "type_defs.CollectionConfigTypeDef" = dataclasses.field()

    @cached_property
    def VectorConfig(self):  # pragma: no cover
        return VectorConfig.make_one(self.boto3_raw_data["VectorConfig"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CollectionConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CollectionConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DebugHookConfigOutput:
    boto3_raw_data: "type_defs.DebugHookConfigOutputTypeDef" = dataclasses.field()

    S3OutputPath = field("S3OutputPath")
    LocalPath = field("LocalPath")
    HookParameters = field("HookParameters")

    @cached_property
    def CollectionConfigurations(self):  # pragma: no cover
        return CollectionConfigurationOutput.make_many(
            self.boto3_raw_data["CollectionConfigurations"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DebugHookConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DebugHookConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DebugHookConfig:
    boto3_raw_data: "type_defs.DebugHookConfigTypeDef" = dataclasses.field()

    S3OutputPath = field("S3OutputPath")
    LocalPath = field("LocalPath")
    HookParameters = field("HookParameters")

    @cached_property
    def CollectionConfigurations(self):  # pragma: no cover
        return CollectionConfiguration.make_many(
            self.boto3_raw_data["CollectionConfigurations"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DebugHookConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DebugHookConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListCompilationJobsResponse:
    boto3_raw_data: "type_defs.ListCompilationJobsResponseTypeDef" = dataclasses.field()

    @cached_property
    def CompilationJobSummaries(self):  # pragma: no cover
        return CompilationJobSummary.make_many(
            self.boto3_raw_data["CompilationJobSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListCompilationJobsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListCompilationJobsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ComputeQuotaConfigOutput:
    boto3_raw_data: "type_defs.ComputeQuotaConfigOutputTypeDef" = dataclasses.field()

    @cached_property
    def ComputeQuotaResources(self):  # pragma: no cover
        return ComputeQuotaResourceConfig.make_many(
            self.boto3_raw_data["ComputeQuotaResources"]
        )

    @cached_property
    def ResourceSharingConfig(self):  # pragma: no cover
        return ResourceSharingConfig.make_one(
            self.boto3_raw_data["ResourceSharingConfig"]
        )

    PreemptTeamTasks = field("PreemptTeamTasks")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ComputeQuotaConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ComputeQuotaConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ComputeQuotaConfig:
    boto3_raw_data: "type_defs.ComputeQuotaConfigTypeDef" = dataclasses.field()

    @cached_property
    def ComputeQuotaResources(self):  # pragma: no cover
        return ComputeQuotaResourceConfig.make_many(
            self.boto3_raw_data["ComputeQuotaResources"]
        )

    @cached_property
    def ResourceSharingConfig(self):  # pragma: no cover
        return ResourceSharingConfig.make_one(
            self.boto3_raw_data["ResourceSharingConfig"]
        )

    PreemptTeamTasks = field("PreemptTeamTasks")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ComputeQuotaConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ComputeQuotaConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ContextSummary:
    boto3_raw_data: "type_defs.ContextSummaryTypeDef" = dataclasses.field()

    ContextArn = field("ContextArn")
    ContextName = field("ContextName")

    @cached_property
    def Source(self):  # pragma: no cover
        return ContextSource.make_one(self.boto3_raw_data["Source"])

    ContextType = field("ContextType")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ContextSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ContextSummaryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateContextRequest:
    boto3_raw_data: "type_defs.CreateContextRequestTypeDef" = dataclasses.field()

    ContextName = field("ContextName")

    @cached_property
    def Source(self):  # pragma: no cover
        return ContextSource.make_one(self.boto3_raw_data["Source"])

    ContextType = field("ContextType")
    Description = field("Description")
    Properties = field("Properties")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateContextRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateContextRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TuningJobCompletionCriteria:
    boto3_raw_data: "type_defs.TuningJobCompletionCriteriaTypeDef" = dataclasses.field()

    TargetObjectiveMetricValue = field("TargetObjectiveMetricValue")

    @cached_property
    def BestObjectiveNotImproving(self):  # pragma: no cover
        return BestObjectiveNotImproving.make_one(
            self.boto3_raw_data["BestObjectiveNotImproving"]
        )

    @cached_property
    def ConvergenceDetected(self):  # pragma: no cover
        return ConvergenceDetected.make_one(self.boto3_raw_data["ConvergenceDetected"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TuningJobCompletionCriteriaTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TuningJobCompletionCriteriaTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateActionRequest:
    boto3_raw_data: "type_defs.CreateActionRequestTypeDef" = dataclasses.field()

    ActionName = field("ActionName")

    @cached_property
    def Source(self):  # pragma: no cover
        return ActionSource.make_one(self.boto3_raw_data["Source"])

    ActionType = field("ActionType")
    Description = field("Description")
    Status = field("Status")
    Properties = field("Properties")

    @cached_property
    def MetadataProperties(self):  # pragma: no cover
        return MetadataProperties.make_one(self.boto3_raw_data["MetadataProperties"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateActionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateActionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTrialRequest:
    boto3_raw_data: "type_defs.CreateTrialRequestTypeDef" = dataclasses.field()

    TrialName = field("TrialName")
    ExperimentName = field("ExperimentName")
    DisplayName = field("DisplayName")

    @cached_property
    def MetadataProperties(self):  # pragma: no cover
        return MetadataProperties.make_one(self.boto3_raw_data["MetadataProperties"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateTrialRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTrialRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateDeviceFleetRequest:
    boto3_raw_data: "type_defs.CreateDeviceFleetRequestTypeDef" = dataclasses.field()

    DeviceFleetName = field("DeviceFleetName")

    @cached_property
    def OutputConfig(self):  # pragma: no cover
        return EdgeOutputConfig.make_one(self.boto3_raw_data["OutputConfig"])

    RoleArn = field("RoleArn")
    Description = field("Description")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    EnableIotRoleAlias = field("EnableIotRoleAlias")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateDeviceFleetRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateDeviceFleetRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateEdgePackagingJobRequest:
    boto3_raw_data: "type_defs.CreateEdgePackagingJobRequestTypeDef" = (
        dataclasses.field()
    )

    EdgePackagingJobName = field("EdgePackagingJobName")
    CompilationJobName = field("CompilationJobName")
    ModelName = field("ModelName")
    ModelVersion = field("ModelVersion")
    RoleArn = field("RoleArn")

    @cached_property
    def OutputConfig(self):  # pragma: no cover
        return EdgeOutputConfig.make_one(self.boto3_raw_data["OutputConfig"])

    ResourceKey = field("ResourceKey")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateEdgePackagingJobRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateEdgePackagingJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDeviceFleetResponse:
    boto3_raw_data: "type_defs.DescribeDeviceFleetResponseTypeDef" = dataclasses.field()

    DeviceFleetName = field("DeviceFleetName")
    DeviceFleetArn = field("DeviceFleetArn")

    @cached_property
    def OutputConfig(self):  # pragma: no cover
        return EdgeOutputConfig.make_one(self.boto3_raw_data["OutputConfig"])

    Description = field("Description")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    RoleArn = field("RoleArn")
    IotRoleAlias = field("IotRoleAlias")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeDeviceFleetResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDeviceFleetResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateDeviceFleetRequest:
    boto3_raw_data: "type_defs.UpdateDeviceFleetRequestTypeDef" = dataclasses.field()

    DeviceFleetName = field("DeviceFleetName")

    @cached_property
    def OutputConfig(self):  # pragma: no cover
        return EdgeOutputConfig.make_one(self.boto3_raw_data["OutputConfig"])

    RoleArn = field("RoleArn")
    Description = field("Description")
    EnableIotRoleAlias = field("EnableIotRoleAlias")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateDeviceFleetRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateDeviceFleetRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAliasesRequestPaginate:
    boto3_raw_data: "type_defs.ListAliasesRequestPaginateTypeDef" = dataclasses.field()

    ImageName = field("ImageName")
    Alias = field("Alias")
    Version = field("Version")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListAliasesRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAliasesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAppsRequestPaginate:
    boto3_raw_data: "type_defs.ListAppsRequestPaginateTypeDef" = dataclasses.field()

    SortOrder = field("SortOrder")
    SortBy = field("SortBy")
    DomainIdEquals = field("DomainIdEquals")
    UserProfileNameEquals = field("UserProfileNameEquals")
    SpaceNameEquals = field("SpaceNameEquals")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListAppsRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAppsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListCandidatesForAutoMLJobRequestPaginate:
    boto3_raw_data: "type_defs.ListCandidatesForAutoMLJobRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    AutoMLJobName = field("AutoMLJobName")
    StatusEquals = field("StatusEquals")
    CandidateNameEquals = field("CandidateNameEquals")
    SortOrder = field("SortOrder")
    SortBy = field("SortBy")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListCandidatesForAutoMLJobRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListCandidatesForAutoMLJobRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListDomainsRequestPaginate:
    boto3_raw_data: "type_defs.ListDomainsRequestPaginateTypeDef" = dataclasses.field()

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListDomainsRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListDomainsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListInferenceRecommendationsJobStepsRequestPaginate:
    boto3_raw_data: (
        "type_defs.ListInferenceRecommendationsJobStepsRequestPaginateTypeDef"
    ) = dataclasses.field()

    JobName = field("JobName")
    Status = field("Status")
    StepType = field("StepType")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListInferenceRecommendationsJobStepsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ListInferenceRecommendationsJobStepsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListMonitoringAlertsRequestPaginate:
    boto3_raw_data: "type_defs.ListMonitoringAlertsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    MonitoringScheduleName = field("MonitoringScheduleName")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListMonitoringAlertsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListMonitoringAlertsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListPartnerAppsRequestPaginate:
    boto3_raw_data: "type_defs.ListPartnerAppsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListPartnerAppsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListPartnerAppsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListPipelineExecutionStepsRequestPaginate:
    boto3_raw_data: "type_defs.ListPipelineExecutionStepsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    PipelineExecutionArn = field("PipelineExecutionArn")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListPipelineExecutionStepsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListPipelineExecutionStepsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListPipelineParametersForExecutionRequestPaginate:
    boto3_raw_data: (
        "type_defs.ListPipelineParametersForExecutionRequestPaginateTypeDef"
    ) = dataclasses.field()

    PipelineExecutionArn = field("PipelineExecutionArn")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListPipelineParametersForExecutionRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ListPipelineParametersForExecutionRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListSpacesRequestPaginate:
    boto3_raw_data: "type_defs.ListSpacesRequestPaginateTypeDef" = dataclasses.field()

    SortOrder = field("SortOrder")
    SortBy = field("SortBy")
    DomainIdEquals = field("DomainIdEquals")
    SpaceNameContains = field("SpaceNameContains")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListSpacesRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListSpacesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListStageDevicesRequestPaginate:
    boto3_raw_data: "type_defs.ListStageDevicesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    EdgeDeploymentPlanName = field("EdgeDeploymentPlanName")
    StageName = field("StageName")
    ExcludeDevicesDeployedInOtherStage = field("ExcludeDevicesDeployedInOtherStage")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListStageDevicesRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListStageDevicesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListSubscribedWorkteamsRequestPaginate:
    boto3_raw_data: "type_defs.ListSubscribedWorkteamsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    NameContains = field("NameContains")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListSubscribedWorkteamsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListSubscribedWorkteamsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTagsInputPaginate:
    boto3_raw_data: "type_defs.ListTagsInputPaginateTypeDef" = dataclasses.field()

    ResourceArn = field("ResourceArn")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListTagsInputPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTagsInputPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTrainingJobsForHyperParameterTuningJobRequestPaginate:
    boto3_raw_data: (
        "type_defs.ListTrainingJobsForHyperParameterTuningJobRequestPaginateTypeDef"
    ) = dataclasses.field()

    HyperParameterTuningJobName = field("HyperParameterTuningJobName")
    StatusEquals = field("StatusEquals")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListTrainingJobsForHyperParameterTuningJobRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ListTrainingJobsForHyperParameterTuningJobRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListUltraServersByReservedCapacityRequestPaginate:
    boto3_raw_data: (
        "type_defs.ListUltraServersByReservedCapacityRequestPaginateTypeDef"
    ) = dataclasses.field()

    ReservedCapacityArn = field("ReservedCapacityArn")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListUltraServersByReservedCapacityRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ListUltraServersByReservedCapacityRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListUserProfilesRequestPaginate:
    boto3_raw_data: "type_defs.ListUserProfilesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    SortOrder = field("SortOrder")
    SortBy = field("SortBy")
    DomainIdEquals = field("DomainIdEquals")
    UserProfileNameContains = field("UserProfileNameContains")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListUserProfilesRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListUserProfilesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListWorkforcesRequestPaginate:
    boto3_raw_data: "type_defs.ListWorkforcesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NameContains = field("NameContains")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListWorkforcesRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListWorkforcesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListWorkteamsRequestPaginate:
    boto3_raw_data: "type_defs.ListWorkteamsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NameContains = field("NameContains")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListWorkteamsRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListWorkteamsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateHubContentPresignedUrlsRequestPaginate:
    boto3_raw_data: "type_defs.CreateHubContentPresignedUrlsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    HubName = field("HubName")
    HubContentType = field("HubContentType")
    HubContentName = field("HubContentName")
    HubContentVersion = field("HubContentVersion")

    @cached_property
    def AccessConfig(self):  # pragma: no cover
        return PresignedUrlAccessConfig.make_one(self.boto3_raw_data["AccessConfig"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateHubContentPresignedUrlsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateHubContentPresignedUrlsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateHubContentPresignedUrlsRequest:
    boto3_raw_data: "type_defs.CreateHubContentPresignedUrlsRequestTypeDef" = (
        dataclasses.field()
    )

    HubName = field("HubName")
    HubContentType = field("HubContentType")
    HubContentName = field("HubContentName")
    HubContentVersion = field("HubContentVersion")

    @cached_property
    def AccessConfig(self):  # pragma: no cover
        return PresignedUrlAccessConfig.make_one(self.boto3_raw_data["AccessConfig"])

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateHubContentPresignedUrlsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateHubContentPresignedUrlsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateHubRequest:
    boto3_raw_data: "type_defs.CreateHubRequestTypeDef" = dataclasses.field()

    HubName = field("HubName")
    HubDescription = field("HubDescription")
    HubDisplayName = field("HubDisplayName")
    HubSearchKeywords = field("HubSearchKeywords")

    @cached_property
    def S3StorageConfig(self):  # pragma: no cover
        return HubS3StorageConfig.make_one(self.boto3_raw_data["S3StorageConfig"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CreateHubRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateHubRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeHubResponse:
    boto3_raw_data: "type_defs.DescribeHubResponseTypeDef" = dataclasses.field()

    HubName = field("HubName")
    HubArn = field("HubArn")
    HubDisplayName = field("HubDisplayName")
    HubDescription = field("HubDescription")
    HubSearchKeywords = field("HubSearchKeywords")

    @cached_property
    def S3StorageConfig(self):  # pragma: no cover
        return HubS3StorageConfig.make_one(self.boto3_raw_data["S3StorageConfig"])

    HubStatus = field("HubStatus")
    FailureReason = field("FailureReason")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeHubResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeHubResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateHumanTaskUiRequest:
    boto3_raw_data: "type_defs.CreateHumanTaskUiRequestTypeDef" = dataclasses.field()

    HumanTaskUiName = field("HumanTaskUiName")

    @cached_property
    def UiTemplate(self):  # pragma: no cover
        return UiTemplate.make_one(self.boto3_raw_data["UiTemplate"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateHumanTaskUiRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateHumanTaskUiRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateInferenceComponentRuntimeConfigInput:
    boto3_raw_data: "type_defs.UpdateInferenceComponentRuntimeConfigInputTypeDef" = (
        dataclasses.field()
    )

    InferenceComponentName = field("InferenceComponentName")

    @cached_property
    def DesiredRuntimeConfig(self):  # pragma: no cover
        return InferenceComponentRuntimeConfig.make_one(
            self.boto3_raw_data["DesiredRuntimeConfig"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateInferenceComponentRuntimeConfigInputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateInferenceComponentRuntimeConfigInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateModelCardExportJobRequest:
    boto3_raw_data: "type_defs.CreateModelCardExportJobRequestTypeDef" = (
        dataclasses.field()
    )

    ModelCardName = field("ModelCardName")
    ModelCardExportJobName = field("ModelCardExportJobName")

    @cached_property
    def OutputConfig(self):  # pragma: no cover
        return ModelCardExportOutputConfig.make_one(self.boto3_raw_data["OutputConfig"])

    ModelCardVersion = field("ModelCardVersion")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateModelCardExportJobRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateModelCardExportJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateModelCardRequest:
    boto3_raw_data: "type_defs.CreateModelCardRequestTypeDef" = dataclasses.field()

    ModelCardName = field("ModelCardName")
    Content = field("Content")
    ModelCardStatus = field("ModelCardStatus")

    @cached_property
    def SecurityConfig(self):  # pragma: no cover
        return ModelCardSecurityConfig.make_one(self.boto3_raw_data["SecurityConfig"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateModelCardRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateModelCardRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelPackageSummary:
    boto3_raw_data: "type_defs.ModelPackageSummaryTypeDef" = dataclasses.field()

    ModelPackageArn = field("ModelPackageArn")
    CreationTime = field("CreationTime")
    ModelPackageStatus = field("ModelPackageStatus")
    ModelPackageName = field("ModelPackageName")
    ModelPackageGroupName = field("ModelPackageGroupName")
    ModelPackageVersion = field("ModelPackageVersion")
    ModelPackageDescription = field("ModelPackageDescription")
    ModelApprovalStatus = field("ModelApprovalStatus")

    @cached_property
    def ModelLifeCycle(self):  # pragma: no cover
        return ModelLifeCycle.make_one(self.boto3_raw_data["ModelLifeCycle"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelPackageSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelPackageSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateNotebookInstanceInput:
    boto3_raw_data: "type_defs.CreateNotebookInstanceInputTypeDef" = dataclasses.field()

    NotebookInstanceName = field("NotebookInstanceName")
    InstanceType = field("InstanceType")
    RoleArn = field("RoleArn")
    SubnetId = field("SubnetId")
    SecurityGroupIds = field("SecurityGroupIds")
    IpAddressType = field("IpAddressType")
    KmsKeyId = field("KmsKeyId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    LifecycleConfigName = field("LifecycleConfigName")
    DirectInternetAccess = field("DirectInternetAccess")
    VolumeSizeInGB = field("VolumeSizeInGB")
    AcceleratorTypes = field("AcceleratorTypes")
    DefaultCodeRepository = field("DefaultCodeRepository")
    AdditionalCodeRepositories = field("AdditionalCodeRepositories")
    RootAccess = field("RootAccess")
    PlatformIdentifier = field("PlatformIdentifier")

    @cached_property
    def InstanceMetadataServiceConfiguration(self):  # pragma: no cover
        return InstanceMetadataServiceConfiguration.make_one(
            self.boto3_raw_data["InstanceMetadataServiceConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateNotebookInstanceInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateNotebookInstanceInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNotebookInstanceOutput:
    boto3_raw_data: "type_defs.DescribeNotebookInstanceOutputTypeDef" = (
        dataclasses.field()
    )

    NotebookInstanceArn = field("NotebookInstanceArn")
    NotebookInstanceName = field("NotebookInstanceName")
    NotebookInstanceStatus = field("NotebookInstanceStatus")
    FailureReason = field("FailureReason")
    Url = field("Url")
    InstanceType = field("InstanceType")
    IpAddressType = field("IpAddressType")
    SubnetId = field("SubnetId")
    SecurityGroups = field("SecurityGroups")
    RoleArn = field("RoleArn")
    KmsKeyId = field("KmsKeyId")
    NetworkInterfaceId = field("NetworkInterfaceId")
    LastModifiedTime = field("LastModifiedTime")
    CreationTime = field("CreationTime")
    NotebookInstanceLifecycleConfigName = field("NotebookInstanceLifecycleConfigName")
    DirectInternetAccess = field("DirectInternetAccess")
    VolumeSizeInGB = field("VolumeSizeInGB")
    AcceleratorTypes = field("AcceleratorTypes")
    DefaultCodeRepository = field("DefaultCodeRepository")
    AdditionalCodeRepositories = field("AdditionalCodeRepositories")
    RootAccess = field("RootAccess")
    PlatformIdentifier = field("PlatformIdentifier")

    @cached_property
    def InstanceMetadataServiceConfiguration(self):  # pragma: no cover
        return InstanceMetadataServiceConfiguration.make_one(
            self.boto3_raw_data["InstanceMetadataServiceConfiguration"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeNotebookInstanceOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNotebookInstanceOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateNotebookInstanceInput:
    boto3_raw_data: "type_defs.UpdateNotebookInstanceInputTypeDef" = dataclasses.field()

    NotebookInstanceName = field("NotebookInstanceName")
    InstanceType = field("InstanceType")
    IpAddressType = field("IpAddressType")
    RoleArn = field("RoleArn")
    LifecycleConfigName = field("LifecycleConfigName")
    DisassociateLifecycleConfig = field("DisassociateLifecycleConfig")
    VolumeSizeInGB = field("VolumeSizeInGB")
    DefaultCodeRepository = field("DefaultCodeRepository")
    AdditionalCodeRepositories = field("AdditionalCodeRepositories")
    AcceleratorTypes = field("AcceleratorTypes")
    DisassociateAcceleratorTypes = field("DisassociateAcceleratorTypes")
    DisassociateDefaultCodeRepository = field("DisassociateDefaultCodeRepository")
    DisassociateAdditionalCodeRepositories = field(
        "DisassociateAdditionalCodeRepositories"
    )
    RootAccess = field("RootAccess")

    @cached_property
    def InstanceMetadataServiceConfiguration(self):  # pragma: no cover
        return InstanceMetadataServiceConfiguration.make_one(
            self.boto3_raw_data["InstanceMetadataServiceConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateNotebookInstanceInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateNotebookInstanceInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateNotebookInstanceLifecycleConfigInput:
    boto3_raw_data: "type_defs.CreateNotebookInstanceLifecycleConfigInputTypeDef" = (
        dataclasses.field()
    )

    NotebookInstanceLifecycleConfigName = field("NotebookInstanceLifecycleConfigName")

    @cached_property
    def OnCreate(self):  # pragma: no cover
        return NotebookInstanceLifecycleHook.make_many(self.boto3_raw_data["OnCreate"])

    @cached_property
    def OnStart(self):  # pragma: no cover
        return NotebookInstanceLifecycleHook.make_many(self.boto3_raw_data["OnStart"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateNotebookInstanceLifecycleConfigInputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateNotebookInstanceLifecycleConfigInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNotebookInstanceLifecycleConfigOutput:
    boto3_raw_data: "type_defs.DescribeNotebookInstanceLifecycleConfigOutputTypeDef" = (
        dataclasses.field()
    )

    NotebookInstanceLifecycleConfigArn = field("NotebookInstanceLifecycleConfigArn")
    NotebookInstanceLifecycleConfigName = field("NotebookInstanceLifecycleConfigName")

    @cached_property
    def OnCreate(self):  # pragma: no cover
        return NotebookInstanceLifecycleHook.make_many(self.boto3_raw_data["OnCreate"])

    @cached_property
    def OnStart(self):  # pragma: no cover
        return NotebookInstanceLifecycleHook.make_many(self.boto3_raw_data["OnStart"])

    LastModifiedTime = field("LastModifiedTime")
    CreationTime = field("CreationTime")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNotebookInstanceLifecycleConfigOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNotebookInstanceLifecycleConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateNotebookInstanceLifecycleConfigInput:
    boto3_raw_data: "type_defs.UpdateNotebookInstanceLifecycleConfigInputTypeDef" = (
        dataclasses.field()
    )

    NotebookInstanceLifecycleConfigName = field("NotebookInstanceLifecycleConfigName")

    @cached_property
    def OnCreate(self):  # pragma: no cover
        return NotebookInstanceLifecycleHook.make_many(self.boto3_raw_data["OnCreate"])

    @cached_property
    def OnStart(self):  # pragma: no cover
        return NotebookInstanceLifecycleHook.make_many(self.boto3_raw_data["OnStart"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateNotebookInstanceLifecycleConfigInputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateNotebookInstanceLifecycleConfigInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RetryPipelineExecutionRequest:
    boto3_raw_data: "type_defs.RetryPipelineExecutionRequestTypeDef" = (
        dataclasses.field()
    )

    PipelineExecutionArn = field("PipelineExecutionArn")
    ClientRequestToken = field("ClientRequestToken")

    @cached_property
    def ParallelismConfiguration(self):  # pragma: no cover
        return ParallelismConfiguration.make_one(
            self.boto3_raw_data["ParallelismConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RetryPipelineExecutionRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RetryPipelineExecutionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdatePipelineExecutionRequest:
    boto3_raw_data: "type_defs.UpdatePipelineExecutionRequestTypeDef" = (
        dataclasses.field()
    )

    PipelineExecutionArn = field("PipelineExecutionArn")
    PipelineExecutionDescription = field("PipelineExecutionDescription")
    PipelineExecutionDisplayName = field("PipelineExecutionDisplayName")

    @cached_property
    def ParallelismConfiguration(self):  # pragma: no cover
        return ParallelismConfiguration.make_one(
            self.boto3_raw_data["ParallelismConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdatePipelineExecutionRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdatePipelineExecutionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreatePipelineRequest:
    boto3_raw_data: "type_defs.CreatePipelineRequestTypeDef" = dataclasses.field()

    PipelineName = field("PipelineName")
    ClientRequestToken = field("ClientRequestToken")
    RoleArn = field("RoleArn")
    PipelineDisplayName = field("PipelineDisplayName")
    PipelineDefinition = field("PipelineDefinition")

    @cached_property
    def PipelineDefinitionS3Location(self):  # pragma: no cover
        return PipelineDefinitionS3Location.make_one(
            self.boto3_raw_data["PipelineDefinitionS3Location"]
        )

    PipelineDescription = field("PipelineDescription")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def ParallelismConfiguration(self):  # pragma: no cover
        return ParallelismConfiguration.make_one(
            self.boto3_raw_data["ParallelismConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreatePipelineRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreatePipelineRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdatePipelineRequest:
    boto3_raw_data: "type_defs.UpdatePipelineRequestTypeDef" = dataclasses.field()

    PipelineName = field("PipelineName")
    PipelineDisplayName = field("PipelineDisplayName")
    PipelineDefinition = field("PipelineDefinition")

    @cached_property
    def PipelineDefinitionS3Location(self):  # pragma: no cover
        return PipelineDefinitionS3Location.make_one(
            self.boto3_raw_data["PipelineDefinitionS3Location"]
        )

    PipelineDescription = field("PipelineDescription")
    RoleArn = field("RoleArn")

    @cached_property
    def ParallelismConfiguration(self):  # pragma: no cover
        return ParallelismConfiguration.make_one(
            self.boto3_raw_data["ParallelismConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdatePipelineRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdatePipelineRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceExperimentSchedule:
    boto3_raw_data: "type_defs.InferenceExperimentScheduleTypeDef" = dataclasses.field()

    StartTime = field("StartTime")
    EndTime = field("EndTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InferenceExperimentScheduleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceExperimentScheduleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListActionsRequestPaginate:
    boto3_raw_data: "type_defs.ListActionsRequestPaginateTypeDef" = dataclasses.field()

    SourceUri = field("SourceUri")
    ActionType = field("ActionType")
    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListActionsRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListActionsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListActionsRequest:
    boto3_raw_data: "type_defs.ListActionsRequestTypeDef" = dataclasses.field()

    SourceUri = field("SourceUri")
    ActionType = field("ActionType")
    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListActionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListActionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAlgorithmsInputPaginate:
    boto3_raw_data: "type_defs.ListAlgorithmsInputPaginateTypeDef" = dataclasses.field()

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    NameContains = field("NameContains")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListAlgorithmsInputPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAlgorithmsInputPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAlgorithmsInput:
    boto3_raw_data: "type_defs.ListAlgorithmsInputTypeDef" = dataclasses.field()

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    MaxResults = field("MaxResults")
    NameContains = field("NameContains")
    NextToken = field("NextToken")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListAlgorithmsInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAlgorithmsInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAppImageConfigsRequestPaginate:
    boto3_raw_data: "type_defs.ListAppImageConfigsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")
    ModifiedTimeBefore = field("ModifiedTimeBefore")
    ModifiedTimeAfter = field("ModifiedTimeAfter")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListAppImageConfigsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAppImageConfigsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAppImageConfigsRequest:
    boto3_raw_data: "type_defs.ListAppImageConfigsRequestTypeDef" = dataclasses.field()

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")
    ModifiedTimeBefore = field("ModifiedTimeBefore")
    ModifiedTimeAfter = field("ModifiedTimeAfter")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListAppImageConfigsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAppImageConfigsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListArtifactsRequestPaginate:
    boto3_raw_data: "type_defs.ListArtifactsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    SourceUri = field("SourceUri")
    ArtifactType = field("ArtifactType")
    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListArtifactsRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListArtifactsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListArtifactsRequest:
    boto3_raw_data: "type_defs.ListArtifactsRequestTypeDef" = dataclasses.field()

    SourceUri = field("SourceUri")
    ArtifactType = field("ArtifactType")
    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListArtifactsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListArtifactsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAssociationsRequestPaginate:
    boto3_raw_data: "type_defs.ListAssociationsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    SourceArn = field("SourceArn")
    DestinationArn = field("DestinationArn")
    SourceType = field("SourceType")
    DestinationType = field("DestinationType")
    AssociationType = field("AssociationType")
    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListAssociationsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAssociationsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAssociationsRequest:
    boto3_raw_data: "type_defs.ListAssociationsRequestTypeDef" = dataclasses.field()

    SourceArn = field("SourceArn")
    DestinationArn = field("DestinationArn")
    SourceType = field("SourceType")
    DestinationType = field("DestinationType")
    AssociationType = field("AssociationType")
    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListAssociationsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAssociationsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAutoMLJobsRequestPaginate:
    boto3_raw_data: "type_defs.ListAutoMLJobsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    NameContains = field("NameContains")
    StatusEquals = field("StatusEquals")
    SortOrder = field("SortOrder")
    SortBy = field("SortBy")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListAutoMLJobsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAutoMLJobsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAutoMLJobsRequest:
    boto3_raw_data: "type_defs.ListAutoMLJobsRequestTypeDef" = dataclasses.field()

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    NameContains = field("NameContains")
    StatusEquals = field("StatusEquals")
    SortOrder = field("SortOrder")
    SortBy = field("SortBy")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListAutoMLJobsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAutoMLJobsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListClusterEventsRequestPaginate:
    boto3_raw_data: "type_defs.ListClusterEventsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    ClusterName = field("ClusterName")
    InstanceGroupName = field("InstanceGroupName")
    NodeId = field("NodeId")
    EventTimeAfter = field("EventTimeAfter")
    EventTimeBefore = field("EventTimeBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    ResourceType = field("ResourceType")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListClusterEventsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListClusterEventsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListClusterEventsRequest:
    boto3_raw_data: "type_defs.ListClusterEventsRequestTypeDef" = dataclasses.field()

    ClusterName = field("ClusterName")
    InstanceGroupName = field("InstanceGroupName")
    NodeId = field("NodeId")
    EventTimeAfter = field("EventTimeAfter")
    EventTimeBefore = field("EventTimeBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    ResourceType = field("ResourceType")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListClusterEventsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListClusterEventsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListClusterNodesRequestPaginate:
    boto3_raw_data: "type_defs.ListClusterNodesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    ClusterName = field("ClusterName")
    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    InstanceGroupNameContains = field("InstanceGroupNameContains")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    IncludeNodeLogicalIds = field("IncludeNodeLogicalIds")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListClusterNodesRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListClusterNodesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListClusterNodesRequest:
    boto3_raw_data: "type_defs.ListClusterNodesRequestTypeDef" = dataclasses.field()

    ClusterName = field("ClusterName")
    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    InstanceGroupNameContains = field("InstanceGroupNameContains")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    IncludeNodeLogicalIds = field("IncludeNodeLogicalIds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListClusterNodesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListClusterNodesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListClusterSchedulerConfigsRequestPaginate:
    boto3_raw_data: "type_defs.ListClusterSchedulerConfigsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    NameContains = field("NameContains")
    ClusterArn = field("ClusterArn")
    Status = field("Status")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListClusterSchedulerConfigsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListClusterSchedulerConfigsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListClusterSchedulerConfigsRequest:
    boto3_raw_data: "type_defs.ListClusterSchedulerConfigsRequestTypeDef" = (
        dataclasses.field()
    )

    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    NameContains = field("NameContains")
    ClusterArn = field("ClusterArn")
    Status = field("Status")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListClusterSchedulerConfigsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListClusterSchedulerConfigsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListClustersRequestPaginate:
    boto3_raw_data: "type_defs.ListClustersRequestPaginateTypeDef" = dataclasses.field()

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    NameContains = field("NameContains")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    TrainingPlanArn = field("TrainingPlanArn")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListClustersRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListClustersRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListClustersRequest:
    boto3_raw_data: "type_defs.ListClustersRequestTypeDef" = dataclasses.field()

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    MaxResults = field("MaxResults")
    NameContains = field("NameContains")
    NextToken = field("NextToken")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    TrainingPlanArn = field("TrainingPlanArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListClustersRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListClustersRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListCodeRepositoriesInputPaginate:
    boto3_raw_data: "type_defs.ListCodeRepositoriesInputPaginateTypeDef" = (
        dataclasses.field()
    )

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    NameContains = field("NameContains")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListCodeRepositoriesInputPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListCodeRepositoriesInputPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListCodeRepositoriesInput:
    boto3_raw_data: "type_defs.ListCodeRepositoriesInputTypeDef" = dataclasses.field()

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    MaxResults = field("MaxResults")
    NameContains = field("NameContains")
    NextToken = field("NextToken")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListCodeRepositoriesInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListCodeRepositoriesInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListCompilationJobsRequestPaginate:
    boto3_raw_data: "type_defs.ListCompilationJobsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    NameContains = field("NameContains")
    StatusEquals = field("StatusEquals")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListCompilationJobsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListCompilationJobsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListCompilationJobsRequest:
    boto3_raw_data: "type_defs.ListCompilationJobsRequestTypeDef" = dataclasses.field()

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    NameContains = field("NameContains")
    StatusEquals = field("StatusEquals")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListCompilationJobsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListCompilationJobsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListComputeQuotasRequestPaginate:
    boto3_raw_data: "type_defs.ListComputeQuotasRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    NameContains = field("NameContains")
    Status = field("Status")
    ClusterArn = field("ClusterArn")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListComputeQuotasRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListComputeQuotasRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListComputeQuotasRequest:
    boto3_raw_data: "type_defs.ListComputeQuotasRequestTypeDef" = dataclasses.field()

    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    NameContains = field("NameContains")
    Status = field("Status")
    ClusterArn = field("ClusterArn")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListComputeQuotasRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListComputeQuotasRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListContextsRequestPaginate:
    boto3_raw_data: "type_defs.ListContextsRequestPaginateTypeDef" = dataclasses.field()

    SourceUri = field("SourceUri")
    ContextType = field("ContextType")
    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListContextsRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListContextsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListContextsRequest:
    boto3_raw_data: "type_defs.ListContextsRequestTypeDef" = dataclasses.field()

    SourceUri = field("SourceUri")
    ContextType = field("ContextType")
    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListContextsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListContextsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListDataQualityJobDefinitionsRequestPaginate:
    boto3_raw_data: "type_defs.ListDataQualityJobDefinitionsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    EndpointName = field("EndpointName")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListDataQualityJobDefinitionsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListDataQualityJobDefinitionsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListDataQualityJobDefinitionsRequest:
    boto3_raw_data: "type_defs.ListDataQualityJobDefinitionsRequestTypeDef" = (
        dataclasses.field()
    )

    EndpointName = field("EndpointName")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListDataQualityJobDefinitionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListDataQualityJobDefinitionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListDeviceFleetsRequestPaginate:
    boto3_raw_data: "type_defs.ListDeviceFleetsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    NameContains = field("NameContains")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListDeviceFleetsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListDeviceFleetsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListDeviceFleetsRequest:
    boto3_raw_data: "type_defs.ListDeviceFleetsRequestTypeDef" = dataclasses.field()

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    NameContains = field("NameContains")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListDeviceFleetsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListDeviceFleetsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListDevicesRequestPaginate:
    boto3_raw_data: "type_defs.ListDevicesRequestPaginateTypeDef" = dataclasses.field()

    LatestHeartbeatAfter = field("LatestHeartbeatAfter")
    ModelName = field("ModelName")
    DeviceFleetName = field("DeviceFleetName")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListDevicesRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListDevicesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListDevicesRequest:
    boto3_raw_data: "type_defs.ListDevicesRequestTypeDef" = dataclasses.field()

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    LatestHeartbeatAfter = field("LatestHeartbeatAfter")
    ModelName = field("ModelName")
    DeviceFleetName = field("DeviceFleetName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListDevicesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListDevicesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListEdgeDeploymentPlansRequestPaginate:
    boto3_raw_data: "type_defs.ListEdgeDeploymentPlansRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    NameContains = field("NameContains")
    DeviceFleetNameContains = field("DeviceFleetNameContains")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListEdgeDeploymentPlansRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListEdgeDeploymentPlansRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListEdgeDeploymentPlansRequest:
    boto3_raw_data: "type_defs.ListEdgeDeploymentPlansRequestTypeDef" = (
        dataclasses.field()
    )

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    NameContains = field("NameContains")
    DeviceFleetNameContains = field("DeviceFleetNameContains")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListEdgeDeploymentPlansRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListEdgeDeploymentPlansRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListEdgePackagingJobsRequestPaginate:
    boto3_raw_data: "type_defs.ListEdgePackagingJobsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    NameContains = field("NameContains")
    ModelNameContains = field("ModelNameContains")
    StatusEquals = field("StatusEquals")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListEdgePackagingJobsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListEdgePackagingJobsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListEdgePackagingJobsRequest:
    boto3_raw_data: "type_defs.ListEdgePackagingJobsRequestTypeDef" = (
        dataclasses.field()
    )

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    NameContains = field("NameContains")
    ModelNameContains = field("ModelNameContains")
    StatusEquals = field("StatusEquals")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListEdgePackagingJobsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListEdgePackagingJobsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListEndpointConfigsInputPaginate:
    boto3_raw_data: "type_defs.ListEndpointConfigsInputPaginateTypeDef" = (
        dataclasses.field()
    )

    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListEndpointConfigsInputPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListEndpointConfigsInputPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListEndpointConfigsInput:
    boto3_raw_data: "type_defs.ListEndpointConfigsInputTypeDef" = dataclasses.field()

    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListEndpointConfigsInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListEndpointConfigsInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListEndpointsInputPaginate:
    boto3_raw_data: "type_defs.ListEndpointsInputPaginateTypeDef" = dataclasses.field()

    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    StatusEquals = field("StatusEquals")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListEndpointsInputPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListEndpointsInputPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListEndpointsInput:
    boto3_raw_data: "type_defs.ListEndpointsInputTypeDef" = dataclasses.field()

    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    StatusEquals = field("StatusEquals")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListEndpointsInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListEndpointsInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListExperimentsRequestPaginate:
    boto3_raw_data: "type_defs.ListExperimentsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListExperimentsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListExperimentsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListExperimentsRequest:
    boto3_raw_data: "type_defs.ListExperimentsRequestTypeDef" = dataclasses.field()

    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListExperimentsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListExperimentsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListFeatureGroupsRequestPaginate:
    boto3_raw_data: "type_defs.ListFeatureGroupsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    NameContains = field("NameContains")
    FeatureGroupStatusEquals = field("FeatureGroupStatusEquals")
    OfflineStoreStatusEquals = field("OfflineStoreStatusEquals")
    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    SortOrder = field("SortOrder")
    SortBy = field("SortBy")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListFeatureGroupsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListFeatureGroupsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListFeatureGroupsRequest:
    boto3_raw_data: "type_defs.ListFeatureGroupsRequestTypeDef" = dataclasses.field()

    NameContains = field("NameContains")
    FeatureGroupStatusEquals = field("FeatureGroupStatusEquals")
    OfflineStoreStatusEquals = field("OfflineStoreStatusEquals")
    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    SortOrder = field("SortOrder")
    SortBy = field("SortBy")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListFeatureGroupsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListFeatureGroupsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListFlowDefinitionsRequestPaginate:
    boto3_raw_data: "type_defs.ListFlowDefinitionsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListFlowDefinitionsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListFlowDefinitionsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListFlowDefinitionsRequest:
    boto3_raw_data: "type_defs.ListFlowDefinitionsRequestTypeDef" = dataclasses.field()

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListFlowDefinitionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListFlowDefinitionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListHubContentVersionsRequest:
    boto3_raw_data: "type_defs.ListHubContentVersionsRequestTypeDef" = (
        dataclasses.field()
    )

    HubName = field("HubName")
    HubContentType = field("HubContentType")
    HubContentName = field("HubContentName")
    MinVersion = field("MinVersion")
    MaxSchemaVersion = field("MaxSchemaVersion")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListHubContentVersionsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListHubContentVersionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListHubContentsRequest:
    boto3_raw_data: "type_defs.ListHubContentsRequestTypeDef" = dataclasses.field()

    HubName = field("HubName")
    HubContentType = field("HubContentType")
    NameContains = field("NameContains")
    MaxSchemaVersion = field("MaxSchemaVersion")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListHubContentsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListHubContentsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListHubsRequest:
    boto3_raw_data: "type_defs.ListHubsRequestTypeDef" = dataclasses.field()

    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ListHubsRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ListHubsRequestTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListHumanTaskUisRequestPaginate:
    boto3_raw_data: "type_defs.ListHumanTaskUisRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListHumanTaskUisRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListHumanTaskUisRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListHumanTaskUisRequest:
    boto3_raw_data: "type_defs.ListHumanTaskUisRequestTypeDef" = dataclasses.field()

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListHumanTaskUisRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListHumanTaskUisRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListHyperParameterTuningJobsRequestPaginate:
    boto3_raw_data: "type_defs.ListHyperParameterTuningJobsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NameContains = field("NameContains")
    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    StatusEquals = field("StatusEquals")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListHyperParameterTuningJobsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListHyperParameterTuningJobsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListHyperParameterTuningJobsRequest:
    boto3_raw_data: "type_defs.ListHyperParameterTuningJobsRequestTypeDef" = (
        dataclasses.field()
    )

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NameContains = field("NameContains")
    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    StatusEquals = field("StatusEquals")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListHyperParameterTuningJobsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListHyperParameterTuningJobsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListImageVersionsRequestPaginate:
    boto3_raw_data: "type_defs.ListImageVersionsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    ImageName = field("ImageName")
    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListImageVersionsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListImageVersionsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListImageVersionsRequest:
    boto3_raw_data: "type_defs.ListImageVersionsRequestTypeDef" = dataclasses.field()

    ImageName = field("ImageName")
    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListImageVersionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListImageVersionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListImagesRequestPaginate:
    boto3_raw_data: "type_defs.ListImagesRequestPaginateTypeDef" = dataclasses.field()

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    NameContains = field("NameContains")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListImagesRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListImagesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListImagesRequest:
    boto3_raw_data: "type_defs.ListImagesRequestTypeDef" = dataclasses.field()

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    MaxResults = field("MaxResults")
    NameContains = field("NameContains")
    NextToken = field("NextToken")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ListImagesRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListImagesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListInferenceComponentsInputPaginate:
    boto3_raw_data: "type_defs.ListInferenceComponentsInputPaginateTypeDef" = (
        dataclasses.field()
    )

    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    StatusEquals = field("StatusEquals")
    EndpointNameEquals = field("EndpointNameEquals")
    VariantNameEquals = field("VariantNameEquals")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListInferenceComponentsInputPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListInferenceComponentsInputPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListInferenceComponentsInput:
    boto3_raw_data: "type_defs.ListInferenceComponentsInputTypeDef" = (
        dataclasses.field()
    )

    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    StatusEquals = field("StatusEquals")
    EndpointNameEquals = field("EndpointNameEquals")
    VariantNameEquals = field("VariantNameEquals")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListInferenceComponentsInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListInferenceComponentsInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListInferenceExperimentsRequestPaginate:
    boto3_raw_data: "type_defs.ListInferenceExperimentsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    NameContains = field("NameContains")
    Type = field("Type")
    StatusEquals = field("StatusEquals")
    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListInferenceExperimentsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListInferenceExperimentsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListInferenceExperimentsRequest:
    boto3_raw_data: "type_defs.ListInferenceExperimentsRequestTypeDef" = (
        dataclasses.field()
    )

    NameContains = field("NameContains")
    Type = field("Type")
    StatusEquals = field("StatusEquals")
    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListInferenceExperimentsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListInferenceExperimentsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListInferenceRecommendationsJobsRequestPaginate:
    boto3_raw_data: (
        "type_defs.ListInferenceRecommendationsJobsRequestPaginateTypeDef"
    ) = dataclasses.field()

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    NameContains = field("NameContains")
    StatusEquals = field("StatusEquals")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    ModelNameEquals = field("ModelNameEquals")
    ModelPackageVersionArnEquals = field("ModelPackageVersionArnEquals")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListInferenceRecommendationsJobsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ListInferenceRecommendationsJobsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListInferenceRecommendationsJobsRequest:
    boto3_raw_data: "type_defs.ListInferenceRecommendationsJobsRequestTypeDef" = (
        dataclasses.field()
    )

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    NameContains = field("NameContains")
    StatusEquals = field("StatusEquals")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    ModelNameEquals = field("ModelNameEquals")
    ModelPackageVersionArnEquals = field("ModelPackageVersionArnEquals")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListInferenceRecommendationsJobsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListInferenceRecommendationsJobsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListLabelingJobsForWorkteamRequestPaginate:
    boto3_raw_data: "type_defs.ListLabelingJobsForWorkteamRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    WorkteamArn = field("WorkteamArn")
    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    JobReferenceCodeContains = field("JobReferenceCodeContains")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListLabelingJobsForWorkteamRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListLabelingJobsForWorkteamRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListLabelingJobsForWorkteamRequest:
    boto3_raw_data: "type_defs.ListLabelingJobsForWorkteamRequestTypeDef" = (
        dataclasses.field()
    )

    WorkteamArn = field("WorkteamArn")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    JobReferenceCodeContains = field("JobReferenceCodeContains")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListLabelingJobsForWorkteamRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListLabelingJobsForWorkteamRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListLabelingJobsRequestPaginate:
    boto3_raw_data: "type_defs.ListLabelingJobsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    NameContains = field("NameContains")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    StatusEquals = field("StatusEquals")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListLabelingJobsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListLabelingJobsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListLabelingJobsRequest:
    boto3_raw_data: "type_defs.ListLabelingJobsRequestTypeDef" = dataclasses.field()

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    NameContains = field("NameContains")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    StatusEquals = field("StatusEquals")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListLabelingJobsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListLabelingJobsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListLineageGroupsRequestPaginate:
    boto3_raw_data: "type_defs.ListLineageGroupsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListLineageGroupsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListLineageGroupsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListLineageGroupsRequest:
    boto3_raw_data: "type_defs.ListLineageGroupsRequestTypeDef" = dataclasses.field()

    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListLineageGroupsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListLineageGroupsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListMlflowTrackingServersRequestPaginate:
    boto3_raw_data: "type_defs.ListMlflowTrackingServersRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    TrackingServerStatus = field("TrackingServerStatus")
    MlflowVersion = field("MlflowVersion")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListMlflowTrackingServersRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListMlflowTrackingServersRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListMlflowTrackingServersRequest:
    boto3_raw_data: "type_defs.ListMlflowTrackingServersRequestTypeDef" = (
        dataclasses.field()
    )

    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    TrackingServerStatus = field("TrackingServerStatus")
    MlflowVersion = field("MlflowVersion")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListMlflowTrackingServersRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListMlflowTrackingServersRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelBiasJobDefinitionsRequestPaginate:
    boto3_raw_data: "type_defs.ListModelBiasJobDefinitionsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    EndpointName = field("EndpointName")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListModelBiasJobDefinitionsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelBiasJobDefinitionsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelBiasJobDefinitionsRequest:
    boto3_raw_data: "type_defs.ListModelBiasJobDefinitionsRequestTypeDef" = (
        dataclasses.field()
    )

    EndpointName = field("EndpointName")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListModelBiasJobDefinitionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelBiasJobDefinitionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelCardExportJobsRequestPaginate:
    boto3_raw_data: "type_defs.ListModelCardExportJobsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    ModelCardName = field("ModelCardName")
    ModelCardVersion = field("ModelCardVersion")
    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    ModelCardExportJobNameContains = field("ModelCardExportJobNameContains")
    StatusEquals = field("StatusEquals")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListModelCardExportJobsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelCardExportJobsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelCardExportJobsRequest:
    boto3_raw_data: "type_defs.ListModelCardExportJobsRequestTypeDef" = (
        dataclasses.field()
    )

    ModelCardName = field("ModelCardName")
    ModelCardVersion = field("ModelCardVersion")
    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    ModelCardExportJobNameContains = field("ModelCardExportJobNameContains")
    StatusEquals = field("StatusEquals")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListModelCardExportJobsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelCardExportJobsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelCardVersionsRequestPaginate:
    boto3_raw_data: "type_defs.ListModelCardVersionsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    ModelCardName = field("ModelCardName")
    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    ModelCardStatus = field("ModelCardStatus")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListModelCardVersionsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelCardVersionsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelCardVersionsRequest:
    boto3_raw_data: "type_defs.ListModelCardVersionsRequestTypeDef" = (
        dataclasses.field()
    )

    ModelCardName = field("ModelCardName")
    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    MaxResults = field("MaxResults")
    ModelCardStatus = field("ModelCardStatus")
    NextToken = field("NextToken")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListModelCardVersionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelCardVersionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelCardsRequestPaginate:
    boto3_raw_data: "type_defs.ListModelCardsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    NameContains = field("NameContains")
    ModelCardStatus = field("ModelCardStatus")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListModelCardsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelCardsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelCardsRequest:
    boto3_raw_data: "type_defs.ListModelCardsRequestTypeDef" = dataclasses.field()

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    MaxResults = field("MaxResults")
    NameContains = field("NameContains")
    ModelCardStatus = field("ModelCardStatus")
    NextToken = field("NextToken")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListModelCardsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelCardsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelExplainabilityJobDefinitionsRequestPaginate:
    boto3_raw_data: (
        "type_defs.ListModelExplainabilityJobDefinitionsRequestPaginateTypeDef"
    ) = dataclasses.field()

    EndpointName = field("EndpointName")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListModelExplainabilityJobDefinitionsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ListModelExplainabilityJobDefinitionsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelExplainabilityJobDefinitionsRequest:
    boto3_raw_data: "type_defs.ListModelExplainabilityJobDefinitionsRequestTypeDef" = (
        dataclasses.field()
    )

    EndpointName = field("EndpointName")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListModelExplainabilityJobDefinitionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelExplainabilityJobDefinitionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelPackageGroupsInputPaginate:
    boto3_raw_data: "type_defs.ListModelPackageGroupsInputPaginateTypeDef" = (
        dataclasses.field()
    )

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    NameContains = field("NameContains")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    CrossAccountFilterOption = field("CrossAccountFilterOption")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListModelPackageGroupsInputPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelPackageGroupsInputPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelPackageGroupsInput:
    boto3_raw_data: "type_defs.ListModelPackageGroupsInputTypeDef" = dataclasses.field()

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    MaxResults = field("MaxResults")
    NameContains = field("NameContains")
    NextToken = field("NextToken")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    CrossAccountFilterOption = field("CrossAccountFilterOption")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListModelPackageGroupsInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelPackageGroupsInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelPackagesInputPaginate:
    boto3_raw_data: "type_defs.ListModelPackagesInputPaginateTypeDef" = (
        dataclasses.field()
    )

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    NameContains = field("NameContains")
    ModelApprovalStatus = field("ModelApprovalStatus")
    ModelPackageGroupName = field("ModelPackageGroupName")
    ModelPackageType = field("ModelPackageType")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListModelPackagesInputPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelPackagesInputPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelPackagesInput:
    boto3_raw_data: "type_defs.ListModelPackagesInputTypeDef" = dataclasses.field()

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    MaxResults = field("MaxResults")
    NameContains = field("NameContains")
    ModelApprovalStatus = field("ModelApprovalStatus")
    ModelPackageGroupName = field("ModelPackageGroupName")
    ModelPackageType = field("ModelPackageType")
    NextToken = field("NextToken")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListModelPackagesInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelPackagesInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelQualityJobDefinitionsRequestPaginate:
    boto3_raw_data: "type_defs.ListModelQualityJobDefinitionsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    EndpointName = field("EndpointName")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListModelQualityJobDefinitionsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelQualityJobDefinitionsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelQualityJobDefinitionsRequest:
    boto3_raw_data: "type_defs.ListModelQualityJobDefinitionsRequestTypeDef" = (
        dataclasses.field()
    )

    EndpointName = field("EndpointName")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListModelQualityJobDefinitionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelQualityJobDefinitionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelsInputPaginate:
    boto3_raw_data: "type_defs.ListModelsInputPaginateTypeDef" = dataclasses.field()

    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListModelsInputPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelsInputPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelsInput:
    boto3_raw_data: "type_defs.ListModelsInputTypeDef" = dataclasses.field()

    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ListModelsInputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ListModelsInputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListMonitoringAlertHistoryRequestPaginate:
    boto3_raw_data: "type_defs.ListMonitoringAlertHistoryRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    MonitoringScheduleName = field("MonitoringScheduleName")
    MonitoringAlertName = field("MonitoringAlertName")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")
    StatusEquals = field("StatusEquals")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListMonitoringAlertHistoryRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListMonitoringAlertHistoryRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListMonitoringAlertHistoryRequest:
    boto3_raw_data: "type_defs.ListMonitoringAlertHistoryRequestTypeDef" = (
        dataclasses.field()
    )

    MonitoringScheduleName = field("MonitoringScheduleName")
    MonitoringAlertName = field("MonitoringAlertName")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")
    StatusEquals = field("StatusEquals")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListMonitoringAlertHistoryRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListMonitoringAlertHistoryRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListMonitoringExecutionsRequestPaginate:
    boto3_raw_data: "type_defs.ListMonitoringExecutionsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    MonitoringScheduleName = field("MonitoringScheduleName")
    EndpointName = field("EndpointName")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    ScheduledTimeBefore = field("ScheduledTimeBefore")
    ScheduledTimeAfter = field("ScheduledTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    StatusEquals = field("StatusEquals")
    MonitoringJobDefinitionName = field("MonitoringJobDefinitionName")
    MonitoringTypeEquals = field("MonitoringTypeEquals")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListMonitoringExecutionsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListMonitoringExecutionsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListMonitoringExecutionsRequest:
    boto3_raw_data: "type_defs.ListMonitoringExecutionsRequestTypeDef" = (
        dataclasses.field()
    )

    MonitoringScheduleName = field("MonitoringScheduleName")
    EndpointName = field("EndpointName")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    ScheduledTimeBefore = field("ScheduledTimeBefore")
    ScheduledTimeAfter = field("ScheduledTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    StatusEquals = field("StatusEquals")
    MonitoringJobDefinitionName = field("MonitoringJobDefinitionName")
    MonitoringTypeEquals = field("MonitoringTypeEquals")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListMonitoringExecutionsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListMonitoringExecutionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListMonitoringSchedulesRequestPaginate:
    boto3_raw_data: "type_defs.ListMonitoringSchedulesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    EndpointName = field("EndpointName")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    StatusEquals = field("StatusEquals")
    MonitoringJobDefinitionName = field("MonitoringJobDefinitionName")
    MonitoringTypeEquals = field("MonitoringTypeEquals")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListMonitoringSchedulesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListMonitoringSchedulesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListMonitoringSchedulesRequest:
    boto3_raw_data: "type_defs.ListMonitoringSchedulesRequestTypeDef" = (
        dataclasses.field()
    )

    EndpointName = field("EndpointName")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    StatusEquals = field("StatusEquals")
    MonitoringJobDefinitionName = field("MonitoringJobDefinitionName")
    MonitoringTypeEquals = field("MonitoringTypeEquals")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListMonitoringSchedulesRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListMonitoringSchedulesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListNotebookInstanceLifecycleConfigsInputPaginate:
    boto3_raw_data: (
        "type_defs.ListNotebookInstanceLifecycleConfigsInputPaginateTypeDef"
    ) = dataclasses.field()

    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListNotebookInstanceLifecycleConfigsInputPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ListNotebookInstanceLifecycleConfigsInputPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListNotebookInstanceLifecycleConfigsInput:
    boto3_raw_data: "type_defs.ListNotebookInstanceLifecycleConfigsInputTypeDef" = (
        dataclasses.field()
    )

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListNotebookInstanceLifecycleConfigsInputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListNotebookInstanceLifecycleConfigsInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListNotebookInstancesInputPaginate:
    boto3_raw_data: "type_defs.ListNotebookInstancesInputPaginateTypeDef" = (
        dataclasses.field()
    )

    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    StatusEquals = field("StatusEquals")
    NotebookInstanceLifecycleConfigNameContains = field(
        "NotebookInstanceLifecycleConfigNameContains"
    )
    DefaultCodeRepositoryContains = field("DefaultCodeRepositoryContains")
    AdditionalCodeRepositoryEquals = field("AdditionalCodeRepositoryEquals")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListNotebookInstancesInputPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListNotebookInstancesInputPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListNotebookInstancesInput:
    boto3_raw_data: "type_defs.ListNotebookInstancesInputTypeDef" = dataclasses.field()

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NameContains = field("NameContains")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    StatusEquals = field("StatusEquals")
    NotebookInstanceLifecycleConfigNameContains = field(
        "NotebookInstanceLifecycleConfigNameContains"
    )
    DefaultCodeRepositoryContains = field("DefaultCodeRepositoryContains")
    AdditionalCodeRepositoryEquals = field("AdditionalCodeRepositoryEquals")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListNotebookInstancesInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListNotebookInstancesInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListOptimizationJobsRequestPaginate:
    boto3_raw_data: "type_defs.ListOptimizationJobsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    OptimizationContains = field("OptimizationContains")
    NameContains = field("NameContains")
    StatusEquals = field("StatusEquals")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListOptimizationJobsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListOptimizationJobsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListOptimizationJobsRequest:
    boto3_raw_data: "type_defs.ListOptimizationJobsRequestTypeDef" = dataclasses.field()

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    OptimizationContains = field("OptimizationContains")
    NameContains = field("NameContains")
    StatusEquals = field("StatusEquals")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListOptimizationJobsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListOptimizationJobsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListPipelineExecutionsRequestPaginate:
    boto3_raw_data: "type_defs.ListPipelineExecutionsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    PipelineName = field("PipelineName")
    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListPipelineExecutionsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListPipelineExecutionsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListPipelineExecutionsRequest:
    boto3_raw_data: "type_defs.ListPipelineExecutionsRequestTypeDef" = (
        dataclasses.field()
    )

    PipelineName = field("PipelineName")
    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListPipelineExecutionsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListPipelineExecutionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListPipelineVersionsRequestPaginate:
    boto3_raw_data: "type_defs.ListPipelineVersionsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    PipelineName = field("PipelineName")
    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListPipelineVersionsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListPipelineVersionsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListPipelineVersionsRequest:
    boto3_raw_data: "type_defs.ListPipelineVersionsRequestTypeDef" = dataclasses.field()

    PipelineName = field("PipelineName")
    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListPipelineVersionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListPipelineVersionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListPipelinesRequestPaginate:
    boto3_raw_data: "type_defs.ListPipelinesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    PipelineNamePrefix = field("PipelineNamePrefix")
    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListPipelinesRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListPipelinesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListPipelinesRequest:
    boto3_raw_data: "type_defs.ListPipelinesRequestTypeDef" = dataclasses.field()

    PipelineNamePrefix = field("PipelineNamePrefix")
    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListPipelinesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListPipelinesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListProcessingJobsRequestPaginate:
    boto3_raw_data: "type_defs.ListProcessingJobsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    NameContains = field("NameContains")
    StatusEquals = field("StatusEquals")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListProcessingJobsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListProcessingJobsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListProcessingJobsRequest:
    boto3_raw_data: "type_defs.ListProcessingJobsRequestTypeDef" = dataclasses.field()

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    NameContains = field("NameContains")
    StatusEquals = field("StatusEquals")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListProcessingJobsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListProcessingJobsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListProjectsInput:
    boto3_raw_data: "type_defs.ListProjectsInputTypeDef" = dataclasses.field()

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    MaxResults = field("MaxResults")
    NameContains = field("NameContains")
    NextToken = field("NextToken")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ListProjectsInputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListProjectsInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListResourceCatalogsRequestPaginate:
    boto3_raw_data: "type_defs.ListResourceCatalogsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    NameContains = field("NameContains")
    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    SortOrder = field("SortOrder")
    SortBy = field("SortBy")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListResourceCatalogsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListResourceCatalogsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListResourceCatalogsRequest:
    boto3_raw_data: "type_defs.ListResourceCatalogsRequestTypeDef" = dataclasses.field()

    NameContains = field("NameContains")
    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    SortOrder = field("SortOrder")
    SortBy = field("SortBy")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListResourceCatalogsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListResourceCatalogsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListStudioLifecycleConfigsRequestPaginate:
    boto3_raw_data: "type_defs.ListStudioLifecycleConfigsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    NameContains = field("NameContains")
    AppTypeEquals = field("AppTypeEquals")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")
    ModifiedTimeBefore = field("ModifiedTimeBefore")
    ModifiedTimeAfter = field("ModifiedTimeAfter")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListStudioLifecycleConfigsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListStudioLifecycleConfigsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListStudioLifecycleConfigsRequest:
    boto3_raw_data: "type_defs.ListStudioLifecycleConfigsRequestTypeDef" = (
        dataclasses.field()
    )

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    NameContains = field("NameContains")
    AppTypeEquals = field("AppTypeEquals")
    CreationTimeBefore = field("CreationTimeBefore")
    CreationTimeAfter = field("CreationTimeAfter")
    ModifiedTimeBefore = field("ModifiedTimeBefore")
    ModifiedTimeAfter = field("ModifiedTimeAfter")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListStudioLifecycleConfigsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListStudioLifecycleConfigsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTrainingJobsRequestPaginate:
    boto3_raw_data: "type_defs.ListTrainingJobsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    NameContains = field("NameContains")
    StatusEquals = field("StatusEquals")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    WarmPoolStatusEquals = field("WarmPoolStatusEquals")
    TrainingPlanArnEquals = field("TrainingPlanArnEquals")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListTrainingJobsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTrainingJobsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTrainingJobsRequest:
    boto3_raw_data: "type_defs.ListTrainingJobsRequestTypeDef" = dataclasses.field()

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    NameContains = field("NameContains")
    StatusEquals = field("StatusEquals")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    WarmPoolStatusEquals = field("WarmPoolStatusEquals")
    TrainingPlanArnEquals = field("TrainingPlanArnEquals")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListTrainingJobsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTrainingJobsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTransformJobsRequestPaginate:
    boto3_raw_data: "type_defs.ListTransformJobsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    NameContains = field("NameContains")
    StatusEquals = field("StatusEquals")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListTransformJobsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTransformJobsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTransformJobsRequest:
    boto3_raw_data: "type_defs.ListTransformJobsRequestTypeDef" = dataclasses.field()

    CreationTimeAfter = field("CreationTimeAfter")
    CreationTimeBefore = field("CreationTimeBefore")
    LastModifiedTimeAfter = field("LastModifiedTimeAfter")
    LastModifiedTimeBefore = field("LastModifiedTimeBefore")
    NameContains = field("NameContains")
    StatusEquals = field("StatusEquals")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListTransformJobsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTransformJobsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTrialComponentsRequestPaginate:
    boto3_raw_data: "type_defs.ListTrialComponentsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    ExperimentName = field("ExperimentName")
    TrialName = field("TrialName")
    SourceArn = field("SourceArn")
    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListTrialComponentsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTrialComponentsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTrialComponentsRequest:
    boto3_raw_data: "type_defs.ListTrialComponentsRequestTypeDef" = dataclasses.field()

    ExperimentName = field("ExperimentName")
    TrialName = field("TrialName")
    SourceArn = field("SourceArn")
    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListTrialComponentsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTrialComponentsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTrialsRequestPaginate:
    boto3_raw_data: "type_defs.ListTrialsRequestPaginateTypeDef" = dataclasses.field()

    ExperimentName = field("ExperimentName")
    TrialComponentName = field("TrialComponentName")
    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListTrialsRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTrialsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTrialsRequest:
    boto3_raw_data: "type_defs.ListTrialsRequestTypeDef" = dataclasses.field()

    ExperimentName = field("ExperimentName")
    TrialComponentName = field("TrialComponentName")
    CreatedAfter = field("CreatedAfter")
    CreatedBefore = field("CreatedBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ListTrialsRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTrialsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class QueryFilters:
    boto3_raw_data: "type_defs.QueryFiltersTypeDef" = dataclasses.field()

    Types = field("Types")
    LineageTypes = field("LineageTypes")
    CreatedBefore = field("CreatedBefore")
    CreatedAfter = field("CreatedAfter")
    ModifiedBefore = field("ModifiedBefore")
    ModifiedAfter = field("ModifiedAfter")
    Properties = field("Properties")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.QueryFiltersTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.QueryFiltersTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchTrainingPlanOfferingsRequest:
    boto3_raw_data: "type_defs.SearchTrainingPlanOfferingsRequestTypeDef" = (
        dataclasses.field()
    )

    DurationHours = field("DurationHours")
    TargetResources = field("TargetResources")
    InstanceType = field("InstanceType")
    InstanceCount = field("InstanceCount")
    UltraServerType = field("UltraServerType")
    UltraServerCount = field("UltraServerCount")
    StartTimeAfter = field("StartTimeAfter")
    EndTimeBefore = field("EndTimeBefore")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SearchTrainingPlanOfferingsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchTrainingPlanOfferingsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTrialComponentRequest:
    boto3_raw_data: "type_defs.CreateTrialComponentRequestTypeDef" = dataclasses.field()

    TrialComponentName = field("TrialComponentName")
    DisplayName = field("DisplayName")

    @cached_property
    def Status(self):  # pragma: no cover
        return TrialComponentStatus.make_one(self.boto3_raw_data["Status"])

    StartTime = field("StartTime")
    EndTime = field("EndTime")
    Parameters = field("Parameters")
    InputArtifacts = field("InputArtifacts")
    OutputArtifacts = field("OutputArtifacts")

    @cached_property
    def MetadataProperties(self):  # pragma: no cover
        return MetadataProperties.make_one(self.boto3_raw_data["MetadataProperties"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateTrialComponentRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTrialComponentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateTrialComponentRequest:
    boto3_raw_data: "type_defs.UpdateTrialComponentRequestTypeDef" = dataclasses.field()

    TrialComponentName = field("TrialComponentName")
    DisplayName = field("DisplayName")

    @cached_property
    def Status(self):  # pragma: no cover
        return TrialComponentStatus.make_one(self.boto3_raw_data["Status"])

    StartTime = field("StartTime")
    EndTime = field("EndTime")
    Parameters = field("Parameters")
    ParametersToRemove = field("ParametersToRemove")
    InputArtifacts = field("InputArtifacts")
    InputArtifactsToRemove = field("InputArtifactsToRemove")
    OutputArtifacts = field("OutputArtifacts")
    OutputArtifactsToRemove = field("OutputArtifactsToRemove")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateTrialComponentRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateTrialComponentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomFileSystemConfig:
    boto3_raw_data: "type_defs.CustomFileSystemConfigTypeDef" = dataclasses.field()

    @cached_property
    def EFSFileSystemConfig(self):  # pragma: no cover
        return EFSFileSystemConfig.make_one(self.boto3_raw_data["EFSFileSystemConfig"])

    @cached_property
    def FSxLustreFileSystemConfig(self):  # pragma: no cover
        return FSxLustreFileSystemConfig.make_one(
            self.boto3_raw_data["FSxLustreFileSystemConfig"]
        )

    @cached_property
    def S3FileSystemConfig(self):  # pragma: no cover
        return S3FileSystemConfig.make_one(self.boto3_raw_data["S3FileSystemConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CustomFileSystemConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomFileSystemConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomFileSystem:
    boto3_raw_data: "type_defs.CustomFileSystemTypeDef" = dataclasses.field()

    @cached_property
    def EFSFileSystem(self):  # pragma: no cover
        return EFSFileSystem.make_one(self.boto3_raw_data["EFSFileSystem"])

    @cached_property
    def FSxLustreFileSystem(self):  # pragma: no cover
        return FSxLustreFileSystem.make_one(self.boto3_raw_data["FSxLustreFileSystem"])

    @cached_property
    def S3FileSystem(self):  # pragma: no cover
        return S3FileSystem.make_one(self.boto3_raw_data["S3FileSystem"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CustomFileSystemTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomFileSystemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelBiasBaselineConfig:
    boto3_raw_data: "type_defs.ModelBiasBaselineConfigTypeDef" = dataclasses.field()

    BaseliningJobName = field("BaseliningJobName")

    @cached_property
    def ConstraintsResource(self):  # pragma: no cover
        return MonitoringConstraintsResource.make_one(
            self.boto3_raw_data["ConstraintsResource"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelBiasBaselineConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelBiasBaselineConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelExplainabilityBaselineConfig:
    boto3_raw_data: "type_defs.ModelExplainabilityBaselineConfigTypeDef" = (
        dataclasses.field()
    )

    BaseliningJobName = field("BaseliningJobName")

    @cached_property
    def ConstraintsResource(self):  # pragma: no cover
        return MonitoringConstraintsResource.make_one(
            self.boto3_raw_data["ConstraintsResource"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModelExplainabilityBaselineConfigTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelExplainabilityBaselineConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelQualityBaselineConfig:
    boto3_raw_data: "type_defs.ModelQualityBaselineConfigTypeDef" = dataclasses.field()

    BaseliningJobName = field("BaseliningJobName")

    @cached_property
    def ConstraintsResource(self):  # pragma: no cover
        return MonitoringConstraintsResource.make_one(
            self.boto3_raw_data["ConstraintsResource"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelQualityBaselineConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelQualityBaselineConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataQualityBaselineConfig:
    boto3_raw_data: "type_defs.DataQualityBaselineConfigTypeDef" = dataclasses.field()

    BaseliningJobName = field("BaseliningJobName")

    @cached_property
    def ConstraintsResource(self):  # pragma: no cover
        return MonitoringConstraintsResource.make_one(
            self.boto3_raw_data["ConstraintsResource"]
        )

    @cached_property
    def StatisticsResource(self):  # pragma: no cover
        return MonitoringStatisticsResource.make_one(
            self.boto3_raw_data["StatisticsResource"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataQualityBaselineConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataQualityBaselineConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringBaselineConfig:
    boto3_raw_data: "type_defs.MonitoringBaselineConfigTypeDef" = dataclasses.field()

    BaseliningJobName = field("BaseliningJobName")

    @cached_property
    def ConstraintsResource(self):  # pragma: no cover
        return MonitoringConstraintsResource.make_one(
            self.boto3_raw_data["ConstraintsResource"]
        )

    @cached_property
    def StatisticsResource(self):  # pragma: no cover
        return MonitoringStatisticsResource.make_one(
            self.boto3_raw_data["StatisticsResource"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MonitoringBaselineConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringBaselineConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DatasetDefinition:
    boto3_raw_data: "type_defs.DatasetDefinitionTypeDef" = dataclasses.field()

    @cached_property
    def AthenaDatasetDefinition(self):  # pragma: no cover
        return AthenaDatasetDefinition.make_one(
            self.boto3_raw_data["AthenaDatasetDefinition"]
        )

    @cached_property
    def RedshiftDatasetDefinition(self):  # pragma: no cover
        return RedshiftDatasetDefinition.make_one(
            self.boto3_raw_data["RedshiftDatasetDefinition"]
        )

    LocalPath = field("LocalPath")
    DataDistributionType = field("DataDistributionType")
    InputMode = field("InputMode")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DatasetDefinitionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DatasetDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DefaultSpaceStorageSettings:
    boto3_raw_data: "type_defs.DefaultSpaceStorageSettingsTypeDef" = dataclasses.field()

    @cached_property
    def DefaultEbsStorageSettings(self):  # pragma: no cover
        return DefaultEbsStorageSettings.make_one(
            self.boto3_raw_data["DefaultEbsStorageSettings"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DefaultSpaceStorageSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DefaultSpaceStorageSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteDomainRequest:
    boto3_raw_data: "type_defs.DeleteDomainRequestTypeDef" = dataclasses.field()

    DomainId = field("DomainId")

    @cached_property
    def RetentionPolicy(self):  # pragma: no cover
        return RetentionPolicy.make_one(self.boto3_raw_data["RetentionPolicy"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteDomainRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteDomainRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceComponentContainerSpecificationSummary:
    boto3_raw_data: (
        "type_defs.InferenceComponentContainerSpecificationSummaryTypeDef"
    ) = dataclasses.field()

    @cached_property
    def DeployedImage(self):  # pragma: no cover
        return DeployedImage.make_one(self.boto3_raw_data["DeployedImage"])

    ArtifactUrl = field("ArtifactUrl")
    Environment = field("Environment")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InferenceComponentContainerSpecificationSummaryTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.InferenceComponentContainerSpecificationSummaryTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeploymentRecommendation:
    boto3_raw_data: "type_defs.DeploymentRecommendationTypeDef" = dataclasses.field()

    RecommendationStatus = field("RecommendationStatus")

    @cached_property
    def RealTimeInferenceRecommendations(self):  # pragma: no cover
        return RealTimeInferenceRecommendation.make_many(
            self.boto3_raw_data["RealTimeInferenceRecommendations"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeploymentRecommendationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeploymentRecommendationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeploymentStageStatusSummary:
    boto3_raw_data: "type_defs.DeploymentStageStatusSummaryTypeDef" = (
        dataclasses.field()
    )

    StageName = field("StageName")

    @cached_property
    def DeviceSelectionConfig(self):  # pragma: no cover
        return DeviceSelectionConfigOutput.make_one(
            self.boto3_raw_data["DeviceSelectionConfig"]
        )

    @cached_property
    def DeploymentConfig(self):  # pragma: no cover
        return EdgeDeploymentConfig.make_one(self.boto3_raw_data["DeploymentConfig"])

    @cached_property
    def DeploymentStatus(self):  # pragma: no cover
        return EdgeDeploymentStatus.make_one(self.boto3_raw_data["DeploymentStatus"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeploymentStageStatusSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeploymentStageStatusSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDeviceResponse:
    boto3_raw_data: "type_defs.DescribeDeviceResponseTypeDef" = dataclasses.field()

    DeviceArn = field("DeviceArn")
    DeviceName = field("DeviceName")
    Description = field("Description")
    DeviceFleetName = field("DeviceFleetName")
    IotThingName = field("IotThingName")
    RegistrationTime = field("RegistrationTime")
    LatestHeartbeat = field("LatestHeartbeat")

    @cached_property
    def Models(self):  # pragma: no cover
        return EdgeModel.make_many(self.boto3_raw_data["Models"])

    MaxModels = field("MaxModels")
    AgentVersion = field("AgentVersion")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeDeviceResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDeviceResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeEdgePackagingJobResponse:
    boto3_raw_data: "type_defs.DescribeEdgePackagingJobResponseTypeDef" = (
        dataclasses.field()
    )

    EdgePackagingJobArn = field("EdgePackagingJobArn")
    EdgePackagingJobName = field("EdgePackagingJobName")
    CompilationJobName = field("CompilationJobName")
    ModelName = field("ModelName")
    ModelVersion = field("ModelVersion")
    RoleArn = field("RoleArn")

    @cached_property
    def OutputConfig(self):  # pragma: no cover
        return EdgeOutputConfig.make_one(self.boto3_raw_data["OutputConfig"])

    ResourceKey = field("ResourceKey")
    EdgePackagingJobStatus = field("EdgePackagingJobStatus")
    EdgePackagingJobStatusMessage = field("EdgePackagingJobStatusMessage")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    ModelArtifact = field("ModelArtifact")
    ModelSignature = field("ModelSignature")

    @cached_property
    def PresetDeploymentOutput(self):  # pragma: no cover
        return EdgePresetDeploymentOutput.make_one(
            self.boto3_raw_data["PresetDeploymentOutput"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeEdgePackagingJobResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeEdgePackagingJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeEndpointInputWaitExtra:
    boto3_raw_data: "type_defs.DescribeEndpointInputWaitExtraTypeDef" = (
        dataclasses.field()
    )

    EndpointName = field("EndpointName")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeEndpointInputWaitExtraTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeEndpointInputWaitExtraTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeEndpointInputWait:
    boto3_raw_data: "type_defs.DescribeEndpointInputWaitTypeDef" = dataclasses.field()

    EndpointName = field("EndpointName")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeEndpointInputWaitTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeEndpointInputWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImageRequestWaitExtraExtra:
    boto3_raw_data: "type_defs.DescribeImageRequestWaitExtraExtraTypeDef" = (
        dataclasses.field()
    )

    ImageName = field("ImageName")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeImageRequestWaitExtraExtraTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImageRequestWaitExtraExtraTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImageRequestWaitExtra:
    boto3_raw_data: "type_defs.DescribeImageRequestWaitExtraTypeDef" = (
        dataclasses.field()
    )

    ImageName = field("ImageName")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeImageRequestWaitExtraTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImageRequestWaitExtraTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImageRequestWait:
    boto3_raw_data: "type_defs.DescribeImageRequestWaitTypeDef" = dataclasses.field()

    ImageName = field("ImageName")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeImageRequestWaitTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImageRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImageVersionRequestWaitExtra:
    boto3_raw_data: "type_defs.DescribeImageVersionRequestWaitExtraTypeDef" = (
        dataclasses.field()
    )

    ImageName = field("ImageName")
    Version = field("Version")
    Alias = field("Alias")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeImageVersionRequestWaitExtraTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImageVersionRequestWaitExtraTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeImageVersionRequestWait:
    boto3_raw_data: "type_defs.DescribeImageVersionRequestWaitTypeDef" = (
        dataclasses.field()
    )

    ImageName = field("ImageName")
    Version = field("Version")
    Alias = field("Alias")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeImageVersionRequestWaitTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeImageVersionRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNotebookInstanceInputWaitExtraExtra:
    boto3_raw_data: "type_defs.DescribeNotebookInstanceInputWaitExtraExtraTypeDef" = (
        dataclasses.field()
    )

    NotebookInstanceName = field("NotebookInstanceName")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNotebookInstanceInputWaitExtraExtraTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNotebookInstanceInputWaitExtraExtraTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNotebookInstanceInputWaitExtra:
    boto3_raw_data: "type_defs.DescribeNotebookInstanceInputWaitExtraTypeDef" = (
        dataclasses.field()
    )

    NotebookInstanceName = field("NotebookInstanceName")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNotebookInstanceInputWaitExtraTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNotebookInstanceInputWaitExtraTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNotebookInstanceInputWait:
    boto3_raw_data: "type_defs.DescribeNotebookInstanceInputWaitTypeDef" = (
        dataclasses.field()
    )

    NotebookInstanceName = field("NotebookInstanceName")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeNotebookInstanceInputWaitTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNotebookInstanceInputWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeProcessingJobRequestWait:
    boto3_raw_data: "type_defs.DescribeProcessingJobRequestWaitTypeDef" = (
        dataclasses.field()
    )

    ProcessingJobName = field("ProcessingJobName")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeProcessingJobRequestWaitTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeProcessingJobRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTrainingJobRequestWait:
    boto3_raw_data: "type_defs.DescribeTrainingJobRequestWaitTypeDef" = (
        dataclasses.field()
    )

    TrainingJobName = field("TrainingJobName")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeTrainingJobRequestWaitTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTrainingJobRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransformJobRequestWait:
    boto3_raw_data: "type_defs.DescribeTransformJobRequestWaitTypeDef" = (
        dataclasses.field()
    )

    TransformJobName = field("TransformJobName")

    @cached_property
    def WaiterConfig(self):  # pragma: no cover
        return WaiterConfig.make_one(self.boto3_raw_data["WaiterConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeTransformJobRequestWaitTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTransformJobRequestWaitTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExperimentSummary:
    boto3_raw_data: "type_defs.ExperimentSummaryTypeDef" = dataclasses.field()

    ExperimentArn = field("ExperimentArn")
    ExperimentName = field("ExperimentName")
    DisplayName = field("DisplayName")

    @cached_property
    def ExperimentSource(self):  # pragma: no cover
        return ExperimentSource.make_one(self.boto3_raw_data["ExperimentSource"])

    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ExperimentSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ExperimentSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FeatureGroupSummary:
    boto3_raw_data: "type_defs.FeatureGroupSummaryTypeDef" = dataclasses.field()

    FeatureGroupName = field("FeatureGroupName")
    FeatureGroupArn = field("FeatureGroupArn")
    CreationTime = field("CreationTime")
    FeatureGroupStatus = field("FeatureGroupStatus")

    @cached_property
    def OfflineStoreStatus(self):  # pragma: no cover
        return OfflineStoreStatus.make_one(self.boto3_raw_data["OfflineStoreStatus"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FeatureGroupSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FeatureGroupSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFeatureMetadataResponse:
    boto3_raw_data: "type_defs.DescribeFeatureMetadataResponseTypeDef" = (
        dataclasses.field()
    )

    FeatureGroupArn = field("FeatureGroupArn")
    FeatureGroupName = field("FeatureGroupName")
    FeatureName = field("FeatureName")
    FeatureType = field("FeatureType")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    Description = field("Description")

    @cached_property
    def Parameters(self):  # pragma: no cover
        return FeatureParameter.make_many(self.boto3_raw_data["Parameters"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeFeatureMetadataResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFeatureMetadataResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FeatureMetadata:
    boto3_raw_data: "type_defs.FeatureMetadataTypeDef" = dataclasses.field()

    FeatureGroupArn = field("FeatureGroupArn")
    FeatureGroupName = field("FeatureGroupName")
    FeatureName = field("FeatureName")
    FeatureType = field("FeatureType")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    Description = field("Description")

    @cached_property
    def Parameters(self):  # pragma: no cover
        return FeatureParameter.make_many(self.boto3_raw_data["Parameters"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FeatureMetadataTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FeatureMetadataTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateFeatureMetadataRequest:
    boto3_raw_data: "type_defs.UpdateFeatureMetadataRequestTypeDef" = (
        dataclasses.field()
    )

    FeatureGroupName = field("FeatureGroupName")
    FeatureName = field("FeatureName")
    Description = field("Description")

    @cached_property
    def ParameterAdditions(self):  # pragma: no cover
        return FeatureParameter.make_many(self.boto3_raw_data["ParameterAdditions"])

    ParameterRemovals = field("ParameterRemovals")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateFeatureMetadataRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateFeatureMetadataRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeHubContentResponse:
    boto3_raw_data: "type_defs.DescribeHubContentResponseTypeDef" = dataclasses.field()

    HubContentName = field("HubContentName")
    HubContentArn = field("HubContentArn")
    HubContentVersion = field("HubContentVersion")
    HubContentType = field("HubContentType")
    DocumentSchemaVersion = field("DocumentSchemaVersion")
    HubName = field("HubName")
    HubArn = field("HubArn")
    HubContentDisplayName = field("HubContentDisplayName")
    HubContentDescription = field("HubContentDescription")
    HubContentMarkdown = field("HubContentMarkdown")
    HubContentDocument = field("HubContentDocument")
    SageMakerPublicHubContentArn = field("SageMakerPublicHubContentArn")
    ReferenceMinVersion = field("ReferenceMinVersion")
    SupportStatus = field("SupportStatus")
    HubContentSearchKeywords = field("HubContentSearchKeywords")

    @cached_property
    def HubContentDependencies(self):  # pragma: no cover
        return HubContentDependency.make_many(
            self.boto3_raw_data["HubContentDependencies"]
        )

    HubContentStatus = field("HubContentStatus")
    FailureReason = field("FailureReason")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeHubContentResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeHubContentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeHumanTaskUiResponse:
    boto3_raw_data: "type_defs.DescribeHumanTaskUiResponseTypeDef" = dataclasses.field()

    HumanTaskUiArn = field("HumanTaskUiArn")
    HumanTaskUiName = field("HumanTaskUiName")
    HumanTaskUiStatus = field("HumanTaskUiStatus")
    CreationTime = field("CreationTime")

    @cached_property
    def UiTemplate(self):  # pragma: no cover
        return UiTemplateInfo.make_one(self.boto3_raw_data["UiTemplate"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeHumanTaskUiResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeHumanTaskUiResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceExperimentSummary:
    boto3_raw_data: "type_defs.InferenceExperimentSummaryTypeDef" = dataclasses.field()

    Name = field("Name")
    Type = field("Type")
    Status = field("Status")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def Schedule(self):  # pragma: no cover
        return InferenceExperimentScheduleOutput.make_one(
            self.boto3_raw_data["Schedule"]
        )

    StatusReason = field("StatusReason")
    Description = field("Description")
    CompletionTime = field("CompletionTime")
    RoleArn = field("RoleArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InferenceExperimentSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceExperimentSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeModelCardExportJobResponse:
    boto3_raw_data: "type_defs.DescribeModelCardExportJobResponseTypeDef" = (
        dataclasses.field()
    )

    ModelCardExportJobName = field("ModelCardExportJobName")
    ModelCardExportJobArn = field("ModelCardExportJobArn")
    Status = field("Status")
    ModelCardName = field("ModelCardName")
    ModelCardVersion = field("ModelCardVersion")

    @cached_property
    def OutputConfig(self):  # pragma: no cover
        return ModelCardExportOutputConfig.make_one(self.boto3_raw_data["OutputConfig"])

    CreatedAt = field("CreatedAt")
    LastModifiedAt = field("LastModifiedAt")
    FailureReason = field("FailureReason")

    @cached_property
    def ExportArtifacts(self):  # pragma: no cover
        return ModelCardExportArtifacts.make_one(self.boto3_raw_data["ExportArtifacts"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeModelCardExportJobResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeModelCardExportJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListMonitoringExecutionsResponse:
    boto3_raw_data: "type_defs.ListMonitoringExecutionsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def MonitoringExecutionSummaries(self):  # pragma: no cover
        return MonitoringExecutionSummary.make_many(
            self.boto3_raw_data["MonitoringExecutionSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListMonitoringExecutionsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListMonitoringExecutionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribePartnerAppResponse:
    boto3_raw_data: "type_defs.DescribePartnerAppResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")
    Name = field("Name")
    Type = field("Type")
    Status = field("Status")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    ExecutionRoleArn = field("ExecutionRoleArn")
    KmsKeyId = field("KmsKeyId")
    BaseUrl = field("BaseUrl")

    @cached_property
    def MaintenanceConfig(self):  # pragma: no cover
        return PartnerAppMaintenanceConfig.make_one(
            self.boto3_raw_data["MaintenanceConfig"]
        )

    Tier = field("Tier")
    Version = field("Version")

    @cached_property
    def ApplicationConfig(self):  # pragma: no cover
        return PartnerAppConfigOutput.make_one(self.boto3_raw_data["ApplicationConfig"])

    AuthType = field("AuthType")
    EnableIamSessionBasedIdentity = field("EnableIamSessionBasedIdentity")

    @cached_property
    def Error(self):  # pragma: no cover
        return ErrorInfo.make_one(self.boto3_raw_data["Error"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribePartnerAppResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribePartnerAppResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeReservedCapacityResponse:
    boto3_raw_data: "type_defs.DescribeReservedCapacityResponseTypeDef" = (
        dataclasses.field()
    )

    ReservedCapacityArn = field("ReservedCapacityArn")
    ReservedCapacityType = field("ReservedCapacityType")
    Status = field("Status")
    AvailabilityZone = field("AvailabilityZone")
    DurationHours = field("DurationHours")
    DurationMinutes = field("DurationMinutes")
    StartTime = field("StartTime")
    EndTime = field("EndTime")
    InstanceType = field("InstanceType")
    TotalInstanceCount = field("TotalInstanceCount")
    AvailableInstanceCount = field("AvailableInstanceCount")
    InUseInstanceCount = field("InUseInstanceCount")

    @cached_property
    def UltraServerSummary(self):  # pragma: no cover
        return UltraServerSummary.make_one(self.boto3_raw_data["UltraServerSummary"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeReservedCapacityResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeReservedCapacityResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSubscribedWorkteamResponse:
    boto3_raw_data: "type_defs.DescribeSubscribedWorkteamResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SubscribedWorkteam(self):  # pragma: no cover
        return SubscribedWorkteam.make_one(self.boto3_raw_data["SubscribedWorkteam"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeSubscribedWorkteamResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSubscribedWorkteamResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListSubscribedWorkteamsResponse:
    boto3_raw_data: "type_defs.ListSubscribedWorkteamsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SubscribedWorkteams(self):  # pragma: no cover
        return SubscribedWorkteam.make_many(self.boto3_raw_data["SubscribedWorkteams"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListSubscribedWorkteamsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListSubscribedWorkteamsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrainingJobSummary:
    boto3_raw_data: "type_defs.TrainingJobSummaryTypeDef" = dataclasses.field()

    TrainingJobName = field("TrainingJobName")
    TrainingJobArn = field("TrainingJobArn")
    CreationTime = field("CreationTime")
    TrainingJobStatus = field("TrainingJobStatus")
    TrainingEndTime = field("TrainingEndTime")
    LastModifiedTime = field("LastModifiedTime")
    SecondaryStatus = field("SecondaryStatus")

    @cached_property
    def WarmPoolStatus(self):  # pragma: no cover
        return WarmPoolStatus.make_one(self.boto3_raw_data["WarmPoolStatus"])

    TrainingPlanArn = field("TrainingPlanArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrainingJobSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrainingJobSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTrainingPlanResponse:
    boto3_raw_data: "type_defs.DescribeTrainingPlanResponseTypeDef" = (
        dataclasses.field()
    )

    TrainingPlanArn = field("TrainingPlanArn")
    TrainingPlanName = field("TrainingPlanName")
    Status = field("Status")
    StatusMessage = field("StatusMessage")
    DurationHours = field("DurationHours")
    DurationMinutes = field("DurationMinutes")
    StartTime = field("StartTime")
    EndTime = field("EndTime")
    UpfrontFee = field("UpfrontFee")
    CurrencyCode = field("CurrencyCode")
    TotalInstanceCount = field("TotalInstanceCount")
    AvailableInstanceCount = field("AvailableInstanceCount")
    InUseInstanceCount = field("InUseInstanceCount")
    UnhealthyInstanceCount = field("UnhealthyInstanceCount")
    AvailableSpareInstanceCount = field("AvailableSpareInstanceCount")
    TotalUltraServerCount = field("TotalUltraServerCount")
    TargetResources = field("TargetResources")

    @cached_property
    def ReservedCapacitySummaries(self):  # pragma: no cover
        return ReservedCapacitySummary.make_many(
            self.boto3_raw_data["ReservedCapacitySummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeTrainingPlanResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTrainingPlanResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrainingPlanSummary:
    boto3_raw_data: "type_defs.TrainingPlanSummaryTypeDef" = dataclasses.field()

    TrainingPlanArn = field("TrainingPlanArn")
    TrainingPlanName = field("TrainingPlanName")
    Status = field("Status")
    StatusMessage = field("StatusMessage")
    DurationHours = field("DurationHours")
    DurationMinutes = field("DurationMinutes")
    StartTime = field("StartTime")
    EndTime = field("EndTime")
    UpfrontFee = field("UpfrontFee")
    CurrencyCode = field("CurrencyCode")
    TotalInstanceCount = field("TotalInstanceCount")
    AvailableInstanceCount = field("AvailableInstanceCount")
    InUseInstanceCount = field("InUseInstanceCount")
    TotalUltraServerCount = field("TotalUltraServerCount")
    TargetResources = field("TargetResources")

    @cached_property
    def ReservedCapacitySummaries(self):  # pragma: no cover
        return ReservedCapacitySummary.make_many(
            self.boto3_raw_data["ReservedCapacitySummaries"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrainingPlanSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrainingPlanSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrialSummary:
    boto3_raw_data: "type_defs.TrialSummaryTypeDef" = dataclasses.field()

    TrialArn = field("TrialArn")
    TrialName = field("TrialName")
    DisplayName = field("DisplayName")

    @cached_property
    def TrialSource(self):  # pragma: no cover
        return TrialSource.make_one(self.boto3_raw_data["TrialSource"])

    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TrialSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TrialSummaryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DesiredWeightAndCapacity:
    boto3_raw_data: "type_defs.DesiredWeightAndCapacityTypeDef" = dataclasses.field()

    VariantName = field("VariantName")
    DesiredWeight = field("DesiredWeight")
    DesiredInstanceCount = field("DesiredInstanceCount")

    @cached_property
    def ServerlessUpdateConfig(self):  # pragma: no cover
        return ProductionVariantServerlessUpdateConfig.make_one(
            self.boto3_raw_data["ServerlessUpdateConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DesiredWeightAndCapacityTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DesiredWeightAndCapacityTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListStageDevicesResponse:
    boto3_raw_data: "type_defs.ListStageDevicesResponseTypeDef" = dataclasses.field()

    @cached_property
    def DeviceDeploymentSummaries(self):  # pragma: no cover
        return DeviceDeploymentSummary.make_many(
            self.boto3_raw_data["DeviceDeploymentSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListStageDevicesResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListStageDevicesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListDeviceFleetsResponse:
    boto3_raw_data: "type_defs.ListDeviceFleetsResponseTypeDef" = dataclasses.field()

    @cached_property
    def DeviceFleetSummaries(self):  # pragma: no cover
        return DeviceFleetSummary.make_many(self.boto3_raw_data["DeviceFleetSummaries"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListDeviceFleetsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListDeviceFleetsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeviceSummary:
    boto3_raw_data: "type_defs.DeviceSummaryTypeDef" = dataclasses.field()

    DeviceName = field("DeviceName")
    DeviceArn = field("DeviceArn")
    Description = field("Description")
    DeviceFleetName = field("DeviceFleetName")
    IotThingName = field("IotThingName")
    RegistrationTime = field("RegistrationTime")
    LatestHeartbeat = field("LatestHeartbeat")

    @cached_property
    def Models(self):  # pragma: no cover
        return EdgeModelSummary.make_many(self.boto3_raw_data["Models"])

    AgentVersion = field("AgentVersion")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DeviceSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DeviceSummaryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RegisterDevicesRequest:
    boto3_raw_data: "type_defs.RegisterDevicesRequestTypeDef" = dataclasses.field()

    DeviceFleetName = field("DeviceFleetName")

    @cached_property
    def Devices(self):  # pragma: no cover
        return Device.make_many(self.boto3_raw_data["Devices"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RegisterDevicesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RegisterDevicesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateDevicesRequest:
    boto3_raw_data: "type_defs.UpdateDevicesRequestTypeDef" = dataclasses.field()

    DeviceFleetName = field("DeviceFleetName")

    @cached_property
    def Devices(self):  # pragma: no cover
        return Device.make_many(self.boto3_raw_data["Devices"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateDevicesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateDevicesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListDomainsResponse:
    boto3_raw_data: "type_defs.ListDomainsResponseTypeDef" = dataclasses.field()

    @cached_property
    def Domains(self):  # pragma: no cover
        return DomainDetails.make_many(self.boto3_raw_data["Domains"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListDomainsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListDomainsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DriftCheckBias:
    boto3_raw_data: "type_defs.DriftCheckBiasTypeDef" = dataclasses.field()

    @cached_property
    def ConfigFile(self):  # pragma: no cover
        return FileSource.make_one(self.boto3_raw_data["ConfigFile"])

    @cached_property
    def PreTrainingConstraints(self):  # pragma: no cover
        return MetricsSource.make_one(self.boto3_raw_data["PreTrainingConstraints"])

    @cached_property
    def PostTrainingConstraints(self):  # pragma: no cover
        return MetricsSource.make_one(self.boto3_raw_data["PostTrainingConstraints"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DriftCheckBiasTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DriftCheckBiasTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DriftCheckExplainability:
    boto3_raw_data: "type_defs.DriftCheckExplainabilityTypeDef" = dataclasses.field()

    @cached_property
    def Constraints(self):  # pragma: no cover
        return MetricsSource.make_one(self.boto3_raw_data["Constraints"])

    @cached_property
    def ConfigFile(self):  # pragma: no cover
        return FileSource.make_one(self.boto3_raw_data["ConfigFile"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DriftCheckExplainabilityTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DriftCheckExplainabilityTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpaceStorageSettings:
    boto3_raw_data: "type_defs.SpaceStorageSettingsTypeDef" = dataclasses.field()

    @cached_property
    def EbsStorageSettings(self):  # pragma: no cover
        return EbsStorageSettings.make_one(self.boto3_raw_data["EbsStorageSettings"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SpaceStorageSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpaceStorageSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProductionVariantCapacityReservationSummary:
    boto3_raw_data: "type_defs.ProductionVariantCapacityReservationSummaryTypeDef" = (
        dataclasses.field()
    )

    MlReservationArn = field("MlReservationArn")
    CapacityReservationPreference = field("CapacityReservationPreference")
    TotalInstanceCount = field("TotalInstanceCount")
    AvailableInstanceCount = field("AvailableInstanceCount")
    UsedByCurrentEndpoint = field("UsedByCurrentEndpoint")

    @cached_property
    def Ec2CapacityReservations(self):  # pragma: no cover
        return Ec2CapacityReservation.make_many(
            self.boto3_raw_data["Ec2CapacityReservations"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ProductionVariantCapacityReservationSummaryTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProductionVariantCapacityReservationSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListEdgeDeploymentPlansResponse:
    boto3_raw_data: "type_defs.ListEdgeDeploymentPlansResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def EdgeDeploymentPlanSummaries(self):  # pragma: no cover
        return EdgeDeploymentPlanSummary.make_many(
            self.boto3_raw_data["EdgeDeploymentPlanSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListEdgeDeploymentPlansResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListEdgeDeploymentPlansResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetDeviceFleetReportResponse:
    boto3_raw_data: "type_defs.GetDeviceFleetReportResponseTypeDef" = (
        dataclasses.field()
    )

    DeviceFleetArn = field("DeviceFleetArn")
    DeviceFleetName = field("DeviceFleetName")

    @cached_property
    def OutputConfig(self):  # pragma: no cover
        return EdgeOutputConfig.make_one(self.boto3_raw_data["OutputConfig"])

    Description = field("Description")
    ReportGenerated = field("ReportGenerated")

    @cached_property
    def DeviceStats(self):  # pragma: no cover
        return DeviceStats.make_one(self.boto3_raw_data["DeviceStats"])

    @cached_property
    def AgentVersions(self):  # pragma: no cover
        return AgentVersion.make_many(self.boto3_raw_data["AgentVersions"])

    @cached_property
    def ModelStats(self):  # pragma: no cover
        return EdgeModelStat.make_many(self.boto3_raw_data["ModelStats"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetDeviceFleetReportResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetDeviceFleetReportResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListEdgePackagingJobsResponse:
    boto3_raw_data: "type_defs.ListEdgePackagingJobsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def EdgePackagingJobSummaries(self):  # pragma: no cover
        return EdgePackagingJobSummary.make_many(
            self.boto3_raw_data["EdgePackagingJobSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListEdgePackagingJobsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListEdgePackagingJobsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListEndpointConfigsOutput:
    boto3_raw_data: "type_defs.ListEndpointConfigsOutputTypeDef" = dataclasses.field()

    @cached_property
    def EndpointConfigs(self):  # pragma: no cover
        return EndpointConfigSummary.make_many(self.boto3_raw_data["EndpointConfigs"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListEndpointConfigsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListEndpointConfigsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EndpointOutputConfiguration:
    boto3_raw_data: "type_defs.EndpointOutputConfigurationTypeDef" = dataclasses.field()

    EndpointName = field("EndpointName")
    VariantName = field("VariantName")
    InstanceType = field("InstanceType")
    InitialInstanceCount = field("InitialInstanceCount")

    @cached_property
    def ServerlessConfig(self):  # pragma: no cover
        return ProductionVariantServerlessConfig.make_one(
            self.boto3_raw_data["ServerlessConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EndpointOutputConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EndpointOutputConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EndpointPerformance:
    boto3_raw_data: "type_defs.EndpointPerformanceTypeDef" = dataclasses.field()

    @cached_property
    def Metrics(self):  # pragma: no cover
        return InferenceMetrics.make_one(self.boto3_raw_data["Metrics"])

    @cached_property
    def EndpointInfo(self):  # pragma: no cover
        return EndpointInfo.make_one(self.boto3_raw_data["EndpointInfo"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EndpointPerformanceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EndpointPerformanceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListEndpointsOutput:
    boto3_raw_data: "type_defs.ListEndpointsOutputTypeDef" = dataclasses.field()

    @cached_property
    def Endpoints(self):  # pragma: no cover
        return EndpointSummary.make_many(self.boto3_raw_data["Endpoints"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListEndpointsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListEndpointsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnvironmentConfigDetails:
    boto3_raw_data: "type_defs.EnvironmentConfigDetailsTypeDef" = dataclasses.field()

    @cached_property
    def FSxLustreConfig(self):  # pragma: no cover
        return FSxLustreConfig.make_one(self.boto3_raw_data["FSxLustreConfig"])

    S3OutputPath = field("S3OutputPath")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EnvironmentConfigDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnvironmentConfigDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnvironmentConfig:
    boto3_raw_data: "type_defs.EnvironmentConfigTypeDef" = dataclasses.field()

    @cached_property
    def FSxLustreConfig(self):  # pragma: no cover
        return FSxLustreConfig.make_one(self.boto3_raw_data["FSxLustreConfig"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EnvironmentConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnvironmentConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelConfiguration:
    boto3_raw_data: "type_defs.ModelConfigurationTypeDef" = dataclasses.field()

    InferenceSpecificationName = field("InferenceSpecificationName")

    @cached_property
    def EnvironmentParameters(self):  # pragma: no cover
        return EnvironmentParameter.make_many(
            self.boto3_raw_data["EnvironmentParameters"]
        )

    CompilationJobName = field("CompilationJobName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NestedFilters:
    boto3_raw_data: "type_defs.NestedFiltersTypeDef" = dataclasses.field()

    NestedPropertyName = field("NestedPropertyName")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NestedFiltersTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.NestedFiltersTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HyperParameterTrainingJobSummary:
    boto3_raw_data: "type_defs.HyperParameterTrainingJobSummaryTypeDef" = (
        dataclasses.field()
    )

    TrainingJobName = field("TrainingJobName")
    TrainingJobArn = field("TrainingJobArn")
    CreationTime = field("CreationTime")
    TrainingJobStatus = field("TrainingJobStatus")
    TunedHyperParameters = field("TunedHyperParameters")
    TrainingJobDefinitionName = field("TrainingJobDefinitionName")
    TuningJobName = field("TuningJobName")
    TrainingStartTime = field("TrainingStartTime")
    TrainingEndTime = field("TrainingEndTime")
    FailureReason = field("FailureReason")

    @cached_property
    def FinalHyperParameterTuningJobObjectiveMetric(self):  # pragma: no cover
        return FinalHyperParameterTuningJobObjectiveMetric.make_one(
            self.boto3_raw_data["FinalHyperParameterTuningJobObjectiveMetric"]
        )

    ObjectiveStatus = field("ObjectiveStatus")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.HyperParameterTrainingJobSummaryTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HyperParameterTrainingJobSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListFlowDefinitionsResponse:
    boto3_raw_data: "type_defs.ListFlowDefinitionsResponseTypeDef" = dataclasses.field()

    @cached_property
    def FlowDefinitionSummaries(self):  # pragma: no cover
        return FlowDefinitionSummary.make_many(
            self.boto3_raw_data["FlowDefinitionSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListFlowDefinitionsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListFlowDefinitionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetScalingConfigurationRecommendationRequest:
    boto3_raw_data: "type_defs.GetScalingConfigurationRecommendationRequestTypeDef" = (
        dataclasses.field()
    )

    InferenceRecommendationsJobName = field("InferenceRecommendationsJobName")
    RecommendationId = field("RecommendationId")
    EndpointName = field("EndpointName")
    TargetCpuUtilizationPerCore = field("TargetCpuUtilizationPerCore")

    @cached_property
    def ScalingPolicyObjective(self):  # pragma: no cover
        return ScalingPolicyObjective.make_one(
            self.boto3_raw_data["ScalingPolicyObjective"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetScalingConfigurationRecommendationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetScalingConfigurationRecommendationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetSearchSuggestionsResponse:
    boto3_raw_data: "type_defs.GetSearchSuggestionsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PropertyNameSuggestions(self):  # pragma: no cover
        return PropertyNameSuggestion.make_many(
            self.boto3_raw_data["PropertyNameSuggestions"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetSearchSuggestionsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetSearchSuggestionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateCodeRepositoryInput:
    boto3_raw_data: "type_defs.UpdateCodeRepositoryInputTypeDef" = dataclasses.field()

    CodeRepositoryName = field("CodeRepositoryName")

    @cached_property
    def GitConfig(self):  # pragma: no cover
        return GitConfigForUpdate.make_one(self.boto3_raw_data["GitConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateCodeRepositoryInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateCodeRepositoryInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StudioWebPortalSettingsOutput:
    boto3_raw_data: "type_defs.StudioWebPortalSettingsOutputTypeDef" = (
        dataclasses.field()
    )

    HiddenMlTools = field("HiddenMlTools")
    HiddenAppTypes = field("HiddenAppTypes")
    HiddenInstanceTypes = field("HiddenInstanceTypes")

    @cached_property
    def HiddenSageMakerImageVersionAliases(self):  # pragma: no cover
        return HiddenSageMakerImageOutput.make_many(
            self.boto3_raw_data["HiddenSageMakerImageVersionAliases"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.StudioWebPortalSettingsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StudioWebPortalSettingsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StudioWebPortalSettings:
    boto3_raw_data: "type_defs.StudioWebPortalSettingsTypeDef" = dataclasses.field()

    HiddenMlTools = field("HiddenMlTools")
    HiddenAppTypes = field("HiddenAppTypes")
    HiddenInstanceTypes = field("HiddenInstanceTypes")

    @cached_property
    def HiddenSageMakerImageVersionAliases(self):  # pragma: no cover
        return HiddenSageMakerImage.make_many(
            self.boto3_raw_data["HiddenSageMakerImageVersionAliases"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StudioWebPortalSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StudioWebPortalSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListHubContentVersionsResponse:
    boto3_raw_data: "type_defs.ListHubContentVersionsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def HubContentSummaries(self):  # pragma: no cover
        return HubContentInfo.make_many(self.boto3_raw_data["HubContentSummaries"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListHubContentVersionsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListHubContentVersionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListHubContentsResponse:
    boto3_raw_data: "type_defs.ListHubContentsResponseTypeDef" = dataclasses.field()

    @cached_property
    def HubContentSummaries(self):  # pragma: no cover
        return HubContentInfo.make_many(self.boto3_raw_data["HubContentSummaries"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListHubContentsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListHubContentsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListHubsResponse:
    boto3_raw_data: "type_defs.ListHubsResponseTypeDef" = dataclasses.field()

    @cached_property
    def HubSummaries(self):  # pragma: no cover
        return HubInfo.make_many(self.boto3_raw_data["HubSummaries"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ListHubsResponseTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListHubsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HumanLoopActivationConfig:
    boto3_raw_data: "type_defs.HumanLoopActivationConfigTypeDef" = dataclasses.field()

    @cached_property
    def HumanLoopActivationConditionsConfig(self):  # pragma: no cover
        return HumanLoopActivationConditionsConfig.make_one(
            self.boto3_raw_data["HumanLoopActivationConditionsConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HumanLoopActivationConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HumanLoopActivationConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListHumanTaskUisResponse:
    boto3_raw_data: "type_defs.ListHumanTaskUisResponseTypeDef" = dataclasses.field()

    @cached_property
    def HumanTaskUiSummaries(self):  # pragma: no cover
        return HumanTaskUiSummary.make_many(self.boto3_raw_data["HumanTaskUiSummaries"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListHumanTaskUisResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListHumanTaskUisResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HyperParameterTuningResourceConfigOutput:
    boto3_raw_data: "type_defs.HyperParameterTuningResourceConfigOutputTypeDef" = (
        dataclasses.field()
    )

    InstanceType = field("InstanceType")
    InstanceCount = field("InstanceCount")
    VolumeSizeInGB = field("VolumeSizeInGB")
    VolumeKmsKeyId = field("VolumeKmsKeyId")
    AllocationStrategy = field("AllocationStrategy")

    @cached_property
    def InstanceConfigs(self):  # pragma: no cover
        return HyperParameterTuningInstanceConfig.make_many(
            self.boto3_raw_data["InstanceConfigs"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.HyperParameterTuningResourceConfigOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HyperParameterTuningResourceConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HyperParameterTuningResourceConfig:
    boto3_raw_data: "type_defs.HyperParameterTuningResourceConfigTypeDef" = (
        dataclasses.field()
    )

    InstanceType = field("InstanceType")
    InstanceCount = field("InstanceCount")
    VolumeSizeInGB = field("VolumeSizeInGB")
    VolumeKmsKeyId = field("VolumeKmsKeyId")
    AllocationStrategy = field("AllocationStrategy")

    @cached_property
    def InstanceConfigs(self):  # pragma: no cover
        return HyperParameterTuningInstanceConfig.make_many(
            self.boto3_raw_data["InstanceConfigs"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.HyperParameterTuningResourceConfigTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HyperParameterTuningResourceConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HyperParameterTuningJobSummary:
    boto3_raw_data: "type_defs.HyperParameterTuningJobSummaryTypeDef" = (
        dataclasses.field()
    )

    HyperParameterTuningJobName = field("HyperParameterTuningJobName")
    HyperParameterTuningJobArn = field("HyperParameterTuningJobArn")
    HyperParameterTuningJobStatus = field("HyperParameterTuningJobStatus")
    Strategy = field("Strategy")
    CreationTime = field("CreationTime")

    @cached_property
    def TrainingJobStatusCounters(self):  # pragma: no cover
        return TrainingJobStatusCounters.make_one(
            self.boto3_raw_data["TrainingJobStatusCounters"]
        )

    @cached_property
    def ObjectiveStatusCounters(self):  # pragma: no cover
        return ObjectiveStatusCounters.make_one(
            self.boto3_raw_data["ObjectiveStatusCounters"]
        )

    HyperParameterTuningEndTime = field("HyperParameterTuningEndTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def ResourceLimits(self):  # pragma: no cover
        return ResourceLimits.make_one(self.boto3_raw_data["ResourceLimits"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.HyperParameterTuningJobSummaryTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HyperParameterTuningJobSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HyperParameterTuningJobStrategyConfig:
    boto3_raw_data: "type_defs.HyperParameterTuningJobStrategyConfigTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def HyperbandStrategyConfig(self):  # pragma: no cover
        return HyperbandStrategyConfig.make_one(
            self.boto3_raw_data["HyperbandStrategyConfig"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.HyperParameterTuningJobStrategyConfigTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HyperParameterTuningJobStrategyConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HyperParameterTuningJobWarmStartConfigOutput:
    boto3_raw_data: "type_defs.HyperParameterTuningJobWarmStartConfigOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ParentHyperParameterTuningJobs(self):  # pragma: no cover
        return ParentHyperParameterTuningJob.make_many(
            self.boto3_raw_data["ParentHyperParameterTuningJobs"]
        )

    WarmStartType = field("WarmStartType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.HyperParameterTuningJobWarmStartConfigOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HyperParameterTuningJobWarmStartConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HyperParameterTuningJobWarmStartConfig:
    boto3_raw_data: "type_defs.HyperParameterTuningJobWarmStartConfigTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ParentHyperParameterTuningJobs(self):  # pragma: no cover
        return ParentHyperParameterTuningJob.make_many(
            self.boto3_raw_data["ParentHyperParameterTuningJobs"]
        )

    WarmStartType = field("WarmStartType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.HyperParameterTuningJobWarmStartConfigTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HyperParameterTuningJobWarmStartConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UserContext:
    boto3_raw_data: "type_defs.UserContextTypeDef" = dataclasses.field()

    UserProfileArn = field("UserProfileArn")
    UserProfileName = field("UserProfileName")
    DomainId = field("DomainId")

    @cached_property
    def IamIdentity(self):  # pragma: no cover
        return IamIdentity.make_one(self.boto3_raw_data["IamIdentity"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.UserContextTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.UserContextTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class S3Presign:
    boto3_raw_data: "type_defs.S3PresignTypeDef" = dataclasses.field()

    @cached_property
    def IamPolicyConstraints(self):  # pragma: no cover
        return IamPolicyConstraints.make_one(
            self.boto3_raw_data["IamPolicyConstraints"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.S3PresignTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.S3PresignTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageConfig:
    boto3_raw_data: "type_defs.ImageConfigTypeDef" = dataclasses.field()

    RepositoryAccessMode = field("RepositoryAccessMode")

    @cached_property
    def RepositoryAuthConfig(self):  # pragma: no cover
        return RepositoryAuthConfig.make_one(
            self.boto3_raw_data["RepositoryAuthConfig"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ImageConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ImageConfigTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListImagesResponse:
    boto3_raw_data: "type_defs.ListImagesResponseTypeDef" = dataclasses.field()

    @cached_property
    def Images(self):  # pragma: no cover
        return Image.make_many(self.boto3_raw_data["Images"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListImagesResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListImagesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListImageVersionsResponse:
    boto3_raw_data: "type_defs.ListImageVersionsResponseTypeDef" = dataclasses.field()

    @cached_property
    def ImageVersions(self):  # pragma: no cover
        return ImageVersion.make_many(self.boto3_raw_data["ImageVersions"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListImageVersionsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListImageVersionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceComponentRollingUpdatePolicy:
    boto3_raw_data: "type_defs.InferenceComponentRollingUpdatePolicyTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def MaximumBatchSize(self):  # pragma: no cover
        return InferenceComponentCapacitySize.make_one(
            self.boto3_raw_data["MaximumBatchSize"]
        )

    WaitIntervalInSeconds = field("WaitIntervalInSeconds")
    MaximumExecutionTimeoutInSeconds = field("MaximumExecutionTimeoutInSeconds")

    @cached_property
    def RollbackMaximumBatchSize(self):  # pragma: no cover
        return InferenceComponentCapacitySize.make_one(
            self.boto3_raw_data["RollbackMaximumBatchSize"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InferenceComponentRollingUpdatePolicyTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceComponentRollingUpdatePolicyTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceComponentSpecification:
    boto3_raw_data: "type_defs.InferenceComponentSpecificationTypeDef" = (
        dataclasses.field()
    )

    ModelName = field("ModelName")

    @cached_property
    def Container(self):  # pragma: no cover
        return InferenceComponentContainerSpecification.make_one(
            self.boto3_raw_data["Container"]
        )

    @cached_property
    def StartupParameters(self):  # pragma: no cover
        return InferenceComponentStartupParameters.make_one(
            self.boto3_raw_data["StartupParameters"]
        )

    @cached_property
    def ComputeResourceRequirements(self):  # pragma: no cover
        return InferenceComponentComputeResourceRequirements.make_one(
            self.boto3_raw_data["ComputeResourceRequirements"]
        )

    BaseInferenceComponentName = field("BaseInferenceComponentName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.InferenceComponentSpecificationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceComponentSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListInferenceComponentsOutput:
    boto3_raw_data: "type_defs.ListInferenceComponentsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InferenceComponents(self):  # pragma: no cover
        return InferenceComponentSummary.make_many(
            self.boto3_raw_data["InferenceComponents"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListInferenceComponentsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListInferenceComponentsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListInferenceRecommendationsJobsResponse:
    boto3_raw_data: "type_defs.ListInferenceRecommendationsJobsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InferenceRecommendationsJobs(self):  # pragma: no cover
        return InferenceRecommendationsJob.make_many(
            self.boto3_raw_data["InferenceRecommendationsJobs"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListInferenceRecommendationsJobsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListInferenceRecommendationsJobsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstancePlacementConfigOutput:
    boto3_raw_data: "type_defs.InstancePlacementConfigOutputTypeDef" = (
        dataclasses.field()
    )

    EnableMultipleJobs = field("EnableMultipleJobs")

    @cached_property
    def PlacementSpecifications(self):  # pragma: no cover
        return PlacementSpecification.make_many(
            self.boto3_raw_data["PlacementSpecifications"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.InstancePlacementConfigOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstancePlacementConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InstancePlacementConfig:
    boto3_raw_data: "type_defs.InstancePlacementConfigTypeDef" = dataclasses.field()

    EnableMultipleJobs = field("EnableMultipleJobs")

    @cached_property
    def PlacementSpecifications(self):  # pragma: no cover
        return PlacementSpecification.make_many(
            self.boto3_raw_data["PlacementSpecifications"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InstancePlacementConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InstancePlacementConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParameterRangeOutput:
    boto3_raw_data: "type_defs.ParameterRangeOutputTypeDef" = dataclasses.field()

    @cached_property
    def IntegerParameterRangeSpecification(self):  # pragma: no cover
        return IntegerParameterRangeSpecification.make_one(
            self.boto3_raw_data["IntegerParameterRangeSpecification"]
        )

    @cached_property
    def ContinuousParameterRangeSpecification(self):  # pragma: no cover
        return ContinuousParameterRangeSpecification.make_one(
            self.boto3_raw_data["ContinuousParameterRangeSpecification"]
        )

    @cached_property
    def CategoricalParameterRangeSpecification(self):  # pragma: no cover
        return CategoricalParameterRangeSpecificationOutput.make_one(
            self.boto3_raw_data["CategoricalParameterRangeSpecification"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ParameterRangeOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ParameterRangeOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParameterRange:
    boto3_raw_data: "type_defs.ParameterRangeTypeDef" = dataclasses.field()

    @cached_property
    def IntegerParameterRangeSpecification(self):  # pragma: no cover
        return IntegerParameterRangeSpecification.make_one(
            self.boto3_raw_data["IntegerParameterRangeSpecification"]
        )

    @cached_property
    def ContinuousParameterRangeSpecification(self):  # pragma: no cover
        return ContinuousParameterRangeSpecification.make_one(
            self.boto3_raw_data["ContinuousParameterRangeSpecification"]
        )

    @cached_property
    def CategoricalParameterRangeSpecification(self):  # pragma: no cover
        return CategoricalParameterRangeSpecification.make_one(
            self.boto3_raw_data["CategoricalParameterRangeSpecification"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ParameterRangeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ParameterRangeTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParameterRangesOutput:
    boto3_raw_data: "type_defs.ParameterRangesOutputTypeDef" = dataclasses.field()

    @cached_property
    def IntegerParameterRanges(self):  # pragma: no cover
        return IntegerParameterRange.make_many(
            self.boto3_raw_data["IntegerParameterRanges"]
        )

    @cached_property
    def ContinuousParameterRanges(self):  # pragma: no cover
        return ContinuousParameterRange.make_many(
            self.boto3_raw_data["ContinuousParameterRanges"]
        )

    @cached_property
    def CategoricalParameterRanges(self):  # pragma: no cover
        return CategoricalParameterRangeOutput.make_many(
            self.boto3_raw_data["CategoricalParameterRanges"]
        )

    @cached_property
    def AutoParameters(self):  # pragma: no cover
        return AutoParameter.make_many(self.boto3_raw_data["AutoParameters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ParameterRangesOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ParameterRangesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KernelGatewayImageConfigOutput:
    boto3_raw_data: "type_defs.KernelGatewayImageConfigOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def KernelSpecs(self):  # pragma: no cover
        return KernelSpec.make_many(self.boto3_raw_data["KernelSpecs"])

    @cached_property
    def FileSystemConfig(self):  # pragma: no cover
        return FileSystemConfig.make_one(self.boto3_raw_data["FileSystemConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.KernelGatewayImageConfigOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.KernelGatewayImageConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KernelGatewayImageConfig:
    boto3_raw_data: "type_defs.KernelGatewayImageConfigTypeDef" = dataclasses.field()

    @cached_property
    def KernelSpecs(self):  # pragma: no cover
        return KernelSpec.make_many(self.boto3_raw_data["KernelSpecs"])

    @cached_property
    def FileSystemConfig(self):  # pragma: no cover
        return FileSystemConfig.make_one(self.boto3_raw_data["FileSystemConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.KernelGatewayImageConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.KernelGatewayImageConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LabelingJobForWorkteamSummary:
    boto3_raw_data: "type_defs.LabelingJobForWorkteamSummaryTypeDef" = (
        dataclasses.field()
    )

    JobReferenceCode = field("JobReferenceCode")
    WorkRequesterAccountId = field("WorkRequesterAccountId")
    CreationTime = field("CreationTime")
    LabelingJobName = field("LabelingJobName")

    @cached_property
    def LabelCounters(self):  # pragma: no cover
        return LabelCountersForWorkteam.make_one(self.boto3_raw_data["LabelCounters"])

    NumberOfHumanWorkersPerDataObject = field("NumberOfHumanWorkersPerDataObject")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.LabelingJobForWorkteamSummaryTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LabelingJobForWorkteamSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LabelingJobDataSource:
    boto3_raw_data: "type_defs.LabelingJobDataSourceTypeDef" = dataclasses.field()

    @cached_property
    def S3DataSource(self):  # pragma: no cover
        return LabelingJobS3DataSource.make_one(self.boto3_raw_data["S3DataSource"])

    @cached_property
    def SnsDataSource(self):  # pragma: no cover
        return LabelingJobSnsDataSource.make_one(self.boto3_raw_data["SnsDataSource"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LabelingJobDataSourceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LabelingJobDataSourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListLineageGroupsResponse:
    boto3_raw_data: "type_defs.ListLineageGroupsResponseTypeDef" = dataclasses.field()

    @cached_property
    def LineageGroupSummaries(self):  # pragma: no cover
        return LineageGroupSummary.make_many(
            self.boto3_raw_data["LineageGroupSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListLineageGroupsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListLineageGroupsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListDataQualityJobDefinitionsResponse:
    boto3_raw_data: "type_defs.ListDataQualityJobDefinitionsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def JobDefinitionSummaries(self):  # pragma: no cover
        return MonitoringJobDefinitionSummary.make_many(
            self.boto3_raw_data["JobDefinitionSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListDataQualityJobDefinitionsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListDataQualityJobDefinitionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelBiasJobDefinitionsResponse:
    boto3_raw_data: "type_defs.ListModelBiasJobDefinitionsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def JobDefinitionSummaries(self):  # pragma: no cover
        return MonitoringJobDefinitionSummary.make_many(
            self.boto3_raw_data["JobDefinitionSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListModelBiasJobDefinitionsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelBiasJobDefinitionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelExplainabilityJobDefinitionsResponse:
    boto3_raw_data: "type_defs.ListModelExplainabilityJobDefinitionsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def JobDefinitionSummaries(self):  # pragma: no cover
        return MonitoringJobDefinitionSummary.make_many(
            self.boto3_raw_data["JobDefinitionSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListModelExplainabilityJobDefinitionsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelExplainabilityJobDefinitionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelQualityJobDefinitionsResponse:
    boto3_raw_data: "type_defs.ListModelQualityJobDefinitionsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def JobDefinitionSummaries(self):  # pragma: no cover
        return MonitoringJobDefinitionSummary.make_many(
            self.boto3_raw_data["JobDefinitionSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListModelQualityJobDefinitionsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelQualityJobDefinitionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListMlflowTrackingServersResponse:
    boto3_raw_data: "type_defs.ListMlflowTrackingServersResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TrackingServerSummaries(self):  # pragma: no cover
        return TrackingServerSummary.make_many(
            self.boto3_raw_data["TrackingServerSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListMlflowTrackingServersResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListMlflowTrackingServersResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelCardExportJobsResponse:
    boto3_raw_data: "type_defs.ListModelCardExportJobsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ModelCardExportJobSummaries(self):  # pragma: no cover
        return ModelCardExportJobSummary.make_many(
            self.boto3_raw_data["ModelCardExportJobSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListModelCardExportJobsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelCardExportJobsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelCardVersionsResponse:
    boto3_raw_data: "type_defs.ListModelCardVersionsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ModelCardVersionSummaryList(self):  # pragma: no cover
        return ModelCardVersionSummary.make_many(
            self.boto3_raw_data["ModelCardVersionSummaryList"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListModelCardVersionsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelCardVersionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelCardsResponse:
    boto3_raw_data: "type_defs.ListModelCardsResponseTypeDef" = dataclasses.field()

    @cached_property
    def ModelCardSummaries(self):  # pragma: no cover
        return ModelCardSummary.make_many(self.boto3_raw_data["ModelCardSummaries"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListModelCardsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelCardsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelMetadataResponse:
    boto3_raw_data: "type_defs.ListModelMetadataResponseTypeDef" = dataclasses.field()

    @cached_property
    def ModelMetadataSummaries(self):  # pragma: no cover
        return ModelMetadataSummary.make_many(
            self.boto3_raw_data["ModelMetadataSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListModelMetadataResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelMetadataResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelPackageGroupsOutput:
    boto3_raw_data: "type_defs.ListModelPackageGroupsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ModelPackageGroupSummaryList(self):  # pragma: no cover
        return ModelPackageGroupSummary.make_many(
            self.boto3_raw_data["ModelPackageGroupSummaryList"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListModelPackageGroupsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelPackageGroupsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelsOutput:
    boto3_raw_data: "type_defs.ListModelsOutputTypeDef" = dataclasses.field()

    @cached_property
    def Models(self):  # pragma: no cover
        return ModelSummary.make_many(self.boto3_raw_data["Models"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ListModelsOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListMonitoringAlertHistoryResponse:
    boto3_raw_data: "type_defs.ListMonitoringAlertHistoryResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def MonitoringAlertHistory(self):  # pragma: no cover
        return MonitoringAlertHistorySummary.make_many(
            self.boto3_raw_data["MonitoringAlertHistory"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListMonitoringAlertHistoryResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListMonitoringAlertHistoryResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListMonitoringSchedulesResponse:
    boto3_raw_data: "type_defs.ListMonitoringSchedulesResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def MonitoringScheduleSummaries(self):  # pragma: no cover
        return MonitoringScheduleSummary.make_many(
            self.boto3_raw_data["MonitoringScheduleSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListMonitoringSchedulesResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListMonitoringSchedulesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListNotebookInstanceLifecycleConfigsOutput:
    boto3_raw_data: "type_defs.ListNotebookInstanceLifecycleConfigsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def NotebookInstanceLifecycleConfigs(self):  # pragma: no cover
        return NotebookInstanceLifecycleConfigSummary.make_many(
            self.boto3_raw_data["NotebookInstanceLifecycleConfigs"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListNotebookInstanceLifecycleConfigsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListNotebookInstanceLifecycleConfigsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListNotebookInstancesOutput:
    boto3_raw_data: "type_defs.ListNotebookInstancesOutputTypeDef" = dataclasses.field()

    @cached_property
    def NotebookInstances(self):  # pragma: no cover
        return NotebookInstanceSummary.make_many(
            self.boto3_raw_data["NotebookInstances"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListNotebookInstancesOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListNotebookInstancesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListOptimizationJobsResponse:
    boto3_raw_data: "type_defs.ListOptimizationJobsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def OptimizationJobSummaries(self):  # pragma: no cover
        return OptimizationJobSummary.make_many(
            self.boto3_raw_data["OptimizationJobSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListOptimizationJobsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListOptimizationJobsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListPartnerAppsResponse:
    boto3_raw_data: "type_defs.ListPartnerAppsResponseTypeDef" = dataclasses.field()

    @cached_property
    def Summaries(self):  # pragma: no cover
        return PartnerAppSummary.make_many(self.boto3_raw_data["Summaries"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListPartnerAppsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListPartnerAppsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListPipelineExecutionsResponse:
    boto3_raw_data: "type_defs.ListPipelineExecutionsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PipelineExecutionSummaries(self):  # pragma: no cover
        return PipelineExecutionSummary.make_many(
            self.boto3_raw_data["PipelineExecutionSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListPipelineExecutionsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListPipelineExecutionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListPipelineParametersForExecutionResponse:
    boto3_raw_data: "type_defs.ListPipelineParametersForExecutionResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PipelineParameters(self):  # pragma: no cover
        return Parameter.make_many(self.boto3_raw_data["PipelineParameters"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListPipelineParametersForExecutionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListPipelineParametersForExecutionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListPipelineVersionsResponse:
    boto3_raw_data: "type_defs.ListPipelineVersionsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PipelineVersionSummaries(self):  # pragma: no cover
        return PipelineVersionSummary.make_many(
            self.boto3_raw_data["PipelineVersionSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListPipelineVersionsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListPipelineVersionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListPipelinesResponse:
    boto3_raw_data: "type_defs.ListPipelinesResponseTypeDef" = dataclasses.field()

    @cached_property
    def PipelineSummaries(self):  # pragma: no cover
        return PipelineSummary.make_many(self.boto3_raw_data["PipelineSummaries"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListPipelinesResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListPipelinesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListProcessingJobsResponse:
    boto3_raw_data: "type_defs.ListProcessingJobsResponseTypeDef" = dataclasses.field()

    @cached_property
    def ProcessingJobSummaries(self):  # pragma: no cover
        return ProcessingJobSummary.make_many(
            self.boto3_raw_data["ProcessingJobSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListProcessingJobsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListProcessingJobsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListProjectsOutput:
    boto3_raw_data: "type_defs.ListProjectsOutputTypeDef" = dataclasses.field()

    @cached_property
    def ProjectSummaryList(self):  # pragma: no cover
        return ProjectSummary.make_many(self.boto3_raw_data["ProjectSummaryList"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListProjectsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListProjectsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListResourceCatalogsResponse:
    boto3_raw_data: "type_defs.ListResourceCatalogsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ResourceCatalogs(self):  # pragma: no cover
        return ResourceCatalog.make_many(self.boto3_raw_data["ResourceCatalogs"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListResourceCatalogsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListResourceCatalogsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListStudioLifecycleConfigsResponse:
    boto3_raw_data: "type_defs.ListStudioLifecycleConfigsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def StudioLifecycleConfigs(self):  # pragma: no cover
        return StudioLifecycleConfigDetails.make_many(
            self.boto3_raw_data["StudioLifecycleConfigs"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListStudioLifecycleConfigsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListStudioLifecycleConfigsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTrainingPlansRequestPaginate:
    boto3_raw_data: "type_defs.ListTrainingPlansRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    StartTimeAfter = field("StartTimeAfter")
    StartTimeBefore = field("StartTimeBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def Filters(self):  # pragma: no cover
        return TrainingPlanFilter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListTrainingPlansRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTrainingPlansRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTrainingPlansRequest:
    boto3_raw_data: "type_defs.ListTrainingPlansRequestTypeDef" = dataclasses.field()

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    StartTimeAfter = field("StartTimeAfter")
    StartTimeBefore = field("StartTimeBefore")
    SortBy = field("SortBy")
    SortOrder = field("SortOrder")

    @cached_property
    def Filters(self):  # pragma: no cover
        return TrainingPlanFilter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListTrainingPlansRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTrainingPlansRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTransformJobsResponse:
    boto3_raw_data: "type_defs.ListTransformJobsResponseTypeDef" = dataclasses.field()

    @cached_property
    def TransformJobSummaries(self):  # pragma: no cover
        return TransformJobSummary.make_many(
            self.boto3_raw_data["TransformJobSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListTransformJobsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTransformJobsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListUltraServersByReservedCapacityResponse:
    boto3_raw_data: "type_defs.ListUltraServersByReservedCapacityResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def UltraServers(self):  # pragma: no cover
        return UltraServer.make_many(self.boto3_raw_data["UltraServers"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListUltraServersByReservedCapacityResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListUltraServersByReservedCapacityResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListUserProfilesResponse:
    boto3_raw_data: "type_defs.ListUserProfilesResponseTypeDef" = dataclasses.field()

    @cached_property
    def UserProfiles(self):  # pragma: no cover
        return UserProfileDetails.make_many(self.boto3_raw_data["UserProfiles"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListUserProfilesResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListUserProfilesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MemberDefinitionOutput:
    boto3_raw_data: "type_defs.MemberDefinitionOutputTypeDef" = dataclasses.field()

    @cached_property
    def CognitoMemberDefinition(self):  # pragma: no cover
        return CognitoMemberDefinition.make_one(
            self.boto3_raw_data["CognitoMemberDefinition"]
        )

    @cached_property
    def OidcMemberDefinition(self):  # pragma: no cover
        return OidcMemberDefinitionOutput.make_one(
            self.boto3_raw_data["OidcMemberDefinition"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MemberDefinitionOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MemberDefinitionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MetricSpecification:
    boto3_raw_data: "type_defs.MetricSpecificationTypeDef" = dataclasses.field()

    @cached_property
    def Predefined(self):  # pragma: no cover
        return PredefinedMetricSpecification.make_one(self.boto3_raw_data["Predefined"])

    @cached_property
    def Customized(self):  # pragma: no cover
        return CustomizedMetricSpecification.make_one(self.boto3_raw_data["Customized"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MetricSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MetricSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class S3DataSourceOutput:
    boto3_raw_data: "type_defs.S3DataSourceOutputTypeDef" = dataclasses.field()

    S3DataType = field("S3DataType")
    S3Uri = field("S3Uri")
    S3DataDistributionType = field("S3DataDistributionType")
    AttributeNames = field("AttributeNames")
    InstanceGroupNames = field("InstanceGroupNames")

    @cached_property
    def ModelAccessConfig(self):  # pragma: no cover
        return ModelAccessConfig.make_one(self.boto3_raw_data["ModelAccessConfig"])

    @cached_property
    def HubAccessConfig(self):  # pragma: no cover
        return HubAccessConfig.make_one(self.boto3_raw_data["HubAccessConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.S3DataSourceOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.S3DataSourceOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class S3DataSource:
    boto3_raw_data: "type_defs.S3DataSourceTypeDef" = dataclasses.field()

    S3DataType = field("S3DataType")
    S3Uri = field("S3Uri")
    S3DataDistributionType = field("S3DataDistributionType")
    AttributeNames = field("AttributeNames")
    InstanceGroupNames = field("InstanceGroupNames")

    @cached_property
    def ModelAccessConfig(self):  # pragma: no cover
        return ModelAccessConfig.make_one(self.boto3_raw_data["ModelAccessConfig"])

    @cached_property
    def HubAccessConfig(self):  # pragma: no cover
        return HubAccessConfig.make_one(self.boto3_raw_data["HubAccessConfig"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.S3DataSourceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.S3DataSourceTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class S3ModelDataSource:
    boto3_raw_data: "type_defs.S3ModelDataSourceTypeDef" = dataclasses.field()

    S3Uri = field("S3Uri")
    S3DataType = field("S3DataType")
    CompressionType = field("CompressionType")

    @cached_property
    def ModelAccessConfig(self):  # pragma: no cover
        return ModelAccessConfig.make_one(self.boto3_raw_data["ModelAccessConfig"])

    @cached_property
    def HubAccessConfig(self):  # pragma: no cover
        return InferenceHubAccessConfig.make_one(self.boto3_raw_data["HubAccessConfig"])

    ManifestS3Uri = field("ManifestS3Uri")
    ETag = field("ETag")
    ManifestEtag = field("ManifestEtag")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.S3ModelDataSourceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.S3ModelDataSourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TextGenerationJobConfigOutput:
    boto3_raw_data: "type_defs.TextGenerationJobConfigOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CompletionCriteria(self):  # pragma: no cover
        return AutoMLJobCompletionCriteria.make_one(
            self.boto3_raw_data["CompletionCriteria"]
        )

    BaseModelName = field("BaseModelName")
    TextGenerationHyperParameters = field("TextGenerationHyperParameters")

    @cached_property
    def ModelAccessConfig(self):  # pragma: no cover
        return ModelAccessConfig.make_one(self.boto3_raw_data["ModelAccessConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.TextGenerationJobConfigOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TextGenerationJobConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TextGenerationJobConfig:
    boto3_raw_data: "type_defs.TextGenerationJobConfigTypeDef" = dataclasses.field()

    @cached_property
    def CompletionCriteria(self):  # pragma: no cover
        return AutoMLJobCompletionCriteria.make_one(
            self.boto3_raw_data["CompletionCriteria"]
        )

    BaseModelName = field("BaseModelName")
    TextGenerationHyperParameters = field("TextGenerationHyperParameters")

    @cached_property
    def ModelAccessConfig(self):  # pragma: no cover
        return ModelAccessConfig.make_one(self.boto3_raw_data["ModelAccessConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TextGenerationJobConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TextGenerationJobConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringAlertActions:
    boto3_raw_data: "type_defs.MonitoringAlertActionsTypeDef" = dataclasses.field()

    @cached_property
    def ModelDashboardIndicator(self):  # pragma: no cover
        return ModelDashboardIndicatorAction.make_one(
            self.boto3_raw_data["ModelDashboardIndicator"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MonitoringAlertActionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringAlertActionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelInfrastructureConfig:
    boto3_raw_data: "type_defs.ModelInfrastructureConfigTypeDef" = dataclasses.field()

    InfrastructureType = field("InfrastructureType")

    @cached_property
    def RealTimeInferenceConfig(self):  # pragma: no cover
        return RealTimeInferenceConfig.make_one(
            self.boto3_raw_data["RealTimeInferenceConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelInfrastructureConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelInfrastructureConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RecommendationJobStoppingConditionsOutput:
    boto3_raw_data: "type_defs.RecommendationJobStoppingConditionsOutputTypeDef" = (
        dataclasses.field()
    )

    MaxInvocations = field("MaxInvocations")

    @cached_property
    def ModelLatencyThresholds(self):  # pragma: no cover
        return ModelLatencyThreshold.make_many(
            self.boto3_raw_data["ModelLatencyThresholds"]
        )

    FlatInvocations = field("FlatInvocations")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RecommendationJobStoppingConditionsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RecommendationJobStoppingConditionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RecommendationJobStoppingConditions:
    boto3_raw_data: "type_defs.RecommendationJobStoppingConditionsTypeDef" = (
        dataclasses.field()
    )

    MaxInvocations = field("MaxInvocations")

    @cached_property
    def ModelLatencyThresholds(self):  # pragma: no cover
        return ModelLatencyThreshold.make_many(
            self.boto3_raw_data["ModelLatencyThresholds"]
        )

    FlatInvocations = field("FlatInvocations")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RecommendationJobStoppingConditionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RecommendationJobStoppingConditionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelMetadataSearchExpression:
    boto3_raw_data: "type_defs.ModelMetadataSearchExpressionTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return ModelMetadataFilter.make_many(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModelMetadataSearchExpressionTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelMetadataSearchExpressionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelPackageStatusDetails:
    boto3_raw_data: "type_defs.ModelPackageStatusDetailsTypeDef" = dataclasses.field()

    @cached_property
    def ValidationStatuses(self):  # pragma: no cover
        return ModelPackageStatusItem.make_many(
            self.boto3_raw_data["ValidationStatuses"]
        )

    @cached_property
    def ImageScanStatuses(self):  # pragma: no cover
        return ModelPackageStatusItem.make_many(
            self.boto3_raw_data["ImageScanStatuses"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelPackageStatusDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelPackageStatusDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OptimizationConfigOutput:
    boto3_raw_data: "type_defs.OptimizationConfigOutputTypeDef" = dataclasses.field()

    @cached_property
    def ModelQuantizationConfig(self):  # pragma: no cover
        return ModelQuantizationConfigOutput.make_one(
            self.boto3_raw_data["ModelQuantizationConfig"]
        )

    @cached_property
    def ModelCompilationConfig(self):  # pragma: no cover
        return ModelCompilationConfigOutput.make_one(
            self.boto3_raw_data["ModelCompilationConfig"]
        )

    @cached_property
    def ModelShardingConfig(self):  # pragma: no cover
        return ModelShardingConfigOutput.make_one(
            self.boto3_raw_data["ModelShardingConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.OptimizationConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OptimizationConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringResources:
    boto3_raw_data: "type_defs.MonitoringResourcesTypeDef" = dataclasses.field()

    @cached_property
    def ClusterConfig(self):  # pragma: no cover
        return MonitoringClusterConfig.make_one(self.boto3_raw_data["ClusterConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MonitoringResourcesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringResourcesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringDatasetFormatOutput:
    boto3_raw_data: "type_defs.MonitoringDatasetFormatOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Csv(self):  # pragma: no cover
        return MonitoringCsvDatasetFormat.make_one(self.boto3_raw_data["Csv"])

    @cached_property
    def Json(self):  # pragma: no cover
        return MonitoringJsonDatasetFormat.make_one(self.boto3_raw_data["Json"])

    Parquet = field("Parquet")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.MonitoringDatasetFormatOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringDatasetFormatOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringDatasetFormat:
    boto3_raw_data: "type_defs.MonitoringDatasetFormatTypeDef" = dataclasses.field()

    @cached_property
    def Csv(self):  # pragma: no cover
        return MonitoringCsvDatasetFormat.make_one(self.boto3_raw_data["Csv"])

    @cached_property
    def Json(self):  # pragma: no cover
        return MonitoringJsonDatasetFormat.make_one(self.boto3_raw_data["Json"])

    Parquet = field("Parquet")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MonitoringDatasetFormatTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringDatasetFormatTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringOutput:
    boto3_raw_data: "type_defs.MonitoringOutputTypeDef" = dataclasses.field()

    @cached_property
    def S3Output(self):  # pragma: no cover
        return MonitoringS3Output.make_one(self.boto3_raw_data["S3Output"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MonitoringOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OfflineStoreConfig:
    boto3_raw_data: "type_defs.OfflineStoreConfigTypeDef" = dataclasses.field()

    @cached_property
    def S3StorageConfig(self):  # pragma: no cover
        return S3StorageConfig.make_one(self.boto3_raw_data["S3StorageConfig"])

    DisableGlueTableCreation = field("DisableGlueTableCreation")

    @cached_property
    def DataCatalogConfig(self):  # pragma: no cover
        return DataCatalogConfig.make_one(self.boto3_raw_data["DataCatalogConfig"])

    TableFormat = field("TableFormat")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.OfflineStoreConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OfflineStoreConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OnlineStoreConfig:
    boto3_raw_data: "type_defs.OnlineStoreConfigTypeDef" = dataclasses.field()

    @cached_property
    def SecurityConfig(self):  # pragma: no cover
        return OnlineStoreSecurityConfig.make_one(self.boto3_raw_data["SecurityConfig"])

    EnableOnlineStore = field("EnableOnlineStore")

    @cached_property
    def TtlDuration(self):  # pragma: no cover
        return TtlDuration.make_one(self.boto3_raw_data["TtlDuration"])

    StorageType = field("StorageType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.OnlineStoreConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OnlineStoreConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OnlineStoreConfigUpdate:
    boto3_raw_data: "type_defs.OnlineStoreConfigUpdateTypeDef" = dataclasses.field()

    @cached_property
    def TtlDuration(self):  # pragma: no cover
        return TtlDuration.make_one(self.boto3_raw_data["TtlDuration"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.OnlineStoreConfigUpdateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OnlineStoreConfigUpdateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OptimizationJobModelSourceS3:
    boto3_raw_data: "type_defs.OptimizationJobModelSourceS3TypeDef" = (
        dataclasses.field()
    )

    S3Uri = field("S3Uri")

    @cached_property
    def ModelAccessConfig(self):  # pragma: no cover
        return OptimizationModelAccessConfig.make_one(
            self.boto3_raw_data["ModelAccessConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.OptimizationJobModelSourceS3TypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OptimizationJobModelSourceS3TypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OutputConfig:
    boto3_raw_data: "type_defs.OutputConfigTypeDef" = dataclasses.field()

    S3OutputLocation = field("S3OutputLocation")
    TargetDevice = field("TargetDevice")

    @cached_property
    def TargetPlatform(self):  # pragma: no cover
        return TargetPlatform.make_one(self.boto3_raw_data["TargetPlatform"])

    CompilerOptions = field("CompilerOptions")
    KmsKeyId = field("KmsKeyId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.OutputConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.OutputConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PendingProductionVariantSummary:
    boto3_raw_data: "type_defs.PendingProductionVariantSummaryTypeDef" = (
        dataclasses.field()
    )

    VariantName = field("VariantName")

    @cached_property
    def DeployedImages(self):  # pragma: no cover
        return DeployedImage.make_many(self.boto3_raw_data["DeployedImages"])

    CurrentWeight = field("CurrentWeight")
    DesiredWeight = field("DesiredWeight")
    CurrentInstanceCount = field("CurrentInstanceCount")
    DesiredInstanceCount = field("DesiredInstanceCount")
    InstanceType = field("InstanceType")
    AcceleratorType = field("AcceleratorType")

    @cached_property
    def VariantStatus(self):  # pragma: no cover
        return ProductionVariantStatus.make_many(self.boto3_raw_data["VariantStatus"])

    @cached_property
    def CurrentServerlessConfig(self):  # pragma: no cover
        return ProductionVariantServerlessConfig.make_one(
            self.boto3_raw_data["CurrentServerlessConfig"]
        )

    @cached_property
    def DesiredServerlessConfig(self):  # pragma: no cover
        return ProductionVariantServerlessConfig.make_one(
            self.boto3_raw_data["DesiredServerlessConfig"]
        )

    @cached_property
    def ManagedInstanceScaling(self):  # pragma: no cover
        return ProductionVariantManagedInstanceScaling.make_one(
            self.boto3_raw_data["ManagedInstanceScaling"]
        )

    @cached_property
    def RoutingConfig(self):  # pragma: no cover
        return ProductionVariantRoutingConfig.make_one(
            self.boto3_raw_data["RoutingConfig"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.PendingProductionVariantSummaryTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PendingProductionVariantSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SchedulerConfigOutput:
    boto3_raw_data: "type_defs.SchedulerConfigOutputTypeDef" = dataclasses.field()

    @cached_property
    def PriorityClasses(self):  # pragma: no cover
        return PriorityClass.make_many(self.boto3_raw_data["PriorityClasses"])

    FairShare = field("FairShare")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SchedulerConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SchedulerConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SchedulerConfig:
    boto3_raw_data: "type_defs.SchedulerConfigTypeDef" = dataclasses.field()

    @cached_property
    def PriorityClasses(self):  # pragma: no cover
        return PriorityClass.make_many(self.boto3_raw_data["PriorityClasses"])

    FairShare = field("FairShare")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SchedulerConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SchedulerConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProcessingResources:
    boto3_raw_data: "type_defs.ProcessingResourcesTypeDef" = dataclasses.field()

    @cached_property
    def ClusterConfig(self):  # pragma: no cover
        return ProcessingClusterConfig.make_one(self.boto3_raw_data["ClusterConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProcessingResourcesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProcessingResourcesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProcessingOutput:
    boto3_raw_data: "type_defs.ProcessingOutputTypeDef" = dataclasses.field()

    OutputName = field("OutputName")

    @cached_property
    def S3Output(self):  # pragma: no cover
        return ProcessingS3Output.make_one(self.boto3_raw_data["S3Output"])

    @cached_property
    def FeatureStoreOutput(self):  # pragma: no cover
        return ProcessingFeatureStoreOutput.make_one(
            self.boto3_raw_data["FeatureStoreOutput"]
        )

    AppManaged = field("AppManaged")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ProcessingOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProcessingOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProductionVariant:
    boto3_raw_data: "type_defs.ProductionVariantTypeDef" = dataclasses.field()

    VariantName = field("VariantName")
    ModelName = field("ModelName")
    InitialInstanceCount = field("InitialInstanceCount")
    InstanceType = field("InstanceType")
    InitialVariantWeight = field("InitialVariantWeight")
    AcceleratorType = field("AcceleratorType")

    @cached_property
    def CoreDumpConfig(self):  # pragma: no cover
        return ProductionVariantCoreDumpConfig.make_one(
            self.boto3_raw_data["CoreDumpConfig"]
        )

    @cached_property
    def ServerlessConfig(self):  # pragma: no cover
        return ProductionVariantServerlessConfig.make_one(
            self.boto3_raw_data["ServerlessConfig"]
        )

    VolumeSizeInGB = field("VolumeSizeInGB")
    ModelDataDownloadTimeoutInSeconds = field("ModelDataDownloadTimeoutInSeconds")
    ContainerStartupHealthCheckTimeoutInSeconds = field(
        "ContainerStartupHealthCheckTimeoutInSeconds"
    )
    EnableSSMAccess = field("EnableSSMAccess")

    @cached_property
    def ManagedInstanceScaling(self):  # pragma: no cover
        return ProductionVariantManagedInstanceScaling.make_one(
            self.boto3_raw_data["ManagedInstanceScaling"]
        )

    @cached_property
    def RoutingConfig(self):  # pragma: no cover
        return ProductionVariantRoutingConfig.make_one(
            self.boto3_raw_data["RoutingConfig"]
        )

    InferenceAmiVersion = field("InferenceAmiVersion")

    @cached_property
    def CapacityReservationConfig(self):  # pragma: no cover
        return ProductionVariantCapacityReservationConfig.make_one(
            self.boto3_raw_data["CapacityReservationConfig"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ProductionVariantTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProductionVariantTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SuggestionQuery:
    boto3_raw_data: "type_defs.SuggestionQueryTypeDef" = dataclasses.field()

    @cached_property
    def PropertyNameQuery(self):  # pragma: no cover
        return PropertyNameQuery.make_one(self.boto3_raw_data["PropertyNameQuery"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SuggestionQueryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SuggestionQueryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ServiceCatalogProvisioningDetailsOutput:
    boto3_raw_data: "type_defs.ServiceCatalogProvisioningDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    ProductId = field("ProductId")
    ProvisioningArtifactId = field("ProvisioningArtifactId")
    PathId = field("PathId")

    @cached_property
    def ProvisioningParameters(self):  # pragma: no cover
        return ProvisioningParameter.make_many(
            self.boto3_raw_data["ProvisioningParameters"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ServiceCatalogProvisioningDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ServiceCatalogProvisioningDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ServiceCatalogProvisioningDetails:
    boto3_raw_data: "type_defs.ServiceCatalogProvisioningDetailsTypeDef" = (
        dataclasses.field()
    )

    ProductId = field("ProductId")
    ProvisioningArtifactId = field("ProvisioningArtifactId")
    PathId = field("PathId")

    @cached_property
    def ProvisioningParameters(self):  # pragma: no cover
        return ProvisioningParameter.make_many(
            self.boto3_raw_data["ProvisioningParameters"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ServiceCatalogProvisioningDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ServiceCatalogProvisioningDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ServiceCatalogProvisioningUpdateDetails:
    boto3_raw_data: "type_defs.ServiceCatalogProvisioningUpdateDetailsTypeDef" = (
        dataclasses.field()
    )

    ProvisioningArtifactId = field("ProvisioningArtifactId")

    @cached_property
    def ProvisioningParameters(self):  # pragma: no cover
        return ProvisioningParameter.make_many(
            self.boto3_raw_data["ProvisioningParameters"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ServiceCatalogProvisioningUpdateDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ServiceCatalogProvisioningUpdateDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PublicWorkforceTaskPrice:
    boto3_raw_data: "type_defs.PublicWorkforceTaskPriceTypeDef" = dataclasses.field()

    @cached_property
    def AmountInUsd(self):  # pragma: no cover
        return USD.make_one(self.boto3_raw_data["AmountInUsd"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PublicWorkforceTaskPriceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PublicWorkforceTaskPriceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class QueryLineageResponse:
    boto3_raw_data: "type_defs.QueryLineageResponseTypeDef" = dataclasses.field()

    @cached_property
    def Vertices(self):  # pragma: no cover
        return Vertex.make_many(self.boto3_raw_data["Vertices"])

    @cached_property
    def Edges(self):  # pragma: no cover
        return Edge.make_many(self.boto3_raw_data["Edges"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.QueryLineageResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.QueryLineageResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RecommendationJobOutputConfig:
    boto3_raw_data: "type_defs.RecommendationJobOutputConfigTypeDef" = (
        dataclasses.field()
    )

    KmsKeyId = field("KmsKeyId")

    @cached_property
    def CompiledOutputConfig(self):  # pragma: no cover
        return RecommendationJobCompiledOutputConfig.make_one(
            self.boto3_raw_data["CompiledOutputConfig"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RecommendationJobOutputConfigTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RecommendationJobOutputConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RecommendationJobContainerConfigOutput:
    boto3_raw_data: "type_defs.RecommendationJobContainerConfigOutputTypeDef" = (
        dataclasses.field()
    )

    Domain = field("Domain")
    Task = field("Task")
    Framework = field("Framework")
    FrameworkVersion = field("FrameworkVersion")

    @cached_property
    def PayloadConfig(self):  # pragma: no cover
        return RecommendationJobPayloadConfigOutput.make_one(
            self.boto3_raw_data["PayloadConfig"]
        )

    NearestModelName = field("NearestModelName")
    SupportedInstanceTypes = field("SupportedInstanceTypes")
    SupportedEndpointType = field("SupportedEndpointType")
    DataInputConfig = field("DataInputConfig")
    SupportedResponseMIMETypes = field("SupportedResponseMIMETypes")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RecommendationJobContainerConfigOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RecommendationJobContainerConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RecommendationJobContainerConfig:
    boto3_raw_data: "type_defs.RecommendationJobContainerConfigTypeDef" = (
        dataclasses.field()
    )

    Domain = field("Domain")
    Task = field("Task")
    Framework = field("Framework")
    FrameworkVersion = field("FrameworkVersion")

    @cached_property
    def PayloadConfig(self):  # pragma: no cover
        return RecommendationJobPayloadConfig.make_one(
            self.boto3_raw_data["PayloadConfig"]
        )

    NearestModelName = field("NearestModelName")
    SupportedInstanceTypes = field("SupportedInstanceTypes")
    SupportedEndpointType = field("SupportedEndpointType")
    DataInputConfig = field("DataInputConfig")
    SupportedResponseMIMETypes = field("SupportedResponseMIMETypes")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RecommendationJobContainerConfigTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RecommendationJobContainerConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RenderUiTemplateRequest:
    boto3_raw_data: "type_defs.RenderUiTemplateRequestTypeDef" = dataclasses.field()

    @cached_property
    def Task(self):  # pragma: no cover
        return RenderableTask.make_one(self.boto3_raw_data["Task"])

    RoleArn = field("RoleArn")

    @cached_property
    def UiTemplate(self):  # pragma: no cover
        return UiTemplate.make_one(self.boto3_raw_data["UiTemplate"])

    HumanTaskUiArn = field("HumanTaskUiArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RenderUiTemplateRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RenderUiTemplateRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RenderUiTemplateResponse:
    boto3_raw_data: "type_defs.RenderUiTemplateResponseTypeDef" = dataclasses.field()

    RenderedContent = field("RenderedContent")

    @cached_property
    def Errors(self):  # pragma: no cover
        return RenderingError.make_many(self.boto3_raw_data["Errors"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RenderUiTemplateResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RenderUiTemplateResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrainingPlanOffering:
    boto3_raw_data: "type_defs.TrainingPlanOfferingTypeDef" = dataclasses.field()

    TrainingPlanOfferingId = field("TrainingPlanOfferingId")
    TargetResources = field("TargetResources")
    RequestedStartTimeAfter = field("RequestedStartTimeAfter")
    RequestedEndTimeBefore = field("RequestedEndTimeBefore")
    DurationHours = field("DurationHours")
    DurationMinutes = field("DurationMinutes")
    UpfrontFee = field("UpfrontFee")
    CurrencyCode = field("CurrencyCode")

    @cached_property
    def ReservedCapacityOfferings(self):  # pragma: no cover
        return ReservedCapacityOffering.make_many(
            self.boto3_raw_data["ReservedCapacityOfferings"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrainingPlanOfferingTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrainingPlanOfferingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SelectiveExecutionConfigOutput:
    boto3_raw_data: "type_defs.SelectiveExecutionConfigOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SelectedSteps(self):  # pragma: no cover
        return SelectedStep.make_many(self.boto3_raw_data["SelectedSteps"])

    SourcePipelineExecutionArn = field("SourcePipelineExecutionArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SelectiveExecutionConfigOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SelectiveExecutionConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SelectiveExecutionConfig:
    boto3_raw_data: "type_defs.SelectiveExecutionConfigTypeDef" = dataclasses.field()

    @cached_property
    def SelectedSteps(self):  # pragma: no cover
        return SelectedStep.make_many(self.boto3_raw_data["SelectedSteps"])

    SourcePipelineExecutionArn = field("SourcePipelineExecutionArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SelectiveExecutionConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SelectiveExecutionConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ShadowModeConfigOutput:
    boto3_raw_data: "type_defs.ShadowModeConfigOutputTypeDef" = dataclasses.field()

    SourceModelVariantName = field("SourceModelVariantName")

    @cached_property
    def ShadowModelVariants(self):  # pragma: no cover
        return ShadowModelVariantConfig.make_many(
            self.boto3_raw_data["ShadowModelVariants"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ShadowModeConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ShadowModeConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ShadowModeConfig:
    boto3_raw_data: "type_defs.ShadowModeConfigTypeDef" = dataclasses.field()

    SourceModelVariantName = field("SourceModelVariantName")

    @cached_property
    def ShadowModelVariants(self):  # pragma: no cover
        return ShadowModelVariantConfig.make_many(
            self.boto3_raw_data["ShadowModelVariants"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ShadowModeConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ShadowModeConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpaceAppLifecycleManagement:
    boto3_raw_data: "type_defs.SpaceAppLifecycleManagementTypeDef" = dataclasses.field()

    @cached_property
    def IdleSettings(self):  # pragma: no cover
        return SpaceIdleSettings.make_one(self.boto3_raw_data["IdleSettings"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SpaceAppLifecycleManagementTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpaceAppLifecycleManagementTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrafficPatternOutput:
    boto3_raw_data: "type_defs.TrafficPatternOutputTypeDef" = dataclasses.field()

    TrafficType = field("TrafficType")

    @cached_property
    def Phases(self):  # pragma: no cover
        return Phase.make_many(self.boto3_raw_data["Phases"])

    @cached_property
    def Stairs(self):  # pragma: no cover
        return Stairs.make_one(self.boto3_raw_data["Stairs"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrafficPatternOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrafficPatternOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrafficPattern:
    boto3_raw_data: "type_defs.TrafficPatternTypeDef" = dataclasses.field()

    TrafficType = field("TrafficType")

    @cached_property
    def Phases(self):  # pragma: no cover
        return Phase.make_many(self.boto3_raw_data["Phases"])

    @cached_property
    def Stairs(self):  # pragma: no cover
        return Stairs.make_one(self.boto3_raw_data["Stairs"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TrafficPatternTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TrafficPatternTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrainingImageConfig:
    boto3_raw_data: "type_defs.TrainingImageConfigTypeDef" = dataclasses.field()

    TrainingRepositoryAccessMode = field("TrainingRepositoryAccessMode")

    @cached_property
    def TrainingRepositoryAuthConfig(self):  # pragma: no cover
        return TrainingRepositoryAuthConfig.make_one(
            self.boto3_raw_data["TrainingRepositoryAuthConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrainingImageConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrainingImageConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransformDataSource:
    boto3_raw_data: "type_defs.TransformDataSourceTypeDef" = dataclasses.field()

    @cached_property
    def S3DataSource(self):  # pragma: no cover
        return TransformS3DataSource.make_one(self.boto3_raw_data["S3DataSource"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TransformDataSourceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransformDataSourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Workforce:
    boto3_raw_data: "type_defs.WorkforceTypeDef" = dataclasses.field()

    WorkforceName = field("WorkforceName")
    WorkforceArn = field("WorkforceArn")
    LastUpdatedDate = field("LastUpdatedDate")

    @cached_property
    def SourceIpConfig(self):  # pragma: no cover
        return SourceIpConfigOutput.make_one(self.boto3_raw_data["SourceIpConfig"])

    SubDomain = field("SubDomain")

    @cached_property
    def CognitoConfig(self):  # pragma: no cover
        return CognitoConfig.make_one(self.boto3_raw_data["CognitoConfig"])

    @cached_property
    def OidcConfig(self):  # pragma: no cover
        return OidcConfigForResponse.make_one(self.boto3_raw_data["OidcConfig"])

    CreateDate = field("CreateDate")

    @cached_property
    def WorkforceVpcConfig(self):  # pragma: no cover
        return WorkforceVpcConfigResponse.make_one(
            self.boto3_raw_data["WorkforceVpcConfig"]
        )

    Status = field("Status")
    FailureReason = field("FailureReason")
    IpAddressType = field("IpAddressType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.WorkforceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.WorkforceTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListActionsResponse:
    boto3_raw_data: "type_defs.ListActionsResponseTypeDef" = dataclasses.field()

    @cached_property
    def ActionSummaries(self):  # pragma: no cover
        return ActionSummary.make_many(self.boto3_raw_data["ActionSummaries"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListActionsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListActionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAppsResponse:
    boto3_raw_data: "type_defs.ListAppsResponseTypeDef" = dataclasses.field()

    @cached_property
    def Apps(self):  # pragma: no cover
        return AppDetails.make_many(self.boto3_raw_data["Apps"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ListAppsResponseTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAppsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DomainSettingsOutput:
    boto3_raw_data: "type_defs.DomainSettingsOutputTypeDef" = dataclasses.field()

    SecurityGroupIds = field("SecurityGroupIds")

    @cached_property
    def RStudioServerProDomainSettings(self):  # pragma: no cover
        return RStudioServerProDomainSettings.make_one(
            self.boto3_raw_data["RStudioServerProDomainSettings"]
        )

    ExecutionRoleIdentityConfig = field("ExecutionRoleIdentityConfig")

    @cached_property
    def TrustedIdentityPropagationSettings(self):  # pragma: no cover
        return TrustedIdentityPropagationSettings.make_one(
            self.boto3_raw_data["TrustedIdentityPropagationSettings"]
        )

    @cached_property
    def DockerSettings(self):  # pragma: no cover
        return DockerSettingsOutput.make_one(self.boto3_raw_data["DockerSettings"])

    @cached_property
    def AmazonQSettings(self):  # pragma: no cover
        return AmazonQSettings.make_one(self.boto3_raw_data["AmazonQSettings"])

    @cached_property
    def UnifiedStudioSettings(self):  # pragma: no cover
        return UnifiedStudioSettings.make_one(
            self.boto3_raw_data["UnifiedStudioSettings"]
        )

    IpAddressType = field("IpAddressType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DomainSettingsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DomainSettingsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DomainSettings:
    boto3_raw_data: "type_defs.DomainSettingsTypeDef" = dataclasses.field()

    SecurityGroupIds = field("SecurityGroupIds")

    @cached_property
    def RStudioServerProDomainSettings(self):  # pragma: no cover
        return RStudioServerProDomainSettings.make_one(
            self.boto3_raw_data["RStudioServerProDomainSettings"]
        )

    ExecutionRoleIdentityConfig = field("ExecutionRoleIdentityConfig")

    @cached_property
    def TrustedIdentityPropagationSettings(self):  # pragma: no cover
        return TrustedIdentityPropagationSettings.make_one(
            self.boto3_raw_data["TrustedIdentityPropagationSettings"]
        )

    @cached_property
    def DockerSettings(self):  # pragma: no cover
        return DockerSettings.make_one(self.boto3_raw_data["DockerSettings"])

    @cached_property
    def AmazonQSettings(self):  # pragma: no cover
        return AmazonQSettings.make_one(self.boto3_raw_data["AmazonQSettings"])

    @cached_property
    def UnifiedStudioSettings(self):  # pragma: no cover
        return UnifiedStudioSettings.make_one(
            self.boto3_raw_data["UnifiedStudioSettings"]
        )

    IpAddressType = field("IpAddressType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DomainSettingsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DomainSettingsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CodeEditorAppSettingsOutput:
    boto3_raw_data: "type_defs.CodeEditorAppSettingsOutputTypeDef" = dataclasses.field()

    @cached_property
    def DefaultResourceSpec(self):  # pragma: no cover
        return ResourceSpec.make_one(self.boto3_raw_data["DefaultResourceSpec"])

    @cached_property
    def CustomImages(self):  # pragma: no cover
        return CustomImage.make_many(self.boto3_raw_data["CustomImages"])

    LifecycleConfigArns = field("LifecycleConfigArns")

    @cached_property
    def AppLifecycleManagement(self):  # pragma: no cover
        return AppLifecycleManagement.make_one(
            self.boto3_raw_data["AppLifecycleManagement"]
        )

    BuiltInLifecycleConfigArn = field("BuiltInLifecycleConfigArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CodeEditorAppSettingsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CodeEditorAppSettingsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CodeEditorAppSettings:
    boto3_raw_data: "type_defs.CodeEditorAppSettingsTypeDef" = dataclasses.field()

    @cached_property
    def DefaultResourceSpec(self):  # pragma: no cover
        return ResourceSpec.make_one(self.boto3_raw_data["DefaultResourceSpec"])

    @cached_property
    def CustomImages(self):  # pragma: no cover
        return CustomImage.make_many(self.boto3_raw_data["CustomImages"])

    LifecycleConfigArns = field("LifecycleConfigArns")

    @cached_property
    def AppLifecycleManagement(self):  # pragma: no cover
        return AppLifecycleManagement.make_one(
            self.boto3_raw_data["AppLifecycleManagement"]
        )

    BuiltInLifecycleConfigArn = field("BuiltInLifecycleConfigArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CodeEditorAppSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CodeEditorAppSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class JupyterLabAppSettingsOutput:
    boto3_raw_data: "type_defs.JupyterLabAppSettingsOutputTypeDef" = dataclasses.field()

    @cached_property
    def DefaultResourceSpec(self):  # pragma: no cover
        return ResourceSpec.make_one(self.boto3_raw_data["DefaultResourceSpec"])

    @cached_property
    def CustomImages(self):  # pragma: no cover
        return CustomImage.make_many(self.boto3_raw_data["CustomImages"])

    LifecycleConfigArns = field("LifecycleConfigArns")

    @cached_property
    def CodeRepositories(self):  # pragma: no cover
        return CodeRepository.make_many(self.boto3_raw_data["CodeRepositories"])

    @cached_property
    def AppLifecycleManagement(self):  # pragma: no cover
        return AppLifecycleManagement.make_one(
            self.boto3_raw_data["AppLifecycleManagement"]
        )

    @cached_property
    def EmrSettings(self):  # pragma: no cover
        return EmrSettingsOutput.make_one(self.boto3_raw_data["EmrSettings"])

    BuiltInLifecycleConfigArn = field("BuiltInLifecycleConfigArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.JupyterLabAppSettingsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.JupyterLabAppSettingsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class JupyterLabAppSettings:
    boto3_raw_data: "type_defs.JupyterLabAppSettingsTypeDef" = dataclasses.field()

    @cached_property
    def DefaultResourceSpec(self):  # pragma: no cover
        return ResourceSpec.make_one(self.boto3_raw_data["DefaultResourceSpec"])

    @cached_property
    def CustomImages(self):  # pragma: no cover
        return CustomImage.make_many(self.boto3_raw_data["CustomImages"])

    LifecycleConfigArns = field("LifecycleConfigArns")

    @cached_property
    def CodeRepositories(self):  # pragma: no cover
        return CodeRepository.make_many(self.boto3_raw_data["CodeRepositories"])

    @cached_property
    def AppLifecycleManagement(self):  # pragma: no cover
        return AppLifecycleManagement.make_one(
            self.boto3_raw_data["AppLifecycleManagement"]
        )

    @cached_property
    def EmrSettings(self):  # pragma: no cover
        return EmrSettings.make_one(self.boto3_raw_data["EmrSettings"])

    BuiltInLifecycleConfigArn = field("BuiltInLifecycleConfigArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.JupyterLabAppSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.JupyterLabAppSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ArtifactSummary:
    boto3_raw_data: "type_defs.ArtifactSummaryTypeDef" = dataclasses.field()

    ArtifactArn = field("ArtifactArn")
    ArtifactName = field("ArtifactName")

    @cached_property
    def Source(self):  # pragma: no cover
        return ArtifactSourceOutput.make_one(self.boto3_raw_data["Source"])

    ArtifactType = field("ArtifactType")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ArtifactSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ArtifactSummaryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AsyncInferenceConfigOutput:
    boto3_raw_data: "type_defs.AsyncInferenceConfigOutputTypeDef" = dataclasses.field()

    @cached_property
    def OutputConfig(self):  # pragma: no cover
        return AsyncInferenceOutputConfigOutput.make_one(
            self.boto3_raw_data["OutputConfig"]
        )

    @cached_property
    def ClientConfig(self):  # pragma: no cover
        return AsyncInferenceClientConfig.make_one(self.boto3_raw_data["ClientConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AsyncInferenceConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AsyncInferenceConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AsyncInferenceConfig:
    boto3_raw_data: "type_defs.AsyncInferenceConfigTypeDef" = dataclasses.field()

    @cached_property
    def OutputConfig(self):  # pragma: no cover
        return AsyncInferenceOutputConfig.make_one(self.boto3_raw_data["OutputConfig"])

    @cached_property
    def ClientConfig(self):  # pragma: no cover
        return AsyncInferenceClientConfig.make_one(self.boto3_raw_data["ClientConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AsyncInferenceConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AsyncInferenceConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TabularJobConfigOutput:
    boto3_raw_data: "type_defs.TabularJobConfigOutputTypeDef" = dataclasses.field()

    TargetAttributeName = field("TargetAttributeName")

    @cached_property
    def CandidateGenerationConfig(self):  # pragma: no cover
        return CandidateGenerationConfigOutput.make_one(
            self.boto3_raw_data["CandidateGenerationConfig"]
        )

    @cached_property
    def CompletionCriteria(self):  # pragma: no cover
        return AutoMLJobCompletionCriteria.make_one(
            self.boto3_raw_data["CompletionCriteria"]
        )

    FeatureSpecificationS3Uri = field("FeatureSpecificationS3Uri")
    Mode = field("Mode")
    GenerateCandidateDefinitionsOnly = field("GenerateCandidateDefinitionsOnly")
    ProblemType = field("ProblemType")
    SampleWeightAttributeName = field("SampleWeightAttributeName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TabularJobConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TabularJobConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TimeSeriesForecastingJobConfigOutput:
    boto3_raw_data: "type_defs.TimeSeriesForecastingJobConfigOutputTypeDef" = (
        dataclasses.field()
    )

    ForecastFrequency = field("ForecastFrequency")
    ForecastHorizon = field("ForecastHorizon")

    @cached_property
    def TimeSeriesConfig(self):  # pragma: no cover
        return TimeSeriesConfigOutput.make_one(self.boto3_raw_data["TimeSeriesConfig"])

    FeatureSpecificationS3Uri = field("FeatureSpecificationS3Uri")

    @cached_property
    def CompletionCriteria(self):  # pragma: no cover
        return AutoMLJobCompletionCriteria.make_one(
            self.boto3_raw_data["CompletionCriteria"]
        )

    ForecastQuantiles = field("ForecastQuantiles")

    @cached_property
    def Transformations(self):  # pragma: no cover
        return TimeSeriesTransformationsOutput.make_one(
            self.boto3_raw_data["Transformations"]
        )

    @cached_property
    def HolidayConfig(self):  # pragma: no cover
        return HolidayConfigAttributes.make_many(self.boto3_raw_data["HolidayConfig"])

    @cached_property
    def CandidateGenerationConfig(self):  # pragma: no cover
        return CandidateGenerationConfigOutput.make_one(
            self.boto3_raw_data["CandidateGenerationConfig"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TimeSeriesForecastingJobConfigOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TimeSeriesForecastingJobConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TabularJobConfig:
    boto3_raw_data: "type_defs.TabularJobConfigTypeDef" = dataclasses.field()

    TargetAttributeName = field("TargetAttributeName")

    @cached_property
    def CandidateGenerationConfig(self):  # pragma: no cover
        return CandidateGenerationConfig.make_one(
            self.boto3_raw_data["CandidateGenerationConfig"]
        )

    @cached_property
    def CompletionCriteria(self):  # pragma: no cover
        return AutoMLJobCompletionCriteria.make_one(
            self.boto3_raw_data["CompletionCriteria"]
        )

    FeatureSpecificationS3Uri = field("FeatureSpecificationS3Uri")
    Mode = field("Mode")
    GenerateCandidateDefinitionsOnly = field("GenerateCandidateDefinitionsOnly")
    ProblemType = field("ProblemType")
    SampleWeightAttributeName = field("SampleWeightAttributeName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TabularJobConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TabularJobConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TimeSeriesForecastingJobConfig:
    boto3_raw_data: "type_defs.TimeSeriesForecastingJobConfigTypeDef" = (
        dataclasses.field()
    )

    ForecastFrequency = field("ForecastFrequency")
    ForecastHorizon = field("ForecastHorizon")

    @cached_property
    def TimeSeriesConfig(self):  # pragma: no cover
        return TimeSeriesConfig.make_one(self.boto3_raw_data["TimeSeriesConfig"])

    FeatureSpecificationS3Uri = field("FeatureSpecificationS3Uri")

    @cached_property
    def CompletionCriteria(self):  # pragma: no cover
        return AutoMLJobCompletionCriteria.make_one(
            self.boto3_raw_data["CompletionCriteria"]
        )

    ForecastQuantiles = field("ForecastQuantiles")

    @cached_property
    def Transformations(self):  # pragma: no cover
        return TimeSeriesTransformations.make_one(
            self.boto3_raw_data["Transformations"]
        )

    @cached_property
    def HolidayConfig(self):  # pragma: no cover
        return HolidayConfigAttributes.make_many(self.boto3_raw_data["HolidayConfig"])

    @cached_property
    def CandidateGenerationConfig(self):  # pragma: no cover
        return CandidateGenerationConfig.make_one(
            self.boto3_raw_data["CandidateGenerationConfig"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.TimeSeriesForecastingJobConfigTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TimeSeriesForecastingJobConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLChannel:
    boto3_raw_data: "type_defs.AutoMLChannelTypeDef" = dataclasses.field()

    TargetAttributeName = field("TargetAttributeName")

    @cached_property
    def DataSource(self):  # pragma: no cover
        return AutoMLDataSource.make_one(self.boto3_raw_data["DataSource"])

    CompressionType = field("CompressionType")
    ContentType = field("ContentType")
    ChannelType = field("ChannelType")
    SampleWeightAttributeName = field("SampleWeightAttributeName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AutoMLChannelTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AutoMLChannelTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLJobChannel:
    boto3_raw_data: "type_defs.AutoMLJobChannelTypeDef" = dataclasses.field()

    ChannelType = field("ChannelType")
    ContentType = field("ContentType")
    CompressionType = field("CompressionType")

    @cached_property
    def DataSource(self):  # pragma: no cover
        return AutoMLDataSource.make_one(self.boto3_raw_data["DataSource"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AutoMLJobChannelTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLJobChannelTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAutoMLJobsResponse:
    boto3_raw_data: "type_defs.ListAutoMLJobsResponseTypeDef" = dataclasses.field()

    @cached_property
    def AutoMLJobSummaries(self):  # pragma: no cover
        return AutoMLJobSummary.make_many(self.boto3_raw_data["AutoMLJobSummaries"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListAutoMLJobsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAutoMLJobsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLResolvedAttributes:
    boto3_raw_data: "type_defs.AutoMLResolvedAttributesTypeDef" = dataclasses.field()

    @cached_property
    def AutoMLJobObjective(self):  # pragma: no cover
        return AutoMLJobObjective.make_one(self.boto3_raw_data["AutoMLJobObjective"])

    @cached_property
    def CompletionCriteria(self):  # pragma: no cover
        return AutoMLJobCompletionCriteria.make_one(
            self.boto3_raw_data["CompletionCriteria"]
        )

    @cached_property
    def AutoMLProblemTypeResolvedAttributes(self):  # pragma: no cover
        return AutoMLProblemTypeResolvedAttributes.make_one(
            self.boto3_raw_data["AutoMLProblemTypeResolvedAttributes"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutoMLResolvedAttributesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLResolvedAttributesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLJobConfigOutput:
    boto3_raw_data: "type_defs.AutoMLJobConfigOutputTypeDef" = dataclasses.field()

    @cached_property
    def CompletionCriteria(self):  # pragma: no cover
        return AutoMLJobCompletionCriteria.make_one(
            self.boto3_raw_data["CompletionCriteria"]
        )

    @cached_property
    def SecurityConfig(self):  # pragma: no cover
        return AutoMLSecurityConfigOutput.make_one(
            self.boto3_raw_data["SecurityConfig"]
        )

    @cached_property
    def CandidateGenerationConfig(self):  # pragma: no cover
        return AutoMLCandidateGenerationConfigOutput.make_one(
            self.boto3_raw_data["CandidateGenerationConfig"]
        )

    @cached_property
    def DataSplitConfig(self):  # pragma: no cover
        return AutoMLDataSplitConfig.make_one(self.boto3_raw_data["DataSplitConfig"])

    Mode = field("Mode")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutoMLJobConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLJobConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LabelingJobAlgorithmsConfigOutput:
    boto3_raw_data: "type_defs.LabelingJobAlgorithmsConfigOutputTypeDef" = (
        dataclasses.field()
    )

    LabelingJobAlgorithmSpecificationArn = field("LabelingJobAlgorithmSpecificationArn")
    InitialActiveLearningModelArn = field("InitialActiveLearningModelArn")

    @cached_property
    def LabelingJobResourceConfig(self):  # pragma: no cover
        return LabelingJobResourceConfigOutput.make_one(
            self.boto3_raw_data["LabelingJobResourceConfig"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LabelingJobAlgorithmsConfigOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LabelingJobAlgorithmsConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLJobConfig:
    boto3_raw_data: "type_defs.AutoMLJobConfigTypeDef" = dataclasses.field()

    @cached_property
    def CompletionCriteria(self):  # pragma: no cover
        return AutoMLJobCompletionCriteria.make_one(
            self.boto3_raw_data["CompletionCriteria"]
        )

    @cached_property
    def SecurityConfig(self):  # pragma: no cover
        return AutoMLSecurityConfig.make_one(self.boto3_raw_data["SecurityConfig"])

    @cached_property
    def CandidateGenerationConfig(self):  # pragma: no cover
        return AutoMLCandidateGenerationConfig.make_one(
            self.boto3_raw_data["CandidateGenerationConfig"]
        )

    @cached_property
    def DataSplitConfig(self):  # pragma: no cover
        return AutoMLDataSplitConfig.make_one(self.boto3_raw_data["DataSplitConfig"])

    Mode = field("Mode")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AutoMLJobConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AutoMLJobConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LabelingJobAlgorithmsConfig:
    boto3_raw_data: "type_defs.LabelingJobAlgorithmsConfigTypeDef" = dataclasses.field()

    LabelingJobAlgorithmSpecificationArn = field("LabelingJobAlgorithmSpecificationArn")
    InitialActiveLearningModelArn = field("InitialActiveLearningModelArn")

    @cached_property
    def LabelingJobResourceConfig(self):  # pragma: no cover
        return LabelingJobResourceConfig.make_one(
            self.boto3_raw_data["LabelingJobResourceConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LabelingJobAlgorithmsConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LabelingJobAlgorithmsConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelMetrics:
    boto3_raw_data: "type_defs.ModelMetricsTypeDef" = dataclasses.field()

    @cached_property
    def ModelQuality(self):  # pragma: no cover
        return ModelQuality.make_one(self.boto3_raw_data["ModelQuality"])

    @cached_property
    def ModelDataQuality(self):  # pragma: no cover
        return ModelDataQuality.make_one(self.boto3_raw_data["ModelDataQuality"])

    @cached_property
    def Bias(self):  # pragma: no cover
        return Bias.make_one(self.boto3_raw_data["Bias"])

    @cached_property
    def Explainability(self):  # pragma: no cover
        return Explainability.make_one(self.boto3_raw_data["Explainability"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ModelMetricsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ModelMetricsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PipelineExecutionStepMetadata:
    boto3_raw_data: "type_defs.PipelineExecutionStepMetadataTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TrainingJob(self):  # pragma: no cover
        return TrainingJobStepMetadata.make_one(self.boto3_raw_data["TrainingJob"])

    @cached_property
    def ProcessingJob(self):  # pragma: no cover
        return ProcessingJobStepMetadata.make_one(self.boto3_raw_data["ProcessingJob"])

    @cached_property
    def TransformJob(self):  # pragma: no cover
        return TransformJobStepMetadata.make_one(self.boto3_raw_data["TransformJob"])

    @cached_property
    def TuningJob(self):  # pragma: no cover
        return TuningJobStepMetaData.make_one(self.boto3_raw_data["TuningJob"])

    @cached_property
    def Model(self):  # pragma: no cover
        return ModelStepMetadata.make_one(self.boto3_raw_data["Model"])

    @cached_property
    def RegisterModel(self):  # pragma: no cover
        return RegisterModelStepMetadata.make_one(self.boto3_raw_data["RegisterModel"])

    @cached_property
    def Condition(self):  # pragma: no cover
        return ConditionStepMetadata.make_one(self.boto3_raw_data["Condition"])

    @cached_property
    def Callback(self):  # pragma: no cover
        return CallbackStepMetadata.make_one(self.boto3_raw_data["Callback"])

    @cached_property
    def Lambda(self):  # pragma: no cover
        return LambdaStepMetadata.make_one(self.boto3_raw_data["Lambda"])

    @cached_property
    def EMR(self):  # pragma: no cover
        return EMRStepMetadata.make_one(self.boto3_raw_data["EMR"])

    @cached_property
    def QualityCheck(self):  # pragma: no cover
        return QualityCheckStepMetadata.make_one(self.boto3_raw_data["QualityCheck"])

    @cached_property
    def ClarifyCheck(self):  # pragma: no cover
        return ClarifyCheckStepMetadata.make_one(self.boto3_raw_data["ClarifyCheck"])

    @cached_property
    def Fail(self):  # pragma: no cover
        return FailStepMetadata.make_one(self.boto3_raw_data["Fail"])

    @cached_property
    def AutoMLJob(self):  # pragma: no cover
        return AutoMLJobStepMetadata.make_one(self.boto3_raw_data["AutoMLJob"])

    @cached_property
    def Endpoint(self):  # pragma: no cover
        return EndpointStepMetadata.make_one(self.boto3_raw_data["Endpoint"])

    @cached_property
    def EndpointConfig(self):  # pragma: no cover
        return EndpointConfigStepMetadata.make_one(
            self.boto3_raw_data["EndpointConfig"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.PipelineExecutionStepMetadataTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PipelineExecutionStepMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLCandidate:
    boto3_raw_data: "type_defs.AutoMLCandidateTypeDef" = dataclasses.field()

    CandidateName = field("CandidateName")
    ObjectiveStatus = field("ObjectiveStatus")

    @cached_property
    def CandidateSteps(self):  # pragma: no cover
        return AutoMLCandidateStep.make_many(self.boto3_raw_data["CandidateSteps"])

    CandidateStatus = field("CandidateStatus")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def FinalAutoMLJobObjectiveMetric(self):  # pragma: no cover
        return FinalAutoMLJobObjectiveMetric.make_one(
            self.boto3_raw_data["FinalAutoMLJobObjectiveMetric"]
        )

    @cached_property
    def InferenceContainers(self):  # pragma: no cover
        return AutoMLContainerDefinition.make_many(
            self.boto3_raw_data["InferenceContainers"]
        )

    EndTime = field("EndTime")
    FailureReason = field("FailureReason")

    @cached_property
    def CandidateProperties(self):  # pragma: no cover
        return CandidateProperties.make_one(self.boto3_raw_data["CandidateProperties"])

    InferenceContainerDefinitions = field("InferenceContainerDefinitions")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AutoMLCandidateTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AutoMLCandidateTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EventMetadata:
    boto3_raw_data: "type_defs.EventMetadataTypeDef" = dataclasses.field()

    @cached_property
    def Cluster(self):  # pragma: no cover
        return ClusterMetadata.make_one(self.boto3_raw_data["Cluster"])

    @cached_property
    def InstanceGroup(self):  # pragma: no cover
        return InstanceGroupMetadata.make_one(self.boto3_raw_data["InstanceGroup"])

    @cached_property
    def InstanceGroupScaling(self):  # pragma: no cover
        return InstanceGroupScalingMetadata.make_one(
            self.boto3_raw_data["InstanceGroupScaling"]
        )

    @cached_property
    def Instance(self):  # pragma: no cover
        return InstanceMetadata.make_one(self.boto3_raw_data["Instance"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EventMetadataTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.EventMetadataTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeploymentConfigurationOutput:
    boto3_raw_data: "type_defs.DeploymentConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def RollingUpdatePolicy(self):  # pragma: no cover
        return RollingDeploymentPolicy.make_one(
            self.boto3_raw_data["RollingUpdatePolicy"]
        )

    WaitIntervalInSeconds = field("WaitIntervalInSeconds")

    @cached_property
    def AutoRollbackConfiguration(self):  # pragma: no cover
        return AlarmDetails.make_many(self.boto3_raw_data["AutoRollbackConfiguration"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeploymentConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeploymentConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeploymentConfiguration:
    boto3_raw_data: "type_defs.DeploymentConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def RollingUpdatePolicy(self):  # pragma: no cover
        return RollingDeploymentPolicy.make_one(
            self.boto3_raw_data["RollingUpdatePolicy"]
        )

    WaitIntervalInSeconds = field("WaitIntervalInSeconds")

    @cached_property
    def AutoRollbackConfiguration(self):  # pragma: no cover
        return AlarmDetails.make_many(self.boto3_raw_data["AutoRollbackConfiguration"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeploymentConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeploymentConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BlueGreenUpdatePolicy:
    boto3_raw_data: "type_defs.BlueGreenUpdatePolicyTypeDef" = dataclasses.field()

    @cached_property
    def TrafficRoutingConfiguration(self):  # pragma: no cover
        return TrafficRoutingConfig.make_one(
            self.boto3_raw_data["TrafficRoutingConfiguration"]
        )

    TerminationWaitInSeconds = field("TerminationWaitInSeconds")
    MaximumExecutionTimeoutInSeconds = field("MaximumExecutionTimeoutInSeconds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BlueGreenUpdatePolicyTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BlueGreenUpdatePolicyTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EndpointInputConfigurationOutput:
    boto3_raw_data: "type_defs.EndpointInputConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    InstanceType = field("InstanceType")

    @cached_property
    def ServerlessConfig(self):  # pragma: no cover
        return ProductionVariantServerlessConfig.make_one(
            self.boto3_raw_data["ServerlessConfig"]
        )

    InferenceSpecificationName = field("InferenceSpecificationName")

    @cached_property
    def EnvironmentParameterRanges(self):  # pragma: no cover
        return EnvironmentParameterRangesOutput.make_one(
            self.boto3_raw_data["EnvironmentParameterRanges"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.EndpointInputConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EndpointInputConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParameterRanges:
    boto3_raw_data: "type_defs.ParameterRangesTypeDef" = dataclasses.field()

    @cached_property
    def IntegerParameterRanges(self):  # pragma: no cover
        return IntegerParameterRange.make_many(
            self.boto3_raw_data["IntegerParameterRanges"]
        )

    @cached_property
    def ContinuousParameterRanges(self):  # pragma: no cover
        return ContinuousParameterRange.make_many(
            self.boto3_raw_data["ContinuousParameterRanges"]
        )

    CategoricalParameterRanges = field("CategoricalParameterRanges")

    @cached_property
    def AutoParameters(self):  # pragma: no cover
        return AutoParameter.make_many(self.boto3_raw_data["AutoParameters"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ParameterRangesTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ParameterRangesTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EndpointInputConfiguration:
    boto3_raw_data: "type_defs.EndpointInputConfigurationTypeDef" = dataclasses.field()

    InstanceType = field("InstanceType")

    @cached_property
    def ServerlessConfig(self):  # pragma: no cover
        return ProductionVariantServerlessConfig.make_one(
            self.boto3_raw_data["ServerlessConfig"]
        )

    InferenceSpecificationName = field("InferenceSpecificationName")

    @cached_property
    def EnvironmentParameterRanges(self):  # pragma: no cover
        return EnvironmentParameterRanges.make_one(
            self.boto3_raw_data["EnvironmentParameterRanges"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EndpointInputConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EndpointInputConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTemplateProvider:
    boto3_raw_data: "type_defs.CreateTemplateProviderTypeDef" = dataclasses.field()

    @cached_property
    def CfnTemplateProvider(self):  # pragma: no cover
        return CfnCreateTemplateProvider.make_one(
            self.boto3_raw_data["CfnTemplateProvider"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateTemplateProviderTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTemplateProviderTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TemplateProviderDetail:
    boto3_raw_data: "type_defs.TemplateProviderDetailTypeDef" = dataclasses.field()

    @cached_property
    def CfnTemplateProviderDetail(self):  # pragma: no cover
        return CfnTemplateProviderDetail.make_one(
            self.boto3_raw_data["CfnTemplateProviderDetail"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TemplateProviderDetailTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TemplateProviderDetailTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateTemplateProvider:
    boto3_raw_data: "type_defs.UpdateTemplateProviderTypeDef" = dataclasses.field()

    @cached_property
    def CfnTemplateProvider(self):  # pragma: no cover
        return CfnUpdateTemplateProvider.make_one(
            self.boto3_raw_data["CfnTemplateProvider"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateTemplateProviderTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateTemplateProviderTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClarifyExplainerConfigOutput:
    boto3_raw_data: "type_defs.ClarifyExplainerConfigOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ShapConfig(self):  # pragma: no cover
        return ClarifyShapConfig.make_one(self.boto3_raw_data["ShapConfig"])

    EnableExplanations = field("EnableExplanations")

    @cached_property
    def InferenceConfig(self):  # pragma: no cover
        return ClarifyInferenceConfigOutput.make_one(
            self.boto3_raw_data["InferenceConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClarifyExplainerConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClarifyExplainerConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClarifyExplainerConfig:
    boto3_raw_data: "type_defs.ClarifyExplainerConfigTypeDef" = dataclasses.field()

    @cached_property
    def ShapConfig(self):  # pragma: no cover
        return ClarifyShapConfig.make_one(self.boto3_raw_data["ShapConfig"])

    EnableExplanations = field("EnableExplanations")

    @cached_property
    def InferenceConfig(self):  # pragma: no cover
        return ClarifyInferenceConfig.make_one(self.boto3_raw_data["InferenceConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClarifyExplainerConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClarifyExplainerConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClusterNodeDetails:
    boto3_raw_data: "type_defs.ClusterNodeDetailsTypeDef" = dataclasses.field()

    InstanceGroupName = field("InstanceGroupName")
    InstanceId = field("InstanceId")
    NodeLogicalId = field("NodeLogicalId")

    @cached_property
    def InstanceStatus(self):  # pragma: no cover
        return ClusterInstanceStatusDetails.make_one(
            self.boto3_raw_data["InstanceStatus"]
        )

    InstanceType = field("InstanceType")
    LaunchTime = field("LaunchTime")
    LastSoftwareUpdateTime = field("LastSoftwareUpdateTime")

    @cached_property
    def LifeCycleConfig(self):  # pragma: no cover
        return ClusterLifeCycleConfig.make_one(self.boto3_raw_data["LifeCycleConfig"])

    @cached_property
    def OverrideVpcConfig(self):  # pragma: no cover
        return VpcConfigOutput.make_one(self.boto3_raw_data["OverrideVpcConfig"])

    ThreadsPerCore = field("ThreadsPerCore")

    @cached_property
    def InstanceStorageConfigs(self):  # pragma: no cover
        return ClusterInstanceStorageConfig.make_many(
            self.boto3_raw_data["InstanceStorageConfigs"]
        )

    PrivatePrimaryIp = field("PrivatePrimaryIp")
    PrivatePrimaryIpv6 = field("PrivatePrimaryIpv6")
    PrivateDnsHostname = field("PrivateDnsHostname")

    @cached_property
    def Placement(self):  # pragma: no cover
        return ClusterInstancePlacement.make_one(self.boto3_raw_data["Placement"])

    CurrentImageId = field("CurrentImageId")
    DesiredImageId = field("DesiredImageId")

    @cached_property
    def UltraServerInfo(self):  # pragma: no cover
        return UltraServerInfo.make_one(self.boto3_raw_data["UltraServerInfo"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClusterNodeDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClusterNodeDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListClusterNodesResponse:
    boto3_raw_data: "type_defs.ListClusterNodesResponseTypeDef" = dataclasses.field()

    @cached_property
    def ClusterNodeSummaries(self):  # pragma: no cover
        return ClusterNodeSummary.make_many(self.boto3_raw_data["ClusterNodeSummaries"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListClusterNodesResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListClusterNodesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListCodeRepositoriesOutput:
    boto3_raw_data: "type_defs.ListCodeRepositoriesOutputTypeDef" = dataclasses.field()

    @cached_property
    def CodeRepositorySummaryList(self):  # pragma: no cover
        return CodeRepositorySummary.make_many(
            self.boto3_raw_data["CodeRepositorySummaryList"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListCodeRepositoriesOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListCodeRepositoriesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FeatureDefinition:
    boto3_raw_data: "type_defs.FeatureDefinitionTypeDef" = dataclasses.field()

    FeatureName = field("FeatureName")
    FeatureType = field("FeatureType")
    CollectionType = field("CollectionType")

    @cached_property
    def CollectionConfig(self):  # pragma: no cover
        return CollectionConfig.make_one(self.boto3_raw_data["CollectionConfig"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FeatureDefinitionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FeatureDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ComputeQuotaSummary:
    boto3_raw_data: "type_defs.ComputeQuotaSummaryTypeDef" = dataclasses.field()

    ComputeQuotaArn = field("ComputeQuotaArn")
    ComputeQuotaId = field("ComputeQuotaId")
    Name = field("Name")
    Status = field("Status")

    @cached_property
    def ComputeQuotaTarget(self):  # pragma: no cover
        return ComputeQuotaTarget.make_one(self.boto3_raw_data["ComputeQuotaTarget"])

    CreationTime = field("CreationTime")
    ComputeQuotaVersion = field("ComputeQuotaVersion")
    ClusterArn = field("ClusterArn")

    @cached_property
    def ComputeQuotaConfig(self):  # pragma: no cover
        return ComputeQuotaConfigOutput.make_one(
            self.boto3_raw_data["ComputeQuotaConfig"]
        )

    ActivationState = field("ActivationState")
    LastModifiedTime = field("LastModifiedTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ComputeQuotaSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ComputeQuotaSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListContextsResponse:
    boto3_raw_data: "type_defs.ListContextsResponseTypeDef" = dataclasses.field()

    @cached_property
    def ContextSummaries(self):  # pragma: no cover
        return ContextSummary.make_many(self.boto3_raw_data["ContextSummaries"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListContextsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListContextsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelPackagesOutput:
    boto3_raw_data: "type_defs.ListModelPackagesOutputTypeDef" = dataclasses.field()

    @cached_property
    def ModelPackageSummaryList(self):  # pragma: no cover
        return ModelPackageSummary.make_many(
            self.boto3_raw_data["ModelPackageSummaryList"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListModelPackagesOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelPackagesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class QueryLineageRequest:
    boto3_raw_data: "type_defs.QueryLineageRequestTypeDef" = dataclasses.field()

    StartArns = field("StartArns")
    Direction = field("Direction")
    IncludeEdges = field("IncludeEdges")

    @cached_property
    def Filters(self):  # pragma: no cover
        return QueryFilters.make_one(self.boto3_raw_data["Filters"])

    MaxDepth = field("MaxDepth")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.QueryLineageRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.QueryLineageRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProcessingInput:
    boto3_raw_data: "type_defs.ProcessingInputTypeDef" = dataclasses.field()

    InputName = field("InputName")
    AppManaged = field("AppManaged")

    @cached_property
    def S3Input(self):  # pragma: no cover
        return ProcessingS3Input.make_one(self.boto3_raw_data["S3Input"])

    @cached_property
    def DatasetDefinition(self):  # pragma: no cover
        return DatasetDefinition.make_one(self.boto3_raw_data["DatasetDefinition"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ProcessingInputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ProcessingInputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceComponentSpecificationSummary:
    boto3_raw_data: "type_defs.InferenceComponentSpecificationSummaryTypeDef" = (
        dataclasses.field()
    )

    ModelName = field("ModelName")

    @cached_property
    def Container(self):  # pragma: no cover
        return InferenceComponentContainerSpecificationSummary.make_one(
            self.boto3_raw_data["Container"]
        )

    @cached_property
    def StartupParameters(self):  # pragma: no cover
        return InferenceComponentStartupParameters.make_one(
            self.boto3_raw_data["StartupParameters"]
        )

    @cached_property
    def ComputeResourceRequirements(self):  # pragma: no cover
        return InferenceComponentComputeResourceRequirements.make_one(
            self.boto3_raw_data["ComputeResourceRequirements"]
        )

    BaseInferenceComponentName = field("BaseInferenceComponentName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InferenceComponentSpecificationSummaryTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceComponentSpecificationSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeEdgeDeploymentPlanResponse:
    boto3_raw_data: "type_defs.DescribeEdgeDeploymentPlanResponseTypeDef" = (
        dataclasses.field()
    )

    EdgeDeploymentPlanArn = field("EdgeDeploymentPlanArn")
    EdgeDeploymentPlanName = field("EdgeDeploymentPlanName")

    @cached_property
    def ModelConfigs(self):  # pragma: no cover
        return EdgeDeploymentModelConfig.make_many(self.boto3_raw_data["ModelConfigs"])

    DeviceFleetName = field("DeviceFleetName")
    EdgeDeploymentSuccess = field("EdgeDeploymentSuccess")
    EdgeDeploymentPending = field("EdgeDeploymentPending")
    EdgeDeploymentFailed = field("EdgeDeploymentFailed")

    @cached_property
    def Stages(self):  # pragma: no cover
        return DeploymentStageStatusSummary.make_many(self.boto3_raw_data["Stages"])

    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeEdgeDeploymentPlanResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeEdgeDeploymentPlanResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListExperimentsResponse:
    boto3_raw_data: "type_defs.ListExperimentsResponseTypeDef" = dataclasses.field()

    @cached_property
    def ExperimentSummaries(self):  # pragma: no cover
        return ExperimentSummary.make_many(self.boto3_raw_data["ExperimentSummaries"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListExperimentsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListExperimentsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListFeatureGroupsResponse:
    boto3_raw_data: "type_defs.ListFeatureGroupsResponseTypeDef" = dataclasses.field()

    @cached_property
    def FeatureGroupSummaries(self):  # pragma: no cover
        return FeatureGroupSummary.make_many(
            self.boto3_raw_data["FeatureGroupSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListFeatureGroupsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListFeatureGroupsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListInferenceExperimentsResponse:
    boto3_raw_data: "type_defs.ListInferenceExperimentsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InferenceExperiments(self):  # pragma: no cover
        return InferenceExperimentSummary.make_many(
            self.boto3_raw_data["InferenceExperiments"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListInferenceExperimentsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListInferenceExperimentsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTrainingJobsResponse:
    boto3_raw_data: "type_defs.ListTrainingJobsResponseTypeDef" = dataclasses.field()

    @cached_property
    def TrainingJobSummaries(self):  # pragma: no cover
        return TrainingJobSummary.make_many(self.boto3_raw_data["TrainingJobSummaries"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListTrainingJobsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTrainingJobsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTrainingPlansResponse:
    boto3_raw_data: "type_defs.ListTrainingPlansResponseTypeDef" = dataclasses.field()

    @cached_property
    def TrainingPlanSummaries(self):  # pragma: no cover
        return TrainingPlanSummary.make_many(
            self.boto3_raw_data["TrainingPlanSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListTrainingPlansResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTrainingPlansResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTrialsResponse:
    boto3_raw_data: "type_defs.ListTrialsResponseTypeDef" = dataclasses.field()

    @cached_property
    def TrialSummaries(self):  # pragma: no cover
        return TrialSummary.make_many(self.boto3_raw_data["TrialSummaries"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListTrialsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTrialsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateEndpointWeightsAndCapacitiesInput:
    boto3_raw_data: "type_defs.UpdateEndpointWeightsAndCapacitiesInputTypeDef" = (
        dataclasses.field()
    )

    EndpointName = field("EndpointName")

    @cached_property
    def DesiredWeightsAndCapacities(self):  # pragma: no cover
        return DesiredWeightAndCapacity.make_many(
            self.boto3_raw_data["DesiredWeightsAndCapacities"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateEndpointWeightsAndCapacitiesInputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateEndpointWeightsAndCapacitiesInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeploymentStage:
    boto3_raw_data: "type_defs.DeploymentStageTypeDef" = dataclasses.field()

    StageName = field("StageName")
    DeviceSelectionConfig = field("DeviceSelectionConfig")

    @cached_property
    def DeploymentConfig(self):  # pragma: no cover
        return EdgeDeploymentConfig.make_one(self.boto3_raw_data["DeploymentConfig"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DeploymentStageTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DeploymentStageTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListDevicesResponse:
    boto3_raw_data: "type_defs.ListDevicesResponseTypeDef" = dataclasses.field()

    @cached_property
    def DeviceSummaries(self):  # pragma: no cover
        return DeviceSummary.make_many(self.boto3_raw_data["DeviceSummaries"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListDevicesResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListDevicesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DomainSettingsForUpdate:
    boto3_raw_data: "type_defs.DomainSettingsForUpdateTypeDef" = dataclasses.field()

    @cached_property
    def RStudioServerProDomainSettingsForUpdate(self):  # pragma: no cover
        return RStudioServerProDomainSettingsForUpdate.make_one(
            self.boto3_raw_data["RStudioServerProDomainSettingsForUpdate"]
        )

    ExecutionRoleIdentityConfig = field("ExecutionRoleIdentityConfig")
    SecurityGroupIds = field("SecurityGroupIds")

    @cached_property
    def TrustedIdentityPropagationSettings(self):  # pragma: no cover
        return TrustedIdentityPropagationSettings.make_one(
            self.boto3_raw_data["TrustedIdentityPropagationSettings"]
        )

    DockerSettings = field("DockerSettings")

    @cached_property
    def AmazonQSettings(self):  # pragma: no cover
        return AmazonQSettings.make_one(self.boto3_raw_data["AmazonQSettings"])

    @cached_property
    def UnifiedStudioSettings(self):  # pragma: no cover
        return UnifiedStudioSettings.make_one(
            self.boto3_raw_data["UnifiedStudioSettings"]
        )

    IpAddressType = field("IpAddressType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DomainSettingsForUpdateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DomainSettingsForUpdateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DriftCheckBaselines:
    boto3_raw_data: "type_defs.DriftCheckBaselinesTypeDef" = dataclasses.field()

    @cached_property
    def Bias(self):  # pragma: no cover
        return DriftCheckBias.make_one(self.boto3_raw_data["Bias"])

    @cached_property
    def Explainability(self):  # pragma: no cover
        return DriftCheckExplainability.make_one(self.boto3_raw_data["Explainability"])

    @cached_property
    def ModelQuality(self):  # pragma: no cover
        return DriftCheckModelQuality.make_one(self.boto3_raw_data["ModelQuality"])

    @cached_property
    def ModelDataQuality(self):  # pragma: no cover
        return DriftCheckModelDataQuality.make_one(
            self.boto3_raw_data["ModelDataQuality"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DriftCheckBaselinesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DriftCheckBaselinesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpaceSettingsSummary:
    boto3_raw_data: "type_defs.SpaceSettingsSummaryTypeDef" = dataclasses.field()

    AppType = field("AppType")
    RemoteAccess = field("RemoteAccess")

    @cached_property
    def SpaceStorageSettings(self):  # pragma: no cover
        return SpaceStorageSettings.make_one(
            self.boto3_raw_data["SpaceStorageSettings"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SpaceSettingsSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpaceSettingsSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProductionVariantSummary:
    boto3_raw_data: "type_defs.ProductionVariantSummaryTypeDef" = dataclasses.field()

    VariantName = field("VariantName")

    @cached_property
    def DeployedImages(self):  # pragma: no cover
        return DeployedImage.make_many(self.boto3_raw_data["DeployedImages"])

    CurrentWeight = field("CurrentWeight")
    DesiredWeight = field("DesiredWeight")
    CurrentInstanceCount = field("CurrentInstanceCount")
    DesiredInstanceCount = field("DesiredInstanceCount")

    @cached_property
    def VariantStatus(self):  # pragma: no cover
        return ProductionVariantStatus.make_many(self.boto3_raw_data["VariantStatus"])

    @cached_property
    def CurrentServerlessConfig(self):  # pragma: no cover
        return ProductionVariantServerlessConfig.make_one(
            self.boto3_raw_data["CurrentServerlessConfig"]
        )

    @cached_property
    def DesiredServerlessConfig(self):  # pragma: no cover
        return ProductionVariantServerlessConfig.make_one(
            self.boto3_raw_data["DesiredServerlessConfig"]
        )

    @cached_property
    def ManagedInstanceScaling(self):  # pragma: no cover
        return ProductionVariantManagedInstanceScaling.make_one(
            self.boto3_raw_data["ManagedInstanceScaling"]
        )

    @cached_property
    def RoutingConfig(self):  # pragma: no cover
        return ProductionVariantRoutingConfig.make_one(
            self.boto3_raw_data["RoutingConfig"]
        )

    @cached_property
    def CapacityReservationConfig(self):  # pragma: no cover
        return ProductionVariantCapacityReservationSummary.make_one(
            self.boto3_raw_data["CapacityReservationConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProductionVariantSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProductionVariantSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceRecommendation:
    boto3_raw_data: "type_defs.InferenceRecommendationTypeDef" = dataclasses.field()

    @cached_property
    def EndpointConfiguration(self):  # pragma: no cover
        return EndpointOutputConfiguration.make_one(
            self.boto3_raw_data["EndpointConfiguration"]
        )

    @cached_property
    def ModelConfiguration(self):  # pragma: no cover
        return ModelConfiguration.make_one(self.boto3_raw_data["ModelConfiguration"])

    RecommendationId = field("RecommendationId")

    @cached_property
    def Metrics(self):  # pragma: no cover
        return RecommendationMetrics.make_one(self.boto3_raw_data["Metrics"])

    InvocationEndTime = field("InvocationEndTime")
    InvocationStartTime = field("InvocationStartTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InferenceRecommendationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceRecommendationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RecommendationJobInferenceBenchmark:
    boto3_raw_data: "type_defs.RecommendationJobInferenceBenchmarkTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ModelConfiguration(self):  # pragma: no cover
        return ModelConfiguration.make_one(self.boto3_raw_data["ModelConfiguration"])

    @cached_property
    def Metrics(self):  # pragma: no cover
        return RecommendationMetrics.make_one(self.boto3_raw_data["Metrics"])

    @cached_property
    def EndpointMetrics(self):  # pragma: no cover
        return InferenceMetrics.make_one(self.boto3_raw_data["EndpointMetrics"])

    @cached_property
    def EndpointConfiguration(self):  # pragma: no cover
        return EndpointOutputConfiguration.make_one(
            self.boto3_raw_data["EndpointConfiguration"]
        )

    FailureReason = field("FailureReason")
    InvocationEndTime = field("InvocationEndTime")
    InvocationStartTime = field("InvocationStartTime")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RecommendationJobInferenceBenchmarkTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RecommendationJobInferenceBenchmarkTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchExpressionPaginator:
    boto3_raw_data: "type_defs.SearchExpressionPaginatorTypeDef" = dataclasses.field()

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def NestedFilters(self):  # pragma: no cover
        return NestedFilters.make_many(self.boto3_raw_data["NestedFilters"])

    SubExpressions = field("SubExpressions")
    Operator = field("Operator")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SearchExpressionPaginatorTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchExpressionPaginatorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchExpression:
    boto3_raw_data: "type_defs.SearchExpressionTypeDef" = dataclasses.field()

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def NestedFilters(self):  # pragma: no cover
        return NestedFilters.make_many(self.boto3_raw_data["NestedFilters"])

    SubExpressions = field("SubExpressions")
    Operator = field("Operator")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SearchExpressionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchExpressionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTrainingJobsForHyperParameterTuningJobResponse:
    boto3_raw_data: (
        "type_defs.ListTrainingJobsForHyperParameterTuningJobResponseTypeDef"
    ) = dataclasses.field()

    @cached_property
    def TrainingJobSummaries(self):  # pragma: no cover
        return HyperParameterTrainingJobSummary.make_many(
            self.boto3_raw_data["TrainingJobSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListTrainingJobsForHyperParameterTuningJobResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ListTrainingJobsForHyperParameterTuningJobResponseTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListHyperParameterTuningJobsResponse:
    boto3_raw_data: "type_defs.ListHyperParameterTuningJobsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def HyperParameterTuningJobSummaries(self):  # pragma: no cover
        return HyperParameterTuningJobSummary.make_many(
            self.boto3_raw_data["HyperParameterTuningJobSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListHyperParameterTuningJobsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListHyperParameterTuningJobsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociationSummary:
    boto3_raw_data: "type_defs.AssociationSummaryTypeDef" = dataclasses.field()

    SourceArn = field("SourceArn")
    DestinationArn = field("DestinationArn")
    SourceType = field("SourceType")
    DestinationType = field("DestinationType")
    AssociationType = field("AssociationType")
    SourceName = field("SourceName")
    DestinationName = field("DestinationName")
    CreationTime = field("CreationTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssociationSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociationSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeActionResponse:
    boto3_raw_data: "type_defs.DescribeActionResponseTypeDef" = dataclasses.field()

    ActionName = field("ActionName")
    ActionArn = field("ActionArn")

    @cached_property
    def Source(self):  # pragma: no cover
        return ActionSource.make_one(self.boto3_raw_data["Source"])

    ActionType = field("ActionType")
    Description = field("Description")
    Status = field("Status")
    Properties = field("Properties")
    CreationTime = field("CreationTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    @cached_property
    def MetadataProperties(self):  # pragma: no cover
        return MetadataProperties.make_one(self.boto3_raw_data["MetadataProperties"])

    LineageGroupArn = field("LineageGroupArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeActionResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeActionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeArtifactResponse:
    boto3_raw_data: "type_defs.DescribeArtifactResponseTypeDef" = dataclasses.field()

    ArtifactName = field("ArtifactName")
    ArtifactArn = field("ArtifactArn")

    @cached_property
    def Source(self):  # pragma: no cover
        return ArtifactSourceOutput.make_one(self.boto3_raw_data["Source"])

    ArtifactType = field("ArtifactType")
    Properties = field("Properties")
    CreationTime = field("CreationTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    @cached_property
    def MetadataProperties(self):  # pragma: no cover
        return MetadataProperties.make_one(self.boto3_raw_data["MetadataProperties"])

    LineageGroupArn = field("LineageGroupArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeArtifactResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeArtifactResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeComputeQuotaResponse:
    boto3_raw_data: "type_defs.DescribeComputeQuotaResponseTypeDef" = (
        dataclasses.field()
    )

    ComputeQuotaArn = field("ComputeQuotaArn")
    ComputeQuotaId = field("ComputeQuotaId")
    Name = field("Name")
    Description = field("Description")
    ComputeQuotaVersion = field("ComputeQuotaVersion")
    Status = field("Status")
    FailureReason = field("FailureReason")
    ClusterArn = field("ClusterArn")

    @cached_property
    def ComputeQuotaConfig(self):  # pragma: no cover
        return ComputeQuotaConfigOutput.make_one(
            self.boto3_raw_data["ComputeQuotaConfig"]
        )

    @cached_property
    def ComputeQuotaTarget(self):  # pragma: no cover
        return ComputeQuotaTarget.make_one(self.boto3_raw_data["ComputeQuotaTarget"])

    ActivationState = field("ActivationState")
    CreationTime = field("CreationTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeComputeQuotaResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeComputeQuotaResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeContextResponse:
    boto3_raw_data: "type_defs.DescribeContextResponseTypeDef" = dataclasses.field()

    ContextName = field("ContextName")
    ContextArn = field("ContextArn")

    @cached_property
    def Source(self):  # pragma: no cover
        return ContextSource.make_one(self.boto3_raw_data["Source"])

    ContextType = field("ContextType")
    Description = field("Description")
    Properties = field("Properties")
    CreationTime = field("CreationTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    LineageGroupArn = field("LineageGroupArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeContextResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeContextResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeExperimentResponse:
    boto3_raw_data: "type_defs.DescribeExperimentResponseTypeDef" = dataclasses.field()

    ExperimentName = field("ExperimentName")
    ExperimentArn = field("ExperimentArn")
    DisplayName = field("DisplayName")

    @cached_property
    def Source(self):  # pragma: no cover
        return ExperimentSource.make_one(self.boto3_raw_data["Source"])

    Description = field("Description")
    CreationTime = field("CreationTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeExperimentResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeExperimentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLineageGroupResponse:
    boto3_raw_data: "type_defs.DescribeLineageGroupResponseTypeDef" = (
        dataclasses.field()
    )

    LineageGroupName = field("LineageGroupName")
    LineageGroupArn = field("LineageGroupArn")
    DisplayName = field("DisplayName")
    Description = field("Description")
    CreationTime = field("CreationTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeLineageGroupResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeLineageGroupResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeMlflowTrackingServerResponse:
    boto3_raw_data: "type_defs.DescribeMlflowTrackingServerResponseTypeDef" = (
        dataclasses.field()
    )

    TrackingServerArn = field("TrackingServerArn")
    TrackingServerName = field("TrackingServerName")
    ArtifactStoreUri = field("ArtifactStoreUri")
    TrackingServerSize = field("TrackingServerSize")
    MlflowVersion = field("MlflowVersion")
    RoleArn = field("RoleArn")
    TrackingServerStatus = field("TrackingServerStatus")
    TrackingServerMaintenanceStatus = field("TrackingServerMaintenanceStatus")
    IsActive = field("IsActive")
    TrackingServerUrl = field("TrackingServerUrl")
    WeeklyMaintenanceWindowStart = field("WeeklyMaintenanceWindowStart")
    AutomaticModelRegistration = field("AutomaticModelRegistration")
    CreationTime = field("CreationTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeMlflowTrackingServerResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeMlflowTrackingServerResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeModelCardResponse:
    boto3_raw_data: "type_defs.DescribeModelCardResponseTypeDef" = dataclasses.field()

    ModelCardArn = field("ModelCardArn")
    ModelCardName = field("ModelCardName")
    ModelCardVersion = field("ModelCardVersion")
    Content = field("Content")
    ModelCardStatus = field("ModelCardStatus")

    @cached_property
    def SecurityConfig(self):  # pragma: no cover
        return ModelCardSecurityConfig.make_one(self.boto3_raw_data["SecurityConfig"])

    CreationTime = field("CreationTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    ModelCardProcessingStatus = field("ModelCardProcessingStatus")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeModelCardResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeModelCardResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeModelPackageGroupOutput:
    boto3_raw_data: "type_defs.DescribeModelPackageGroupOutputTypeDef" = (
        dataclasses.field()
    )

    ModelPackageGroupName = field("ModelPackageGroupName")
    ModelPackageGroupArn = field("ModelPackageGroupArn")
    ModelPackageGroupDescription = field("ModelPackageGroupDescription")
    CreationTime = field("CreationTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    ModelPackageGroupStatus = field("ModelPackageGroupStatus")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeModelPackageGroupOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeModelPackageGroupOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribePipelineResponse:
    boto3_raw_data: "type_defs.DescribePipelineResponseTypeDef" = dataclasses.field()

    PipelineArn = field("PipelineArn")
    PipelineName = field("PipelineName")
    PipelineDisplayName = field("PipelineDisplayName")
    PipelineDefinition = field("PipelineDefinition")
    PipelineDescription = field("PipelineDescription")
    RoleArn = field("RoleArn")
    PipelineStatus = field("PipelineStatus")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    LastRunTime = field("LastRunTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    @cached_property
    def ParallelismConfiguration(self):  # pragma: no cover
        return ParallelismConfiguration.make_one(
            self.boto3_raw_data["ParallelismConfiguration"]
        )

    PipelineVersionDisplayName = field("PipelineVersionDisplayName")
    PipelineVersionDescription = field("PipelineVersionDescription")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribePipelineResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribePipelineResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTrialComponentResponse:
    boto3_raw_data: "type_defs.DescribeTrialComponentResponseTypeDef" = (
        dataclasses.field()
    )

    TrialComponentName = field("TrialComponentName")
    TrialComponentArn = field("TrialComponentArn")
    DisplayName = field("DisplayName")

    @cached_property
    def Source(self):  # pragma: no cover
        return TrialComponentSource.make_one(self.boto3_raw_data["Source"])

    @cached_property
    def Status(self):  # pragma: no cover
        return TrialComponentStatus.make_one(self.boto3_raw_data["Status"])

    StartTime = field("StartTime")
    EndTime = field("EndTime")
    CreationTime = field("CreationTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    Parameters = field("Parameters")
    InputArtifacts = field("InputArtifacts")
    OutputArtifacts = field("OutputArtifacts")

    @cached_property
    def MetadataProperties(self):  # pragma: no cover
        return MetadataProperties.make_one(self.boto3_raw_data["MetadataProperties"])

    @cached_property
    def Metrics(self):  # pragma: no cover
        return TrialComponentMetricSummary.make_many(self.boto3_raw_data["Metrics"])

    LineageGroupArn = field("LineageGroupArn")

    @cached_property
    def Sources(self):  # pragma: no cover
        return TrialComponentSource.make_many(self.boto3_raw_data["Sources"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeTrialComponentResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTrialComponentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTrialResponse:
    boto3_raw_data: "type_defs.DescribeTrialResponseTypeDef" = dataclasses.field()

    TrialName = field("TrialName")
    TrialArn = field("TrialArn")
    DisplayName = field("DisplayName")
    ExperimentName = field("ExperimentName")

    @cached_property
    def Source(self):  # pragma: no cover
        return TrialSource.make_one(self.boto3_raw_data["Source"])

    CreationTime = field("CreationTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    @cached_property
    def MetadataProperties(self):  # pragma: no cover
        return MetadataProperties.make_one(self.boto3_raw_data["MetadataProperties"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeTrialResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTrialResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Experiment:
    boto3_raw_data: "type_defs.ExperimentTypeDef" = dataclasses.field()

    ExperimentName = field("ExperimentName")
    ExperimentArn = field("ExperimentArn")
    DisplayName = field("DisplayName")

    @cached_property
    def Source(self):  # pragma: no cover
        return ExperimentSource.make_one(self.boto3_raw_data["Source"])

    Description = field("Description")
    CreationTime = field("CreationTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ExperimentTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ExperimentTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelCard:
    boto3_raw_data: "type_defs.ModelCardTypeDef" = dataclasses.field()

    ModelCardArn = field("ModelCardArn")
    ModelCardName = field("ModelCardName")
    ModelCardVersion = field("ModelCardVersion")
    Content = field("Content")
    ModelCardStatus = field("ModelCardStatus")

    @cached_property
    def SecurityConfig(self):  # pragma: no cover
        return ModelCardSecurityConfig.make_one(self.boto3_raw_data["SecurityConfig"])

    CreationTime = field("CreationTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    ModelId = field("ModelId")
    RiskRating = field("RiskRating")
    ModelPackageGroupName = field("ModelPackageGroupName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ModelCardTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ModelCardTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelDashboardModelCard:
    boto3_raw_data: "type_defs.ModelDashboardModelCardTypeDef" = dataclasses.field()

    ModelCardArn = field("ModelCardArn")
    ModelCardName = field("ModelCardName")
    ModelCardVersion = field("ModelCardVersion")
    ModelCardStatus = field("ModelCardStatus")

    @cached_property
    def SecurityConfig(self):  # pragma: no cover
        return ModelCardSecurityConfig.make_one(self.boto3_raw_data["SecurityConfig"])

    CreationTime = field("CreationTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    ModelId = field("ModelId")
    RiskRating = field("RiskRating")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelDashboardModelCardTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelDashboardModelCardTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelPackageGroup:
    boto3_raw_data: "type_defs.ModelPackageGroupTypeDef" = dataclasses.field()

    ModelPackageGroupName = field("ModelPackageGroupName")
    ModelPackageGroupArn = field("ModelPackageGroupArn")
    ModelPackageGroupDescription = field("ModelPackageGroupDescription")
    CreationTime = field("CreationTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    ModelPackageGroupStatus = field("ModelPackageGroupStatus")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ModelPackageGroupTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelPackageGroupTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Pipeline:
    boto3_raw_data: "type_defs.PipelineTypeDef" = dataclasses.field()

    PipelineArn = field("PipelineArn")
    PipelineName = field("PipelineName")
    PipelineDisplayName = field("PipelineDisplayName")
    PipelineDescription = field("PipelineDescription")
    RoleArn = field("RoleArn")
    PipelineStatus = field("PipelineStatus")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    LastRunTime = field("LastRunTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    @cached_property
    def ParallelismConfiguration(self):  # pragma: no cover
        return ParallelismConfiguration.make_one(
            self.boto3_raw_data["ParallelismConfiguration"]
        )

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PipelineTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PipelineTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PipelineVersion:
    boto3_raw_data: "type_defs.PipelineVersionTypeDef" = dataclasses.field()

    PipelineArn = field("PipelineArn")
    PipelineVersionId = field("PipelineVersionId")
    PipelineVersionDisplayName = field("PipelineVersionDisplayName")
    PipelineVersionDescription = field("PipelineVersionDescription")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    LastExecutedPipelineExecutionArn = field("LastExecutedPipelineExecutionArn")
    LastExecutedPipelineExecutionDisplayName = field(
        "LastExecutedPipelineExecutionDisplayName"
    )
    LastExecutedPipelineExecutionStatus = field("LastExecutedPipelineExecutionStatus")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PipelineVersionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PipelineVersionTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrialComponentSimpleSummary:
    boto3_raw_data: "type_defs.TrialComponentSimpleSummaryTypeDef" = dataclasses.field()

    TrialComponentName = field("TrialComponentName")
    TrialComponentArn = field("TrialComponentArn")

    @cached_property
    def TrialComponentSource(self):  # pragma: no cover
        return TrialComponentSource.make_one(
            self.boto3_raw_data["TrialComponentSource"]
        )

    CreationTime = field("CreationTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrialComponentSimpleSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrialComponentSimpleSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrialComponentSummary:
    boto3_raw_data: "type_defs.TrialComponentSummaryTypeDef" = dataclasses.field()

    TrialComponentName = field("TrialComponentName")
    TrialComponentArn = field("TrialComponentArn")
    DisplayName = field("DisplayName")

    @cached_property
    def TrialComponentSource(self):  # pragma: no cover
        return TrialComponentSource.make_one(
            self.boto3_raw_data["TrialComponentSource"]
        )

    @cached_property
    def Status(self):  # pragma: no cover
        return TrialComponentStatus.make_one(self.boto3_raw_data["Status"])

    StartTime = field("StartTime")
    EndTime = field("EndTime")
    CreationTime = field("CreationTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrialComponentSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrialComponentSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WorkerAccessConfiguration:
    boto3_raw_data: "type_defs.WorkerAccessConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def S3Presign(self):  # pragma: no cover
        return S3Presign.make_one(self.boto3_raw_data["S3Presign"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.WorkerAccessConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WorkerAccessConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceComponentDeploymentConfigOutput:
    boto3_raw_data: "type_defs.InferenceComponentDeploymentConfigOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def RollingUpdatePolicy(self):  # pragma: no cover
        return InferenceComponentRollingUpdatePolicy.make_one(
            self.boto3_raw_data["RollingUpdatePolicy"]
        )

    @cached_property
    def AutoRollbackConfiguration(self):  # pragma: no cover
        return AutoRollbackConfigOutput.make_one(
            self.boto3_raw_data["AutoRollbackConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InferenceComponentDeploymentConfigOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceComponentDeploymentConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceComponentDeploymentConfig:
    boto3_raw_data: "type_defs.InferenceComponentDeploymentConfigTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def RollingUpdatePolicy(self):  # pragma: no cover
        return InferenceComponentRollingUpdatePolicy.make_one(
            self.boto3_raw_data["RollingUpdatePolicy"]
        )

    @cached_property
    def AutoRollbackConfiguration(self):  # pragma: no cover
        return AutoRollbackConfig.make_one(
            self.boto3_raw_data["AutoRollbackConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.InferenceComponentDeploymentConfigTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceComponentDeploymentConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateInferenceComponentInput:
    boto3_raw_data: "type_defs.CreateInferenceComponentInputTypeDef" = (
        dataclasses.field()
    )

    InferenceComponentName = field("InferenceComponentName")
    EndpointName = field("EndpointName")

    @cached_property
    def Specification(self):  # pragma: no cover
        return InferenceComponentSpecification.make_one(
            self.boto3_raw_data["Specification"]
        )

    VariantName = field("VariantName")

    @cached_property
    def RuntimeConfig(self):  # pragma: no cover
        return InferenceComponentRuntimeConfig.make_one(
            self.boto3_raw_data["RuntimeConfig"]
        )

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateInferenceComponentInputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateInferenceComponentInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourceConfigOutput:
    boto3_raw_data: "type_defs.ResourceConfigOutputTypeDef" = dataclasses.field()

    VolumeSizeInGB = field("VolumeSizeInGB")
    InstanceType = field("InstanceType")
    InstanceCount = field("InstanceCount")
    VolumeKmsKeyId = field("VolumeKmsKeyId")
    KeepAlivePeriodInSeconds = field("KeepAlivePeriodInSeconds")

    @cached_property
    def InstanceGroups(self):  # pragma: no cover
        return InstanceGroup.make_many(self.boto3_raw_data["InstanceGroups"])

    TrainingPlanArn = field("TrainingPlanArn")

    @cached_property
    def InstancePlacementConfig(self):  # pragma: no cover
        return InstancePlacementConfigOutput.make_one(
            self.boto3_raw_data["InstancePlacementConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ResourceConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResourceConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HyperParameterSpecificationOutput:
    boto3_raw_data: "type_defs.HyperParameterSpecificationOutputTypeDef" = (
        dataclasses.field()
    )

    Name = field("Name")
    Type = field("Type")
    Description = field("Description")

    @cached_property
    def Range(self):  # pragma: no cover
        return ParameterRangeOutput.make_one(self.boto3_raw_data["Range"])

    IsTunable = field("IsTunable")
    IsRequired = field("IsRequired")
    DefaultValue = field("DefaultValue")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.HyperParameterSpecificationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HyperParameterSpecificationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HyperParameterSpecification:
    boto3_raw_data: "type_defs.HyperParameterSpecificationTypeDef" = dataclasses.field()

    Name = field("Name")
    Type = field("Type")
    Description = field("Description")

    @cached_property
    def Range(self):  # pragma: no cover
        return ParameterRange.make_one(self.boto3_raw_data["Range"])

    IsTunable = field("IsTunable")
    IsRequired = field("IsRequired")
    DefaultValue = field("DefaultValue")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HyperParameterSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HyperParameterSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HyperParameterTuningJobConfigOutput:
    boto3_raw_data: "type_defs.HyperParameterTuningJobConfigOutputTypeDef" = (
        dataclasses.field()
    )

    Strategy = field("Strategy")

    @cached_property
    def ResourceLimits(self):  # pragma: no cover
        return ResourceLimits.make_one(self.boto3_raw_data["ResourceLimits"])

    @cached_property
    def StrategyConfig(self):  # pragma: no cover
        return HyperParameterTuningJobStrategyConfig.make_one(
            self.boto3_raw_data["StrategyConfig"]
        )

    @cached_property
    def HyperParameterTuningJobObjective(self):  # pragma: no cover
        return HyperParameterTuningJobObjective.make_one(
            self.boto3_raw_data["HyperParameterTuningJobObjective"]
        )

    @cached_property
    def ParameterRanges(self):  # pragma: no cover
        return ParameterRangesOutput.make_one(self.boto3_raw_data["ParameterRanges"])

    TrainingJobEarlyStoppingType = field("TrainingJobEarlyStoppingType")

    @cached_property
    def TuningJobCompletionCriteria(self):  # pragma: no cover
        return TuningJobCompletionCriteria.make_one(
            self.boto3_raw_data["TuningJobCompletionCriteria"]
        )

    RandomSeed = field("RandomSeed")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.HyperParameterTuningJobConfigOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HyperParameterTuningJobConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AppImageConfigDetails:
    boto3_raw_data: "type_defs.AppImageConfigDetailsTypeDef" = dataclasses.field()

    AppImageConfigArn = field("AppImageConfigArn")
    AppImageConfigName = field("AppImageConfigName")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def KernelGatewayImageConfig(self):  # pragma: no cover
        return KernelGatewayImageConfigOutput.make_one(
            self.boto3_raw_data["KernelGatewayImageConfig"]
        )

    @cached_property
    def JupyterLabAppImageConfig(self):  # pragma: no cover
        return JupyterLabAppImageConfigOutput.make_one(
            self.boto3_raw_data["JupyterLabAppImageConfig"]
        )

    @cached_property
    def CodeEditorAppImageConfig(self):  # pragma: no cover
        return CodeEditorAppImageConfigOutput.make_one(
            self.boto3_raw_data["CodeEditorAppImageConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AppImageConfigDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AppImageConfigDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAppImageConfigResponse:
    boto3_raw_data: "type_defs.DescribeAppImageConfigResponseTypeDef" = (
        dataclasses.field()
    )

    AppImageConfigArn = field("AppImageConfigArn")
    AppImageConfigName = field("AppImageConfigName")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def KernelGatewayImageConfig(self):  # pragma: no cover
        return KernelGatewayImageConfigOutput.make_one(
            self.boto3_raw_data["KernelGatewayImageConfig"]
        )

    @cached_property
    def JupyterLabAppImageConfig(self):  # pragma: no cover
        return JupyterLabAppImageConfigOutput.make_one(
            self.boto3_raw_data["JupyterLabAppImageConfig"]
        )

    @cached_property
    def CodeEditorAppImageConfig(self):  # pragma: no cover
        return CodeEditorAppImageConfigOutput.make_one(
            self.boto3_raw_data["CodeEditorAppImageConfig"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeAppImageConfigResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAppImageConfigResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListLabelingJobsForWorkteamResponse:
    boto3_raw_data: "type_defs.ListLabelingJobsForWorkteamResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def LabelingJobSummaryList(self):  # pragma: no cover
        return LabelingJobForWorkteamSummary.make_many(
            self.boto3_raw_data["LabelingJobSummaryList"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListLabelingJobsForWorkteamResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListLabelingJobsForWorkteamResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LabelingJobInputConfigOutput:
    boto3_raw_data: "type_defs.LabelingJobInputConfigOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DataSource(self):  # pragma: no cover
        return LabelingJobDataSource.make_one(self.boto3_raw_data["DataSource"])

    @cached_property
    def DataAttributes(self):  # pragma: no cover
        return LabelingJobDataAttributesOutput.make_one(
            self.boto3_raw_data["DataAttributes"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LabelingJobInputConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LabelingJobInputConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LabelingJobInputConfig:
    boto3_raw_data: "type_defs.LabelingJobInputConfigTypeDef" = dataclasses.field()

    @cached_property
    def DataSource(self):  # pragma: no cover
        return LabelingJobDataSource.make_one(self.boto3_raw_data["DataSource"])

    @cached_property
    def DataAttributes(self):  # pragma: no cover
        return LabelingJobDataAttributes.make_one(self.boto3_raw_data["DataAttributes"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LabelingJobInputConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LabelingJobInputConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TargetTrackingScalingPolicyConfiguration:
    boto3_raw_data: "type_defs.TargetTrackingScalingPolicyConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def MetricSpecification(self):  # pragma: no cover
        return MetricSpecification.make_one(self.boto3_raw_data["MetricSpecification"])

    TargetValue = field("TargetValue")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TargetTrackingScalingPolicyConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TargetTrackingScalingPolicyConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataSourceOutput:
    boto3_raw_data: "type_defs.DataSourceOutputTypeDef" = dataclasses.field()

    @cached_property
    def S3DataSource(self):  # pragma: no cover
        return S3DataSourceOutput.make_one(self.boto3_raw_data["S3DataSource"])

    @cached_property
    def FileSystemDataSource(self):  # pragma: no cover
        return FileSystemDataSource.make_one(
            self.boto3_raw_data["FileSystemDataSource"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DataSourceOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataSourceOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AdditionalModelDataSource:
    boto3_raw_data: "type_defs.AdditionalModelDataSourceTypeDef" = dataclasses.field()

    ChannelName = field("ChannelName")

    @cached_property
    def S3DataSource(self):  # pragma: no cover
        return S3ModelDataSource.make_one(self.boto3_raw_data["S3DataSource"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AdditionalModelDataSourceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AdditionalModelDataSourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelDataSource:
    boto3_raw_data: "type_defs.ModelDataSourceTypeDef" = dataclasses.field()

    @cached_property
    def S3DataSource(self):  # pragma: no cover
        return S3ModelDataSource.make_one(self.boto3_raw_data["S3DataSource"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ModelDataSourceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ModelDataSourceTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringAlertSummary:
    boto3_raw_data: "type_defs.MonitoringAlertSummaryTypeDef" = dataclasses.field()

    MonitoringAlertName = field("MonitoringAlertName")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    AlertStatus = field("AlertStatus")
    DatapointsToAlert = field("DatapointsToAlert")
    EvaluationPeriod = field("EvaluationPeriod")

    @cached_property
    def Actions(self):  # pragma: no cover
        return MonitoringAlertActions.make_one(self.boto3_raw_data["Actions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MonitoringAlertSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringAlertSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelVariantConfigSummary:
    boto3_raw_data: "type_defs.ModelVariantConfigSummaryTypeDef" = dataclasses.field()

    ModelName = field("ModelName")
    VariantName = field("VariantName")

    @cached_property
    def InfrastructureConfig(self):  # pragma: no cover
        return ModelInfrastructureConfig.make_one(
            self.boto3_raw_data["InfrastructureConfig"]
        )

    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelVariantConfigSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelVariantConfigSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelVariantConfig:
    boto3_raw_data: "type_defs.ModelVariantConfigTypeDef" = dataclasses.field()

    ModelName = field("ModelName")
    VariantName = field("VariantName")

    @cached_property
    def InfrastructureConfig(self):  # pragma: no cover
        return ModelInfrastructureConfig.make_one(
            self.boto3_raw_data["InfrastructureConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelVariantConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelVariantConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelMetadataRequestPaginate:
    boto3_raw_data: "type_defs.ListModelMetadataRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SearchExpression(self):  # pragma: no cover
        return ModelMetadataSearchExpression.make_one(
            self.boto3_raw_data["SearchExpression"]
        )

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListModelMetadataRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelMetadataRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListModelMetadataRequest:
    boto3_raw_data: "type_defs.ListModelMetadataRequestTypeDef" = dataclasses.field()

    @cached_property
    def SearchExpression(self):  # pragma: no cover
        return ModelMetadataSearchExpression.make_one(
            self.boto3_raw_data["SearchExpression"]
        )

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListModelMetadataRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListModelMetadataRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OptimizationConfig:
    boto3_raw_data: "type_defs.OptimizationConfigTypeDef" = dataclasses.field()

    ModelQuantizationConfig = field("ModelQuantizationConfig")
    ModelCompilationConfig = field("ModelCompilationConfig")
    ModelShardingConfig = field("ModelShardingConfig")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.OptimizationConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OptimizationConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchTransformInputOutput:
    boto3_raw_data: "type_defs.BatchTransformInputOutputTypeDef" = dataclasses.field()

    DataCapturedDestinationS3Uri = field("DataCapturedDestinationS3Uri")

    @cached_property
    def DatasetFormat(self):  # pragma: no cover
        return MonitoringDatasetFormatOutput.make_one(
            self.boto3_raw_data["DatasetFormat"]
        )

    LocalPath = field("LocalPath")
    S3InputMode = field("S3InputMode")
    S3DataDistributionType = field("S3DataDistributionType")
    FeaturesAttribute = field("FeaturesAttribute")
    InferenceAttribute = field("InferenceAttribute")
    ProbabilityAttribute = field("ProbabilityAttribute")
    ProbabilityThresholdAttribute = field("ProbabilityThresholdAttribute")
    StartTimeOffset = field("StartTimeOffset")
    EndTimeOffset = field("EndTimeOffset")
    ExcludeFeaturesAttribute = field("ExcludeFeaturesAttribute")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BatchTransformInputOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchTransformInputOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchTransformInput:
    boto3_raw_data: "type_defs.BatchTransformInputTypeDef" = dataclasses.field()

    DataCapturedDestinationS3Uri = field("DataCapturedDestinationS3Uri")

    @cached_property
    def DatasetFormat(self):  # pragma: no cover
        return MonitoringDatasetFormat.make_one(self.boto3_raw_data["DatasetFormat"])

    LocalPath = field("LocalPath")
    S3InputMode = field("S3InputMode")
    S3DataDistributionType = field("S3DataDistributionType")
    FeaturesAttribute = field("FeaturesAttribute")
    InferenceAttribute = field("InferenceAttribute")
    ProbabilityAttribute = field("ProbabilityAttribute")
    ProbabilityThresholdAttribute = field("ProbabilityThresholdAttribute")
    StartTimeOffset = field("StartTimeOffset")
    EndTimeOffset = field("EndTimeOffset")
    ExcludeFeaturesAttribute = field("ExcludeFeaturesAttribute")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BatchTransformInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchTransformInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringOutputConfigOutput:
    boto3_raw_data: "type_defs.MonitoringOutputConfigOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def MonitoringOutputs(self):  # pragma: no cover
        return MonitoringOutput.make_many(self.boto3_raw_data["MonitoringOutputs"])

    KmsKeyId = field("KmsKeyId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MonitoringOutputConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringOutputConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringOutputConfig:
    boto3_raw_data: "type_defs.MonitoringOutputConfigTypeDef" = dataclasses.field()

    @cached_property
    def MonitoringOutputs(self):  # pragma: no cover
        return MonitoringOutput.make_many(self.boto3_raw_data["MonitoringOutputs"])

    KmsKeyId = field("KmsKeyId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MonitoringOutputConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringOutputConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MemberDefinition:
    boto3_raw_data: "type_defs.MemberDefinitionTypeDef" = dataclasses.field()

    @cached_property
    def CognitoMemberDefinition(self):  # pragma: no cover
        return CognitoMemberDefinition.make_one(
            self.boto3_raw_data["CognitoMemberDefinition"]
        )

    OidcMemberDefinition = field("OidcMemberDefinition")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MemberDefinitionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MemberDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OptimizationJobModelSource:
    boto3_raw_data: "type_defs.OptimizationJobModelSourceTypeDef" = dataclasses.field()

    @cached_property
    def S3(self):  # pragma: no cover
        return OptimizationJobModelSourceS3.make_one(self.boto3_raw_data["S3"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.OptimizationJobModelSourceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OptimizationJobModelSourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateCompilationJobRequest:
    boto3_raw_data: "type_defs.CreateCompilationJobRequestTypeDef" = dataclasses.field()

    CompilationJobName = field("CompilationJobName")
    RoleArn = field("RoleArn")

    @cached_property
    def OutputConfig(self):  # pragma: no cover
        return OutputConfig.make_one(self.boto3_raw_data["OutputConfig"])

    @cached_property
    def StoppingCondition(self):  # pragma: no cover
        return StoppingCondition.make_one(self.boto3_raw_data["StoppingCondition"])

    ModelPackageVersionArn = field("ModelPackageVersionArn")

    @cached_property
    def InputConfig(self):  # pragma: no cover
        return InputConfig.make_one(self.boto3_raw_data["InputConfig"])

    VpcConfig = field("VpcConfig")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateCompilationJobRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateCompilationJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCompilationJobResponse:
    boto3_raw_data: "type_defs.DescribeCompilationJobResponseTypeDef" = (
        dataclasses.field()
    )

    CompilationJobName = field("CompilationJobName")
    CompilationJobArn = field("CompilationJobArn")
    CompilationJobStatus = field("CompilationJobStatus")
    CompilationStartTime = field("CompilationStartTime")
    CompilationEndTime = field("CompilationEndTime")

    @cached_property
    def StoppingCondition(self):  # pragma: no cover
        return StoppingCondition.make_one(self.boto3_raw_data["StoppingCondition"])

    InferenceImage = field("InferenceImage")
    ModelPackageVersionArn = field("ModelPackageVersionArn")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    FailureReason = field("FailureReason")

    @cached_property
    def ModelArtifacts(self):  # pragma: no cover
        return ModelArtifacts.make_one(self.boto3_raw_data["ModelArtifacts"])

    @cached_property
    def ModelDigests(self):  # pragma: no cover
        return ModelDigests.make_one(self.boto3_raw_data["ModelDigests"])

    RoleArn = field("RoleArn")

    @cached_property
    def InputConfig(self):  # pragma: no cover
        return InputConfig.make_one(self.boto3_raw_data["InputConfig"])

    @cached_property
    def OutputConfig(self):  # pragma: no cover
        return OutputConfig.make_one(self.boto3_raw_data["OutputConfig"])

    @cached_property
    def VpcConfig(self):  # pragma: no cover
        return NeoVpcConfigOutput.make_one(self.boto3_raw_data["VpcConfig"])

    @cached_property
    def DerivedInformation(self):  # pragma: no cover
        return DerivedInformation.make_one(self.boto3_raw_data["DerivedInformation"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeCompilationJobResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCompilationJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreatePartnerAppRequest:
    boto3_raw_data: "type_defs.CreatePartnerAppRequestTypeDef" = dataclasses.field()

    Name = field("Name")
    Type = field("Type")
    ExecutionRoleArn = field("ExecutionRoleArn")
    Tier = field("Tier")
    AuthType = field("AuthType")
    KmsKeyId = field("KmsKeyId")

    @cached_property
    def MaintenanceConfig(self):  # pragma: no cover
        return PartnerAppMaintenanceConfig.make_one(
            self.boto3_raw_data["MaintenanceConfig"]
        )

    ApplicationConfig = field("ApplicationConfig")
    EnableIamSessionBasedIdentity = field("EnableIamSessionBasedIdentity")
    ClientToken = field("ClientToken")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreatePartnerAppRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreatePartnerAppRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdatePartnerAppRequest:
    boto3_raw_data: "type_defs.UpdatePartnerAppRequestTypeDef" = dataclasses.field()

    Arn = field("Arn")

    @cached_property
    def MaintenanceConfig(self):  # pragma: no cover
        return PartnerAppMaintenanceConfig.make_one(
            self.boto3_raw_data["MaintenanceConfig"]
        )

    Tier = field("Tier")
    ApplicationConfig = field("ApplicationConfig")
    EnableIamSessionBasedIdentity = field("EnableIamSessionBasedIdentity")
    ClientToken = field("ClientToken")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdatePartnerAppRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdatePartnerAppRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PendingDeploymentSummary:
    boto3_raw_data: "type_defs.PendingDeploymentSummaryTypeDef" = dataclasses.field()

    EndpointConfigName = field("EndpointConfigName")

    @cached_property
    def ProductionVariants(self):  # pragma: no cover
        return PendingProductionVariantSummary.make_many(
            self.boto3_raw_data["ProductionVariants"]
        )

    StartTime = field("StartTime")

    @cached_property
    def ShadowProductionVariants(self):  # pragma: no cover
        return PendingProductionVariantSummary.make_many(
            self.boto3_raw_data["ShadowProductionVariants"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PendingDeploymentSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PendingDeploymentSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClusterSchedulerConfigResponse:
    boto3_raw_data: "type_defs.DescribeClusterSchedulerConfigResponseTypeDef" = (
        dataclasses.field()
    )

    ClusterSchedulerConfigArn = field("ClusterSchedulerConfigArn")
    ClusterSchedulerConfigId = field("ClusterSchedulerConfigId")
    Name = field("Name")
    ClusterSchedulerConfigVersion = field("ClusterSchedulerConfigVersion")
    Status = field("Status")
    FailureReason = field("FailureReason")
    ClusterArn = field("ClusterArn")

    @cached_property
    def SchedulerConfig(self):  # pragma: no cover
        return SchedulerConfigOutput.make_one(self.boto3_raw_data["SchedulerConfig"])

    Description = field("Description")
    CreationTime = field("CreationTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeClusterSchedulerConfigResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeClusterSchedulerConfigResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProcessingOutputConfigOutput:
    boto3_raw_data: "type_defs.ProcessingOutputConfigOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Outputs(self):  # pragma: no cover
        return ProcessingOutput.make_many(self.boto3_raw_data["Outputs"])

    KmsKeyId = field("KmsKeyId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProcessingOutputConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProcessingOutputConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProcessingOutputConfig:
    boto3_raw_data: "type_defs.ProcessingOutputConfigTypeDef" = dataclasses.field()

    @cached_property
    def Outputs(self):  # pragma: no cover
        return ProcessingOutput.make_many(self.boto3_raw_data["Outputs"])

    KmsKeyId = field("KmsKeyId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProcessingOutputConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProcessingOutputConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateTrainingJobRequest:
    boto3_raw_data: "type_defs.UpdateTrainingJobRequestTypeDef" = dataclasses.field()

    TrainingJobName = field("TrainingJobName")

    @cached_property
    def ProfilerConfig(self):  # pragma: no cover
        return ProfilerConfigForUpdate.make_one(self.boto3_raw_data["ProfilerConfig"])

    ProfilerRuleConfigurations = field("ProfilerRuleConfigurations")

    @cached_property
    def ResourceConfig(self):  # pragma: no cover
        return ResourceConfigForUpdate.make_one(self.boto3_raw_data["ResourceConfig"])

    @cached_property
    def RemoteDebugConfig(self):  # pragma: no cover
        return RemoteDebugConfigForUpdate.make_one(
            self.boto3_raw_data["RemoteDebugConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateTrainingJobRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateTrainingJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetSearchSuggestionsRequest:
    boto3_raw_data: "type_defs.GetSearchSuggestionsRequestTypeDef" = dataclasses.field()

    Resource = field("Resource")

    @cached_property
    def SuggestionQuery(self):  # pragma: no cover
        return SuggestionQuery.make_one(self.boto3_raw_data["SuggestionQuery"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetSearchSuggestionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetSearchSuggestionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HumanLoopConfigOutput:
    boto3_raw_data: "type_defs.HumanLoopConfigOutputTypeDef" = dataclasses.field()

    WorkteamArn = field("WorkteamArn")
    HumanTaskUiArn = field("HumanTaskUiArn")
    TaskTitle = field("TaskTitle")
    TaskDescription = field("TaskDescription")
    TaskCount = field("TaskCount")
    TaskAvailabilityLifetimeInSeconds = field("TaskAvailabilityLifetimeInSeconds")
    TaskTimeLimitInSeconds = field("TaskTimeLimitInSeconds")
    TaskKeywords = field("TaskKeywords")

    @cached_property
    def PublicWorkforceTaskPrice(self):  # pragma: no cover
        return PublicWorkforceTaskPrice.make_one(
            self.boto3_raw_data["PublicWorkforceTaskPrice"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HumanLoopConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HumanLoopConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HumanLoopConfig:
    boto3_raw_data: "type_defs.HumanLoopConfigTypeDef" = dataclasses.field()

    WorkteamArn = field("WorkteamArn")
    HumanTaskUiArn = field("HumanTaskUiArn")
    TaskTitle = field("TaskTitle")
    TaskDescription = field("TaskDescription")
    TaskCount = field("TaskCount")
    TaskAvailabilityLifetimeInSeconds = field("TaskAvailabilityLifetimeInSeconds")
    TaskTimeLimitInSeconds = field("TaskTimeLimitInSeconds")
    TaskKeywords = field("TaskKeywords")

    @cached_property
    def PublicWorkforceTaskPrice(self):  # pragma: no cover
        return PublicWorkforceTaskPrice.make_one(
            self.boto3_raw_data["PublicWorkforceTaskPrice"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.HumanLoopConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.HumanLoopConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HumanTaskConfigOutput:
    boto3_raw_data: "type_defs.HumanTaskConfigOutputTypeDef" = dataclasses.field()

    WorkteamArn = field("WorkteamArn")

    @cached_property
    def UiConfig(self):  # pragma: no cover
        return UiConfig.make_one(self.boto3_raw_data["UiConfig"])

    TaskTitle = field("TaskTitle")
    TaskDescription = field("TaskDescription")
    NumberOfHumanWorkersPerDataObject = field("NumberOfHumanWorkersPerDataObject")
    TaskTimeLimitInSeconds = field("TaskTimeLimitInSeconds")
    PreHumanTaskLambdaArn = field("PreHumanTaskLambdaArn")
    TaskKeywords = field("TaskKeywords")
    TaskAvailabilityLifetimeInSeconds = field("TaskAvailabilityLifetimeInSeconds")
    MaxConcurrentTaskCount = field("MaxConcurrentTaskCount")

    @cached_property
    def AnnotationConsolidationConfig(self):  # pragma: no cover
        return AnnotationConsolidationConfig.make_one(
            self.boto3_raw_data["AnnotationConsolidationConfig"]
        )

    @cached_property
    def PublicWorkforceTaskPrice(self):  # pragma: no cover
        return PublicWorkforceTaskPrice.make_one(
            self.boto3_raw_data["PublicWorkforceTaskPrice"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HumanTaskConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HumanTaskConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HumanTaskConfig:
    boto3_raw_data: "type_defs.HumanTaskConfigTypeDef" = dataclasses.field()

    WorkteamArn = field("WorkteamArn")

    @cached_property
    def UiConfig(self):  # pragma: no cover
        return UiConfig.make_one(self.boto3_raw_data["UiConfig"])

    TaskTitle = field("TaskTitle")
    TaskDescription = field("TaskDescription")
    NumberOfHumanWorkersPerDataObject = field("NumberOfHumanWorkersPerDataObject")
    TaskTimeLimitInSeconds = field("TaskTimeLimitInSeconds")
    PreHumanTaskLambdaArn = field("PreHumanTaskLambdaArn")
    TaskKeywords = field("TaskKeywords")
    TaskAvailabilityLifetimeInSeconds = field("TaskAvailabilityLifetimeInSeconds")
    MaxConcurrentTaskCount = field("MaxConcurrentTaskCount")

    @cached_property
    def AnnotationConsolidationConfig(self):  # pragma: no cover
        return AnnotationConsolidationConfig.make_one(
            self.boto3_raw_data["AnnotationConsolidationConfig"]
        )

    @cached_property
    def PublicWorkforceTaskPrice(self):  # pragma: no cover
        return PublicWorkforceTaskPrice.make_one(
            self.boto3_raw_data["PublicWorkforceTaskPrice"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.HumanTaskConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.HumanTaskConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchTrainingPlanOfferingsResponse:
    boto3_raw_data: "type_defs.SearchTrainingPlanOfferingsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TrainingPlanOfferings(self):  # pragma: no cover
        return TrainingPlanOffering.make_many(
            self.boto3_raw_data["TrainingPlanOfferings"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SearchTrainingPlanOfferingsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchTrainingPlanOfferingsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribePipelineExecutionResponse:
    boto3_raw_data: "type_defs.DescribePipelineExecutionResponseTypeDef" = (
        dataclasses.field()
    )

    PipelineArn = field("PipelineArn")
    PipelineExecutionArn = field("PipelineExecutionArn")
    PipelineExecutionDisplayName = field("PipelineExecutionDisplayName")
    PipelineExecutionStatus = field("PipelineExecutionStatus")
    PipelineExecutionDescription = field("PipelineExecutionDescription")

    @cached_property
    def PipelineExperimentConfig(self):  # pragma: no cover
        return PipelineExperimentConfig.make_one(
            self.boto3_raw_data["PipelineExperimentConfig"]
        )

    FailureReason = field("FailureReason")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    @cached_property
    def ParallelismConfiguration(self):  # pragma: no cover
        return ParallelismConfiguration.make_one(
            self.boto3_raw_data["ParallelismConfiguration"]
        )

    @cached_property
    def SelectiveExecutionConfig(self):  # pragma: no cover
        return SelectiveExecutionConfigOutput.make_one(
            self.boto3_raw_data["SelectiveExecutionConfig"]
        )

    PipelineVersionId = field("PipelineVersionId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribePipelineExecutionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribePipelineExecutionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PipelineExecution:
    boto3_raw_data: "type_defs.PipelineExecutionTypeDef" = dataclasses.field()

    PipelineArn = field("PipelineArn")
    PipelineExecutionArn = field("PipelineExecutionArn")
    PipelineExecutionDisplayName = field("PipelineExecutionDisplayName")
    PipelineExecutionStatus = field("PipelineExecutionStatus")
    PipelineExecutionDescription = field("PipelineExecutionDescription")

    @cached_property
    def PipelineExperimentConfig(self):  # pragma: no cover
        return PipelineExperimentConfig.make_one(
            self.boto3_raw_data["PipelineExperimentConfig"]
        )

    FailureReason = field("FailureReason")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    @cached_property
    def ParallelismConfiguration(self):  # pragma: no cover
        return ParallelismConfiguration.make_one(
            self.boto3_raw_data["ParallelismConfiguration"]
        )

    @cached_property
    def SelectiveExecutionConfig(self):  # pragma: no cover
        return SelectiveExecutionConfigOutput.make_one(
            self.boto3_raw_data["SelectiveExecutionConfig"]
        )

    @cached_property
    def PipelineParameters(self):  # pragma: no cover
        return Parameter.make_many(self.boto3_raw_data["PipelineParameters"])

    PipelineVersionId = field("PipelineVersionId")
    PipelineVersionDisplayName = field("PipelineVersionDisplayName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PipelineExecutionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PipelineExecutionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateWorkforceRequest:
    boto3_raw_data: "type_defs.CreateWorkforceRequestTypeDef" = dataclasses.field()

    WorkforceName = field("WorkforceName")

    @cached_property
    def CognitoConfig(self):  # pragma: no cover
        return CognitoConfig.make_one(self.boto3_raw_data["CognitoConfig"])

    @cached_property
    def OidcConfig(self):  # pragma: no cover
        return OidcConfig.make_one(self.boto3_raw_data["OidcConfig"])

    SourceIpConfig = field("SourceIpConfig")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def WorkforceVpcConfig(self):  # pragma: no cover
        return WorkforceVpcConfigRequest.make_one(
            self.boto3_raw_data["WorkforceVpcConfig"]
        )

    IpAddressType = field("IpAddressType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateWorkforceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateWorkforceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateWorkforceRequest:
    boto3_raw_data: "type_defs.UpdateWorkforceRequestTypeDef" = dataclasses.field()

    WorkforceName = field("WorkforceName")
    SourceIpConfig = field("SourceIpConfig")

    @cached_property
    def OidcConfig(self):  # pragma: no cover
        return OidcConfig.make_one(self.boto3_raw_data["OidcConfig"])

    @cached_property
    def WorkforceVpcConfig(self):  # pragma: no cover
        return WorkforceVpcConfigRequest.make_one(
            self.boto3_raw_data["WorkforceVpcConfig"]
        )

    IpAddressType = field("IpAddressType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateWorkforceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateWorkforceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpaceCodeEditorAppSettings:
    boto3_raw_data: "type_defs.SpaceCodeEditorAppSettingsTypeDef" = dataclasses.field()

    @cached_property
    def DefaultResourceSpec(self):  # pragma: no cover
        return ResourceSpec.make_one(self.boto3_raw_data["DefaultResourceSpec"])

    @cached_property
    def AppLifecycleManagement(self):  # pragma: no cover
        return SpaceAppLifecycleManagement.make_one(
            self.boto3_raw_data["AppLifecycleManagement"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SpaceCodeEditorAppSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpaceCodeEditorAppSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpaceJupyterLabAppSettingsOutput:
    boto3_raw_data: "type_defs.SpaceJupyterLabAppSettingsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DefaultResourceSpec(self):  # pragma: no cover
        return ResourceSpec.make_one(self.boto3_raw_data["DefaultResourceSpec"])

    @cached_property
    def CodeRepositories(self):  # pragma: no cover
        return CodeRepository.make_many(self.boto3_raw_data["CodeRepositories"])

    @cached_property
    def AppLifecycleManagement(self):  # pragma: no cover
        return SpaceAppLifecycleManagement.make_one(
            self.boto3_raw_data["AppLifecycleManagement"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SpaceJupyterLabAppSettingsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpaceJupyterLabAppSettingsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpaceJupyterLabAppSettings:
    boto3_raw_data: "type_defs.SpaceJupyterLabAppSettingsTypeDef" = dataclasses.field()

    @cached_property
    def DefaultResourceSpec(self):  # pragma: no cover
        return ResourceSpec.make_one(self.boto3_raw_data["DefaultResourceSpec"])

    @cached_property
    def CodeRepositories(self):  # pragma: no cover
        return CodeRepository.make_many(self.boto3_raw_data["CodeRepositories"])

    @cached_property
    def AppLifecycleManagement(self):  # pragma: no cover
        return SpaceAppLifecycleManagement.make_one(
            self.boto3_raw_data["AppLifecycleManagement"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SpaceJupyterLabAppSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpaceJupyterLabAppSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AlgorithmSpecificationOutput:
    boto3_raw_data: "type_defs.AlgorithmSpecificationOutputTypeDef" = (
        dataclasses.field()
    )

    TrainingInputMode = field("TrainingInputMode")
    TrainingImage = field("TrainingImage")
    AlgorithmName = field("AlgorithmName")

    @cached_property
    def MetricDefinitions(self):  # pragma: no cover
        return MetricDefinition.make_many(self.boto3_raw_data["MetricDefinitions"])

    EnableSageMakerMetricsTimeSeries = field("EnableSageMakerMetricsTimeSeries")
    ContainerEntrypoint = field("ContainerEntrypoint")
    ContainerArguments = field("ContainerArguments")

    @cached_property
    def TrainingImageConfig(self):  # pragma: no cover
        return TrainingImageConfig.make_one(self.boto3_raw_data["TrainingImageConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AlgorithmSpecificationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AlgorithmSpecificationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AlgorithmSpecification:
    boto3_raw_data: "type_defs.AlgorithmSpecificationTypeDef" = dataclasses.field()

    TrainingInputMode = field("TrainingInputMode")
    TrainingImage = field("TrainingImage")
    AlgorithmName = field("AlgorithmName")

    @cached_property
    def MetricDefinitions(self):  # pragma: no cover
        return MetricDefinition.make_many(self.boto3_raw_data["MetricDefinitions"])

    EnableSageMakerMetricsTimeSeries = field("EnableSageMakerMetricsTimeSeries")
    ContainerEntrypoint = field("ContainerEntrypoint")
    ContainerArguments = field("ContainerArguments")

    @cached_property
    def TrainingImageConfig(self):  # pragma: no cover
        return TrainingImageConfig.make_one(self.boto3_raw_data["TrainingImageConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AlgorithmSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AlgorithmSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransformInput:
    boto3_raw_data: "type_defs.TransformInputTypeDef" = dataclasses.field()

    @cached_property
    def DataSource(self):  # pragma: no cover
        return TransformDataSource.make_one(self.boto3_raw_data["DataSource"])

    ContentType = field("ContentType")
    CompressionType = field("CompressionType")
    SplitType = field("SplitType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TransformInputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TransformInputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeWorkforceResponse:
    boto3_raw_data: "type_defs.DescribeWorkforceResponseTypeDef" = dataclasses.field()

    @cached_property
    def Workforce(self):  # pragma: no cover
        return Workforce.make_one(self.boto3_raw_data["Workforce"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeWorkforceResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeWorkforceResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListWorkforcesResponse:
    boto3_raw_data: "type_defs.ListWorkforcesResponseTypeDef" = dataclasses.field()

    @cached_property
    def Workforces(self):  # pragma: no cover
        return Workforce.make_many(self.boto3_raw_data["Workforces"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListWorkforcesResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListWorkforcesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateWorkforceResponse:
    boto3_raw_data: "type_defs.UpdateWorkforceResponseTypeDef" = dataclasses.field()

    @cached_property
    def Workforce(self):  # pragma: no cover
        return Workforce.make_one(self.boto3_raw_data["Workforce"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateWorkforceResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateWorkforceResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DefaultSpaceSettingsOutput:
    boto3_raw_data: "type_defs.DefaultSpaceSettingsOutputTypeDef" = dataclasses.field()

    ExecutionRole = field("ExecutionRole")
    SecurityGroups = field("SecurityGroups")

    @cached_property
    def JupyterServerAppSettings(self):  # pragma: no cover
        return JupyterServerAppSettingsOutput.make_one(
            self.boto3_raw_data["JupyterServerAppSettings"]
        )

    @cached_property
    def KernelGatewayAppSettings(self):  # pragma: no cover
        return KernelGatewayAppSettingsOutput.make_one(
            self.boto3_raw_data["KernelGatewayAppSettings"]
        )

    @cached_property
    def JupyterLabAppSettings(self):  # pragma: no cover
        return JupyterLabAppSettingsOutput.make_one(
            self.boto3_raw_data["JupyterLabAppSettings"]
        )

    @cached_property
    def SpaceStorageSettings(self):  # pragma: no cover
        return DefaultSpaceStorageSettings.make_one(
            self.boto3_raw_data["SpaceStorageSettings"]
        )

    @cached_property
    def CustomPosixUserConfig(self):  # pragma: no cover
        return CustomPosixUserConfig.make_one(
            self.boto3_raw_data["CustomPosixUserConfig"]
        )

    @cached_property
    def CustomFileSystemConfigs(self):  # pragma: no cover
        return CustomFileSystemConfig.make_many(
            self.boto3_raw_data["CustomFileSystemConfigs"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DefaultSpaceSettingsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DefaultSpaceSettingsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UserSettingsOutput:
    boto3_raw_data: "type_defs.UserSettingsOutputTypeDef" = dataclasses.field()

    ExecutionRole = field("ExecutionRole")
    SecurityGroups = field("SecurityGroups")

    @cached_property
    def SharingSettings(self):  # pragma: no cover
        return SharingSettings.make_one(self.boto3_raw_data["SharingSettings"])

    @cached_property
    def JupyterServerAppSettings(self):  # pragma: no cover
        return JupyterServerAppSettingsOutput.make_one(
            self.boto3_raw_data["JupyterServerAppSettings"]
        )

    @cached_property
    def KernelGatewayAppSettings(self):  # pragma: no cover
        return KernelGatewayAppSettingsOutput.make_one(
            self.boto3_raw_data["KernelGatewayAppSettings"]
        )

    @cached_property
    def TensorBoardAppSettings(self):  # pragma: no cover
        return TensorBoardAppSettings.make_one(
            self.boto3_raw_data["TensorBoardAppSettings"]
        )

    @cached_property
    def RStudioServerProAppSettings(self):  # pragma: no cover
        return RStudioServerProAppSettings.make_one(
            self.boto3_raw_data["RStudioServerProAppSettings"]
        )

    @cached_property
    def RSessionAppSettings(self):  # pragma: no cover
        return RSessionAppSettingsOutput.make_one(
            self.boto3_raw_data["RSessionAppSettings"]
        )

    @cached_property
    def CanvasAppSettings(self):  # pragma: no cover
        return CanvasAppSettingsOutput.make_one(
            self.boto3_raw_data["CanvasAppSettings"]
        )

    @cached_property
    def CodeEditorAppSettings(self):  # pragma: no cover
        return CodeEditorAppSettingsOutput.make_one(
            self.boto3_raw_data["CodeEditorAppSettings"]
        )

    @cached_property
    def JupyterLabAppSettings(self):  # pragma: no cover
        return JupyterLabAppSettingsOutput.make_one(
            self.boto3_raw_data["JupyterLabAppSettings"]
        )

    @cached_property
    def SpaceStorageSettings(self):  # pragma: no cover
        return DefaultSpaceStorageSettings.make_one(
            self.boto3_raw_data["SpaceStorageSettings"]
        )

    DefaultLandingUri = field("DefaultLandingUri")
    StudioWebPortal = field("StudioWebPortal")

    @cached_property
    def CustomPosixUserConfig(self):  # pragma: no cover
        return CustomPosixUserConfig.make_one(
            self.boto3_raw_data["CustomPosixUserConfig"]
        )

    @cached_property
    def CustomFileSystemConfigs(self):  # pragma: no cover
        return CustomFileSystemConfig.make_many(
            self.boto3_raw_data["CustomFileSystemConfigs"]
        )

    @cached_property
    def StudioWebPortalSettings(self):  # pragma: no cover
        return StudioWebPortalSettingsOutput.make_one(
            self.boto3_raw_data["StudioWebPortalSettings"]
        )

    AutoMountHomeEFS = field("AutoMountHomeEFS")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UserSettingsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UserSettingsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DefaultSpaceSettings:
    boto3_raw_data: "type_defs.DefaultSpaceSettingsTypeDef" = dataclasses.field()

    ExecutionRole = field("ExecutionRole")
    SecurityGroups = field("SecurityGroups")

    @cached_property
    def JupyterServerAppSettings(self):  # pragma: no cover
        return JupyterServerAppSettings.make_one(
            self.boto3_raw_data["JupyterServerAppSettings"]
        )

    @cached_property
    def KernelGatewayAppSettings(self):  # pragma: no cover
        return KernelGatewayAppSettings.make_one(
            self.boto3_raw_data["KernelGatewayAppSettings"]
        )

    @cached_property
    def JupyterLabAppSettings(self):  # pragma: no cover
        return JupyterLabAppSettings.make_one(
            self.boto3_raw_data["JupyterLabAppSettings"]
        )

    @cached_property
    def SpaceStorageSettings(self):  # pragma: no cover
        return DefaultSpaceStorageSettings.make_one(
            self.boto3_raw_data["SpaceStorageSettings"]
        )

    @cached_property
    def CustomPosixUserConfig(self):  # pragma: no cover
        return CustomPosixUserConfig.make_one(
            self.boto3_raw_data["CustomPosixUserConfig"]
        )

    @cached_property
    def CustomFileSystemConfigs(self):  # pragma: no cover
        return CustomFileSystemConfig.make_many(
            self.boto3_raw_data["CustomFileSystemConfigs"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DefaultSpaceSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DefaultSpaceSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UserSettings:
    boto3_raw_data: "type_defs.UserSettingsTypeDef" = dataclasses.field()

    ExecutionRole = field("ExecutionRole")
    SecurityGroups = field("SecurityGroups")

    @cached_property
    def SharingSettings(self):  # pragma: no cover
        return SharingSettings.make_one(self.boto3_raw_data["SharingSettings"])

    @cached_property
    def JupyterServerAppSettings(self):  # pragma: no cover
        return JupyterServerAppSettings.make_one(
            self.boto3_raw_data["JupyterServerAppSettings"]
        )

    @cached_property
    def KernelGatewayAppSettings(self):  # pragma: no cover
        return KernelGatewayAppSettings.make_one(
            self.boto3_raw_data["KernelGatewayAppSettings"]
        )

    @cached_property
    def TensorBoardAppSettings(self):  # pragma: no cover
        return TensorBoardAppSettings.make_one(
            self.boto3_raw_data["TensorBoardAppSettings"]
        )

    @cached_property
    def RStudioServerProAppSettings(self):  # pragma: no cover
        return RStudioServerProAppSettings.make_one(
            self.boto3_raw_data["RStudioServerProAppSettings"]
        )

    @cached_property
    def RSessionAppSettings(self):  # pragma: no cover
        return RSessionAppSettings.make_one(self.boto3_raw_data["RSessionAppSettings"])

    @cached_property
    def CanvasAppSettings(self):  # pragma: no cover
        return CanvasAppSettings.make_one(self.boto3_raw_data["CanvasAppSettings"])

    @cached_property
    def CodeEditorAppSettings(self):  # pragma: no cover
        return CodeEditorAppSettings.make_one(
            self.boto3_raw_data["CodeEditorAppSettings"]
        )

    @cached_property
    def JupyterLabAppSettings(self):  # pragma: no cover
        return JupyterLabAppSettings.make_one(
            self.boto3_raw_data["JupyterLabAppSettings"]
        )

    @cached_property
    def SpaceStorageSettings(self):  # pragma: no cover
        return DefaultSpaceStorageSettings.make_one(
            self.boto3_raw_data["SpaceStorageSettings"]
        )

    DefaultLandingUri = field("DefaultLandingUri")
    StudioWebPortal = field("StudioWebPortal")

    @cached_property
    def CustomPosixUserConfig(self):  # pragma: no cover
        return CustomPosixUserConfig.make_one(
            self.boto3_raw_data["CustomPosixUserConfig"]
        )

    @cached_property
    def CustomFileSystemConfigs(self):  # pragma: no cover
        return CustomFileSystemConfig.make_many(
            self.boto3_raw_data["CustomFileSystemConfigs"]
        )

    @cached_property
    def StudioWebPortalSettings(self):  # pragma: no cover
        return StudioWebPortalSettings.make_one(
            self.boto3_raw_data["StudioWebPortalSettings"]
        )

    AutoMountHomeEFS = field("AutoMountHomeEFS")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.UserSettingsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.UserSettingsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListArtifactsResponse:
    boto3_raw_data: "type_defs.ListArtifactsResponseTypeDef" = dataclasses.field()

    @cached_property
    def ArtifactSummaries(self):  # pragma: no cover
        return ArtifactSummary.make_many(self.boto3_raw_data["ArtifactSummaries"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListArtifactsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListArtifactsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateArtifactRequest:
    boto3_raw_data: "type_defs.CreateArtifactRequestTypeDef" = dataclasses.field()

    Source = field("Source")
    ArtifactType = field("ArtifactType")
    ArtifactName = field("ArtifactName")
    Properties = field("Properties")

    @cached_property
    def MetadataProperties(self):  # pragma: no cover
        return MetadataProperties.make_one(self.boto3_raw_data["MetadataProperties"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateArtifactRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateArtifactRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteArtifactRequest:
    boto3_raw_data: "type_defs.DeleteArtifactRequestTypeDef" = dataclasses.field()

    ArtifactArn = field("ArtifactArn")
    Source = field("Source")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteArtifactRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteArtifactRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLProblemTypeConfigOutput:
    boto3_raw_data: "type_defs.AutoMLProblemTypeConfigOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ImageClassificationJobConfig(self):  # pragma: no cover
        return ImageClassificationJobConfig.make_one(
            self.boto3_raw_data["ImageClassificationJobConfig"]
        )

    @cached_property
    def TextClassificationJobConfig(self):  # pragma: no cover
        return TextClassificationJobConfig.make_one(
            self.boto3_raw_data["TextClassificationJobConfig"]
        )

    @cached_property
    def TimeSeriesForecastingJobConfig(self):  # pragma: no cover
        return TimeSeriesForecastingJobConfigOutput.make_one(
            self.boto3_raw_data["TimeSeriesForecastingJobConfig"]
        )

    @cached_property
    def TabularJobConfig(self):  # pragma: no cover
        return TabularJobConfigOutput.make_one(self.boto3_raw_data["TabularJobConfig"])

    @cached_property
    def TextGenerationJobConfig(self):  # pragma: no cover
        return TextGenerationJobConfigOutput.make_one(
            self.boto3_raw_data["TextGenerationJobConfig"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AutoMLProblemTypeConfigOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLProblemTypeConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutoMLProblemTypeConfig:
    boto3_raw_data: "type_defs.AutoMLProblemTypeConfigTypeDef" = dataclasses.field()

    @cached_property
    def ImageClassificationJobConfig(self):  # pragma: no cover
        return ImageClassificationJobConfig.make_one(
            self.boto3_raw_data["ImageClassificationJobConfig"]
        )

    @cached_property
    def TextClassificationJobConfig(self):  # pragma: no cover
        return TextClassificationJobConfig.make_one(
            self.boto3_raw_data["TextClassificationJobConfig"]
        )

    @cached_property
    def TimeSeriesForecastingJobConfig(self):  # pragma: no cover
        return TimeSeriesForecastingJobConfig.make_one(
            self.boto3_raw_data["TimeSeriesForecastingJobConfig"]
        )

    @cached_property
    def TabularJobConfig(self):  # pragma: no cover
        return TabularJobConfig.make_one(self.boto3_raw_data["TabularJobConfig"])

    @cached_property
    def TextGenerationJobConfig(self):  # pragma: no cover
        return TextGenerationJobConfig.make_one(
            self.boto3_raw_data["TextGenerationJobConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutoMLProblemTypeConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutoMLProblemTypeConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PipelineExecutionStep:
    boto3_raw_data: "type_defs.PipelineExecutionStepTypeDef" = dataclasses.field()

    StepName = field("StepName")
    StepDisplayName = field("StepDisplayName")
    StepDescription = field("StepDescription")
    StartTime = field("StartTime")
    EndTime = field("EndTime")
    StepStatus = field("StepStatus")

    @cached_property
    def CacheHitResult(self):  # pragma: no cover
        return CacheHitResult.make_one(self.boto3_raw_data["CacheHitResult"])

    FailureReason = field("FailureReason")

    @cached_property
    def Metadata(self):  # pragma: no cover
        return PipelineExecutionStepMetadata.make_one(self.boto3_raw_data["Metadata"])

    AttemptCount = field("AttemptCount")

    @cached_property
    def SelectiveExecutionResult(self):  # pragma: no cover
        return SelectiveExecutionResult.make_one(
            self.boto3_raw_data["SelectiveExecutionResult"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PipelineExecutionStepTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PipelineExecutionStepTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAutoMLJobResponse:
    boto3_raw_data: "type_defs.DescribeAutoMLJobResponseTypeDef" = dataclasses.field()

    AutoMLJobName = field("AutoMLJobName")
    AutoMLJobArn = field("AutoMLJobArn")

    @cached_property
    def InputDataConfig(self):  # pragma: no cover
        return AutoMLChannel.make_many(self.boto3_raw_data["InputDataConfig"])

    @cached_property
    def OutputDataConfig(self):  # pragma: no cover
        return AutoMLOutputDataConfig.make_one(self.boto3_raw_data["OutputDataConfig"])

    RoleArn = field("RoleArn")

    @cached_property
    def AutoMLJobObjective(self):  # pragma: no cover
        return AutoMLJobObjective.make_one(self.boto3_raw_data["AutoMLJobObjective"])

    ProblemType = field("ProblemType")

    @cached_property
    def AutoMLJobConfig(self):  # pragma: no cover
        return AutoMLJobConfigOutput.make_one(self.boto3_raw_data["AutoMLJobConfig"])

    CreationTime = field("CreationTime")
    EndTime = field("EndTime")
    LastModifiedTime = field("LastModifiedTime")
    FailureReason = field("FailureReason")

    @cached_property
    def PartialFailureReasons(self):  # pragma: no cover
        return AutoMLPartialFailureReason.make_many(
            self.boto3_raw_data["PartialFailureReasons"]
        )

    @cached_property
    def BestCandidate(self):  # pragma: no cover
        return AutoMLCandidate.make_one(self.boto3_raw_data["BestCandidate"])

    AutoMLJobStatus = field("AutoMLJobStatus")
    AutoMLJobSecondaryStatus = field("AutoMLJobSecondaryStatus")
    GenerateCandidateDefinitionsOnly = field("GenerateCandidateDefinitionsOnly")

    @cached_property
    def AutoMLJobArtifacts(self):  # pragma: no cover
        return AutoMLJobArtifacts.make_one(self.boto3_raw_data["AutoMLJobArtifacts"])

    @cached_property
    def ResolvedAttributes(self):  # pragma: no cover
        return ResolvedAttributes.make_one(self.boto3_raw_data["ResolvedAttributes"])

    @cached_property
    def ModelDeployConfig(self):  # pragma: no cover
        return ModelDeployConfig.make_one(self.boto3_raw_data["ModelDeployConfig"])

    @cached_property
    def ModelDeployResult(self):  # pragma: no cover
        return ModelDeployResult.make_one(self.boto3_raw_data["ModelDeployResult"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeAutoMLJobResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAutoMLJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListCandidatesForAutoMLJobResponse:
    boto3_raw_data: "type_defs.ListCandidatesForAutoMLJobResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Candidates(self):  # pragma: no cover
        return AutoMLCandidate.make_many(self.boto3_raw_data["Candidates"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListCandidatesForAutoMLJobResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListCandidatesForAutoMLJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EventDetails:
    boto3_raw_data: "type_defs.EventDetailsTypeDef" = dataclasses.field()

    @cached_property
    def EventMetadata(self):  # pragma: no cover
        return EventMetadata.make_one(self.boto3_raw_data["EventMetadata"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EventDetailsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.EventDetailsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScheduledUpdateConfigOutput:
    boto3_raw_data: "type_defs.ScheduledUpdateConfigOutputTypeDef" = dataclasses.field()

    ScheduleExpression = field("ScheduleExpression")

    @cached_property
    def DeploymentConfig(self):  # pragma: no cover
        return DeploymentConfigurationOutput.make_one(
            self.boto3_raw_data["DeploymentConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ScheduledUpdateConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScheduledUpdateConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeploymentConfigOutput:
    boto3_raw_data: "type_defs.DeploymentConfigOutputTypeDef" = dataclasses.field()

    @cached_property
    def BlueGreenUpdatePolicy(self):  # pragma: no cover
        return BlueGreenUpdatePolicy.make_one(
            self.boto3_raw_data["BlueGreenUpdatePolicy"]
        )

    @cached_property
    def RollingUpdatePolicy(self):  # pragma: no cover
        return RollingUpdatePolicy.make_one(self.boto3_raw_data["RollingUpdatePolicy"])

    @cached_property
    def AutoRollbackConfiguration(self):  # pragma: no cover
        return AutoRollbackConfigOutput.make_one(
            self.boto3_raw_data["AutoRollbackConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeploymentConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeploymentConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeploymentConfig:
    boto3_raw_data: "type_defs.DeploymentConfigTypeDef" = dataclasses.field()

    @cached_property
    def BlueGreenUpdatePolicy(self):  # pragma: no cover
        return BlueGreenUpdatePolicy.make_one(
            self.boto3_raw_data["BlueGreenUpdatePolicy"]
        )

    @cached_property
    def RollingUpdatePolicy(self):  # pragma: no cover
        return RollingUpdatePolicy.make_one(self.boto3_raw_data["RollingUpdatePolicy"])

    @cached_property
    def AutoRollbackConfiguration(self):  # pragma: no cover
        return AutoRollbackConfig.make_one(
            self.boto3_raw_data["AutoRollbackConfiguration"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DeploymentConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeploymentConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RecommendationJobInputConfigOutput:
    boto3_raw_data: "type_defs.RecommendationJobInputConfigOutputTypeDef" = (
        dataclasses.field()
    )

    ModelPackageVersionArn = field("ModelPackageVersionArn")
    ModelName = field("ModelName")
    JobDurationInSeconds = field("JobDurationInSeconds")

    @cached_property
    def TrafficPattern(self):  # pragma: no cover
        return TrafficPatternOutput.make_one(self.boto3_raw_data["TrafficPattern"])

    @cached_property
    def ResourceLimit(self):  # pragma: no cover
        return RecommendationJobResourceLimit.make_one(
            self.boto3_raw_data["ResourceLimit"]
        )

    @cached_property
    def EndpointConfigurations(self):  # pragma: no cover
        return EndpointInputConfigurationOutput.make_many(
            self.boto3_raw_data["EndpointConfigurations"]
        )

    VolumeKmsKeyId = field("VolumeKmsKeyId")

    @cached_property
    def ContainerConfig(self):  # pragma: no cover
        return RecommendationJobContainerConfigOutput.make_one(
            self.boto3_raw_data["ContainerConfig"]
        )

    @cached_property
    def Endpoints(self):  # pragma: no cover
        return EndpointInfo.make_many(self.boto3_raw_data["Endpoints"])

    @cached_property
    def VpcConfig(self):  # pragma: no cover
        return RecommendationJobVpcConfigOutput.make_one(
            self.boto3_raw_data["VpcConfig"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RecommendationJobInputConfigOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RecommendationJobInputConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HyperParameterTuningJobConfig:
    boto3_raw_data: "type_defs.HyperParameterTuningJobConfigTypeDef" = (
        dataclasses.field()
    )

    Strategy = field("Strategy")

    @cached_property
    def ResourceLimits(self):  # pragma: no cover
        return ResourceLimits.make_one(self.boto3_raw_data["ResourceLimits"])

    @cached_property
    def StrategyConfig(self):  # pragma: no cover
        return HyperParameterTuningJobStrategyConfig.make_one(
            self.boto3_raw_data["StrategyConfig"]
        )

    @cached_property
    def HyperParameterTuningJobObjective(self):  # pragma: no cover
        return HyperParameterTuningJobObjective.make_one(
            self.boto3_raw_data["HyperParameterTuningJobObjective"]
        )

    @cached_property
    def ParameterRanges(self):  # pragma: no cover
        return ParameterRanges.make_one(self.boto3_raw_data["ParameterRanges"])

    TrainingJobEarlyStoppingType = field("TrainingJobEarlyStoppingType")

    @cached_property
    def TuningJobCompletionCriteria(self):  # pragma: no cover
        return TuningJobCompletionCriteria.make_one(
            self.boto3_raw_data["TuningJobCompletionCriteria"]
        )

    RandomSeed = field("RandomSeed")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.HyperParameterTuningJobConfigTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HyperParameterTuningJobConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RecommendationJobInputConfig:
    boto3_raw_data: "type_defs.RecommendationJobInputConfigTypeDef" = (
        dataclasses.field()
    )

    ModelPackageVersionArn = field("ModelPackageVersionArn")
    ModelName = field("ModelName")
    JobDurationInSeconds = field("JobDurationInSeconds")

    @cached_property
    def TrafficPattern(self):  # pragma: no cover
        return TrafficPattern.make_one(self.boto3_raw_data["TrafficPattern"])

    @cached_property
    def ResourceLimit(self):  # pragma: no cover
        return RecommendationJobResourceLimit.make_one(
            self.boto3_raw_data["ResourceLimit"]
        )

    @cached_property
    def EndpointConfigurations(self):  # pragma: no cover
        return EndpointInputConfiguration.make_many(
            self.boto3_raw_data["EndpointConfigurations"]
        )

    VolumeKmsKeyId = field("VolumeKmsKeyId")

    @cached_property
    def ContainerConfig(self):  # pragma: no cover
        return RecommendationJobContainerConfig.make_one(
            self.boto3_raw_data["ContainerConfig"]
        )

    @cached_property
    def Endpoints(self):  # pragma: no cover
        return EndpointInfo.make_many(self.boto3_raw_data["Endpoints"])

    @cached_property
    def VpcConfig(self):  # pragma: no cover
        return RecommendationJobVpcConfig.make_one(self.boto3_raw_data["VpcConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RecommendationJobInputConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RecommendationJobInputConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeProjectOutput:
    boto3_raw_data: "type_defs.DescribeProjectOutputTypeDef" = dataclasses.field()

    ProjectArn = field("ProjectArn")
    ProjectName = field("ProjectName")
    ProjectId = field("ProjectId")
    ProjectDescription = field("ProjectDescription")

    @cached_property
    def ServiceCatalogProvisioningDetails(self):  # pragma: no cover
        return ServiceCatalogProvisioningDetailsOutput.make_one(
            self.boto3_raw_data["ServiceCatalogProvisioningDetails"]
        )

    @cached_property
    def ServiceCatalogProvisionedProductDetails(self):  # pragma: no cover
        return ServiceCatalogProvisionedProductDetails.make_one(
            self.boto3_raw_data["ServiceCatalogProvisionedProductDetails"]
        )

    ProjectStatus = field("ProjectStatus")

    @cached_property
    def TemplateProviderDetails(self):  # pragma: no cover
        return TemplateProviderDetail.make_many(
            self.boto3_raw_data["TemplateProviderDetails"]
        )

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeProjectOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeProjectOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Project:
    boto3_raw_data: "type_defs.ProjectTypeDef" = dataclasses.field()

    ProjectArn = field("ProjectArn")
    ProjectName = field("ProjectName")
    ProjectId = field("ProjectId")
    ProjectDescription = field("ProjectDescription")

    @cached_property
    def ServiceCatalogProvisioningDetails(self):  # pragma: no cover
        return ServiceCatalogProvisioningDetailsOutput.make_one(
            self.boto3_raw_data["ServiceCatalogProvisioningDetails"]
        )

    @cached_property
    def ServiceCatalogProvisionedProductDetails(self):  # pragma: no cover
        return ServiceCatalogProvisionedProductDetails.make_one(
            self.boto3_raw_data["ServiceCatalogProvisionedProductDetails"]
        )

    ProjectStatus = field("ProjectStatus")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    CreationTime = field("CreationTime")

    @cached_property
    def TemplateProviderDetails(self):  # pragma: no cover
        return TemplateProviderDetail.make_many(
            self.boto3_raw_data["TemplateProviderDetails"]
        )

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ProjectTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ProjectTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateProjectInput:
    boto3_raw_data: "type_defs.UpdateProjectInputTypeDef" = dataclasses.field()

    ProjectName = field("ProjectName")
    ProjectDescription = field("ProjectDescription")

    @cached_property
    def ServiceCatalogProvisioningUpdateDetails(self):  # pragma: no cover
        return ServiceCatalogProvisioningUpdateDetails.make_one(
            self.boto3_raw_data["ServiceCatalogProvisioningUpdateDetails"]
        )

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def TemplateProvidersToUpdate(self):  # pragma: no cover
        return UpdateTemplateProvider.make_many(
            self.boto3_raw_data["TemplateProvidersToUpdate"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateProjectInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateProjectInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExplainerConfigOutput:
    boto3_raw_data: "type_defs.ExplainerConfigOutputTypeDef" = dataclasses.field()

    @cached_property
    def ClarifyExplainerConfig(self):  # pragma: no cover
        return ClarifyExplainerConfigOutput.make_one(
            self.boto3_raw_data["ClarifyExplainerConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ExplainerConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ExplainerConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExplainerConfig:
    boto3_raw_data: "type_defs.ExplainerConfigTypeDef" = dataclasses.field()

    @cached_property
    def ClarifyExplainerConfig(self):  # pragma: no cover
        return ClarifyExplainerConfig.make_one(
            self.boto3_raw_data["ClarifyExplainerConfig"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ExplainerConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ExplainerConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClusterNodeResponse:
    boto3_raw_data: "type_defs.DescribeClusterNodeResponseTypeDef" = dataclasses.field()

    @cached_property
    def NodeDetails(self):  # pragma: no cover
        return ClusterNodeDetails.make_one(self.boto3_raw_data["NodeDetails"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeClusterNodeResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeClusterNodeResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateFeatureGroupRequest:
    boto3_raw_data: "type_defs.CreateFeatureGroupRequestTypeDef" = dataclasses.field()

    FeatureGroupName = field("FeatureGroupName")
    RecordIdentifierFeatureName = field("RecordIdentifierFeatureName")
    EventTimeFeatureName = field("EventTimeFeatureName")

    @cached_property
    def FeatureDefinitions(self):  # pragma: no cover
        return FeatureDefinition.make_many(self.boto3_raw_data["FeatureDefinitions"])

    @cached_property
    def OnlineStoreConfig(self):  # pragma: no cover
        return OnlineStoreConfig.make_one(self.boto3_raw_data["OnlineStoreConfig"])

    @cached_property
    def OfflineStoreConfig(self):  # pragma: no cover
        return OfflineStoreConfig.make_one(self.boto3_raw_data["OfflineStoreConfig"])

    @cached_property
    def ThroughputConfig(self):  # pragma: no cover
        return ThroughputConfig.make_one(self.boto3_raw_data["ThroughputConfig"])

    RoleArn = field("RoleArn")
    Description = field("Description")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateFeatureGroupRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateFeatureGroupRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFeatureGroupResponse:
    boto3_raw_data: "type_defs.DescribeFeatureGroupResponseTypeDef" = (
        dataclasses.field()
    )

    FeatureGroupArn = field("FeatureGroupArn")
    FeatureGroupName = field("FeatureGroupName")
    RecordIdentifierFeatureName = field("RecordIdentifierFeatureName")
    EventTimeFeatureName = field("EventTimeFeatureName")

    @cached_property
    def FeatureDefinitions(self):  # pragma: no cover
        return FeatureDefinition.make_many(self.boto3_raw_data["FeatureDefinitions"])

    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def OnlineStoreConfig(self):  # pragma: no cover
        return OnlineStoreConfig.make_one(self.boto3_raw_data["OnlineStoreConfig"])

    @cached_property
    def OfflineStoreConfig(self):  # pragma: no cover
        return OfflineStoreConfig.make_one(self.boto3_raw_data["OfflineStoreConfig"])

    @cached_property
    def ThroughputConfig(self):  # pragma: no cover
        return ThroughputConfigDescription.make_one(
            self.boto3_raw_data["ThroughputConfig"]
        )

    RoleArn = field("RoleArn")
    FeatureGroupStatus = field("FeatureGroupStatus")

    @cached_property
    def OfflineStoreStatus(self):  # pragma: no cover
        return OfflineStoreStatus.make_one(self.boto3_raw_data["OfflineStoreStatus"])

    @cached_property
    def LastUpdateStatus(self):  # pragma: no cover
        return LastUpdateStatus.make_one(self.boto3_raw_data["LastUpdateStatus"])

    FailureReason = field("FailureReason")
    Description = field("Description")
    NextToken = field("NextToken")
    OnlineStoreTotalSizeBytes = field("OnlineStoreTotalSizeBytes")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeFeatureGroupResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFeatureGroupResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FeatureGroup:
    boto3_raw_data: "type_defs.FeatureGroupTypeDef" = dataclasses.field()

    FeatureGroupArn = field("FeatureGroupArn")
    FeatureGroupName = field("FeatureGroupName")
    RecordIdentifierFeatureName = field("RecordIdentifierFeatureName")
    EventTimeFeatureName = field("EventTimeFeatureName")

    @cached_property
    def FeatureDefinitions(self):  # pragma: no cover
        return FeatureDefinition.make_many(self.boto3_raw_data["FeatureDefinitions"])

    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def OnlineStoreConfig(self):  # pragma: no cover
        return OnlineStoreConfig.make_one(self.boto3_raw_data["OnlineStoreConfig"])

    @cached_property
    def OfflineStoreConfig(self):  # pragma: no cover
        return OfflineStoreConfig.make_one(self.boto3_raw_data["OfflineStoreConfig"])

    RoleArn = field("RoleArn")
    FeatureGroupStatus = field("FeatureGroupStatus")

    @cached_property
    def OfflineStoreStatus(self):  # pragma: no cover
        return OfflineStoreStatus.make_one(self.boto3_raw_data["OfflineStoreStatus"])

    @cached_property
    def LastUpdateStatus(self):  # pragma: no cover
        return LastUpdateStatus.make_one(self.boto3_raw_data["LastUpdateStatus"])

    FailureReason = field("FailureReason")
    Description = field("Description")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FeatureGroupTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FeatureGroupTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateFeatureGroupRequest:
    boto3_raw_data: "type_defs.UpdateFeatureGroupRequestTypeDef" = dataclasses.field()

    FeatureGroupName = field("FeatureGroupName")

    @cached_property
    def FeatureAdditions(self):  # pragma: no cover
        return FeatureDefinition.make_many(self.boto3_raw_data["FeatureAdditions"])

    @cached_property
    def OnlineStoreConfig(self):  # pragma: no cover
        return OnlineStoreConfigUpdate.make_one(
            self.boto3_raw_data["OnlineStoreConfig"]
        )

    @cached_property
    def ThroughputConfig(self):  # pragma: no cover
        return ThroughputConfigUpdate.make_one(self.boto3_raw_data["ThroughputConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateFeatureGroupRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateFeatureGroupRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListComputeQuotasResponse:
    boto3_raw_data: "type_defs.ListComputeQuotasResponseTypeDef" = dataclasses.field()

    @cached_property
    def ComputeQuotaSummaries(self):  # pragma: no cover
        return ComputeQuotaSummary.make_many(
            self.boto3_raw_data["ComputeQuotaSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListComputeQuotasResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListComputeQuotasResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateComputeQuotaRequest:
    boto3_raw_data: "type_defs.CreateComputeQuotaRequestTypeDef" = dataclasses.field()

    Name = field("Name")
    ClusterArn = field("ClusterArn")
    ComputeQuotaConfig = field("ComputeQuotaConfig")

    @cached_property
    def ComputeQuotaTarget(self):  # pragma: no cover
        return ComputeQuotaTarget.make_one(self.boto3_raw_data["ComputeQuotaTarget"])

    Description = field("Description")
    ActivationState = field("ActivationState")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateComputeQuotaRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateComputeQuotaRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateComputeQuotaRequest:
    boto3_raw_data: "type_defs.UpdateComputeQuotaRequestTypeDef" = dataclasses.field()

    ComputeQuotaId = field("ComputeQuotaId")
    TargetVersion = field("TargetVersion")
    ComputeQuotaConfig = field("ComputeQuotaConfig")

    @cached_property
    def ComputeQuotaTarget(self):  # pragma: no cover
        return ComputeQuotaTarget.make_one(self.boto3_raw_data["ComputeQuotaTarget"])

    ActivationState = field("ActivationState")
    Description = field("Description")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateComputeQuotaRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateComputeQuotaRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateEdgeDeploymentPlanRequest:
    boto3_raw_data: "type_defs.CreateEdgeDeploymentPlanRequestTypeDef" = (
        dataclasses.field()
    )

    EdgeDeploymentPlanName = field("EdgeDeploymentPlanName")

    @cached_property
    def ModelConfigs(self):  # pragma: no cover
        return EdgeDeploymentModelConfig.make_many(self.boto3_raw_data["ModelConfigs"])

    DeviceFleetName = field("DeviceFleetName")

    @cached_property
    def Stages(self):  # pragma: no cover
        return DeploymentStage.make_many(self.boto3_raw_data["Stages"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateEdgeDeploymentPlanRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateEdgeDeploymentPlanRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateEdgeDeploymentStageRequest:
    boto3_raw_data: "type_defs.CreateEdgeDeploymentStageRequestTypeDef" = (
        dataclasses.field()
    )

    EdgeDeploymentPlanName = field("EdgeDeploymentPlanName")

    @cached_property
    def Stages(self):  # pragma: no cover
        return DeploymentStage.make_many(self.boto3_raw_data["Stages"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateEdgeDeploymentStageRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateEdgeDeploymentStageRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpaceDetails:
    boto3_raw_data: "type_defs.SpaceDetailsTypeDef" = dataclasses.field()

    DomainId = field("DomainId")
    SpaceName = field("SpaceName")
    Status = field("Status")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def SpaceSettingsSummary(self):  # pragma: no cover
        return SpaceSettingsSummary.make_one(
            self.boto3_raw_data["SpaceSettingsSummary"]
        )

    @cached_property
    def SpaceSharingSettingsSummary(self):  # pragma: no cover
        return SpaceSharingSettingsSummary.make_one(
            self.boto3_raw_data["SpaceSharingSettingsSummary"]
        )

    @cached_property
    def OwnershipSettingsSummary(self):  # pragma: no cover
        return OwnershipSettingsSummary.make_one(
            self.boto3_raw_data["OwnershipSettingsSummary"]
        )

    SpaceDisplayName = field("SpaceDisplayName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SpaceDetailsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SpaceDetailsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceRecommendationsJobStep:
    boto3_raw_data: "type_defs.InferenceRecommendationsJobStepTypeDef" = (
        dataclasses.field()
    )

    StepType = field("StepType")
    JobName = field("JobName")
    Status = field("Status")

    @cached_property
    def InferenceBenchmark(self):  # pragma: no cover
        return RecommendationJobInferenceBenchmark.make_one(
            self.boto3_raw_data["InferenceBenchmark"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.InferenceRecommendationsJobStepTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceRecommendationsJobStepTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchRequestPaginate:
    boto3_raw_data: "type_defs.SearchRequestPaginateTypeDef" = dataclasses.field()

    Resource = field("Resource")

    @cached_property
    def SearchExpression(self):  # pragma: no cover
        return SearchExpressionPaginator.make_one(
            self.boto3_raw_data["SearchExpression"]
        )

    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    CrossAccountFilterOption = field("CrossAccountFilterOption")

    @cached_property
    def VisibilityConditions(self):  # pragma: no cover
        return VisibilityConditions.make_many(
            self.boto3_raw_data["VisibilityConditions"]
        )

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SearchRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchRequest:
    boto3_raw_data: "type_defs.SearchRequestTypeDef" = dataclasses.field()

    Resource = field("Resource")

    @cached_property
    def SearchExpression(self):  # pragma: no cover
        return SearchExpression.make_one(self.boto3_raw_data["SearchExpression"])

    SortBy = field("SortBy")
    SortOrder = field("SortOrder")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    CrossAccountFilterOption = field("CrossAccountFilterOption")

    @cached_property
    def VisibilityConditions(self):  # pragma: no cover
        return VisibilityConditions.make_many(
            self.boto3_raw_data["VisibilityConditions"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SearchRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SearchRequestTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAssociationsResponse:
    boto3_raw_data: "type_defs.ListAssociationsResponseTypeDef" = dataclasses.field()

    @cached_property
    def AssociationSummaries(self):  # pragma: no cover
        return AssociationSummary.make_many(self.boto3_raw_data["AssociationSummaries"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListAssociationsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAssociationsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Trial:
    boto3_raw_data: "type_defs.TrialTypeDef" = dataclasses.field()

    TrialName = field("TrialName")
    TrialArn = field("TrialArn")
    DisplayName = field("DisplayName")
    ExperimentName = field("ExperimentName")

    @cached_property
    def Source(self):  # pragma: no cover
        return TrialSource.make_one(self.boto3_raw_data["Source"])

    CreationTime = field("CreationTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    @cached_property
    def MetadataProperties(self):  # pragma: no cover
        return MetadataProperties.make_one(self.boto3_raw_data["MetadataProperties"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def TrialComponentSummaries(self):  # pragma: no cover
        return TrialComponentSimpleSummary.make_many(
            self.boto3_raw_data["TrialComponentSummaries"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TrialTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TrialTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTrialComponentsResponse:
    boto3_raw_data: "type_defs.ListTrialComponentsResponseTypeDef" = dataclasses.field()

    @cached_property
    def TrialComponentSummaries(self):  # pragma: no cover
        return TrialComponentSummary.make_many(
            self.boto3_raw_data["TrialComponentSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListTrialComponentsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTrialComponentsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Workteam:
    boto3_raw_data: "type_defs.WorkteamTypeDef" = dataclasses.field()

    WorkteamName = field("WorkteamName")

    @cached_property
    def MemberDefinitions(self):  # pragma: no cover
        return MemberDefinitionOutput.make_many(
            self.boto3_raw_data["MemberDefinitions"]
        )

    WorkteamArn = field("WorkteamArn")
    Description = field("Description")
    WorkforceArn = field("WorkforceArn")
    ProductListingIds = field("ProductListingIds")
    SubDomain = field("SubDomain")
    CreateDate = field("CreateDate")
    LastUpdatedDate = field("LastUpdatedDate")

    @cached_property
    def NotificationConfiguration(self):  # pragma: no cover
        return NotificationConfiguration.make_one(
            self.boto3_raw_data["NotificationConfiguration"]
        )

    @cached_property
    def WorkerAccessConfiguration(self):  # pragma: no cover
        return WorkerAccessConfiguration.make_one(
            self.boto3_raw_data["WorkerAccessConfiguration"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.WorkteamTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.WorkteamTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInferenceComponentOutput:
    boto3_raw_data: "type_defs.DescribeInferenceComponentOutputTypeDef" = (
        dataclasses.field()
    )

    InferenceComponentName = field("InferenceComponentName")
    InferenceComponentArn = field("InferenceComponentArn")
    EndpointName = field("EndpointName")
    EndpointArn = field("EndpointArn")
    VariantName = field("VariantName")
    FailureReason = field("FailureReason")

    @cached_property
    def Specification(self):  # pragma: no cover
        return InferenceComponentSpecificationSummary.make_one(
            self.boto3_raw_data["Specification"]
        )

    @cached_property
    def RuntimeConfig(self):  # pragma: no cover
        return InferenceComponentRuntimeConfigSummary.make_one(
            self.boto3_raw_data["RuntimeConfig"]
        )

    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    InferenceComponentStatus = field("InferenceComponentStatus")

    @cached_property
    def LastDeploymentConfig(self):  # pragma: no cover
        return InferenceComponentDeploymentConfigOutput.make_one(
            self.boto3_raw_data["LastDeploymentConfig"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeInferenceComponentOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInferenceComponentOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourceConfig:
    boto3_raw_data: "type_defs.ResourceConfigTypeDef" = dataclasses.field()

    VolumeSizeInGB = field("VolumeSizeInGB")
    InstanceType = field("InstanceType")
    InstanceCount = field("InstanceCount")
    VolumeKmsKeyId = field("VolumeKmsKeyId")
    KeepAlivePeriodInSeconds = field("KeepAlivePeriodInSeconds")

    @cached_property
    def InstanceGroups(self):  # pragma: no cover
        return InstanceGroup.make_many(self.boto3_raw_data["InstanceGroups"])

    TrainingPlanArn = field("TrainingPlanArn")
    InstancePlacementConfig = field("InstancePlacementConfig")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ResourceConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ResourceConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrainingSpecificationOutput:
    boto3_raw_data: "type_defs.TrainingSpecificationOutputTypeDef" = dataclasses.field()

    TrainingImage = field("TrainingImage")
    SupportedTrainingInstanceTypes = field("SupportedTrainingInstanceTypes")

    @cached_property
    def TrainingChannels(self):  # pragma: no cover
        return ChannelSpecificationOutput.make_many(
            self.boto3_raw_data["TrainingChannels"]
        )

    TrainingImageDigest = field("TrainingImageDigest")

    @cached_property
    def SupportedHyperParameters(self):  # pragma: no cover
        return HyperParameterSpecificationOutput.make_many(
            self.boto3_raw_data["SupportedHyperParameters"]
        )

    SupportsDistributedTraining = field("SupportsDistributedTraining")

    @cached_property
    def MetricDefinitions(self):  # pragma: no cover
        return MetricDefinition.make_many(self.boto3_raw_data["MetricDefinitions"])

    @cached_property
    def SupportedTuningJobObjectiveMetrics(self):  # pragma: no cover
        return HyperParameterTuningJobObjective.make_many(
            self.boto3_raw_data["SupportedTuningJobObjectiveMetrics"]
        )

    @cached_property
    def AdditionalS3DataSource(self):  # pragma: no cover
        return AdditionalS3DataSource.make_one(
            self.boto3_raw_data["AdditionalS3DataSource"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrainingSpecificationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrainingSpecificationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrainingSpecification:
    boto3_raw_data: "type_defs.TrainingSpecificationTypeDef" = dataclasses.field()

    TrainingImage = field("TrainingImage")
    SupportedTrainingInstanceTypes = field("SupportedTrainingInstanceTypes")

    @cached_property
    def TrainingChannels(self):  # pragma: no cover
        return ChannelSpecification.make_many(self.boto3_raw_data["TrainingChannels"])

    TrainingImageDigest = field("TrainingImageDigest")

    @cached_property
    def SupportedHyperParameters(self):  # pragma: no cover
        return HyperParameterSpecification.make_many(
            self.boto3_raw_data["SupportedHyperParameters"]
        )

    SupportsDistributedTraining = field("SupportsDistributedTraining")

    @cached_property
    def MetricDefinitions(self):  # pragma: no cover
        return MetricDefinition.make_many(self.boto3_raw_data["MetricDefinitions"])

    @cached_property
    def SupportedTuningJobObjectiveMetrics(self):  # pragma: no cover
        return HyperParameterTuningJobObjective.make_many(
            self.boto3_raw_data["SupportedTuningJobObjectiveMetrics"]
        )

    @cached_property
    def AdditionalS3DataSource(self):  # pragma: no cover
        return AdditionalS3DataSource.make_one(
            self.boto3_raw_data["AdditionalS3DataSource"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrainingSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrainingSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAppImageConfigsResponse:
    boto3_raw_data: "type_defs.ListAppImageConfigsResponseTypeDef" = dataclasses.field()

    @cached_property
    def AppImageConfigs(self):  # pragma: no cover
        return AppImageConfigDetails.make_many(self.boto3_raw_data["AppImageConfigs"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListAppImageConfigsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAppImageConfigsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateAppImageConfigRequest:
    boto3_raw_data: "type_defs.CreateAppImageConfigRequestTypeDef" = dataclasses.field()

    AppImageConfigName = field("AppImageConfigName")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    KernelGatewayImageConfig = field("KernelGatewayImageConfig")
    JupyterLabAppImageConfig = field("JupyterLabAppImageConfig")
    CodeEditorAppImageConfig = field("CodeEditorAppImageConfig")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateAppImageConfigRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateAppImageConfigRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateAppImageConfigRequest:
    boto3_raw_data: "type_defs.UpdateAppImageConfigRequestTypeDef" = dataclasses.field()

    AppImageConfigName = field("AppImageConfigName")
    KernelGatewayImageConfig = field("KernelGatewayImageConfig")
    JupyterLabAppImageConfig = field("JupyterLabAppImageConfig")
    CodeEditorAppImageConfig = field("CodeEditorAppImageConfig")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateAppImageConfigRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateAppImageConfigRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LabelingJobSummary:
    boto3_raw_data: "type_defs.LabelingJobSummaryTypeDef" = dataclasses.field()

    LabelingJobName = field("LabelingJobName")
    LabelingJobArn = field("LabelingJobArn")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    LabelingJobStatus = field("LabelingJobStatus")

    @cached_property
    def LabelCounters(self):  # pragma: no cover
        return LabelCounters.make_one(self.boto3_raw_data["LabelCounters"])

    WorkteamArn = field("WorkteamArn")
    PreHumanTaskLambdaArn = field("PreHumanTaskLambdaArn")
    AnnotationConsolidationLambdaArn = field("AnnotationConsolidationLambdaArn")
    FailureReason = field("FailureReason")

    @cached_property
    def LabelingJobOutput(self):  # pragma: no cover
        return LabelingJobOutput.make_one(self.boto3_raw_data["LabelingJobOutput"])

    @cached_property
    def InputConfig(self):  # pragma: no cover
        return LabelingJobInputConfigOutput.make_one(self.boto3_raw_data["InputConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LabelingJobSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LabelingJobSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScalingPolicy:
    boto3_raw_data: "type_defs.ScalingPolicyTypeDef" = dataclasses.field()

    @cached_property
    def TargetTracking(self):  # pragma: no cover
        return TargetTrackingScalingPolicyConfiguration.make_one(
            self.boto3_raw_data["TargetTracking"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ScalingPolicyTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ScalingPolicyTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ChannelOutput:
    boto3_raw_data: "type_defs.ChannelOutputTypeDef" = dataclasses.field()

    ChannelName = field("ChannelName")

    @cached_property
    def DataSource(self):  # pragma: no cover
        return DataSourceOutput.make_one(self.boto3_raw_data["DataSource"])

    ContentType = field("ContentType")
    CompressionType = field("CompressionType")
    RecordWrapperType = field("RecordWrapperType")
    InputMode = field("InputMode")

    @cached_property
    def ShuffleConfig(self):  # pragma: no cover
        return ShuffleConfig.make_one(self.boto3_raw_data["ShuffleConfig"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ChannelOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ChannelOutputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataSource:
    boto3_raw_data: "type_defs.DataSourceTypeDef" = dataclasses.field()

    S3DataSource = field("S3DataSource")

    @cached_property
    def FileSystemDataSource(self):  # pragma: no cover
        return FileSystemDataSource.make_one(
            self.boto3_raw_data["FileSystemDataSource"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DataSourceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DataSourceTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ContainerDefinitionOutput:
    boto3_raw_data: "type_defs.ContainerDefinitionOutputTypeDef" = dataclasses.field()

    ContainerHostname = field("ContainerHostname")
    Image = field("Image")

    @cached_property
    def ImageConfig(self):  # pragma: no cover
        return ImageConfig.make_one(self.boto3_raw_data["ImageConfig"])

    Mode = field("Mode")
    ModelDataUrl = field("ModelDataUrl")

    @cached_property
    def ModelDataSource(self):  # pragma: no cover
        return ModelDataSource.make_one(self.boto3_raw_data["ModelDataSource"])

    @cached_property
    def AdditionalModelDataSources(self):  # pragma: no cover
        return AdditionalModelDataSource.make_many(
            self.boto3_raw_data["AdditionalModelDataSources"]
        )

    Environment = field("Environment")
    ModelPackageName = field("ModelPackageName")
    InferenceSpecificationName = field("InferenceSpecificationName")

    @cached_property
    def MultiModelConfig(self):  # pragma: no cover
        return MultiModelConfig.make_one(self.boto3_raw_data["MultiModelConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ContainerDefinitionOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ContainerDefinitionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ContainerDefinition:
    boto3_raw_data: "type_defs.ContainerDefinitionTypeDef" = dataclasses.field()

    ContainerHostname = field("ContainerHostname")
    Image = field("Image")

    @cached_property
    def ImageConfig(self):  # pragma: no cover
        return ImageConfig.make_one(self.boto3_raw_data["ImageConfig"])

    Mode = field("Mode")
    ModelDataUrl = field("ModelDataUrl")

    @cached_property
    def ModelDataSource(self):  # pragma: no cover
        return ModelDataSource.make_one(self.boto3_raw_data["ModelDataSource"])

    @cached_property
    def AdditionalModelDataSources(self):  # pragma: no cover
        return AdditionalModelDataSource.make_many(
            self.boto3_raw_data["AdditionalModelDataSources"]
        )

    Environment = field("Environment")
    ModelPackageName = field("ModelPackageName")
    InferenceSpecificationName = field("InferenceSpecificationName")

    @cached_property
    def MultiModelConfig(self):  # pragma: no cover
        return MultiModelConfig.make_one(self.boto3_raw_data["MultiModelConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ContainerDefinitionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ContainerDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelPackageContainerDefinitionOutput:
    boto3_raw_data: "type_defs.ModelPackageContainerDefinitionOutputTypeDef" = (
        dataclasses.field()
    )

    Image = field("Image")
    ContainerHostname = field("ContainerHostname")
    ImageDigest = field("ImageDigest")
    ModelDataUrl = field("ModelDataUrl")

    @cached_property
    def ModelDataSource(self):  # pragma: no cover
        return ModelDataSource.make_one(self.boto3_raw_data["ModelDataSource"])

    ProductId = field("ProductId")
    Environment = field("Environment")

    @cached_property
    def ModelInput(self):  # pragma: no cover
        return ModelInput.make_one(self.boto3_raw_data["ModelInput"])

    Framework = field("Framework")
    FrameworkVersion = field("FrameworkVersion")
    NearestModelName = field("NearestModelName")

    @cached_property
    def AdditionalS3DataSource(self):  # pragma: no cover
        return AdditionalS3DataSource.make_one(
            self.boto3_raw_data["AdditionalS3DataSource"]
        )

    ModelDataETag = field("ModelDataETag")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModelPackageContainerDefinitionOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelPackageContainerDefinitionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelPackageContainerDefinition:
    boto3_raw_data: "type_defs.ModelPackageContainerDefinitionTypeDef" = (
        dataclasses.field()
    )

    Image = field("Image")
    ContainerHostname = field("ContainerHostname")
    ImageDigest = field("ImageDigest")
    ModelDataUrl = field("ModelDataUrl")

    @cached_property
    def ModelDataSource(self):  # pragma: no cover
        return ModelDataSource.make_one(self.boto3_raw_data["ModelDataSource"])

    ProductId = field("ProductId")
    Environment = field("Environment")

    @cached_property
    def ModelInput(self):  # pragma: no cover
        return ModelInput.make_one(self.boto3_raw_data["ModelInput"])

    Framework = field("Framework")
    FrameworkVersion = field("FrameworkVersion")
    NearestModelName = field("NearestModelName")

    @cached_property
    def AdditionalS3DataSource(self):  # pragma: no cover
        return AdditionalS3DataSource.make_one(
            self.boto3_raw_data["AdditionalS3DataSource"]
        )

    ModelDataETag = field("ModelDataETag")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModelPackageContainerDefinitionTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelPackageContainerDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SourceAlgorithm:
    boto3_raw_data: "type_defs.SourceAlgorithmTypeDef" = dataclasses.field()

    AlgorithmName = field("AlgorithmName")
    ModelDataUrl = field("ModelDataUrl")

    @cached_property
    def ModelDataSource(self):  # pragma: no cover
        return ModelDataSource.make_one(self.boto3_raw_data["ModelDataSource"])

    ModelDataETag = field("ModelDataETag")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SourceAlgorithmTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SourceAlgorithmTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListMonitoringAlertsResponse:
    boto3_raw_data: "type_defs.ListMonitoringAlertsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def MonitoringAlertSummaries(self):  # pragma: no cover
        return MonitoringAlertSummary.make_many(
            self.boto3_raw_data["MonitoringAlertSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListMonitoringAlertsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListMonitoringAlertsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInferenceExperimentResponse:
    boto3_raw_data: "type_defs.DescribeInferenceExperimentResponseTypeDef" = (
        dataclasses.field()
    )

    Arn = field("Arn")
    Name = field("Name")
    Type = field("Type")

    @cached_property
    def Schedule(self):  # pragma: no cover
        return InferenceExperimentScheduleOutput.make_one(
            self.boto3_raw_data["Schedule"]
        )

    Status = field("Status")
    StatusReason = field("StatusReason")
    Description = field("Description")
    CreationTime = field("CreationTime")
    CompletionTime = field("CompletionTime")
    LastModifiedTime = field("LastModifiedTime")
    RoleArn = field("RoleArn")

    @cached_property
    def EndpointMetadata(self):  # pragma: no cover
        return EndpointMetadata.make_one(self.boto3_raw_data["EndpointMetadata"])

    @cached_property
    def ModelVariants(self):  # pragma: no cover
        return ModelVariantConfigSummary.make_many(self.boto3_raw_data["ModelVariants"])

    @cached_property
    def DataStorageConfig(self):  # pragma: no cover
        return InferenceExperimentDataStorageConfigOutput.make_one(
            self.boto3_raw_data["DataStorageConfig"]
        )

    @cached_property
    def ShadowModeConfig(self):  # pragma: no cover
        return ShadowModeConfigOutput.make_one(self.boto3_raw_data["ShadowModeConfig"])

    KmsKey = field("KmsKey")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInferenceExperimentResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInferenceExperimentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StopInferenceExperimentRequest:
    boto3_raw_data: "type_defs.StopInferenceExperimentRequestTypeDef" = (
        dataclasses.field()
    )

    Name = field("Name")
    ModelVariantActions = field("ModelVariantActions")

    @cached_property
    def DesiredModelVariants(self):  # pragma: no cover
        return ModelVariantConfig.make_many(self.boto3_raw_data["DesiredModelVariants"])

    DesiredState = field("DesiredState")
    Reason = field("Reason")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.StopInferenceExperimentRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StopInferenceExperimentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataQualityJobInputOutput:
    boto3_raw_data: "type_defs.DataQualityJobInputOutputTypeDef" = dataclasses.field()

    @cached_property
    def EndpointInput(self):  # pragma: no cover
        return EndpointInput.make_one(self.boto3_raw_data["EndpointInput"])

    @cached_property
    def BatchTransformInput(self):  # pragma: no cover
        return BatchTransformInputOutput.make_one(
            self.boto3_raw_data["BatchTransformInput"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataQualityJobInputOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataQualityJobInputOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelBiasJobInputOutput:
    boto3_raw_data: "type_defs.ModelBiasJobInputOutputTypeDef" = dataclasses.field()

    @cached_property
    def GroundTruthS3Input(self):  # pragma: no cover
        return MonitoringGroundTruthS3Input.make_one(
            self.boto3_raw_data["GroundTruthS3Input"]
        )

    @cached_property
    def EndpointInput(self):  # pragma: no cover
        return EndpointInput.make_one(self.boto3_raw_data["EndpointInput"])

    @cached_property
    def BatchTransformInput(self):  # pragma: no cover
        return BatchTransformInputOutput.make_one(
            self.boto3_raw_data["BatchTransformInput"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelBiasJobInputOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelBiasJobInputOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelExplainabilityJobInputOutput:
    boto3_raw_data: "type_defs.ModelExplainabilityJobInputOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def EndpointInput(self):  # pragma: no cover
        return EndpointInput.make_one(self.boto3_raw_data["EndpointInput"])

    @cached_property
    def BatchTransformInput(self):  # pragma: no cover
        return BatchTransformInputOutput.make_one(
            self.boto3_raw_data["BatchTransformInput"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModelExplainabilityJobInputOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelExplainabilityJobInputOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelQualityJobInputOutput:
    boto3_raw_data: "type_defs.ModelQualityJobInputOutputTypeDef" = dataclasses.field()

    @cached_property
    def GroundTruthS3Input(self):  # pragma: no cover
        return MonitoringGroundTruthS3Input.make_one(
            self.boto3_raw_data["GroundTruthS3Input"]
        )

    @cached_property
    def EndpointInput(self):  # pragma: no cover
        return EndpointInput.make_one(self.boto3_raw_data["EndpointInput"])

    @cached_property
    def BatchTransformInput(self):  # pragma: no cover
        return BatchTransformInputOutput.make_one(
            self.boto3_raw_data["BatchTransformInput"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelQualityJobInputOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelQualityJobInputOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringInputOutput:
    boto3_raw_data: "type_defs.MonitoringInputOutputTypeDef" = dataclasses.field()

    @cached_property
    def EndpointInput(self):  # pragma: no cover
        return EndpointInput.make_one(self.boto3_raw_data["EndpointInput"])

    @cached_property
    def BatchTransformInput(self):  # pragma: no cover
        return BatchTransformInputOutput.make_one(
            self.boto3_raw_data["BatchTransformInput"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MonitoringInputOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringInputOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataQualityJobInput:
    boto3_raw_data: "type_defs.DataQualityJobInputTypeDef" = dataclasses.field()

    @cached_property
    def EndpointInput(self):  # pragma: no cover
        return EndpointInput.make_one(self.boto3_raw_data["EndpointInput"])

    @cached_property
    def BatchTransformInput(self):  # pragma: no cover
        return BatchTransformInput.make_one(self.boto3_raw_data["BatchTransformInput"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataQualityJobInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataQualityJobInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelBiasJobInput:
    boto3_raw_data: "type_defs.ModelBiasJobInputTypeDef" = dataclasses.field()

    @cached_property
    def GroundTruthS3Input(self):  # pragma: no cover
        return MonitoringGroundTruthS3Input.make_one(
            self.boto3_raw_data["GroundTruthS3Input"]
        )

    @cached_property
    def EndpointInput(self):  # pragma: no cover
        return EndpointInput.make_one(self.boto3_raw_data["EndpointInput"])

    @cached_property
    def BatchTransformInput(self):  # pragma: no cover
        return BatchTransformInput.make_one(self.boto3_raw_data["BatchTransformInput"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ModelBiasJobInputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelBiasJobInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelExplainabilityJobInput:
    boto3_raw_data: "type_defs.ModelExplainabilityJobInputTypeDef" = dataclasses.field()

    @cached_property
    def EndpointInput(self):  # pragma: no cover
        return EndpointInput.make_one(self.boto3_raw_data["EndpointInput"])

    @cached_property
    def BatchTransformInput(self):  # pragma: no cover
        return BatchTransformInput.make_one(self.boto3_raw_data["BatchTransformInput"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelExplainabilityJobInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelExplainabilityJobInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelQualityJobInput:
    boto3_raw_data: "type_defs.ModelQualityJobInputTypeDef" = dataclasses.field()

    @cached_property
    def GroundTruthS3Input(self):  # pragma: no cover
        return MonitoringGroundTruthS3Input.make_one(
            self.boto3_raw_data["GroundTruthS3Input"]
        )

    @cached_property
    def EndpointInput(self):  # pragma: no cover
        return EndpointInput.make_one(self.boto3_raw_data["EndpointInput"])

    @cached_property
    def BatchTransformInput(self):  # pragma: no cover
        return BatchTransformInput.make_one(self.boto3_raw_data["BatchTransformInput"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelQualityJobInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelQualityJobInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringInput:
    boto3_raw_data: "type_defs.MonitoringInputTypeDef" = dataclasses.field()

    @cached_property
    def EndpointInput(self):  # pragma: no cover
        return EndpointInput.make_one(self.boto3_raw_data["EndpointInput"])

    @cached_property
    def BatchTransformInput(self):  # pragma: no cover
        return BatchTransformInput.make_one(self.boto3_raw_data["BatchTransformInput"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MonitoringInputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.MonitoringInputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeOptimizationJobResponse:
    boto3_raw_data: "type_defs.DescribeOptimizationJobResponseTypeDef" = (
        dataclasses.field()
    )

    OptimizationJobArn = field("OptimizationJobArn")
    OptimizationJobStatus = field("OptimizationJobStatus")
    OptimizationStartTime = field("OptimizationStartTime")
    OptimizationEndTime = field("OptimizationEndTime")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    FailureReason = field("FailureReason")
    OptimizationJobName = field("OptimizationJobName")

    @cached_property
    def ModelSource(self):  # pragma: no cover
        return OptimizationJobModelSource.make_one(self.boto3_raw_data["ModelSource"])

    OptimizationEnvironment = field("OptimizationEnvironment")
    DeploymentInstanceType = field("DeploymentInstanceType")

    @cached_property
    def OptimizationConfigs(self):  # pragma: no cover
        return OptimizationConfigOutput.make_many(
            self.boto3_raw_data["OptimizationConfigs"]
        )

    @cached_property
    def OutputConfig(self):  # pragma: no cover
        return OptimizationJobOutputConfig.make_one(self.boto3_raw_data["OutputConfig"])

    @cached_property
    def OptimizationOutput(self):  # pragma: no cover
        return OptimizationOutput.make_one(self.boto3_raw_data["OptimizationOutput"])

    RoleArn = field("RoleArn")

    @cached_property
    def StoppingCondition(self):  # pragma: no cover
        return StoppingCondition.make_one(self.boto3_raw_data["StoppingCondition"])

    @cached_property
    def VpcConfig(self):  # pragma: no cover
        return OptimizationVpcConfigOutput.make_one(self.boto3_raw_data["VpcConfig"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeOptimizationJobResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeOptimizationJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateClusterSchedulerConfigRequest:
    boto3_raw_data: "type_defs.CreateClusterSchedulerConfigRequestTypeDef" = (
        dataclasses.field()
    )

    Name = field("Name")
    ClusterArn = field("ClusterArn")
    SchedulerConfig = field("SchedulerConfig")
    Description = field("Description")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateClusterSchedulerConfigRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateClusterSchedulerConfigRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateClusterSchedulerConfigRequest:
    boto3_raw_data: "type_defs.UpdateClusterSchedulerConfigRequestTypeDef" = (
        dataclasses.field()
    )

    ClusterSchedulerConfigId = field("ClusterSchedulerConfigId")
    TargetVersion = field("TargetVersion")
    SchedulerConfig = field("SchedulerConfig")
    Description = field("Description")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateClusterSchedulerConfigRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateClusterSchedulerConfigRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeProcessingJobResponse:
    boto3_raw_data: "type_defs.DescribeProcessingJobResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ProcessingInputs(self):  # pragma: no cover
        return ProcessingInput.make_many(self.boto3_raw_data["ProcessingInputs"])

    @cached_property
    def ProcessingOutputConfig(self):  # pragma: no cover
        return ProcessingOutputConfigOutput.make_one(
            self.boto3_raw_data["ProcessingOutputConfig"]
        )

    ProcessingJobName = field("ProcessingJobName")

    @cached_property
    def ProcessingResources(self):  # pragma: no cover
        return ProcessingResources.make_one(self.boto3_raw_data["ProcessingResources"])

    @cached_property
    def StoppingCondition(self):  # pragma: no cover
        return ProcessingStoppingCondition.make_one(
            self.boto3_raw_data["StoppingCondition"]
        )

    @cached_property
    def AppSpecification(self):  # pragma: no cover
        return AppSpecificationOutput.make_one(self.boto3_raw_data["AppSpecification"])

    Environment = field("Environment")

    @cached_property
    def NetworkConfig(self):  # pragma: no cover
        return NetworkConfigOutput.make_one(self.boto3_raw_data["NetworkConfig"])

    RoleArn = field("RoleArn")

    @cached_property
    def ExperimentConfig(self):  # pragma: no cover
        return ExperimentConfig.make_one(self.boto3_raw_data["ExperimentConfig"])

    ProcessingJobArn = field("ProcessingJobArn")
    ProcessingJobStatus = field("ProcessingJobStatus")
    ExitMessage = field("ExitMessage")
    FailureReason = field("FailureReason")
    ProcessingEndTime = field("ProcessingEndTime")
    ProcessingStartTime = field("ProcessingStartTime")
    LastModifiedTime = field("LastModifiedTime")
    CreationTime = field("CreationTime")
    MonitoringScheduleArn = field("MonitoringScheduleArn")
    AutoMLJobArn = field("AutoMLJobArn")
    TrainingJobArn = field("TrainingJobArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeProcessingJobResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeProcessingJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProcessingJob:
    boto3_raw_data: "type_defs.ProcessingJobTypeDef" = dataclasses.field()

    @cached_property
    def ProcessingInputs(self):  # pragma: no cover
        return ProcessingInput.make_many(self.boto3_raw_data["ProcessingInputs"])

    @cached_property
    def ProcessingOutputConfig(self):  # pragma: no cover
        return ProcessingOutputConfigOutput.make_one(
            self.boto3_raw_data["ProcessingOutputConfig"]
        )

    ProcessingJobName = field("ProcessingJobName")

    @cached_property
    def ProcessingResources(self):  # pragma: no cover
        return ProcessingResources.make_one(self.boto3_raw_data["ProcessingResources"])

    @cached_property
    def StoppingCondition(self):  # pragma: no cover
        return ProcessingStoppingCondition.make_one(
            self.boto3_raw_data["StoppingCondition"]
        )

    @cached_property
    def AppSpecification(self):  # pragma: no cover
        return AppSpecificationOutput.make_one(self.boto3_raw_data["AppSpecification"])

    Environment = field("Environment")

    @cached_property
    def NetworkConfig(self):  # pragma: no cover
        return NetworkConfigOutput.make_one(self.boto3_raw_data["NetworkConfig"])

    RoleArn = field("RoleArn")

    @cached_property
    def ExperimentConfig(self):  # pragma: no cover
        return ExperimentConfig.make_one(self.boto3_raw_data["ExperimentConfig"])

    ProcessingJobArn = field("ProcessingJobArn")
    ProcessingJobStatus = field("ProcessingJobStatus")
    ExitMessage = field("ExitMessage")
    FailureReason = field("FailureReason")
    ProcessingEndTime = field("ProcessingEndTime")
    ProcessingStartTime = field("ProcessingStartTime")
    LastModifiedTime = field("LastModifiedTime")
    CreationTime = field("CreationTime")
    MonitoringScheduleArn = field("MonitoringScheduleArn")
    AutoMLJobArn = field("AutoMLJobArn")
    TrainingJobArn = field("TrainingJobArn")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ProcessingJobTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ProcessingJobTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateProjectInput:
    boto3_raw_data: "type_defs.CreateProjectInputTypeDef" = dataclasses.field()

    ProjectName = field("ProjectName")
    ProjectDescription = field("ProjectDescription")
    ServiceCatalogProvisioningDetails = field("ServiceCatalogProvisioningDetails")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def TemplateProviders(self):  # pragma: no cover
        return CreateTemplateProvider.make_many(
            self.boto3_raw_data["TemplateProviders"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateProjectInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateProjectInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFlowDefinitionResponse:
    boto3_raw_data: "type_defs.DescribeFlowDefinitionResponseTypeDef" = (
        dataclasses.field()
    )

    FlowDefinitionArn = field("FlowDefinitionArn")
    FlowDefinitionName = field("FlowDefinitionName")
    FlowDefinitionStatus = field("FlowDefinitionStatus")
    CreationTime = field("CreationTime")

    @cached_property
    def HumanLoopRequestSource(self):  # pragma: no cover
        return HumanLoopRequestSource.make_one(
            self.boto3_raw_data["HumanLoopRequestSource"]
        )

    @cached_property
    def HumanLoopActivationConfig(self):  # pragma: no cover
        return HumanLoopActivationConfig.make_one(
            self.boto3_raw_data["HumanLoopActivationConfig"]
        )

    @cached_property
    def HumanLoopConfig(self):  # pragma: no cover
        return HumanLoopConfigOutput.make_one(self.boto3_raw_data["HumanLoopConfig"])

    @cached_property
    def OutputConfig(self):  # pragma: no cover
        return FlowDefinitionOutputConfig.make_one(self.boto3_raw_data["OutputConfig"])

    RoleArn = field("RoleArn")
    FailureReason = field("FailureReason")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeFlowDefinitionResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFlowDefinitionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeLabelingJobResponse:
    boto3_raw_data: "type_defs.DescribeLabelingJobResponseTypeDef" = dataclasses.field()

    LabelingJobStatus = field("LabelingJobStatus")

    @cached_property
    def LabelCounters(self):  # pragma: no cover
        return LabelCounters.make_one(self.boto3_raw_data["LabelCounters"])

    FailureReason = field("FailureReason")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    JobReferenceCode = field("JobReferenceCode")
    LabelingJobName = field("LabelingJobName")
    LabelingJobArn = field("LabelingJobArn")
    LabelAttributeName = field("LabelAttributeName")

    @cached_property
    def InputConfig(self):  # pragma: no cover
        return LabelingJobInputConfigOutput.make_one(self.boto3_raw_data["InputConfig"])

    @cached_property
    def OutputConfig(self):  # pragma: no cover
        return LabelingJobOutputConfig.make_one(self.boto3_raw_data["OutputConfig"])

    RoleArn = field("RoleArn")
    LabelCategoryConfigS3Uri = field("LabelCategoryConfigS3Uri")

    @cached_property
    def StoppingConditions(self):  # pragma: no cover
        return LabelingJobStoppingConditions.make_one(
            self.boto3_raw_data["StoppingConditions"]
        )

    @cached_property
    def LabelingJobAlgorithmsConfig(self):  # pragma: no cover
        return LabelingJobAlgorithmsConfigOutput.make_one(
            self.boto3_raw_data["LabelingJobAlgorithmsConfig"]
        )

    @cached_property
    def HumanTaskConfig(self):  # pragma: no cover
        return HumanTaskConfigOutput.make_one(self.boto3_raw_data["HumanTaskConfig"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def LabelingJobOutput(self):  # pragma: no cover
        return LabelingJobOutput.make_one(self.boto3_raw_data["LabelingJobOutput"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeLabelingJobResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeLabelingJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartPipelineExecutionRequest:
    boto3_raw_data: "type_defs.StartPipelineExecutionRequestTypeDef" = (
        dataclasses.field()
    )

    PipelineName = field("PipelineName")
    ClientRequestToken = field("ClientRequestToken")
    PipelineExecutionDisplayName = field("PipelineExecutionDisplayName")

    @cached_property
    def PipelineParameters(self):  # pragma: no cover
        return Parameter.make_many(self.boto3_raw_data["PipelineParameters"])

    PipelineExecutionDescription = field("PipelineExecutionDescription")

    @cached_property
    def ParallelismConfiguration(self):  # pragma: no cover
        return ParallelismConfiguration.make_one(
            self.boto3_raw_data["ParallelismConfiguration"]
        )

    SelectiveExecutionConfig = field("SelectiveExecutionConfig")
    PipelineVersionId = field("PipelineVersionId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.StartPipelineExecutionRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartPipelineExecutionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateInferenceExperimentRequest:
    boto3_raw_data: "type_defs.CreateInferenceExperimentRequestTypeDef" = (
        dataclasses.field()
    )

    Name = field("Name")
    Type = field("Type")
    RoleArn = field("RoleArn")
    EndpointName = field("EndpointName")

    @cached_property
    def ModelVariants(self):  # pragma: no cover
        return ModelVariantConfig.make_many(self.boto3_raw_data["ModelVariants"])

    ShadowModeConfig = field("ShadowModeConfig")
    Schedule = field("Schedule")
    Description = field("Description")
    DataStorageConfig = field("DataStorageConfig")
    KmsKey = field("KmsKey")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateInferenceExperimentRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateInferenceExperimentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateInferenceExperimentRequest:
    boto3_raw_data: "type_defs.UpdateInferenceExperimentRequestTypeDef" = (
        dataclasses.field()
    )

    Name = field("Name")
    Schedule = field("Schedule")
    Description = field("Description")

    @cached_property
    def ModelVariants(self):  # pragma: no cover
        return ModelVariantConfig.make_many(self.boto3_raw_data["ModelVariants"])

    DataStorageConfig = field("DataStorageConfig")
    ShadowModeConfig = field("ShadowModeConfig")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateInferenceExperimentRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateInferenceExperimentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpaceSettingsOutput:
    boto3_raw_data: "type_defs.SpaceSettingsOutputTypeDef" = dataclasses.field()

    @cached_property
    def JupyterServerAppSettings(self):  # pragma: no cover
        return JupyterServerAppSettingsOutput.make_one(
            self.boto3_raw_data["JupyterServerAppSettings"]
        )

    @cached_property
    def KernelGatewayAppSettings(self):  # pragma: no cover
        return KernelGatewayAppSettingsOutput.make_one(
            self.boto3_raw_data["KernelGatewayAppSettings"]
        )

    @cached_property
    def CodeEditorAppSettings(self):  # pragma: no cover
        return SpaceCodeEditorAppSettings.make_one(
            self.boto3_raw_data["CodeEditorAppSettings"]
        )

    @cached_property
    def JupyterLabAppSettings(self):  # pragma: no cover
        return SpaceJupyterLabAppSettingsOutput.make_one(
            self.boto3_raw_data["JupyterLabAppSettings"]
        )

    AppType = field("AppType")

    @cached_property
    def SpaceStorageSettings(self):  # pragma: no cover
        return SpaceStorageSettings.make_one(
            self.boto3_raw_data["SpaceStorageSettings"]
        )

    SpaceManagedResources = field("SpaceManagedResources")

    @cached_property
    def CustomFileSystems(self):  # pragma: no cover
        return CustomFileSystem.make_many(self.boto3_raw_data["CustomFileSystems"])

    RemoteAccess = field("RemoteAccess")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SpaceSettingsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpaceSettingsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpaceSettings:
    boto3_raw_data: "type_defs.SpaceSettingsTypeDef" = dataclasses.field()

    @cached_property
    def JupyterServerAppSettings(self):  # pragma: no cover
        return JupyterServerAppSettings.make_one(
            self.boto3_raw_data["JupyterServerAppSettings"]
        )

    @cached_property
    def KernelGatewayAppSettings(self):  # pragma: no cover
        return KernelGatewayAppSettings.make_one(
            self.boto3_raw_data["KernelGatewayAppSettings"]
        )

    @cached_property
    def CodeEditorAppSettings(self):  # pragma: no cover
        return SpaceCodeEditorAppSettings.make_one(
            self.boto3_raw_data["CodeEditorAppSettings"]
        )

    @cached_property
    def JupyterLabAppSettings(self):  # pragma: no cover
        return SpaceJupyterLabAppSettings.make_one(
            self.boto3_raw_data["JupyterLabAppSettings"]
        )

    AppType = field("AppType")

    @cached_property
    def SpaceStorageSettings(self):  # pragma: no cover
        return SpaceStorageSettings.make_one(
            self.boto3_raw_data["SpaceStorageSettings"]
        )

    SpaceManagedResources = field("SpaceManagedResources")

    @cached_property
    def CustomFileSystems(self):  # pragma: no cover
        return CustomFileSystem.make_many(self.boto3_raw_data["CustomFileSystems"])

    RemoteAccess = field("RemoteAccess")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SpaceSettingsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SpaceSettingsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTransformJobRequest:
    boto3_raw_data: "type_defs.CreateTransformJobRequestTypeDef" = dataclasses.field()

    TransformJobName = field("TransformJobName")
    ModelName = field("ModelName")

    @cached_property
    def TransformInput(self):  # pragma: no cover
        return TransformInput.make_one(self.boto3_raw_data["TransformInput"])

    @cached_property
    def TransformOutput(self):  # pragma: no cover
        return TransformOutput.make_one(self.boto3_raw_data["TransformOutput"])

    @cached_property
    def TransformResources(self):  # pragma: no cover
        return TransformResources.make_one(self.boto3_raw_data["TransformResources"])

    MaxConcurrentTransforms = field("MaxConcurrentTransforms")

    @cached_property
    def ModelClientConfig(self):  # pragma: no cover
        return ModelClientConfig.make_one(self.boto3_raw_data["ModelClientConfig"])

    MaxPayloadInMB = field("MaxPayloadInMB")
    BatchStrategy = field("BatchStrategy")
    Environment = field("Environment")

    @cached_property
    def DataCaptureConfig(self):  # pragma: no cover
        return BatchDataCaptureConfig.make_one(self.boto3_raw_data["DataCaptureConfig"])

    @cached_property
    def DataProcessing(self):  # pragma: no cover
        return DataProcessing.make_one(self.boto3_raw_data["DataProcessing"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def ExperimentConfig(self):  # pragma: no cover
        return ExperimentConfig.make_one(self.boto3_raw_data["ExperimentConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateTransformJobRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTransformJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTransformJobResponse:
    boto3_raw_data: "type_defs.DescribeTransformJobResponseTypeDef" = (
        dataclasses.field()
    )

    TransformJobName = field("TransformJobName")
    TransformJobArn = field("TransformJobArn")
    TransformJobStatus = field("TransformJobStatus")
    FailureReason = field("FailureReason")
    ModelName = field("ModelName")
    MaxConcurrentTransforms = field("MaxConcurrentTransforms")

    @cached_property
    def ModelClientConfig(self):  # pragma: no cover
        return ModelClientConfig.make_one(self.boto3_raw_data["ModelClientConfig"])

    MaxPayloadInMB = field("MaxPayloadInMB")
    BatchStrategy = field("BatchStrategy")
    Environment = field("Environment")

    @cached_property
    def TransformInput(self):  # pragma: no cover
        return TransformInput.make_one(self.boto3_raw_data["TransformInput"])

    @cached_property
    def TransformOutput(self):  # pragma: no cover
        return TransformOutput.make_one(self.boto3_raw_data["TransformOutput"])

    @cached_property
    def DataCaptureConfig(self):  # pragma: no cover
        return BatchDataCaptureConfig.make_one(self.boto3_raw_data["DataCaptureConfig"])

    @cached_property
    def TransformResources(self):  # pragma: no cover
        return TransformResources.make_one(self.boto3_raw_data["TransformResources"])

    CreationTime = field("CreationTime")
    TransformStartTime = field("TransformStartTime")
    TransformEndTime = field("TransformEndTime")
    LabelingJobArn = field("LabelingJobArn")
    AutoMLJobArn = field("AutoMLJobArn")

    @cached_property
    def DataProcessing(self):  # pragma: no cover
        return DataProcessing.make_one(self.boto3_raw_data["DataProcessing"])

    @cached_property
    def ExperimentConfig(self):  # pragma: no cover
        return ExperimentConfig.make_one(self.boto3_raw_data["ExperimentConfig"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeTransformJobResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTransformJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransformJobDefinitionOutput:
    boto3_raw_data: "type_defs.TransformJobDefinitionOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TransformInput(self):  # pragma: no cover
        return TransformInput.make_one(self.boto3_raw_data["TransformInput"])

    @cached_property
    def TransformOutput(self):  # pragma: no cover
        return TransformOutput.make_one(self.boto3_raw_data["TransformOutput"])

    @cached_property
    def TransformResources(self):  # pragma: no cover
        return TransformResources.make_one(self.boto3_raw_data["TransformResources"])

    MaxConcurrentTransforms = field("MaxConcurrentTransforms")
    MaxPayloadInMB = field("MaxPayloadInMB")
    BatchStrategy = field("BatchStrategy")
    Environment = field("Environment")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TransformJobDefinitionOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransformJobDefinitionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransformJobDefinition:
    boto3_raw_data: "type_defs.TransformJobDefinitionTypeDef" = dataclasses.field()

    @cached_property
    def TransformInput(self):  # pragma: no cover
        return TransformInput.make_one(self.boto3_raw_data["TransformInput"])

    @cached_property
    def TransformOutput(self):  # pragma: no cover
        return TransformOutput.make_one(self.boto3_raw_data["TransformOutput"])

    @cached_property
    def TransformResources(self):  # pragma: no cover
        return TransformResources.make_one(self.boto3_raw_data["TransformResources"])

    MaxConcurrentTransforms = field("MaxConcurrentTransforms")
    MaxPayloadInMB = field("MaxPayloadInMB")
    BatchStrategy = field("BatchStrategy")
    Environment = field("Environment")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TransformJobDefinitionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransformJobDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransformJob:
    boto3_raw_data: "type_defs.TransformJobTypeDef" = dataclasses.field()

    TransformJobName = field("TransformJobName")
    TransformJobArn = field("TransformJobArn")
    TransformJobStatus = field("TransformJobStatus")
    FailureReason = field("FailureReason")
    ModelName = field("ModelName")
    MaxConcurrentTransforms = field("MaxConcurrentTransforms")

    @cached_property
    def ModelClientConfig(self):  # pragma: no cover
        return ModelClientConfig.make_one(self.boto3_raw_data["ModelClientConfig"])

    MaxPayloadInMB = field("MaxPayloadInMB")
    BatchStrategy = field("BatchStrategy")
    Environment = field("Environment")

    @cached_property
    def TransformInput(self):  # pragma: no cover
        return TransformInput.make_one(self.boto3_raw_data["TransformInput"])

    @cached_property
    def TransformOutput(self):  # pragma: no cover
        return TransformOutput.make_one(self.boto3_raw_data["TransformOutput"])

    @cached_property
    def DataCaptureConfig(self):  # pragma: no cover
        return BatchDataCaptureConfig.make_one(self.boto3_raw_data["DataCaptureConfig"])

    @cached_property
    def TransformResources(self):  # pragma: no cover
        return TransformResources.make_one(self.boto3_raw_data["TransformResources"])

    CreationTime = field("CreationTime")
    TransformStartTime = field("TransformStartTime")
    TransformEndTime = field("TransformEndTime")
    LabelingJobArn = field("LabelingJobArn")
    AutoMLJobArn = field("AutoMLJobArn")

    @cached_property
    def DataProcessing(self):  # pragma: no cover
        return DataProcessing.make_one(self.boto3_raw_data["DataProcessing"])

    @cached_property
    def ExperimentConfig(self):  # pragma: no cover
        return ExperimentConfig.make_one(self.boto3_raw_data["ExperimentConfig"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TransformJobTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TransformJobTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDomainResponse:
    boto3_raw_data: "type_defs.DescribeDomainResponseTypeDef" = dataclasses.field()

    DomainArn = field("DomainArn")
    DomainId = field("DomainId")
    DomainName = field("DomainName")
    HomeEfsFileSystemId = field("HomeEfsFileSystemId")
    SingleSignOnManagedApplicationInstanceId = field(
        "SingleSignOnManagedApplicationInstanceId"
    )
    SingleSignOnApplicationArn = field("SingleSignOnApplicationArn")
    Status = field("Status")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")
    FailureReason = field("FailureReason")
    SecurityGroupIdForDomainBoundary = field("SecurityGroupIdForDomainBoundary")
    AuthMode = field("AuthMode")

    @cached_property
    def DefaultUserSettings(self):  # pragma: no cover
        return UserSettingsOutput.make_one(self.boto3_raw_data["DefaultUserSettings"])

    @cached_property
    def DomainSettings(self):  # pragma: no cover
        return DomainSettingsOutput.make_one(self.boto3_raw_data["DomainSettings"])

    AppNetworkAccessType = field("AppNetworkAccessType")
    HomeEfsFileSystemKmsKeyId = field("HomeEfsFileSystemKmsKeyId")
    SubnetIds = field("SubnetIds")
    Url = field("Url")
    VpcId = field("VpcId")
    KmsKeyId = field("KmsKeyId")
    AppSecurityGroupManagement = field("AppSecurityGroupManagement")
    TagPropagation = field("TagPropagation")

    @cached_property
    def DefaultSpaceSettings(self):  # pragma: no cover
        return DefaultSpaceSettingsOutput.make_one(
            self.boto3_raw_data["DefaultSpaceSettings"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeDomainResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDomainResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeUserProfileResponse:
    boto3_raw_data: "type_defs.DescribeUserProfileResponseTypeDef" = dataclasses.field()

    DomainId = field("DomainId")
    UserProfileArn = field("UserProfileArn")
    UserProfileName = field("UserProfileName")
    HomeEfsFileSystemUid = field("HomeEfsFileSystemUid")
    Status = field("Status")
    LastModifiedTime = field("LastModifiedTime")
    CreationTime = field("CreationTime")
    FailureReason = field("FailureReason")
    SingleSignOnUserIdentifier = field("SingleSignOnUserIdentifier")
    SingleSignOnUserValue = field("SingleSignOnUserValue")

    @cached_property
    def UserSettings(self):  # pragma: no cover
        return UserSettingsOutput.make_one(self.boto3_raw_data["UserSettings"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeUserProfileResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeUserProfileResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAutoMLJobV2Response:
    boto3_raw_data: "type_defs.DescribeAutoMLJobV2ResponseTypeDef" = dataclasses.field()

    AutoMLJobName = field("AutoMLJobName")
    AutoMLJobArn = field("AutoMLJobArn")

    @cached_property
    def AutoMLJobInputDataConfig(self):  # pragma: no cover
        return AutoMLJobChannel.make_many(
            self.boto3_raw_data["AutoMLJobInputDataConfig"]
        )

    @cached_property
    def OutputDataConfig(self):  # pragma: no cover
        return AutoMLOutputDataConfig.make_one(self.boto3_raw_data["OutputDataConfig"])

    RoleArn = field("RoleArn")

    @cached_property
    def AutoMLJobObjective(self):  # pragma: no cover
        return AutoMLJobObjective.make_one(self.boto3_raw_data["AutoMLJobObjective"])

    @cached_property
    def AutoMLProblemTypeConfig(self):  # pragma: no cover
        return AutoMLProblemTypeConfigOutput.make_one(
            self.boto3_raw_data["AutoMLProblemTypeConfig"]
        )

    AutoMLProblemTypeConfigName = field("AutoMLProblemTypeConfigName")
    CreationTime = field("CreationTime")
    EndTime = field("EndTime")
    LastModifiedTime = field("LastModifiedTime")
    FailureReason = field("FailureReason")

    @cached_property
    def PartialFailureReasons(self):  # pragma: no cover
        return AutoMLPartialFailureReason.make_many(
            self.boto3_raw_data["PartialFailureReasons"]
        )

    @cached_property
    def BestCandidate(self):  # pragma: no cover
        return AutoMLCandidate.make_one(self.boto3_raw_data["BestCandidate"])

    AutoMLJobStatus = field("AutoMLJobStatus")
    AutoMLJobSecondaryStatus = field("AutoMLJobSecondaryStatus")

    @cached_property
    def AutoMLJobArtifacts(self):  # pragma: no cover
        return AutoMLJobArtifacts.make_one(self.boto3_raw_data["AutoMLJobArtifacts"])

    @cached_property
    def ResolvedAttributes(self):  # pragma: no cover
        return AutoMLResolvedAttributes.make_one(
            self.boto3_raw_data["ResolvedAttributes"]
        )

    @cached_property
    def ModelDeployConfig(self):  # pragma: no cover
        return ModelDeployConfig.make_one(self.boto3_raw_data["ModelDeployConfig"])

    @cached_property
    def ModelDeployResult(self):  # pragma: no cover
        return ModelDeployResult.make_one(self.boto3_raw_data["ModelDeployResult"])

    @cached_property
    def DataSplitConfig(self):  # pragma: no cover
        return AutoMLDataSplitConfig.make_one(self.boto3_raw_data["DataSplitConfig"])

    @cached_property
    def SecurityConfig(self):  # pragma: no cover
        return AutoMLSecurityConfigOutput.make_one(
            self.boto3_raw_data["SecurityConfig"]
        )

    @cached_property
    def AutoMLComputeConfig(self):  # pragma: no cover
        return AutoMLComputeConfig.make_one(self.boto3_raw_data["AutoMLComputeConfig"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeAutoMLJobV2ResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAutoMLJobV2ResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateAutoMLJobRequest:
    boto3_raw_data: "type_defs.CreateAutoMLJobRequestTypeDef" = dataclasses.field()

    AutoMLJobName = field("AutoMLJobName")

    @cached_property
    def InputDataConfig(self):  # pragma: no cover
        return AutoMLChannel.make_many(self.boto3_raw_data["InputDataConfig"])

    @cached_property
    def OutputDataConfig(self):  # pragma: no cover
        return AutoMLOutputDataConfig.make_one(self.boto3_raw_data["OutputDataConfig"])

    RoleArn = field("RoleArn")
    ProblemType = field("ProblemType")

    @cached_property
    def AutoMLJobObjective(self):  # pragma: no cover
        return AutoMLJobObjective.make_one(self.boto3_raw_data["AutoMLJobObjective"])

    AutoMLJobConfig = field("AutoMLJobConfig")
    GenerateCandidateDefinitionsOnly = field("GenerateCandidateDefinitionsOnly")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def ModelDeployConfig(self):  # pragma: no cover
        return ModelDeployConfig.make_one(self.boto3_raw_data["ModelDeployConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateAutoMLJobRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateAutoMLJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListPipelineExecutionStepsResponse:
    boto3_raw_data: "type_defs.ListPipelineExecutionStepsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PipelineExecutionSteps(self):  # pragma: no cover
        return PipelineExecutionStep.make_many(
            self.boto3_raw_data["PipelineExecutionSteps"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListPipelineExecutionStepsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListPipelineExecutionStepsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClusterEventDetail:
    boto3_raw_data: "type_defs.ClusterEventDetailTypeDef" = dataclasses.field()

    EventId = field("EventId")
    ClusterArn = field("ClusterArn")
    ClusterName = field("ClusterName")
    ResourceType = field("ResourceType")
    EventTime = field("EventTime")
    InstanceGroupName = field("InstanceGroupName")
    InstanceId = field("InstanceId")

    @cached_property
    def EventDetails(self):  # pragma: no cover
        return EventDetails.make_one(self.boto3_raw_data["EventDetails"])

    Description = field("Description")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClusterEventDetailTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClusterEventDetailTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClusterInstanceGroupDetails:
    boto3_raw_data: "type_defs.ClusterInstanceGroupDetailsTypeDef" = dataclasses.field()

    CurrentCount = field("CurrentCount")
    TargetCount = field("TargetCount")
    InstanceGroupName = field("InstanceGroupName")
    InstanceType = field("InstanceType")

    @cached_property
    def LifeCycleConfig(self):  # pragma: no cover
        return ClusterLifeCycleConfig.make_one(self.boto3_raw_data["LifeCycleConfig"])

    ExecutionRole = field("ExecutionRole")
    ThreadsPerCore = field("ThreadsPerCore")

    @cached_property
    def InstanceStorageConfigs(self):  # pragma: no cover
        return ClusterInstanceStorageConfig.make_many(
            self.boto3_raw_data["InstanceStorageConfigs"]
        )

    OnStartDeepHealthChecks = field("OnStartDeepHealthChecks")
    Status = field("Status")
    TrainingPlanArn = field("TrainingPlanArn")
    TrainingPlanStatus = field("TrainingPlanStatus")

    @cached_property
    def OverrideVpcConfig(self):  # pragma: no cover
        return VpcConfigOutput.make_one(self.boto3_raw_data["OverrideVpcConfig"])

    @cached_property
    def ScheduledUpdateConfig(self):  # pragma: no cover
        return ScheduledUpdateConfigOutput.make_one(
            self.boto3_raw_data["ScheduledUpdateConfig"]
        )

    CurrentImageId = field("CurrentImageId")
    DesiredImageId = field("DesiredImageId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClusterInstanceGroupDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClusterInstanceGroupDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClusterRestrictedInstanceGroupDetails:
    boto3_raw_data: "type_defs.ClusterRestrictedInstanceGroupDetailsTypeDef" = (
        dataclasses.field()
    )

    CurrentCount = field("CurrentCount")
    TargetCount = field("TargetCount")
    InstanceGroupName = field("InstanceGroupName")
    InstanceType = field("InstanceType")
    ExecutionRole = field("ExecutionRole")
    ThreadsPerCore = field("ThreadsPerCore")

    @cached_property
    def InstanceStorageConfigs(self):  # pragma: no cover
        return ClusterInstanceStorageConfig.make_many(
            self.boto3_raw_data["InstanceStorageConfigs"]
        )

    OnStartDeepHealthChecks = field("OnStartDeepHealthChecks")
    Status = field("Status")
    TrainingPlanArn = field("TrainingPlanArn")
    TrainingPlanStatus = field("TrainingPlanStatus")

    @cached_property
    def OverrideVpcConfig(self):  # pragma: no cover
        return VpcConfigOutput.make_one(self.boto3_raw_data["OverrideVpcConfig"])

    @cached_property
    def ScheduledUpdateConfig(self):  # pragma: no cover
        return ScheduledUpdateConfigOutput.make_one(
            self.boto3_raw_data["ScheduledUpdateConfig"]
        )

    @cached_property
    def EnvironmentConfig(self):  # pragma: no cover
        return EnvironmentConfigDetails.make_one(
            self.boto3_raw_data["EnvironmentConfig"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ClusterRestrictedInstanceGroupDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClusterRestrictedInstanceGroupDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScheduledUpdateConfig:
    boto3_raw_data: "type_defs.ScheduledUpdateConfigTypeDef" = dataclasses.field()

    ScheduleExpression = field("ScheduleExpression")
    DeploymentConfig = field("DeploymentConfig")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ScheduledUpdateConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScheduledUpdateConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateClusterSoftwareRequest:
    boto3_raw_data: "type_defs.UpdateClusterSoftwareRequestTypeDef" = (
        dataclasses.field()
    )

    ClusterName = field("ClusterName")

    @cached_property
    def InstanceGroups(self):  # pragma: no cover
        return UpdateClusterSoftwareInstanceGroupSpecification.make_many(
            self.boto3_raw_data["InstanceGroups"]
        )

    DeploymentConfig = field("DeploymentConfig")
    ImageId = field("ImageId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateClusterSoftwareRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateClusterSoftwareRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeInferenceRecommendationsJobResponse:
    boto3_raw_data: "type_defs.DescribeInferenceRecommendationsJobResponseTypeDef" = (
        dataclasses.field()
    )

    JobName = field("JobName")
    JobDescription = field("JobDescription")
    JobType = field("JobType")
    JobArn = field("JobArn")
    RoleArn = field("RoleArn")
    Status = field("Status")
    CreationTime = field("CreationTime")
    CompletionTime = field("CompletionTime")
    LastModifiedTime = field("LastModifiedTime")
    FailureReason = field("FailureReason")

    @cached_property
    def InputConfig(self):  # pragma: no cover
        return RecommendationJobInputConfigOutput.make_one(
            self.boto3_raw_data["InputConfig"]
        )

    @cached_property
    def StoppingConditions(self):  # pragma: no cover
        return RecommendationJobStoppingConditionsOutput.make_one(
            self.boto3_raw_data["StoppingConditions"]
        )

    @cached_property
    def InferenceRecommendations(self):  # pragma: no cover
        return InferenceRecommendation.make_many(
            self.boto3_raw_data["InferenceRecommendations"]
        )

    @cached_property
    def EndpointPerformances(self):  # pragma: no cover
        return EndpointPerformance.make_many(
            self.boto3_raw_data["EndpointPerformances"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeInferenceRecommendationsJobResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeInferenceRecommendationsJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeEndpointConfigOutput:
    boto3_raw_data: "type_defs.DescribeEndpointConfigOutputTypeDef" = (
        dataclasses.field()
    )

    EndpointConfigName = field("EndpointConfigName")
    EndpointConfigArn = field("EndpointConfigArn")

    @cached_property
    def ProductionVariants(self):  # pragma: no cover
        return ProductionVariant.make_many(self.boto3_raw_data["ProductionVariants"])

    @cached_property
    def DataCaptureConfig(self):  # pragma: no cover
        return DataCaptureConfigOutput.make_one(
            self.boto3_raw_data["DataCaptureConfig"]
        )

    KmsKeyId = field("KmsKeyId")
    CreationTime = field("CreationTime")

    @cached_property
    def AsyncInferenceConfig(self):  # pragma: no cover
        return AsyncInferenceConfigOutput.make_one(
            self.boto3_raw_data["AsyncInferenceConfig"]
        )

    @cached_property
    def ExplainerConfig(self):  # pragma: no cover
        return ExplainerConfigOutput.make_one(self.boto3_raw_data["ExplainerConfig"])

    @cached_property
    def ShadowProductionVariants(self):  # pragma: no cover
        return ProductionVariant.make_many(
            self.boto3_raw_data["ShadowProductionVariants"]
        )

    ExecutionRoleArn = field("ExecutionRoleArn")

    @cached_property
    def VpcConfig(self):  # pragma: no cover
        return VpcConfigOutput.make_one(self.boto3_raw_data["VpcConfig"])

    EnableNetworkIsolation = field("EnableNetworkIsolation")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeEndpointConfigOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeEndpointConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeEndpointOutput:
    boto3_raw_data: "type_defs.DescribeEndpointOutputTypeDef" = dataclasses.field()

    EndpointName = field("EndpointName")
    EndpointArn = field("EndpointArn")
    EndpointConfigName = field("EndpointConfigName")

    @cached_property
    def ProductionVariants(self):  # pragma: no cover
        return ProductionVariantSummary.make_many(
            self.boto3_raw_data["ProductionVariants"]
        )

    @cached_property
    def DataCaptureConfig(self):  # pragma: no cover
        return DataCaptureConfigSummary.make_one(
            self.boto3_raw_data["DataCaptureConfig"]
        )

    EndpointStatus = field("EndpointStatus")
    FailureReason = field("FailureReason")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def LastDeploymentConfig(self):  # pragma: no cover
        return DeploymentConfigOutput.make_one(
            self.boto3_raw_data["LastDeploymentConfig"]
        )

    @cached_property
    def AsyncInferenceConfig(self):  # pragma: no cover
        return AsyncInferenceConfigOutput.make_one(
            self.boto3_raw_data["AsyncInferenceConfig"]
        )

    @cached_property
    def PendingDeploymentSummary(self):  # pragma: no cover
        return PendingDeploymentSummary.make_one(
            self.boto3_raw_data["PendingDeploymentSummary"]
        )

    @cached_property
    def ExplainerConfig(self):  # pragma: no cover
        return ExplainerConfigOutput.make_one(self.boto3_raw_data["ExplainerConfig"])

    @cached_property
    def ShadowProductionVariants(self):  # pragma: no cover
        return ProductionVariantSummary.make_many(
            self.boto3_raw_data["ShadowProductionVariants"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeEndpointOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeEndpointOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListSpacesResponse:
    boto3_raw_data: "type_defs.ListSpacesResponseTypeDef" = dataclasses.field()

    @cached_property
    def Spaces(self):  # pragma: no cover
        return SpaceDetails.make_many(self.boto3_raw_data["Spaces"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListSpacesResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListSpacesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListInferenceRecommendationsJobStepsResponse:
    boto3_raw_data: "type_defs.ListInferenceRecommendationsJobStepsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Steps(self):  # pragma: no cover
        return InferenceRecommendationsJobStep.make_many(self.boto3_raw_data["Steps"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListInferenceRecommendationsJobStepsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListInferenceRecommendationsJobStepsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeWorkteamResponse:
    boto3_raw_data: "type_defs.DescribeWorkteamResponseTypeDef" = dataclasses.field()

    @cached_property
    def Workteam(self):  # pragma: no cover
        return Workteam.make_one(self.boto3_raw_data["Workteam"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeWorkteamResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeWorkteamResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListWorkteamsResponse:
    boto3_raw_data: "type_defs.ListWorkteamsResponseTypeDef" = dataclasses.field()

    @cached_property
    def Workteams(self):  # pragma: no cover
        return Workteam.make_many(self.boto3_raw_data["Workteams"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListWorkteamsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListWorkteamsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateWorkteamResponse:
    boto3_raw_data: "type_defs.UpdateWorkteamResponseTypeDef" = dataclasses.field()

    @cached_property
    def Workteam(self):  # pragma: no cover
        return Workteam.make_one(self.boto3_raw_data["Workteam"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateWorkteamResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateWorkteamResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateInferenceComponentInput:
    boto3_raw_data: "type_defs.UpdateInferenceComponentInputTypeDef" = (
        dataclasses.field()
    )

    InferenceComponentName = field("InferenceComponentName")

    @cached_property
    def Specification(self):  # pragma: no cover
        return InferenceComponentSpecification.make_one(
            self.boto3_raw_data["Specification"]
        )

    @cached_property
    def RuntimeConfig(self):  # pragma: no cover
        return InferenceComponentRuntimeConfig.make_one(
            self.boto3_raw_data["RuntimeConfig"]
        )

    DeploymentConfig = field("DeploymentConfig")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateInferenceComponentInputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateInferenceComponentInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListLabelingJobsResponse:
    boto3_raw_data: "type_defs.ListLabelingJobsResponseTypeDef" = dataclasses.field()

    @cached_property
    def LabelingJobSummaryList(self):  # pragma: no cover
        return LabelingJobSummary.make_many(
            self.boto3_raw_data["LabelingJobSummaryList"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListLabelingJobsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListLabelingJobsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DynamicScalingConfiguration:
    boto3_raw_data: "type_defs.DynamicScalingConfigurationTypeDef" = dataclasses.field()

    MinCapacity = field("MinCapacity")
    MaxCapacity = field("MaxCapacity")
    ScaleInCooldown = field("ScaleInCooldown")
    ScaleOutCooldown = field("ScaleOutCooldown")

    @cached_property
    def ScalingPolicies(self):  # pragma: no cover
        return ScalingPolicy.make_many(self.boto3_raw_data["ScalingPolicies"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DynamicScalingConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DynamicScalingConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTrainingJobResponse:
    boto3_raw_data: "type_defs.DescribeTrainingJobResponseTypeDef" = dataclasses.field()

    TrainingJobName = field("TrainingJobName")
    TrainingJobArn = field("TrainingJobArn")
    TuningJobArn = field("TuningJobArn")
    LabelingJobArn = field("LabelingJobArn")
    AutoMLJobArn = field("AutoMLJobArn")

    @cached_property
    def ModelArtifacts(self):  # pragma: no cover
        return ModelArtifacts.make_one(self.boto3_raw_data["ModelArtifacts"])

    TrainingJobStatus = field("TrainingJobStatus")
    SecondaryStatus = field("SecondaryStatus")
    FailureReason = field("FailureReason")
    HyperParameters = field("HyperParameters")

    @cached_property
    def AlgorithmSpecification(self):  # pragma: no cover
        return AlgorithmSpecificationOutput.make_one(
            self.boto3_raw_data["AlgorithmSpecification"]
        )

    RoleArn = field("RoleArn")

    @cached_property
    def InputDataConfig(self):  # pragma: no cover
        return ChannelOutput.make_many(self.boto3_raw_data["InputDataConfig"])

    @cached_property
    def OutputDataConfig(self):  # pragma: no cover
        return OutputDataConfig.make_one(self.boto3_raw_data["OutputDataConfig"])

    @cached_property
    def ResourceConfig(self):  # pragma: no cover
        return ResourceConfigOutput.make_one(self.boto3_raw_data["ResourceConfig"])

    @cached_property
    def WarmPoolStatus(self):  # pragma: no cover
        return WarmPoolStatus.make_one(self.boto3_raw_data["WarmPoolStatus"])

    @cached_property
    def VpcConfig(self):  # pragma: no cover
        return VpcConfigOutput.make_one(self.boto3_raw_data["VpcConfig"])

    @cached_property
    def StoppingCondition(self):  # pragma: no cover
        return StoppingCondition.make_one(self.boto3_raw_data["StoppingCondition"])

    CreationTime = field("CreationTime")
    TrainingStartTime = field("TrainingStartTime")
    TrainingEndTime = field("TrainingEndTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def SecondaryStatusTransitions(self):  # pragma: no cover
        return SecondaryStatusTransition.make_many(
            self.boto3_raw_data["SecondaryStatusTransitions"]
        )

    @cached_property
    def FinalMetricDataList(self):  # pragma: no cover
        return MetricData.make_many(self.boto3_raw_data["FinalMetricDataList"])

    EnableNetworkIsolation = field("EnableNetworkIsolation")
    EnableInterContainerTrafficEncryption = field(
        "EnableInterContainerTrafficEncryption"
    )
    EnableManagedSpotTraining = field("EnableManagedSpotTraining")

    @cached_property
    def CheckpointConfig(self):  # pragma: no cover
        return CheckpointConfig.make_one(self.boto3_raw_data["CheckpointConfig"])

    TrainingTimeInSeconds = field("TrainingTimeInSeconds")
    BillableTimeInSeconds = field("BillableTimeInSeconds")

    @cached_property
    def DebugHookConfig(self):  # pragma: no cover
        return DebugHookConfigOutput.make_one(self.boto3_raw_data["DebugHookConfig"])

    @cached_property
    def ExperimentConfig(self):  # pragma: no cover
        return ExperimentConfig.make_one(self.boto3_raw_data["ExperimentConfig"])

    @cached_property
    def DebugRuleConfigurations(self):  # pragma: no cover
        return DebugRuleConfigurationOutput.make_many(
            self.boto3_raw_data["DebugRuleConfigurations"]
        )

    @cached_property
    def TensorBoardOutputConfig(self):  # pragma: no cover
        return TensorBoardOutputConfig.make_one(
            self.boto3_raw_data["TensorBoardOutputConfig"]
        )

    @cached_property
    def DebugRuleEvaluationStatuses(self):  # pragma: no cover
        return DebugRuleEvaluationStatus.make_many(
            self.boto3_raw_data["DebugRuleEvaluationStatuses"]
        )

    @cached_property
    def ProfilerConfig(self):  # pragma: no cover
        return ProfilerConfigOutput.make_one(self.boto3_raw_data["ProfilerConfig"])

    @cached_property
    def ProfilerRuleConfigurations(self):  # pragma: no cover
        return ProfilerRuleConfigurationOutput.make_many(
            self.boto3_raw_data["ProfilerRuleConfigurations"]
        )

    @cached_property
    def ProfilerRuleEvaluationStatuses(self):  # pragma: no cover
        return ProfilerRuleEvaluationStatus.make_many(
            self.boto3_raw_data["ProfilerRuleEvaluationStatuses"]
        )

    ProfilingStatus = field("ProfilingStatus")
    Environment = field("Environment")

    @cached_property
    def RetryStrategy(self):  # pragma: no cover
        return RetryStrategy.make_one(self.boto3_raw_data["RetryStrategy"])

    @cached_property
    def RemoteDebugConfig(self):  # pragma: no cover
        return RemoteDebugConfig.make_one(self.boto3_raw_data["RemoteDebugConfig"])

    @cached_property
    def InfraCheckConfig(self):  # pragma: no cover
        return InfraCheckConfig.make_one(self.boto3_raw_data["InfraCheckConfig"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeTrainingJobResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTrainingJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HyperParameterTrainingJobDefinitionOutput:
    boto3_raw_data: "type_defs.HyperParameterTrainingJobDefinitionOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AlgorithmSpecification(self):  # pragma: no cover
        return HyperParameterAlgorithmSpecificationOutput.make_one(
            self.boto3_raw_data["AlgorithmSpecification"]
        )

    RoleArn = field("RoleArn")

    @cached_property
    def OutputDataConfig(self):  # pragma: no cover
        return OutputDataConfig.make_one(self.boto3_raw_data["OutputDataConfig"])

    @cached_property
    def StoppingCondition(self):  # pragma: no cover
        return StoppingCondition.make_one(self.boto3_raw_data["StoppingCondition"])

    DefinitionName = field("DefinitionName")

    @cached_property
    def TuningObjective(self):  # pragma: no cover
        return HyperParameterTuningJobObjective.make_one(
            self.boto3_raw_data["TuningObjective"]
        )

    @cached_property
    def HyperParameterRanges(self):  # pragma: no cover
        return ParameterRangesOutput.make_one(
            self.boto3_raw_data["HyperParameterRanges"]
        )

    StaticHyperParameters = field("StaticHyperParameters")

    @cached_property
    def InputDataConfig(self):  # pragma: no cover
        return ChannelOutput.make_many(self.boto3_raw_data["InputDataConfig"])

    @cached_property
    def VpcConfig(self):  # pragma: no cover
        return VpcConfigOutput.make_one(self.boto3_raw_data["VpcConfig"])

    @cached_property
    def ResourceConfig(self):  # pragma: no cover
        return ResourceConfigOutput.make_one(self.boto3_raw_data["ResourceConfig"])

    @cached_property
    def HyperParameterTuningResourceConfig(self):  # pragma: no cover
        return HyperParameterTuningResourceConfigOutput.make_one(
            self.boto3_raw_data["HyperParameterTuningResourceConfig"]
        )

    EnableNetworkIsolation = field("EnableNetworkIsolation")
    EnableInterContainerTrafficEncryption = field(
        "EnableInterContainerTrafficEncryption"
    )
    EnableManagedSpotTraining = field("EnableManagedSpotTraining")

    @cached_property
    def CheckpointConfig(self):  # pragma: no cover
        return CheckpointConfig.make_one(self.boto3_raw_data["CheckpointConfig"])

    @cached_property
    def RetryStrategy(self):  # pragma: no cover
        return RetryStrategy.make_one(self.boto3_raw_data["RetryStrategy"])

    Environment = field("Environment")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.HyperParameterTrainingJobDefinitionOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HyperParameterTrainingJobDefinitionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrainingJobDefinitionOutput:
    boto3_raw_data: "type_defs.TrainingJobDefinitionOutputTypeDef" = dataclasses.field()

    TrainingInputMode = field("TrainingInputMode")

    @cached_property
    def InputDataConfig(self):  # pragma: no cover
        return ChannelOutput.make_many(self.boto3_raw_data["InputDataConfig"])

    @cached_property
    def OutputDataConfig(self):  # pragma: no cover
        return OutputDataConfig.make_one(self.boto3_raw_data["OutputDataConfig"])

    @cached_property
    def ResourceConfig(self):  # pragma: no cover
        return ResourceConfigOutput.make_one(self.boto3_raw_data["ResourceConfig"])

    @cached_property
    def StoppingCondition(self):  # pragma: no cover
        return StoppingCondition.make_one(self.boto3_raw_data["StoppingCondition"])

    HyperParameters = field("HyperParameters")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrainingJobDefinitionOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrainingJobDefinitionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrainingJob:
    boto3_raw_data: "type_defs.TrainingJobTypeDef" = dataclasses.field()

    TrainingJobName = field("TrainingJobName")
    TrainingJobArn = field("TrainingJobArn")
    TuningJobArn = field("TuningJobArn")
    LabelingJobArn = field("LabelingJobArn")
    AutoMLJobArn = field("AutoMLJobArn")

    @cached_property
    def ModelArtifacts(self):  # pragma: no cover
        return ModelArtifacts.make_one(self.boto3_raw_data["ModelArtifacts"])

    TrainingJobStatus = field("TrainingJobStatus")
    SecondaryStatus = field("SecondaryStatus")
    FailureReason = field("FailureReason")
    HyperParameters = field("HyperParameters")

    @cached_property
    def AlgorithmSpecification(self):  # pragma: no cover
        return AlgorithmSpecificationOutput.make_one(
            self.boto3_raw_data["AlgorithmSpecification"]
        )

    RoleArn = field("RoleArn")

    @cached_property
    def InputDataConfig(self):  # pragma: no cover
        return ChannelOutput.make_many(self.boto3_raw_data["InputDataConfig"])

    @cached_property
    def OutputDataConfig(self):  # pragma: no cover
        return OutputDataConfig.make_one(self.boto3_raw_data["OutputDataConfig"])

    @cached_property
    def ResourceConfig(self):  # pragma: no cover
        return ResourceConfigOutput.make_one(self.boto3_raw_data["ResourceConfig"])

    @cached_property
    def VpcConfig(self):  # pragma: no cover
        return VpcConfigOutput.make_one(self.boto3_raw_data["VpcConfig"])

    @cached_property
    def StoppingCondition(self):  # pragma: no cover
        return StoppingCondition.make_one(self.boto3_raw_data["StoppingCondition"])

    CreationTime = field("CreationTime")
    TrainingStartTime = field("TrainingStartTime")
    TrainingEndTime = field("TrainingEndTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def SecondaryStatusTransitions(self):  # pragma: no cover
        return SecondaryStatusTransition.make_many(
            self.boto3_raw_data["SecondaryStatusTransitions"]
        )

    @cached_property
    def FinalMetricDataList(self):  # pragma: no cover
        return MetricData.make_many(self.boto3_raw_data["FinalMetricDataList"])

    EnableNetworkIsolation = field("EnableNetworkIsolation")
    EnableInterContainerTrafficEncryption = field(
        "EnableInterContainerTrafficEncryption"
    )
    EnableManagedSpotTraining = field("EnableManagedSpotTraining")

    @cached_property
    def CheckpointConfig(self):  # pragma: no cover
        return CheckpointConfig.make_one(self.boto3_raw_data["CheckpointConfig"])

    TrainingTimeInSeconds = field("TrainingTimeInSeconds")
    BillableTimeInSeconds = field("BillableTimeInSeconds")

    @cached_property
    def DebugHookConfig(self):  # pragma: no cover
        return DebugHookConfigOutput.make_one(self.boto3_raw_data["DebugHookConfig"])

    @cached_property
    def ExperimentConfig(self):  # pragma: no cover
        return ExperimentConfig.make_one(self.boto3_raw_data["ExperimentConfig"])

    @cached_property
    def DebugRuleConfigurations(self):  # pragma: no cover
        return DebugRuleConfigurationOutput.make_many(
            self.boto3_raw_data["DebugRuleConfigurations"]
        )

    @cached_property
    def TensorBoardOutputConfig(self):  # pragma: no cover
        return TensorBoardOutputConfig.make_one(
            self.boto3_raw_data["TensorBoardOutputConfig"]
        )

    @cached_property
    def DebugRuleEvaluationStatuses(self):  # pragma: no cover
        return DebugRuleEvaluationStatus.make_many(
            self.boto3_raw_data["DebugRuleEvaluationStatuses"]
        )

    @cached_property
    def ProfilerConfig(self):  # pragma: no cover
        return ProfilerConfigOutput.make_one(self.boto3_raw_data["ProfilerConfig"])

    Environment = field("Environment")

    @cached_property
    def RetryStrategy(self):  # pragma: no cover
        return RetryStrategy.make_one(self.boto3_raw_data["RetryStrategy"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TrainingJobTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TrainingJobTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeModelOutput:
    boto3_raw_data: "type_defs.DescribeModelOutputTypeDef" = dataclasses.field()

    ModelName = field("ModelName")

    @cached_property
    def PrimaryContainer(self):  # pragma: no cover
        return ContainerDefinitionOutput.make_one(
            self.boto3_raw_data["PrimaryContainer"]
        )

    @cached_property
    def Containers(self):  # pragma: no cover
        return ContainerDefinitionOutput.make_many(self.boto3_raw_data["Containers"])

    @cached_property
    def InferenceExecutionConfig(self):  # pragma: no cover
        return InferenceExecutionConfig.make_one(
            self.boto3_raw_data["InferenceExecutionConfig"]
        )

    ExecutionRoleArn = field("ExecutionRoleArn")

    @cached_property
    def VpcConfig(self):  # pragma: no cover
        return VpcConfigOutput.make_one(self.boto3_raw_data["VpcConfig"])

    CreationTime = field("CreationTime")
    ModelArn = field("ModelArn")
    EnableNetworkIsolation = field("EnableNetworkIsolation")

    @cached_property
    def DeploymentRecommendation(self):  # pragma: no cover
        return DeploymentRecommendation.make_one(
            self.boto3_raw_data["DeploymentRecommendation"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeModelOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeModelOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Model:
    boto3_raw_data: "type_defs.ModelTypeDef" = dataclasses.field()

    ModelName = field("ModelName")

    @cached_property
    def PrimaryContainer(self):  # pragma: no cover
        return ContainerDefinitionOutput.make_one(
            self.boto3_raw_data["PrimaryContainer"]
        )

    @cached_property
    def Containers(self):  # pragma: no cover
        return ContainerDefinitionOutput.make_many(self.boto3_raw_data["Containers"])

    @cached_property
    def InferenceExecutionConfig(self):  # pragma: no cover
        return InferenceExecutionConfig.make_one(
            self.boto3_raw_data["InferenceExecutionConfig"]
        )

    ExecutionRoleArn = field("ExecutionRoleArn")

    @cached_property
    def VpcConfig(self):  # pragma: no cover
        return VpcConfigOutput.make_one(self.boto3_raw_data["VpcConfig"])

    CreationTime = field("CreationTime")
    ModelArn = field("ModelArn")
    EnableNetworkIsolation = field("EnableNetworkIsolation")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def DeploymentRecommendation(self):  # pragma: no cover
        return DeploymentRecommendation.make_one(
            self.boto3_raw_data["DeploymentRecommendation"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ModelTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ModelTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AdditionalInferenceSpecificationDefinitionOutput:
    boto3_raw_data: (
        "type_defs.AdditionalInferenceSpecificationDefinitionOutputTypeDef"
    ) = dataclasses.field()

    Name = field("Name")

    @cached_property
    def Containers(self):  # pragma: no cover
        return ModelPackageContainerDefinitionOutput.make_many(
            self.boto3_raw_data["Containers"]
        )

    Description = field("Description")
    SupportedTransformInstanceTypes = field("SupportedTransformInstanceTypes")
    SupportedRealtimeInferenceInstanceTypes = field(
        "SupportedRealtimeInferenceInstanceTypes"
    )
    SupportedContentTypes = field("SupportedContentTypes")
    SupportedResponseMIMETypes = field("SupportedResponseMIMETypes")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AdditionalInferenceSpecificationDefinitionOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AdditionalInferenceSpecificationDefinitionOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceSpecificationOutput:
    boto3_raw_data: "type_defs.InferenceSpecificationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Containers(self):  # pragma: no cover
        return ModelPackageContainerDefinitionOutput.make_many(
            self.boto3_raw_data["Containers"]
        )

    SupportedTransformInstanceTypes = field("SupportedTransformInstanceTypes")
    SupportedRealtimeInferenceInstanceTypes = field(
        "SupportedRealtimeInferenceInstanceTypes"
    )
    SupportedContentTypes = field("SupportedContentTypes")
    SupportedResponseMIMETypes = field("SupportedResponseMIMETypes")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InferenceSpecificationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceSpecificationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InferenceSpecification:
    boto3_raw_data: "type_defs.InferenceSpecificationTypeDef" = dataclasses.field()

    @cached_property
    def Containers(self):  # pragma: no cover
        return ModelPackageContainerDefinition.make_many(
            self.boto3_raw_data["Containers"]
        )

    SupportedTransformInstanceTypes = field("SupportedTransformInstanceTypes")
    SupportedRealtimeInferenceInstanceTypes = field(
        "SupportedRealtimeInferenceInstanceTypes"
    )
    SupportedContentTypes = field("SupportedContentTypes")
    SupportedResponseMIMETypes = field("SupportedResponseMIMETypes")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InferenceSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InferenceSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SourceAlgorithmSpecificationOutput:
    boto3_raw_data: "type_defs.SourceAlgorithmSpecificationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SourceAlgorithms(self):  # pragma: no cover
        return SourceAlgorithm.make_many(self.boto3_raw_data["SourceAlgorithms"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SourceAlgorithmSpecificationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SourceAlgorithmSpecificationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SourceAlgorithmSpecification:
    boto3_raw_data: "type_defs.SourceAlgorithmSpecificationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SourceAlgorithms(self):  # pragma: no cover
        return SourceAlgorithm.make_many(self.boto3_raw_data["SourceAlgorithms"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SourceAlgorithmSpecificationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SourceAlgorithmSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateOptimizationJobRequest:
    boto3_raw_data: "type_defs.CreateOptimizationJobRequestTypeDef" = (
        dataclasses.field()
    )

    OptimizationJobName = field("OptimizationJobName")
    RoleArn = field("RoleArn")

    @cached_property
    def ModelSource(self):  # pragma: no cover
        return OptimizationJobModelSource.make_one(self.boto3_raw_data["ModelSource"])

    DeploymentInstanceType = field("DeploymentInstanceType")
    OptimizationConfigs = field("OptimizationConfigs")

    @cached_property
    def OutputConfig(self):  # pragma: no cover
        return OptimizationJobOutputConfig.make_one(self.boto3_raw_data["OutputConfig"])

    @cached_property
    def StoppingCondition(self):  # pragma: no cover
        return StoppingCondition.make_one(self.boto3_raw_data["StoppingCondition"])

    OptimizationEnvironment = field("OptimizationEnvironment")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    VpcConfig = field("VpcConfig")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateOptimizationJobRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateOptimizationJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDataQualityJobDefinitionResponse:
    boto3_raw_data: "type_defs.DescribeDataQualityJobDefinitionResponseTypeDef" = (
        dataclasses.field()
    )

    JobDefinitionArn = field("JobDefinitionArn")
    JobDefinitionName = field("JobDefinitionName")
    CreationTime = field("CreationTime")

    @cached_property
    def DataQualityBaselineConfig(self):  # pragma: no cover
        return DataQualityBaselineConfig.make_one(
            self.boto3_raw_data["DataQualityBaselineConfig"]
        )

    @cached_property
    def DataQualityAppSpecification(self):  # pragma: no cover
        return DataQualityAppSpecificationOutput.make_one(
            self.boto3_raw_data["DataQualityAppSpecification"]
        )

    @cached_property
    def DataQualityJobInput(self):  # pragma: no cover
        return DataQualityJobInputOutput.make_one(
            self.boto3_raw_data["DataQualityJobInput"]
        )

    @cached_property
    def DataQualityJobOutputConfig(self):  # pragma: no cover
        return MonitoringOutputConfigOutput.make_one(
            self.boto3_raw_data["DataQualityJobOutputConfig"]
        )

    @cached_property
    def JobResources(self):  # pragma: no cover
        return MonitoringResources.make_one(self.boto3_raw_data["JobResources"])

    @cached_property
    def NetworkConfig(self):  # pragma: no cover
        return MonitoringNetworkConfigOutput.make_one(
            self.boto3_raw_data["NetworkConfig"]
        )

    RoleArn = field("RoleArn")

    @cached_property
    def StoppingCondition(self):  # pragma: no cover
        return MonitoringStoppingCondition.make_one(
            self.boto3_raw_data["StoppingCondition"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeDataQualityJobDefinitionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDataQualityJobDefinitionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeModelBiasJobDefinitionResponse:
    boto3_raw_data: "type_defs.DescribeModelBiasJobDefinitionResponseTypeDef" = (
        dataclasses.field()
    )

    JobDefinitionArn = field("JobDefinitionArn")
    JobDefinitionName = field("JobDefinitionName")
    CreationTime = field("CreationTime")

    @cached_property
    def ModelBiasBaselineConfig(self):  # pragma: no cover
        return ModelBiasBaselineConfig.make_one(
            self.boto3_raw_data["ModelBiasBaselineConfig"]
        )

    @cached_property
    def ModelBiasAppSpecification(self):  # pragma: no cover
        return ModelBiasAppSpecificationOutput.make_one(
            self.boto3_raw_data["ModelBiasAppSpecification"]
        )

    @cached_property
    def ModelBiasJobInput(self):  # pragma: no cover
        return ModelBiasJobInputOutput.make_one(
            self.boto3_raw_data["ModelBiasJobInput"]
        )

    @cached_property
    def ModelBiasJobOutputConfig(self):  # pragma: no cover
        return MonitoringOutputConfigOutput.make_one(
            self.boto3_raw_data["ModelBiasJobOutputConfig"]
        )

    @cached_property
    def JobResources(self):  # pragma: no cover
        return MonitoringResources.make_one(self.boto3_raw_data["JobResources"])

    @cached_property
    def NetworkConfig(self):  # pragma: no cover
        return MonitoringNetworkConfigOutput.make_one(
            self.boto3_raw_data["NetworkConfig"]
        )

    RoleArn = field("RoleArn")

    @cached_property
    def StoppingCondition(self):  # pragma: no cover
        return MonitoringStoppingCondition.make_one(
            self.boto3_raw_data["StoppingCondition"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeModelBiasJobDefinitionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeModelBiasJobDefinitionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeModelExplainabilityJobDefinitionResponse:
    boto3_raw_data: (
        "type_defs.DescribeModelExplainabilityJobDefinitionResponseTypeDef"
    ) = dataclasses.field()

    JobDefinitionArn = field("JobDefinitionArn")
    JobDefinitionName = field("JobDefinitionName")
    CreationTime = field("CreationTime")

    @cached_property
    def ModelExplainabilityBaselineConfig(self):  # pragma: no cover
        return ModelExplainabilityBaselineConfig.make_one(
            self.boto3_raw_data["ModelExplainabilityBaselineConfig"]
        )

    @cached_property
    def ModelExplainabilityAppSpecification(self):  # pragma: no cover
        return ModelExplainabilityAppSpecificationOutput.make_one(
            self.boto3_raw_data["ModelExplainabilityAppSpecification"]
        )

    @cached_property
    def ModelExplainabilityJobInput(self):  # pragma: no cover
        return ModelExplainabilityJobInputOutput.make_one(
            self.boto3_raw_data["ModelExplainabilityJobInput"]
        )

    @cached_property
    def ModelExplainabilityJobOutputConfig(self):  # pragma: no cover
        return MonitoringOutputConfigOutput.make_one(
            self.boto3_raw_data["ModelExplainabilityJobOutputConfig"]
        )

    @cached_property
    def JobResources(self):  # pragma: no cover
        return MonitoringResources.make_one(self.boto3_raw_data["JobResources"])

    @cached_property
    def NetworkConfig(self):  # pragma: no cover
        return MonitoringNetworkConfigOutput.make_one(
            self.boto3_raw_data["NetworkConfig"]
        )

    RoleArn = field("RoleArn")

    @cached_property
    def StoppingCondition(self):  # pragma: no cover
        return MonitoringStoppingCondition.make_one(
            self.boto3_raw_data["StoppingCondition"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeModelExplainabilityJobDefinitionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeModelExplainabilityJobDefinitionResponseTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeModelQualityJobDefinitionResponse:
    boto3_raw_data: "type_defs.DescribeModelQualityJobDefinitionResponseTypeDef" = (
        dataclasses.field()
    )

    JobDefinitionArn = field("JobDefinitionArn")
    JobDefinitionName = field("JobDefinitionName")
    CreationTime = field("CreationTime")

    @cached_property
    def ModelQualityBaselineConfig(self):  # pragma: no cover
        return ModelQualityBaselineConfig.make_one(
            self.boto3_raw_data["ModelQualityBaselineConfig"]
        )

    @cached_property
    def ModelQualityAppSpecification(self):  # pragma: no cover
        return ModelQualityAppSpecificationOutput.make_one(
            self.boto3_raw_data["ModelQualityAppSpecification"]
        )

    @cached_property
    def ModelQualityJobInput(self):  # pragma: no cover
        return ModelQualityJobInputOutput.make_one(
            self.boto3_raw_data["ModelQualityJobInput"]
        )

    @cached_property
    def ModelQualityJobOutputConfig(self):  # pragma: no cover
        return MonitoringOutputConfigOutput.make_one(
            self.boto3_raw_data["ModelQualityJobOutputConfig"]
        )

    @cached_property
    def JobResources(self):  # pragma: no cover
        return MonitoringResources.make_one(self.boto3_raw_data["JobResources"])

    @cached_property
    def NetworkConfig(self):  # pragma: no cover
        return MonitoringNetworkConfigOutput.make_one(
            self.boto3_raw_data["NetworkConfig"]
        )

    RoleArn = field("RoleArn")

    @cached_property
    def StoppingCondition(self):  # pragma: no cover
        return MonitoringStoppingCondition.make_one(
            self.boto3_raw_data["StoppingCondition"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeModelQualityJobDefinitionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeModelQualityJobDefinitionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringJobDefinitionOutput:
    boto3_raw_data: "type_defs.MonitoringJobDefinitionOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def MonitoringInputs(self):  # pragma: no cover
        return MonitoringInputOutput.make_many(self.boto3_raw_data["MonitoringInputs"])

    @cached_property
    def MonitoringOutputConfig(self):  # pragma: no cover
        return MonitoringOutputConfigOutput.make_one(
            self.boto3_raw_data["MonitoringOutputConfig"]
        )

    @cached_property
    def MonitoringResources(self):  # pragma: no cover
        return MonitoringResources.make_one(self.boto3_raw_data["MonitoringResources"])

    @cached_property
    def MonitoringAppSpecification(self):  # pragma: no cover
        return MonitoringAppSpecificationOutput.make_one(
            self.boto3_raw_data["MonitoringAppSpecification"]
        )

    RoleArn = field("RoleArn")

    @cached_property
    def BaselineConfig(self):  # pragma: no cover
        return MonitoringBaselineConfig.make_one(self.boto3_raw_data["BaselineConfig"])

    @cached_property
    def StoppingCondition(self):  # pragma: no cover
        return MonitoringStoppingCondition.make_one(
            self.boto3_raw_data["StoppingCondition"]
        )

    Environment = field("Environment")

    @cached_property
    def NetworkConfig(self):  # pragma: no cover
        return NetworkConfigOutput.make_one(self.boto3_raw_data["NetworkConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.MonitoringJobDefinitionOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringJobDefinitionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringJobDefinition:
    boto3_raw_data: "type_defs.MonitoringJobDefinitionTypeDef" = dataclasses.field()

    @cached_property
    def MonitoringInputs(self):  # pragma: no cover
        return MonitoringInput.make_many(self.boto3_raw_data["MonitoringInputs"])

    @cached_property
    def MonitoringOutputConfig(self):  # pragma: no cover
        return MonitoringOutputConfig.make_one(
            self.boto3_raw_data["MonitoringOutputConfig"]
        )

    @cached_property
    def MonitoringResources(self):  # pragma: no cover
        return MonitoringResources.make_one(self.boto3_raw_data["MonitoringResources"])

    @cached_property
    def MonitoringAppSpecification(self):  # pragma: no cover
        return MonitoringAppSpecification.make_one(
            self.boto3_raw_data["MonitoringAppSpecification"]
        )

    RoleArn = field("RoleArn")

    @cached_property
    def BaselineConfig(self):  # pragma: no cover
        return MonitoringBaselineConfig.make_one(self.boto3_raw_data["BaselineConfig"])

    @cached_property
    def StoppingCondition(self):  # pragma: no cover
        return MonitoringStoppingCondition.make_one(
            self.boto3_raw_data["StoppingCondition"]
        )

    Environment = field("Environment")

    @cached_property
    def NetworkConfig(self):  # pragma: no cover
        return NetworkConfig.make_one(self.boto3_raw_data["NetworkConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MonitoringJobDefinitionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringJobDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateWorkteamRequest:
    boto3_raw_data: "type_defs.CreateWorkteamRequestTypeDef" = dataclasses.field()

    WorkteamName = field("WorkteamName")
    MemberDefinitions = field("MemberDefinitions")
    Description = field("Description")
    WorkforceName = field("WorkforceName")

    @cached_property
    def NotificationConfiguration(self):  # pragma: no cover
        return NotificationConfiguration.make_one(
            self.boto3_raw_data["NotificationConfiguration"]
        )

    @cached_property
    def WorkerAccessConfiguration(self):  # pragma: no cover
        return WorkerAccessConfiguration.make_one(
            self.boto3_raw_data["WorkerAccessConfiguration"]
        )

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateWorkteamRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateWorkteamRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateWorkteamRequest:
    boto3_raw_data: "type_defs.UpdateWorkteamRequestTypeDef" = dataclasses.field()

    WorkteamName = field("WorkteamName")
    MemberDefinitions = field("MemberDefinitions")
    Description = field("Description")

    @cached_property
    def NotificationConfiguration(self):  # pragma: no cover
        return NotificationConfiguration.make_one(
            self.boto3_raw_data["NotificationConfiguration"]
        )

    @cached_property
    def WorkerAccessConfiguration(self):  # pragma: no cover
        return WorkerAccessConfiguration.make_one(
            self.boto3_raw_data["WorkerAccessConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateWorkteamRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateWorkteamRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateProcessingJobRequest:
    boto3_raw_data: "type_defs.CreateProcessingJobRequestTypeDef" = dataclasses.field()

    ProcessingJobName = field("ProcessingJobName")

    @cached_property
    def ProcessingResources(self):  # pragma: no cover
        return ProcessingResources.make_one(self.boto3_raw_data["ProcessingResources"])

    AppSpecification = field("AppSpecification")
    RoleArn = field("RoleArn")

    @cached_property
    def ProcessingInputs(self):  # pragma: no cover
        return ProcessingInput.make_many(self.boto3_raw_data["ProcessingInputs"])

    ProcessingOutputConfig = field("ProcessingOutputConfig")

    @cached_property
    def StoppingCondition(self):  # pragma: no cover
        return ProcessingStoppingCondition.make_one(
            self.boto3_raw_data["StoppingCondition"]
        )

    Environment = field("Environment")
    NetworkConfig = field("NetworkConfig")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def ExperimentConfig(self):  # pragma: no cover
        return ExperimentConfig.make_one(self.boto3_raw_data["ExperimentConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateProcessingJobRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateProcessingJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateFlowDefinitionRequest:
    boto3_raw_data: "type_defs.CreateFlowDefinitionRequestTypeDef" = dataclasses.field()

    FlowDefinitionName = field("FlowDefinitionName")

    @cached_property
    def OutputConfig(self):  # pragma: no cover
        return FlowDefinitionOutputConfig.make_one(self.boto3_raw_data["OutputConfig"])

    RoleArn = field("RoleArn")

    @cached_property
    def HumanLoopRequestSource(self):  # pragma: no cover
        return HumanLoopRequestSource.make_one(
            self.boto3_raw_data["HumanLoopRequestSource"]
        )

    @cached_property
    def HumanLoopActivationConfig(self):  # pragma: no cover
        return HumanLoopActivationConfig.make_one(
            self.boto3_raw_data["HumanLoopActivationConfig"]
        )

    HumanLoopConfig = field("HumanLoopConfig")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateFlowDefinitionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateFlowDefinitionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateLabelingJobRequest:
    boto3_raw_data: "type_defs.CreateLabelingJobRequestTypeDef" = dataclasses.field()

    LabelingJobName = field("LabelingJobName")
    LabelAttributeName = field("LabelAttributeName")
    InputConfig = field("InputConfig")

    @cached_property
    def OutputConfig(self):  # pragma: no cover
        return LabelingJobOutputConfig.make_one(self.boto3_raw_data["OutputConfig"])

    RoleArn = field("RoleArn")
    HumanTaskConfig = field("HumanTaskConfig")
    LabelCategoryConfigS3Uri = field("LabelCategoryConfigS3Uri")

    @cached_property
    def StoppingConditions(self):  # pragma: no cover
        return LabelingJobStoppingConditions.make_one(
            self.boto3_raw_data["StoppingConditions"]
        )

    LabelingJobAlgorithmsConfig = field("LabelingJobAlgorithmsConfig")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateLabelingJobRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateLabelingJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSpaceResponse:
    boto3_raw_data: "type_defs.DescribeSpaceResponseTypeDef" = dataclasses.field()

    DomainId = field("DomainId")
    SpaceArn = field("SpaceArn")
    SpaceName = field("SpaceName")
    HomeEfsFileSystemUid = field("HomeEfsFileSystemUid")
    Status = field("Status")
    LastModifiedTime = field("LastModifiedTime")
    CreationTime = field("CreationTime")
    FailureReason = field("FailureReason")

    @cached_property
    def SpaceSettings(self):  # pragma: no cover
        return SpaceSettingsOutput.make_one(self.boto3_raw_data["SpaceSettings"])

    @cached_property
    def OwnershipSettings(self):  # pragma: no cover
        return OwnershipSettings.make_one(self.boto3_raw_data["OwnershipSettings"])

    @cached_property
    def SpaceSharingSettings(self):  # pragma: no cover
        return SpaceSharingSettings.make_one(
            self.boto3_raw_data["SpaceSharingSettings"]
        )

    SpaceDisplayName = field("SpaceDisplayName")
    Url = field("Url")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeSpaceResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSpaceResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelPackageValidationProfileOutput:
    boto3_raw_data: "type_defs.ModelPackageValidationProfileOutputTypeDef" = (
        dataclasses.field()
    )

    ProfileName = field("ProfileName")

    @cached_property
    def TransformJobDefinition(self):  # pragma: no cover
        return TransformJobDefinitionOutput.make_one(
            self.boto3_raw_data["TransformJobDefinition"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModelPackageValidationProfileOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelPackageValidationProfileOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelPackageValidationProfile:
    boto3_raw_data: "type_defs.ModelPackageValidationProfileTypeDef" = (
        dataclasses.field()
    )

    ProfileName = field("ProfileName")

    @cached_property
    def TransformJobDefinition(self):  # pragma: no cover
        return TransformJobDefinition.make_one(
            self.boto3_raw_data["TransformJobDefinition"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModelPackageValidationProfileTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelPackageValidationProfileTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateDomainRequest:
    boto3_raw_data: "type_defs.CreateDomainRequestTypeDef" = dataclasses.field()

    DomainName = field("DomainName")
    AuthMode = field("AuthMode")
    DefaultUserSettings = field("DefaultUserSettings")
    DomainSettings = field("DomainSettings")
    SubnetIds = field("SubnetIds")
    VpcId = field("VpcId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    AppNetworkAccessType = field("AppNetworkAccessType")
    HomeEfsFileSystemKmsKeyId = field("HomeEfsFileSystemKmsKeyId")
    KmsKeyId = field("KmsKeyId")
    AppSecurityGroupManagement = field("AppSecurityGroupManagement")
    TagPropagation = field("TagPropagation")
    DefaultSpaceSettings = field("DefaultSpaceSettings")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateDomainRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateDomainRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateUserProfileRequest:
    boto3_raw_data: "type_defs.CreateUserProfileRequestTypeDef" = dataclasses.field()

    DomainId = field("DomainId")
    UserProfileName = field("UserProfileName")
    SingleSignOnUserIdentifier = field("SingleSignOnUserIdentifier")
    SingleSignOnUserValue = field("SingleSignOnUserValue")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    UserSettings = field("UserSettings")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateUserProfileRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateUserProfileRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateDomainRequest:
    boto3_raw_data: "type_defs.UpdateDomainRequestTypeDef" = dataclasses.field()

    DomainId = field("DomainId")
    DefaultUserSettings = field("DefaultUserSettings")

    @cached_property
    def DomainSettingsForUpdate(self):  # pragma: no cover
        return DomainSettingsForUpdate.make_one(
            self.boto3_raw_data["DomainSettingsForUpdate"]
        )

    AppSecurityGroupManagement = field("AppSecurityGroupManagement")
    DefaultSpaceSettings = field("DefaultSpaceSettings")
    SubnetIds = field("SubnetIds")
    AppNetworkAccessType = field("AppNetworkAccessType")
    TagPropagation = field("TagPropagation")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateDomainRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateDomainRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateUserProfileRequest:
    boto3_raw_data: "type_defs.UpdateUserProfileRequestTypeDef" = dataclasses.field()

    DomainId = field("DomainId")
    UserProfileName = field("UserProfileName")
    UserSettings = field("UserSettings")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateUserProfileRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateUserProfileRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateAutoMLJobV2Request:
    boto3_raw_data: "type_defs.CreateAutoMLJobV2RequestTypeDef" = dataclasses.field()

    AutoMLJobName = field("AutoMLJobName")

    @cached_property
    def AutoMLJobInputDataConfig(self):  # pragma: no cover
        return AutoMLJobChannel.make_many(
            self.boto3_raw_data["AutoMLJobInputDataConfig"]
        )

    @cached_property
    def OutputDataConfig(self):  # pragma: no cover
        return AutoMLOutputDataConfig.make_one(self.boto3_raw_data["OutputDataConfig"])

    AutoMLProblemTypeConfig = field("AutoMLProblemTypeConfig")
    RoleArn = field("RoleArn")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    SecurityConfig = field("SecurityConfig")

    @cached_property
    def AutoMLJobObjective(self):  # pragma: no cover
        return AutoMLJobObjective.make_one(self.boto3_raw_data["AutoMLJobObjective"])

    @cached_property
    def ModelDeployConfig(self):  # pragma: no cover
        return ModelDeployConfig.make_one(self.boto3_raw_data["ModelDeployConfig"])

    @cached_property
    def DataSplitConfig(self):  # pragma: no cover
        return AutoMLDataSplitConfig.make_one(self.boto3_raw_data["DataSplitConfig"])

    @cached_property
    def AutoMLComputeConfig(self):  # pragma: no cover
        return AutoMLComputeConfig.make_one(self.boto3_raw_data["AutoMLComputeConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateAutoMLJobV2RequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateAutoMLJobV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClusterEventResponse:
    boto3_raw_data: "type_defs.DescribeClusterEventResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def EventDetails(self):  # pragma: no cover
        return ClusterEventDetail.make_one(self.boto3_raw_data["EventDetails"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeClusterEventResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeClusterEventResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeClusterResponse:
    boto3_raw_data: "type_defs.DescribeClusterResponseTypeDef" = dataclasses.field()

    ClusterArn = field("ClusterArn")
    ClusterName = field("ClusterName")
    ClusterStatus = field("ClusterStatus")
    CreationTime = field("CreationTime")
    FailureMessage = field("FailureMessage")

    @cached_property
    def InstanceGroups(self):  # pragma: no cover
        return ClusterInstanceGroupDetails.make_many(
            self.boto3_raw_data["InstanceGroups"]
        )

    @cached_property
    def RestrictedInstanceGroups(self):  # pragma: no cover
        return ClusterRestrictedInstanceGroupDetails.make_many(
            self.boto3_raw_data["RestrictedInstanceGroups"]
        )

    @cached_property
    def VpcConfig(self):  # pragma: no cover
        return VpcConfigOutput.make_one(self.boto3_raw_data["VpcConfig"])

    @cached_property
    def Orchestrator(self):  # pragma: no cover
        return ClusterOrchestrator.make_one(self.boto3_raw_data["Orchestrator"])

    @cached_property
    def TieredStorageConfig(self):  # pragma: no cover
        return ClusterTieredStorageConfig.make_one(
            self.boto3_raw_data["TieredStorageConfig"]
        )

    NodeRecovery = field("NodeRecovery")
    NodeProvisioningMode = field("NodeProvisioningMode")
    ClusterRole = field("ClusterRole")

    @cached_property
    def AutoScaling(self):  # pragma: no cover
        return ClusterAutoScalingConfigOutput.make_one(
            self.boto3_raw_data["AutoScaling"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeClusterResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeClusterResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateEndpointInput:
    boto3_raw_data: "type_defs.CreateEndpointInputTypeDef" = dataclasses.field()

    EndpointName = field("EndpointName")
    EndpointConfigName = field("EndpointConfigName")
    DeploymentConfig = field("DeploymentConfig")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateEndpointInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateEndpointInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateEndpointInput:
    boto3_raw_data: "type_defs.UpdateEndpointInputTypeDef" = dataclasses.field()

    EndpointName = field("EndpointName")
    EndpointConfigName = field("EndpointConfigName")
    RetainAllVariantProperties = field("RetainAllVariantProperties")

    @cached_property
    def ExcludeRetainedVariantProperties(self):  # pragma: no cover
        return VariantProperty.make_many(
            self.boto3_raw_data["ExcludeRetainedVariantProperties"]
        )

    DeploymentConfig = field("DeploymentConfig")
    RetainDeploymentConfig = field("RetainDeploymentConfig")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateEndpointInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateEndpointInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateInferenceRecommendationsJobRequest:
    boto3_raw_data: "type_defs.CreateInferenceRecommendationsJobRequestTypeDef" = (
        dataclasses.field()
    )

    JobName = field("JobName")
    JobType = field("JobType")
    RoleArn = field("RoleArn")
    InputConfig = field("InputConfig")
    JobDescription = field("JobDescription")
    StoppingConditions = field("StoppingConditions")

    @cached_property
    def OutputConfig(self):  # pragma: no cover
        return RecommendationJobOutputConfig.make_one(
            self.boto3_raw_data["OutputConfig"]
        )

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateInferenceRecommendationsJobRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateInferenceRecommendationsJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateEndpointConfigInput:
    boto3_raw_data: "type_defs.CreateEndpointConfigInputTypeDef" = dataclasses.field()

    EndpointConfigName = field("EndpointConfigName")

    @cached_property
    def ProductionVariants(self):  # pragma: no cover
        return ProductionVariant.make_many(self.boto3_raw_data["ProductionVariants"])

    DataCaptureConfig = field("DataCaptureConfig")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    KmsKeyId = field("KmsKeyId")
    AsyncInferenceConfig = field("AsyncInferenceConfig")
    ExplainerConfig = field("ExplainerConfig")

    @cached_property
    def ShadowProductionVariants(self):  # pragma: no cover
        return ProductionVariant.make_many(
            self.boto3_raw_data["ShadowProductionVariants"]
        )

    ExecutionRoleArn = field("ExecutionRoleArn")
    VpcConfig = field("VpcConfig")
    EnableNetworkIsolation = field("EnableNetworkIsolation")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateEndpointConfigInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateEndpointConfigInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetScalingConfigurationRecommendationResponse:
    boto3_raw_data: "type_defs.GetScalingConfigurationRecommendationResponseTypeDef" = (
        dataclasses.field()
    )

    InferenceRecommendationsJobName = field("InferenceRecommendationsJobName")
    RecommendationId = field("RecommendationId")
    EndpointName = field("EndpointName")
    TargetCpuUtilizationPerCore = field("TargetCpuUtilizationPerCore")

    @cached_property
    def ScalingPolicyObjective(self):  # pragma: no cover
        return ScalingPolicyObjective.make_one(
            self.boto3_raw_data["ScalingPolicyObjective"]
        )

    @cached_property
    def Metric(self):  # pragma: no cover
        return ScalingPolicyMetric.make_one(self.boto3_raw_data["Metric"])

    @cached_property
    def DynamicScalingConfiguration(self):  # pragma: no cover
        return DynamicScalingConfiguration.make_one(
            self.boto3_raw_data["DynamicScalingConfiguration"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetScalingConfigurationRecommendationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetScalingConfigurationRecommendationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeHyperParameterTuningJobResponse:
    boto3_raw_data: "type_defs.DescribeHyperParameterTuningJobResponseTypeDef" = (
        dataclasses.field()
    )

    HyperParameterTuningJobName = field("HyperParameterTuningJobName")
    HyperParameterTuningJobArn = field("HyperParameterTuningJobArn")

    @cached_property
    def HyperParameterTuningJobConfig(self):  # pragma: no cover
        return HyperParameterTuningJobConfigOutput.make_one(
            self.boto3_raw_data["HyperParameterTuningJobConfig"]
        )

    @cached_property
    def TrainingJobDefinition(self):  # pragma: no cover
        return HyperParameterTrainingJobDefinitionOutput.make_one(
            self.boto3_raw_data["TrainingJobDefinition"]
        )

    @cached_property
    def TrainingJobDefinitions(self):  # pragma: no cover
        return HyperParameterTrainingJobDefinitionOutput.make_many(
            self.boto3_raw_data["TrainingJobDefinitions"]
        )

    HyperParameterTuningJobStatus = field("HyperParameterTuningJobStatus")
    CreationTime = field("CreationTime")
    HyperParameterTuningEndTime = field("HyperParameterTuningEndTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def TrainingJobStatusCounters(self):  # pragma: no cover
        return TrainingJobStatusCounters.make_one(
            self.boto3_raw_data["TrainingJobStatusCounters"]
        )

    @cached_property
    def ObjectiveStatusCounters(self):  # pragma: no cover
        return ObjectiveStatusCounters.make_one(
            self.boto3_raw_data["ObjectiveStatusCounters"]
        )

    @cached_property
    def BestTrainingJob(self):  # pragma: no cover
        return HyperParameterTrainingJobSummary.make_one(
            self.boto3_raw_data["BestTrainingJob"]
        )

    @cached_property
    def OverallBestTrainingJob(self):  # pragma: no cover
        return HyperParameterTrainingJobSummary.make_one(
            self.boto3_raw_data["OverallBestTrainingJob"]
        )

    @cached_property
    def WarmStartConfig(self):  # pragma: no cover
        return HyperParameterTuningJobWarmStartConfigOutput.make_one(
            self.boto3_raw_data["WarmStartConfig"]
        )

    @cached_property
    def Autotune(self):  # pragma: no cover
        return Autotune.make_one(self.boto3_raw_data["Autotune"])

    FailureReason = field("FailureReason")

    @cached_property
    def TuningJobCompletionDetails(self):  # pragma: no cover
        return HyperParameterTuningJobCompletionDetails.make_one(
            self.boto3_raw_data["TuningJobCompletionDetails"]
        )

    @cached_property
    def ConsumedResources(self):  # pragma: no cover
        return HyperParameterTuningJobConsumedResources.make_one(
            self.boto3_raw_data["ConsumedResources"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeHyperParameterTuningJobResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeHyperParameterTuningJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HyperParameterTuningJobSearchEntity:
    boto3_raw_data: "type_defs.HyperParameterTuningJobSearchEntityTypeDef" = (
        dataclasses.field()
    )

    HyperParameterTuningJobName = field("HyperParameterTuningJobName")
    HyperParameterTuningJobArn = field("HyperParameterTuningJobArn")

    @cached_property
    def HyperParameterTuningJobConfig(self):  # pragma: no cover
        return HyperParameterTuningJobConfigOutput.make_one(
            self.boto3_raw_data["HyperParameterTuningJobConfig"]
        )

    @cached_property
    def TrainingJobDefinition(self):  # pragma: no cover
        return HyperParameterTrainingJobDefinitionOutput.make_one(
            self.boto3_raw_data["TrainingJobDefinition"]
        )

    @cached_property
    def TrainingJobDefinitions(self):  # pragma: no cover
        return HyperParameterTrainingJobDefinitionOutput.make_many(
            self.boto3_raw_data["TrainingJobDefinitions"]
        )

    HyperParameterTuningJobStatus = field("HyperParameterTuningJobStatus")
    CreationTime = field("CreationTime")
    HyperParameterTuningEndTime = field("HyperParameterTuningEndTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def TrainingJobStatusCounters(self):  # pragma: no cover
        return TrainingJobStatusCounters.make_one(
            self.boto3_raw_data["TrainingJobStatusCounters"]
        )

    @cached_property
    def ObjectiveStatusCounters(self):  # pragma: no cover
        return ObjectiveStatusCounters.make_one(
            self.boto3_raw_data["ObjectiveStatusCounters"]
        )

    @cached_property
    def BestTrainingJob(self):  # pragma: no cover
        return HyperParameterTrainingJobSummary.make_one(
            self.boto3_raw_data["BestTrainingJob"]
        )

    @cached_property
    def OverallBestTrainingJob(self):  # pragma: no cover
        return HyperParameterTrainingJobSummary.make_one(
            self.boto3_raw_data["OverallBestTrainingJob"]
        )

    @cached_property
    def WarmStartConfig(self):  # pragma: no cover
        return HyperParameterTuningJobWarmStartConfigOutput.make_one(
            self.boto3_raw_data["WarmStartConfig"]
        )

    FailureReason = field("FailureReason")

    @cached_property
    def TuningJobCompletionDetails(self):  # pragma: no cover
        return HyperParameterTuningJobCompletionDetails.make_one(
            self.boto3_raw_data["TuningJobCompletionDetails"]
        )

    @cached_property
    def ConsumedResources(self):  # pragma: no cover
        return HyperParameterTuningJobConsumedResources.make_one(
            self.boto3_raw_data["ConsumedResources"]
        )

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.HyperParameterTuningJobSearchEntityTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HyperParameterTuningJobSearchEntityTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AlgorithmValidationProfileOutput:
    boto3_raw_data: "type_defs.AlgorithmValidationProfileOutputTypeDef" = (
        dataclasses.field()
    )

    ProfileName = field("ProfileName")

    @cached_property
    def TrainingJobDefinition(self):  # pragma: no cover
        return TrainingJobDefinitionOutput.make_one(
            self.boto3_raw_data["TrainingJobDefinition"]
        )

    @cached_property
    def TransformJobDefinition(self):  # pragma: no cover
        return TransformJobDefinitionOutput.make_one(
            self.boto3_raw_data["TransformJobDefinition"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AlgorithmValidationProfileOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AlgorithmValidationProfileOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrialComponentSourceDetail:
    boto3_raw_data: "type_defs.TrialComponentSourceDetailTypeDef" = dataclasses.field()

    SourceArn = field("SourceArn")

    @cached_property
    def TrainingJob(self):  # pragma: no cover
        return TrainingJob.make_one(self.boto3_raw_data["TrainingJob"])

    @cached_property
    def ProcessingJob(self):  # pragma: no cover
        return ProcessingJob.make_one(self.boto3_raw_data["ProcessingJob"])

    @cached_property
    def TransformJob(self):  # pragma: no cover
        return TransformJob.make_one(self.boto3_raw_data["TransformJob"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrialComponentSourceDetailTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrialComponentSourceDetailTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Channel:
    boto3_raw_data: "type_defs.ChannelTypeDef" = dataclasses.field()

    ChannelName = field("ChannelName")
    DataSource = field("DataSource")
    ContentType = field("ContentType")
    CompressionType = field("CompressionType")
    RecordWrapperType = field("RecordWrapperType")
    InputMode = field("InputMode")

    @cached_property
    def ShuffleConfig(self):  # pragma: no cover
        return ShuffleConfig.make_one(self.boto3_raw_data["ShuffleConfig"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ChannelTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ChannelTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateModelInput:
    boto3_raw_data: "type_defs.CreateModelInputTypeDef" = dataclasses.field()

    ModelName = field("ModelName")
    PrimaryContainer = field("PrimaryContainer")
    Containers = field("Containers")

    @cached_property
    def InferenceExecutionConfig(self):  # pragma: no cover
        return InferenceExecutionConfig.make_one(
            self.boto3_raw_data["InferenceExecutionConfig"]
        )

    ExecutionRoleArn = field("ExecutionRoleArn")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    VpcConfig = field("VpcConfig")
    EnableNetworkIsolation = field("EnableNetworkIsolation")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CreateModelInputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateModelInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchDescribeModelPackageSummary:
    boto3_raw_data: "type_defs.BatchDescribeModelPackageSummaryTypeDef" = (
        dataclasses.field()
    )

    ModelPackageGroupName = field("ModelPackageGroupName")
    ModelPackageArn = field("ModelPackageArn")
    CreationTime = field("CreationTime")

    @cached_property
    def InferenceSpecification(self):  # pragma: no cover
        return InferenceSpecificationOutput.make_one(
            self.boto3_raw_data["InferenceSpecification"]
        )

    ModelPackageStatus = field("ModelPackageStatus")
    ModelPackageVersion = field("ModelPackageVersion")
    ModelPackageDescription = field("ModelPackageDescription")
    ModelApprovalStatus = field("ModelApprovalStatus")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.BatchDescribeModelPackageSummaryTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchDescribeModelPackageSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AdditionalInferenceSpecificationDefinition:
    boto3_raw_data: "type_defs.AdditionalInferenceSpecificationDefinitionTypeDef" = (
        dataclasses.field()
    )

    Name = field("Name")
    Containers = field("Containers")
    Description = field("Description")
    SupportedTransformInstanceTypes = field("SupportedTransformInstanceTypes")
    SupportedRealtimeInferenceInstanceTypes = field(
        "SupportedRealtimeInferenceInstanceTypes"
    )
    SupportedContentTypes = field("SupportedContentTypes")
    SupportedResponseMIMETypes = field("SupportedResponseMIMETypes")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AdditionalInferenceSpecificationDefinitionTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AdditionalInferenceSpecificationDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringScheduleConfigOutput:
    boto3_raw_data: "type_defs.MonitoringScheduleConfigOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ScheduleConfig(self):  # pragma: no cover
        return ScheduleConfig.make_one(self.boto3_raw_data["ScheduleConfig"])

    @cached_property
    def MonitoringJobDefinition(self):  # pragma: no cover
        return MonitoringJobDefinitionOutput.make_one(
            self.boto3_raw_data["MonitoringJobDefinition"]
        )

    MonitoringJobDefinitionName = field("MonitoringJobDefinitionName")
    MonitoringType = field("MonitoringType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.MonitoringScheduleConfigOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringScheduleConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateDataQualityJobDefinitionRequest:
    boto3_raw_data: "type_defs.CreateDataQualityJobDefinitionRequestTypeDef" = (
        dataclasses.field()
    )

    JobDefinitionName = field("JobDefinitionName")
    DataQualityAppSpecification = field("DataQualityAppSpecification")
    DataQualityJobInput = field("DataQualityJobInput")
    DataQualityJobOutputConfig = field("DataQualityJobOutputConfig")

    @cached_property
    def JobResources(self):  # pragma: no cover
        return MonitoringResources.make_one(self.boto3_raw_data["JobResources"])

    RoleArn = field("RoleArn")

    @cached_property
    def DataQualityBaselineConfig(self):  # pragma: no cover
        return DataQualityBaselineConfig.make_one(
            self.boto3_raw_data["DataQualityBaselineConfig"]
        )

    NetworkConfig = field("NetworkConfig")

    @cached_property
    def StoppingCondition(self):  # pragma: no cover
        return MonitoringStoppingCondition.make_one(
            self.boto3_raw_data["StoppingCondition"]
        )

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateDataQualityJobDefinitionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateDataQualityJobDefinitionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateModelBiasJobDefinitionRequest:
    boto3_raw_data: "type_defs.CreateModelBiasJobDefinitionRequestTypeDef" = (
        dataclasses.field()
    )

    JobDefinitionName = field("JobDefinitionName")
    ModelBiasAppSpecification = field("ModelBiasAppSpecification")
    ModelBiasJobInput = field("ModelBiasJobInput")
    ModelBiasJobOutputConfig = field("ModelBiasJobOutputConfig")

    @cached_property
    def JobResources(self):  # pragma: no cover
        return MonitoringResources.make_one(self.boto3_raw_data["JobResources"])

    RoleArn = field("RoleArn")

    @cached_property
    def ModelBiasBaselineConfig(self):  # pragma: no cover
        return ModelBiasBaselineConfig.make_one(
            self.boto3_raw_data["ModelBiasBaselineConfig"]
        )

    NetworkConfig = field("NetworkConfig")

    @cached_property
    def StoppingCondition(self):  # pragma: no cover
        return MonitoringStoppingCondition.make_one(
            self.boto3_raw_data["StoppingCondition"]
        )

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateModelBiasJobDefinitionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateModelBiasJobDefinitionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateModelExplainabilityJobDefinitionRequest:
    boto3_raw_data: "type_defs.CreateModelExplainabilityJobDefinitionRequestTypeDef" = (
        dataclasses.field()
    )

    JobDefinitionName = field("JobDefinitionName")
    ModelExplainabilityAppSpecification = field("ModelExplainabilityAppSpecification")
    ModelExplainabilityJobInput = field("ModelExplainabilityJobInput")
    ModelExplainabilityJobOutputConfig = field("ModelExplainabilityJobOutputConfig")

    @cached_property
    def JobResources(self):  # pragma: no cover
        return MonitoringResources.make_one(self.boto3_raw_data["JobResources"])

    RoleArn = field("RoleArn")

    @cached_property
    def ModelExplainabilityBaselineConfig(self):  # pragma: no cover
        return ModelExplainabilityBaselineConfig.make_one(
            self.boto3_raw_data["ModelExplainabilityBaselineConfig"]
        )

    NetworkConfig = field("NetworkConfig")

    @cached_property
    def StoppingCondition(self):  # pragma: no cover
        return MonitoringStoppingCondition.make_one(
            self.boto3_raw_data["StoppingCondition"]
        )

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateModelExplainabilityJobDefinitionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateModelExplainabilityJobDefinitionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateModelQualityJobDefinitionRequest:
    boto3_raw_data: "type_defs.CreateModelQualityJobDefinitionRequestTypeDef" = (
        dataclasses.field()
    )

    JobDefinitionName = field("JobDefinitionName")
    ModelQualityAppSpecification = field("ModelQualityAppSpecification")
    ModelQualityJobInput = field("ModelQualityJobInput")
    ModelQualityJobOutputConfig = field("ModelQualityJobOutputConfig")

    @cached_property
    def JobResources(self):  # pragma: no cover
        return MonitoringResources.make_one(self.boto3_raw_data["JobResources"])

    RoleArn = field("RoleArn")

    @cached_property
    def ModelQualityBaselineConfig(self):  # pragma: no cover
        return ModelQualityBaselineConfig.make_one(
            self.boto3_raw_data["ModelQualityBaselineConfig"]
        )

    NetworkConfig = field("NetworkConfig")

    @cached_property
    def StoppingCondition(self):  # pragma: no cover
        return MonitoringStoppingCondition.make_one(
            self.boto3_raw_data["StoppingCondition"]
        )

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateModelQualityJobDefinitionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateModelQualityJobDefinitionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringScheduleConfig:
    boto3_raw_data: "type_defs.MonitoringScheduleConfigTypeDef" = dataclasses.field()

    @cached_property
    def ScheduleConfig(self):  # pragma: no cover
        return ScheduleConfig.make_one(self.boto3_raw_data["ScheduleConfig"])

    @cached_property
    def MonitoringJobDefinition(self):  # pragma: no cover
        return MonitoringJobDefinition.make_one(
            self.boto3_raw_data["MonitoringJobDefinition"]
        )

    MonitoringJobDefinitionName = field("MonitoringJobDefinitionName")
    MonitoringType = field("MonitoringType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MonitoringScheduleConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringScheduleConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateSpaceRequest:
    boto3_raw_data: "type_defs.CreateSpaceRequestTypeDef" = dataclasses.field()

    DomainId = field("DomainId")
    SpaceName = field("SpaceName")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    SpaceSettings = field("SpaceSettings")

    @cached_property
    def OwnershipSettings(self):  # pragma: no cover
        return OwnershipSettings.make_one(self.boto3_raw_data["OwnershipSettings"])

    @cached_property
    def SpaceSharingSettings(self):  # pragma: no cover
        return SpaceSharingSettings.make_one(
            self.boto3_raw_data["SpaceSharingSettings"]
        )

    SpaceDisplayName = field("SpaceDisplayName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateSpaceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateSpaceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateSpaceRequest:
    boto3_raw_data: "type_defs.UpdateSpaceRequestTypeDef" = dataclasses.field()

    DomainId = field("DomainId")
    SpaceName = field("SpaceName")
    SpaceSettings = field("SpaceSettings")
    SpaceDisplayName = field("SpaceDisplayName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateSpaceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateSpaceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelPackageValidationSpecificationOutput:
    boto3_raw_data: "type_defs.ModelPackageValidationSpecificationOutputTypeDef" = (
        dataclasses.field()
    )

    ValidationRole = field("ValidationRole")

    @cached_property
    def ValidationProfiles(self):  # pragma: no cover
        return ModelPackageValidationProfileOutput.make_many(
            self.boto3_raw_data["ValidationProfiles"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModelPackageValidationSpecificationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelPackageValidationSpecificationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelPackageValidationSpecification:
    boto3_raw_data: "type_defs.ModelPackageValidationSpecificationTypeDef" = (
        dataclasses.field()
    )

    ValidationRole = field("ValidationRole")

    @cached_property
    def ValidationProfiles(self):  # pragma: no cover
        return ModelPackageValidationProfile.make_many(
            self.boto3_raw_data["ValidationProfiles"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ModelPackageValidationSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelPackageValidationSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClusterInstanceGroupSpecification:
    boto3_raw_data: "type_defs.ClusterInstanceGroupSpecificationTypeDef" = (
        dataclasses.field()
    )

    InstanceCount = field("InstanceCount")
    InstanceGroupName = field("InstanceGroupName")
    InstanceType = field("InstanceType")

    @cached_property
    def LifeCycleConfig(self):  # pragma: no cover
        return ClusterLifeCycleConfig.make_one(self.boto3_raw_data["LifeCycleConfig"])

    ExecutionRole = field("ExecutionRole")
    ThreadsPerCore = field("ThreadsPerCore")

    @cached_property
    def InstanceStorageConfigs(self):  # pragma: no cover
        return ClusterInstanceStorageConfig.make_many(
            self.boto3_raw_data["InstanceStorageConfigs"]
        )

    OnStartDeepHealthChecks = field("OnStartDeepHealthChecks")
    TrainingPlanArn = field("TrainingPlanArn")
    OverrideVpcConfig = field("OverrideVpcConfig")
    ScheduledUpdateConfig = field("ScheduledUpdateConfig")
    ImageId = field("ImageId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ClusterInstanceGroupSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClusterInstanceGroupSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClusterRestrictedInstanceGroupSpecification:
    boto3_raw_data: "type_defs.ClusterRestrictedInstanceGroupSpecificationTypeDef" = (
        dataclasses.field()
    )

    InstanceCount = field("InstanceCount")
    InstanceGroupName = field("InstanceGroupName")
    InstanceType = field("InstanceType")
    ExecutionRole = field("ExecutionRole")

    @cached_property
    def EnvironmentConfig(self):  # pragma: no cover
        return EnvironmentConfig.make_one(self.boto3_raw_data["EnvironmentConfig"])

    ThreadsPerCore = field("ThreadsPerCore")

    @cached_property
    def InstanceStorageConfigs(self):  # pragma: no cover
        return ClusterInstanceStorageConfig.make_many(
            self.boto3_raw_data["InstanceStorageConfigs"]
        )

    OnStartDeepHealthChecks = field("OnStartDeepHealthChecks")
    TrainingPlanArn = field("TrainingPlanArn")
    OverrideVpcConfig = field("OverrideVpcConfig")
    ScheduledUpdateConfig = field("ScheduledUpdateConfig")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ClusterRestrictedInstanceGroupSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClusterRestrictedInstanceGroupSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AlgorithmValidationSpecificationOutput:
    boto3_raw_data: "type_defs.AlgorithmValidationSpecificationOutputTypeDef" = (
        dataclasses.field()
    )

    ValidationRole = field("ValidationRole")

    @cached_property
    def ValidationProfiles(self):  # pragma: no cover
        return AlgorithmValidationProfileOutput.make_many(
            self.boto3_raw_data["ValidationProfiles"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AlgorithmValidationSpecificationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AlgorithmValidationSpecificationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrialComponent:
    boto3_raw_data: "type_defs.TrialComponentTypeDef" = dataclasses.field()

    TrialComponentName = field("TrialComponentName")
    DisplayName = field("DisplayName")
    TrialComponentArn = field("TrialComponentArn")

    @cached_property
    def Source(self):  # pragma: no cover
        return TrialComponentSource.make_one(self.boto3_raw_data["Source"])

    @cached_property
    def Status(self):  # pragma: no cover
        return TrialComponentStatus.make_one(self.boto3_raw_data["Status"])

    StartTime = field("StartTime")
    EndTime = field("EndTime")
    CreationTime = field("CreationTime")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    Parameters = field("Parameters")
    InputArtifacts = field("InputArtifacts")
    OutputArtifacts = field("OutputArtifacts")

    @cached_property
    def Metrics(self):  # pragma: no cover
        return TrialComponentMetricSummary.make_many(self.boto3_raw_data["Metrics"])

    @cached_property
    def MetadataProperties(self):  # pragma: no cover
        return MetadataProperties.make_one(self.boto3_raw_data["MetadataProperties"])

    @cached_property
    def SourceDetail(self):  # pragma: no cover
        return TrialComponentSourceDetail.make_one(self.boto3_raw_data["SourceDetail"])

    LineageGroupArn = field("LineageGroupArn")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def Parents(self):  # pragma: no cover
        return Parent.make_many(self.boto3_raw_data["Parents"])

    RunName = field("RunName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TrialComponentTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TrialComponentTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrainingJobDefinition:
    boto3_raw_data: "type_defs.TrainingJobDefinitionTypeDef" = dataclasses.field()

    TrainingInputMode = field("TrainingInputMode")

    @cached_property
    def InputDataConfig(self):  # pragma: no cover
        return Channel.make_many(self.boto3_raw_data["InputDataConfig"])

    @cached_property
    def OutputDataConfig(self):  # pragma: no cover
        return OutputDataConfig.make_one(self.boto3_raw_data["OutputDataConfig"])

    @cached_property
    def ResourceConfig(self):  # pragma: no cover
        return ResourceConfig.make_one(self.boto3_raw_data["ResourceConfig"])

    @cached_property
    def StoppingCondition(self):  # pragma: no cover
        return StoppingCondition.make_one(self.boto3_raw_data["StoppingCondition"])

    HyperParameters = field("HyperParameters")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TrainingJobDefinitionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrainingJobDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchDescribeModelPackageOutput:
    boto3_raw_data: "type_defs.BatchDescribeModelPackageOutputTypeDef" = (
        dataclasses.field()
    )

    ModelPackageSummaries = field("ModelPackageSummaries")
    BatchDescribeModelPackageErrorMap = field("BatchDescribeModelPackageErrorMap")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.BatchDescribeModelPackageOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchDescribeModelPackageOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeMonitoringScheduleResponse:
    boto3_raw_data: "type_defs.DescribeMonitoringScheduleResponseTypeDef" = (
        dataclasses.field()
    )

    MonitoringScheduleArn = field("MonitoringScheduleArn")
    MonitoringScheduleName = field("MonitoringScheduleName")
    MonitoringScheduleStatus = field("MonitoringScheduleStatus")
    MonitoringType = field("MonitoringType")
    FailureReason = field("FailureReason")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def MonitoringScheduleConfig(self):  # pragma: no cover
        return MonitoringScheduleConfigOutput.make_one(
            self.boto3_raw_data["MonitoringScheduleConfig"]
        )

    EndpointName = field("EndpointName")

    @cached_property
    def LastMonitoringExecutionSummary(self):  # pragma: no cover
        return MonitoringExecutionSummary.make_one(
            self.boto3_raw_data["LastMonitoringExecutionSummary"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeMonitoringScheduleResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeMonitoringScheduleResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelDashboardMonitoringSchedule:
    boto3_raw_data: "type_defs.ModelDashboardMonitoringScheduleTypeDef" = (
        dataclasses.field()
    )

    MonitoringScheduleArn = field("MonitoringScheduleArn")
    MonitoringScheduleName = field("MonitoringScheduleName")
    MonitoringScheduleStatus = field("MonitoringScheduleStatus")
    MonitoringType = field("MonitoringType")
    FailureReason = field("FailureReason")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def MonitoringScheduleConfig(self):  # pragma: no cover
        return MonitoringScheduleConfigOutput.make_one(
            self.boto3_raw_data["MonitoringScheduleConfig"]
        )

    EndpointName = field("EndpointName")

    @cached_property
    def MonitoringAlertSummaries(self):  # pragma: no cover
        return MonitoringAlertSummary.make_many(
            self.boto3_raw_data["MonitoringAlertSummaries"]
        )

    @cached_property
    def LastMonitoringExecutionSummary(self):  # pragma: no cover
        return MonitoringExecutionSummary.make_one(
            self.boto3_raw_data["LastMonitoringExecutionSummary"]
        )

    @cached_property
    def BatchTransformInput(self):  # pragma: no cover
        return BatchTransformInputOutput.make_one(
            self.boto3_raw_data["BatchTransformInput"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ModelDashboardMonitoringScheduleTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelDashboardMonitoringScheduleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MonitoringSchedule:
    boto3_raw_data: "type_defs.MonitoringScheduleTypeDef" = dataclasses.field()

    MonitoringScheduleArn = field("MonitoringScheduleArn")
    MonitoringScheduleName = field("MonitoringScheduleName")
    MonitoringScheduleStatus = field("MonitoringScheduleStatus")
    MonitoringType = field("MonitoringType")
    FailureReason = field("FailureReason")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def MonitoringScheduleConfig(self):  # pragma: no cover
        return MonitoringScheduleConfigOutput.make_one(
            self.boto3_raw_data["MonitoringScheduleConfig"]
        )

    EndpointName = field("EndpointName")

    @cached_property
    def LastMonitoringExecutionSummary(self):  # pragma: no cover
        return MonitoringExecutionSummary.make_one(
            self.boto3_raw_data["LastMonitoringExecutionSummary"]
        )

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MonitoringScheduleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MonitoringScheduleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeModelPackageOutput:
    boto3_raw_data: "type_defs.DescribeModelPackageOutputTypeDef" = dataclasses.field()

    ModelPackageName = field("ModelPackageName")
    ModelPackageGroupName = field("ModelPackageGroupName")
    ModelPackageVersion = field("ModelPackageVersion")
    ModelPackageArn = field("ModelPackageArn")
    ModelPackageDescription = field("ModelPackageDescription")
    CreationTime = field("CreationTime")

    @cached_property
    def InferenceSpecification(self):  # pragma: no cover
        return InferenceSpecificationOutput.make_one(
            self.boto3_raw_data["InferenceSpecification"]
        )

    @cached_property
    def SourceAlgorithmSpecification(self):  # pragma: no cover
        return SourceAlgorithmSpecificationOutput.make_one(
            self.boto3_raw_data["SourceAlgorithmSpecification"]
        )

    @cached_property
    def ValidationSpecification(self):  # pragma: no cover
        return ModelPackageValidationSpecificationOutput.make_one(
            self.boto3_raw_data["ValidationSpecification"]
        )

    ModelPackageStatus = field("ModelPackageStatus")

    @cached_property
    def ModelPackageStatusDetails(self):  # pragma: no cover
        return ModelPackageStatusDetails.make_one(
            self.boto3_raw_data["ModelPackageStatusDetails"]
        )

    CertifyForMarketplace = field("CertifyForMarketplace")
    ModelApprovalStatus = field("ModelApprovalStatus")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    @cached_property
    def MetadataProperties(self):  # pragma: no cover
        return MetadataProperties.make_one(self.boto3_raw_data["MetadataProperties"])

    @cached_property
    def ModelMetrics(self):  # pragma: no cover
        return ModelMetrics.make_one(self.boto3_raw_data["ModelMetrics"])

    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    ApprovalDescription = field("ApprovalDescription")
    Domain = field("Domain")
    Task = field("Task")
    SamplePayloadUrl = field("SamplePayloadUrl")
    CustomerMetadataProperties = field("CustomerMetadataProperties")

    @cached_property
    def DriftCheckBaselines(self):  # pragma: no cover
        return DriftCheckBaselines.make_one(self.boto3_raw_data["DriftCheckBaselines"])

    @cached_property
    def AdditionalInferenceSpecifications(self):  # pragma: no cover
        return AdditionalInferenceSpecificationDefinitionOutput.make_many(
            self.boto3_raw_data["AdditionalInferenceSpecifications"]
        )

    SkipModelValidation = field("SkipModelValidation")
    SourceUri = field("SourceUri")

    @cached_property
    def SecurityConfig(self):  # pragma: no cover
        return ModelPackageSecurityConfig.make_one(
            self.boto3_raw_data["SecurityConfig"]
        )

    @cached_property
    def ModelCard(self):  # pragma: no cover
        return ModelPackageModelCard.make_one(self.boto3_raw_data["ModelCard"])

    @cached_property
    def ModelLifeCycle(self):  # pragma: no cover
        return ModelLifeCycle.make_one(self.boto3_raw_data["ModelLifeCycle"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeModelPackageOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeModelPackageOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelPackage:
    boto3_raw_data: "type_defs.ModelPackageTypeDef" = dataclasses.field()

    ModelPackageName = field("ModelPackageName")
    ModelPackageGroupName = field("ModelPackageGroupName")
    ModelPackageVersion = field("ModelPackageVersion")
    ModelPackageArn = field("ModelPackageArn")
    ModelPackageDescription = field("ModelPackageDescription")
    CreationTime = field("CreationTime")

    @cached_property
    def InferenceSpecification(self):  # pragma: no cover
        return InferenceSpecificationOutput.make_one(
            self.boto3_raw_data["InferenceSpecification"]
        )

    @cached_property
    def SourceAlgorithmSpecification(self):  # pragma: no cover
        return SourceAlgorithmSpecificationOutput.make_one(
            self.boto3_raw_data["SourceAlgorithmSpecification"]
        )

    @cached_property
    def ValidationSpecification(self):  # pragma: no cover
        return ModelPackageValidationSpecificationOutput.make_one(
            self.boto3_raw_data["ValidationSpecification"]
        )

    ModelPackageStatus = field("ModelPackageStatus")

    @cached_property
    def ModelPackageStatusDetails(self):  # pragma: no cover
        return ModelPackageStatusDetails.make_one(
            self.boto3_raw_data["ModelPackageStatusDetails"]
        )

    CertifyForMarketplace = field("CertifyForMarketplace")
    ModelApprovalStatus = field("ModelApprovalStatus")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["CreatedBy"])

    @cached_property
    def MetadataProperties(self):  # pragma: no cover
        return MetadataProperties.make_one(self.boto3_raw_data["MetadataProperties"])

    @cached_property
    def ModelMetrics(self):  # pragma: no cover
        return ModelMetrics.make_one(self.boto3_raw_data["ModelMetrics"])

    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def LastModifiedBy(self):  # pragma: no cover
        return UserContext.make_one(self.boto3_raw_data["LastModifiedBy"])

    ApprovalDescription = field("ApprovalDescription")
    Domain = field("Domain")
    Task = field("Task")
    SamplePayloadUrl = field("SamplePayloadUrl")

    @cached_property
    def AdditionalInferenceSpecifications(self):  # pragma: no cover
        return AdditionalInferenceSpecificationDefinitionOutput.make_many(
            self.boto3_raw_data["AdditionalInferenceSpecifications"]
        )

    SourceUri = field("SourceUri")

    @cached_property
    def SecurityConfig(self):  # pragma: no cover
        return ModelPackageSecurityConfig.make_one(
            self.boto3_raw_data["SecurityConfig"]
        )

    @cached_property
    def ModelCard(self):  # pragma: no cover
        return ModelPackageModelCard.make_one(self.boto3_raw_data["ModelCard"])

    @cached_property
    def ModelLifeCycle(self):  # pragma: no cover
        return ModelLifeCycle.make_one(self.boto3_raw_data["ModelLifeCycle"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    CustomerMetadataProperties = field("CustomerMetadataProperties")

    @cached_property
    def DriftCheckBaselines(self):  # pragma: no cover
        return DriftCheckBaselines.make_one(self.boto3_raw_data["DriftCheckBaselines"])

    SkipModelValidation = field("SkipModelValidation")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ModelPackageTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ModelPackageTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateClusterRequest:
    boto3_raw_data: "type_defs.CreateClusterRequestTypeDef" = dataclasses.field()

    ClusterName = field("ClusterName")

    @cached_property
    def InstanceGroups(self):  # pragma: no cover
        return ClusterInstanceGroupSpecification.make_many(
            self.boto3_raw_data["InstanceGroups"]
        )

    @cached_property
    def RestrictedInstanceGroups(self):  # pragma: no cover
        return ClusterRestrictedInstanceGroupSpecification.make_many(
            self.boto3_raw_data["RestrictedInstanceGroups"]
        )

    VpcConfig = field("VpcConfig")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def Orchestrator(self):  # pragma: no cover
        return ClusterOrchestrator.make_one(self.boto3_raw_data["Orchestrator"])

    NodeRecovery = field("NodeRecovery")

    @cached_property
    def TieredStorageConfig(self):  # pragma: no cover
        return ClusterTieredStorageConfig.make_one(
            self.boto3_raw_data["TieredStorageConfig"]
        )

    NodeProvisioningMode = field("NodeProvisioningMode")
    ClusterRole = field("ClusterRole")

    @cached_property
    def AutoScaling(self):  # pragma: no cover
        return ClusterAutoScalingConfig.make_one(self.boto3_raw_data["AutoScaling"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateClusterRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateClusterRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateClusterRequest:
    boto3_raw_data: "type_defs.UpdateClusterRequestTypeDef" = dataclasses.field()

    ClusterName = field("ClusterName")

    @cached_property
    def InstanceGroups(self):  # pragma: no cover
        return ClusterInstanceGroupSpecification.make_many(
            self.boto3_raw_data["InstanceGroups"]
        )

    @cached_property
    def RestrictedInstanceGroups(self):  # pragma: no cover
        return ClusterRestrictedInstanceGroupSpecification.make_many(
            self.boto3_raw_data["RestrictedInstanceGroups"]
        )

    @cached_property
    def TieredStorageConfig(self):  # pragma: no cover
        return ClusterTieredStorageConfig.make_one(
            self.boto3_raw_data["TieredStorageConfig"]
        )

    NodeRecovery = field("NodeRecovery")
    InstanceGroupsToDelete = field("InstanceGroupsToDelete")
    ClusterRole = field("ClusterRole")

    @cached_property
    def AutoScaling(self):  # pragma: no cover
        return ClusterAutoScalingConfig.make_one(self.boto3_raw_data["AutoScaling"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateClusterRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateClusterRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAlgorithmOutput:
    boto3_raw_data: "type_defs.DescribeAlgorithmOutputTypeDef" = dataclasses.field()

    AlgorithmName = field("AlgorithmName")
    AlgorithmArn = field("AlgorithmArn")
    AlgorithmDescription = field("AlgorithmDescription")
    CreationTime = field("CreationTime")

    @cached_property
    def TrainingSpecification(self):  # pragma: no cover
        return TrainingSpecificationOutput.make_one(
            self.boto3_raw_data["TrainingSpecification"]
        )

    @cached_property
    def InferenceSpecification(self):  # pragma: no cover
        return InferenceSpecificationOutput.make_one(
            self.boto3_raw_data["InferenceSpecification"]
        )

    @cached_property
    def ValidationSpecification(self):  # pragma: no cover
        return AlgorithmValidationSpecificationOutput.make_one(
            self.boto3_raw_data["ValidationSpecification"]
        )

    AlgorithmStatus = field("AlgorithmStatus")

    @cached_property
    def AlgorithmStatusDetails(self):  # pragma: no cover
        return AlgorithmStatusDetails.make_one(
            self.boto3_raw_data["AlgorithmStatusDetails"]
        )

    ProductId = field("ProductId")
    CertifyForMarketplace = field("CertifyForMarketplace")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeAlgorithmOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAlgorithmOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTrainingJobRequest:
    boto3_raw_data: "type_defs.CreateTrainingJobRequestTypeDef" = dataclasses.field()

    TrainingJobName = field("TrainingJobName")
    AlgorithmSpecification = field("AlgorithmSpecification")
    RoleArn = field("RoleArn")

    @cached_property
    def OutputDataConfig(self):  # pragma: no cover
        return OutputDataConfig.make_one(self.boto3_raw_data["OutputDataConfig"])

    ResourceConfig = field("ResourceConfig")

    @cached_property
    def StoppingCondition(self):  # pragma: no cover
        return StoppingCondition.make_one(self.boto3_raw_data["StoppingCondition"])

    HyperParameters = field("HyperParameters")
    InputDataConfig = field("InputDataConfig")
    VpcConfig = field("VpcConfig")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    EnableNetworkIsolation = field("EnableNetworkIsolation")
    EnableInterContainerTrafficEncryption = field(
        "EnableInterContainerTrafficEncryption"
    )
    EnableManagedSpotTraining = field("EnableManagedSpotTraining")

    @cached_property
    def CheckpointConfig(self):  # pragma: no cover
        return CheckpointConfig.make_one(self.boto3_raw_data["CheckpointConfig"])

    DebugHookConfig = field("DebugHookConfig")
    DebugRuleConfigurations = field("DebugRuleConfigurations")

    @cached_property
    def TensorBoardOutputConfig(self):  # pragma: no cover
        return TensorBoardOutputConfig.make_one(
            self.boto3_raw_data["TensorBoardOutputConfig"]
        )

    @cached_property
    def ExperimentConfig(self):  # pragma: no cover
        return ExperimentConfig.make_one(self.boto3_raw_data["ExperimentConfig"])

    ProfilerConfig = field("ProfilerConfig")
    ProfilerRuleConfigurations = field("ProfilerRuleConfigurations")
    Environment = field("Environment")

    @cached_property
    def RetryStrategy(self):  # pragma: no cover
        return RetryStrategy.make_one(self.boto3_raw_data["RetryStrategy"])

    @cached_property
    def RemoteDebugConfig(self):  # pragma: no cover
        return RemoteDebugConfig.make_one(self.boto3_raw_data["RemoteDebugConfig"])

    @cached_property
    def InfraCheckConfig(self):  # pragma: no cover
        return InfraCheckConfig.make_one(self.boto3_raw_data["InfraCheckConfig"])

    @cached_property
    def SessionChainingConfig(self):  # pragma: no cover
        return SessionChainingConfig.make_one(
            self.boto3_raw_data["SessionChainingConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateTrainingJobRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTrainingJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HyperParameterTrainingJobDefinition:
    boto3_raw_data: "type_defs.HyperParameterTrainingJobDefinitionTypeDef" = (
        dataclasses.field()
    )

    AlgorithmSpecification = field("AlgorithmSpecification")
    RoleArn = field("RoleArn")

    @cached_property
    def OutputDataConfig(self):  # pragma: no cover
        return OutputDataConfig.make_one(self.boto3_raw_data["OutputDataConfig"])

    @cached_property
    def StoppingCondition(self):  # pragma: no cover
        return StoppingCondition.make_one(self.boto3_raw_data["StoppingCondition"])

    DefinitionName = field("DefinitionName")

    @cached_property
    def TuningObjective(self):  # pragma: no cover
        return HyperParameterTuningJobObjective.make_one(
            self.boto3_raw_data["TuningObjective"]
        )

    HyperParameterRanges = field("HyperParameterRanges")
    StaticHyperParameters = field("StaticHyperParameters")
    InputDataConfig = field("InputDataConfig")
    VpcConfig = field("VpcConfig")
    ResourceConfig = field("ResourceConfig")
    HyperParameterTuningResourceConfig = field("HyperParameterTuningResourceConfig")
    EnableNetworkIsolation = field("EnableNetworkIsolation")
    EnableInterContainerTrafficEncryption = field(
        "EnableInterContainerTrafficEncryption"
    )
    EnableManagedSpotTraining = field("EnableManagedSpotTraining")

    @cached_property
    def CheckpointConfig(self):  # pragma: no cover
        return CheckpointConfig.make_one(self.boto3_raw_data["CheckpointConfig"])

    @cached_property
    def RetryStrategy(self):  # pragma: no cover
        return RetryStrategy.make_one(self.boto3_raw_data["RetryStrategy"])

    Environment = field("Environment")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.HyperParameterTrainingJobDefinitionTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HyperParameterTrainingJobDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AlgorithmValidationProfile:
    boto3_raw_data: "type_defs.AlgorithmValidationProfileTypeDef" = dataclasses.field()

    ProfileName = field("ProfileName")

    @cached_property
    def TrainingJobDefinition(self):  # pragma: no cover
        return TrainingJobDefinition.make_one(
            self.boto3_raw_data["TrainingJobDefinition"]
        )

    @cached_property
    def TransformJobDefinition(self):  # pragma: no cover
        return TransformJobDefinition.make_one(
            self.boto3_raw_data["TransformJobDefinition"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AlgorithmValidationProfileTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AlgorithmValidationProfileTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateModelPackageInput:
    boto3_raw_data: "type_defs.UpdateModelPackageInputTypeDef" = dataclasses.field()

    ModelPackageArn = field("ModelPackageArn")
    ModelApprovalStatus = field("ModelApprovalStatus")
    ApprovalDescription = field("ApprovalDescription")
    CustomerMetadataProperties = field("CustomerMetadataProperties")
    CustomerMetadataPropertiesToRemove = field("CustomerMetadataPropertiesToRemove")
    AdditionalInferenceSpecificationsToAdd = field(
        "AdditionalInferenceSpecificationsToAdd"
    )
    InferenceSpecification = field("InferenceSpecification")
    SourceUri = field("SourceUri")

    @cached_property
    def ModelCard(self):  # pragma: no cover
        return ModelPackageModelCard.make_one(self.boto3_raw_data["ModelCard"])

    @cached_property
    def ModelLifeCycle(self):  # pragma: no cover
        return ModelLifeCycle.make_one(self.boto3_raw_data["ModelLifeCycle"])

    ClientToken = field("ClientToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateModelPackageInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateModelPackageInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ModelDashboardModel:
    boto3_raw_data: "type_defs.ModelDashboardModelTypeDef" = dataclasses.field()

    @cached_property
    def Model(self):  # pragma: no cover
        return Model.make_one(self.boto3_raw_data["Model"])

    @cached_property
    def Endpoints(self):  # pragma: no cover
        return ModelDashboardEndpoint.make_many(self.boto3_raw_data["Endpoints"])

    @cached_property
    def LastBatchTransformJob(self):  # pragma: no cover
        return TransformJob.make_one(self.boto3_raw_data["LastBatchTransformJob"])

    @cached_property
    def MonitoringSchedules(self):  # pragma: no cover
        return ModelDashboardMonitoringSchedule.make_many(
            self.boto3_raw_data["MonitoringSchedules"]
        )

    @cached_property
    def ModelCard(self):  # pragma: no cover
        return ModelDashboardModelCard.make_one(self.boto3_raw_data["ModelCard"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ModelDashboardModelTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ModelDashboardModelTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Endpoint:
    boto3_raw_data: "type_defs.EndpointTypeDef" = dataclasses.field()

    EndpointName = field("EndpointName")
    EndpointArn = field("EndpointArn")
    EndpointConfigName = field("EndpointConfigName")
    EndpointStatus = field("EndpointStatus")
    CreationTime = field("CreationTime")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def ProductionVariants(self):  # pragma: no cover
        return ProductionVariantSummary.make_many(
            self.boto3_raw_data["ProductionVariants"]
        )

    @cached_property
    def DataCaptureConfig(self):  # pragma: no cover
        return DataCaptureConfigSummary.make_one(
            self.boto3_raw_data["DataCaptureConfig"]
        )

    FailureReason = field("FailureReason")

    @cached_property
    def MonitoringSchedules(self):  # pragma: no cover
        return MonitoringSchedule.make_many(self.boto3_raw_data["MonitoringSchedules"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def ShadowProductionVariants(self):  # pragma: no cover
        return ProductionVariantSummary.make_many(
            self.boto3_raw_data["ShadowProductionVariants"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EndpointTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.EndpointTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateMonitoringScheduleRequest:
    boto3_raw_data: "type_defs.CreateMonitoringScheduleRequestTypeDef" = (
        dataclasses.field()
    )

    MonitoringScheduleName = field("MonitoringScheduleName")
    MonitoringScheduleConfig = field("MonitoringScheduleConfig")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateMonitoringScheduleRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateMonitoringScheduleRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateMonitoringScheduleRequest:
    boto3_raw_data: "type_defs.UpdateMonitoringScheduleRequestTypeDef" = (
        dataclasses.field()
    )

    MonitoringScheduleName = field("MonitoringScheduleName")
    MonitoringScheduleConfig = field("MonitoringScheduleConfig")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateMonitoringScheduleRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateMonitoringScheduleRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateModelPackageInput:
    boto3_raw_data: "type_defs.CreateModelPackageInputTypeDef" = dataclasses.field()

    ModelPackageName = field("ModelPackageName")
    ModelPackageGroupName = field("ModelPackageGroupName")
    ModelPackageDescription = field("ModelPackageDescription")
    InferenceSpecification = field("InferenceSpecification")
    ValidationSpecification = field("ValidationSpecification")
    SourceAlgorithmSpecification = field("SourceAlgorithmSpecification")
    CertifyForMarketplace = field("CertifyForMarketplace")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    ModelApprovalStatus = field("ModelApprovalStatus")

    @cached_property
    def MetadataProperties(self):  # pragma: no cover
        return MetadataProperties.make_one(self.boto3_raw_data["MetadataProperties"])

    @cached_property
    def ModelMetrics(self):  # pragma: no cover
        return ModelMetrics.make_one(self.boto3_raw_data["ModelMetrics"])

    ClientToken = field("ClientToken")
    Domain = field("Domain")
    Task = field("Task")
    SamplePayloadUrl = field("SamplePayloadUrl")
    CustomerMetadataProperties = field("CustomerMetadataProperties")

    @cached_property
    def DriftCheckBaselines(self):  # pragma: no cover
        return DriftCheckBaselines.make_one(self.boto3_raw_data["DriftCheckBaselines"])

    AdditionalInferenceSpecifications = field("AdditionalInferenceSpecifications")
    SkipModelValidation = field("SkipModelValidation")
    SourceUri = field("SourceUri")

    @cached_property
    def SecurityConfig(self):  # pragma: no cover
        return ModelPackageSecurityConfig.make_one(
            self.boto3_raw_data["SecurityConfig"]
        )

    @cached_property
    def ModelCard(self):  # pragma: no cover
        return ModelPackageModelCard.make_one(self.boto3_raw_data["ModelCard"])

    @cached_property
    def ModelLifeCycle(self):  # pragma: no cover
        return ModelLifeCycle.make_one(self.boto3_raw_data["ModelLifeCycle"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateModelPackageInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateModelPackageInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AlgorithmValidationSpecification:
    boto3_raw_data: "type_defs.AlgorithmValidationSpecificationTypeDef" = (
        dataclasses.field()
    )

    ValidationRole = field("ValidationRole")

    @cached_property
    def ValidationProfiles(self):  # pragma: no cover
        return AlgorithmValidationProfile.make_many(
            self.boto3_raw_data["ValidationProfiles"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AlgorithmValidationSpecificationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AlgorithmValidationSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchRecord:
    boto3_raw_data: "type_defs.SearchRecordTypeDef" = dataclasses.field()

    @cached_property
    def TrainingJob(self):  # pragma: no cover
        return TrainingJob.make_one(self.boto3_raw_data["TrainingJob"])

    @cached_property
    def Experiment(self):  # pragma: no cover
        return Experiment.make_one(self.boto3_raw_data["Experiment"])

    @cached_property
    def Trial(self):  # pragma: no cover
        return Trial.make_one(self.boto3_raw_data["Trial"])

    @cached_property
    def TrialComponent(self):  # pragma: no cover
        return TrialComponent.make_one(self.boto3_raw_data["TrialComponent"])

    @cached_property
    def Endpoint(self):  # pragma: no cover
        return Endpoint.make_one(self.boto3_raw_data["Endpoint"])

    @cached_property
    def ModelPackage(self):  # pragma: no cover
        return ModelPackage.make_one(self.boto3_raw_data["ModelPackage"])

    @cached_property
    def ModelPackageGroup(self):  # pragma: no cover
        return ModelPackageGroup.make_one(self.boto3_raw_data["ModelPackageGroup"])

    @cached_property
    def Pipeline(self):  # pragma: no cover
        return Pipeline.make_one(self.boto3_raw_data["Pipeline"])

    @cached_property
    def PipelineExecution(self):  # pragma: no cover
        return PipelineExecution.make_one(self.boto3_raw_data["PipelineExecution"])

    @cached_property
    def PipelineVersion(self):  # pragma: no cover
        return PipelineVersion.make_one(self.boto3_raw_data["PipelineVersion"])

    @cached_property
    def FeatureGroup(self):  # pragma: no cover
        return FeatureGroup.make_one(self.boto3_raw_data["FeatureGroup"])

    @cached_property
    def FeatureMetadata(self):  # pragma: no cover
        return FeatureMetadata.make_one(self.boto3_raw_data["FeatureMetadata"])

    @cached_property
    def Project(self):  # pragma: no cover
        return Project.make_one(self.boto3_raw_data["Project"])

    @cached_property
    def HyperParameterTuningJob(self):  # pragma: no cover
        return HyperParameterTuningJobSearchEntity.make_one(
            self.boto3_raw_data["HyperParameterTuningJob"]
        )

    @cached_property
    def ModelCard(self):  # pragma: no cover
        return ModelCard.make_one(self.boto3_raw_data["ModelCard"])

    @cached_property
    def Model(self):  # pragma: no cover
        return ModelDashboardModel.make_one(self.boto3_raw_data["Model"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SearchRecordTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SearchRecordTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateHyperParameterTuningJobRequest:
    boto3_raw_data: "type_defs.CreateHyperParameterTuningJobRequestTypeDef" = (
        dataclasses.field()
    )

    HyperParameterTuningJobName = field("HyperParameterTuningJobName")
    HyperParameterTuningJobConfig = field("HyperParameterTuningJobConfig")
    TrainingJobDefinition = field("TrainingJobDefinition")
    TrainingJobDefinitions = field("TrainingJobDefinitions")
    WarmStartConfig = field("WarmStartConfig")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def Autotune(self):  # pragma: no cover
        return Autotune.make_one(self.boto3_raw_data["Autotune"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateHyperParameterTuningJobRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateHyperParameterTuningJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchResponse:
    boto3_raw_data: "type_defs.SearchResponseTypeDef" = dataclasses.field()

    @cached_property
    def Results(self):  # pragma: no cover
        return SearchRecord.make_many(self.boto3_raw_data["Results"])

    @cached_property
    def TotalHits(self):  # pragma: no cover
        return TotalHits.make_one(self.boto3_raw_data["TotalHits"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SearchResponseTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SearchResponseTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateAlgorithmInput:
    boto3_raw_data: "type_defs.CreateAlgorithmInputTypeDef" = dataclasses.field()

    AlgorithmName = field("AlgorithmName")
    TrainingSpecification = field("TrainingSpecification")
    AlgorithmDescription = field("AlgorithmDescription")
    InferenceSpecification = field("InferenceSpecification")
    ValidationSpecification = field("ValidationSpecification")
    CertifyForMarketplace = field("CertifyForMarketplace")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateAlgorithmInputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateAlgorithmInputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]
