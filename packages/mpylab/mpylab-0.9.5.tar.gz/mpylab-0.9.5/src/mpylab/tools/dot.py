nodes = {}
graph = {}


def init_nodes_graph():
    for n in list(nodes.keys()):
        del (nodes[str(n)])
    for n in list(graph.keys()):
        del (graph[str(n)])


def add_node(i, dr=None):
    if dr is None:
        dr = {}
    if i not in list(nodes.keys()):
        nodes[i] = dr.copy()  # new node
    else:  # node already exist
        for (k, v) in dr.items():
            nodes[i][k] = v


def add_edge(left, right=None, attr=None):
    if right is None:
        right = []
    if attr is None:
        attr = {}

    # add nodes
    add_node(left)
    for r in right:
        add_node(r)
    if left not in graph.keys():  # new left side (source)
        right_dict = {}
        for r in right:
            right_dict[r] = attr.copy()
    else:
        right_dict = graph[left].copy()
        for r in right:
            right_dict[r] = attr.copy()
    graph[left] = right_dict.copy()


# Begin -- grammar generated by Yapps
import sys, re
from mpylab.tools import yappsrt


class DOTScanner(yappsrt.Scanner):
    patterns = [
        ("'@'", re.compile('@')),
        ("'\\\\)'", re.compile('\\)')),
        ("'\\\\('", re.compile('\\(')),
        ("':'", re.compile(':')),
        ("'--|->'", re.compile('--|->')),
        ("','", re.compile(',')),
        ("'\\\\]'", re.compile('\\]')),
        ("'\\\\['", re.compile('\\[')),
        ("'edge|EDGE'", re.compile('edge|EDGE')),
        ("'node|NODE'", re.compile('node|NODE')),
        ("'subgraph|SUBGRAPH'", re.compile('subgraph|SUBGRAPH')),
        ("'='", re.compile('=')),
        ("';'", re.compile(';')),
        ("'digraph|DIGRAPH'", re.compile('digraph|DIGRAPH')),
        ("'}'", re.compile('}')),
        ("'{'", re.compile('{')),
        ("'graph|GRAPH'", re.compile('graph|GRAPH')),
        ("'strict|STRICT'", re.compile('strict|STRICT')),
        ('\\s+', re.compile('\\s+')),
        ('#.*', re.compile('#.*')),
        ('//.*', re.compile('//.*')),
        ('NUM', re.compile('[0-9]+')),
        ('ID', re.compile('[_a-zA-Z][_a-zA-Z0-9]*')),
        ('STR', re.compile('"([^\\"]+|\\\\.)*"')),
        ('END', re.compile('$')),
    ]

    def __init__(self, str):
        yappsrt.Scanner.__init__(self, None, ['\\s+', '#.*', '//.*'], str)


class DOT(yappsrt.Parser):
    Context = yappsrt.Context

    def graph(self, _parent=None):
        _context = self.Context(_parent, self._scanner, self._pos, 'graph', [])
        if self._peek("'strict|STRICT'", "'graph|GRAPH'", "'digraph|DIGRAPH'") == "'strict|STRICT'":
            self._scan("'strict|STRICT'")
        _token = self._peek("'graph|GRAPH'", "'digraph|DIGRAPH'")
        if _token == "'graph|GRAPH'":
            self._scan("'graph|GRAPH'")
            if self._peek("'{'", 'ID', 'STR', 'NUM', "','", "'\\\\)'", "'='", "'--|->'", "'\\\\['", "':'", "'@'", "';'",
                          "'}'", "'subgraph|SUBGRAPH'", "'graph|GRAPH'", "'node|NODE'", "'edge|EDGE'", "'\\\\]'") in [
                'ID', 'STR', 'NUM']:
                id = self.id(_context)
            self._scan("'{'")
            init_nodes_graph()
            stmt_list = self.stmt_list(_context)
            self._scan("'}'")
        else:  # == "'digraph|DIGRAPH'"
            self._scan("'digraph|DIGRAPH'")
            if self._peek("'{'", 'ID', 'STR', 'NUM', "','", "'\\\\)'", "'='", "'--|->'", "'\\\\['", "':'", "'@'", "';'",
                          "'}'", "'subgraph|SUBGRAPH'", "'graph|GRAPH'", "'node|NODE'", "'edge|EDGE'", "'\\\\]'") in [
                'ID', 'STR', 'NUM']:
                id = self.id(_context)
            self._scan("'{'")
            init_nodes_graph()
            stmt_list = self.stmt_list(_context)
            self._scan("'}'")
        END = self._scan('END')
        return (nodes, graph)

    def stmt_list(self, _parent=None):
        _context = self.Context(_parent, self._scanner, self._pos, 'stmt_list', [])
        while self._peek("'}'", "'subgraph|SUBGRAPH'", "'{'", "'graph|GRAPH'", "'node|NODE'", "'edge|EDGE'", 'ID',
                         'STR', 'NUM') != "'}'":
            stmt = self.stmt(_context)
            if self._peek("';'", "'}'", "'subgraph|SUBGRAPH'", "'{'", "'graph|GRAPH'", "'node|NODE'", "'edge|EDGE'",
                          'ID', 'STR', 'NUM') == "';'":
                self._scan("';'")
        if self._peek() not in ["'}'", "'subgraph|SUBGRAPH'", "'{'", "'graph|GRAPH'", "'node|NODE'", "'edge|EDGE'",
                                'ID', 'STR', 'NUM']:
            raise yappsrt.SyntaxError(charpos=self._scanner.get_prev_char_pos(), context=_context,
                                      msg='Need one of ' + ', '.join(
                                          ["'}'", "'subgraph|SUBGRAPH'", "'{'", "'graph|GRAPH'", "'node|NODE'",
                                           "'edge|EDGE'", 'ID', 'STR', 'NUM']))

    def stmt(self, _parent=None):
        _context = self.Context(_parent, self._scanner, self._pos, 'stmt', [])
        _token = self._peek("'subgraph|SUBGRAPH'", "'{'", "'graph|GRAPH'", "'node|NODE'", "'edge|EDGE'", 'ID', 'STR',
                            'NUM')
        idn = None
        i = None
        j = None
        l = None
        if _token not in ["'subgraph|SUBGRAPH'", "'{'", 'ID', 'STR', 'NUM']:
            attr_stmt = self.attr_stmt(_context)
        elif _token not in ["'subgraph|SUBGRAPH'", "'{'"]:
            idn = self.id(_context)
            i = idn
            _token = self._peek("'='", "'--|->'", "'\\\\['", "':'", "'@'", "';'", "'}'",
                                "'subgraph|SUBGRAPH'",
                                "'{'", "'graph|GRAPH'", "'node|NODE'", "'edge|EDGE'", 'ID', 'STR', 'NUM')
            if _token == "'='":
                self._scan("'='")
                idn = self.id(_context)
                j = idn
            elif _token in ["':'", "'@'"]:
                port = self.port(_context)
                _token = self._peek("'--|->'", "';'", "'}'",
                                    "'subgraph|SUBGRAPH'", "'{'",
                                    "'graph|GRAPH'", "'node|NODE'",
                                    "'edge|EDGE'", 'ID', 'STR', 'NUM')
                if _token == "'--|->'":
                    edgeRHS = self.edgeRHS(_context)
                    l = {}
                    if self._peek("'\\\\['", "';'", "'}'", "'subgraph|SUBGRAPH'",
                                  "'{'", "'graph|GRAPH'",
                                  "'node|NODE'",
                                  "'edge|EDGE'",
                                  'ID', 'STR', 'NUM') == "'\\\\['":
                        attr_list = self.attr_list(None, _context)
                        l = attr_list
                    add_edge(i, edgeRHS, l)
                else:
                    add_node(i)
            elif _token == "'--|->'":
                edgeRHS = self.edgeRHS(_context)
                l = {}
                if self._peek("'\\\\['", "';'", "'}'", "'subgraph|SUBGRAPH'", "'{'", "'graph|GRAPH'", "'node|NODE'",
                              "'edge|EDGE'", 'ID', 'STR', 'NUM') == "'\\\\['":
                    attr_list = self.attr_list(None, _context)
                    l = attr_list
                add_edge(i, edgeRHS, l)
            elif _token == "'\\\\['":
                attr_list = self.attr_list(None, _context)
                add_node(i, attr_list)
            else:
                add_node(i)
        elif _token == "'subgraph|SUBGRAPH'":
            self._scan("'subgraph|SUBGRAPH'")
            _token = self._peek("'{'", "'--|->'", 'ID', 'STR', 'NUM')
            if _token == "'--|->'":
                edgeRHS = self.edgeRHS(_context)
                l = {}
                if self._peek("'\\\\['", "';'", "'}'", "'subgraph|SUBGRAPH'", "'{'", "'graph|GRAPH'", "'node|NODE'",
                              "'edge|EDGE'", 'ID', 'STR', 'NUM') == "'\\\\['":
                    attr_list = self.attr_list(None, _context)
                    l = attr_list
                add_edge(i, edgeRHS, l)
            elif _token == "'{'":
                self._scan("'{'")
                stmt_list = self.stmt_list(_context)
                self._scan("'}'")
            else:  # in ['ID', 'STR', 'NUM']
                idn = self.id(_context)
                _token = self._peek("'{'", "';'", "'}'", "'subgraph|SUBGRAPH'",
                                    "'graph|GRAPH'", "'node|NODE'",
                                    "'edge|EDGE'", 'ID', 'STR', 'NUM')
                if _token == "'{'":
                    self._scan("'{'")
                    stmt_list = self.stmt_list(_context)
                    self._scan("'}'")
                elif True:
                    pass
                else:
                    raise yappsrt.SyntaxError(_token[0], 'Could not match stmt')
        else:  # == "'{'"
            self._scan("'{'")
            stmt_list = self.stmt_list(_context)
            self._scan("'}'")

    def attr_stmt(self, _parent=None):
        _context = self.Context(_parent, self._scanner, self._pos, 'attr_stmt', [])
        _token = self._peek("'graph|GRAPH'", "'node|NODE'", "'edge|EDGE'")
        if _token == "'graph|GRAPH'":
            self._scan("'graph|GRAPH'")
        elif _token == "'node|NODE'":
            self._scan("'node|NODE'")
        else:  # == "'edge|EDGE'"
            self._scan("'edge|EDGE'")
        attr_list = self.attr_list(None, _context)
        return attr_list

    def attr_list(self, adir, _parent=None):
        _context = self.Context(_parent, self._scanner, self._pos, 'attr_list', [adir])
        while True:
            self._scan("'\\\\['")
            if adir is None: adir = {}
            if self._peek("'\\\\]'", 'ID', 'STR', 'NUM') != "'\\\\]'":
                a_list = self.a_list(adir, _context)

            self._scan("'\\\\]'")
            if self._peek("'\\\\['", "';'", "'}'", "'subgraph|SUBGRAPH'",
                          "'{'", "'graph|GRAPH'", "'node|NODE'",
                          "'edge|EDGE'", 'ID', 'STR', 'NUM') != "'\\\\['":
                break
        return adir

    def a_list(self, adir, _parent=None):
        _context = self.Context(_parent, self._scanner, self._pos, 'a_list', [adir])
        while True:
            idn = self.id(_context)
            k = idn
            if self._peek("'='", "','", 'ID', 'STR', 'NUM', "'\\\\]'") == "'='":
                self._scan("'='")
                idn = self.id(_context)
                adir[k] = idn
            if self._peek("','", 'ID', 'STR', 'NUM', "'\\\\]'") == "','":
                self._scan("','")
            if self._peek('ID', 'STR', 'NUM', "'\\\\]'") not in ['ID', 'STR', 'NUM']:
                break
        return (adir)

    def subgraph_stmt(self, _parent=None):
        _context = self.Context(_parent, self._scanner, self._pos, 'subgraph_stmt', [])
        _token = self._peek("'subgraph|SUBGRAPH'", "'{'")
        if _token == "'subgraph|SUBGRAPH'":
            self._scan("'subgraph|SUBGRAPH'")
            _token = self._peek("'{'", 'ID', 'STR', 'NUM')
            if _token != "'{'":
                idn = self.id(_context)
                if self._peek("'{'", "'--|->'", "'\\\\['", "';'", "'}'",
                              "'subgraph|SUBGRAPH'", "'graph|GRAPH'", "'node|NODE'",
                              "'edge|EDGE'", 'ID', 'STR', 'NUM') == "'{'":
                    self._scan("'{'")
                    stmt_list = self.stmt_list(_context)
                    self._scan("'}'")
            else:  # == "'{'"
                self._scan("'{'")
                stmt_list = self.stmt_list(_context)
                self._scan("'}'")
        else:  # == "'{'"
            self._scan("'{'")
            stmt_list = self.stmt_list(_context)
            self._scan("'}'")

    def edge_stmt(self, _parent=None):
        _context = self.Context(_parent, self._scanner, self._pos, 'edge_stmt', [])
        _token = self._peek("'subgraph|SUBGRAPH'", "'{'", 'ID', 'STR', 'NUM')
        if _token not in ["'subgraph|SUBGRAPH'", "'{'"]:
            node_id = self.node_id(_context)
        else:  # in ["'subgraph|SUBGRAPH'", "'{'"]
            subgraph_stmt = self.subgraph_stmt(_context)
        edgeRHS = self.edgeRHS(_context)
        if self._peek("'\\\\['", "';'", "'}'", "'subgraph|SUBGRAPH'", "'{'", "'graph|GRAPH'", "'node|NODE'",
                      "'edge|EDGE'", 'ID', 'STR', 'NUM') == "'\\\\['":
            attr_list = self.attr_list(_context)

    def edgeRHS(self, _parent=None):
        _context = self.Context(_parent, self._scanner, self._pos, 'edgeRHS', [])
        while True:
            liste = []
            self._scan("'--|->'")
            _token = self._peek("'subgraph|SUBGRAPH'", "'{'", 'ID', 'STR', 'NUM')
            if _token not in ["'subgraph|SUBGRAPH'", "'{'"]:
                node_id = self.node_id(_context)
                liste.append(node_id)
            else:  # in ["'subgraph|SUBGRAPH'", "'{'"]
                subgraph_stmt = self.subgraph_stmt(_context)
            if self._peek("'--|->'", "'\\\\['", "';'", "'}'", "'subgraph|SUBGRAPH'",
                          "'{'", "'graph|GRAPH'", "'node|NODE'", "'edge|EDGE'", 'ID', 'STR', 'NUM') != "'--|->'":
                break
        return (liste)

    def node_stmt(self, _parent=None):
        _context = self.Context(_parent, self._scanner, self._pos, 'node_stmt', [])
        node_id = self.node_id(_context)
        nodes[node_id] = {}
        if True:
            attr_list = self.attr_list(None, _context)
            nodes[node_id] = attr_list
        return (nodes)

    def node_id(self, _parent=None):
        _context = self.Context(_parent, self._scanner, self._pos, 'node_id', [])
        idn = self.id(_context)
        if self._peek("':'", "'@'", "'--|->'", "'{'", "','", "'\\\\)'",
                      "'\\\\['", "'='", "';'", 'ID', 'STR', 'NUM', "'}'",
                      "'subgraph|SUBGRAPH'", "'graph|GRAPH'", "'node|NODE'",
                      "'edge|EDGE'", "'\\\\]'") in ["':'", "'@'"]:
            port = self.port(_context)
        return (idn)

    def port(self, _parent=None):
        _context = self.Context(_parent, self._scanner, self._pos, 'port', [])
        _token = self._peek("':'", "'@'")
        if _token == "':'":
            port_location = self.port_location(_context)
            if self._peek("'@'", "'{'", "','", "'\\\\)'",
                          "':'", "'='", "'--|->'",
                          "'\\\\['", "';'", 'ID', 'STR', 'NUM', "'}'",
                          "'subgraph|SUBGRAPH'", "'graph|GRAPH'",
                          "'node|NODE'", "'edge|EDGE'", "'\\\\]'") == "'@'":
                port_angle = self.port_angle(_context)
        else:  # == "'@'"
            port_angle = self.port_angle(_context)
            if self._peek("':'", "'{'", "'@'", "','", "'\\\\)'",
                          "'='", "'--|->'",
                          "'\\\\['", "';'", 'ID', 'STR', 'NUM', "'}'",
                          "'subgraph|SUBGRAPH'", "'graph|GRAPH'",
                          "'node|NODE'", "'edge|EDGE'", "'\\\\]'") == "':'":
                port_location = self.port_location(_context)

    def port_location(self, _parent=None):
        _context = self.Context(_parent, self._scanner, self._pos, 'port_location', [])
        self._scan("':'")
        _token = self._peek("'\\\\('", 'ID', 'STR', 'NUM')
        if _token != "'\\\\('":
            idn = self.id(_context)
        else:  # == "'\\\\('"
            self._scan("'\\\\('")
            idn = self.id(_context)
            self._scan("','")
            idn = self.id(_context)
            self._scan("'\\\\)'")

    def port_angle(self, _parent=None):
        _context = self.Context(_parent, self._scanner, self._pos, 'port_angle', [])
        self._scan("'@'")
        idn = self.id(_context)

    def id(self, _parent=None):
        _context = self.Context(_parent, self._scanner, self._pos, 'idn', [])
        _token = self._peek('ID', 'STR', 'NUM')
        if _token == 'ID':
            ID = self._scan('ID')
            return ID
        elif _token == 'STR':
            STR = self._scan('STR')
            return eval(STR, {"__builtins__": dict()})
        else:  # == 'NUM'
            NUM = self._scan('NUM')
            return int(NUM)


def parse(rule, text):
    P = DOT(DOTScanner(text))
    return yappsrt.wrap_error_reporter(P, rule)


if __name__ == '__main__':
    from sys import argv, stdin

    if len(argv) >= 2:
        if len(argv) >= 3:
            f = open(argv[2], 'r')
        else:
            f = stdin
        print(parse(argv[1], f.read()))
    else:
        print('Args:  <rule> [<filename>]', file=sys.stderr)
# End -- grammar generated by Yapps
