# coding: utf-8

"""
    DocSpring API

    Use DocSpring's API to programmatically fill out PDF forms, convert HTML to PDFs, merge PDFs, or request legally binding e-signatures.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from docspring.models.submission_preview import SubmissionPreview
from typing import Optional, Set
from typing_extensions import Self

class SubmissionBatchWithSubmissions(BaseModel):
    """
    SubmissionBatchWithSubmissions
    """ # noqa: E501
    id: Optional[StrictStr]
    state: StrictStr
    metadata: Dict[str, Any]
    processed_at: Optional[StrictStr]
    total_count: StrictInt
    pending_count: StrictInt
    error_count: StrictInt
    completion_percentage: Union[StrictFloat, StrictInt]
    submissions: Optional[List[SubmissionPreview]] = None
    __properties: ClassVar[List[str]] = ["id", "state", "metadata", "processed_at", "total_count", "pending_count", "error_count", "completion_percentage", "submissions"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['pending', 'processed', 'error']):
            raise ValueError("must be one of enum values ('pending', 'processed', 'error')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubmissionBatchWithSubmissions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in submissions (list)
        _items = []
        if self.submissions:
            for _item_submissions in self.submissions:
                if _item_submissions:
                    _items.append(_item_submissions.to_dict())
            _dict['submissions'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if processed_at (nullable) is None
        # and model_fields_set contains the field
        if self.processed_at is None and "processed_at" in self.model_fields_set:
            _dict['processed_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubmissionBatchWithSubmissions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "state": obj.get("state"),
            "metadata": obj.get("metadata"),
            "processed_at": obj.get("processed_at"),
            "total_count": obj.get("total_count"),
            "pending_count": obj.get("pending_count"),
            "error_count": obj.get("error_count"),
            "completion_percentage": obj.get("completion_percentage"),
            "submissions": [SubmissionPreview.from_dict(_item) for _item in obj["submissions"]] if obj.get("submissions") is not None else None
        })
        return _obj


