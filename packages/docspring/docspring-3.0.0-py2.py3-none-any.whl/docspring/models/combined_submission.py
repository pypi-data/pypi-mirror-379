# coding: utf-8

"""
    DocSpring API

    Use DocSpring's API to programmatically fill out PDF forms, convert HTML to PDFs, merge PDFs, or request legally binding e-signatures.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from docspring.models.combined_submission_action import CombinedSubmissionAction
from typing import Optional, Set
from typing_extensions import Self

class CombinedSubmission(BaseModel):
    """
    CombinedSubmission
    """ # noqa: E501
    id: Optional[StrictStr]
    state: StrictStr
    expired: StrictBool
    expires_in: Optional[StrictInt]
    expires_at: Optional[StrictStr]
    processed_at: Optional[StrictStr]
    error_message: Optional[StrictStr]
    submission_ids: List[StrictStr]
    source_pdfs: List[Dict[str, Any]]
    metadata: Dict[str, Any]
    password: Optional[StrictStr]
    pdf_hash: Optional[StrictStr]
    download_url: Optional[StrictStr]
    actions: List[CombinedSubmissionAction]
    __properties: ClassVar[List[str]] = ["id", "state", "expired", "expires_in", "expires_at", "processed_at", "error_message", "submission_ids", "source_pdfs", "metadata", "password", "pdf_hash", "download_url", "actions"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['pending', 'processed', 'error']):
            raise ValueError("must be one of enum values ('pending', 'processed', 'error')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CombinedSubmission from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if expires_in (nullable) is None
        # and model_fields_set contains the field
        if self.expires_in is None and "expires_in" in self.model_fields_set:
            _dict['expires_in'] = None

        # set to None if expires_at (nullable) is None
        # and model_fields_set contains the field
        if self.expires_at is None and "expires_at" in self.model_fields_set:
            _dict['expires_at'] = None

        # set to None if processed_at (nullable) is None
        # and model_fields_set contains the field
        if self.processed_at is None and "processed_at" in self.model_fields_set:
            _dict['processed_at'] = None

        # set to None if error_message (nullable) is None
        # and model_fields_set contains the field
        if self.error_message is None and "error_message" in self.model_fields_set:
            _dict['error_message'] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict['password'] = None

        # set to None if pdf_hash (nullable) is None
        # and model_fields_set contains the field
        if self.pdf_hash is None and "pdf_hash" in self.model_fields_set:
            _dict['pdf_hash'] = None

        # set to None if download_url (nullable) is None
        # and model_fields_set contains the field
        if self.download_url is None and "download_url" in self.model_fields_set:
            _dict['download_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CombinedSubmission from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "state": obj.get("state"),
            "expired": obj.get("expired"),
            "expires_in": obj.get("expires_in"),
            "expires_at": obj.get("expires_at"),
            "processed_at": obj.get("processed_at"),
            "error_message": obj.get("error_message"),
            "submission_ids": obj.get("submission_ids"),
            "source_pdfs": obj.get("source_pdfs"),
            "metadata": obj.get("metadata"),
            "password": obj.get("password"),
            "pdf_hash": obj.get("pdf_hash"),
            "download_url": obj.get("download_url"),
            "actions": [CombinedSubmissionAction.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None
        })
        return _obj


