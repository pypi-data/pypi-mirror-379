# coding: utf-8

"""
    DocSpring API

    Use DocSpring's API to programmatically fill out PDF forms, convert HTML to PDFs, merge PDFs, or request legally binding e-signatures.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SubmissionDataRequestEvent(BaseModel):
    """
    SubmissionDataRequestEvent
    """ # noqa: E501
    id: Optional[StrictStr]
    submission_id: Optional[StrictStr]
    submission_data_request_id: Optional[StrictStr]
    event_type: StrictStr
    message_type: Optional[StrictStr]
    message_recipient: Optional[StrictStr]
    occurred_at: Optional[StrictStr]
    __properties: ClassVar[List[str]] = ["id", "submission_id", "submission_data_request_id", "event_type", "message_type", "message_recipient", "occurred_at"]

    @field_validator('event_type')
    def event_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['send_request', 'view_request', 'accepted_terms', 'decline_request', 'sign_request', 'all_completed']):
            raise ValueError("must be one of enum values ('send_request', 'view_request', 'accepted_terms', 'decline_request', 'sign_request', 'all_completed')")
        return value

    @field_validator('message_type')
    def message_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['email', 'sms', 'fax', 'mail', 'slack', 'msteams', 'discord', 'telegram', 'whatsapp']):
            raise ValueError("must be one of enum values ('email', 'sms', 'fax', 'mail', 'slack', 'msteams', 'discord', 'telegram', 'whatsapp')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubmissionDataRequestEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if submission_id (nullable) is None
        # and model_fields_set contains the field
        if self.submission_id is None and "submission_id" in self.model_fields_set:
            _dict['submission_id'] = None

        # set to None if submission_data_request_id (nullable) is None
        # and model_fields_set contains the field
        if self.submission_data_request_id is None and "submission_data_request_id" in self.model_fields_set:
            _dict['submission_data_request_id'] = None

        # set to None if message_type (nullable) is None
        # and model_fields_set contains the field
        if self.message_type is None and "message_type" in self.model_fields_set:
            _dict['message_type'] = None

        # set to None if message_recipient (nullable) is None
        # and model_fields_set contains the field
        if self.message_recipient is None and "message_recipient" in self.model_fields_set:
            _dict['message_recipient'] = None

        # set to None if occurred_at (nullable) is None
        # and model_fields_set contains the field
        if self.occurred_at is None and "occurred_at" in self.model_fields_set:
            _dict['occurred_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubmissionDataRequestEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "submission_id": obj.get("submission_id"),
            "submission_data_request_id": obj.get("submission_data_request_id"),
            "event_type": obj.get("event_type"),
            "message_type": obj.get("message_type"),
            "message_recipient": obj.get("message_recipient"),
            "occurred_at": obj.get("occurred_at")
        })
        return _obj


