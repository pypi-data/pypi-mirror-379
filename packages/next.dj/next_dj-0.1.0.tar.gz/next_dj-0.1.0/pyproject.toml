[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "next.dj"
version = "0.1.0"
description = "Next-gen framework for Django developers"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12"
keywords = ["django", "framework", "low-code", "frontend"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Framework :: Django",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "django>=4.2,<5.3",
]

[project.urls]
Homepage = "https://github.com/next-dj/next-dj"
Documentation = "https://next-dj.readthedocs.io/"
Repository = "https://github.com/next-dj/next-dj"
"Bug Tracker" = "https://github.com/next-dj/next-dj/issues"

[dependency-groups]
dev = [
    "pytest==8.4.0",
    "pytest-cov==6.1.1",
    "pytest-django==4.11.1",
    "django-stubs[compatible-mypy]==5.2.0",
    "ruff==0.11.13",
    "mypy==1.15.0",
    "pre-commit==4.2.0",
    "build==1.3.0",
    "twine==6.2.0",
]
docs = [
    "sphinx==8.2.3",
    "sphinx-rtd-theme==3.0.2",
    "myst-parser==4.0.1",
    "sphinx-autodoc-typehints==3.2.0",
    "sphinxcontrib-apidoc==0.6.0",
]

[tool.hatch.build.targets.wheel]
packages = ["next"]

[tool.hatch.build.targets.sdist]
include = [
    "next/",
    "README.md",
    "LICENSE",
    "CONTRIBUTING.md",
    "pyproject.toml",
]
exclude = [
    "examples/",
    "docs/",
    "tests/",
    ".github/",
    ".gitignore",
    "Makefile",
    "MANIFEST.in",
]

[tool.pytest.ini_options]
python_files = ["test_*.py", "*_test.py", "tests.py"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=next",
    "--cov-report=term-missing",
    "--cov-fail-under=100",
]

[tool.coverage.run]
source = ["next"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/settings.py",
    "*/manage.py",
    "*/wsgi.py",
    "*/asgi.py",
    # core
    "next/checks.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py312"
line-length = 88
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    "migrations",

    # Project annotation file
    "next/__init__.py"
]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN002", "ANN003",
    "B008",   # do not perform function calls in argument defaults (Django settings)

    # Framework-specific ignores
    "SLF001", # private member access (framework code needs this)

    # Docstring rule conflicts - choose one of each conflicting pair
    "D203",   # incorrect-blank-line-before-class (conflicts with D211)
    "D213",   # multi-line-summary-second-line (conflicts with D212)

    # Formatter conflicts
    "COM812", # trailing-comma-missing (conflicts with formatter)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"examples/*" = [    
    "D100", "D101", "D103", "D104", "D105", "D106", "D401",
    "E501", "EXE001",
    "INP001",
    "S105", "S106"
]
"**/{test*,conftest}.py" = [
    "ANN001",  # missing type annotation for function argument
    "ANN201",  # missing return type annotation for public function
    "ANN202",  # missing return type annotation for private function
    "ARG001",  # unused function argument
    "ARG002",  # unused method argument
    "ARG005",  # unused lambda argument (tests use lambdas)
    "S101",    # use of assert detected (tests need this)
    "D100",    # undocumented public module (tests don't need docs)
    "PLR2004", # magic value used in comparison
    "PLR0913", # too many arguments (tests often have many params)
    "S108",    # hardcoded temp file (tests use temp paths)
    "E501",    # line too long (tests can be verbose)
    "FBT003",  # boolean positional value in call (tests use bool args)
]
"**/migrations/**/*.py" = ["F401", "PLR0913"]

[tool.ruff.lint.isort]
known-first-party = ["next"]
force-single-line = false
lines-after-imports = 2
combine-as-imports = true
split-on-trailing-comma = true

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pylint]
max-args = 5
max-branches = 12
max-returns = 6
max-statements = 50

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = false
ignore-fully-untyped = false

[tool.ruff.lint.flake8-pytest-style]
mark-parentheses = true
fixture-parentheses = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.django-stubs]
django_settings_module = "django.conf.global_settings"

[tool.mypy]
plugins = ["mypy_django_plugin.main"]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# only check next folder
packages = ["next"]

# ignore type checking for *args, **kwargs parameters
disable_error_code = ["no-untyped-def"]
