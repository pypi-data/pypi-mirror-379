"""
@file ${proto.fileName}.py
@brief Generated code for ${proto.name} packet service
@author Generated by PolyPacket v${version}
@date ${proto.genTime}
@hash ${proto.hash}
"""

from enum import IntEnum, IntFlag
from typing import Optional
from polypacket.polyservice import BasePacket , PolyPacket

# Service hash definition
${proto.namespace.upper()}_ICD_VERSION = 0x${proto.icdVersion}

###############################################################################
# Enums
###############################################################################

class ${proto.namespace}PacketType(IntEnum):
    """Packet types for ${proto.namespace} protocol"""
    % for packet in proto.packets:
    ${packet.name.upper()} = ${packet.packetId}  # ${packet.desc}
    % endfor




% for field in proto.fields:
% if field.isEnum:
class ${field.name}(IntEnum):
    """Enums for ${field.name} field"""
    % for val in field.vals:
    % if val.val == None:
    ${val.name.upper()} = ${loop.index}  # ${val.desc}
    % else:
    ${val.name.upper()} = ${val.val}  # ${val.desc}
    % endif
    % endfor

% endif
% endfor

###############################################################################
# Bits/Flags
###############################################################################
% for field in proto.fields:
% if field.isMask:
class ${field.name}(IntFlag):
    """Flags for ${field.name} field"""
    % for idx, val in enumerate(field.vals):
    ${val.name.upper()} = 1 << ${idx}  # ${val.desc}
    % endfor

% endif
% endfor

###############################################################################
# Packet Classes
###############################################################################
% for packet in proto.packets:
class ${packet.name}(BasePacket):
    """
    ${packet.desc if hasattr(packet, 'desc') else packet.name + ' packet'}
    """
    def __init__(self):
        super().__init__("${packet.protocol.namespace}:${packet.name}")
        % for field in packet.fields:
        % if field.isArray:
        % if field.cType == 'uint8_t':
        self.${field.name}: bytes | None = None
        % else:
        % if field.pyType == 'str':
        self.${field.name}: str | None = None
        % else:
        self.${field.name}: list[${field.pyType}] | None = None
        %endif                         
        % endif
        % else:
        self.${field.name}: ${field.pyType} | None = None
        % endif
        % endfor

% endfor

###############################################################################
# Service Functions
###############################################################################
class ${proto.namespace}Service:
    """Service class for ${proto.name} protocol"""
    
    @staticmethod
    def init(interface_count: int, depth: int) -> None:
        """
        Initialize protocol service
        
        Args:
            interface_count: Number of interfaces to use
            depth: Spool size for each interface
        """
        # Implementation here
        pass
    
    @staticmethod
    def process() -> None:
        """Process data in buffers"""
        # Implementation here
        pass
    
    @staticmethod
    def feed(iface: int, data: bytes) -> None:
        """
        Feed bytes to service at given interface for processing
        
        Args:
            iface: Index of interface to send on
            data: Data to be processed
        """
        # Implementation here
        pass
   
def PolyPacketTo${proto.camel()}Packet(ppPacket: PolyPacket):
    """ Converts a PolyPacket to a ${proto.namespace} Packet """
    
    packetType = ppPacket.desc.name.lower()
    retPacket = None 
    % for packet in proto.packets:
    % if loop.first:
    if packetType == "${packet.name.lower()}":
    % else:
    elif packetType == "${packet.name.lower()}":
    % endif
        retPacket = ${packet.name}()
    % endfor
    else:   
        return None 

    for field in ppPacket.fields:
        if field.isPresent:
            val = field.get()
            if type(val) == tuple:
                val = list(val)
            setattr(retPacket, field.desc.name, val)
    
    return retPacket        