# Generated by cstruct-stubgen
from typing import BinaryIO, Literal, TypeAlias, overload

import dissect.cstruct as __cs__

class _c_db(__cs__.cstruct):
    DB_MAX_PAGES: Literal[4294967295] = ...
    DB_MAX_RECORDS: Literal[4294967295] = ...
    DB_FILE_ID_LEN: Literal[20] = ...
    DB_IV_BYTES: Literal[16] = ...
    DB_MAC_KEY: Literal[20] = ...
    DB_RENAMEMAGIC: Literal[198656] = ...
    DB_BTREEVERSION: Literal[9] = ...
    DB_BTREEOLDVER: Literal[8] = ...
    DB_BTREEMAGIC: Literal[340322] = ...
    DB_HASHVERSION: Literal[9] = ...
    DB_HASHOLDVER: Literal[7] = ...
    DB_HASHMAGIC: Literal[398689] = ...
    DB_HEAPVERSION: Literal[1] = ...
    DB_HEAPOLDVER: Literal[1] = ...
    DB_HEAPMAGIC: Literal[476546] = ...
    DB_QAMVERSION: Literal[4] = ...
    DB_QAMOLDVER: Literal[3] = ...
    DB_QAMMAGIC: Literal[270931] = ...
    DB_SEQUENCE_VERSION: Literal[2] = ...
    DB_SEQUENCE_OLDVER: Literal[1] = ...
    DB_AM_CHKSUM: Literal[1] = ...
    DB_AM_COMPENSATE: Literal[2] = ...
    DB_AM_COMPRESS: Literal[4] = ...
    DB_AM_CREATED: Literal[8] = ...
    DB_AM_CREATED_MSTR: Literal[16] = ...
    DB_AM_DBM_ERROR: Literal[32] = ...
    DB_AM_DELIMITER: Literal[64] = ...
    DB_AM_DISCARD: Literal[128] = ...
    DB_AM_DUP: Literal[256] = ...
    DB_AM_DUPSORT: Literal[512] = ...
    DB_AM_ENCRYPT: Literal[1024] = ...
    DB_AM_FIXEDLEN: Literal[2048] = ...
    DB_AM_INMEM: Literal[4096] = ...
    DB_AM_INORDER: Literal[8192] = ...
    DB_AM_IN_RENAME: Literal[16384] = ...
    DB_AM_NOT_DURABLE: Literal[32768] = ...
    DB_AM_OPEN_CALLED: Literal[65536] = ...
    DB_AM_PAD: Literal[131072] = ...
    DB_AM_PARTDB: Literal[262144] = ...
    DB_AM_PGDEF: Literal[524288] = ...
    DB_AM_RDONLY: Literal[1048576] = ...
    DB_AM_READ_UNCOMMITTED: Literal[2097152] = ...
    DB_AM_RECNUM: Literal[4194304] = ...
    DB_AM_RECOVER: Literal[8388608] = ...
    DB_AM_RENUMBER: Literal[16777216] = ...
    DB_AM_REVSPLITOFF: Literal[33554432] = ...
    DB_AM_SECONDARY: Literal[67108864] = ...
    DB_AM_SNAPSHOT: Literal[134217728] = ...
    DB_AM_SUBDB: Literal[268435456] = ...
    DB_AM_SWAP: Literal[536870912] = ...
    DB_AM_TXN: Literal[1073741824] = ...
    DB_AM_VERIFYING: Literal[2147483648] = ...
    PGNO_INVALID: Literal[0] = ...
    PGNO_BASE_MD: Literal[0] = ...
    P_INVALID: Literal[0] = ...
    __P_DUPLICATE: Literal[1] = ...
    P_HASH_UNSORTED: Literal[2] = ...
    P_IBTREE: Literal[3] = ...
    P_IRECNO: Literal[4] = ...
    P_LBTREE: Literal[5] = ...
    P_LRECNO: Literal[6] = ...
    P_OVERFLOW: Literal[7] = ...
    P_HASHMETA: Literal[8] = ...
    P_BTREEMETA: Literal[9] = ...
    P_QAMMETA: Literal[10] = ...
    P_QAMDATA: Literal[11] = ...
    P_LDUP: Literal[12] = ...
    P_HASH: Literal[13] = ...
    P_HEAPMETA: Literal[14] = ...
    P_HEAP: Literal[15] = ...
    P_IHEAP: Literal[16] = ...
    P_PAGETYPE_MAX: Literal[17] = ...
    DB_PAGE_DB_LEN: Literal[32] = ...
    DB_PAGE_QUEUE_LEN: Literal[0] = ...
    DBMETA_CHKSUM: Literal[1] = ...
    DBMETA_PART_RANGE: Literal[2] = ...
    DBMETA_PART_CALLBACK: Literal[4] = ...
    BTM_DUP: Literal[1] = ...
    BTM_RECNO: Literal[2] = ...
    BTM_RECNUM: Literal[4] = ...
    BTM_FIXEDLEN: Literal[8] = ...
    BTM_RENUMBER: Literal[16] = ...
    BTM_SUBDB: Literal[32] = ...
    BTM_DUPSORT: Literal[64] = ...
    BTM_COMPRESS: Literal[128] = ...
    BTM_MASK: Literal[255] = ...
    DB_HASH_DUP: Literal[1] = ...
    DB_HASH_SUBDB: Literal[2] = ...
    DB_HASH_DUPSORT: Literal[4] = ...
    NCACHED: Literal[32] = ...
    DBMETASIZE: Literal[512] = ...
    LEAFLEVEL: Literal[1] = ...
    MAXBTREELEVEL: Literal[255] = ...
    SIZEOF_PAGE: Literal[26] = ...
    HEAPPG_NORMAL: Literal[26] = ...
    HEAPPG_CHKSUM: Literal[48] = ...
    HEAPPG_SEC: Literal[64] = ...
    FIRST_HEAP_RPAGE: Literal[1] = ...
    FIRST_HEAP_DPAGE: Literal[2] = ...
    HEAP_RECSPLIT: Literal[1] = ...
    HEAP_RECFIRST: Literal[2] = ...
    HEAP_RECLAST: Literal[4] = ...
    QPAGE_NORMAL: Literal[28] = ...
    QPAGE_CHKSUM: Literal[48] = ...
    QPAGE_SEC: Literal[64] = ...
    H_KEYDATA: Literal[1] = ...
    H_DUPLICATE: Literal[2] = ...
    H_OFFPAGE: Literal[3] = ...
    H_OFFDUP: Literal[4] = ...
    B_KEYDATA: Literal[1] = ...
    B_DUPLICATE: Literal[2] = ...
    B_OVERFLOW: Literal[3] = ...
    O_INDX: Literal[1] = ...
    P_INDX: Literal[2] = ...
    u_int8_t: TypeAlias = _c_db.uint8
    u_int16_t: TypeAlias = _c_db.uint16
    u_int32_t: TypeAlias = _c_db.uint32
    db_pgno_t: TypeAlias = _c_db.uint32
    db_indx_t: TypeAlias = _c_db.uint16
    db_recno_t: TypeAlias = _c_db.uint32
    class _db_lsn(__cs__.Structure):
        file: _c_db.uint32
        offset: _c_db.uint32
        @overload
        def __init__(self, file: _c_db.uint32 | None = ..., offset: _c_db.uint32 | None = ...): ...
        @overload
        def __init__(self, fh: bytes | memoryview | bytearray | BinaryIO, /): ...

    DB_LSN: TypeAlias = _db_lsn
    class _dbmeta33(__cs__.Structure):
        lsn: _c_db._db_lsn
        pgno: _c_db.uint32
        magic: _c_db.uint32
        version: _c_db.uint32
        pagesize: _c_db.uint32
        encrypt_alg: _c_db.uint8
        type: _c_db.uint8
        metaflags: _c_db.uint8
        unused1: _c_db.uint8
        free: _c_db.uint32
        last_pgno: _c_db.uint32
        nparts: _c_db.uint32
        key_count: _c_db.uint32
        record_count: _c_db.uint32
        flags: _c_db.uint32
        uid: __cs__.Array[_c_db.uint8]
        @overload
        def __init__(
            self,
            lsn: _c_db._db_lsn | None = ...,
            pgno: _c_db.uint32 | None = ...,
            magic: _c_db.uint32 | None = ...,
            version: _c_db.uint32 | None = ...,
            pagesize: _c_db.uint32 | None = ...,
            encrypt_alg: _c_db.uint8 | None = ...,
            type: _c_db.uint8 | None = ...,
            metaflags: _c_db.uint8 | None = ...,
            unused1: _c_db.uint8 | None = ...,
            free: _c_db.uint32 | None = ...,
            last_pgno: _c_db.uint32 | None = ...,
            nparts: _c_db.uint32 | None = ...,
            key_count: _c_db.uint32 | None = ...,
            record_count: _c_db.uint32 | None = ...,
            flags: _c_db.uint32 | None = ...,
            uid: __cs__.Array[_c_db.uint8] | None = ...,
        ): ...
        @overload
        def __init__(self, fh: bytes | memoryview | bytearray | BinaryIO, /): ...

    DBMETA33: TypeAlias = _dbmeta33
    DBMETA: TypeAlias = _dbmeta33
    class _btmeta33(__cs__.Structure):
        dbmeta: _c_db._dbmeta33
        unused1: _c_db.uint32
        minkey: _c_db.uint32
        re_len: _c_db.uint32
        re_pad: _c_db.uint32
        root: _c_db.uint32
        unused2: __cs__.Array[_c_db.uint32]
        crypto_magic: _c_db.uint32
        trash: __cs__.Array[_c_db.uint32]
        iv: __cs__.Array[_c_db.uint8]
        chksum: __cs__.Array[_c_db.uint8]
        @overload
        def __init__(
            self,
            dbmeta: _c_db._dbmeta33 | None = ...,
            unused1: _c_db.uint32 | None = ...,
            minkey: _c_db.uint32 | None = ...,
            re_len: _c_db.uint32 | None = ...,
            re_pad: _c_db.uint32 | None = ...,
            root: _c_db.uint32 | None = ...,
            unused2: __cs__.Array[_c_db.uint32] | None = ...,
            crypto_magic: _c_db.uint32 | None = ...,
            trash: __cs__.Array[_c_db.uint32] | None = ...,
            iv: __cs__.Array[_c_db.uint8] | None = ...,
            chksum: __cs__.Array[_c_db.uint8] | None = ...,
        ): ...
        @overload
        def __init__(self, fh: bytes | memoryview | bytearray | BinaryIO, /): ...

    BTMETA33: TypeAlias = _btmeta33
    BTMETA: TypeAlias = _btmeta33
    class _hashmeta33(__cs__.Structure):
        dbmeta: _c_db._dbmeta33
        max_bucket: _c_db.uint32
        high_mask: _c_db.uint32
        low_mask: _c_db.uint32
        ffactor: _c_db.uint32
        nelem: _c_db.uint32
        h_charkey: _c_db.uint32
        spares: __cs__.Array[_c_db.uint32]
        unused: __cs__.Array[_c_db.uint32]
        crypto_magic: _c_db.uint32
        trash: __cs__.Array[_c_db.uint32]
        iv: __cs__.Array[_c_db.uint8]
        chksum: __cs__.Array[_c_db.uint8]
        @overload
        def __init__(
            self,
            dbmeta: _c_db._dbmeta33 | None = ...,
            max_bucket: _c_db.uint32 | None = ...,
            high_mask: _c_db.uint32 | None = ...,
            low_mask: _c_db.uint32 | None = ...,
            ffactor: _c_db.uint32 | None = ...,
            nelem: _c_db.uint32 | None = ...,
            h_charkey: _c_db.uint32 | None = ...,
            spares: __cs__.Array[_c_db.uint32] | None = ...,
            unused: __cs__.Array[_c_db.uint32] | None = ...,
            crypto_magic: _c_db.uint32 | None = ...,
            trash: __cs__.Array[_c_db.uint32] | None = ...,
            iv: __cs__.Array[_c_db.uint8] | None = ...,
            chksum: __cs__.Array[_c_db.uint8] | None = ...,
        ): ...
        @overload
        def __init__(self, fh: bytes | memoryview | bytearray | BinaryIO, /): ...

    HMETA33: TypeAlias = _hashmeta33
    HMETA: TypeAlias = _hashmeta33
    class _heapmeta(__cs__.Structure):
        dbmeta: _c_db._dbmeta33
        curregion: _c_db.uint32
        nregions: _c_db.uint32
        gbytes: _c_db.uint32
        bytes: _c_db.uint32
        region_size: _c_db.uint32
        unused2: __cs__.Array[_c_db.uint32]
        crypto_magic: _c_db.uint32
        trash: __cs__.Array[_c_db.uint32]
        iv: __cs__.Array[_c_db.uint8]
        chksum: __cs__.Array[_c_db.uint8]
        @overload
        def __init__(
            self,
            dbmeta: _c_db._dbmeta33 | None = ...,
            curregion: _c_db.uint32 | None = ...,
            nregions: _c_db.uint32 | None = ...,
            gbytes: _c_db.uint32 | None = ...,
            bytes: _c_db.uint32 | None = ...,
            region_size: _c_db.uint32 | None = ...,
            unused2: __cs__.Array[_c_db.uint32] | None = ...,
            crypto_magic: _c_db.uint32 | None = ...,
            trash: __cs__.Array[_c_db.uint32] | None = ...,
            iv: __cs__.Array[_c_db.uint8] | None = ...,
            chksum: __cs__.Array[_c_db.uint8] | None = ...,
        ): ...
        @overload
        def __init__(self, fh: bytes | memoryview | bytearray | BinaryIO, /): ...

    HEAPMETA: TypeAlias = _heapmeta
    class _qmeta33(__cs__.Structure):
        dbmeta: _c_db._dbmeta33
        first_recno: _c_db.uint32
        cur_recno: _c_db.uint32
        re_len: _c_db.uint32
        re_pad: _c_db.uint32
        rec_page: _c_db.uint32
        page_ext: _c_db.uint32
        unused: __cs__.Array[_c_db.uint32]
        crypto_magic: _c_db.uint32
        trash: __cs__.Array[_c_db.uint32]
        iv: __cs__.Array[_c_db.uint8]
        chksum: __cs__.Array[_c_db.uint8]
        @overload
        def __init__(
            self,
            dbmeta: _c_db._dbmeta33 | None = ...,
            first_recno: _c_db.uint32 | None = ...,
            cur_recno: _c_db.uint32 | None = ...,
            re_len: _c_db.uint32 | None = ...,
            re_pad: _c_db.uint32 | None = ...,
            rec_page: _c_db.uint32 | None = ...,
            page_ext: _c_db.uint32 | None = ...,
            unused: __cs__.Array[_c_db.uint32] | None = ...,
            crypto_magic: _c_db.uint32 | None = ...,
            trash: __cs__.Array[_c_db.uint32] | None = ...,
            iv: __cs__.Array[_c_db.uint8] | None = ...,
            chksum: __cs__.Array[_c_db.uint8] | None = ...,
        ): ...
        @overload
        def __init__(self, fh: bytes | memoryview | bytearray | BinaryIO, /): ...

    QMETA33: TypeAlias = _qmeta33
    QMETA: TypeAlias = _qmeta33
    class __pg_chksum(__cs__.Structure):
        unused: __cs__.Array[_c_db.uint8]
        chksum: __cs__.Array[_c_db.uint8]
        @overload
        def __init__(
            self, unused: __cs__.Array[_c_db.uint8] | None = ..., chksum: __cs__.Array[_c_db.uint8] | None = ...
        ): ...
        @overload
        def __init__(self, fh: bytes | memoryview | bytearray | BinaryIO, /): ...

    PG_CHKSUM: TypeAlias = __pg_chksum
    class __pg_crypto(__cs__.Structure):
        unused: __cs__.Array[_c_db.uint8]
        chksum: __cs__.Array[_c_db.uint8]
        iv: __cs__.Array[_c_db.uint8]
        @overload
        def __init__(
            self,
            unused: __cs__.Array[_c_db.uint8] | None = ...,
            chksum: __cs__.Array[_c_db.uint8] | None = ...,
            iv: __cs__.Array[_c_db.uint8] | None = ...,
        ): ...
        @overload
        def __init__(self, fh: bytes | memoryview | bytearray | BinaryIO, /): ...

    PG_CRYPTO: TypeAlias = __pg_crypto
    class _db_page(__cs__.Structure):
        lsn: _c_db._db_lsn
        pgno: _c_db.uint32
        prev_pgno: _c_db.uint32
        next_pgno: _c_db.uint32
        entries: _c_db.uint16
        hf_offset: _c_db.uint16
        level: _c_db.uint8
        type: _c_db.uint8
        @overload
        def __init__(
            self,
            lsn: _c_db._db_lsn | None = ...,
            pgno: _c_db.uint32 | None = ...,
            prev_pgno: _c_db.uint32 | None = ...,
            next_pgno: _c_db.uint32 | None = ...,
            entries: _c_db.uint16 | None = ...,
            hf_offset: _c_db.uint16 | None = ...,
            level: _c_db.uint8 | None = ...,
            type: _c_db.uint8 | None = ...,
        ): ...
        @overload
        def __init__(self, fh: bytes | memoryview | bytearray | BinaryIO, /): ...

    PAGE: TypeAlias = _db_page
    class _heappg(__cs__.Structure):
        lsn: _c_db._db_lsn
        pgno: _c_db.uint32
        high_pgno: _c_db.uint32
        high_indx: _c_db.uint16
        free_indx: _c_db.uint16
        entries: _c_db.uint16
        hf_offset: _c_db.uint16
        unused2: __cs__.Array[_c_db.uint8]
        type: _c_db.uint8
        unused3: __cs__.Array[_c_db.uint8]
        chksum: __cs__.Array[_c_db.uint8]
        iv: __cs__.Array[_c_db.uint8]
        @overload
        def __init__(
            self,
            lsn: _c_db._db_lsn | None = ...,
            pgno: _c_db.uint32 | None = ...,
            high_pgno: _c_db.uint32 | None = ...,
            high_indx: _c_db.uint16 | None = ...,
            free_indx: _c_db.uint16 | None = ...,
            entries: _c_db.uint16 | None = ...,
            hf_offset: _c_db.uint16 | None = ...,
            unused2: __cs__.Array[_c_db.uint8] | None = ...,
            type: _c_db.uint8 | None = ...,
            unused3: __cs__.Array[_c_db.uint8] | None = ...,
            chksum: __cs__.Array[_c_db.uint8] | None = ...,
            iv: __cs__.Array[_c_db.uint8] | None = ...,
        ): ...
        @overload
        def __init__(self, fh: bytes | memoryview | bytearray | BinaryIO, /): ...

    HEAPPG: TypeAlias = _heappg
    class __heaphdr(__cs__.Structure):
        flags: _c_db.uint8
        unused: _c_db.uint8
        size: _c_db.uint16
        @overload
        def __init__(
            self, flags: _c_db.uint8 | None = ..., unused: _c_db.uint8 | None = ..., size: _c_db.uint16 | None = ...
        ): ...
        @overload
        def __init__(self, fh: bytes | memoryview | bytearray | BinaryIO, /): ...

    HEAPHDR: TypeAlias = __heaphdr
    class __heaphdrsplt(__cs__.Structure):
        std_hdr: _c_db.__heaphdr
        tsize: _c_db.uint32
        nextpg: _c_db.uint32
        nextindx: _c_db.uint16
        unused: _c_db.uint16
        @overload
        def __init__(
            self,
            std_hdr: _c_db.__heaphdr | None = ...,
            tsize: _c_db.uint32 | None = ...,
            nextpg: _c_db.uint32 | None = ...,
            nextindx: _c_db.uint16 | None = ...,
            unused: _c_db.uint16 | None = ...,
        ): ...
        @overload
        def __init__(self, fh: bytes | memoryview | bytearray | BinaryIO, /): ...

    HEAPSPLITHDR: TypeAlias = __heaphdrsplt
    class _qpage(__cs__.Structure):
        lsn: _c_db._db_lsn
        pgno: _c_db.uint32
        unused0: __cs__.Array[_c_db.uint32]
        unused1: __cs__.Array[_c_db.uint8]
        type: _c_db.uint8
        unused2: __cs__.Array[_c_db.uint8]
        chksum: __cs__.Array[_c_db.uint8]
        iv: __cs__.Array[_c_db.uint8]
        @overload
        def __init__(
            self,
            lsn: _c_db._db_lsn | None = ...,
            pgno: _c_db.uint32 | None = ...,
            unused0: __cs__.Array[_c_db.uint32] | None = ...,
            unused1: __cs__.Array[_c_db.uint8] | None = ...,
            type: _c_db.uint8 | None = ...,
            unused2: __cs__.Array[_c_db.uint8] | None = ...,
            chksum: __cs__.Array[_c_db.uint8] | None = ...,
            iv: __cs__.Array[_c_db.uint8] | None = ...,
        ): ...
        @overload
        def __init__(self, fh: bytes | memoryview | bytearray | BinaryIO, /): ...

    QPAGE: TypeAlias = _qpage
    class _hkeydata(__cs__.Structure):
        type: _c_db.uint8
        data: __cs__.Array[_c_db.uint8]
        @overload
        def __init__(self, type: _c_db.uint8 | None = ..., data: __cs__.Array[_c_db.uint8] | None = ...): ...
        @overload
        def __init__(self, fh: bytes | memoryview | bytearray | BinaryIO, /): ...

    HKEYDATA: TypeAlias = _hkeydata
    class _hoffpage(__cs__.Structure):
        type: _c_db.uint8
        unused: __cs__.Array[_c_db.uint8]
        pgno: _c_db.uint32
        tlen: _c_db.uint32
        @overload
        def __init__(
            self,
            type: _c_db.uint8 | None = ...,
            unused: __cs__.Array[_c_db.uint8] | None = ...,
            pgno: _c_db.uint32 | None = ...,
            tlen: _c_db.uint32 | None = ...,
        ): ...
        @overload
        def __init__(self, fh: bytes | memoryview | bytearray | BinaryIO, /): ...

    HOFFPAGE: TypeAlias = _hoffpage
    class _hoffdup(__cs__.Structure):
        type: _c_db.uint8
        unused: __cs__.Array[_c_db.uint8]
        pgno: _c_db.uint32
        @overload
        def __init__(
            self,
            type: _c_db.uint8 | None = ...,
            unused: __cs__.Array[_c_db.uint8] | None = ...,
            pgno: _c_db.uint32 | None = ...,
        ): ...
        @overload
        def __init__(self, fh: bytes | memoryview | bytearray | BinaryIO, /): ...

    HOFFDUP: TypeAlias = _hoffdup
    class _bkeydata(__cs__.Structure):
        len: _c_db.uint16
        type: _c_db.uint8
        data: __cs__.Array[_c_db.uint8]
        @overload
        def __init__(
            self,
            len: _c_db.uint16 | None = ...,
            type: _c_db.uint8 | None = ...,
            data: __cs__.Array[_c_db.uint8] | None = ...,
        ): ...
        @overload
        def __init__(self, fh: bytes | memoryview | bytearray | BinaryIO, /): ...

    BKEYDATA: TypeAlias = _bkeydata
    class _boverflow(__cs__.Structure):
        unused1: _c_db.uint16
        type: _c_db.uint8
        unused2: _c_db.uint8
        pgno: _c_db.uint32
        tlen: _c_db.uint32
        @overload
        def __init__(
            self,
            unused1: _c_db.uint16 | None = ...,
            type: _c_db.uint8 | None = ...,
            unused2: _c_db.uint8 | None = ...,
            pgno: _c_db.uint32 | None = ...,
            tlen: _c_db.uint32 | None = ...,
        ): ...
        @overload
        def __init__(self, fh: bytes | memoryview | bytearray | BinaryIO, /): ...

    BOVERFLOW: TypeAlias = _boverflow
    class _binternal(__cs__.Structure):
        len: _c_db.uint16
        type: _c_db.uint8
        unused: _c_db.uint8
        pgno: _c_db.uint32
        nrecs: _c_db.uint32
        data: __cs__.Array[_c_db.uint8]
        @overload
        def __init__(
            self,
            len: _c_db.uint16 | None = ...,
            type: _c_db.uint8 | None = ...,
            unused: _c_db.uint8 | None = ...,
            pgno: _c_db.uint32 | None = ...,
            nrecs: _c_db.uint32 | None = ...,
            data: __cs__.Array[_c_db.uint8] | None = ...,
        ): ...
        @overload
        def __init__(self, fh: bytes | memoryview | bytearray | BinaryIO, /): ...

    BINTERNAL: TypeAlias = _binternal
    class _rinternal(__cs__.Structure):
        pgno: _c_db.uint32
        nrecs: _c_db.uint32
        @overload
        def __init__(self, pgno: _c_db.uint32 | None = ..., nrecs: _c_db.uint32 | None = ...): ...
        @overload
        def __init__(self, fh: bytes | memoryview | bytearray | BinaryIO, /): ...

    RINTERNAL: TypeAlias = _rinternal

# Technically `c_db` is an instance of `_c_db`, but then we can't use it in type hints
c_db: TypeAlias = _c_db
