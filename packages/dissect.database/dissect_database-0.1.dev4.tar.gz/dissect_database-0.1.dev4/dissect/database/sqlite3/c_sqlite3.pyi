# Generated by cstruct-stubgen
from typing import BinaryIO, Literal, TypeAlias, overload

import dissect.cstruct as __cs__

class _c_sqlite3(__cs__.cstruct):
    PAGE_FLAG_INTKEY: Literal[1] = ...
    PAGE_FLAG_ZERODATA: Literal[2] = ...
    PAGE_FLAG_LEAFDATA: Literal[4] = ...
    PAGE_FLAG_LEAF: Literal[8] = ...
    PAGE_TYPE_INTERIOR_INDEX: Literal[2] = ...
    PAGE_TYPE_INTERIOR_TABLE: Literal[5] = ...
    PAGE_TYPE_LEAF_INDEX: Literal[10] = ...
    PAGE_TYPE_LEAF_TABLE: Literal[13] = ...
    class header(__cs__.Structure):
        magic: __cs__.CharArray
        page_size: _c_sqlite3.uint16
        write_version: _c_sqlite3.uint8
        read_version: _c_sqlite3.uint8
        reserved_size: _c_sqlite3.uint8
        max_embedded_payload_fraction: _c_sqlite3.uint8
        min_embedded_payload_fraction: _c_sqlite3.uint8
        leaf_payload_fraction: _c_sqlite3.uint8
        change_counter: _c_sqlite3.uint32
        page_count: _c_sqlite3.uint32
        first_freelist_page: _c_sqlite3.uint32
        freelist_page_count: _c_sqlite3.uint32
        schema_cookie: _c_sqlite3.uint32
        schema_format_number: _c_sqlite3.uint32
        page_cache_size: _c_sqlite3.uint32
        largest_root_btree_page: _c_sqlite3.uint32
        text_encoding: _c_sqlite3.uint32
        user_version: _c_sqlite3.uint32
        incremental_vacuum_mode: _c_sqlite3.uint32
        application_id: _c_sqlite3.uint32
        reserved1: __cs__.CharArray
        version_valid_for_number: _c_sqlite3.uint32
        sqlite_version_number: _c_sqlite3.uint32
        @overload
        def __init__(
            self,
            magic: __cs__.CharArray | None = ...,
            page_size: _c_sqlite3.uint16 | None = ...,
            write_version: _c_sqlite3.uint8 | None = ...,
            read_version: _c_sqlite3.uint8 | None = ...,
            reserved_size: _c_sqlite3.uint8 | None = ...,
            max_embedded_payload_fraction: _c_sqlite3.uint8 | None = ...,
            min_embedded_payload_fraction: _c_sqlite3.uint8 | None = ...,
            leaf_payload_fraction: _c_sqlite3.uint8 | None = ...,
            change_counter: _c_sqlite3.uint32 | None = ...,
            page_count: _c_sqlite3.uint32 | None = ...,
            first_freelist_page: _c_sqlite3.uint32 | None = ...,
            freelist_page_count: _c_sqlite3.uint32 | None = ...,
            schema_cookie: _c_sqlite3.uint32 | None = ...,
            schema_format_number: _c_sqlite3.uint32 | None = ...,
            page_cache_size: _c_sqlite3.uint32 | None = ...,
            largest_root_btree_page: _c_sqlite3.uint32 | None = ...,
            text_encoding: _c_sqlite3.uint32 | None = ...,
            user_version: _c_sqlite3.uint32 | None = ...,
            incremental_vacuum_mode: _c_sqlite3.uint32 | None = ...,
            application_id: _c_sqlite3.uint32 | None = ...,
            reserved1: __cs__.CharArray | None = ...,
            version_valid_for_number: _c_sqlite3.uint32 | None = ...,
            sqlite_version_number: _c_sqlite3.uint32 | None = ...,
        ): ...
        @overload
        def __init__(self, fh: bytes | memoryview | bytearray | BinaryIO, /): ...

    class page_header(__cs__.Structure):
        flags: _c_sqlite3.uint8
        first_freeblock: _c_sqlite3.uint16
        cell_count: _c_sqlite3.uint16
        cell_start: _c_sqlite3.uint16
        fragmented_free_bytes: _c_sqlite3.uint8
        @overload
        def __init__(
            self,
            flags: _c_sqlite3.uint8 | None = ...,
            first_freeblock: _c_sqlite3.uint16 | None = ...,
            cell_count: _c_sqlite3.uint16 | None = ...,
            cell_start: _c_sqlite3.uint16 | None = ...,
            fragmented_free_bytes: _c_sqlite3.uint8 | None = ...,
        ): ...
        @overload
        def __init__(self, fh: bytes | memoryview | bytearray | BinaryIO, /): ...

    class wal_header(__cs__.Structure):
        magic: _c_sqlite3.uint32
        version: _c_sqlite3.uint32
        page_size: _c_sqlite3.uint32
        checkpoint_sequence_number: _c_sqlite3.uint32
        salt1: _c_sqlite3.uint32
        salt2: _c_sqlite3.uint32
        checksum1: _c_sqlite3.uint32
        checksum2: _c_sqlite3.uint32
        @overload
        def __init__(
            self,
            magic: _c_sqlite3.uint32 | None = ...,
            version: _c_sqlite3.uint32 | None = ...,
            page_size: _c_sqlite3.uint32 | None = ...,
            checkpoint_sequence_number: _c_sqlite3.uint32 | None = ...,
            salt1: _c_sqlite3.uint32 | None = ...,
            salt2: _c_sqlite3.uint32 | None = ...,
            checksum1: _c_sqlite3.uint32 | None = ...,
            checksum2: _c_sqlite3.uint32 | None = ...,
        ): ...
        @overload
        def __init__(self, fh: bytes | memoryview | bytearray | BinaryIO, /): ...

    class wal_frame(__cs__.Structure):
        page_number: _c_sqlite3.uint32
        page_count: _c_sqlite3.uint32
        salt1: _c_sqlite3.uint32
        salt2: _c_sqlite3.uint32
        checksum1: _c_sqlite3.uint32
        checksum2: _c_sqlite3.uint32
        @overload
        def __init__(
            self,
            page_number: _c_sqlite3.uint32 | None = ...,
            page_count: _c_sqlite3.uint32 | None = ...,
            salt1: _c_sqlite3.uint32 | None = ...,
            salt2: _c_sqlite3.uint32 | None = ...,
            checksum1: _c_sqlite3.uint32 | None = ...,
            checksum2: _c_sqlite3.uint32 | None = ...,
        ): ...
        @overload
        def __init__(self, fh: bytes | memoryview | bytearray | BinaryIO, /): ...

# Technically `c_sqlite3` is an instance of `_c_sqlite3`, but then we can't use it in type hints
c_sqlite3: TypeAlias = _c_sqlite3
