[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ntt-ai-observability-exporter"
version = "0.2.7"  # Increment from 0.1.6 to 0.1.7 for comprehensive testing
description = "NTT AI Observability Exporter for Azure Monitor OpenTelemetry in AI Foundry projects"
readme = "README.md"
authors = [
    {name = "Anand Vaibhav Singh", email = "anandvaibhav-singh_nttltd@example.com"}
]
license = {text = "MIT"}
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["ntt", "azure", "telemetry", "opentelemetry", "monitoring", "ai", "observability"]
dependencies = [
    "azure-monitor-opentelemetry==1.6.7",
    "azure-core-tracing-opentelemetry==1.0.0b12",
    "langchain_azure_ai>=0.1.5",
    "opentelemetry-sdk>=1.31.1",
    "azure-monitor-opentelemetry-exporter>=1.0.0b37",
    "opentelemetry-api>=1.15.0",
    "opentelemetry-instrumentation>=0.38b0"
]
requires-python = ">=3.8"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-mock>=3.8.0", 
    "pytest-cov>=4.0.0",
    "black>=22.3.0",
    "flake8>=4.0.1",
    "mypy>=0.950",
    "isort>=5.10.1",
    "build>=0.8.0",
    "twine>=4.0.0"
]
test = [
    "pytest>=7.0.0",
    "pytest-mock>=3.8.0",
    "pytest-cov>=4.0.0"
]
# Database instrumentation packages
databases = [
    "opentelemetry-instrumentation-psycopg2>=0.38b0",  # PostgreSQL
    "opentelemetry-instrumentation-pyodbc>=0.38b0",    # SQL Server
    "opentelemetry-instrumentation-pymysql>=0.38b0",   # MySQL
    "opentelemetry-instrumentation-sqlite3>=0.38b0",   # SQLite
    "opentelemetry-instrumentation-sqlalchemy>=0.38b0", # SQLAlchemy ORM
    "opentelemetry-instrumentation-redis>=0.38b0",     # Redis
    "opentelemetry-instrumentation-pymongo>=0.38b0"    # MongoDB
]
# Azure-specific database instrumentations
azure-databases = [
    "opentelemetry-instrumentation-psycopg2>=0.38b0",  # Azure PostgreSQL
    "opentelemetry-instrumentation-pyodbc>=0.38b0",    # Azure SQL Server
    "opentelemetry-instrumentation-pymongo>=0.38b0"    # Azure Cosmos DB (MongoDB API)
]
# All optional dependencies
all = [
    "opentelemetry-instrumentation-psycopg2>=0.38b0",
    "opentelemetry-instrumentation-pyodbc>=0.38b0",
    "opentelemetry-instrumentation-pymysql>=0.38b0",
    "opentelemetry-instrumentation-sqlite3>=0.38b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.38b0",
    "opentelemetry-instrumentation-redis>=0.38b0",
    "opentelemetry-instrumentation-pymongo>=0.38b0"
]

[project.urls]
"Homepage" = "https://github.com/nttlimited/ntt-ai-observability-exporter"
"Bug Tracker" = "https://github.com/nttlimited/ntt-ai-observability-exporter/issues"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]