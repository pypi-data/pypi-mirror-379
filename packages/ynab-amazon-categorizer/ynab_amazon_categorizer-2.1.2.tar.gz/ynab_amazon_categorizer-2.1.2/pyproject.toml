[build-system]
requires = ["setuptools>=64", "setuptools-scm>=8", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ynab-amazon-categorizer"
dynamic = ["version"]
description = "Automatically categorize Amazon transactions in YNAB with rich item information"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "GPL-3.0"}
authors = [
    {name = "dizzlkheinz"},
]
keywords = ["ynab", "amazon", "budgeting", "finance", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Financial :: Accounting",
    "Topic :: Utilities",
]
dependencies = [
    "requests>=2.25.0",
    "prompt_toolkit>=3.0.0",
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/dizzlkheinz/ynab-amazon-categorizer"
Repository = "https://github.com/dizzlkheinz/ynab-amazon-categorizer"
Issues = "https://github.com/dizzlkheinz/ynab-amazon-categorizer/issues"

[project.scripts]
ynab-amazon-categorizer = "ynab_amazon_categorizer.cli:main"

[tool.setuptools_scm]
version_file = "src/ynab_amazon_categorizer/_version.py"
fallback_version = "0.0.0+unknown"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
ynab_amazon_categorizer = ["*.txt", "*.md"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ["py39"]
include = '\\.pyi?$'

[tool.ruff]
target-version = "py39"
line-length = 88
extend-exclude = ["src/ynab_amazon_categorizer/_version.py"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
ignore_missing_imports = true
allow_redefinition = true

