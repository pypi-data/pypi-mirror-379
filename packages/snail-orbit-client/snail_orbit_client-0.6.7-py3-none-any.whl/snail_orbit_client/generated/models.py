# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2025-09-24T04:22:15+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Any, Literal, Mapping, Sequence
from uuid import UUID

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint, constr


class ActionT(Enum):
    issue_created = 'issue_created'
    issue_updated = 'issue_updated'
    issue_commented = 'issue_commented'


class ApiTokenCreate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str = Field(..., title='Name')
    expires_at: datetime | None = Field(default=None, title='Expires At')


class ApiTokenCreateOut(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str = Field(..., title='Name')
    last_digits: str = Field(..., title='Last Digits')
    created_at: datetime = Field(..., title='Created At')
    expires_at: datetime | None = Field(..., title='Expires At')
    is_active: bool = Field(..., title='Is Active')
    token: str = Field(..., title='Token')


class ApiTokenOut(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str = Field(..., title='Name')
    last_digits: str = Field(..., title='Last Digits')
    created_at: datetime = Field(..., title='Created At')
    expires_at: datetime | None = Field(..., title='Expires At')
    is_active: bool = Field(..., title='Is Active')


class AxisType(Enum):
    project = 'project'
    custom_field = 'custom_field'


class BaseListPayloadApiTokenOut(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[ApiTokenOut] = Field(..., title='Items')


class BoardCreate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str = Field(..., title='Name')
    description: str | None = Field(default=None, title='Description')
    query: str | None = Field(default=None, title='Query')
    projects: Sequence[
        constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24)
    ] = Field(..., title='Projects')
    column_field: UUID = Field(..., title='Column Field')
    """
    UUID string
    """
    columns: Sequence = Field(..., title='Columns')
    swimlane_field: UUID | None = Field(default=None, title='Swimlane Field')
    swimlanes: Sequence | None = Field(default=None, title='Swimlanes')
    card_fields: Sequence[UUID] | None = Field(default=None, title='Card Fields')
    card_colors_fields: Sequence[UUID] | None = Field(
        default=None, title='Card Colors Fields'
    )
    ui_settings: Mapping[str, Any] | None = Field(default=None, title='Ui Settings')


class BoardUpdate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str | None = Field(default=None, title='Name')
    description: str | None = Field(default=None, title='Description')
    query: str | None = Field(default=None, title='Query')
    projects: (
        Sequence[constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24)] | None
    ) = Field(default=None, title='Projects')
    column_field: UUID | None = Field(default=None, title='Column Field')
    columns: Sequence | None = Field(default=None, title='Columns')
    swimlane_field: UUID | None = Field(default=None, title='Swimlane Field')
    swimlanes: Sequence | None = Field(default=None, title='Swimlanes')
    card_fields: Sequence[UUID] | None = Field(default=None, title='Card Fields')
    card_colors_fields: Sequence[UUID] | None = Field(
        default=None, title='Card Colors Fields'
    )
    ui_settings: Mapping[str, Any] | None = Field(default=None, title='Ui Settings')


class BodyUploadAttachmentApiV1FilesPost(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    file: bytes = Field(..., title='File')


class BodyUploadProjectAvatarApiV1ProjectProjectIdAvatarPost(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    file: bytes = Field(..., title='File')


class BooleanCustomFieldAvailable(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['boolean'] = Field(default='boolean', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class BooleanCustomFieldParsed(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['boolean'] = Field(default='boolean', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    value: bool | None = Field(..., title='Value')
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class BooleanCustomFieldValueOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['boolean'] = Field(default='boolean', title='Type')
    value: bool | None = Field(..., title='Value')


class CustomFieldCopyBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    label: str = Field(..., title='Label')
    """
    Label for the copied field
    """


class CustomFieldCreateBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    label: str = Field(..., title='Label')
    is_nullable: bool = Field(..., title='Is Nullable')
    default_value: Any = Field(default=None, title='Default Value')


class CustomFieldGroupUpdateBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: constr(pattern=r'^[a-zA-Z_0-9][a-zA-Z0-9_ -]*$') | None = Field(
        default=None, title='Name'
    )
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')


class CustomFieldTypeT(Enum):
    string = 'string'
    integer = 'integer'
    float = 'float'
    boolean = 'boolean'
    date = 'date'
    datetime = 'datetime'
    duration = 'duration'
    enum = 'enum'
    enum_multi = 'enum_multi'
    state = 'state'
    version = 'version'
    version_multi = 'version_multi'
    user = 'user'
    user_multi = 'user_multi'
    owned = 'owned'
    owned_multi = 'owned_multi'


class CustomFieldUpdateBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    is_nullable: bool | None = Field(default=None, title='Is Nullable')
    default_value: Any = Field(default=None, title='Default Value')
    label: str | None = Field(default=None, title='Label')


class DashboardCreate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str = Field(..., title='Name')
    """
    Dashboard name
    """
    description: str | None = Field(default=None, title='Description')
    """
    Dashboard description
    """
    ui_settings: Mapping[str, Any] | None = Field(default=None, title='Ui Settings')
    """
    UI-specific settings for the dashboard
    """


class DashboardUpdate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str | None = Field(default=None, title='Name')
    """
    Dashboard name
    """
    description: str | None = Field(default=None, title='Description')
    """
    Dashboard description
    """
    ui_settings: Mapping[str, Any] | None = Field(default=None, title='Ui Settings')
    """
    UI-specific settings for the dashboard
    """


class DateCustomFieldAvailable(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['date'] = Field(default='date', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class DateCustomFieldParsed(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['date'] = Field(default='date', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    value: date | None = Field(..., title='Value')
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class DateCustomFieldValueOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['date'] = Field(default='date', title='Type')
    value: date | None = Field(..., title='Value')


class DateTimeCustomFieldAvailable(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['datetime'] = Field(default='datetime', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class DateTimeCustomFieldParsed(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['datetime'] = Field(default='datetime', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    value: datetime | None = Field(..., title='Value')
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class DateTimeCustomFieldValueOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['datetime'] = Field(default='datetime', title='Type')
    value: datetime | None = Field(..., title='Value')


class DurationCustomFieldAvailable(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['duration'] = Field(default='duration', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class DurationCustomFieldParsed(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['duration'] = Field(default='duration', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    value: int | None = Field(..., title='Value')
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class DurationCustomFieldValueOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['duration'] = Field(default='duration', title='Type')
    value: int | None = Field(..., title='Value')


class EncryptionKeyAlgorithmT(Enum):
    RSA = 'RSA'
    ED25519 = 'ED25519'
    X25519 = 'X25519'


class EncryptionKeyCreate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str = Field(..., title='Name')
    public_key: str = Field(..., title='Public Key')
    fingerprint: str = Field(..., title='Fingerprint')
    algorithm: EncryptionKeyAlgorithmT
    is_active: bool | None = Field(default=True, title='Is Active')
    created_on: str | None = Field(default=None, title='Created On')


class EncryptionKeyOut(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str = Field(..., title='Name')
    public_key: str = Field(..., title='Public Key')
    fingerprint: str = Field(..., title='Fingerprint')
    algorithm: EncryptionKeyAlgorithmT
    is_active: bool = Field(..., title='Is Active')
    created_on: str | None = Field(..., title='Created On')
    created_at: datetime = Field(..., title='Created At')


class EncryptionKeyUpdate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str | None = Field(default=None, title='Name')
    is_active: bool | None = Field(default=None, title='Is Active')


class EncryptionSettingsCreate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    key: EncryptionKeyCreate
    users: (
        Sequence[constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24)] | None
    ) = Field(default=None, title='Users')
    encrypt_comments: bool | None = Field(default=True, title='Encrypt Comments')
    encrypt_description: bool | None = Field(default=True, title='Encrypt Description')


class EncryptionSettingsUpdate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    users: Sequence[constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24)] = (
        Field(..., title='Users')
    )


class EncryptionTargetTypeT(Enum):
    user = 'user'
    project = 'project'
    global_ = 'global'


class EnumCustomFieldAvailable(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['enum'] = Field(default='enum', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class EnumMultiCustomFieldAvailable(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['enum_multi'] = Field(default='enum_multi', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class EnumOption(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., title='Id')
    value: str = Field(..., title='Value')
    color: str | None = Field(default=None, title='Color')
    is_archived: bool | None = Field(default=False, title='Is Archived')


class EnumOptionCreateBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    value: str = Field(..., title='Value')
    color: str | None = Field(default=None, title='Color')
    is_archived: bool | None = Field(default=False, title='Is Archived')


class EnumOptionOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    uuid: UUID = Field(..., title='Uuid')
    value: str = Field(..., title='Value')
    color: str | None = Field(default=None, title='Color')
    is_archived: bool | None = Field(default=False, title='Is Archived')


class EnumOptionUpdateBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    value: str | None = Field(default=None, title='Value')
    color: str | None = Field(default=None, title='Color')
    is_archived: bool | None = Field(default=None, title='Is Archived')


class FavoriteFilterType(Enum):
    PROJECT = 'PROJECT'


class FieldMoveBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    after_id: constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24) | None = (
        Field(default=None, title='After Id')
    )


class FileUploadOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: UUID = Field(..., title='Id')


class FloatCustomFieldAvailable(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['float'] = Field(default='float', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class FloatCustomFieldParsed(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['float'] = Field(default='float', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    value: float | None = Field(..., title='Value')
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class FloatCustomFieldValueOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['float'] = Field(default='float', title='Type')
    value: float | None = Field(..., title='Value')


class GlobalPermissions(Enum):
    """
    System-wide permissions that operate independently of any specific project.
    """

    global_project_create = 'global:project_create'


class GlobalRoleCreate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str = Field(..., title='Name')
    description: str | None = Field(default=None, title='Description')


class GlobalRoleSimpleOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    name: str = Field(..., title='Name')
    description: str | None = Field(..., title='Description')


class GlobalRoleUpdate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str | None = Field(default=None, title='Name')
    description: str | None = Field(default=None, title='Description')


class GroupCreate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str = Field(..., title='Name')
    description: str | None = Field(default=None, title='Description')


class GroupType(Enum):
    local = 'local'
    wb = 'wb'
    all_users = 'all_users'
    system_admins = 'system_admins'


class GroupUpdate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str | None = Field(default=None, title='Name')
    description: str | None = Field(default=None, title='Description')


class HashtagFieldAvailable(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['hashtag'] = Field(default='hashtag', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """


class HashtagFieldParsed(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['hashtag'] = Field(default='hashtag', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    value: str | None = Field(..., title='Value')


class IntegerCustomFieldAvailable(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['integer'] = Field(default='integer', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class IntegerCustomFieldParsed(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['integer'] = Field(default='integer', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    value: int | None = Field(..., title='Value')
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class IntegerCustomFieldValueOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['integer'] = Field(default='integer', title='Type')
    value: int | None = Field(..., title='Value')


class IssueBooleanFieldChangeOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['field'] = Field(default='field', title='Type')
    old_value: bool | None = Field(..., title='Old Value')
    new_value: bool | None = Field(..., title='New Value')
    field_id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Field Id')
    field_gid: str = Field(..., title='Field Gid')
    field_name: str = Field(..., title='Field Name')
    field_type: Literal['boolean'] = Field(default='boolean', title='Field Type')


class IssueDateFieldChangeOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['field'] = Field(default='field', title='Type')
    old_value: date | None = Field(..., title='Old Value')
    new_value: date | None = Field(..., title='New Value')
    field_id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Field Id')
    field_gid: str = Field(..., title='Field Gid')
    field_name: str = Field(..., title='Field Name')
    field_type: Literal['date'] = Field(default='date', title='Field Type')


class IssueDateTimeFieldChangeOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['field'] = Field(default='field', title='Type')
    old_value: datetime | None = Field(..., title='Old Value')
    new_value: datetime | None = Field(..., title='New Value')
    field_id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Field Id')
    field_gid: str = Field(..., title='Field Gid')
    field_name: str = Field(..., title='Field Name')
    field_type: Literal['datetime'] = Field(default='datetime', title='Field Type')


class IssueDurationFieldChangeOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['field'] = Field(default='field', title='Type')
    old_value: int | None = Field(..., title='Old Value')
    new_value: int | None = Field(..., title='New Value')
    field_id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Field Id')
    field_gid: str = Field(..., title='Field Gid')
    field_name: str = Field(..., title='Field Name')
    field_type: Literal['duration'] = Field(default='duration', title='Field Type')


class IssueEnumFieldChangeOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['field'] = Field(default='field', title='Type')
    old_value: EnumOption | None = None
    new_value: EnumOption | None = None
    field_id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Field Id')
    field_gid: str = Field(..., title='Field Gid')
    field_name: str = Field(..., title='Field Name')
    field_type: Literal['enum'] = Field(default='enum', title='Field Type')


class IssueEnumMultiFieldChangeOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['field'] = Field(default='field', title='Type')
    old_value: Sequence[EnumOption] | None = Field(..., title='Old Value')
    new_value: Sequence[EnumOption] | None = Field(..., title='New Value')
    field_id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Field Id')
    field_gid: str = Field(..., title='Field Gid')
    field_name: str = Field(..., title='Field Name')
    field_type: Literal['enum_multi'] = Field(default='enum_multi', title='Field Type')


class IssueFeedRecordType(Enum):
    comment = 'comment'
    history = 'history'


class IssueFilterBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    field: str = Field(..., title='Field')
    value: Any = Field(default=None, title='Value')


class IssueFiltersToQueryBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    filters: Sequence[IssueFilterBody] = Field(..., title='Filters')


class IssueFiltersToQueryOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    query: str = Field(..., title='Query')


class IssueFloatFieldChangeOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['field'] = Field(default='field', title='Type')
    old_value: float | None = Field(..., title='Old Value')
    new_value: float | None = Field(..., title='New Value')
    field_id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Field Id')
    field_gid: str = Field(..., title='Field Gid')
    field_name: str = Field(..., title='Field Name')
    field_type: Literal['float'] = Field(default='float', title='Field Type')


class IssueIntegerFieldChangeOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['field'] = Field(default='field', title='Type')
    old_value: int | None = Field(..., title='Old Value')
    new_value: int | None = Field(..., title='New Value')
    field_id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Field Id')
    field_gid: str = Field(..., title='Field Gid')
    field_name: str = Field(..., title='Field Name')
    field_type: Literal['integer'] = Field(default='integer', title='Field Type')


class IssueInterlinkTypeT(Enum):
    related = 'related'
    required_for = 'required_for'
    depends_on = 'depends_on'
    duplicated_by = 'duplicated_by'
    duplicates = 'duplicates'
    subtask_of = 'subtask_of'
    parent_of = 'parent_of'
    blocks = 'blocks'
    blocked_by = 'blocked_by'
    clones = 'clones'
    cloned_by = 'cloned_by'


class IssueInterlinkUpdate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: IssueInterlinkTypeT


class IssueLinkFieldOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    aliases: Sequence[str] = Field(..., title='Aliases')
    subject: str = Field(..., title='Subject')
    id_readable: str = Field(..., title='Id Readable')
    is_resolved: bool = Field(..., title='Is Resolved')
    is_closed: bool = Field(..., title='Is Closed')


class IssueListTileCreate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['issue_list'] = Field(default='issue_list', title='Type')
    name: str = Field(..., title='Name')
    """
    Display name of the tile
    """
    ui_settings: Mapping[str, Any] | None = Field(default=None, title='Ui Settings')
    """
    UI-specific settings for the tile
    """
    query: str = Field(..., title='Query')
    """
    Issue query to filter issues for this tile
    """


class IssueListTileOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: UUID = Field(..., title='Id')
    """
    Tile identifier
    """
    type: Literal['issue_list'] = Field(default='issue_list', title='Type')
    name: str = Field(..., title='Name')
    """
    Display name of the tile
    """
    ui_settings: Mapping[str, Any] | None = Field(default=None, title='Ui Settings')
    """
    UI-specific settings for the tile
    """
    query: str = Field(..., title='Query')
    """
    Issue query to filter issues for this tile
    """


class IssueMoveBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    after_issue: (
        constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24) | None
    ) = Field(default=None, title='After Issue')
    column: Any = Field(default=None, title='Column')
    swimlane: Any = Field(default=None, title='Swimlane')


class IssueQueryToFiltersBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    query: str = Field(..., title='Query')


class IssueStringFieldChangeOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['field'] = Field(default='field', title='Type')
    old_value: str | None = Field(..., title='Old Value')
    new_value: str | None = Field(..., title='New Value')
    field_id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Field Id')
    field_gid: str = Field(..., title='Field Gid')
    field_name: str = Field(..., title='Field Name')
    field_type: Literal['string'] = Field(default='string', title='Field Type')


class IssueSubjectChangeOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['subject'] = Field(default='subject', title='Type')
    old_value: str = Field(..., title='Old Value')
    new_value: str = Field(..., title='New Value')


class IssueTagCreate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    tag_id: constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24) = Field(
        ..., examples=['5eb7cf5a86d9755df3a6c593'], title='Tag Id'
    )


class IssueTagDelete(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    tag_id: constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24) = Field(
        ..., examples=['5eb7cf5a86d9755df3a6c593'], title='Tag Id'
    )


class IssueTextChangeOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['text'] = Field(default='text', title='Type')
    old_value: str | None = Field(..., title='Old Value')
    new_value: str | None = Field(..., title='New Value')


class MFASettingUpdate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    is_enabled: bool = Field(..., title='Is Enabled')
    mfa_totp_code: str | None = Field(default=None, title='Mfa Totp Code')


class ModelIDPayload(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')


class ModelIdOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: ModelIDPayload


class OwnedCustomFieldAvailable(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['owned'] = Field(default='owned', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class OwnedMultiCustomFieldAvailable(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['owned_multi'] = Field(default='owned_multi', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class OwnedOptionCreateBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    value: str = Field(..., title='Value')
    owner: constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24) | None = (
        Field(default=None, title='Owner')
    )
    color: str | None = Field(default=None, title='Color')
    is_archived: bool | None = Field(default=False, title='Is Archived')


class OwnedOptionUpdateBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    value: str | None = Field(default=None, title='Value')
    owner: constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24) | None = (
        Field(default=None, title='Owner')
    )
    color: str | None = Field(default=None, title='Color')
    is_archived: bool | None = Field(default=None, title='Is Archived')


class PasswordResetSetBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    reset_token: str = Field(..., title='Reset Token')
    password: str = Field(..., title='Password')


class PermissionTargetType(Enum):
    group = 'group'
    user = 'user'


class PermissionType(Enum):
    view = 'view'
    edit = 'edit'
    admin = 'admin'


class Profile(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    name: str = Field(..., title='Name')
    email: str = Field(..., title='Email')
    is_active: bool = Field(..., title='Is Active')
    is_admin: bool = Field(..., title='Is Admin')
    ui_settings: Mapping[str, Any] = Field(..., title='Ui Settings')
    access_claims: Sequence[GlobalPermissions] = Field(..., title='Access Claims')
    avatar: str = Field(..., title='Avatar')


class ProjectAvatarType(Enum):
    local = 'local'
    default = 'default'


class ProjectCreate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str = Field(..., title='Name')
    slug: constr(pattern=r'^\w+$') = Field(..., title='Slug')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    is_active: bool | None = Field(default=True, title='Is Active')
    encryption_settings: EncryptionSettingsCreate | None = None


class ProjectField(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    name: str = Field(..., title='Name')
    slug: str = Field(..., title='Slug')


class ProjectFieldAvailable(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['project'] = Field(default='project', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """


class ProjectPermissions(Enum):
    """
    Project-scoped permissions for collaborative entities within projects.
    """

    project_read = 'project:read'
    project_update = 'project:update'
    project_delete = 'project:delete'
    project_manage_permissions = 'project:manage_permissions'
    issue_create = 'issue:create'
    issue_read = 'issue:read'
    issue_update = 'issue:update'
    issue_delete = 'issue:delete'
    issue_manage_permissions = 'issue:manage_permissions'
    comment_create = 'comment:create'
    comment_read = 'comment:read'
    comment_update = 'comment:update'
    comment_delete_own = 'comment:delete_own'
    comment_delete = 'comment:delete'
    comment_hide = 'comment:hide'
    comment_restore = 'comment:restore'
    history_hide = 'history:hide'
    history_restore = 'history:restore'


class ProjectRoleLinkField(BaseModel):
    """
    Link field for project roles with embedded permissions.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    name: str = Field(..., title='Name')
    description: str | None = Field(..., title='Description')
    permissions: Sequence[ProjectPermissions] = Field(..., title='Permissions')


class ProjectShortOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    name: str = Field(..., title='Name')
    slug: str = Field(..., title='Slug')
    description: str | None = Field(..., title='Description')
    ai_description: str | None = Field(..., title='Ai Description')
    is_active: bool = Field(..., title='Is Active')


class ProjectUpdate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str | None = Field(default=None, title='Name')
    slug: constr(pattern=r'^\w+$') | None = Field(default=None, title='Slug')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    is_active: bool | None = Field(default=None, title='Is Active')
    card_fields: (
        Sequence[constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24)] | None
    ) = Field(default=None, title='Card Fields')
    encryption_settings: EncryptionSettingsUpdate | None = None


class QueryBuilderInput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    query: str | None = Field(default=None, title='Query')
    """
    Query string to parse (parse mode)
    """
    filters: Sequence[Mapping[str, Any]] | None = Field(default=None, title='Filters')
    """
    Filter objects to build query from (build mode)
    """


class RoleCreate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str = Field(..., title='Name')
    description: str | None = Field(default=None, title='Description')


class RoleLinkOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    name: str = Field(..., title='Name')
    description: str | None = Field(..., title='Description')


class RoleUpdate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str | None = Field(default=None, title='Name')
    description: str | None = Field(default=None, title='Description')


class ShortOptionOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    value: str = Field(..., title='Value')
    color: str | None = Field(default=None, title='Color')


class StateCustomFieldAvailable(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['state'] = Field(default='state', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class StateCustomFieldParsed(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['state'] = Field(default='state', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    value: ShortOptionOutput | None = None
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class StateOption(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., title='Id')
    value: str = Field(..., title='Value')
    is_resolved: bool | None = Field(default=False, title='Is Resolved')
    is_closed: bool | None = Field(default=False, title='Is Closed')
    is_archived: bool | None = Field(default=False, title='Is Archived')
    color: str | None = Field(default=None, title='Color')


class StateOptionCreateBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    value: str = Field(..., title='Value')
    color: str | None = Field(default=None, title='Color')
    is_resolved: bool | None = Field(default=False, title='Is Resolved')
    is_closed: bool | None = Field(default=False, title='Is Closed')
    is_archived: bool | None = Field(default=False, title='Is Archived')


class StateOptionOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    uuid: UUID = Field(..., title='Uuid')
    value: str = Field(..., title='Value')
    color: str | None = Field(default=None, title='Color')
    is_resolved: bool | None = Field(default=False, title='Is Resolved')
    is_closed: bool | None = Field(default=False, title='Is Closed')
    is_archived: bool | None = Field(default=False, title='Is Archived')


class StateOptionUpdateBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    value: str | None = Field(default=None, title='Value')
    color: str | None = Field(default=None, title='Color')
    is_resolved: bool | None = Field(default=None, title='Is Resolved')
    is_closed: bool | None = Field(default=None, title='Is Closed')
    is_archived: bool | None = Field(default=None, title='Is Archived')


class StringCustomFieldAvailable(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['string'] = Field(default='string', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class StringCustomFieldOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['string'] = Field(default='string', title='Type')
    is_nullable: bool = Field(..., title='Is Nullable')
    default_value: str | None = Field(..., title='Default Value')
    label: str = Field(..., title='Label')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    projects: Sequence[ProjectShortOutput] = Field(..., title='Projects')


class StringCustomFieldParsed(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['string'] = Field(default='string', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    value: str | None = Field(..., title='Value')
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class StringCustomFieldValueOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['string'] = Field(default='string', title='Type')
    value: str | None = Field(..., title='Value')


class SuccessOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')


class SuccessPayloadOutputApiTokenCreateOut(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: ApiTokenCreateOut


class SuccessPayloadOutputEncryptionKeyOut(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: EncryptionKeyOut


class SuccessPayloadOutputFileUploadOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: FileUploadOutput


class SuccessPayloadOutputIssueFiltersToQueryOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: IssueFiltersToQueryOutput


class SuccessPayloadOutputProfile(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: Profile


class SuccessPayloadOutputDictStrBool(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: Mapping[str, bool] = Field(..., title='Payload')


class TOTPCreateOut(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    created_at: datetime = Field(..., title='Created At')
    secret: str = Field(..., title='Secret')
    link: str = Field(..., title='Link')
    period: int = Field(..., title='Period')
    digits: int = Field(..., title='Digits')
    digest: str = Field(..., title='Digest')


class TOTPDeleteBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    mfa_totp_code: str | None = Field(default=None, title='Mfa Totp Code')


class TOTPStatusOut(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    created_at: datetime | None = Field(..., title='Created At')


class TagCreate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str = Field(..., title='Name')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    color: str | None = Field(default=None, title='Color')
    untag_on_resolve: bool | None = Field(default=False, title='Untag On Resolve')
    untag_on_close: bool | None = Field(default=False, title='Untag On Close')


class TagFieldAvailable(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['tag'] = Field(default='tag', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """


class TagLinkField(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    name: str = Field(..., title='Name')
    color: str | None = Field(..., title='Color')


class TagLinkOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    name: str = Field(..., title='Name')
    color: str | None = Field(..., title='Color')


class TagUpdate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str | None = Field(default=None, title='Name')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    color: str | None = Field(default=None, title='Color')
    untag_on_resolve: bool | None = Field(default=None, title='Untag On Resolve')
    untag_on_close: bool | None = Field(default=None, title='Untag On Close')


class TileOutputRootModel(RootModel[IssueListTileOutput]):
    model_config = ConfigDict(
        frozen=True,
    )
    root: IssueListTileOutput = Field(
        ..., discriminator='type', title='TileOutputRootModel'
    )


class TileUpdate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str | None = Field(default=None, title='Name')
    """
    Display name of the tile
    """
    query: str | None = Field(default=None, title='Query')
    """
    Issue query to filter issues for this tile
    """
    ui_settings: Mapping[str, Any] | None = Field(default=None, title='Ui Settings')
    """
    UI-specific settings for the tile
    """


class UISettingsOut(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    ui_settings: Mapping[str, Any] = Field(..., title='Ui Settings')


class UISettingsUpdate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    ui_settings: Mapping[str, Any] = Field(..., title='Ui Settings')


class UUIDPayload(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: UUID = Field(..., title='Id')


class UpdatePermissionBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    permission_type: PermissionType
    """
    New permission level
    """


class UserAuth(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    login: str = Field(..., title='Login')
    password: str = Field(..., title='Password')
    remember: bool | None = Field(default=False, title='Remember')
    mfa_totp_code: str | None = Field(default=None, title='Mfa Totp Code')


class UserAvatarType(Enum):
    external = 'external'
    local = 'local'
    default = 'default'


class UserCreate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    email: str = Field(..., title='Email')
    name: str = Field(..., title='Name')
    is_active: bool | None = Field(default=True, title='Is Active')
    is_admin: bool | None = Field(default=False, title='Is Admin')
    send_email_invite: bool | None = Field(default=False, title='Send Email Invite')
    send_pararam_invite: bool | None = Field(default=False, title='Send Pararam Invite')


class UserCustomFieldAvailable(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['user'] = Field(default='user', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class UserGroupType(Enum):
    user = 'user'
    group = 'group'


class UserLinkField(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    name: str = Field(..., title='Name')
    email: str = Field(..., title='Email')
    is_active: bool = Field(..., title='Is Active')
    use_external_avatar: bool = Field(..., title='Use External Avatar')


class UserMultiCustomFieldAvailable(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['user_multi'] = Field(default='user_multi', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class UserOptionType(Enum):
    user = 'user'
    group = 'group'


class UserOriginType(Enum):
    local = 'local'
    wb = 'wb'


class UserOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    name: str = Field(..., title='Name')
    email: str = Field(..., title='Email')
    is_active: bool = Field(..., title='Is Active')
    avatar: str = Field(..., title='Avatar')


class UserUpdate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    email: str | None = Field(default=None, title='Email')
    name: str | None = Field(default=None, title='Name')
    is_active: bool | None = Field(default=None, title='Is Active')
    is_admin: bool | None = Field(default=None, title='Is Admin')


class ValidationError(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    loc: Sequence[str | int] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class VersionCustomFieldAvailable(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['version'] = Field(default='version', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class VersionCustomFieldParsed(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['version'] = Field(default='version', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    value: ShortOptionOutput | None = None
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class VersionMultiCustomFieldAvailable(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['version_multi'] = Field(default='version_multi', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class VersionMultiCustomFieldParsed(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['version_multi'] = Field(default='version_multi', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    value: ShortOptionOutput | None = None
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class VersionOption(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., title='Id')
    value: str = Field(..., title='Value')
    release_date: datetime | None = Field(default=None, title='Release Date')
    is_released: bool | None = Field(default=False, title='Is Released')
    is_archived: bool | None = Field(default=False, title='Is Archived')


class VersionOptionCreateBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    value: str = Field(..., title='Value')
    release_date: date | None = Field(default=None, title='Release Date')
    is_released: bool | None = Field(default=False, title='Is Released')
    is_archived: bool | None = Field(default=False, title='Is Archived')


class VersionOptionOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    uuid: UUID = Field(..., title='Uuid')
    value: str = Field(..., title='Value')
    release_date: date | None = Field(..., title='Release Date')
    is_released: bool = Field(..., title='Is Released')
    is_archived: bool = Field(..., title='Is Archived')


class VersionOptionUpdateBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    value: str | None = Field(default=None, title='Value')
    release_date: date | None = Field(default=None, title='Release Date')
    is_released: bool | None = Field(default=None, title='Is Released')
    is_archived: bool | None = Field(default=None, title='Is Archived')


class VersionOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    version: str = Field(..., title='Version')


class WorkflowType(Enum):
    on_change = 'on_change'
    scheduled = 'scheduled'


class WorkflowUpdate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str | None = Field(default=None, title='Name')
    description: str | None = Field(default=None, title='Description')
    script: str | None = Field(default=None, title='Script')
    schedule: str | None = Field(default=None, title='Schedule')


class PmApiRoutesApiV1ProjectGrantPermissionBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    target_type: PermissionTargetType
    target_id: constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24) = Field(
        ..., examples=['5eb7cf5a86d9755df3a6c593'], title='Target Id'
    )
    role_id: constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24) = Field(
        ..., examples=['5eb7cf5a86d9755df3a6c593'], title='Role Id'
    )


class PmApiRoutesApiV1ProjectWorkflowOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    name: str = Field(..., title='Name')
    description: str | None = Field(..., title='Description')
    type: WorkflowType


class PmApiRoutesApiV1WorkflowWorkflowOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    name: str = Field(..., title='Name')
    description: str | None = Field(..., title='Description')
    type: WorkflowType
    script: str = Field(..., title='Script')


class PmApiViewsPermissionGrantPermissionBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    target_type: PermissionTargetType
    """
    Type of permission target
    """
    target: constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24) = Field(
        ..., examples=['5eb7cf5a86d9755df3a6c593'], title='Target'
    )
    """
    Target user or group ID
    """
    permission_type: PermissionType
    """
    Permission level to grant
    """


class PmApiViewsRolePermissionOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    key: ProjectPermissions
    label: str = Field(..., title='Label')
    granted: bool = Field(..., title='Granted')


class BodyMfaCheckMfaPost(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    mfa_totp_code: str = Field(..., title='Mfa Totp Code')


class AxisInput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: AxisType
    """
    Type of axis (project or custom field)
    """
    custom_field_gid: UUID | None = Field(default=None, title='Custom Field Gid')
    """
    Custom field GID for the axis (only when type is CUSTOM_FIELD)
    """


class BaseListOutputApiTokenOut(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadApiTokenOut


class BaseListPayloadEncryptionKeyOut(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[EncryptionKeyOut] = Field(..., title='Items')


class BaseListPayloadGlobalRoleSimpleOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[GlobalRoleSimpleOutput] = Field(..., title='Items')


class BaseListPayloadTileOutputRootModel(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[TileOutputRootModel] = Field(..., title='Items')


class BaseListPayloadUnionUserOutputShortOptionOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[UserOutput | ShortOptionOutput] = Field(..., title='Items')


class BaseListPayloadUserOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[UserOutput] = Field(..., title='Items')


class BaseListPayloadWorkflowOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[PmApiRoutesApiV1ProjectWorkflowOutput] = Field(..., title='Items')


class BooleanCustomFieldOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['boolean'] = Field(default='boolean', title='Type')
    is_nullable: bool = Field(..., title='Is Nullable')
    default_value: bool | None = Field(..., title='Default Value')
    label: str = Field(..., title='Label')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    projects: Sequence[ProjectShortOutput] = Field(..., title='Projects')


class CustomFieldGroupCreateBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: constr(pattern=r'^[a-zA-Z_0-9][a-zA-Z0-9_ -]*$') = Field(..., title='Name')
    type: CustomFieldTypeT
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    label: str | None = Field(default='default', title='Label')
    is_nullable: bool | None = Field(default=True, title='Is Nullable')
    default_value: Any = Field(default=None, title='Default Value')


class CustomFieldGroupLinkOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: CustomFieldTypeT


class CustomFieldLinkOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: CustomFieldTypeT


class CustomFieldOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: CustomFieldTypeT
    is_nullable: bool = Field(..., title='Is Nullable')
    default_value: Any = Field(..., title='Default Value')
    label: str = Field(..., title='Label')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')


class DateCustomFieldGroupWithReportValuesOutput(BaseModel):
    """
    Report-specific date custom field group with simplified values.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    type: Literal['date'] = Field(default='date', title='Type')
    values: Sequence[date | None] = Field(..., title='Values')


class DateCustomFieldGroupWithValuesOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    """
    Field definition
    """
    type: Literal['date'] = Field(default='date', title='Type')
    values: Sequence[date | None] = Field(..., title='Values')
    """
    Date values
    """


class DateCustomFieldOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['date'] = Field(default='date', title='Type')
    is_nullable: bool = Field(..., title='Is Nullable')
    default_value: date | None = Field(..., title='Default Value')
    label: str = Field(..., title='Label')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    projects: Sequence[ProjectShortOutput] = Field(..., title='Projects')


class DateTimeCustomFieldGroupWithReportValuesOutput(BaseModel):
    """
    Report-specific datetime custom field group with simplified values.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    type: Literal['datetime'] = Field(default='datetime', title='Type')
    values: Sequence[datetime | None] = Field(..., title='Values')


class DateTimeCustomFieldGroupWithValuesOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    """
    Field definition
    """
    type: Literal['datetime'] = Field(default='datetime', title='Type')
    values: Sequence[datetime | None] = Field(..., title='Values')
    """
    DateTime values
    """


class DateTimeCustomFieldOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['datetime'] = Field(default='datetime', title='Type')
    is_nullable: bool = Field(..., title='Is Nullable')
    default_value: datetime | None = Field(..., title='Default Value')
    label: str = Field(..., title='Label')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    projects: Sequence[ProjectShortOutput] = Field(..., title='Projects')


class DurationCustomFieldGroupWithReportValuesOutput(BaseModel):
    """
    Report-specific duration custom field group with simplified values.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    type: Literal['duration'] = Field(default='duration', title='Type')
    values: Sequence[int | None] = Field(..., title='Values')


class DurationCustomFieldOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['duration'] = Field(default='duration', title='Type')
    is_nullable: bool = Field(..., title='Is Nullable')
    default_value: int | None = Field(..., title='Default Value')
    label: str = Field(..., title='Label')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    projects: Sequence[ProjectShortOutput] = Field(..., title='Projects')


class EncryptionKeyPublicOut(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    fingerprint: str = Field(..., title='Fingerprint')
    target_type: EncryptionTargetTypeT
    target_id: str | None = Field(..., title='Target Id')
    public_key: str = Field(..., title='Public Key')
    algorithm: EncryptionKeyAlgorithmT


class EncryptionMetaInput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    fingerprint: str = Field(..., title='Fingerprint')
    target_type: EncryptionTargetTypeT
    target_id: (
        constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24) | None
    ) = Field(..., title='Target Id')
    algorithm: EncryptionKeyAlgorithmT
    extras: Mapping[str, Any] | None = Field(default=None, title='Extras')
    data: str = Field(..., title='Data')


class EncryptionMetaOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    fingerprint: str = Field(..., title='Fingerprint')
    target_type: EncryptionTargetTypeT
    target_id: str | None = Field(..., title='Target Id')
    algorithm: EncryptionKeyAlgorithmT
    extras: Mapping[str, Any] | None = Field(default=None, title='Extras')
    data: str = Field(..., title='Data')


class EncryptionSettingsOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    encryption_keys: Sequence[EncryptionKeyOut] = Field(..., title='Encryption Keys')
    users: Sequence[UserOutput] = Field(..., title='Users')
    encrypt_attachments: bool = Field(..., title='Encrypt Attachments')
    encrypt_comments: bool = Field(..., title='Encrypt Comments')
    encrypt_description: bool = Field(..., title='Encrypt Description')


class EnumCustomFieldGroupWithReportValuesOutput(BaseModel):
    """
    Report-specific enum custom field group with simplified values.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    type: Literal['enum'] = Field(default='enum', title='Type')
    values: Sequence[ShortOptionOutput] = Field(..., title='Values')


class EnumCustomFieldGroupWithValuesOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    """
    Field definition
    """
    type: Literal['enum'] = Field(default='enum', title='Type')
    values: Sequence[EnumOption | None] = Field(..., title='Values')
    """
    Enum option values
    """


class EnumCustomFieldOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['enum'] = Field(default='enum', title='Type')
    is_nullable: bool = Field(..., title='Is Nullable')
    default_value: EnumOption | None = None
    label: str = Field(..., title='Label')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    projects: Sequence[ProjectShortOutput] = Field(..., title='Projects')
    options: Sequence[EnumOptionOutput] = Field(..., title='Options')


class EnumCustomFieldParsed(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['enum'] = Field(default='enum', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    value: ShortOptionOutput | None = None
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class EnumCustomFieldValueOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['enum'] = Field(default='enum', title='Type')
    value: EnumOption | None = None


class EnumMultiCustomFieldGroupWithReportValuesOutput(BaseModel):
    """
    Report-specific enum multi custom field group with simplified values.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    type: Literal['enum_multi'] = Field(default='enum_multi', title='Type')
    values: Sequence[ShortOptionOutput] = Field(..., title='Values')


class EnumMultiCustomFieldOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['enum_multi'] = Field(default='enum_multi', title='Type')
    is_nullable: bool = Field(..., title='Is Nullable')
    default_value: Sequence[EnumOption] | None = Field(..., title='Default Value')
    label: str = Field(..., title='Label')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    projects: Sequence[ProjectShortOutput] = Field(..., title='Projects')
    options: Sequence[EnumOptionOutput] = Field(..., title='Options')


class EnumMultiCustomFieldParsed(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['enum_multi'] = Field(default='enum_multi', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    value: ShortOptionOutput | None = None
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class EnumMultiCustomFieldValueOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['enum_multi'] = Field(default='enum_multi', title='Type')
    value: Sequence[EnumOption] | None = Field(..., title='Value')


class FavoriteFilterOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str = Field(..., title='Name')
    """
    Display name of the favorite filter
    """
    type: FavoriteFilterType
    """
    Type of favorite filter
    """
    query: str = Field(..., title='Query')
    """
    Query string for filtering issues
    """


class FloatCustomFieldGroupWithReportValuesOutput(BaseModel):
    """
    Report-specific float custom field group with simplified values.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    type: Literal['float'] = Field(default='float', title='Type')
    values: Sequence[float | None] = Field(..., title='Values')


class FloatCustomFieldGroupWithValuesOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    """
    Field definition
    """
    type: Literal['float'] = Field(default='float', title='Type')
    values: Sequence[float | None] = Field(..., title='Values')
    """
    Float values
    """


class FloatCustomFieldOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['float'] = Field(default='float', title='Type')
    is_nullable: bool = Field(..., title='Is Nullable')
    default_value: float | None = Field(..., title='Default Value')
    label: str = Field(..., title='Label')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    projects: Sequence[ProjectShortOutput] = Field(..., title='Projects')


class GlobalPermissionOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    key: GlobalPermissions
    label: str = Field(..., title='Label')
    granted: bool = Field(..., title='Granted')


class GroupFullOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    name: str = Field(..., title='Name')
    description: str | None = Field(..., title='Description')
    type: GroupType


class GroupLinkField(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    name: str = Field(..., title='Name')
    description: str | None = Field(..., title='Description')
    type: GroupType


class GroupOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    name: str = Field(..., title='Name')
    description: str | None = Field(..., title='Description')
    type: GroupType


class HTTPValidationError(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    detail: Sequence[ValidationError] | None = Field(default=None, title='Detail')


class IntegerCustomFieldGroupWithReportValuesOutput(BaseModel):
    """
    Report-specific integer custom field group with simplified values.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    type: Literal['integer'] = Field(default='integer', title='Type')
    values: Sequence[int | None] = Field(..., title='Values')


class IntegerCustomFieldGroupWithValuesOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    """
    Field definition
    """
    type: Literal['integer'] = Field(default='integer', title='Type')
    values: Sequence[int | None] = Field(..., title='Values')
    """
    Integer values
    """


class IntegerCustomFieldOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['integer'] = Field(default='integer', title='Type')
    is_nullable: bool = Field(..., title='Is Nullable')
    default_value: int | None = Field(..., title='Default Value')
    label: str = Field(..., title='Label')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    projects: Sequence[ProjectShortOutput] = Field(..., title='Projects')


class IssueAttachmentBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: UUID = Field(..., title='Id')
    encryption: Sequence[EncryptionMetaInput] | None = Field(
        default=None, title='Encryption'
    )


class IssueAttachmentOut(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: UUID = Field(..., title='Id')
    name: str = Field(..., title='Name')
    size: int = Field(..., title='Size')
    content_type: str = Field(..., title='Content Type')
    author: UserOutput
    created_at: datetime = Field(..., title='Created At')
    ocr_text: str | None = Field(..., title='Ocr Text')
    encryption: Sequence[EncryptionMetaOutput] | None = Field(..., title='Encryption')
    url: str = Field(..., title='Url')
    """
    Download URL
    """


class IssueFilterOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldLinkOutput | str = Field(..., title='Field')
    value: Any = Field(default=None, title='Value')


class IssueInterlinkCreate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    target_issues: Sequence[
        constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24) | str
    ] = Field(..., title='Target Issues')
    type: IssueInterlinkTypeT


class IssueInterlinkOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: UUID = Field(..., title='Id')
    issue: IssueLinkFieldOutput
    type: IssueInterlinkTypeT


class IssuePermissionCreate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    target_type: PermissionTargetType
    target_id: constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24) = Field(
        ..., examples=['5eb7cf5a86d9755df3a6c593'], title='Target Id'
    )
    role_id: constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24) = Field(
        ..., examples=['5eb7cf5a86d9755df3a6c593'], title='Role Id'
    )


class IssuePermissionOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: UUID = Field(..., title='Id')
    target_type: PermissionTargetType
    target: GroupLinkField | UserLinkField = Field(..., title='Target')
    role: ProjectRoleLinkField


class IssueQueryToFiltersOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    filters: Sequence[IssueFilterOutput] = Field(..., title='Filters')


class IssueShortOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    aliases: Sequence[str] = Field(..., title='Aliases')
    project: ProjectField
    subject: str = Field(..., title='Subject')
    id_readable: str = Field(..., title='Id Readable')


class IssueSpentTimeRecordOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: UUID = Field(..., title='Id')
    user: UserOutput
    spent_time: int = Field(..., title='Spent Time')
    created_at: datetime = Field(..., title='Created At')


class IssueStateFieldChangeOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['field'] = Field(default='field', title='Type')
    old_value: StateOption | None = None
    new_value: StateOption | None = None
    field_id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Field Id')
    field_gid: str = Field(..., title='Field Gid')
    field_name: str = Field(..., title='Field Name')
    field_type: Literal['state'] = Field(default='state', title='Field Type')


class IssueUserFieldChangeOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['field'] = Field(default='field', title='Type')
    old_value: UserOutput | None = None
    new_value: UserOutput | None = None
    field_id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Field Id')
    field_gid: str = Field(..., title='Field Gid')
    field_name: str = Field(..., title='Field Name')
    field_type: Literal['user'] = Field(default='user', title='Field Type')


class IssueUserMultiFieldChangeOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['field'] = Field(default='field', title='Type')
    old_value: Sequence[UserOutput] | None = Field(..., title='Old Value')
    new_value: Sequence[UserOutput] | None = Field(..., title='New Value')
    field_id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Field Id')
    field_gid: str = Field(..., title='Field Gid')
    field_name: str = Field(..., title='Field Name')
    field_type: Literal['user_multi'] = Field(default='user_multi', title='Field Type')


class IssueVersionFieldChangeOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['field'] = Field(default='field', title='Type')
    old_value: VersionOption | None = None
    new_value: VersionOption | None = None
    field_id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Field Id')
    field_gid: str = Field(..., title='Field Gid')
    field_name: str = Field(..., title='Field Name')
    field_type: Literal['version'] = Field(default='version', title='Field Type')


class IssueVersionMultiFieldChangeOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['field'] = Field(default='field', title='Type')
    old_value: Sequence[VersionOption] | None = Field(..., title='Old Value')
    new_value: Sequence[VersionOption] | None = Field(..., title='New Value')
    field_id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Field Id')
    field_gid: str = Field(..., title='Field Gid')
    field_name: str = Field(..., title='Field Name')
    field_type: Literal['version_multi'] = Field(
        default='version_multi', title='Field Type'
    )


class MFASettingOut(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    is_enabled: bool = Field(..., title='Is Enabled')
    totp: TOTPStatusOut


class OwnedCustomFieldGroupWithReportValuesOutput(BaseModel):
    """
    Report-specific owned custom field group with simplified values.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    type: Literal['owned'] = Field(default='owned', title='Type')
    values: Sequence[ShortOptionOutput] = Field(..., title='Values')


class OwnedCustomFieldParsed(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['owned'] = Field(default='owned', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    value: ShortOptionOutput | None = None
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class OwnedMultiCustomFieldGroupWithReportValuesOutput(BaseModel):
    """
    Report-specific owned multi custom field group with simplified values.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    type: Literal['owned_multi'] = Field(default='owned_multi', title='Type')
    values: Sequence[ShortOptionOutput] = Field(..., title='Values')


class OwnedMultiCustomFieldParsed(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['owned_multi'] = Field(default='owned_multi', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    value: ShortOptionOutput | None = None
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class OwnedOption(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., title='Id')
    """
    Unique identifier for the option
    """
    value: str = Field(..., title='Value')
    """
    Display value of the option
    """
    owner: UserLinkField | None = None
    """
    User who owns this option
    """
    color: str | None = Field(default=None, title='Color')
    """
    Color associated with the option
    """
    is_archived: bool | None = Field(default=False, title='Is Archived')
    """
    Whether the option is archived
    """


class OwnedOptionOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    uuid: UUID = Field(..., title='Uuid')
    value: str = Field(..., title='Value')
    owner: UserOutput | None = None
    color: str | None = Field(default=None, title='Color')
    is_archived: bool | None = Field(default=False, title='Is Archived')


class PermissionCategoryOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    label: str = Field(..., title='Label')
    permissions: Sequence[PmApiViewsRolePermissionOutput] = Field(
        ..., title='Permissions'
    )


class PermissionSourceOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    permission_id: UUID = Field(..., title='Permission Id')
    role: RoleLinkOutput
    type: PermissionTargetType
    source_group: GroupOutput | None = None


class ProjectAxisOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['project'] = Field(default='project', title='Type')
    """
    Axis type identifier
    """
    values: Sequence[ProjectField] = Field(..., title='Values')
    """
    List of projects in this axis
    """


class ProjectFieldParsed(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['project'] = Field(default='project', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    value: ProjectShortOutput | None = None


class ProjectListItemOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    name: str = Field(..., title='Name')
    slug: str = Field(..., title='Slug')
    description: str | None = Field(..., title='Description')
    ai_description: str | None = Field(..., title='Ai Description')
    is_active: bool = Field(..., title='Is Active')
    is_subscribed: bool = Field(..., title='Is Subscribed')
    is_favorite: bool = Field(..., title='Is Favorite')
    avatar_type: ProjectAvatarType
    is_encrypted: bool = Field(..., title='Is Encrypted')
    access_claims: Sequence[ProjectPermissions] = Field(..., title='Access Claims')
    avatar: str | None = Field(..., title='Avatar')


class ProjectOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    name: str = Field(..., title='Name')
    slug: str = Field(..., title='Slug')
    description: str | None = Field(..., title='Description')
    ai_description: str | None = Field(..., title='Ai Description')
    is_active: bool = Field(..., title='Is Active')
    custom_fields: Sequence[CustomFieldOutput] = Field(..., title='Custom Fields')
    card_fields: Sequence[str] = Field(..., title='Card Fields')
    workflows: Sequence[PmApiRoutesApiV1ProjectWorkflowOutput] = Field(
        ..., title='Workflows'
    )
    is_subscribed: bool | None = Field(default=False, title='Is Subscribed')
    is_favorite: bool | None = Field(default=False, title='Is Favorite')
    avatar_type: ProjectAvatarType
    encryption_settings: EncryptionSettingsOutput | None = None
    access_claims: Sequence[ProjectPermissions] = Field(..., title='Access Claims')
    is_encrypted: bool = Field(..., title='Is Encrypted')
    avatar: str | None = Field(..., title='Avatar')


class ProjectPermission(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: UUID | None = Field(default=None, title='Id')
    target_type: PermissionTargetType
    target: GroupLinkField | UserLinkField = Field(..., title='Target')
    role: ProjectRoleLinkField


class ReportCreate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str = Field(..., title='Name')
    description: str | None = Field(default=None, title='Description')
    query: str | None = Field(default=None, title='Query')
    projects: (
        Sequence[constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24)] | None
    ) = Field(default=None, title='Projects')
    axis_1: AxisInput
    axis_2: AxisInput | None = None
    ui_settings: Mapping[str, Any] | None = Field(default=None, title='Ui Settings')
    """
    UI-specific settings for the report
    """
    permissions: Sequence[PmApiViewsPermissionGrantPermissionBody] | None = Field(
        default=None, title='Permissions'
    )


class ReportUpdate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str | None = Field(default=None, title='Name')
    description: str | None = Field(default=None, title='Description')
    query: str | None = Field(default=None, title='Query')
    projects: (
        Sequence[constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24)] | None
    ) = Field(default=None, title='Projects')
    axis_1: AxisInput | None = None
    axis_2: AxisInput | None = None
    ui_settings: Mapping[str, Any] | None = Field(default=None, title='Ui Settings')
    permissions: Sequence[PmApiViewsPermissionGrantPermissionBody] | None = Field(
        default=None, title='Permissions'
    )


class RoleOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    name: str = Field(..., title='Name')
    description: str | None = Field(..., title='Description')
    permissions: Sequence[PermissionCategoryOutput] = Field(..., title='Permissions')


class RootModelAnnotatedUnionStringCustomFieldAvailableIntegerCustomFieldAvailableFloatCustomFieldAvailableBooleanCustomFieldAvailableDateCustomFieldAvailableDateTimeCustomFieldAvailableDurationCustomFieldAvailableEnumCustomFieldAvailableEnumMultiCustomFieldAvailableStateCustomFieldAvailableVersionCustomFieldAvailableVersionMultiCustomFieldAvailableUserCustomFieldAvailableUserMultiCustomFieldAvailableOwnedCustomFieldAvailableOwnedMultiCustomFieldAvailableProjectFieldAvailableHashtagFieldAvailableTagFieldAvailableFieldInfoAnnotationNoneTypeRequiredTrueDiscriminatorType(
    RootModel[
        StringCustomFieldAvailable
        | IntegerCustomFieldAvailable
        | FloatCustomFieldAvailable
        | BooleanCustomFieldAvailable
        | DateCustomFieldAvailable
        | DateTimeCustomFieldAvailable
        | DurationCustomFieldAvailable
        | EnumCustomFieldAvailable
        | EnumMultiCustomFieldAvailable
        | StateCustomFieldAvailable
        | VersionCustomFieldAvailable
        | VersionMultiCustomFieldAvailable
        | UserCustomFieldAvailable
        | UserMultiCustomFieldAvailable
        | OwnedCustomFieldAvailable
        | OwnedMultiCustomFieldAvailable
        | ProjectFieldAvailable
        | HashtagFieldAvailable
        | TagFieldAvailable
    ]
):
    model_config = ConfigDict(
        frozen=True,
    )
    root: (
        StringCustomFieldAvailable
        | IntegerCustomFieldAvailable
        | FloatCustomFieldAvailable
        | BooleanCustomFieldAvailable
        | DateCustomFieldAvailable
        | DateTimeCustomFieldAvailable
        | DurationCustomFieldAvailable
        | EnumCustomFieldAvailable
        | EnumMultiCustomFieldAvailable
        | StateCustomFieldAvailable
        | VersionCustomFieldAvailable
        | VersionMultiCustomFieldAvailable
        | UserCustomFieldAvailable
        | UserMultiCustomFieldAvailable
        | OwnedCustomFieldAvailable
        | OwnedMultiCustomFieldAvailable
        | ProjectFieldAvailable
        | HashtagFieldAvailable
        | TagFieldAvailable
    ) = Field(
        ...,
        discriminator='type',
        title="RootModel[Annotated[Union[StringCustomFieldAvailable, IntegerCustomFieldAvailable, FloatCustomFieldAvailable, BooleanCustomFieldAvailable, DateCustomFieldAvailable, DateTimeCustomFieldAvailable, DurationCustomFieldAvailable, EnumCustomFieldAvailable, EnumMultiCustomFieldAvailable, StateCustomFieldAvailable, VersionCustomFieldAvailable, VersionMultiCustomFieldAvailable, UserCustomFieldAvailable, UserMultiCustomFieldAvailable, OwnedCustomFieldAvailable, OwnedMultiCustomFieldAvailable, ProjectFieldAvailable, HashtagFieldAvailable, TagFieldAvailable], FieldInfo(annotation=NoneType, required=True, discriminator='type')]]",
    )


class ScheduledWorkflowOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    name: str = Field(..., title='Name')
    description: str | None = Field(..., title='Description')
    type: WorkflowType
    script: str = Field(..., title='Script')
    schedule: str = Field(..., title='Schedule')


class SearchCreate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str = Field(..., title='Name')
    query: str = Field(..., title='Query')
    description: str | None = Field(default=None, title='Description')
    permissions: Sequence[PmApiViewsPermissionGrantPermissionBody] | None = Field(
        default=None, title='Permissions'
    )


class SearchUpdate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str | None = Field(default=None, title='Name')
    query: str | None = Field(default=None, title='Query')
    description: str | None = Field(default=None, title='Description')
    permissions: Sequence[PmApiViewsPermissionGrantPermissionBody] | None = Field(
        default=None, title='Permissions'
    )


class StateCustomFieldGroupWithReportValuesOutput(BaseModel):
    """
    Report-specific state custom field group with simplified values.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    type: Literal['state'] = Field(default='state', title='Type')
    values: Sequence[ShortOptionOutput] = Field(..., title='Values')


class StateCustomFieldGroupWithValuesOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    """
    Field definition
    """
    type: Literal['state'] = Field(default='state', title='Type')
    values: Sequence[StateOption | None] = Field(..., title='Values')
    """
    State option values
    """


class StateCustomFieldOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['state'] = Field(default='state', title='Type')
    is_nullable: bool = Field(..., title='Is Nullable')
    default_value: StateOptionOutput | None = None
    label: str = Field(..., title='Label')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    projects: Sequence[ProjectShortOutput] = Field(..., title='Projects')
    options: Sequence[StateOptionOutput] = Field(..., title='Options')


class StateCustomFieldValueOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['state'] = Field(default='state', title='Type')
    value: StateOption | None = None


class StringCustomFieldGroupOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['string'] = Field(default='string', title='Type')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    fields: Sequence[StringCustomFieldOutput] = Field(..., title='Fields')


class StringCustomFieldGroupWithReportValuesOutput(BaseModel):
    """
    Report-specific string custom field group with simplified values.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    type: Literal['string'] = Field(default='string', title='Type')
    values: Sequence[str | None] = Field(..., title='Values')


class StringCustomFieldGroupWithValuesOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    """
    Field definition
    """
    type: Literal['string'] = Field(default='string', title='Type')
    values: Sequence[str | None] = Field(..., title='Values')
    """
    String values
    """


class SuccessPayloadOutputGroupFullOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: GroupFullOutput


class SuccessPayloadOutputIssueQueryToFiltersOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: IssueQueryToFiltersOutput


class SuccessPayloadOutputMFASettingOut(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: MFASettingOut


class SuccessPayloadOutputProjectOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: ProjectOutput


class SuccessPayloadOutputRoleOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: RoleOutput


class SuccessPayloadOutputTOTPCreateOut(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: TOTPCreateOut


class SuccessPayloadOutputTileOutputRootModel(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: TileOutputRootModel


class SuccessPayloadOutputUISettingsOut(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: UISettingsOut


class SuccessPayloadOutputUnionWorkflowOutputScheduledWorkflowOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: PmApiRoutesApiV1WorkflowWorkflowOutput | ScheduledWorkflowOutput = Field(
        ..., title='Payload'
    )


class SuccessPayloadOutputVersionOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: VersionOutput


class TagFieldParsed(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['tag'] = Field(default='tag', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    value: TagLinkField | None = None


class UUIDOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: UUIDPayload


class UserCustomFieldGroupWithReportValuesOutput(BaseModel):
    """
    Report-specific user custom field group with simplified values.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    type: Literal['user'] = Field(default='user', title='Type')
    values: Sequence[UserOutput | None] = Field(..., title='Values')


class UserCustomFieldGroupWithValuesOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    """
    Field definition
    """
    type: Literal['user'] = Field(default='user', title='Type')
    values: Sequence[UserOutput | None] = Field(..., title='Values')
    """
    User values
    """


class UserCustomFieldParsed(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['user'] = Field(default='user', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    value: UserOutput | None = None
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class UserCustomFieldValueOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['user'] = Field(default='user', title='Type')
    value: UserOutput | None = None


class UserFullOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    name: str = Field(..., title='Name')
    email: str = Field(..., title='Email')
    is_active: bool = Field(..., title='Is Active')
    is_admin: bool = Field(..., title='Is Admin')
    origin: UserOriginType
    avatar_type: UserAvatarType
    mfa_enabled: bool = Field(..., title='Mfa Enabled')
    avatar: str = Field(..., title='Avatar')


class UserGroupOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: UserGroupType
    data: UserOutput | GroupOutput = Field(..., title='Data')


class UserMultiCustomFieldGroupWithReportValuesOutput(BaseModel):
    """
    Report-specific user multi custom field group with simplified values.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    type: Literal['user_multi'] = Field(default='user_multi', title='Type')
    values: Sequence[UserOutput | None] = Field(..., title='Values')


class UserMultiCustomFieldParsed(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['user_multi'] = Field(default='user_multi', title='Type')
    name: str = Field(..., title='Name')
    """
    Field name
    """
    value: UserOutput | None = None
    gid: str | None = Field(..., title='Gid')
    """
    Custom field group identifier (null for reserved fields)
    """


class UserMultiCustomFieldValueOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['user_multi'] = Field(default='user_multi', title='Type')
    value: Sequence[UserOutput] | None = Field(..., title='Value')


class UserOptionCreateBody(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: UserOptionType
    value: constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24) = Field(
        ..., examples=['5eb7cf5a86d9755df3a6c593'], title='Value'
    )


class UserOptionOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    uuid: UUID = Field(..., title='Uuid')
    type: UserOptionType
    value: UserOutput | GroupOutput = Field(..., title='Value')


class VersionCustomFieldGroupWithReportValuesOutput(BaseModel):
    """
    Report-specific version custom field group with simplified values.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    type: Literal['version'] = Field(default='version', title='Type')
    values: Sequence[ShortOptionOutput] = Field(..., title='Values')


class VersionCustomFieldGroupWithValuesOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    """
    Field definition
    """
    type: Literal['version'] = Field(default='version', title='Type')
    values: Sequence[VersionOption | None] = Field(..., title='Values')
    """
    Version option values
    """


class VersionCustomFieldOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['version'] = Field(default='version', title='Type')
    is_nullable: bool = Field(..., title='Is Nullable')
    default_value: VersionOption | None = None
    label: str = Field(..., title='Label')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    projects: Sequence[ProjectShortOutput] = Field(..., title='Projects')
    options: Sequence[VersionOptionOutput] = Field(..., title='Options')


class VersionCustomFieldValueOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['version'] = Field(default='version', title='Type')
    value: VersionOption | None = None


class VersionMultiCustomFieldGroupWithReportValuesOutput(BaseModel):
    """
    Report-specific version multi custom field group with simplified values.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    type: Literal['version_multi'] = Field(default='version_multi', title='Type')
    values: Sequence[ShortOptionOutput] = Field(..., title='Values')


class VersionMultiCustomFieldOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['version_multi'] = Field(default='version_multi', title='Type')
    is_nullable: bool = Field(..., title='Is Nullable')
    default_value: Sequence[VersionOption] | None = Field(..., title='Default Value')
    label: str = Field(..., title='Label')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    projects: Sequence[ProjectShortOutput] = Field(..., title='Projects')
    options: Sequence[VersionOptionOutput] = Field(..., title='Options')


class VersionMultiCustomFieldValueOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['version_multi'] = Field(default='version_multi', title='Type')
    value: Sequence[VersionOption] | None = Field(..., title='Value')


class WorkflowCreate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    name: str = Field(..., title='Name')
    description: str | None = Field(default=None, title='Description')
    type: WorkflowType
    script: str = Field(..., title='Script')
    schedule: str | None = Field(default=None, title='Schedule')


class PmApiViewsPermissionPermissionOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: UUID = Field(..., title='Id')
    target_type: PermissionTargetType
    target: UserOutput | GroupOutput = Field(..., title='Target')
    permission_type: PermissionType


class AxisOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: AxisType
    """
    Type of axis (project or custom field)
    """
    custom_field: CustomFieldGroupLinkOutput | None = None
    """
    Custom field for the axis (only when type is CUSTOM_FIELD)
    """


class BaseListOutputEncryptionKeyOut(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadEncryptionKeyOut


class BaseListOutputGlobalRoleSimpleOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadGlobalRoleSimpleOutput


class BaseListOutputTileOutputRootModel(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadTileOutputRootModel


class BaseListOutputUnionUserOutputShortOptionOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadUnionUserOutputShortOptionOutput


class BaseListOutputUserOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadUserOutput


class BaseListOutputWorkflowOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadWorkflowOutput


class BaseListPayloadCustomFieldGroupLinkOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[CustomFieldGroupLinkOutput] = Field(..., title='Items')


class BaseListPayloadCustomFieldLinkOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[CustomFieldLinkOutput] = Field(..., title='Items')


class BaseListPayloadEncryptionKeyPublicOut(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[EncryptionKeyPublicOut] = Field(..., title='Items')


class BaseListPayloadFavoriteFilterOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[FavoriteFilterOutput] = Field(..., title='Items')


class BaseListPayloadGroupFullOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[GroupFullOutput] = Field(..., title='Items')


class BaseListPayloadIssuePermissionOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[IssuePermissionOutput] = Field(..., title='Items')


class BaseListPayloadPermissionOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[PmApiViewsPermissionPermissionOutput] = Field(..., title='Items')


class BaseListPayloadProjectListItemOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[ProjectListItemOutput] = Field(..., title='Items')


class BaseListPayloadRoleOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[RoleOutput] = Field(..., title='Items')


class BaseListPayloadUnionEnumOptionOutputUserOutputStateOptionOutputVersionOptionOutputOwnedOptionOutput(
    BaseModel
):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[
        EnumOptionOutput
        | UserOutput
        | StateOptionOutput
        | VersionOptionOutput
        | OwnedOptionOutput
    ] = Field(..., title='Items')


class BaseListPayloadUnionWorkflowOutputScheduledWorkflowOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[
        PmApiRoutesApiV1WorkflowWorkflowOutput | ScheduledWorkflowOutput
    ] = Field(..., title='Items')


class BaseListPayloadUserFullOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[UserFullOutput] = Field(..., title='Items')


class BaseListPayloadUserGroupOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[UserGroupOutput] = Field(..., title='Items')


class BoardColumnOutputRootModel(
    RootModel[
        EnumCustomFieldGroupWithValuesOutput
        | StateCustomFieldGroupWithValuesOutput
        | VersionCustomFieldGroupWithValuesOutput
    ]
):
    model_config = ConfigDict(
        frozen=True,
    )
    root: (
        EnumCustomFieldGroupWithValuesOutput
        | StateCustomFieldGroupWithValuesOutput
        | VersionCustomFieldGroupWithValuesOutput
    ) = Field(..., discriminator='type', title='BoardColumnOutputRootModel')


class BooleanCustomFieldGroupOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['boolean'] = Field(default='boolean', title='Type')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    fields: Sequence[BooleanCustomFieldOutput] = Field(..., title='Fields')


class BooleanCustomFieldGroupWithReportValuesOutput(BaseModel):
    """
    Report-specific boolean custom field group with simplified values.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    type: Literal['boolean'] = Field(default='boolean', title='Type')
    values: Sequence[bool | None] = Field(..., title='Values')


class BooleanCustomFieldGroupWithValuesOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    field: CustomFieldGroupLinkOutput
    """
    Field definition
    """
    type: Literal['boolean'] = Field(default='boolean', title='Type')
    values: Sequence[bool | None] = Field(..., title='Values')
    """
    Boolean values
    """


class DashboardOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    """
    Dashboard identifier
    """
    name: str = Field(..., title='Name')
    """
    Dashboard name
    """
    description: str | None = Field(..., title='Description')
    """
    Dashboard description
    """
    tiles: Sequence[TileOutputRootModel] = Field(..., title='Tiles')
    """
    List of tiles in this dashboard
    """
    ui_settings: Mapping[str, Any] | None = Field(default=None, title='Ui Settings')
    """
    UI-specific settings for the dashboard
    """
    created_by: UserOutput
    """
    Dashboard creator
    """
    permissions: Sequence[PmApiViewsPermissionPermissionOutput] = Field(
        ..., title='Permissions'
    )
    """
    Dashboard permissions
    """
    current_permission: PermissionType
    """
    Current user permission
    """


class DateCustomFieldGroupOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['date'] = Field(default='date', title='Type')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    fields: Sequence[DateCustomFieldOutput] = Field(..., title='Fields')


class DateTimeCustomFieldGroupOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['datetime'] = Field(default='datetime', title='Type')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    fields: Sequence[DateTimeCustomFieldOutput] = Field(..., title='Fields')


class DurationCustomFieldGroupOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['duration'] = Field(default='duration', title='Type')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    fields: Sequence[DurationCustomFieldOutput] = Field(..., title='Fields')


class EncryptedObjectInput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    value: str = Field(..., title='Value')
    encryption: Sequence[EncryptionMetaInput] | None = Field(
        default=None, title='Encryption'
    )


class EncryptedObjectOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    value: str = Field(..., title='Value')
    encryption: Sequence[EncryptionMetaOutput] | None = Field(
        default=None, title='Encryption'
    )


class EnumCustomFieldGroupOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['enum'] = Field(default='enum', title='Type')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    fields: Sequence[EnumCustomFieldOutput] = Field(..., title='Fields')


class EnumMultiCustomFieldGroupOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['enum_multi'] = Field(default='enum_multi', title='Type')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    fields: Sequence[EnumMultiCustomFieldOutput] = Field(..., title='Fields')


class FloatCustomFieldGroupOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['float'] = Field(default='float', title='Type')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    fields: Sequence[FloatCustomFieldOutput] = Field(..., title='Fields')


class GlobalPermissionCategoryOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    label: str = Field(..., title='Label')
    permissions: Sequence[GlobalPermissionOutput] = Field(..., title='Permissions')


class IntegerCustomFieldGroupOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['integer'] = Field(default='integer', title='Type')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    fields: Sequence[IntegerCustomFieldOutput] = Field(..., title='Fields')


class IssueCommentCreate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    text: EncryptedObjectInput | None = None
    attachments: Sequence[IssueAttachmentBody] | None = Field(
        default=None, title='Attachments'
    )
    spent_time: conint(ge=0) | None = Field(default=0, title='Spent Time')
    """
    Time spent in seconds
    """


class IssueCommentOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: UUID = Field(..., title='Id')
    text: EncryptedObjectOutput | None = None
    author: UserOutput
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')
    attachments: Sequence[IssueAttachmentOut] = Field(..., title='Attachments')
    is_hidden: bool = Field(..., title='Is Hidden')
    spent_time: int = Field(..., title='Spent Time')


class IssueCommentUpdate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    text: EncryptedObjectInput | None = None
    attachments: Sequence[IssueAttachmentBody] | None = Field(
        default=None, title='Attachments'
    )
    spent_time: conint(ge=0) | None = Field(default=None, title='Spent Time')
    """
    Time spent in seconds
    """


class IssueCreate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    project_id: constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24) = Field(
        ..., examples=['5eb7cf5a86d9755df3a6c593'], title='Project Id'
    )
    subject: str = Field(..., title='Subject')
    text: EncryptedObjectInput | None = None
    fields: Mapping[str, Any] | None = Field(default=None, title='Fields')
    attachments: Sequence[IssueAttachmentBody] | None = Field(
        default=None, title='Attachments'
    )


class IssueDraftCreate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    project_id: (
        constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24) | None
    ) = Field(default=None, title='Project Id')
    subject: str | None = Field(default=None, title='Subject')
    text: EncryptedObjectInput | None = None
    fields: Mapping[str, Any] | None = Field(default=None, title='Fields')
    attachments: Sequence[IssueAttachmentBody] | None = Field(
        default=None, title='Attachments'
    )


class IssueDraftUpdate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    project_id: (
        constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24) | None
    ) = Field(default=None, title='Project Id')
    subject: str | None = Field(default=None, title='Subject')
    text: EncryptedObjectInput | None = None
    fields: Mapping[str, Any] | None = Field(default=None, title='Fields')
    attachments: Sequence[IssueAttachmentBody] | None = Field(
        default=None, title='Attachments'
    )


class IssueOwnedFieldChangeOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['field'] = Field(default='field', title='Type')
    old_value: OwnedOption | None = None
    new_value: OwnedOption | None = None
    field_id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Field Id')
    field_gid: str = Field(..., title='Field Gid')
    field_name: str = Field(..., title='Field Name')
    field_type: Literal['owned'] = Field(default='owned', title='Field Type')


class IssueOwnedMultiFieldChangeOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['field'] = Field(default='field', title='Type')
    old_value: Sequence[OwnedOption] | None = Field(..., title='Old Value')
    new_value: Sequence[OwnedOption] | None = Field(..., title='New Value')
    field_id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Field Id')
    field_gid: str = Field(..., title='Field Gid')
    field_name: str = Field(..., title='Field Name')
    field_type: Literal['owned_multi'] = Field(
        default='owned_multi', title='Field Type'
    )


class IssueSpentTimeOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    total_spent_time: int | None = Field(..., title='Total Spent Time')
    records: Sequence[IssueSpentTimeRecordOutput] = Field(..., title='Records')


class IssueUpdate(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    project_id: (
        constr(pattern=r'^[0-9a-f]{24}$', min_length=24, max_length=24) | None
    ) = Field(default=None, title='Project Id')
    subject: str | None = Field(default=None, title='Subject')
    text: EncryptedObjectInput | None = None
    fields: Mapping[str, Any] | None = Field(default=None, title='Fields')
    attachments: Sequence[IssueAttachmentBody] | None = Field(
        default=None, title='Attachments'
    )


class OwnedCustomFieldOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['owned'] = Field(default='owned', title='Type')
    is_nullable: bool = Field(..., title='Is Nullable')
    default_value: OwnedOptionOutput | None = None
    label: str = Field(..., title='Label')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    projects: Sequence[ProjectShortOutput] = Field(..., title='Projects')
    options: Sequence[OwnedOptionOutput] = Field(..., title='Options')


class OwnedCustomFieldValueOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['owned'] = Field(default='owned', title='Type')
    value: OwnedOption | None = None


class OwnedMultiCustomFieldOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['owned_multi'] = Field(default='owned_multi', title='Type')
    is_nullable: bool = Field(..., title='Is Nullable')
    default_value: Sequence[OwnedOptionOutput] | None = Field(
        ..., title='Default Value'
    )
    label: str = Field(..., title='Label')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    projects: Sequence[ProjectShortOutput] = Field(..., title='Projects')
    options: Sequence[OwnedOptionOutput] = Field(..., title='Options')


class OwnedMultiCustomFieldValueOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['owned_multi'] = Field(default='owned_multi', title='Type')
    value: Sequence[OwnedOption] | None = Field(..., title='Value')


class PermissionResolvedOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    key: ProjectPermissions
    label: str = Field(..., title='Label')
    granted: bool = Field(..., title='Granted')
    sources: Sequence[PermissionSourceOutput] = Field(..., title='Sources')


class ProjectPermissionOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: UUID = Field(..., title='Id')
    target_type: PermissionTargetType
    target: GroupOutput | UserOutput = Field(..., title='Target')
    role: RoleOutput


class ReportDataOutput(BaseModel):
    """
    Unified report data output structure (similar to BoardIssuesOutput).
    """

    model_config = ConfigDict(
        frozen=True,
    )
    axis_1: (
        StringCustomFieldGroupWithReportValuesOutput
        | IntegerCustomFieldGroupWithReportValuesOutput
        | FloatCustomFieldGroupWithReportValuesOutput
        | BooleanCustomFieldGroupWithReportValuesOutput
        | DateCustomFieldGroupWithReportValuesOutput
        | DateTimeCustomFieldGroupWithReportValuesOutput
        | DurationCustomFieldGroupWithReportValuesOutput
        | UserCustomFieldGroupWithReportValuesOutput
        | UserMultiCustomFieldGroupWithReportValuesOutput
        | EnumCustomFieldGroupWithReportValuesOutput
        | EnumMultiCustomFieldGroupWithReportValuesOutput
        | StateCustomFieldGroupWithReportValuesOutput
        | VersionCustomFieldGroupWithReportValuesOutput
        | VersionMultiCustomFieldGroupWithReportValuesOutput
        | OwnedCustomFieldGroupWithReportValuesOutput
        | OwnedMultiCustomFieldGroupWithReportValuesOutput
        | ProjectAxisOutput
        | None
    ) = Field(default=None, title='Axis 1')
    """
    First axis configuration with discriminated values (like columns)
    """
    axis_2: (
        StringCustomFieldGroupWithReportValuesOutput
        | IntegerCustomFieldGroupWithReportValuesOutput
        | FloatCustomFieldGroupWithReportValuesOutput
        | BooleanCustomFieldGroupWithReportValuesOutput
        | DateCustomFieldGroupWithReportValuesOutput
        | DateTimeCustomFieldGroupWithReportValuesOutput
        | DurationCustomFieldGroupWithReportValuesOutput
        | UserCustomFieldGroupWithReportValuesOutput
        | UserMultiCustomFieldGroupWithReportValuesOutput
        | EnumCustomFieldGroupWithReportValuesOutput
        | EnumMultiCustomFieldGroupWithReportValuesOutput
        | StateCustomFieldGroupWithReportValuesOutput
        | VersionCustomFieldGroupWithReportValuesOutput
        | VersionMultiCustomFieldGroupWithReportValuesOutput
        | OwnedCustomFieldGroupWithReportValuesOutput
        | OwnedMultiCustomFieldGroupWithReportValuesOutput
        | ProjectAxisOutput
        | None
    ) = Field(default=None, title='Axis 2')
    """
    Second axis configuration with discriminated values (like swimlanes)
    """
    data: Sequence[Sequence[int]] = Field(..., title='Data')
    """
    2D array of issue counts: [axis_2_value_index][axis_1_value_index]
    """


class ReportOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., title='Id')
    name: str = Field(..., title='Name')
    description: str | None = Field(..., title='Description')
    query: str | None = Field(..., title='Query')
    projects: Sequence[ProjectField] = Field(..., title='Projects')
    axis_1: AxisOutput
    axis_2: AxisOutput | None = None
    ui_settings: Mapping[str, Any] | None = Field(default=None, title='Ui Settings')
    """
    UI-specific settings for the report
    """
    created_by: UserOutput
    permissions: Sequence[PmApiViewsPermissionPermissionOutput] = Field(
        ..., title='Permissions'
    )
    is_favorite: bool = Field(..., title='Is Favorite')
    """
    Whether report is favorited by current user
    """
    current_permission: PermissionType
    """
    Current user permission
    """


class RootModelAnnotatedUnionStringCustomFieldParsedIntegerCustomFieldParsedFloatCustomFieldParsedBooleanCustomFieldParsedDateCustomFieldParsedDateTimeCustomFieldParsedDurationCustomFieldParsedEnumCustomFieldParsedEnumMultiCustomFieldParsedStateCustomFieldParsedVersionCustomFieldParsedVersionMultiCustomFieldParsedUserCustomFieldParsedUserMultiCustomFieldParsedOwnedCustomFieldParsedOwnedMultiCustomFieldParsedProjectFieldParsedHashtagFieldParsedTagFieldParsedFieldInfoAnnotationNoneTypeRequiredTrueDiscriminatorType(
    RootModel[
        StringCustomFieldParsed
        | IntegerCustomFieldParsed
        | FloatCustomFieldParsed
        | BooleanCustomFieldParsed
        | DateCustomFieldParsed
        | DateTimeCustomFieldParsed
        | DurationCustomFieldParsed
        | EnumCustomFieldParsed
        | EnumMultiCustomFieldParsed
        | StateCustomFieldParsed
        | VersionCustomFieldParsed
        | VersionMultiCustomFieldParsed
        | UserCustomFieldParsed
        | UserMultiCustomFieldParsed
        | OwnedCustomFieldParsed
        | OwnedMultiCustomFieldParsed
        | ProjectFieldParsed
        | HashtagFieldParsed
        | TagFieldParsed
    ]
):
    model_config = ConfigDict(
        frozen=True,
    )
    root: (
        StringCustomFieldParsed
        | IntegerCustomFieldParsed
        | FloatCustomFieldParsed
        | BooleanCustomFieldParsed
        | DateCustomFieldParsed
        | DateTimeCustomFieldParsed
        | DurationCustomFieldParsed
        | EnumCustomFieldParsed
        | EnumMultiCustomFieldParsed
        | StateCustomFieldParsed
        | VersionCustomFieldParsed
        | VersionMultiCustomFieldParsed
        | UserCustomFieldParsed
        | UserMultiCustomFieldParsed
        | OwnedCustomFieldParsed
        | OwnedMultiCustomFieldParsed
        | ProjectFieldParsed
        | HashtagFieldParsed
        | TagFieldParsed
    ) = Field(
        ...,
        discriminator='type',
        title="RootModel[Annotated[Union[StringCustomFieldParsed, IntegerCustomFieldParsed, FloatCustomFieldParsed, BooleanCustomFieldParsed, DateCustomFieldParsed, DateTimeCustomFieldParsed, DurationCustomFieldParsed, EnumCustomFieldParsed, EnumMultiCustomFieldParsed, StateCustomFieldParsed, VersionCustomFieldParsed, VersionMultiCustomFieldParsed, UserCustomFieldParsed, UserMultiCustomFieldParsed, OwnedCustomFieldParsed, OwnedMultiCustomFieldParsed, ProjectFieldParsed, HashtagFieldParsed, TagFieldParsed], FieldInfo(annotation=NoneType, required=True, discriminator='type')]]",
    )


class SearchOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    name: str = Field(..., title='Name')
    query: str = Field(..., title='Query')
    description: str | None = Field(..., title='Description')
    created_by: UserOutput
    permissions: Sequence[PmApiViewsPermissionPermissionOutput] = Field(
        ..., title='Permissions'
    )
    current_permission: PermissionType
    """
    Current user permission
    """


class StateCustomFieldGroupOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['state'] = Field(default='state', title='Type')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    fields: Sequence[StateCustomFieldOutput] = Field(..., title='Fields')


class SuccessPayloadOutputDashboardOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: DashboardOutput


class SuccessPayloadOutputIssueCommentOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: IssueCommentOutput


class SuccessPayloadOutputIssueSpentTimeOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: IssueSpentTimeOutput


class SuccessPayloadOutputReportDataOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: ReportDataOutput


class SuccessPayloadOutputReportOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: ReportOutput


class SuccessPayloadOutputSearchOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: SearchOutput


class SuccessPayloadOutputUserFullOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: UserFullOutput


class TagOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    name: str = Field(..., title='Name')
    description: str | None = Field(..., title='Description')
    ai_description: str | None = Field(..., title='Ai Description')
    color: str | None = Field(..., title='Color')
    untag_on_resolve: bool = Field(..., title='Untag On Resolve')
    untag_on_close: bool = Field(..., title='Untag On Close')
    created_by: UserOutput
    permissions: Sequence[PmApiViewsPermissionPermissionOutput] = Field(
        ..., title='Permissions'
    )
    current_permission: PermissionType
    """
    Current user permission
    """


class UserCustomFieldOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['user'] = Field(default='user', title='Type')
    is_nullable: bool = Field(..., title='Is Nullable')
    default_value: UserLinkField | None = None
    label: str = Field(..., title='Label')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    projects: Sequence[ProjectShortOutput] = Field(..., title='Projects')
    options: Sequence[UserOptionOutput] = Field(..., title='Options')
    users: Sequence[UserOutput] = Field(..., title='Users')


class UserMultiCustomFieldOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['user_multi'] = Field(default='user_multi', title='Type')
    is_nullable: bool = Field(..., title='Is Nullable')
    default_value: Sequence[UserLinkField] | None = Field(..., title='Default Value')
    label: str = Field(..., title='Label')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    projects: Sequence[ProjectShortOutput] = Field(..., title='Projects')
    options: Sequence[UserOptionOutput] = Field(..., title='Options')
    users: Sequence[UserOutput] = Field(..., title='Users')


class VersionCustomFieldGroupOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['version'] = Field(default='version', title='Type')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    fields: Sequence[VersionCustomFieldOutput] = Field(..., title='Fields')


class VersionMultiCustomFieldGroupOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['version_multi'] = Field(default='version_multi', title='Type')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    fields: Sequence[VersionMultiCustomFieldOutput] = Field(..., title='Fields')


class PmApiRoutesApiV1GroupGlobalRoleOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    name: str = Field(..., title='Name')
    description: str | None = Field(..., title='Description')
    permissions: Sequence[GlobalPermissionCategoryOutput] = Field(
        ..., title='Permissions'
    )


class PmApiViewsGlobalRoleGlobalRoleOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    name: str = Field(..., title='Name')
    description: str | None = Field(..., title='Description')
    permissions: Sequence[GlobalPermissionCategoryOutput] = Field(
        ..., title='Permissions'
    )


class PmApiViewsOutputBaseListPayloadGlobalRoleOutput1(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[PmApiViewsGlobalRoleGlobalRoleOutput] = Field(..., title='Items')


class PmApiViewsOutputBaseListPayloadGlobalRoleOutput2(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[PmApiRoutesApiV1GroupGlobalRoleOutput] = Field(..., title='Items')


class BaseListOutputCustomFieldGroupLinkOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadCustomFieldGroupLinkOutput


class BaseListOutputCustomFieldLinkOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadCustomFieldLinkOutput


class BaseListOutputEncryptionKeyPublicOut(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadEncryptionKeyPublicOut


class BaseListOutputFavoriteFilterOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadFavoriteFilterOutput


class BaseListOutputGroupFullOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadGroupFullOutput


class BaseListOutputIssuePermissionOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadIssuePermissionOutput


class BaseListOutputPermissionOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadPermissionOutput


class BaseListOutputProjectListItemOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadProjectListItemOutput


class BaseListOutputRoleOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadRoleOutput


class BaseListOutputUnionEnumOptionOutputUserOutputStateOptionOutputVersionOptionOutputOwnedOptionOutput(
    BaseModel
):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadUnionEnumOptionOutputUserOutputStateOptionOutputVersionOptionOutputOwnedOptionOutput


class BaseListOutputUnionWorkflowOutputScheduledWorkflowOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadUnionWorkflowOutputScheduledWorkflowOutput


class BaseListOutputUserFullOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadUserFullOutput


class BaseListOutputUserGroupOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadUserGroupOutput


class BaseListPayloadDashboardOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[DashboardOutput] = Field(..., title='Items')


class BaseListPayloadIssueCommentOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[IssueCommentOutput] = Field(..., title='Items')


class BaseListPayloadProjectPermissionOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[ProjectPermissionOutput] = Field(..., title='Items')


class BaseListPayloadReportOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[ReportOutput] = Field(..., title='Items')


class BaseListPayloadSearchOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[SearchOutput] = Field(..., title='Items')


class BaseListPayloadTagOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[TagOutput] = Field(..., title='Items')


class BoardSwimlaneOutputRootModel(
    RootModel[
        StringCustomFieldGroupWithValuesOutput
        | IntegerCustomFieldGroupWithValuesOutput
        | FloatCustomFieldGroupWithValuesOutput
        | BooleanCustomFieldGroupWithValuesOutput
        | DateCustomFieldGroupWithValuesOutput
        | DateTimeCustomFieldGroupWithValuesOutput
        | UserCustomFieldGroupWithValuesOutput
        | EnumCustomFieldGroupWithValuesOutput
        | StateCustomFieldGroupWithValuesOutput
        | VersionCustomFieldGroupWithValuesOutput
    ]
):
    model_config = ConfigDict(
        frozen=True,
    )
    root: (
        StringCustomFieldGroupWithValuesOutput
        | IntegerCustomFieldGroupWithValuesOutput
        | FloatCustomFieldGroupWithValuesOutput
        | BooleanCustomFieldGroupWithValuesOutput
        | DateCustomFieldGroupWithValuesOutput
        | DateTimeCustomFieldGroupWithValuesOutput
        | UserCustomFieldGroupWithValuesOutput
        | EnumCustomFieldGroupWithValuesOutput
        | StateCustomFieldGroupWithValuesOutput
        | VersionCustomFieldGroupWithValuesOutput
    ) = Field(..., discriminator='type', title='BoardSwimlaneOutputRootModel')


class CustomFieldOutputRootModel(
    RootModel[
        StringCustomFieldOutput
        | IntegerCustomFieldOutput
        | FloatCustomFieldOutput
        | BooleanCustomFieldOutput
        | DateCustomFieldOutput
        | DateTimeCustomFieldOutput
        | DurationCustomFieldOutput
        | UserCustomFieldOutput
        | UserMultiCustomFieldOutput
        | EnumCustomFieldOutput
        | EnumMultiCustomFieldOutput
        | StateCustomFieldOutput
        | VersionCustomFieldOutput
        | VersionMultiCustomFieldOutput
        | OwnedCustomFieldOutput
        | OwnedMultiCustomFieldOutput
    ]
):
    model_config = ConfigDict(
        frozen=True,
    )
    root: (
        StringCustomFieldOutput
        | IntegerCustomFieldOutput
        | FloatCustomFieldOutput
        | BooleanCustomFieldOutput
        | DateCustomFieldOutput
        | DateTimeCustomFieldOutput
        | DurationCustomFieldOutput
        | UserCustomFieldOutput
        | UserMultiCustomFieldOutput
        | EnumCustomFieldOutput
        | EnumMultiCustomFieldOutput
        | StateCustomFieldOutput
        | VersionCustomFieldOutput
        | VersionMultiCustomFieldOutput
        | OwnedCustomFieldOutput
        | OwnedMultiCustomFieldOutput
    ) = Field(..., discriminator='type', title='CustomFieldOutputRootModel')


class CustomFieldValueOutputRootModel(
    RootModel[
        StringCustomFieldValueOutput
        | IntegerCustomFieldValueOutput
        | FloatCustomFieldValueOutput
        | BooleanCustomFieldValueOutput
        | DateCustomFieldValueOutput
        | DateTimeCustomFieldValueOutput
        | DurationCustomFieldValueOutput
        | UserCustomFieldValueOutput
        | UserMultiCustomFieldValueOutput
        | EnumCustomFieldValueOutput
        | EnumMultiCustomFieldValueOutput
        | OwnedCustomFieldValueOutput
        | OwnedMultiCustomFieldValueOutput
        | StateCustomFieldValueOutput
        | VersionCustomFieldValueOutput
        | VersionMultiCustomFieldValueOutput
    ]
):
    model_config = ConfigDict(
        frozen=True,
    )
    root: (
        StringCustomFieldValueOutput
        | IntegerCustomFieldValueOutput
        | FloatCustomFieldValueOutput
        | BooleanCustomFieldValueOutput
        | DateCustomFieldValueOutput
        | DateTimeCustomFieldValueOutput
        | DurationCustomFieldValueOutput
        | UserCustomFieldValueOutput
        | UserMultiCustomFieldValueOutput
        | EnumCustomFieldValueOutput
        | EnumMultiCustomFieldValueOutput
        | OwnedCustomFieldValueOutput
        | OwnedMultiCustomFieldValueOutput
        | StateCustomFieldValueOutput
        | VersionCustomFieldValueOutput
        | VersionMultiCustomFieldValueOutput
    ) = Field(..., discriminator='type', title='CustomFieldValueOutputRootModel')


class IssueDraftOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    project: ProjectField | None = None
    subject: str | None = Field(..., title='Subject')
    text: EncryptedObjectOutput | None = None
    fields: Mapping[str, CustomFieldValueOutputRootModel] = Field(..., title='Fields')
    attachments: Sequence[IssueAttachmentOut] = Field(..., title='Attachments')
    created_at: datetime = Field(..., title='Created At')
    created_by: UserOutput


class IssueFieldChangeOutputRootModel(
    RootModel[
        IssueStringFieldChangeOutput
        | IssueIntegerFieldChangeOutput
        | IssueFloatFieldChangeOutput
        | IssueBooleanFieldChangeOutput
        | IssueDateFieldChangeOutput
        | IssueDateTimeFieldChangeOutput
        | IssueUserFieldChangeOutput
        | IssueUserMultiFieldChangeOutput
        | IssueEnumFieldChangeOutput
        | IssueEnumMultiFieldChangeOutput
        | IssueOwnedFieldChangeOutput
        | IssueOwnedMultiFieldChangeOutput
        | IssueStateFieldChangeOutput
        | IssueVersionFieldChangeOutput
        | IssueVersionMultiFieldChangeOutput
        | IssueDurationFieldChangeOutput
    ]
):
    model_config = ConfigDict(
        frozen=True,
    )
    root: (
        IssueStringFieldChangeOutput
        | IssueIntegerFieldChangeOutput
        | IssueFloatFieldChangeOutput
        | IssueBooleanFieldChangeOutput
        | IssueDateFieldChangeOutput
        | IssueDateTimeFieldChangeOutput
        | IssueUserFieldChangeOutput
        | IssueUserMultiFieldChangeOutput
        | IssueEnumFieldChangeOutput
        | IssueEnumMultiFieldChangeOutput
        | IssueOwnedFieldChangeOutput
        | IssueOwnedMultiFieldChangeOutput
        | IssueStateFieldChangeOutput
        | IssueVersionFieldChangeOutput
        | IssueVersionMultiFieldChangeOutput
        | IssueDurationFieldChangeOutput
    ) = Field(..., discriminator='field_type', title='IssueFieldChangeOutputRootModel')


class IssueListOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    aliases: Sequence[str] = Field(..., title='Aliases')
    project: ProjectField
    subject: str = Field(..., title='Subject')
    text: EncryptedObjectOutput | None = None
    fields: Mapping[str, CustomFieldValueOutputRootModel] = Field(..., title='Fields')
    is_subscribed: bool = Field(..., title='Is Subscribed')
    id_readable: str = Field(..., title='Id Readable')
    created_by: UserOutput
    created_at: datetime = Field(..., title='Created At')
    updated_by: UserOutput
    updated_at: datetime = Field(..., title='Updated At')
    is_resolved: bool = Field(..., title='Is Resolved')
    resolved_at: datetime | None = Field(..., title='Resolved At')
    is_closed: bool = Field(..., title='Is Closed')
    closed_at: datetime | None = Field(..., title='Closed At')
    interlinks: Sequence[IssueInterlinkOutput] = Field(..., title='Interlinks')
    tags: Sequence[TagLinkOutput] = Field(..., title='Tags')
    permissions: Sequence[ProjectPermission] = Field(..., title='Permissions')
    disable_project_permissions_inheritance: bool = Field(
        ..., title='Disable Project Permissions Inheritance'
    )
    has_custom_permissions: bool = Field(..., title='Has Custom Permissions')
    access_claims: Sequence[ProjectPermissions] = Field(..., title='Access Claims')


class IssueOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    aliases: Sequence[str] = Field(..., title='Aliases')
    project: ProjectField
    subject: str = Field(..., title='Subject')
    text: EncryptedObjectOutput | None = None
    fields: Mapping[str, CustomFieldValueOutputRootModel] = Field(..., title='Fields')
    attachments: Sequence[IssueAttachmentOut] = Field(..., title='Attachments')
    is_subscribed: bool = Field(..., title='Is Subscribed')
    id_readable: str = Field(..., title='Id Readable')
    created_by: UserOutput
    created_at: datetime = Field(..., title='Created At')
    updated_by: UserOutput
    updated_at: datetime = Field(..., title='Updated At')
    is_resolved: bool = Field(..., title='Is Resolved')
    resolved_at: datetime | None = Field(..., title='Resolved At')
    is_closed: bool = Field(..., title='Is Closed')
    closed_at: datetime | None = Field(..., title='Closed At')
    interlinks: Sequence[IssueInterlinkOutput] = Field(..., title='Interlinks')
    tags: Sequence[TagLinkOutput] = Field(..., title='Tags')
    permissions: Sequence[ProjectPermission] = Field(..., title='Permissions')
    disable_project_permissions_inheritance: bool = Field(
        ..., title='Disable Project Permissions Inheritance'
    )
    has_custom_permissions: bool = Field(..., title='Has Custom Permissions')
    access_claims: Sequence[ProjectPermissions] = Field(..., title='Access Claims')


class OwnedCustomFieldGroupOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['owned'] = Field(default='owned', title='Type')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    fields: Sequence[OwnedCustomFieldOutput] = Field(..., title='Fields')


class OwnedMultiCustomFieldGroupOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['owned_multi'] = Field(default='owned_multi', title='Type')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    fields: Sequence[OwnedMultiCustomFieldOutput] = Field(..., title='Fields')


class PermissionCategoryResolvedOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    label: str = Field(..., title='Label')
    permissions: Sequence[PermissionResolvedOutput] = Field(..., title='Permissions')


class ProjectResolvedPermissionOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    user: UserOutput
    permissions: Sequence[PermissionCategoryResolvedOutput] = Field(
        ..., title='Permissions'
    )


class QueryBuilderOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    query: str = Field(..., title='Query')
    """
    Original query string
    """
    filters: Sequence[
        RootModelAnnotatedUnionStringCustomFieldParsedIntegerCustomFieldParsedFloatCustomFieldParsedBooleanCustomFieldParsedDateCustomFieldParsedDateTimeCustomFieldParsedDurationCustomFieldParsedEnumCustomFieldParsedEnumMultiCustomFieldParsedStateCustomFieldParsedVersionCustomFieldParsedVersionMultiCustomFieldParsedUserCustomFieldParsedUserMultiCustomFieldParsedOwnedCustomFieldParsedOwnedMultiCustomFieldParsedProjectFieldParsedHashtagFieldParsedTagFieldParsedFieldInfoAnnotationNoneTypeRequiredTrueDiscriminatorType
    ] = Field(..., title='Filters')
    """
    Fields currently in query with their values
    """
    available_fields: Sequence[
        RootModelAnnotatedUnionStringCustomFieldAvailableIntegerCustomFieldAvailableFloatCustomFieldAvailableBooleanCustomFieldAvailableDateCustomFieldAvailableDateTimeCustomFieldAvailableDurationCustomFieldAvailableEnumCustomFieldAvailableEnumMultiCustomFieldAvailableStateCustomFieldAvailableVersionCustomFieldAvailableVersionMultiCustomFieldAvailableUserCustomFieldAvailableUserMultiCustomFieldAvailableOwnedCustomFieldAvailableOwnedMultiCustomFieldAvailableProjectFieldAvailableHashtagFieldAvailableTagFieldAvailableFieldInfoAnnotationNoneTypeRequiredTrueDiscriminatorType
    ] = Field(..., title='Available Fields')
    """
    All queryable fields (using gid for custom fields)
    """


class SuccessPayloadOutputCustomFieldOutputRootModel(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: CustomFieldOutputRootModel


class SuccessPayloadOutputGlobalRoleOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: PmApiViewsGlobalRoleGlobalRoleOutput


class SuccessPayloadOutputIssueDraftOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: IssueDraftOutput


class SuccessPayloadOutputIssueOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: IssueOutput


class SuccessPayloadOutputQueryBuilderOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: QueryBuilderOutput


class SuccessPayloadOutputTagOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: TagOutput


class UserCustomFieldGroupOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['user'] = Field(default='user', title='Type')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    fields: Sequence[UserCustomFieldOutput] = Field(..., title='Fields')


class UserMultiCustomFieldGroupOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    gid: str = Field(..., title='Gid')
    name: str = Field(..., title='Name')
    type: Literal['user_multi'] = Field(default='user_multi', title='Type')
    description: str | None = Field(default=None, title='Description')
    ai_description: str | None = Field(default=None, title='Ai Description')
    fields: Sequence[UserMultiCustomFieldOutput] = Field(..., title='Fields')


class PmApiViewsOutputBaseListOutputGlobalRoleOutput1(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: PmApiViewsOutputBaseListPayloadGlobalRoleOutput1


class PmApiViewsOutputBaseListOutputGlobalRoleOutput2(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: PmApiViewsOutputBaseListPayloadGlobalRoleOutput2


class BaseListOutputDashboardOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadDashboardOutput


class BaseListOutputIssueCommentOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadIssueCommentOutput


class BaseListOutputProjectPermissionOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadProjectPermissionOutput


class BaseListOutputReportOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadReportOutput


class BaseListOutputSearchOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadSearchOutput


class BaseListOutputTagOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadTagOutput


class BaseListPayloadCustomFieldOutputRootModel(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[CustomFieldOutputRootModel] = Field(..., title='Items')


class BaseListPayloadIssueDraftOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[IssueDraftOutput] = Field(..., title='Items')


class BaseListPayloadIssueListOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[IssueListOutput] = Field(..., title='Items')


class BaseListPayloadProjectResolvedPermissionOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[ProjectResolvedPermissionOutput] = Field(..., title='Items')


class BoardIssuesOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    columns: BoardColumnOutputRootModel
    """
    Column configuration with discriminated values
    """
    swimlanes: BoardSwimlaneOutputRootModel | None = None
    """
    Swimlane configuration with discriminated values
    """
    issues: Sequence[Sequence[Sequence[IssueListOutput]]] = Field(..., title='Issues')


class BoardOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str = Field(..., examples=['5eb7cf5a86d9755df3a6c593'], title='Id')
    """
    Board identifier
    """
    name: str = Field(..., title='Name')
    """
    Board name
    """
    description: str | None = Field(..., title='Description')
    """
    Board description
    """
    query: str | None = Field(..., title='Query')
    """
    Board query filter
    """
    projects: Sequence[ProjectField] = Field(..., title='Projects')
    """
    Associated projects
    """
    columns: BoardColumnOutputRootModel
    """
    Column configuration with discriminated values
    """
    swimlanes: BoardSwimlaneOutputRootModel | None = None
    """
    Swimlane configuration with discriminated values
    """
    card_fields: Sequence[CustomFieldGroupLinkOutput] = Field(..., title='Card Fields')
    """
    Fields shown on cards
    """
    card_colors_fields: Sequence[CustomFieldGroupLinkOutput] = Field(
        ..., title='Card Colors Fields'
    )
    """
    Fields used for card colors
    """
    ui_settings: Mapping[str, Any] = Field(..., title='Ui Settings')
    """
    UI configuration settings
    """
    created_by: UserOutput
    """
    Board creator
    """
    permissions: Sequence[PmApiViewsPermissionPermissionOutput] = Field(
        ..., title='Permissions'
    )
    """
    Board permissions
    """
    is_favorite: bool = Field(..., title='Is Favorite')
    """
    Whether board is favorited by current user
    """
    current_permission: PermissionType
    """
    Current user permission
    """


class CustomFieldGroupOutputRootModel(
    RootModel[
        StringCustomFieldGroupOutput
        | IntegerCustomFieldGroupOutput
        | FloatCustomFieldGroupOutput
        | BooleanCustomFieldGroupOutput
        | DateCustomFieldGroupOutput
        | DateTimeCustomFieldGroupOutput
        | DurationCustomFieldGroupOutput
        | UserCustomFieldGroupOutput
        | UserMultiCustomFieldGroupOutput
        | EnumCustomFieldGroupOutput
        | EnumMultiCustomFieldGroupOutput
        | StateCustomFieldGroupOutput
        | VersionCustomFieldGroupOutput
        | VersionMultiCustomFieldGroupOutput
        | OwnedCustomFieldGroupOutput
        | OwnedMultiCustomFieldGroupOutput
    ]
):
    model_config = ConfigDict(
        frozen=True,
    )
    root: (
        StringCustomFieldGroupOutput
        | IntegerCustomFieldGroupOutput
        | FloatCustomFieldGroupOutput
        | BooleanCustomFieldGroupOutput
        | DateCustomFieldGroupOutput
        | DateTimeCustomFieldGroupOutput
        | DurationCustomFieldGroupOutput
        | UserCustomFieldGroupOutput
        | UserMultiCustomFieldGroupOutput
        | EnumCustomFieldGroupOutput
        | EnumMultiCustomFieldGroupOutput
        | StateCustomFieldGroupOutput
        | VersionCustomFieldGroupOutput
        | VersionMultiCustomFieldGroupOutput
        | OwnedCustomFieldGroupOutput
        | OwnedMultiCustomFieldGroupOutput
    ) = Field(..., discriminator='type', title='CustomFieldGroupOutputRootModel')


class IssueChangeOutputRootModel(
    RootModel[
        IssueSubjectChangeOutput
        | IssueFieldChangeOutputRootModel
        | IssueTextChangeOutput
    ]
):
    model_config = ConfigDict(
        frozen=True,
    )
    root: (
        IssueSubjectChangeOutput
        | IssueFieldChangeOutputRootModel
        | IssueTextChangeOutput
    ) = Field(..., discriminator='type', title='IssueChangeOutputRootModel')


class IssueHistoryOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: UUID = Field(..., title='Id')
    author: UserOutput
    time: datetime = Field(..., title='Time')
    changes: Sequence[IssueChangeOutputRootModel] = Field(..., title='Changes')
    is_hidden: bool = Field(..., title='Is Hidden')


class SuccessPayloadOutputBoardIssuesOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BoardIssuesOutput


class SuccessPayloadOutputBoardOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BoardOutput


class SuccessPayloadOutputCustomFieldGroupOutputRootModel(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: CustomFieldGroupOutputRootModel


class SuccessPayloadOutputIssueHistoryOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: IssueHistoryOutput


class Activity(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    author: UserOutput
    action: ActionT
    issue: IssueShortOutput
    time: datetime = Field(..., title='Time')
    changes: Sequence[IssueChangeOutputRootModel] | None = Field(
        default=None, title='Changes'
    )


class BaseListOutputCustomFieldOutputRootModel(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadCustomFieldOutputRootModel


class BaseListOutputIssueDraftOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadIssueDraftOutput


class BaseListOutputIssueListOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadIssueListOutput


class BaseListOutputProjectResolvedPermissionOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadProjectResolvedPermissionOutput


class BaseListPayloadActivity(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[Activity] = Field(..., title='Items')


class BaseListPayloadBoardOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[BoardOutput] = Field(..., title='Items')


class BaseListPayloadCustomFieldGroupOutputRootModel(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[CustomFieldGroupOutputRootModel] = Field(..., title='Items')


class BaseListPayloadIssueHistoryOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[IssueHistoryOutput] = Field(..., title='Items')


class IssueFeedRecordOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: IssueFeedRecordType
    data: IssueCommentOutput | IssueHistoryOutput = Field(..., title='Data')
    time: datetime | None = Field(default=None, title='Time')


class BaseListOutputActivity(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadActivity


class BaseListOutputBoardOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadBoardOutput


class BaseListOutputCustomFieldGroupOutputRootModel(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadCustomFieldGroupOutputRootModel


class BaseListOutputIssueHistoryOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadIssueHistoryOutput


class BaseListPayloadIssueFeedRecordOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    count: int = Field(..., title='Count')
    limit: int = Field(..., title='Limit')
    offset: int = Field(..., title='Offset')
    items: Sequence[IssueFeedRecordOutput] = Field(..., title='Items')


class BaseListOutputIssueFeedRecordOutput(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    success: bool | None = Field(default=True, title='Success')
    payload: BaseListPayloadIssueFeedRecordOutput


# Enhanced wrappers for discriminated unions
# These provide transparent property access without .root


class TileOutput(TileOutputRootModel):
    """Enhanced wrapper for TileOutputRootModel with transparent property access."""

    def __getattr__(self, name: str):
        """Provide transparent access to root properties."""
        if hasattr(self.root, name):
            return getattr(self.root, name)
        raise AttributeError(f"'TileOutput' object has no attribute '{name}'")

    def __setattr__(self, name: str, value):
        """Provide transparent setting of root properties."""
        if name == 'root' or name.startswith('_'):
            super().__setattr__(name, value)
        elif hasattr(self.root, name):
            setattr(self.root, name, value)
        else:
            super().__setattr__(name, value)

    @property
    def model_fields(self):
        """Expose root model fields for compatibility."""
        return self.root.model_fields if hasattr(self.root, 'model_fields') else {}

    def model_dump(self, **kwargs):
        """Delegate model_dump to root for serialization."""
        return self.root.model_dump(**kwargs)

    def model_dump_json(self, **kwargs):
        """Delegate model_dump_json to root for JSON serialization."""
        return self.root.model_dump_json(**kwargs)


class RootModelAnnotatedUnionStringCustomFieldAvailableIntegerCustomFieldAvailableFloatCustomFieldAvailableBooleanCustomFieldAvailableDateCustomFieldAvailableDateTimeCustomFieldAvailableDurationCustomFieldAvailableEnumCustomFieldAvailableEnumMultiCustomFieldAvailableStateCustomFieldAvailableVersionCustomFieldAvailableVersionMultiCustomFieldAvailableUserCustomFieldAvailableUserMultiCustomFieldAvailableOwnedCustomFieldAvailableOwnedMultiCustomFieldAvailableProjectFieldAvailableHashtagFieldAvailableTagFieldAvailableFieldInfoAnnotationNoneTypeRequiredTrueDiscriminatorTypeEnhanced(
    RootModelAnnotatedUnionStringCustomFieldAvailableIntegerCustomFieldAvailableFloatCustomFieldAvailableBooleanCustomFieldAvailableDateCustomFieldAvailableDateTimeCustomFieldAvailableDurationCustomFieldAvailableEnumCustomFieldAvailableEnumMultiCustomFieldAvailableStateCustomFieldAvailableVersionCustomFieldAvailableVersionMultiCustomFieldAvailableUserCustomFieldAvailableUserMultiCustomFieldAvailableOwnedCustomFieldAvailableOwnedMultiCustomFieldAvailableProjectFieldAvailableHashtagFieldAvailableTagFieldAvailableFieldInfoAnnotationNoneTypeRequiredTrueDiscriminatorType
):
    """Enhanced wrapper for RootModelAnnotatedUnionStringCustomFieldAvailableIntegerCustomFieldAvailableFloatCustomFieldAvailableBooleanCustomFieldAvailableDateCustomFieldAvailableDateTimeCustomFieldAvailableDurationCustomFieldAvailableEnumCustomFieldAvailableEnumMultiCustomFieldAvailableStateCustomFieldAvailableVersionCustomFieldAvailableVersionMultiCustomFieldAvailableUserCustomFieldAvailableUserMultiCustomFieldAvailableOwnedCustomFieldAvailableOwnedMultiCustomFieldAvailableProjectFieldAvailableHashtagFieldAvailableTagFieldAvailableFieldInfoAnnotationNoneTypeRequiredTrueDiscriminatorType with transparent property access."""

    def __getattr__(self, name: str):
        """Provide transparent access to root properties."""
        if hasattr(self.root, name):
            return getattr(self.root, name)
        raise AttributeError(
            f"'RootModelAnnotatedUnionStringCustomFieldAvailableIntegerCustomFieldAvailableFloatCustomFieldAvailableBooleanCustomFieldAvailableDateCustomFieldAvailableDateTimeCustomFieldAvailableDurationCustomFieldAvailableEnumCustomFieldAvailableEnumMultiCustomFieldAvailableStateCustomFieldAvailableVersionCustomFieldAvailableVersionMultiCustomFieldAvailableUserCustomFieldAvailableUserMultiCustomFieldAvailableOwnedCustomFieldAvailableOwnedMultiCustomFieldAvailableProjectFieldAvailableHashtagFieldAvailableTagFieldAvailableFieldInfoAnnotationNoneTypeRequiredTrueDiscriminatorTypeEnhanced' object has no attribute '{name}'"
        )

    def __setattr__(self, name: str, value):
        """Provide transparent setting of root properties."""
        if name == 'root' or name.startswith('_'):
            super().__setattr__(name, value)
        elif hasattr(self.root, name):
            setattr(self.root, name, value)
        else:
            super().__setattr__(name, value)

    @property
    def model_fields(self):
        """Expose root model fields for compatibility."""
        return self.root.model_fields if hasattr(self.root, 'model_fields') else {}

    def model_dump(self, **kwargs):
        """Delegate model_dump to root for serialization."""
        return self.root.model_dump(**kwargs)

    def model_dump_json(self, **kwargs):
        """Delegate model_dump_json to root for JSON serialization."""
        return self.root.model_dump_json(**kwargs)


class BoardColumnOutput(BoardColumnOutputRootModel):
    """Enhanced wrapper for BoardColumnOutputRootModel with transparent property access."""

    def __getattr__(self, name: str):
        """Provide transparent access to root properties."""
        if hasattr(self.root, name):
            return getattr(self.root, name)
        raise AttributeError(f"'BoardColumnOutput' object has no attribute '{name}'")

    def __setattr__(self, name: str, value):
        """Provide transparent setting of root properties."""
        if name == 'root' or name.startswith('_'):
            super().__setattr__(name, value)
        elif hasattr(self.root, name):
            setattr(self.root, name, value)
        else:
            super().__setattr__(name, value)

    @property
    def model_fields(self):
        """Expose root model fields for compatibility."""
        return self.root.model_fields if hasattr(self.root, 'model_fields') else {}

    def model_dump(self, **kwargs):
        """Delegate model_dump to root for serialization."""
        return self.root.model_dump(**kwargs)

    def model_dump_json(self, **kwargs):
        """Delegate model_dump_json to root for JSON serialization."""
        return self.root.model_dump_json(**kwargs)


class RootModelAnnotatedUnionStringCustomFieldParsedIntegerCustomFieldParsedFloatCustomFieldParsedBooleanCustomFieldParsedDateCustomFieldParsedDateTimeCustomFieldParsedDurationCustomFieldParsedEnumCustomFieldParsedEnumMultiCustomFieldParsedStateCustomFieldParsedVersionCustomFieldParsedVersionMultiCustomFieldParsedUserCustomFieldParsedUserMultiCustomFieldParsedOwnedCustomFieldParsedOwnedMultiCustomFieldParsedProjectFieldParsedHashtagFieldParsedTagFieldParsedFieldInfoAnnotationNoneTypeRequiredTrueDiscriminatorTypeEnhanced(
    RootModelAnnotatedUnionStringCustomFieldParsedIntegerCustomFieldParsedFloatCustomFieldParsedBooleanCustomFieldParsedDateCustomFieldParsedDateTimeCustomFieldParsedDurationCustomFieldParsedEnumCustomFieldParsedEnumMultiCustomFieldParsedStateCustomFieldParsedVersionCustomFieldParsedVersionMultiCustomFieldParsedUserCustomFieldParsedUserMultiCustomFieldParsedOwnedCustomFieldParsedOwnedMultiCustomFieldParsedProjectFieldParsedHashtagFieldParsedTagFieldParsedFieldInfoAnnotationNoneTypeRequiredTrueDiscriminatorType
):
    """Enhanced wrapper for RootModelAnnotatedUnionStringCustomFieldParsedIntegerCustomFieldParsedFloatCustomFieldParsedBooleanCustomFieldParsedDateCustomFieldParsedDateTimeCustomFieldParsedDurationCustomFieldParsedEnumCustomFieldParsedEnumMultiCustomFieldParsedStateCustomFieldParsedVersionCustomFieldParsedVersionMultiCustomFieldParsedUserCustomFieldParsedUserMultiCustomFieldParsedOwnedCustomFieldParsedOwnedMultiCustomFieldParsedProjectFieldParsedHashtagFieldParsedTagFieldParsedFieldInfoAnnotationNoneTypeRequiredTrueDiscriminatorType with transparent property access."""

    def __getattr__(self, name: str):
        """Provide transparent access to root properties."""
        if hasattr(self.root, name):
            return getattr(self.root, name)
        raise AttributeError(
            f"'RootModelAnnotatedUnionStringCustomFieldParsedIntegerCustomFieldParsedFloatCustomFieldParsedBooleanCustomFieldParsedDateCustomFieldParsedDateTimeCustomFieldParsedDurationCustomFieldParsedEnumCustomFieldParsedEnumMultiCustomFieldParsedStateCustomFieldParsedVersionCustomFieldParsedVersionMultiCustomFieldParsedUserCustomFieldParsedUserMultiCustomFieldParsedOwnedCustomFieldParsedOwnedMultiCustomFieldParsedProjectFieldParsedHashtagFieldParsedTagFieldParsedFieldInfoAnnotationNoneTypeRequiredTrueDiscriminatorTypeEnhanced' object has no attribute '{name}'"
        )

    def __setattr__(self, name: str, value):
        """Provide transparent setting of root properties."""
        if name == 'root' or name.startswith('_'):
            super().__setattr__(name, value)
        elif hasattr(self.root, name):
            setattr(self.root, name, value)
        else:
            super().__setattr__(name, value)

    @property
    def model_fields(self):
        """Expose root model fields for compatibility."""
        return self.root.model_fields if hasattr(self.root, 'model_fields') else {}

    def model_dump(self, **kwargs):
        """Delegate model_dump to root for serialization."""
        return self.root.model_dump(**kwargs)

    def model_dump_json(self, **kwargs):
        """Delegate model_dump_json to root for JSON serialization."""
        return self.root.model_dump_json(**kwargs)


class BoardSwimlaneOutput(BoardSwimlaneOutputRootModel):
    """Enhanced wrapper for BoardSwimlaneOutputRootModel with transparent property access."""

    def __getattr__(self, name: str):
        """Provide transparent access to root properties."""
        if hasattr(self.root, name):
            return getattr(self.root, name)
        raise AttributeError(f"'BoardSwimlaneOutput' object has no attribute '{name}'")

    def __setattr__(self, name: str, value):
        """Provide transparent setting of root properties."""
        if name == 'root' or name.startswith('_'):
            super().__setattr__(name, value)
        elif hasattr(self.root, name):
            setattr(self.root, name, value)
        else:
            super().__setattr__(name, value)

    @property
    def model_fields(self):
        """Expose root model fields for compatibility."""
        return self.root.model_fields if hasattr(self.root, 'model_fields') else {}

    def model_dump(self, **kwargs):
        """Delegate model_dump to root for serialization."""
        return self.root.model_dump(**kwargs)

    def model_dump_json(self, **kwargs):
        """Delegate model_dump_json to root for JSON serialization."""
        return self.root.model_dump_json(**kwargs)


class CustomFieldOutput(CustomFieldOutputRootModel):
    """Enhanced wrapper for CustomFieldOutputRootModel with transparent property access."""

    def __getattr__(self, name: str):
        """Provide transparent access to root properties."""
        if hasattr(self.root, name):
            return getattr(self.root, name)
        raise AttributeError(f"'CustomFieldOutput' object has no attribute '{name}'")

    def __setattr__(self, name: str, value):
        """Provide transparent setting of root properties."""
        if name == 'root' or name.startswith('_'):
            super().__setattr__(name, value)
        elif hasattr(self.root, name):
            setattr(self.root, name, value)
        else:
            super().__setattr__(name, value)

    @property
    def model_fields(self):
        """Expose root model fields for compatibility."""
        return self.root.model_fields if hasattr(self.root, 'model_fields') else {}

    def model_dump(self, **kwargs):
        """Delegate model_dump to root for serialization."""
        return self.root.model_dump(**kwargs)

    def model_dump_json(self, **kwargs):
        """Delegate model_dump_json to root for JSON serialization."""
        return self.root.model_dump_json(**kwargs)


class CustomFieldValueOutput(CustomFieldValueOutputRootModel):
    """Enhanced wrapper for CustomFieldValueOutputRootModel with transparent property access."""

    def __getattr__(self, name: str):
        """Provide transparent access to root properties."""
        if hasattr(self.root, name):
            return getattr(self.root, name)
        raise AttributeError(
            f"'CustomFieldValueOutput' object has no attribute '{name}'"
        )

    def __setattr__(self, name: str, value):
        """Provide transparent setting of root properties."""
        if name == 'root' or name.startswith('_'):
            super().__setattr__(name, value)
        elif hasattr(self.root, name):
            setattr(self.root, name, value)
        else:
            super().__setattr__(name, value)

    @property
    def model_fields(self):
        """Expose root model fields for compatibility."""
        return self.root.model_fields if hasattr(self.root, 'model_fields') else {}

    def model_dump(self, **kwargs):
        """Delegate model_dump to root for serialization."""
        return self.root.model_dump(**kwargs)

    def model_dump_json(self, **kwargs):
        """Delegate model_dump_json to root for JSON serialization."""
        return self.root.model_dump_json(**kwargs)


class IssueFieldChangeOutput(IssueFieldChangeOutputRootModel):
    """Enhanced wrapper for IssueFieldChangeOutputRootModel with transparent property access."""

    def __getattr__(self, name: str):
        """Provide transparent access to root properties."""
        if hasattr(self.root, name):
            return getattr(self.root, name)
        raise AttributeError(
            f"'IssueFieldChangeOutput' object has no attribute '{name}'"
        )

    def __setattr__(self, name: str, value):
        """Provide transparent setting of root properties."""
        if name == 'root' or name.startswith('_'):
            super().__setattr__(name, value)
        elif hasattr(self.root, name):
            setattr(self.root, name, value)
        else:
            super().__setattr__(name, value)

    @property
    def model_fields(self):
        """Expose root model fields for compatibility."""
        return self.root.model_fields if hasattr(self.root, 'model_fields') else {}

    def model_dump(self, **kwargs):
        """Delegate model_dump to root for serialization."""
        return self.root.model_dump(**kwargs)

    def model_dump_json(self, **kwargs):
        """Delegate model_dump_json to root for JSON serialization."""
        return self.root.model_dump_json(**kwargs)


class CustomFieldGroupOutput(CustomFieldGroupOutputRootModel):
    """Enhanced wrapper for CustomFieldGroupOutputRootModel with transparent property access."""

    def __getattr__(self, name: str):
        """Provide transparent access to root properties."""
        if hasattr(self.root, name):
            return getattr(self.root, name)
        raise AttributeError(
            f"'CustomFieldGroupOutput' object has no attribute '{name}'"
        )

    def __setattr__(self, name: str, value):
        """Provide transparent setting of root properties."""
        if name == 'root' or name.startswith('_'):
            super().__setattr__(name, value)
        elif hasattr(self.root, name):
            setattr(self.root, name, value)
        else:
            super().__setattr__(name, value)

    @property
    def model_fields(self):
        """Expose root model fields for compatibility."""
        return self.root.model_fields if hasattr(self.root, 'model_fields') else {}

    def model_dump(self, **kwargs):
        """Delegate model_dump to root for serialization."""
        return self.root.model_dump(**kwargs)

    def model_dump_json(self, **kwargs):
        """Delegate model_dump_json to root for JSON serialization."""
        return self.root.model_dump_json(**kwargs)


class IssueChangeOutput(IssueChangeOutputRootModel):
    """Enhanced wrapper for IssueChangeOutputRootModel with transparent property access."""

    def __getattr__(self, name: str):
        """Provide transparent access to root properties."""
        if hasattr(self.root, name):
            return getattr(self.root, name)
        raise AttributeError(f"'IssueChangeOutput' object has no attribute '{name}'")

    def __setattr__(self, name: str, value):
        """Provide transparent setting of root properties."""
        if name == 'root' or name.startswith('_'):
            super().__setattr__(name, value)
        elif hasattr(self.root, name):
            setattr(self.root, name, value)
        else:
            super().__setattr__(name, value)

    @property
    def model_fields(self):
        """Expose root model fields for compatibility."""
        return self.root.model_fields if hasattr(self.root, 'model_fields') else {}

    def model_dump(self, **kwargs):
        """Delegate model_dump to root for serialization."""
        return self.root.model_dump(**kwargs)

    def model_dump_json(self, **kwargs):
        """Delegate model_dump_json to root for JSON serialization."""
        return self.root.model_dump_json(**kwargs)
