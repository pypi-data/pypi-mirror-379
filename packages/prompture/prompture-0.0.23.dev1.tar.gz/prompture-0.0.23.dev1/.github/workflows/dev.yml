name: Publish Dev Version to PyPI

on:
  push:
    branches:
      - dev

permissions:
  contents: write

jobs:
  bump-version-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check Committer
        if: github.actor == 'github-actions[bot]'
        run: |
          echo "Commit made by GitHub Actions. Exiting workflow."
          exit 0

      - name: Read current version
        id: ver
        run: echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Compute next dev version
        id: bump_version
        shell: bash
        run: |
          raw="${{ steps.ver.outputs.version }}"
          # strip any .devN suffix (so 1.0.26.dev1 -> 1.0.26)
          base="${raw%%.dev*}"
          # detect existing dev version
          if [[ "$raw" =~ \.dev([0-9]+)$ ]]; then
            dev=$((BASH_REMATCH[1] + 1))
          else
            dev=1
          fi
          new="${base}.dev${dev}"
          echo "new_version=$new" >> $GITHUB_OUTPUT

      - name: Update VERSION File
        run: |
          echo "${{ steps.bump_version.outputs.new_version }}" > VERSION
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add VERSION
          git commit -m "ðŸ”„ Version to v${{ steps.bump_version.outputs.new_version }} [skip ci]" || echo "No changes to commit"
          git push origin dev || echo "Push failed or nothing to push"

      - name: Fetch all tags so setuptools_scm can detect the tag
        run: |
          git fetch --all --tags --prune
          git tag --list
          git describe --tags --long || true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Build Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools_scm build twine toml

      # Build & Publish prompture ----------------------------------------------
      - name: Build prompture
        env:
          # fallback if tag not fully available: force version to bumped version
          SETUPTOOLS_SCM_PRETEND_VERSION: ${{ steps.bump_version.outputs.new_version }}
        run: |
          python -m build -o dist/prompture

      - name: Publish prompture to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          python -m pip install --upgrade twine
          ls -al dist/prompture
          python -m twine upload dist/prompture/* --non-interactive