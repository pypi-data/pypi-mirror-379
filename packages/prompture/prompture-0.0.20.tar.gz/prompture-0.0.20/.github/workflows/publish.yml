name: Publish to PyPI and GitHub Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  bump-version-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check Committer
        if: github.actor == 'github-actions[bot]'
        run: |
          echo "Commit made by GitHub Actions. Exiting workflow."
          exit 0

      - name: Bump Version and Push Tag
        id: bump_version
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: main
          default_bump: patch
          tag_prefix: 'v'
          skip_ci: true

      - name: Update VERSION File
        run: |
          echo "${{ steps.bump_version.outputs.new_version }}" > VERSION
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add VERSION
          git commit -m "ðŸ”„ Version to v${{ steps.bump_version.outputs.new_version }} [skip ci]" || echo "No changes to commit"
          git push origin main || echo "Push failed or nothing to push"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          release_name: Release v${{ steps.bump_version.outputs.new_version }}
          body: "Release version v${{ steps.bump_version.outputs.new_version }}"
          draft: false
          prerelease: false

      - name: Fetch all tags so setuptools_scm can detect the tag
        run: |
          git fetch --all --tags --prune
          git tag --list
          git describe --tags --long || true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Build Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools_scm build twine toml

      # Build & Publish prompture ----------------------------------------------
      - name: Build prompture
        env:
          # fallback if tag not fully available: force version to bumped version
          SETUPTOOLS_SCM_PRETEND_VERSION: ${{ steps.bump_version.outputs.new_version }}
        run: |
          python -m build -o dist/prompture

      - name: Publish prompture to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          python -m pip install --upgrade twine
          ls -al dist/prompture
          python -m twine upload dist/prompture/* --non-interactive

      # ---- NEW: Pin wrapper version & dependency so it matches prompture ------
      - name: Pin llm_to_json version & dependency to prompture
        run: |
          NEW_VERSION=${{ steps.bump_version.outputs.new_version }}
          echo "Pinning wrapper to version $NEW_VERSION"
          python .github/scripts/update_wrapper_version.py "$NEW_VERSION"

      # Build wrapper package --------------------------------------------------
      - name: Build llm-to-json (wrapper)
        working-directory: packages/
        run: |
          python -m build -o ../dist/llm_to_json

      - name: Publish llm-to-json to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN_LLM_TO_JSON }}
        run: |
          python -m twine upload dist/llm_to_json/* --non-interactive
