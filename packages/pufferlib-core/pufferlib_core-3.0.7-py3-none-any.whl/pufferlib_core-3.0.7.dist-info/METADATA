Metadata-Version: 2.4
Name: pufferlib-core
Version: 3.0.7
Summary: Minimal PufferLib core functionality with vectorized environments
Author-email: Joseph Suarez <jsuarez@openai.com>
License: MIT
Project-URL: Homepage, https://github.com/PufferAI/PufferLib
Project-URL: Documentation, https://puffer.ai
Project-URL: Repository, https://github.com/PufferAI/PufferLib
Project-URL: Issues, https://github.com/PufferAI/PufferLib/issues
Keywords: reinforcement-learning,machine-learning,multi-agent,vectorized-environments
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Education
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: numpy
Requires-Dist: gymnasium
Requires-Dist: psutil
Provides-Extra: ext
Requires-Dist: torch; extra == "ext"
Requires-Dist: nvidia-ml-py; extra == "ext"
Provides-Extra: pytorch
Requires-Dist: torch; extra == "pytorch"

# PufferLib Core

Minimal PufferLib core functionality with vectorized environments.

This package contains only the essential components:
- `spaces`: Observation/action space handling
- `emulation`: Environment compatibility layer for Gym/Gymnasium/PettingZoo
- `vector`: Vectorized environment implementations

For the full PufferLib with training capabilities and environments, see the main `pufferlib` package.

## Installation

### Basic Installation (Python-only)
```bash
pip install pufferlib-core
```

### Installation with C++/CUDA Extensions
To enable the `pufferlib._C` extensions (required for advanced features like CUDA advantage computation):

```bash
# First install torch
pip install torch

# Then install with extensions
PUFFERLIB_BUILD_EXT=1 pip install pufferlib-core[ext]
```

Or you can install the dependencies and build in separate steps:
```bash
# Install with extra dependencies
pip install pufferlib-core[ext]

# Then rebuild with extensions
PUFFERLIB_BUILD_EXT=1 pip install --upgrade --force-reinstall --no-deps pufferlib-core
```

## Usage

After installation with extensions, you should be able to import the C extensions:

```python
import pufferlib
from pufferlib import _C  # This will only work if extensions were built
```

## Development

To build extensions in development mode:
```bash
PUFFERLIB_BUILD_EXT=1 python setup.py build_ext --inplace
```
