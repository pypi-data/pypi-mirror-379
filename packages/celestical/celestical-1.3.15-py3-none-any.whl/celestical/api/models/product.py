# coding: utf-8

"""
    CELESTICAL API

     CELESTICAL API gives control over your serverless web services. 

    The version of the OpenAPI document: 1.12.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Product(BaseModel):
    """
    Manages product info     
    """ # noqa: E501
    id: Optional[Any] = None
    name: Optional[Any]
    monthly_price: Optional[Any]
    annual_price: Optional[Any]
    is_recurrent: Optional[Any]
    description: Optional[Any]
    features: Optional[Any]
    image_url: Optional[Any]
    punch_line: Optional[Any]
    is_live: Optional[Any]
    is_overaging: Optional[Any]
    group: Optional[Any]
    __properties: ClassVar[List[str]] = ["id", "name", "monthly_price", "annual_price", "is_recurrent", "description", "features", "image_url", "punch_line", "is_live", "is_overaging", "group"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Product from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if monthly_price (nullable) is None
        # and model_fields_set contains the field
        if self.monthly_price is None and "monthly_price" in self.model_fields_set:
            _dict['monthly_price'] = None

        # set to None if annual_price (nullable) is None
        # and model_fields_set contains the field
        if self.annual_price is None and "annual_price" in self.model_fields_set:
            _dict['annual_price'] = None

        # set to None if is_recurrent (nullable) is None
        # and model_fields_set contains the field
        if self.is_recurrent is None and "is_recurrent" in self.model_fields_set:
            _dict['is_recurrent'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if features (nullable) is None
        # and model_fields_set contains the field
        if self.features is None and "features" in self.model_fields_set:
            _dict['features'] = None

        # set to None if image_url (nullable) is None
        # and model_fields_set contains the field
        if self.image_url is None and "image_url" in self.model_fields_set:
            _dict['image_url'] = None

        # set to None if punch_line (nullable) is None
        # and model_fields_set contains the field
        if self.punch_line is None and "punch_line" in self.model_fields_set:
            _dict['punch_line'] = None

        # set to None if is_live (nullable) is None
        # and model_fields_set contains the field
        if self.is_live is None and "is_live" in self.model_fields_set:
            _dict['is_live'] = None

        # set to None if is_overaging (nullable) is None
        # and model_fields_set contains the field
        if self.is_overaging is None and "is_overaging" in self.model_fields_set:
            _dict['is_overaging'] = None

        # set to None if group (nullable) is None
        # and model_fields_set contains the field
        if self.group is None and "group" in self.model_fields_set:
            _dict['group'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Product from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "monthly_price": obj.get("monthly_price"),
            "annual_price": obj.get("annual_price"),
            "is_recurrent": obj.get("is_recurrent"),
            "description": obj.get("description"),
            "features": obj.get("features"),
            "image_url": obj.get("image_url"),
            "punch_line": obj.get("punch_line"),
            "is_live": obj.get("is_live"),
            "is_overaging": obj.get("is_overaging"),
            "group": obj.get("group")
        })
        return _obj


