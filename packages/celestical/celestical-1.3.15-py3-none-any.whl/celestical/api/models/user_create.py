# coding: utf-8

"""
    CELESTICAL API

     CELESTICAL API gives control over your serverless web services. 

    The version of the OpenAPI document: 1.12.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from celestical.api.models.is_active import IsActive
from celestical.api.models.is_superuser import IsSuperuser
from celestical.api.models.is_verified import IsVerified
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UserCreate(BaseModel):
    """
    UserCreate
    """ # noqa: E501
    email: Optional[Any]
    password: Optional[Any]
    is_active: Optional[IsActive] = None
    is_superuser: Optional[IsSuperuser] = None
    is_verified: Optional[IsVerified] = None
    name: Optional[Any] = None
    code: Optional[Any] = None
    __properties: ClassVar[List[str]] = ["email", "password", "is_active", "is_superuser", "is_verified", "name", "code"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UserCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of is_active
        if self.is_active:
            _dict['is_active'] = self.is_active.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_superuser
        if self.is_superuser:
            _dict['is_superuser'] = self.is_superuser.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_verified
        if self.is_verified:
            _dict['is_verified'] = self.is_verified.to_dict()
        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict['password'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if code (nullable) is None
        # and model_fields_set contains the field
        if self.code is None and "code" in self.model_fields_set:
            _dict['code'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UserCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "password": obj.get("password"),
            "is_active": IsActive.from_dict(obj.get("is_active")) if obj.get("is_active") is not None else None,
            "is_superuser": IsSuperuser.from_dict(obj.get("is_superuser")) if obj.get("is_superuser") is not None else None,
            "is_verified": IsVerified.from_dict(obj.get("is_verified")) if obj.get("is_verified") is not None else None,
            "name": obj.get("name"),
            "code": obj.get("code")
        })
        return _obj


