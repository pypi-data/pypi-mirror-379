# coding: utf-8

"""
    CELESTICAL API

     CELESTICAL API gives control over your serverless web services. 

    The version of the OpenAPI document: 1.12.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class App(BaseModel):
    """
    Manages app objects     
    """ # noqa: E501
    id: Optional[Any] = None
    creator: Optional[Any] = None
    created_date: Optional[Any] = None
    last_mod: Optional[Any] = None
    url: Optional[Any] = None
    meta_compose: Optional[Any] = None
    requests: Optional[Any] = None
    services: Optional[Any] = None
    is_deleted: Optional[Any] = None
    is_running: Optional[Any] = None
    __properties: ClassVar[List[str]] = ["id", "creator", "created_date", "last_mod", "url", "meta_compose", "requests", "services", "is_deleted", "is_running"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of App from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if creator (nullable) is None
        # and model_fields_set contains the field
        if self.creator is None and "creator" in self.model_fields_set:
            _dict['creator'] = None

        # set to None if created_date (nullable) is None
        # and model_fields_set contains the field
        if self.created_date is None and "created_date" in self.model_fields_set:
            _dict['created_date'] = None

        # set to None if last_mod (nullable) is None
        # and model_fields_set contains the field
        if self.last_mod is None and "last_mod" in self.model_fields_set:
            _dict['last_mod'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if meta_compose (nullable) is None
        # and model_fields_set contains the field
        if self.meta_compose is None and "meta_compose" in self.model_fields_set:
            _dict['meta_compose'] = None

        # set to None if requests (nullable) is None
        # and model_fields_set contains the field
        if self.requests is None and "requests" in self.model_fields_set:
            _dict['requests'] = None

        # set to None if services (nullable) is None
        # and model_fields_set contains the field
        if self.services is None and "services" in self.model_fields_set:
            _dict['services'] = None

        # set to None if is_deleted (nullable) is None
        # and model_fields_set contains the field
        if self.is_deleted is None and "is_deleted" in self.model_fields_set:
            _dict['is_deleted'] = None

        # set to None if is_running (nullable) is None
        # and model_fields_set contains the field
        if self.is_running is None and "is_running" in self.model_fields_set:
            _dict['is_running'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of App from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "creator": obj.get("creator"),
            "created_date": obj.get("created_date"),
            "last_mod": obj.get("last_mod"),
            "url": obj.get("url"),
            "meta_compose": obj.get("meta_compose"),
            "requests": obj.get("requests"),
            "services": obj.get("services"),
            "is_deleted": obj.get("is_deleted"),
            "is_running": obj.get("is_running")
        })
        return _obj


