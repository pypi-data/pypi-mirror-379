# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: v2.12.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo.workflows.client.configuration import Configuration


class V1alpha1LifecycleHook(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'arguments': 'V1alpha1Arguments',
        'expression': 'str',
        'template': 'str',
        'template_ref': 'V1alpha1TemplateRef',
    }

    attribute_map = {
        'arguments': 'arguments',
        'expression': 'expression',
        'template': 'template',
        'template_ref': 'templateRef'
    }

    def __init__(self, arguments=None, expression=None, template=None, template_ref=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1LifecycleHook - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._arguments = None
        self._expression = None
        self._template = None
        self._template_ref = None

        if arguments is not None:
            self.arguments = arguments
        if expression is not None:
            self.expression = expression
        if template is not None:
            self.template = template
        if template_ref is not None:
            self.template_ref = template_ref

    @property
    def arguments(self):
        """Gets the arguments of this V1alpha1LifecycleHook.  # noqa: E501


        :return: The arguments of this V1alpha1LifecycleHook.  # noqa: E501
        :rtype: V1alpha1Arguments
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this V1alpha1LifecycleHook.


        :param arguments: The arguments of this V1alpha1LifecycleHook.  # noqa: E501
        :type: V1alpha1Arguments
        """

        self._arguments = arguments

    @property
    def expression(self):
        """Gets the expression of this V1alpha1LifecycleHook.  # noqa: E501


        :return: The expression of this V1alpha1LifecycleHook.  # noqa: E501
        :rtype: V1alpha1ContinueOn
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this V1alpha1LifecycleHook.


        :param expression: The expression of this V1alpha1LifecycleHook.  # noqa: E501
        :type: V1alpha1ContinueOn
        """

        self._expression = expression

    @property
    def template(self):
        """Gets the template of this V1alpha1LifecycleHook.  # noqa: E501

        Template is the name of the template to execute at the hook  # noqa: E501

        :return: The template of this V1alpha1LifecycleHook.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this V1alpha1LifecycleHook.

        Template is the name of the template to execute at the hook  # noqa: E501

        :param template: The template of this V1alpha1LifecycleHook.  # noqa: E501
        :type: str
        """

        self._template = template

    @property
    def template_ref(self):
        """Gets the template_ref of this V1alpha1LifecycleHook.  # noqa: E501


        :return: The template_ref of this V1alpha1LifecycleHook.  # noqa: E501
        :rtype: V1alpha1TemplateRef
        """
        return self._template_ref

    @template_ref.setter
    def template_ref(self, template_ref):
        """Sets the template_ref of this V1alpha1LifecycleHook.


        :param template_ref: The template_ref of this V1alpha1LifecycleHook.  # noqa: E501
        :type: V1alpha1TemplateRef
        """

        self._template_ref = template_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1LifecycleHook):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1LifecycleHook):
            return True

        return self.to_dict() != other.to_dict()
