# coding: utf-8

"""
Binance Spot WebSocket Streams

OpenAPI Specifications for the Binance Spot WebSocket Streams

API documents:
  - [Github web-socket-streams documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-streams.md)
  - [General API information for web-socket-streams on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self


class ExchangeFiltersInner(BaseModel):
    """
    ExchangeFiltersInner
    """  # noqa: E501

    filterType: Optional[StrictStr] = Field(default=None, alias="filterType")
    minPrice: Optional[StrictStr] = Field(default=None, alias="minPrice")
    maxPrice: Optional[StrictStr] = Field(default=None, alias="maxPrice")
    tickSize: Optional[StrictStr] = Field(default=None, alias="tickSize")
    multiplierUp: Optional[StrictStr] = Field(default=None, alias="multiplierUp")
    multiplierDown: Optional[StrictStr] = Field(default=None, alias="multiplierDown")
    avgPriceMins: Optional[StrictInt] = Field(default=None, alias="avgPriceMins")
    bidMultiplierUp: Optional[StrictStr] = Field(default=None, alias="bidMultiplierUp")
    bidMultiplierDown: Optional[StrictStr] = Field(
        default=None, alias="bidMultiplierDown"
    )
    askMultiplierUp: Optional[StrictStr] = Field(default=None, alias="askMultiplierUp")
    askMultiplierDown: Optional[StrictStr] = Field(
        default=None, alias="askMultiplierDown"
    )
    minQty: Optional[StrictStr] = Field(default=None, alias="minQty")
    maxQty: Optional[StrictStr] = Field(default=None, alias="maxQty")
    stepSize: Optional[StrictStr] = Field(default=None, alias="stepSize")
    minNotional: Optional[StrictStr] = Field(default=None, alias="minNotional")
    applyToMarket: Optional[StrictBool] = Field(default=None, alias="applyToMarket")
    applyMinToMarket: Optional[StrictBool] = Field(
        default=None, alias="applyMinToMarket"
    )
    maxNotional: Optional[StrictStr] = Field(default=None, alias="maxNotional")
    applyMaxToMarket: Optional[StrictBool] = Field(
        default=None, alias="applyMaxToMarket"
    )
    limit: Optional[StrictInt] = None
    maxNumOrders: Optional[StrictInt] = Field(default=None, alias="maxNumOrders")
    maxNumAlgoOrders: Optional[StrictInt] = Field(
        default=None, alias="maxNumAlgoOrders"
    )
    maxNumIcebergOrders: Optional[StrictInt] = Field(
        default=None, alias="maxNumIcebergOrders"
    )
    maxPosition: Optional[StrictStr] = Field(default=None, alias="maxPosition")
    minTrailingAboveDelta: Optional[StrictInt] = Field(
        default=None, alias="minTrailingAboveDelta"
    )
    maxTrailingAboveDelta: Optional[StrictInt] = Field(
        default=None, alias="maxTrailingAboveDelta"
    )
    minTrailingBelowDelta: Optional[StrictInt] = Field(
        default=None, alias="minTrailingBelowDelta"
    )
    maxTrailingBelowDelta: Optional[StrictInt] = Field(
        default=None, alias="maxTrailingBelowDelta"
    )
    maxNumOrderAmends: Optional[StrictInt] = Field(
        default=None, alias="maxNumOrderAmends"
    )
    maxNumOrderLists: Optional[StrictInt] = Field(
        default=None, alias="maxNumOrderLists"
    )
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = [
        "filterType",
        "minPrice",
        "maxPrice",
        "tickSize",
        "multiplierUp",
        "multiplierDown",
        "avgPriceMins",
        "bidMultiplierUp",
        "bidMultiplierDown",
        "askMultiplierUp",
        "askMultiplierDown",
        "minQty",
        "maxQty",
        "stepSize",
        "minNotional",
        "applyToMarket",
        "applyMinToMarket",
        "maxNotional",
        "applyMaxToMarket",
        "limit",
        "maxNumOrders",
        "maxNumAlgoOrders",
        "maxNumIcebergOrders",
        "maxPosition",
        "minTrailingAboveDelta",
        "maxTrailingAboveDelta",
        "minTrailingBelowDelta",
        "maxTrailingBelowDelta",
        "maxNumOrderAmends",
        "maxNumOrderLists",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExchangeFiltersInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set(
            [
                "additional_properties",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExchangeFiltersInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "filterType": obj.get("filterType"),
                "minPrice": obj.get("minPrice"),
                "maxPrice": obj.get("maxPrice"),
                "tickSize": obj.get("tickSize"),
                "multiplierUp": obj.get("multiplierUp"),
                "multiplierDown": obj.get("multiplierDown"),
                "avgPriceMins": obj.get("avgPriceMins"),
                "bidMultiplierUp": obj.get("bidMultiplierUp"),
                "bidMultiplierDown": obj.get("bidMultiplierDown"),
                "askMultiplierUp": obj.get("askMultiplierUp"),
                "askMultiplierDown": obj.get("askMultiplierDown"),
                "minQty": obj.get("minQty"),
                "maxQty": obj.get("maxQty"),
                "stepSize": obj.get("stepSize"),
                "minNotional": obj.get("minNotional"),
                "applyToMarket": obj.get("applyToMarket"),
                "applyMinToMarket": obj.get("applyMinToMarket"),
                "maxNotional": obj.get("maxNotional"),
                "applyMaxToMarket": obj.get("applyMaxToMarket"),
                "limit": obj.get("limit"),
                "maxNumOrders": obj.get("maxNumOrders"),
                "maxNumAlgoOrders": obj.get("maxNumAlgoOrders"),
                "maxNumIcebergOrders": obj.get("maxNumIcebergOrders"),
                "maxPosition": obj.get("maxPosition"),
                "minTrailingAboveDelta": obj.get("minTrailingAboveDelta"),
                "maxTrailingAboveDelta": obj.get("maxTrailingAboveDelta"),
                "minTrailingBelowDelta": obj.get("minTrailingBelowDelta"),
                "maxTrailingBelowDelta": obj.get("maxTrailingBelowDelta"),
                "maxNumOrderAmends": obj.get("maxNumOrderAmends"),
                "maxNumOrderLists": obj.get("maxNumOrderLists"),
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
