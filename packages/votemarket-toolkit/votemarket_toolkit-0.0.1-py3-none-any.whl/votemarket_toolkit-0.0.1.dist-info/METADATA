Metadata-Version: 2.4
Name: votemarket-toolkit
Version: 0.0.1
Summary: VoteMarket Toolkit - SDK for interacting with VoteMarket campaigns and proofs
Project-URL: Homepage, https://github.com/stake-dao/votemarket-proof-toolkit
Project-URL: Repository, https://github.com/stake-dao/votemarket-proof-toolkit
Project-URL: Issues, https://github.com/stake-dao/votemarket-proof-toolkit/issues
Project-URL: Documentation, https://github.com/stake-dao/votemarket-proof-toolkit/tree/main/docs
Author-email: Stake DAO <contact@stakedao.org>
License: MIT
License-File: LICENSE
Keywords: dao,defi,ethereum,sdk,toolkit,votemarket
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Office/Business :: Financial :: Investment
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.10
Requires-Dist: black>=24.1.0
Requires-Dist: cmake>=3.30.5
Requires-Dist: eth-utils>=5.1.0
Requires-Dist: fastparquet>=2024.5.0
Requires-Dist: httpx>=0.28.1
Requires-Dist: py-solc-x>=2.0.3
Requires-Dist: pyarrow>=17.0.0
Requires-Dist: python-dotenv>=1.0.1
Requires-Dist: rich>=13.7.0
Requires-Dist: ruff>=0.7.4
Requires-Dist: w3multicall>=0.3.1
Requires-Dist: web3>=7.12.0
Description-Content-Type: text/markdown

<div align="center">
<img src="./assets/Inspector.svg" width="200">

# VotemarketV2 Proofs Toolkit

⚙️ Streamlined toolkit for generating Votemarket V2 proofs and interacting with the protocol

[![GitHub issues](https://img.shields.io/github/issues/stake-dao/votemarket-proof-toolkit.svg)](https://github.com/stake-dao/votemarket-proof-toolkit/issues)
[![GitHub stars](https://img.shields.io/github/stars/stake-dao/votemarket-proof-generator.svg)](https://github.com/stake-dao/votemarket-proof-toolkit/stargazers)

</div>

## Table of Contents

- [VotemarketV2 Proofs Toolkit](#votemarketv2-proofs-toolkit)
  - [Table of Contents](#table-of-contents)
  - [Introduction](#introduction)
  - [Features](#features)
  - [Installation](#installation)
  - [Configuration](#configuration)
  - [Usage](#usage)
    - [Using the Makefile](#using-the-makefile)
    - [Using Python Scripts](#using-python-scripts)
  - [Understanding Block Numbers and Proofs](#understanding-block-numbers-and-proofs)
  - [Documentation](#documentation)

## Introduction

The VotemarketV2 Proofs Toolkit is a set of utilities designed to interact with Votemarket V2, focusing on generating Ethereum proofs for claim operations. This toolkit streamlines the process of creating proofs, making it easier for developers and users to interact with the VM Oracle.

## Features

- Generate user proofs
- Generate gauge proofs
- Retrieve block information
- Support for multiple protocols (Curve, Balancer, Frax, FXN)
- Get voters for a gauge
- Get active campaigns on Votemarket

## Prerequisites

- Python 3.8 or higher
- [uv](https://github.com/astral-sh/uv) - Fast Python package installer and resolver
  ```bash
  # Install uv
  pip install uv
  # or
  curl -LsSf https://astral.sh/uv/install.sh | sh
  ```

## Installation

1. **Clone the repository:**
   ```bash
   git clone https://github.com/stake-dao/votemarket-proof-toolkit.git
   cd votemarket-proof-toolkit
   ```

2. **Install dependencies using uv:**
   ```bash
   make install-dev
   ```

3. **Verify installation:**
   ```bash
   make help
   ```

## Quick Start

1. **View available commands:**
   ```bash
   make help
   ```

2. **Generate a user proof:**
   ```bash
   make user-proof PROTOCOL=curve GAUGE_ADDRESS=0x... USER_ADDRESS=0x... BLOCK_NUMBER=12345678
   ```

3. **Run example scripts:**
   ```bash
   make run-examples
   ```

## Configuration

1. Create a `.env` file in the root directory of the project.
2. Add your RPC URLs to the `.env` file:
   ```
   ETHEREUM_MAINNET_RPC_URL=https://eth-mainnet.g.alchemy.com/v2/API_KEY

   ARBITRUM_MAINNET_RPC_URL=https://arb-mainnet.g.alchemy.com/v2/API_KEY

   ... (depending on where VM are deployed)

   ```

## Usage

The toolkit provides multiple ways to generate proofs for interacting with Votemarket V2:

### Using the Makefile

1. **Generate user proof:**
   ```bash
   make user-proof PROTOCOL=curve GAUGE_ADDRESS=0x... USER=0x... BLOCK_NUMBER=12345678
   ```

2. **Generate gauge proof:**
   ```bash
   make gauge-proof PROTOCOL=curve GAUGE_ADDRESS=0x... CURRENT_EPOCH=1234567890 BLOCK_NUMBER=12345678
   ```

3. **Get block information:**
   ```bash
   make block-info BLOCK_NUMBER=12345678
   ```

### Using Python Scripts

You can also use the Python scripts directly for more complex integrations or chained actions. Refer to the `examples` and `external` directories for sample usage. `external` is used for the API and Stake Dao weekly operations.****

## Understanding Block Numbers and Proofs

The `BLOCK_NUMBER` parameter is crucial when generating proofs. This number should be the block set in the Votemarket oracle for the specific period you're interested in claiming (period is rounded down by week, as on mainnet gauge controller).

To get the correct block number for a specific epoch or set of epochs, you can use the following Makefile command:

```bash
make get-epoch-blocks CHAIN_ID=1 PLATFORM=0x... EPOCHS=1234,1235,1236
```

This command will return the block numbers set in the oracle for the specified epochs. For example:

```
Epoch Blocks:
  Epoch 1234: Block 15000000
  Epoch 1235: Block 15007000
  Epoch 1236: Block 15014000
```

Use these block numbers when generating proofs to ensure they match the oracle's state for the relevant epoch.

## Documentation

For detailed information on each component and function, please refer to:

- [Developer Documentation](docs/README.md): Comprehensive guide for integrating with VoteMarket V2, including:
  - Contract addresses and deployments
  - Campaign creation and management
  - Claiming rewards
  - Using the Bundler for batch operations

The developer documentation provides detailed examples and best practices for integrating with the protocol, while the source code documentation offers technical details about implementation.

## Installing as External Package

You can install this toolkit directly from GitHub or PyPI:

### From GitHub (latest)
```bash
# Using pip
pip install git+https://github.com/stake-dao/votemarket-proof-toolkit.git

# Using uv (recommended)
uv pip install git+https://github.com/stake-dao/votemarket-proof-toolkit.git
```

### From PyPI (when published)
```bash
# Using pip
pip install votemarket-toolkit

# Using uv (recommended)
uv pip install votemarket-toolkit
```

### Using in Your Project
```python
from votemarket_toolkit.shared import registry
from votemarket_toolkit.proofs.manager import ProofManager
from votemarket_toolkit.campaigns.services import CampaignService

# Get platform addresses
curve_v2 = registry.get_platform("curve", 42161, "v2")

# Generate proofs
proof_manager = ProofManager()
# ... use the toolkit
```

## Building & Publishing (For Maintainers)

### Building the Package with uv

```bash
# Install build dependencies
uv pip install build twine

# Build the package (creates dist/ folder with wheel and source)
uv run python -m build

# Or using uv's built-in build (experimental)
uv build
```

### Publishing to PyPI

```bash
# Test upload to TestPyPI first
uv run twine upload --repository testpypi dist/*

# Upload to PyPI
uv run twine upload dist/*
```

### Publishing Checklist

1. **Update version** in `pyproject.toml`
2. **Build the package:**
   ```bash
   rm -rf dist/  # Clean previous builds
   uv build      # Build wheel and source distribution
   ```
3. **Check the build:**
   ```bash
   ls -la dist/  # Should show .whl and .tar.gz files
   ```
4. **Upload to PyPI:**
   ```bash
   uv run twine upload dist/*
   ```
5. **Tag the release:**
   ```bash
   git tag v0.1.0
   git push origin v0.1.0
   ```

## Usage

See `make help` for available commands or run specific examples:

```bash
# Show all available commands
make help

# Run specific example
make run-example EXAMPLE=create_campaign_l1
```

For detailed implementation examples, check the `docs/examples/` directory.
