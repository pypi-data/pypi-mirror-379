name: üöÄ Build and Deploy nseekfs to PyPI

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., 1.0.0)'
        required: true
        type: string
      target:
        description: 'Deploy target'
        required: true
        type: choice
        options:
        - testpypi
        - pypi
        default: testpypi

jobs:
  # ==================== BUILD WHEELS ====================
  build-wheels:
    name: üõ†Ô∏è Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows
          - os: macos-13  # Intel
            target: x86_64-apple-darwin
            name: macos-intel
          - os: macos-14  # Apple Silicon
            target: aarch64-apple-darwin
            name: macos-arm
        
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4
    
    - name: üîß Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: üìù Update version in config files
      run: |
        VERSION="${{ github.event.inputs.version }}"
        
        python -c "
        import re
        import os
        
        VERSION = os.environ.get('VERSION', '$VERSION')
        
        # Update pyproject.toml
        with open('pyproject.toml', 'r', encoding='utf-8') as f:
            content = f.read()
        content = re.sub(
            r'(\\[project\\][^\\[]*?version\\s*=\\s*)[\"\\'][^\"\\'\r\n]*[\"\\']', 
            r'\\g<1>\"' + VERSION + '\"', 
            content, 
            flags=re.MULTILINE | re.DOTALL
        )
        with open('pyproject.toml', 'w', encoding='utf-8') as f:
            f.write(content)
        
        # Update Cargo.toml
        with open('Cargo.toml', 'r', encoding='utf-8') as f:
            content = f.read()
        content = re.sub(
            r'(\\[package\\][^\\[]*?version\\s*=\\s*)[\"\\'][^\"\\'\r\n]*[\"\\']', 
            r'\\g<1>\"' + VERSION + '\"', 
            content, 
            flags=re.MULTILINE | re.DOTALL
        )
        with open('Cargo.toml', 'w', encoding='utf-8') as f:
            f.write(content)
        
        print('Version updated successfully')
        "
      shell: bash
      env:
        VERSION: ${{ github.event.inputs.version }}
    
    - name: üîç Verify version updates
      run: |
        echo "Verifying version updates..."
        echo "pyproject.toml version:"
        grep -A 5 "\[project\]" pyproject.toml | grep "version" || true
        echo "Cargo.toml version:"
        grep -A 10 "\[package\]" Cargo.toml | grep "version" || true
      shell: bash
    
    - name: üèóÔ∏è Build wheels
      uses: PyO3/maturin-action@v1
      with:
        target: ${{ matrix.target }}
        args: --release --out dist --find-interpreter
        sccache: 'true'
        manylinux: ${{ matrix.name == 'linux' && 'auto' || null }}
        container: ${{ matrix.name == 'linux' && 'off' || null }}
    
    - name: üì¶ Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.name }}
        path: dist
        retention-days: 1

  # ==================== BUILD SDIST ====================
  build-sdist:
    name: üì¶ Build source distribution
    runs-on: ubuntu-latest
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4
    
    - name: üîß Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: üìù Update version in config files
      run: |
        VERSION="${{ github.event.inputs.version }}"
        
        python3 -c "
        import re
        
        # Update pyproject.toml
        with open('pyproject.toml', 'r', encoding='utf-8') as f:
            content = f.read()
        content = re.sub(
            r'(\\[project\\][^\\[]*version\\s*=\\s*)[\"\\'][^\"\\'][\"\\']', 
            r'\\1\"$VERSION\"', 
            content, 
            flags=re.MULTILINE | re.DOTALL
        )
        with open('pyproject.toml', 'w', encoding='utf-8') as f:
            f.write(content)
        
        # Update Cargo.toml
        with open('Cargo.toml', 'r', encoding='utf-8') as f:
            content = f.read()
        content = re.sub(
            r'(\\[package\\][^\\[]*version\\s*=\\s*)[\"\\'][^\"\\'][\"\\']', 
            r'\\1\"$VERSION\"', 
            content, 
            flags=re.MULTILINE | re.DOTALL
        )
        with open('Cargo.toml', 'w', encoding='utf-8') as f:
            f.write(content)
        "
    
    - name: üèóÔ∏è Build sdist
      uses: PyO3/maturin-action@v1
      with:
        command: sdist
        args: --out dist
    
    - name: üì¶ Upload sdist
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist
        retention-days: 1

  # ==================== DEPLOY ====================
  deploy:
    name: üöÄ Deploy to ${{ github.event.inputs.target }}
    runs-on: ubuntu-latest
    needs: [build-wheels, build-sdist]
    environment: ${{ github.event.inputs.target == 'pypi' && 'production' || 'testing' }}
    
    steps:
    - name: üîß Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: üì• Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: üìã Prepare distribution directory
      run: |
        mkdir -p dist/
        find artifacts/ -name "*.whl" -exec cp {} dist/ \;
        find artifacts/ -name "*.tar.gz" -exec cp {} dist/ \;
        
        echo "üîç Built packages:"
        ls -la dist/
        
        wheel_count=$(ls dist/*.whl 2>/dev/null | wc -l)
        sdist_count=$(ls dist/*.tar.gz 2>/dev/null | wc -l)
        
        echo "Package summary:"
        echo "  Wheels: $wheel_count"
        echo "  Source distributions: $sdist_count"
        
        if [ "$wheel_count" -eq 0 ] || [ "$sdist_count" -eq 0 ]; then
          echo "ERROR: Missing packages! Wheel count: $wheel_count, Sdist count: $sdist_count"
          exit 1
        fi
        echo "SUCCESS: All packages present"

    - name: ‚¨ÜÔ∏è Upgrade packaging tools (PEP 639 / Metadata 2.4 compatible)
      run: |
        python -m pip install -U pip
        # ‚úÖ VERS√ïES ATUALIZADAS E COMPAT√çVEIS
        pip install -U \
          "packaging>=24.2" \
          "twine>=6.1.0" \
          "build>=1.2.2" \
          "wheel>=0.45.0" \
          "readme-renderer>=44.0" \
          "docutils>=0.22" \
          "setuptools>=75.0.0"
        
        echo "Installed versions:"
        python -c "
        import packaging, twine, build, wheel, docutils, setuptools
        print('packaging: ' + packaging.__version__)
        print('twine: ' + twine.__version__)
        print('build: ' + build.__version__)
        print('wheel: ' + wheel.__version__)
        print('docutils: ' + docutils.__version__)
        print('setuptools: ' + setuptools.__version__)
        
        # Handle readme_renderer version (might not have __version__)
        try:
            import readme_renderer
            version = getattr(readme_renderer, '__version__', 'unknown')
            print('readme_renderer: ' + str(version))
        except Exception as e:
            print('readme_renderer: installed (version unknown)')
        "

    - name: üîç Inspect package metadata
      run: |
        echo "Inspecting METADATA for license information..."
        python - << 'PY'
        import zipfile, glob, tarfile
        from email.parser import Parser
        
        # Check wheels
        for whl in glob.glob('dist/*.whl'):
            print("\n== " + whl + " ==")
            try:
                with zipfile.ZipFile(whl) as z:
                    meta_files = [n for n in z.namelist() if n.endswith('.dist-info/METADATA')]
                    if meta_files:
                        meta = meta_files[0]
                        text = z.read(meta).decode('utf-8', errors='replace')
                        msg = Parser().parsestr(text)
                        print("License metadata:")
                        for k in msg.keys():
                            if 'license' in k.lower():
                                print("  " + k + ": " + str(msg.get(k)))
                        # Check if license text is present
                        if msg.get('License'):
                            print("  License text length: " + str(len(msg.get('License', ''))))
            except Exception as e:
                print("  Error reading wheel: " + str(e))
        
        # Check source distribution
        for sdist in glob.glob('dist/*.tar.gz'):
            print("\n== " + sdist + " ==")
            try:
                with tarfile.open(sdist, 'r:gz') as tar:
                    # Look for PKG-INFO or METADATA
                    info_files = [m for m in tar.getnames() if m.endswith(('PKG-INFO', 'METADATA'))]
                    if info_files:
                        info_file = info_files[0]
                        content = tar.extractfile(info_file).read().decode('utf-8', errors='replace')
                        msg = Parser().parsestr(content)
                        print("License metadata:")
                        for k in msg.keys():
                            if 'license' in k.lower():
                                print("  " + k + ": " + str(msg.get(k)))
            except Exception as e:
                print("  Error reading sdist: " + str(e))
        PY

    - name: ‚úÖ Validate packages with twine
      run: |
        echo "Validating all packages with twine..."
        twine check dist/* --strict
        
        if [ $? -eq 0 ]; then
          echo "SUCCESS: All packages passed twine validation!"
        else
          echo "ERROR: Twine validation failed"
          echo "Showing detailed package info..."
          for file in dist/*; do
            echo "=== $file ==="
            python -m pip install --dry-run --no-deps "$file" 2>&1 || true
          done
          exit 1
        fi
        
        echo "Final package summary:"
        echo "  Wheels: $(ls dist/*.whl | wc -l)"
        echo "  Source: $(ls dist/*.tar.gz | wc -l)"
        echo "  Total: $(ls dist/* | wc -l)"
    
    - name: üß™ Deploy to TestPyPI
      if: github.event.inputs.target == 'testpypi'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        packages-dir: dist/
        skip-existing: true
        verbose: true
    
    - name: üéØ Deploy to Production PyPI
      if: github.event.inputs.target == 'pypi'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist/
        verbose: true
    
    - name: üéâ Deployment Success
      run: |
        TARGET="${{ github.event.inputs.target }}"
        VERSION="${{ github.event.inputs.version }}"
        
        echo "Successfully deployed nseekfs v${VERSION}!"
        
        if [ "$TARGET" == "testpypi" ]; then
          echo ""
          echo "TEST DEPLOYMENT COMPLETE"
          echo "Test installation command:"
          echo "   pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ nseekfs==${VERSION}"
          echo ""
          echo "TestPyPI page:"
          echo "   https://test.pypi.org/project/nseekfs/${VERSION}/"
        else
          echo ""
          echo "PRODUCTION DEPLOYMENT COMPLETE"
          echo "Installation command:"
          echo "   pip install nseekfs==${VERSION}"
          echo ""
          echo "PyPI page:"
          echo "   https://pypi.org/project/nseekfs/${VERSION}/"
        fi
        
        echo ""
        echo "Deployment Summary:"
        echo "  Package: nseekfs"
        echo "  Version: ${VERSION}"
        echo "  Target: ${TARGET}"
        echo "  Platforms: Linux, Windows, macOS (Intel + ARM)"
        echo "  Optimizations: SIMD/AVX2"
        echo "  Python: 3.8-3.12"
        echo ""
        echo "Deployment completed successfully!"