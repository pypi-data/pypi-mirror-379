Metadata-Version: 2.4
Name: awaitedreqs
Version: 0.1.0
Summary: Async requests-like HTTP client built on aiohttp with requests-compatible API
Home-page: https://github.com/kokofixcomputers/aiohttprequests
Author: kokodev
Author-email: koko@kokodev.cc
Keywords: async http requests aiohttp http-client
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Operating System :: OS Independent
Classifier: License :: OSI Approved :: MIT License
Classifier: Intended Audience :: Developers
Classifier: Topic :: Internet :: WWW/HTTP :: HTTP Servers
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: aiohttp>=3.8.0
Requires-Dist: chardet
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary


# aiohttprequests

An async requests-like HTTP client built on aiohttp with requests-compatible API.

## Installation

pip install aiohttprequests

text

## Usage

import aiohttprequests as requests
import asyncio

async def main():
# Simple GET
response = await requests.get('https://httpbin.org/get')
print(response.content)
print(response.text)
data = await response.json()
print(data)

text
# Using Session for persistent connection and cookies
async with requests.Session() as session:
    await session.get('https://httpbin.org/cookies/set/sessioncookie/123456789')
    r = await session.get('https://httpbin.org/cookies')
    print(await r.text)
asyncio.run(main())

text

## Features

- Fully async API, drop-in replacement for `requests` with `async/await`.
- Supports all standard HTTP methods: `get`, `post`, `put`, `delete`, etc.
- Session support with cookie persistence.
- Response object mimics `requests.Response`.
- Supports streaming, file uploads, JSON, timeout, headers, auth, and more.

## Notes

- Must call all methods with `await` inside async functions.
- Requires Python 3.7+ and aiohttp installed.

## License

MIT License
