# Pre-release job:
# Reserve an identifier on Zenodo or RADAR if needed,
# and update metadata files for the release.
# This job is run only for pre-release tags, starting with "pre"
prepare-release:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG =~ /^pre/
  before_script:
    - uv pip install FACILE-RS==${FACILE_RS_VERSION}
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
  script:
    - VERSION=`echo $CI_COMMIT_TAG | grep -oP '^pre-\K.*$'`
    - echo "Preparing release of $VERSION"
    # Update metadata with version and date
    - uv run facile-rs release prepare --version=$VERSION
    # Reserve a DOI on RADAR and include it to metadata
    - >
      if [ $ENABLE_RADAR = true ];
      then
          echo "preparing RADAR release, make sure the credentials are defined as gitlab CI/CD variables";
          uv run facile-rs radar prepare;
      else
          echo "RADAR skipped, change ENABLE_RADAR in .gitlab-ci.yml if you have the credentials";
      fi
    # Reserve a DOI on Zenodo and include it to metadata
    - >
      if [ $ENABLE_ZENODO = true ];
      then
          echo "preparing Zenodo release, make sure the Zenodo token is defined as gitlab CI/CD variables";
          uv run facile-rs zenodo prepare;
      else
          echo "Zenodo skipped, change ENABLE_ZENODO in .gitlab-ci.yml if you want to do a Zenodo release";
      fi
    # Bump version
    - sed -ri "s|^VERSION *= *['\"][^'\"]+['\"]|VERSION = '${VERSION}'|" ${VERSION_LOCATION}
    # Generate a CFF file
    - uv run facile-rs cff create --no-sort-authors
    # Commit and push updated metadata files
    - git add ${CODEMETA_LOCATION} ${CFF_PATH} ${VERSION_LOCATION}
    - git commit -m "Release ${VERSION}"
    - git push "https://PUSH_TOKEN:${PRIVATE_TOKEN}@${CI_REPOSITORY_URL#*@}" "HEAD:${RELEASE_BRANCH}"
    # Create a release tag to trigger the release pipeline
    - git tag $VERSION
    - git push "https://PUSH_TOKEN:${PRIVATE_TOKEN}@${CI_REPOSITORY_URL#*@}" --tags

# Create a GitLab release including DataCite metadata
# This job is run only for release tags, starting with "v" (release tags)
# Usually, these tags are created in the prepare-release job
gitlab-release-create:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG =~ /^v/
  before_script:
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - uv pip install FACILE-RS==${FACILE_RS_VERSION}
    - export DEBIAN_FRONTEND="noninteractive"
    - apt update
    - apt-get install -y jq
  script:
    # Retrieve DOI from CodeMeta metadata
    - DOI_URL=`jq -r ".[\"@id\"]" ${CODEMETA_LOCATION}`
    - DOI=${DOI_URL#"https://doi.org/"}
    # Create release description
    - >
      if [ $ENABLE_RADAR = true ];
      then
        RELEASE_DESCRIPTION="${RELEASE_DESCRIPTION}<br/>Find the archived version of the ${CI_COMMIT_TAG} release in the RADAR4KIT repository - [doi:${DOI}](${DOI_URL}).";
      elif [ $ENABLE_ZENODO = true ];
      then
        RELEASE_DESCRIPTION="${RELEASE_DESCRIPTION}<br/>Find the archived version of the ${CI_COMMIT_TAG} release on Zenodo - [doi:${DOI}](${DOI_URL}).";
      fi
    # Create GitLab release including DataCite metadata
    - >
      uv run facile-rs gitlab publish --release-description "$RELEASE_DESCRIPTION" \
      ${DATACITE_REGISTRY_URL}/${DATACITE_RELEASE}
