# -*- coding: utf-8 -*-
#
# PESummary documentation build configuration file, created by
# sphinx-quickstart on Sat Jan 12 14:02:33 2019.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import importlib.metadata
import os
import sys
from os.path import getmtime
from pathlib import Path

from sphinx.util import logging

SPHINX_DIR = Path(__file__).resolve().parent
ROOT_DIR = SPHINX_DIR.parent

# -- General configuration -----------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.ifconfig',
    'sphinx.ext.napoleon',
    'sphinx.ext.viewcode',
    'sphinxarg.ext',
    'sphinxcontrib.programoutput',
    'nbsphinx',
    'sphinx_panels',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'PESummary'
copyright = '2021, Charlie Hoy'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The full version, including alpha/beta/rc tags.
release = importlib.metadata.version(project.lower())
# The short X.Y version.
version = release.split('+', 1)[0]

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of documents that shouldn't be included in the build.
#unused_docs = []

# List of directories, relative to source directory, that shouldn't be searched
# for source files.
exclude_trees = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  Major themes that come with
# Sphinx are currently 'default' and 'sphinxdoc'.
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
#html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_use_modindex = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# If nonempty, this is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = ''

# Output file base name for HTML help builder.
htmlhelp_basename = 'PESummarydoc'


# -- Options for LaTeX output --------------------------------------------------

# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'

# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'PESummary.tex', u'PESummary Documentation',
   u'Charlie Hoy', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# Additional stuff for the LaTeX preamble.
#latex_preamble = ''

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_use_modindex = True


# -- Just-in-time content ------------------------------------------------------

def generate_parameter_descriptions(_):
    from pesummary.gw.file.standard_names import descriptive_names
    logger = logging.getLogger("parameter_descriptions")
    logger.info("writing gw/parameter_descriptions.csv")
    with (SPHINX_DIR / "gw" / "parameter_descriptions.csv").open("w") as file:
        for key, value in descriptive_names.items():
            print('\"{}\",\"{}\"\n'.format(key, value), file=file)


def generate_executable_table(_):
    import pkgutil
    import importlib
    import pesummary.cli
    logger = logging.getLogger("executable_descriptions")
    executables = [
        modname for _, modname, _ in pkgutil.walk_packages(
            path=pesummary.cli.__path__, prefix=pesummary.cli.__name__+"."
        )
    ]
    docs = {}
    logger.info("writing gw/executable_table.csv")
    for mod in executables:
        exe = importlib.import_module(mod)
        name = mod.split(".")[-1]
        try:
            docs[name] = exe.__doc__.replace("\n", " ")
        except AttributeError:
            docs[name] = "No description found"
    with (SPHINX_DIR / "gw" / "executable_table.csv").open("w") as file:
        for key, value in docs.items():
            print('\"{}\",\"{}\"\n'.format(key, value), file=file)


def make_public_notebook(_):
    """Generate a notebook for the GW150914 public example
    """
    logger = logging.getLogger("make_public_release")
    OUTPUT_DIR = SPHINX_DIR / "gw" / "tutorials"
    outputs = (
        OUTPUT_DIR / "posterior_samples.ipynb",
        OUTPUT_DIR / "GW190814.h5",
    )
    examplescript = ROOT_DIR / "examples" / "gw" / "make_public_release.py"
    examplemtime = getmtime(examplescript)
    # work out whether we need to rerun this
    # (if the outputs are missing or
    #  the input script is newer than all of the outputs)
    for filen in outputs:
        if not filen.exists() or examplemtime > getmtime(filen):
            break
    else:
        logger.debug("outputs exist and are up-to-date, skipping...")
        return
    logger.info("generating new public release notebook...")
    with examplescript.open("r") as script:
        raw = script.read()
    code = compile(raw, str(examplescript), "exec")
    cwd = Path.cwd()
    os.chdir(OUTPUT_DIR)
    try:
        exec(code, globals())
    finally:
        os.chdir(cwd)
    logger.info("... done")


def setup(app):
    app.connect('builder-inited', generate_parameter_descriptions)
    app.connect('builder-inited', generate_executable_table)
    app.connect('builder-inited', make_public_notebook)
