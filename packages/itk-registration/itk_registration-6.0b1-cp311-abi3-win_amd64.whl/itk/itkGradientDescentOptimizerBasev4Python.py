# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKOptimizersv4Python



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkGradientDescentOptimizerBasev4Python
else:
    import _itkGradientDescentOptimizerBasev4Python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkObjectToObjectOptimizerBasePython
import itk.itkOptimizerParameterScalesEstimatorPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkObjectToObjectMetricBasePython
import itk.itkSingleValuedCostFunctionv4Python
import itk.itkCostFunctionPython
class itkGradientDescentOptimizerBasev4TemplateD(itk.itkObjectToObjectOptimizerBasePython.itkObjectToObjectOptimizerBaseTemplateD):
    r"""Proxy of C++ itkGradientDescentOptimizerBasev4TemplateD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetGradient(self):
        r"""GetGradient(self) -> itkArrayD"""
        return _itkGradientDescentOptimizerBasev4Python.itkGradientDescentOptimizerBasev4TemplateD_GetGradient(self)

    def GetStopCondition(self):
        r"""GetStopCondition(self) -> itkObjectToObjectOptimizerBaseTemplateEnums::StopConditionObjectToObjectOptimizer const &"""
        return _itkGradientDescentOptimizerBasev4Python.itkGradientDescentOptimizerBasev4TemplateD_GetStopCondition(self)

    def StartOptimization(self, doOnlyInitialization=False):
        r"""
        StartOptimization(self, doOnlyInitialization=False)

        Parameters
        ----------
        doOnlyInitialization: bool

        """
        return _itkGradientDescentOptimizerBasev4Python.itkGradientDescentOptimizerBasev4TemplateD_StartOptimization(self, doOnlyInitialization)

    def ResumeOptimization(self):
        r"""ResumeOptimization(self)"""
        return _itkGradientDescentOptimizerBasev4Python.itkGradientDescentOptimizerBasev4TemplateD_ResumeOptimization(self)

    def StopOptimization(self):
        r"""StopOptimization(self)"""
        return _itkGradientDescentOptimizerBasev4Python.itkGradientDescentOptimizerBasev4TemplateD_StopOptimization(self)

    def ModifyGradientByScales(self):
        r"""ModifyGradientByScales(self)"""
        return _itkGradientDescentOptimizerBasev4Python.itkGradientDescentOptimizerBasev4TemplateD_ModifyGradientByScales(self)

    def ModifyGradientByLearningRate(self):
        r"""ModifyGradientByLearningRate(self)"""
        return _itkGradientDescentOptimizerBasev4Python.itkGradientDescentOptimizerBasev4TemplateD_ModifyGradientByLearningRate(self)

    def ModifyGradientByScalesOverSubRange(self, subrange):
        r"""
        ModifyGradientByScalesOverSubRange(self, subrange)

        Parameters
        ----------
        subrange: itkIndex2 const &

        """
        return _itkGradientDescentOptimizerBasev4Python.itkGradientDescentOptimizerBasev4TemplateD_ModifyGradientByScalesOverSubRange(self, subrange)

    def ModifyGradientByLearningRateOverSubRange(self, subrange):
        r"""
        ModifyGradientByLearningRateOverSubRange(self, subrange)

        Parameters
        ----------
        subrange: itkIndex2 const &

        """
        return _itkGradientDescentOptimizerBasev4Python.itkGradientDescentOptimizerBasev4TemplateD_ModifyGradientByLearningRateOverSubRange(self, subrange)
    __swig_destroy__ = _itkGradientDescentOptimizerBasev4Python.delete_itkGradientDescentOptimizerBasev4TemplateD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientDescentOptimizerBasev4TemplateD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientDescentOptimizerBasev4Python.itkGradientDescentOptimizerBasev4TemplateD_cast(obj)

# Register itkGradientDescentOptimizerBasev4TemplateD in _itkGradientDescentOptimizerBasev4Python:
_itkGradientDescentOptimizerBasev4Python.itkGradientDescentOptimizerBasev4TemplateD_swigregister(itkGradientDescentOptimizerBasev4TemplateD)
class itkGradientDescentOptimizerBasev4TemplateF(itk.itkObjectToObjectOptimizerBasePython.itkObjectToObjectOptimizerBaseTemplateF):
    r"""Proxy of C++ itkGradientDescentOptimizerBasev4TemplateF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetGradient(self):
        r"""GetGradient(self) -> itkArrayF"""
        return _itkGradientDescentOptimizerBasev4Python.itkGradientDescentOptimizerBasev4TemplateF_GetGradient(self)

    def GetStopCondition(self):
        r"""GetStopCondition(self) -> itkObjectToObjectOptimizerBaseTemplateEnums::StopConditionObjectToObjectOptimizer const &"""
        return _itkGradientDescentOptimizerBasev4Python.itkGradientDescentOptimizerBasev4TemplateF_GetStopCondition(self)

    def StartOptimization(self, doOnlyInitialization=False):
        r"""
        StartOptimization(self, doOnlyInitialization=False)

        Parameters
        ----------
        doOnlyInitialization: bool

        """
        return _itkGradientDescentOptimizerBasev4Python.itkGradientDescentOptimizerBasev4TemplateF_StartOptimization(self, doOnlyInitialization)

    def ResumeOptimization(self):
        r"""ResumeOptimization(self)"""
        return _itkGradientDescentOptimizerBasev4Python.itkGradientDescentOptimizerBasev4TemplateF_ResumeOptimization(self)

    def StopOptimization(self):
        r"""StopOptimization(self)"""
        return _itkGradientDescentOptimizerBasev4Python.itkGradientDescentOptimizerBasev4TemplateF_StopOptimization(self)

    def ModifyGradientByScales(self):
        r"""ModifyGradientByScales(self)"""
        return _itkGradientDescentOptimizerBasev4Python.itkGradientDescentOptimizerBasev4TemplateF_ModifyGradientByScales(self)

    def ModifyGradientByLearningRate(self):
        r"""ModifyGradientByLearningRate(self)"""
        return _itkGradientDescentOptimizerBasev4Python.itkGradientDescentOptimizerBasev4TemplateF_ModifyGradientByLearningRate(self)

    def ModifyGradientByScalesOverSubRange(self, subrange):
        r"""
        ModifyGradientByScalesOverSubRange(self, subrange)

        Parameters
        ----------
        subrange: itkIndex2 const &

        """
        return _itkGradientDescentOptimizerBasev4Python.itkGradientDescentOptimizerBasev4TemplateF_ModifyGradientByScalesOverSubRange(self, subrange)

    def ModifyGradientByLearningRateOverSubRange(self, subrange):
        r"""
        ModifyGradientByLearningRateOverSubRange(self, subrange)

        Parameters
        ----------
        subrange: itkIndex2 const &

        """
        return _itkGradientDescentOptimizerBasev4Python.itkGradientDescentOptimizerBasev4TemplateF_ModifyGradientByLearningRateOverSubRange(self, subrange)
    __swig_destroy__ = _itkGradientDescentOptimizerBasev4Python.delete_itkGradientDescentOptimizerBasev4TemplateF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGradientDescentOptimizerBasev4TemplateF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGradientDescentOptimizerBasev4Python.itkGradientDescentOptimizerBasev4TemplateF_cast(obj)

# Register itkGradientDescentOptimizerBasev4TemplateF in _itkGradientDescentOptimizerBasev4Python:
_itkGradientDescentOptimizerBasev4Python.itkGradientDescentOptimizerBasev4TemplateF_swigregister(itkGradientDescentOptimizerBasev4TemplateF)

