# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKOptimizersv4Python



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLBFGSBOptimizerv4Python
else:
    import _itkLBFGSBOptimizerv4Python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkLBFGSOptimizerBasev4Python
import itk.itkObjectToObjectMetricBasePython
import itk.itkSingleValuedCostFunctionv4Python
import itk.itkCostFunctionPython
import itk.itkOptimizerParametersPython
import itk.itkLBFGSOptimizerBaseHelperv4Python
import itk.vnl_cost_functionPython
import itk.vnl_unary_functionPython
import itk.itkVnlTypesPython
import itk.itkSingleValuedNonLinearVnlOptimizerv4Python
import itk.itkObjectToObjectOptimizerBasePython
import itk.itkOptimizerParameterScalesEstimatorPython

def itkLBFGSBOptimizerv4_New():
    return itkLBFGSBOptimizerv4.New()

class itkLBFGSBOptimizerv4(itk.itkLBFGSOptimizerBasev4Python.itkLBFGSOptimizerBasev4vnl_lbfgsb):
    r"""Proxy of C++ itkLBFGSBOptimizerv4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLBFGSBOptimizerv4_Pointer"""
        return _itkLBFGSBOptimizerv4Python.itkLBFGSBOptimizerv4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLBFGSBOptimizerv4_Pointer"""
        return _itkLBFGSBOptimizerv4Python.itkLBFGSBOptimizerv4_Clone(self)
    BoundSelectionValues_UNBOUNDED = _itkLBFGSBOptimizerv4Python.itkLBFGSBOptimizerv4_BoundSelectionValues_UNBOUNDED
    
    BoundSelectionValues_LOWERBOUNDED = _itkLBFGSBOptimizerv4Python.itkLBFGSBOptimizerv4_BoundSelectionValues_LOWERBOUNDED
    
    BoundSelectionValues_BOTHBOUNDED = _itkLBFGSBOptimizerv4Python.itkLBFGSBOptimizerv4_BoundSelectionValues_BOTHBOUNDED
    
    BoundSelectionValues_UPPERBOUNDED = _itkLBFGSBOptimizerv4Python.itkLBFGSBOptimizerv4_BoundSelectionValues_UPPERBOUNDED
    

    def SetInitialPosition(self, param):
        r"""
        SetInitialPosition(self, param)

        Parameters
        ----------
        param: itkOptimizerParametersD const &

        """
        return _itkLBFGSBOptimizerv4Python.itkLBFGSBOptimizerv4_SetInitialPosition(self, param)

    def GetInitialPosition(self):
        r"""GetInitialPosition(self) -> itkOptimizerParametersD"""
        return _itkLBFGSBOptimizerv4Python.itkLBFGSBOptimizerv4_GetInitialPosition(self)

    def StartOptimization(self, doOnlyInitialization=False):
        r"""
        StartOptimization(self, doOnlyInitialization=False)

        Parameters
        ----------
        doOnlyInitialization: bool

        """
        return _itkLBFGSBOptimizerv4Python.itkLBFGSBOptimizerv4_StartOptimization(self, doOnlyInitialization)

    def SetLowerBound(self, value):
        r"""
        SetLowerBound(self, value)

        Parameters
        ----------
        value: itkArrayD const &

        """
        return _itkLBFGSBOptimizerv4Python.itkLBFGSBOptimizerv4_SetLowerBound(self, value)

    def GetLowerBound(self):
        r"""GetLowerBound(self) -> itkArrayD"""
        return _itkLBFGSBOptimizerv4Python.itkLBFGSBOptimizerv4_GetLowerBound(self)

    def SetUpperBound(self, value):
        r"""
        SetUpperBound(self, value)

        Parameters
        ----------
        value: itkArrayD const &

        """
        return _itkLBFGSBOptimizerv4Python.itkLBFGSBOptimizerv4_SetUpperBound(self, value)

    def GetUpperBound(self):
        r"""GetUpperBound(self) -> itkArrayD"""
        return _itkLBFGSBOptimizerv4Python.itkLBFGSBOptimizerv4_GetUpperBound(self)

    def SetBoundSelection(self, value):
        r"""
        SetBoundSelection(self, value)

        Parameters
        ----------
        value: itkArraySL const &

        """
        return _itkLBFGSBOptimizerv4Python.itkLBFGSBOptimizerv4_SetBoundSelection(self, value)

    def GetBoundSelection(self):
        r"""GetBoundSelection(self) -> itkArraySL"""
        return _itkLBFGSBOptimizerv4Python.itkLBFGSBOptimizerv4_GetBoundSelection(self)

    def SetCostFunctionConvergenceFactor(self, arg0):
        r"""
        SetCostFunctionConvergenceFactor(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLBFGSBOptimizerv4Python.itkLBFGSBOptimizerv4_SetCostFunctionConvergenceFactor(self, arg0)

    def GetCostFunctionConvergenceFactor(self):
        r"""GetCostFunctionConvergenceFactor(self) -> double"""
        return _itkLBFGSBOptimizerv4Python.itkLBFGSBOptimizerv4_GetCostFunctionConvergenceFactor(self)

    def SetMaximumNumberOfCorrections(self, arg0):
        r"""
        SetMaximumNumberOfCorrections(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkLBFGSBOptimizerv4Python.itkLBFGSBOptimizerv4_SetMaximumNumberOfCorrections(self, arg0)

    def GetMaximumNumberOfCorrections(self):
        r"""GetMaximumNumberOfCorrections(self) -> unsigned int"""
        return _itkLBFGSBOptimizerv4Python.itkLBFGSBOptimizerv4_GetMaximumNumberOfCorrections(self)

    def GetInfinityNormOfProjectedGradient(self):
        r"""GetInfinityNormOfProjectedGradient(self) -> double const &"""
        return _itkLBFGSBOptimizerv4Python.itkLBFGSBOptimizerv4_GetInfinityNormOfProjectedGradient(self)
    __swig_destroy__ = _itkLBFGSBOptimizerv4Python.delete_itkLBFGSBOptimizerv4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLBFGSBOptimizerv4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLBFGSBOptimizerv4Python.itkLBFGSBOptimizerv4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLBFGSBOptimizerv4

        Create a new object of the class itkLBFGSBOptimizerv4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLBFGSBOptimizerv4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLBFGSBOptimizerv4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLBFGSBOptimizerv4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLBFGSBOptimizerv4 in _itkLBFGSBOptimizerv4Python:
_itkLBFGSBOptimizerv4Python.itkLBFGSBOptimizerv4_swigregister(itkLBFGSBOptimizerv4)

