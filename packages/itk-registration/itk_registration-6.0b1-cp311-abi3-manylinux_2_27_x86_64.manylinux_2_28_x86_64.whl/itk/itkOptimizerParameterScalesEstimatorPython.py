# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKOptimizersv4Python



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkOptimizerParameterScalesEstimatorPython
else:
    import _itkOptimizerParameterScalesEstimatorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
class itkOptimizerParameterScalesEstimatorTemplateD(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkOptimizerParameterScalesEstimatorTemplateD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def EstimateScales(self, scales):
        r"""
        EstimateScales(self, scales)

        Parameters
        ----------
        scales: itkOptimizerParametersD &

        """
        return _itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD_EstimateScales(self, scales)

    def EstimateStepScale(self, step):
        r"""
        EstimateStepScale(self, step) -> double

        Parameters
        ----------
        step: itkOptimizerParametersD const &

        """
        return _itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD_EstimateStepScale(self, step)

    def EstimateLocalStepScales(self, step, localStepScales):
        r"""
        EstimateLocalStepScales(self, step, localStepScales)

        Parameters
        ----------
        step: itkOptimizerParametersD const &
        localStepScales: itkOptimizerParametersD &

        """
        return _itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD_EstimateLocalStepScales(self, step, localStepScales)

    def EstimateMaximumStepSize(self):
        r"""EstimateMaximumStepSize(self) -> double"""
        return _itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD_EstimateMaximumStepSize(self)
    __swig_destroy__ = _itkOptimizerParameterScalesEstimatorPython.delete_itkOptimizerParameterScalesEstimatorTemplateD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOptimizerParameterScalesEstimatorTemplateD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD_cast(obj)

# Register itkOptimizerParameterScalesEstimatorTemplateD in _itkOptimizerParameterScalesEstimatorPython:
_itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD_swigregister(itkOptimizerParameterScalesEstimatorTemplateD)
class itkOptimizerParameterScalesEstimatorTemplateF(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkOptimizerParameterScalesEstimatorTemplateF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def EstimateScales(self, scales):
        r"""
        EstimateScales(self, scales)

        Parameters
        ----------
        scales: itkOptimizerParametersF &

        """
        return _itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateF_EstimateScales(self, scales)

    def EstimateStepScale(self, step):
        r"""
        EstimateStepScale(self, step) -> float

        Parameters
        ----------
        step: itkOptimizerParametersF const &

        """
        return _itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateF_EstimateStepScale(self, step)

    def EstimateLocalStepScales(self, step, localStepScales):
        r"""
        EstimateLocalStepScales(self, step, localStepScales)

        Parameters
        ----------
        step: itkOptimizerParametersF const &
        localStepScales: itkOptimizerParametersF &

        """
        return _itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateF_EstimateLocalStepScales(self, step, localStepScales)

    def EstimateMaximumStepSize(self):
        r"""EstimateMaximumStepSize(self) -> float"""
        return _itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateF_EstimateMaximumStepSize(self)
    __swig_destroy__ = _itkOptimizerParameterScalesEstimatorPython.delete_itkOptimizerParameterScalesEstimatorTemplateF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOptimizerParameterScalesEstimatorTemplateF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateF_cast(obj)

# Register itkOptimizerParameterScalesEstimatorTemplateF in _itkOptimizerParameterScalesEstimatorPython:
_itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateF_swigregister(itkOptimizerParameterScalesEstimatorTemplateF)

