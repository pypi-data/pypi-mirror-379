# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKOptimizersv4Python



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkQuasiNewtonOptimizerv4Python
else:
    import _itkQuasiNewtonOptimizerv4Python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkGradientDescentOptimizerv4Python
import itk.itkGradientDescentOptimizerBasev4Python
import itk.itkObjectToObjectOptimizerBasePython
import itk.itkObjectToObjectMetricBasePython
import itk.itkSingleValuedCostFunctionv4Python
import itk.itkCostFunctionPython
import itk.itkOptimizerParametersPython
import itk.itkOptimizerParameterScalesEstimatorPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython

def itkQuasiNewtonOptimizerv4_New():
    return itkQuasiNewtonOptimizerv4.New()

class itkQuasiNewtonOptimizerv4(itk.itkGradientDescentOptimizerv4Python.itkGradientDescentOptimizerv4TemplateD):
    r"""Proxy of C++ itkQuasiNewtonOptimizerv4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkQuasiNewtonOptimizerv4TemplateD_Pointer"""
        return _itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkQuasiNewtonOptimizerv4TemplateD_Pointer"""
        return _itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4_Clone(self)

    def StartOptimization(self, doOnlyInitialization=False):
        r"""
        StartOptimization(self, doOnlyInitialization=False)

        Parameters
        ----------
        doOnlyInitialization: bool

        """
        return _itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4_StartOptimization(self, doOnlyInitialization)

    def SetMaximumIterationsWithoutProgress(self, _arg):
        r"""
        SetMaximumIterationsWithoutProgress(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4_SetMaximumIterationsWithoutProgress(self, _arg)

    def SetMaximumNewtonStepSizeInPhysicalUnits(self, _arg):
        r"""
        SetMaximumNewtonStepSizeInPhysicalUnits(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4_SetMaximumNewtonStepSizeInPhysicalUnits(self, _arg)

    def GetNewtonStep(self):
        r"""GetNewtonStep(self) -> itkArrayD"""
        return _itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4_GetNewtonStep(self)

    def EstimateNewtonStepOverSubRange(self, subrange):
        r"""
        EstimateNewtonStepOverSubRange(self, subrange)

        Parameters
        ----------
        subrange: itkIndex2 const &

        """
        return _itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4_EstimateNewtonStepOverSubRange(self, subrange)

    def New(*args, **kargs):
        """New() -> itkQuasiNewtonOptimizerv4

        Create a new object of the class itkQuasiNewtonOptimizerv4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkQuasiNewtonOptimizerv4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkQuasiNewtonOptimizerv4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkQuasiNewtonOptimizerv4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkQuasiNewtonOptimizerv4 in _itkQuasiNewtonOptimizerv4Python:
_itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4_swigregister(itkQuasiNewtonOptimizerv4)

def itkQuasiNewtonOptimizerv4TemplateD_New():
    return itkQuasiNewtonOptimizerv4TemplateD.New()

class itkQuasiNewtonOptimizerv4TemplateD(itk.itkGradientDescentOptimizerv4Python.itkGradientDescentOptimizerv4TemplateD):
    r"""Proxy of C++ itkQuasiNewtonOptimizerv4TemplateD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkQuasiNewtonOptimizerv4TemplateD_Pointer"""
        return _itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4TemplateD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkQuasiNewtonOptimizerv4TemplateD_Pointer"""
        return _itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4TemplateD_Clone(self)

    def StartOptimization(self, doOnlyInitialization=False):
        r"""
        StartOptimization(self, doOnlyInitialization=False)

        Parameters
        ----------
        doOnlyInitialization: bool

        """
        return _itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4TemplateD_StartOptimization(self, doOnlyInitialization)

    def SetMaximumIterationsWithoutProgress(self, _arg):
        r"""
        SetMaximumIterationsWithoutProgress(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4TemplateD_SetMaximumIterationsWithoutProgress(self, _arg)

    def SetMaximumNewtonStepSizeInPhysicalUnits(self, _arg):
        r"""
        SetMaximumNewtonStepSizeInPhysicalUnits(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4TemplateD_SetMaximumNewtonStepSizeInPhysicalUnits(self, _arg)

    def GetNewtonStep(self):
        r"""GetNewtonStep(self) -> itkArrayD"""
        return _itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4TemplateD_GetNewtonStep(self)

    def EstimateNewtonStepOverSubRange(self, subrange):
        r"""
        EstimateNewtonStepOverSubRange(self, subrange)

        Parameters
        ----------
        subrange: itkIndex2 const &

        """
        return _itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4TemplateD_EstimateNewtonStepOverSubRange(self, subrange)
    __swig_destroy__ = _itkQuasiNewtonOptimizerv4Python.delete_itkQuasiNewtonOptimizerv4TemplateD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkQuasiNewtonOptimizerv4TemplateD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4TemplateD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkQuasiNewtonOptimizerv4TemplateD

        Create a new object of the class itkQuasiNewtonOptimizerv4TemplateD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkQuasiNewtonOptimizerv4TemplateD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkQuasiNewtonOptimizerv4TemplateD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkQuasiNewtonOptimizerv4TemplateD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkQuasiNewtonOptimizerv4TemplateD in _itkQuasiNewtonOptimizerv4Python:
_itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4TemplateD_swigregister(itkQuasiNewtonOptimizerv4TemplateD)

def itkQuasiNewtonOptimizerv4TemplateF_New():
    return itkQuasiNewtonOptimizerv4TemplateF.New()

class itkQuasiNewtonOptimizerv4TemplateF(itk.itkGradientDescentOptimizerv4Python.itkGradientDescentOptimizerv4TemplateF):
    r"""Proxy of C++ itkQuasiNewtonOptimizerv4TemplateF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkQuasiNewtonOptimizerv4TemplateF_Pointer"""
        return _itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4TemplateF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkQuasiNewtonOptimizerv4TemplateF_Pointer"""
        return _itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4TemplateF_Clone(self)

    def StartOptimization(self, doOnlyInitialization=False):
        r"""
        StartOptimization(self, doOnlyInitialization=False)

        Parameters
        ----------
        doOnlyInitialization: bool

        """
        return _itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4TemplateF_StartOptimization(self, doOnlyInitialization)

    def SetMaximumIterationsWithoutProgress(self, _arg):
        r"""
        SetMaximumIterationsWithoutProgress(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4TemplateF_SetMaximumIterationsWithoutProgress(self, _arg)

    def SetMaximumNewtonStepSizeInPhysicalUnits(self, _arg):
        r"""
        SetMaximumNewtonStepSizeInPhysicalUnits(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4TemplateF_SetMaximumNewtonStepSizeInPhysicalUnits(self, _arg)

    def GetNewtonStep(self):
        r"""GetNewtonStep(self) -> itkArrayF"""
        return _itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4TemplateF_GetNewtonStep(self)

    def EstimateNewtonStepOverSubRange(self, subrange):
        r"""
        EstimateNewtonStepOverSubRange(self, subrange)

        Parameters
        ----------
        subrange: itkIndex2 const &

        """
        return _itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4TemplateF_EstimateNewtonStepOverSubRange(self, subrange)
    __swig_destroy__ = _itkQuasiNewtonOptimizerv4Python.delete_itkQuasiNewtonOptimizerv4TemplateF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkQuasiNewtonOptimizerv4TemplateF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4TemplateF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkQuasiNewtonOptimizerv4TemplateF

        Create a new object of the class itkQuasiNewtonOptimizerv4TemplateF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkQuasiNewtonOptimizerv4TemplateF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkQuasiNewtonOptimizerv4TemplateF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkQuasiNewtonOptimizerv4TemplateF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkQuasiNewtonOptimizerv4TemplateF in _itkQuasiNewtonOptimizerv4Python:
_itkQuasiNewtonOptimizerv4Python.itkQuasiNewtonOptimizerv4TemplateF_swigregister(itkQuasiNewtonOptimizerv4TemplateF)

