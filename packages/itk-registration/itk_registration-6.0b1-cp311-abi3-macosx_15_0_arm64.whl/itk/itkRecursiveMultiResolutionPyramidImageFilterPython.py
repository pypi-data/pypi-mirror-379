# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKRegistrationCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkRecursiveMultiResolutionPyramidImageFilterPython
else:
    import _itkRecursiveMultiResolutionPyramidImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkMultiResolutionPyramidImageFilterPython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkArray2DPython

def itkRecursiveMultiResolutionPyramidImageFilterID2ID2_New():
    return itkRecursiveMultiResolutionPyramidImageFilterID2ID2.New()

class itkRecursiveMultiResolutionPyramidImageFilterID2ID2(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2):
    r"""Proxy of C++ itkRecursiveMultiResolutionPyramidImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveMultiResolutionPyramidImageFilterID2ID2_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveMultiResolutionPyramidImageFilterID2ID2_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterID2ID2_Clone(self)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveMultiResolutionPyramidImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterID2ID2

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterID2ID2 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterID2ID2_swigregister(itkRecursiveMultiResolutionPyramidImageFilterID2ID2)

def itkRecursiveMultiResolutionPyramidImageFilterID3ID3_New():
    return itkRecursiveMultiResolutionPyramidImageFilterID3ID3.New()

class itkRecursiveMultiResolutionPyramidImageFilterID3ID3(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3):
    r"""Proxy of C++ itkRecursiveMultiResolutionPyramidImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveMultiResolutionPyramidImageFilterID3ID3_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveMultiResolutionPyramidImageFilterID3ID3_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterID3ID3_Clone(self)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveMultiResolutionPyramidImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterID3ID3

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterID3ID3 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterID3ID3_swigregister(itkRecursiveMultiResolutionPyramidImageFilterID3ID3)

def itkRecursiveMultiResolutionPyramidImageFilterID4ID4_New():
    return itkRecursiveMultiResolutionPyramidImageFilterID4ID4.New()

class itkRecursiveMultiResolutionPyramidImageFilterID4ID4(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4):
    r"""Proxy of C++ itkRecursiveMultiResolutionPyramidImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveMultiResolutionPyramidImageFilterID4ID4_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveMultiResolutionPyramidImageFilterID4ID4_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterID4ID4_Clone(self)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveMultiResolutionPyramidImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterID4ID4

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterID4ID4 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterID4ID4_swigregister(itkRecursiveMultiResolutionPyramidImageFilterID4ID4)

def itkRecursiveMultiResolutionPyramidImageFilterIF2IF2_New():
    return itkRecursiveMultiResolutionPyramidImageFilterIF2IF2.New()

class itkRecursiveMultiResolutionPyramidImageFilterIF2IF2(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2):
    r"""Proxy of C++ itkRecursiveMultiResolutionPyramidImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveMultiResolutionPyramidImageFilterIF2IF2_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveMultiResolutionPyramidImageFilterIF2IF2_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIF2IF2_Clone(self)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveMultiResolutionPyramidImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterIF2IF2

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterIF2IF2 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIF2IF2_swigregister(itkRecursiveMultiResolutionPyramidImageFilterIF2IF2)

def itkRecursiveMultiResolutionPyramidImageFilterIF3IF3_New():
    return itkRecursiveMultiResolutionPyramidImageFilterIF3IF3.New()

class itkRecursiveMultiResolutionPyramidImageFilterIF3IF3(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3):
    r"""Proxy of C++ itkRecursiveMultiResolutionPyramidImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveMultiResolutionPyramidImageFilterIF3IF3_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveMultiResolutionPyramidImageFilterIF3IF3_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIF3IF3_Clone(self)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveMultiResolutionPyramidImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterIF3IF3

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterIF3IF3 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIF3IF3_swigregister(itkRecursiveMultiResolutionPyramidImageFilterIF3IF3)

def itkRecursiveMultiResolutionPyramidImageFilterIF4IF4_New():
    return itkRecursiveMultiResolutionPyramidImageFilterIF4IF4.New()

class itkRecursiveMultiResolutionPyramidImageFilterIF4IF4(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4):
    r"""Proxy of C++ itkRecursiveMultiResolutionPyramidImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveMultiResolutionPyramidImageFilterIF4IF4_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveMultiResolutionPyramidImageFilterIF4IF4_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIF4IF4_Clone(self)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveMultiResolutionPyramidImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterIF4IF4

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterIF4IF4 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIF4IF4_swigregister(itkRecursiveMultiResolutionPyramidImageFilterIF4IF4)

def itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2_New():
    return itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2.New()

class itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2):
    r"""Proxy of C++ itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2_Clone(self)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2_swigregister(itkRecursiveMultiResolutionPyramidImageFilterISS2ISS2)

def itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3_New():
    return itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3.New()

class itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3):
    r"""Proxy of C++ itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3_Clone(self)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3_swigregister(itkRecursiveMultiResolutionPyramidImageFilterISS3ISS3)

def itkRecursiveMultiResolutionPyramidImageFilterISS4ISS4_New():
    return itkRecursiveMultiResolutionPyramidImageFilterISS4ISS4.New()

class itkRecursiveMultiResolutionPyramidImageFilterISS4ISS4(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4):
    r"""Proxy of C++ itkRecursiveMultiResolutionPyramidImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveMultiResolutionPyramidImageFilterISS4ISS4_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveMultiResolutionPyramidImageFilterISS4ISS4_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterISS4ISS4_Clone(self)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveMultiResolutionPyramidImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterISS4ISS4

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterISS4ISS4 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterISS4ISS4_swigregister(itkRecursiveMultiResolutionPyramidImageFilterISS4ISS4)

def itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2_New():
    return itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2.New()

class itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2):
    r"""Proxy of C++ itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2_Clone(self)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2_swigregister(itkRecursiveMultiResolutionPyramidImageFilterIUC2IUC2)

def itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3_New():
    return itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3.New()

class itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3):
    r"""Proxy of C++ itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3_Clone(self)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3_swigregister(itkRecursiveMultiResolutionPyramidImageFilterIUC3IUC3)

def itkRecursiveMultiResolutionPyramidImageFilterIUC4IUC4_New():
    return itkRecursiveMultiResolutionPyramidImageFilterIUC4IUC4.New()

class itkRecursiveMultiResolutionPyramidImageFilterIUC4IUC4(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4):
    r"""Proxy of C++ itkRecursiveMultiResolutionPyramidImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveMultiResolutionPyramidImageFilterIUC4IUC4_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveMultiResolutionPyramidImageFilterIUC4IUC4_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUC4IUC4_Clone(self)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveMultiResolutionPyramidImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterIUC4IUC4

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterIUC4IUC4 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUC4IUC4_swigregister(itkRecursiveMultiResolutionPyramidImageFilterIUC4IUC4)

def itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2_New():
    return itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2.New()

class itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2):
    r"""Proxy of C++ itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2_Clone(self)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2_swigregister(itkRecursiveMultiResolutionPyramidImageFilterIUS2IUS2)

def itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3_New():
    return itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3.New()

class itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3):
    r"""Proxy of C++ itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3_Clone(self)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3_swigregister(itkRecursiveMultiResolutionPyramidImageFilterIUS3IUS3)

def itkRecursiveMultiResolutionPyramidImageFilterIUS4IUS4_New():
    return itkRecursiveMultiResolutionPyramidImageFilterIUS4IUS4.New()

class itkRecursiveMultiResolutionPyramidImageFilterIUS4IUS4(itk.itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4):
    r"""Proxy of C++ itkRecursiveMultiResolutionPyramidImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRecursiveMultiResolutionPyramidImageFilterIUS4IUS4_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRecursiveMultiResolutionPyramidImageFilterIUS4IUS4_Pointer"""
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUS4IUS4_Clone(self)
    __swig_destroy__ = _itkRecursiveMultiResolutionPyramidImageFilterPython.delete_itkRecursiveMultiResolutionPyramidImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRecursiveMultiResolutionPyramidImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRecursiveMultiResolutionPyramidImageFilterIUS4IUS4

        Create a new object of the class itkRecursiveMultiResolutionPyramidImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveMultiResolutionPyramidImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRecursiveMultiResolutionPyramidImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRecursiveMultiResolutionPyramidImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRecursiveMultiResolutionPyramidImageFilterIUS4IUS4 in _itkRecursiveMultiResolutionPyramidImageFilterPython:
_itkRecursiveMultiResolutionPyramidImageFilterPython.itkRecursiveMultiResolutionPyramidImageFilterIUS4IUS4_swigregister(itkRecursiveMultiResolutionPyramidImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def recursive_multi_resolution_pyramid_image_filter(*args: itkt.ImageLike,  number_of_levels: int=..., schedule=..., starting_shrink_factors: int=..., maximum_error: float=..., use_shrink_image_filter: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for RecursiveMultiResolutionPyramidImageFilter"""
    import itk

    kwarg_typehints = { 'number_of_levels':number_of_levels,'schedule':schedule,'starting_shrink_factors':starting_shrink_factors,'maximum_error':maximum_error,'use_shrink_image_filter':use_shrink_image_filter }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.RecursiveMultiResolutionPyramidImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def recursive_multi_resolution_pyramid_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKRegistrationCommon.RecursiveMultiResolutionPyramidImageFilter
    recursive_multi_resolution_pyramid_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    recursive_multi_resolution_pyramid_image_filter.__doc__ = filter_object.__doc__



