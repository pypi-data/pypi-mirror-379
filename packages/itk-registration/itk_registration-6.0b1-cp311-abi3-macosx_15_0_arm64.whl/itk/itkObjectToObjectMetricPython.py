# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKOptimizersv4Python



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkObjectToObjectMetricPython
else:
    import _itkObjectToObjectMetricPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkDisplacementFieldTransformPython
import itk.itkCovariantVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.itkArray2DPython
import itk.itkOptimizerParametersPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkArrayPython
import itk.itkVectorImagePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkObjectToObjectMetricBasePython
import itk.itkSingleValuedCostFunctionv4Python
import itk.itkCostFunctionPython
class itkObjectToObjectMetric22(itk.itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD):
    r"""Proxy of C++ itkObjectToObjectMetric22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedTransform(self, _arg):
        r"""
        SetFixedTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD22 *

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_SetFixedTransform(self, _arg)

    def GetModifiableFixedTransform(self):
        r"""GetModifiableFixedTransform(self) -> itkTransformD22"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetModifiableFixedTransform(self)

    def GetFixedTransform(self, *args):
        r"""
        GetFixedTransform(self) -> itkTransformD22
        GetFixedTransform(self) -> itkTransformD22
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetFixedTransform(self, *args)

    def SetMovingTransform(self, _arg):
        r"""
        SetMovingTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD22 *

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_SetMovingTransform(self, _arg)

    def GetModifiableMovingTransform(self):
        r"""GetModifiableMovingTransform(self) -> itkTransformD22"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetModifiableMovingTransform(self)

    def GetMovingTransform(self, *args):
        r"""
        GetMovingTransform(self) -> itkTransformD22
        GetMovingTransform(self) -> itkTransformD22
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetMovingTransform(self, *args)

    def SetTransform(self, transform):
        r"""
        SetTransform(self, transform)

        Parameters
        ----------
        transform: itkTransformD22 *

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_SetTransform(self, transform)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformD22"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetTransform(self)

    def GetNumberOfValidPoints(self):
        r"""GetNumberOfValidPoints(self) -> unsigned long"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetNumberOfValidPoints(self)

    def SetVirtualDomain(self, spacing, origin, direction, region):
        r"""
        SetVirtualDomain(self, spacing, origin, direction, region)

        Parameters
        ----------
        spacing: itkVectorD2 const &
        origin: itkPointD2 const &
        direction: itkMatrixD22 const &
        region: itkImageRegion2 const &

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_SetVirtualDomain(self, spacing, origin, direction, region)

    def SetVirtualDomainFromImage(self, virtualImage):
        r"""
        SetVirtualDomainFromImage(self, virtualImage)

        Parameters
        ----------
        virtualImage: itkImageD2 const *

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_SetVirtualDomainFromImage(self, virtualImage)

    def SupportsArbitraryVirtualDomainSamples(self):
        r"""SupportsArbitraryVirtualDomainSamples(self) -> bool"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_SupportsArbitraryVirtualDomainSamples(self)

    def GetVirtualDomainTimeStamp(self):
        r"""GetVirtualDomainTimeStamp(self) -> itkTimeStamp"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetVirtualDomainTimeStamp(self)

    def GetVirtualSpacing(self):
        r"""GetVirtualSpacing(self) -> itkVectorD2"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetVirtualSpacing(self)

    def GetVirtualOrigin(self):
        r"""GetVirtualOrigin(self) -> itkPointD2"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetVirtualOrigin(self)

    def GetVirtualDirection(self):
        r"""GetVirtualDirection(self) -> itkMatrixD22"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetVirtualDirection(self)

    def GetVirtualRegion(self):
        r"""GetVirtualRegion(self) -> itkImageRegion2"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetVirtualRegion(self)

    def GetModifiableVirtualImage(self):
        r"""GetModifiableVirtualImage(self) -> itkImageD2"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetModifiableVirtualImage(self)

    def GetVirtualImage(self, *args):
        r"""
        GetVirtualImage(self) -> itkImageD2
        GetVirtualImage(self) -> itkImageD2
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetVirtualImage(self, *args)

    def ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters):
        r"""
        ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters) -> long

        Parameters
        ----------
        index: itkIndex2 const &
        numberOfLocalParameters: unsigned int const &

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters)

    def ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters):
        r"""
        ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters) -> long

        Parameters
        ----------
        point: itkPointD2 const &
        numberOfLocalParameters: unsigned int const &

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters)

    def IsInsideVirtualDomain(self, *args):
        r"""
        IsInsideVirtualDomain(self, point) -> bool

        Parameters
        ----------
        point: itkPointD2 const &

        IsInsideVirtualDomain(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_IsInsideVirtualDomain(self, *args)
    __swig_destroy__ = _itkObjectToObjectMetricPython.delete_itkObjectToObjectMetric22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkObjectToObjectMetric22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_cast(obj)

# Register itkObjectToObjectMetric22 in _itkObjectToObjectMetricPython:
_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_swigregister(itkObjectToObjectMetric22)
class itkObjectToObjectMetric33(itk.itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD):
    r"""Proxy of C++ itkObjectToObjectMetric33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedTransform(self, _arg):
        r"""
        SetFixedTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD33 *

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_SetFixedTransform(self, _arg)

    def GetModifiableFixedTransform(self):
        r"""GetModifiableFixedTransform(self) -> itkTransformD33"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetModifiableFixedTransform(self)

    def GetFixedTransform(self, *args):
        r"""
        GetFixedTransform(self) -> itkTransformD33
        GetFixedTransform(self) -> itkTransformD33
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetFixedTransform(self, *args)

    def SetMovingTransform(self, _arg):
        r"""
        SetMovingTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD33 *

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_SetMovingTransform(self, _arg)

    def GetModifiableMovingTransform(self):
        r"""GetModifiableMovingTransform(self) -> itkTransformD33"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetModifiableMovingTransform(self)

    def GetMovingTransform(self, *args):
        r"""
        GetMovingTransform(self) -> itkTransformD33
        GetMovingTransform(self) -> itkTransformD33
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetMovingTransform(self, *args)

    def SetTransform(self, transform):
        r"""
        SetTransform(self, transform)

        Parameters
        ----------
        transform: itkTransformD33 *

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_SetTransform(self, transform)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformD33"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetTransform(self)

    def GetNumberOfValidPoints(self):
        r"""GetNumberOfValidPoints(self) -> unsigned long"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetNumberOfValidPoints(self)

    def SetVirtualDomain(self, spacing, origin, direction, region):
        r"""
        SetVirtualDomain(self, spacing, origin, direction, region)

        Parameters
        ----------
        spacing: itkVectorD3 const &
        origin: itkPointD3 const &
        direction: itkMatrixD33 const &
        region: itkImageRegion3 const &

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_SetVirtualDomain(self, spacing, origin, direction, region)

    def SetVirtualDomainFromImage(self, virtualImage):
        r"""
        SetVirtualDomainFromImage(self, virtualImage)

        Parameters
        ----------
        virtualImage: itkImageD3 const *

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_SetVirtualDomainFromImage(self, virtualImage)

    def SupportsArbitraryVirtualDomainSamples(self):
        r"""SupportsArbitraryVirtualDomainSamples(self) -> bool"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_SupportsArbitraryVirtualDomainSamples(self)

    def GetVirtualDomainTimeStamp(self):
        r"""GetVirtualDomainTimeStamp(self) -> itkTimeStamp"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetVirtualDomainTimeStamp(self)

    def GetVirtualSpacing(self):
        r"""GetVirtualSpacing(self) -> itkVectorD3"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetVirtualSpacing(self)

    def GetVirtualOrigin(self):
        r"""GetVirtualOrigin(self) -> itkPointD3"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetVirtualOrigin(self)

    def GetVirtualDirection(self):
        r"""GetVirtualDirection(self) -> itkMatrixD33"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetVirtualDirection(self)

    def GetVirtualRegion(self):
        r"""GetVirtualRegion(self) -> itkImageRegion3"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetVirtualRegion(self)

    def GetModifiableVirtualImage(self):
        r"""GetModifiableVirtualImage(self) -> itkImageD3"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetModifiableVirtualImage(self)

    def GetVirtualImage(self, *args):
        r"""
        GetVirtualImage(self) -> itkImageD3
        GetVirtualImage(self) -> itkImageD3
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetVirtualImage(self, *args)

    def ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters):
        r"""
        ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters) -> long

        Parameters
        ----------
        index: itkIndex3 const &
        numberOfLocalParameters: unsigned int const &

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters)

    def ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters):
        r"""
        ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters) -> long

        Parameters
        ----------
        point: itkPointD3 const &
        numberOfLocalParameters: unsigned int const &

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters)

    def IsInsideVirtualDomain(self, *args):
        r"""
        IsInsideVirtualDomain(self, point) -> bool

        Parameters
        ----------
        point: itkPointD3 const &

        IsInsideVirtualDomain(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_IsInsideVirtualDomain(self, *args)
    __swig_destroy__ = _itkObjectToObjectMetricPython.delete_itkObjectToObjectMetric33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkObjectToObjectMetric33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_cast(obj)

# Register itkObjectToObjectMetric33 in _itkObjectToObjectMetricPython:
_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_swigregister(itkObjectToObjectMetric33)
class itkObjectToObjectMetric44(itk.itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD):
    r"""Proxy of C++ itkObjectToObjectMetric44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedTransform(self, _arg):
        r"""
        SetFixedTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD44 *

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric44_SetFixedTransform(self, _arg)

    def GetModifiableFixedTransform(self):
        r"""GetModifiableFixedTransform(self) -> itkTransformD44"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetModifiableFixedTransform(self)

    def GetFixedTransform(self, *args):
        r"""
        GetFixedTransform(self) -> itkTransformD44
        GetFixedTransform(self) -> itkTransformD44
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetFixedTransform(self, *args)

    def SetMovingTransform(self, _arg):
        r"""
        SetMovingTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD44 *

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric44_SetMovingTransform(self, _arg)

    def GetModifiableMovingTransform(self):
        r"""GetModifiableMovingTransform(self) -> itkTransformD44"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetModifiableMovingTransform(self)

    def GetMovingTransform(self, *args):
        r"""
        GetMovingTransform(self) -> itkTransformD44
        GetMovingTransform(self) -> itkTransformD44
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetMovingTransform(self, *args)

    def SetTransform(self, transform):
        r"""
        SetTransform(self, transform)

        Parameters
        ----------
        transform: itkTransformD44 *

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric44_SetTransform(self, transform)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformD44"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetTransform(self)

    def GetNumberOfValidPoints(self):
        r"""GetNumberOfValidPoints(self) -> unsigned long"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetNumberOfValidPoints(self)

    def SetVirtualDomain(self, spacing, origin, direction, region):
        r"""
        SetVirtualDomain(self, spacing, origin, direction, region)

        Parameters
        ----------
        spacing: itkVectorD4 const &
        origin: itkPointD4 const &
        direction: itkMatrixD44 const &
        region: itkImageRegion4 const &

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric44_SetVirtualDomain(self, spacing, origin, direction, region)

    def SetVirtualDomainFromImage(self, virtualImage):
        r"""
        SetVirtualDomainFromImage(self, virtualImage)

        Parameters
        ----------
        virtualImage: itkImageD4 const *

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric44_SetVirtualDomainFromImage(self, virtualImage)

    def SupportsArbitraryVirtualDomainSamples(self):
        r"""SupportsArbitraryVirtualDomainSamples(self) -> bool"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric44_SupportsArbitraryVirtualDomainSamples(self)

    def GetVirtualDomainTimeStamp(self):
        r"""GetVirtualDomainTimeStamp(self) -> itkTimeStamp"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetVirtualDomainTimeStamp(self)

    def GetVirtualSpacing(self):
        r"""GetVirtualSpacing(self) -> itkVectorD4"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetVirtualSpacing(self)

    def GetVirtualOrigin(self):
        r"""GetVirtualOrigin(self) -> itkPointD4"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetVirtualOrigin(self)

    def GetVirtualDirection(self):
        r"""GetVirtualDirection(self) -> itkMatrixD44"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetVirtualDirection(self)

    def GetVirtualRegion(self):
        r"""GetVirtualRegion(self) -> itkImageRegion4"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetVirtualRegion(self)

    def GetModifiableVirtualImage(self):
        r"""GetModifiableVirtualImage(self) -> itkImageD4"""
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetModifiableVirtualImage(self)

    def GetVirtualImage(self, *args):
        r"""
        GetVirtualImage(self) -> itkImageD4
        GetVirtualImage(self) -> itkImageD4
        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetVirtualImage(self, *args)

    def ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters):
        r"""
        ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters) -> long

        Parameters
        ----------
        index: itkIndex4 const &
        numberOfLocalParameters: unsigned int const &

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric44_ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters)

    def ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters):
        r"""
        ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters) -> long

        Parameters
        ----------
        point: itkPointD4 const &
        numberOfLocalParameters: unsigned int const &

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric44_ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters)

    def IsInsideVirtualDomain(self, *args):
        r"""
        IsInsideVirtualDomain(self, point) -> bool

        Parameters
        ----------
        point: itkPointD4 const &

        IsInsideVirtualDomain(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric44_IsInsideVirtualDomain(self, *args)
    __swig_destroy__ = _itkObjectToObjectMetricPython.delete_itkObjectToObjectMetric44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkObjectToObjectMetric44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkObjectToObjectMetricPython.itkObjectToObjectMetric44_cast(obj)

# Register itkObjectToObjectMetric44 in _itkObjectToObjectMetricPython:
_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_swigregister(itkObjectToObjectMetric44)

