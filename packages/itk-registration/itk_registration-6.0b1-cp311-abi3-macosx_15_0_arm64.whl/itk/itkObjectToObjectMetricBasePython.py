# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKOptimizersv4Python



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkObjectToObjectMetricBasePython
else:
    import _itkObjectToObjectMetricBasePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkArrayPython
import itk.itkOptimizerParametersPython
import itk.itkSingleValuedCostFunctionv4Python
import itk.itkCostFunctionPython
class itkObjectToObjectMetricBaseTemplateD(itk.itkSingleValuedCostFunctionv4Python.itkSingleValuedCostFunctionv4TemplateD):
    r"""Proxy of C++ itkObjectToObjectMetricBaseTemplateD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedObject(self, _arg):
        r"""
        SetFixedObject(self, _arg)

        Parameters
        ----------
        _arg: itkObject const *

        """
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD_SetFixedObject(self, _arg)

    def GetFixedObject(self):
        r"""GetFixedObject(self) -> itkObject"""
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD_GetFixedObject(self)

    def SetMovingObject(self, _arg):
        r"""
        SetMovingObject(self, _arg)

        Parameters
        ----------
        _arg: itkObject const *

        """
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD_SetMovingObject(self, _arg)

    def GetMovingObject(self):
        r"""GetMovingObject(self) -> itkObject"""
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD_GetMovingObject(self)

    def SetGradientSource(self, _arg):
        r"""
        SetGradientSource(self, _arg)

        Parameters
        ----------
        _arg: enum itkObjectToObjectMetricBaseTemplateEnums::GradientSource

        """
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD_SetGradientSource(self, _arg)

    def GetGradientSource(self):
        r"""GetGradientSource(self) -> itkObjectToObjectMetricBaseTemplateEnums::GradientSource"""
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD_GetGradientSource(self)

    def GetGradientSourceIncludesFixed(self):
        r"""GetGradientSourceIncludesFixed(self) -> bool"""
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD_GetGradientSourceIncludesFixed(self)

    def GetGradientSourceIncludesMoving(self):
        r"""GetGradientSourceIncludesMoving(self) -> bool"""
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD_GetGradientSourceIncludesMoving(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD_Initialize(self)

    def GetDerivative(self, arg0):
        r"""
        GetDerivative(self, arg0)

        Parameters
        ----------
        arg0: itkArrayD &

        """
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD_GetDerivative(self, arg0)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned int"""
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD_GetNumberOfLocalParameters(self)

    def SetParameters(self, params):
        r"""
        SetParameters(self, params)

        Parameters
        ----------
        params: itkOptimizerParametersD &

        """
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD_SetParameters(self, params)

    def GetParameters(self):
        r"""GetParameters(self) -> itkOptimizerParametersD"""
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD_GetParameters(self)

    def HasLocalSupport(self):
        r"""HasLocalSupport(self) -> bool"""
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD_HasLocalSupport(self)

    def UpdateTransformParameters(self, *args):
        r"""
        UpdateTransformParameters(self, derivative, factor=NumericTraits< ParametersValueType >::OneValue())

        Parameters
        ----------
        derivative: itkArrayD const &
        factor: double

        """
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD_UpdateTransformParameters(self, *args)

    def GetCurrentValue(self):
        r"""GetCurrentValue(self) -> double"""
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD_GetCurrentValue(self)

    def GetMetricCategory(self):
        r"""GetMetricCategory(self) -> itkObjectToObjectMetricBaseTemplateEnums::MetricCategory"""
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD_GetMetricCategory(self)
    __swig_destroy__ = _itkObjectToObjectMetricBasePython.delete_itkObjectToObjectMetricBaseTemplateD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkObjectToObjectMetricBaseTemplateD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD_cast(obj)

# Register itkObjectToObjectMetricBaseTemplateD in _itkObjectToObjectMetricBasePython:
_itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD_swigregister(itkObjectToObjectMetricBaseTemplateD)
class itkObjectToObjectMetricBaseTemplateEnums(object):
    r"""Proxy of C++ itkObjectToObjectMetricBaseTemplateEnums class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GradientSource_GRADIENT_SOURCE_FIXED = _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateEnums_GradientSource_GRADIENT_SOURCE_FIXED
    
    GradientSource_GRADIENT_SOURCE_MOVING = _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateEnums_GradientSource_GRADIENT_SOURCE_MOVING
    
    GradientSource_GRADIENT_SOURCE_BOTH = _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateEnums_GradientSource_GRADIENT_SOURCE_BOTH
    
    MetricCategory_UNKNOWN_METRIC = _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateEnums_MetricCategory_UNKNOWN_METRIC
    
    MetricCategory_OBJECT_METRIC = _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateEnums_MetricCategory_OBJECT_METRIC
    
    MetricCategory_IMAGE_METRIC = _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateEnums_MetricCategory_IMAGE_METRIC
    
    MetricCategory_POINT_SET_METRIC = _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateEnums_MetricCategory_POINT_SET_METRIC
    
    MetricCategory_MULTI_METRIC = _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateEnums_MetricCategory_MULTI_METRIC
    

    def __init__(self, *args):
        r"""
        __init__(self) -> itkObjectToObjectMetricBaseTemplateEnums
        __init__(self, arg0) -> itkObjectToObjectMetricBaseTemplateEnums

        Parameters
        ----------
        arg0: itkObjectToObjectMetricBaseTemplateEnums const &

        """
        _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateEnums_swiginit(self, _itkObjectToObjectMetricBasePython.new_itkObjectToObjectMetricBaseTemplateEnums(*args))
    __swig_destroy__ = _itkObjectToObjectMetricBasePython.delete_itkObjectToObjectMetricBaseTemplateEnums

# Register itkObjectToObjectMetricBaseTemplateEnums in _itkObjectToObjectMetricBasePython:
_itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateEnums_swigregister(itkObjectToObjectMetricBaseTemplateEnums)
class itkObjectToObjectMetricBaseTemplateF(itk.itkSingleValuedCostFunctionv4Python.itkSingleValuedCostFunctionv4TemplateF):
    r"""Proxy of C++ itkObjectToObjectMetricBaseTemplateF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedObject(self, _arg):
        r"""
        SetFixedObject(self, _arg)

        Parameters
        ----------
        _arg: itkObject const *

        """
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateF_SetFixedObject(self, _arg)

    def GetFixedObject(self):
        r"""GetFixedObject(self) -> itkObject"""
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateF_GetFixedObject(self)

    def SetMovingObject(self, _arg):
        r"""
        SetMovingObject(self, _arg)

        Parameters
        ----------
        _arg: itkObject const *

        """
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateF_SetMovingObject(self, _arg)

    def GetMovingObject(self):
        r"""GetMovingObject(self) -> itkObject"""
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateF_GetMovingObject(self)

    def SetGradientSource(self, _arg):
        r"""
        SetGradientSource(self, _arg)

        Parameters
        ----------
        _arg: enum itkObjectToObjectMetricBaseTemplateEnums::GradientSource

        """
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateF_SetGradientSource(self, _arg)

    def GetGradientSource(self):
        r"""GetGradientSource(self) -> itkObjectToObjectMetricBaseTemplateEnums::GradientSource"""
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateF_GetGradientSource(self)

    def GetGradientSourceIncludesFixed(self):
        r"""GetGradientSourceIncludesFixed(self) -> bool"""
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateF_GetGradientSourceIncludesFixed(self)

    def GetGradientSourceIncludesMoving(self):
        r"""GetGradientSourceIncludesMoving(self) -> bool"""
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateF_GetGradientSourceIncludesMoving(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateF_Initialize(self)

    def GetDerivative(self, arg0):
        r"""
        GetDerivative(self, arg0)

        Parameters
        ----------
        arg0: itkArrayF &

        """
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateF_GetDerivative(self, arg0)

    def GetNumberOfLocalParameters(self):
        r"""GetNumberOfLocalParameters(self) -> unsigned int"""
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateF_GetNumberOfLocalParameters(self)

    def SetParameters(self, params):
        r"""
        SetParameters(self, params)

        Parameters
        ----------
        params: itkOptimizerParametersF &

        """
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateF_SetParameters(self, params)

    def GetParameters(self):
        r"""GetParameters(self) -> itkOptimizerParametersF"""
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateF_GetParameters(self)

    def HasLocalSupport(self):
        r"""HasLocalSupport(self) -> bool"""
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateF_HasLocalSupport(self)

    def UpdateTransformParameters(self, *args):
        r"""
        UpdateTransformParameters(self, derivative, factor=NumericTraits< ParametersValueType >::OneValue())

        Parameters
        ----------
        derivative: itkArrayF const &
        factor: float

        """
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateF_UpdateTransformParameters(self, *args)

    def GetCurrentValue(self):
        r"""GetCurrentValue(self) -> float"""
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateF_GetCurrentValue(self)

    def GetMetricCategory(self):
        r"""GetMetricCategory(self) -> itkObjectToObjectMetricBaseTemplateEnums::MetricCategory"""
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateF_GetMetricCategory(self)
    __swig_destroy__ = _itkObjectToObjectMetricBasePython.delete_itkObjectToObjectMetricBaseTemplateF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkObjectToObjectMetricBaseTemplateF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateF_cast(obj)

# Register itkObjectToObjectMetricBaseTemplateF in _itkObjectToObjectMetricBasePython:
_itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateF_swigregister(itkObjectToObjectMetricBaseTemplateF)

