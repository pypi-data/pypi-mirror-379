# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKRegistrationCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMultiResolutionPyramidImageFilterPython
else:
    import _itkMultiResolutionPyramidImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkArray2DPython

def itkMultiResolutionPyramidImageFilterID2ID2_New():
    return itkMultiResolutionPyramidImageFilterID2ID2.New()

class itkMultiResolutionPyramidImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkMultiResolutionPyramidImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiResolutionPyramidImageFilterID2ID2_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiResolutionPyramidImageFilterID2ID2_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_Clone(self)

    def SetNumberOfLevels(self, num):
        r"""
        SetNumberOfLevels(self, num)

        Parameters
        ----------
        num: unsigned int

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_SetNumberOfLevels(self, num)

    def GetNumberOfLevels(self):
        r"""GetNumberOfLevels(self) -> unsigned int"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GetNumberOfLevels(self)

    def SetSchedule(self, schedule):
        r"""
        SetSchedule(self, schedule)

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_SetSchedule(self, schedule)

    def GetSchedule(self):
        r"""GetSchedule(self) -> itkArray2DUI"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GetSchedule(self)

    def SetStartingShrinkFactors(self, *args):
        r"""
        SetStartingShrinkFactors(self, factor)

        Parameters
        ----------
        factor: unsigned int

        SetStartingShrinkFactors(self, factors)

        Parameters
        ----------
        factors: unsigned int const *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_SetStartingShrinkFactors(self, *args)

    def GetStartingShrinkFactors(self):
        r"""GetStartingShrinkFactors(self) -> unsigned int const *"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GetStartingShrinkFactors(self)

    @staticmethod
    def IsScheduleDownwardDivisible(schedule):
        r"""
        IsScheduleDownwardDivisible(schedule) -> bool

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_IsScheduleDownwardDivisible(schedule)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GenerateOutputInformation(self)

    def GenerateOutputRequestedRegion(self, refOutput):
        r"""
        GenerateOutputRequestedRegion(self, refOutput)

        Parameters
        ----------
        refOutput: itkDataObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GenerateOutputRequestedRegion(self, refOutput)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GenerateInputRequestedRegion(self)

    def SetMaximumError(self, _arg):
        r"""
        SetMaximumError(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_SetMaximumError(self, _arg)

    def GetMaximumError(self):
        r"""GetMaximumError(self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GetMaximumError(self)

    def SetUseShrinkImageFilter(self, _arg):
        r"""
        SetUseShrinkImageFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_SetUseShrinkImageFilter(self, _arg)

    def GetUseShrinkImageFilter(self):
        r"""GetUseShrinkImageFilter(self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GetUseShrinkImageFilter(self)

    def UseShrinkImageFilterOn(self):
        r"""UseShrinkImageFilterOn(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_UseShrinkImageFilterOn(self)

    def UseShrinkImageFilterOff(self):
        r"""UseShrinkImageFilterOff(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_UseShrinkImageFilterOff(self)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiResolutionPyramidImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterID2ID2

        Create a new object of the class itkMultiResolutionPyramidImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterID2ID2 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_swigregister(itkMultiResolutionPyramidImageFilterID2ID2)

def itkMultiResolutionPyramidImageFilterID3ID3_New():
    return itkMultiResolutionPyramidImageFilterID3ID3.New()

class itkMultiResolutionPyramidImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkMultiResolutionPyramidImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiResolutionPyramidImageFilterID3ID3_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiResolutionPyramidImageFilterID3ID3_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_Clone(self)

    def SetNumberOfLevels(self, num):
        r"""
        SetNumberOfLevels(self, num)

        Parameters
        ----------
        num: unsigned int

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_SetNumberOfLevels(self, num)

    def GetNumberOfLevels(self):
        r"""GetNumberOfLevels(self) -> unsigned int"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GetNumberOfLevels(self)

    def SetSchedule(self, schedule):
        r"""
        SetSchedule(self, schedule)

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_SetSchedule(self, schedule)

    def GetSchedule(self):
        r"""GetSchedule(self) -> itkArray2DUI"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GetSchedule(self)

    def SetStartingShrinkFactors(self, *args):
        r"""
        SetStartingShrinkFactors(self, factor)

        Parameters
        ----------
        factor: unsigned int

        SetStartingShrinkFactors(self, factors)

        Parameters
        ----------
        factors: unsigned int const *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_SetStartingShrinkFactors(self, *args)

    def GetStartingShrinkFactors(self):
        r"""GetStartingShrinkFactors(self) -> unsigned int const *"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GetStartingShrinkFactors(self)

    @staticmethod
    def IsScheduleDownwardDivisible(schedule):
        r"""
        IsScheduleDownwardDivisible(schedule) -> bool

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_IsScheduleDownwardDivisible(schedule)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GenerateOutputInformation(self)

    def GenerateOutputRequestedRegion(self, refOutput):
        r"""
        GenerateOutputRequestedRegion(self, refOutput)

        Parameters
        ----------
        refOutput: itkDataObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GenerateOutputRequestedRegion(self, refOutput)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GenerateInputRequestedRegion(self)

    def SetMaximumError(self, _arg):
        r"""
        SetMaximumError(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_SetMaximumError(self, _arg)

    def GetMaximumError(self):
        r"""GetMaximumError(self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GetMaximumError(self)

    def SetUseShrinkImageFilter(self, _arg):
        r"""
        SetUseShrinkImageFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_SetUseShrinkImageFilter(self, _arg)

    def GetUseShrinkImageFilter(self):
        r"""GetUseShrinkImageFilter(self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GetUseShrinkImageFilter(self)

    def UseShrinkImageFilterOn(self):
        r"""UseShrinkImageFilterOn(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_UseShrinkImageFilterOn(self)

    def UseShrinkImageFilterOff(self):
        r"""UseShrinkImageFilterOff(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_UseShrinkImageFilterOff(self)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiResolutionPyramidImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterID3ID3

        Create a new object of the class itkMultiResolutionPyramidImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterID3ID3 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_swigregister(itkMultiResolutionPyramidImageFilterID3ID3)

def itkMultiResolutionPyramidImageFilterID4ID4_New():
    return itkMultiResolutionPyramidImageFilterID4ID4.New()

class itkMultiResolutionPyramidImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkMultiResolutionPyramidImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiResolutionPyramidImageFilterID4ID4_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiResolutionPyramidImageFilterID4ID4_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_Clone(self)

    def SetNumberOfLevels(self, num):
        r"""
        SetNumberOfLevels(self, num)

        Parameters
        ----------
        num: unsigned int

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_SetNumberOfLevels(self, num)

    def GetNumberOfLevels(self):
        r"""GetNumberOfLevels(self) -> unsigned int"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_GetNumberOfLevels(self)

    def SetSchedule(self, schedule):
        r"""
        SetSchedule(self, schedule)

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_SetSchedule(self, schedule)

    def GetSchedule(self):
        r"""GetSchedule(self) -> itkArray2DUI"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_GetSchedule(self)

    def SetStartingShrinkFactors(self, *args):
        r"""
        SetStartingShrinkFactors(self, factor)

        Parameters
        ----------
        factor: unsigned int

        SetStartingShrinkFactors(self, factors)

        Parameters
        ----------
        factors: unsigned int const *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_SetStartingShrinkFactors(self, *args)

    def GetStartingShrinkFactors(self):
        r"""GetStartingShrinkFactors(self) -> unsigned int const *"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_GetStartingShrinkFactors(self)

    @staticmethod
    def IsScheduleDownwardDivisible(schedule):
        r"""
        IsScheduleDownwardDivisible(schedule) -> bool

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_IsScheduleDownwardDivisible(schedule)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_GenerateOutputInformation(self)

    def GenerateOutputRequestedRegion(self, refOutput):
        r"""
        GenerateOutputRequestedRegion(self, refOutput)

        Parameters
        ----------
        refOutput: itkDataObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_GenerateOutputRequestedRegion(self, refOutput)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_GenerateInputRequestedRegion(self)

    def SetMaximumError(self, _arg):
        r"""
        SetMaximumError(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_SetMaximumError(self, _arg)

    def GetMaximumError(self):
        r"""GetMaximumError(self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_GetMaximumError(self)

    def SetUseShrinkImageFilter(self, _arg):
        r"""
        SetUseShrinkImageFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_SetUseShrinkImageFilter(self, _arg)

    def GetUseShrinkImageFilter(self):
        r"""GetUseShrinkImageFilter(self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_GetUseShrinkImageFilter(self)

    def UseShrinkImageFilterOn(self):
        r"""UseShrinkImageFilterOn(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_UseShrinkImageFilterOn(self)

    def UseShrinkImageFilterOff(self):
        r"""UseShrinkImageFilterOff(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_UseShrinkImageFilterOff(self)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiResolutionPyramidImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterID4ID4

        Create a new object of the class itkMultiResolutionPyramidImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterID4ID4 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_swigregister(itkMultiResolutionPyramidImageFilterID4ID4)

def itkMultiResolutionPyramidImageFilterIF2IF2_New():
    return itkMultiResolutionPyramidImageFilterIF2IF2.New()

class itkMultiResolutionPyramidImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkMultiResolutionPyramidImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiResolutionPyramidImageFilterIF2IF2_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiResolutionPyramidImageFilterIF2IF2_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_Clone(self)

    def SetNumberOfLevels(self, num):
        r"""
        SetNumberOfLevels(self, num)

        Parameters
        ----------
        num: unsigned int

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_SetNumberOfLevels(self, num)

    def GetNumberOfLevels(self):
        r"""GetNumberOfLevels(self) -> unsigned int"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GetNumberOfLevels(self)

    def SetSchedule(self, schedule):
        r"""
        SetSchedule(self, schedule)

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_SetSchedule(self, schedule)

    def GetSchedule(self):
        r"""GetSchedule(self) -> itkArray2DUI"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GetSchedule(self)

    def SetStartingShrinkFactors(self, *args):
        r"""
        SetStartingShrinkFactors(self, factor)

        Parameters
        ----------
        factor: unsigned int

        SetStartingShrinkFactors(self, factors)

        Parameters
        ----------
        factors: unsigned int const *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_SetStartingShrinkFactors(self, *args)

    def GetStartingShrinkFactors(self):
        r"""GetStartingShrinkFactors(self) -> unsigned int const *"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GetStartingShrinkFactors(self)

    @staticmethod
    def IsScheduleDownwardDivisible(schedule):
        r"""
        IsScheduleDownwardDivisible(schedule) -> bool

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_IsScheduleDownwardDivisible(schedule)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GenerateOutputInformation(self)

    def GenerateOutputRequestedRegion(self, refOutput):
        r"""
        GenerateOutputRequestedRegion(self, refOutput)

        Parameters
        ----------
        refOutput: itkDataObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GenerateOutputRequestedRegion(self, refOutput)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GenerateInputRequestedRegion(self)

    def SetMaximumError(self, _arg):
        r"""
        SetMaximumError(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_SetMaximumError(self, _arg)

    def GetMaximumError(self):
        r"""GetMaximumError(self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GetMaximumError(self)

    def SetUseShrinkImageFilter(self, _arg):
        r"""
        SetUseShrinkImageFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_SetUseShrinkImageFilter(self, _arg)

    def GetUseShrinkImageFilter(self):
        r"""GetUseShrinkImageFilter(self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GetUseShrinkImageFilter(self)

    def UseShrinkImageFilterOn(self):
        r"""UseShrinkImageFilterOn(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_UseShrinkImageFilterOn(self)

    def UseShrinkImageFilterOff(self):
        r"""UseShrinkImageFilterOff(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_UseShrinkImageFilterOff(self)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiResolutionPyramidImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterIF2IF2

        Create a new object of the class itkMultiResolutionPyramidImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterIF2IF2 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_swigregister(itkMultiResolutionPyramidImageFilterIF2IF2)

def itkMultiResolutionPyramidImageFilterIF3IF3_New():
    return itkMultiResolutionPyramidImageFilterIF3IF3.New()

class itkMultiResolutionPyramidImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkMultiResolutionPyramidImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiResolutionPyramidImageFilterIF3IF3_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiResolutionPyramidImageFilterIF3IF3_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_Clone(self)

    def SetNumberOfLevels(self, num):
        r"""
        SetNumberOfLevels(self, num)

        Parameters
        ----------
        num: unsigned int

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_SetNumberOfLevels(self, num)

    def GetNumberOfLevels(self):
        r"""GetNumberOfLevels(self) -> unsigned int"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GetNumberOfLevels(self)

    def SetSchedule(self, schedule):
        r"""
        SetSchedule(self, schedule)

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_SetSchedule(self, schedule)

    def GetSchedule(self):
        r"""GetSchedule(self) -> itkArray2DUI"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GetSchedule(self)

    def SetStartingShrinkFactors(self, *args):
        r"""
        SetStartingShrinkFactors(self, factor)

        Parameters
        ----------
        factor: unsigned int

        SetStartingShrinkFactors(self, factors)

        Parameters
        ----------
        factors: unsigned int const *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_SetStartingShrinkFactors(self, *args)

    def GetStartingShrinkFactors(self):
        r"""GetStartingShrinkFactors(self) -> unsigned int const *"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GetStartingShrinkFactors(self)

    @staticmethod
    def IsScheduleDownwardDivisible(schedule):
        r"""
        IsScheduleDownwardDivisible(schedule) -> bool

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_IsScheduleDownwardDivisible(schedule)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GenerateOutputInformation(self)

    def GenerateOutputRequestedRegion(self, refOutput):
        r"""
        GenerateOutputRequestedRegion(self, refOutput)

        Parameters
        ----------
        refOutput: itkDataObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GenerateOutputRequestedRegion(self, refOutput)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GenerateInputRequestedRegion(self)

    def SetMaximumError(self, _arg):
        r"""
        SetMaximumError(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_SetMaximumError(self, _arg)

    def GetMaximumError(self):
        r"""GetMaximumError(self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GetMaximumError(self)

    def SetUseShrinkImageFilter(self, _arg):
        r"""
        SetUseShrinkImageFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_SetUseShrinkImageFilter(self, _arg)

    def GetUseShrinkImageFilter(self):
        r"""GetUseShrinkImageFilter(self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GetUseShrinkImageFilter(self)

    def UseShrinkImageFilterOn(self):
        r"""UseShrinkImageFilterOn(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_UseShrinkImageFilterOn(self)

    def UseShrinkImageFilterOff(self):
        r"""UseShrinkImageFilterOff(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_UseShrinkImageFilterOff(self)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiResolutionPyramidImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterIF3IF3

        Create a new object of the class itkMultiResolutionPyramidImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterIF3IF3 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_swigregister(itkMultiResolutionPyramidImageFilterIF3IF3)

def itkMultiResolutionPyramidImageFilterIF4IF4_New():
    return itkMultiResolutionPyramidImageFilterIF4IF4.New()

class itkMultiResolutionPyramidImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkMultiResolutionPyramidImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiResolutionPyramidImageFilterIF4IF4_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiResolutionPyramidImageFilterIF4IF4_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_Clone(self)

    def SetNumberOfLevels(self, num):
        r"""
        SetNumberOfLevels(self, num)

        Parameters
        ----------
        num: unsigned int

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_SetNumberOfLevels(self, num)

    def GetNumberOfLevels(self):
        r"""GetNumberOfLevels(self) -> unsigned int"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_GetNumberOfLevels(self)

    def SetSchedule(self, schedule):
        r"""
        SetSchedule(self, schedule)

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_SetSchedule(self, schedule)

    def GetSchedule(self):
        r"""GetSchedule(self) -> itkArray2DUI"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_GetSchedule(self)

    def SetStartingShrinkFactors(self, *args):
        r"""
        SetStartingShrinkFactors(self, factor)

        Parameters
        ----------
        factor: unsigned int

        SetStartingShrinkFactors(self, factors)

        Parameters
        ----------
        factors: unsigned int const *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_SetStartingShrinkFactors(self, *args)

    def GetStartingShrinkFactors(self):
        r"""GetStartingShrinkFactors(self) -> unsigned int const *"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_GetStartingShrinkFactors(self)

    @staticmethod
    def IsScheduleDownwardDivisible(schedule):
        r"""
        IsScheduleDownwardDivisible(schedule) -> bool

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_IsScheduleDownwardDivisible(schedule)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_GenerateOutputInformation(self)

    def GenerateOutputRequestedRegion(self, refOutput):
        r"""
        GenerateOutputRequestedRegion(self, refOutput)

        Parameters
        ----------
        refOutput: itkDataObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_GenerateOutputRequestedRegion(self, refOutput)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_GenerateInputRequestedRegion(self)

    def SetMaximumError(self, _arg):
        r"""
        SetMaximumError(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_SetMaximumError(self, _arg)

    def GetMaximumError(self):
        r"""GetMaximumError(self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_GetMaximumError(self)

    def SetUseShrinkImageFilter(self, _arg):
        r"""
        SetUseShrinkImageFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_SetUseShrinkImageFilter(self, _arg)

    def GetUseShrinkImageFilter(self):
        r"""GetUseShrinkImageFilter(self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_GetUseShrinkImageFilter(self)

    def UseShrinkImageFilterOn(self):
        r"""UseShrinkImageFilterOn(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_UseShrinkImageFilterOn(self)

    def UseShrinkImageFilterOff(self):
        r"""UseShrinkImageFilterOff(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_UseShrinkImageFilterOff(self)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiResolutionPyramidImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterIF4IF4

        Create a new object of the class itkMultiResolutionPyramidImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterIF4IF4 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_swigregister(itkMultiResolutionPyramidImageFilterIF4IF4)

def itkMultiResolutionPyramidImageFilterISS2ISS2_New():
    return itkMultiResolutionPyramidImageFilterISS2ISS2.New()

class itkMultiResolutionPyramidImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkMultiResolutionPyramidImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiResolutionPyramidImageFilterISS2ISS2_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiResolutionPyramidImageFilterISS2ISS2_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_Clone(self)

    def SetNumberOfLevels(self, num):
        r"""
        SetNumberOfLevels(self, num)

        Parameters
        ----------
        num: unsigned int

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_SetNumberOfLevels(self, num)

    def GetNumberOfLevels(self):
        r"""GetNumberOfLevels(self) -> unsigned int"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GetNumberOfLevels(self)

    def SetSchedule(self, schedule):
        r"""
        SetSchedule(self, schedule)

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_SetSchedule(self, schedule)

    def GetSchedule(self):
        r"""GetSchedule(self) -> itkArray2DUI"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GetSchedule(self)

    def SetStartingShrinkFactors(self, *args):
        r"""
        SetStartingShrinkFactors(self, factor)

        Parameters
        ----------
        factor: unsigned int

        SetStartingShrinkFactors(self, factors)

        Parameters
        ----------
        factors: unsigned int const *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_SetStartingShrinkFactors(self, *args)

    def GetStartingShrinkFactors(self):
        r"""GetStartingShrinkFactors(self) -> unsigned int const *"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GetStartingShrinkFactors(self)

    @staticmethod
    def IsScheduleDownwardDivisible(schedule):
        r"""
        IsScheduleDownwardDivisible(schedule) -> bool

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_IsScheduleDownwardDivisible(schedule)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GenerateOutputInformation(self)

    def GenerateOutputRequestedRegion(self, refOutput):
        r"""
        GenerateOutputRequestedRegion(self, refOutput)

        Parameters
        ----------
        refOutput: itkDataObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GenerateOutputRequestedRegion(self, refOutput)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GenerateInputRequestedRegion(self)

    def SetMaximumError(self, _arg):
        r"""
        SetMaximumError(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_SetMaximumError(self, _arg)

    def GetMaximumError(self):
        r"""GetMaximumError(self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GetMaximumError(self)

    def SetUseShrinkImageFilter(self, _arg):
        r"""
        SetUseShrinkImageFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_SetUseShrinkImageFilter(self, _arg)

    def GetUseShrinkImageFilter(self):
        r"""GetUseShrinkImageFilter(self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GetUseShrinkImageFilter(self)

    def UseShrinkImageFilterOn(self):
        r"""UseShrinkImageFilterOn(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_UseShrinkImageFilterOn(self)

    def UseShrinkImageFilterOff(self):
        r"""UseShrinkImageFilterOff(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_UseShrinkImageFilterOff(self)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiResolutionPyramidImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterISS2ISS2

        Create a new object of the class itkMultiResolutionPyramidImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterISS2ISS2 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_swigregister(itkMultiResolutionPyramidImageFilterISS2ISS2)

def itkMultiResolutionPyramidImageFilterISS3ISS3_New():
    return itkMultiResolutionPyramidImageFilterISS3ISS3.New()

class itkMultiResolutionPyramidImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkMultiResolutionPyramidImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiResolutionPyramidImageFilterISS3ISS3_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiResolutionPyramidImageFilterISS3ISS3_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_Clone(self)

    def SetNumberOfLevels(self, num):
        r"""
        SetNumberOfLevels(self, num)

        Parameters
        ----------
        num: unsigned int

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_SetNumberOfLevels(self, num)

    def GetNumberOfLevels(self):
        r"""GetNumberOfLevels(self) -> unsigned int"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GetNumberOfLevels(self)

    def SetSchedule(self, schedule):
        r"""
        SetSchedule(self, schedule)

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_SetSchedule(self, schedule)

    def GetSchedule(self):
        r"""GetSchedule(self) -> itkArray2DUI"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GetSchedule(self)

    def SetStartingShrinkFactors(self, *args):
        r"""
        SetStartingShrinkFactors(self, factor)

        Parameters
        ----------
        factor: unsigned int

        SetStartingShrinkFactors(self, factors)

        Parameters
        ----------
        factors: unsigned int const *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_SetStartingShrinkFactors(self, *args)

    def GetStartingShrinkFactors(self):
        r"""GetStartingShrinkFactors(self) -> unsigned int const *"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GetStartingShrinkFactors(self)

    @staticmethod
    def IsScheduleDownwardDivisible(schedule):
        r"""
        IsScheduleDownwardDivisible(schedule) -> bool

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_IsScheduleDownwardDivisible(schedule)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GenerateOutputInformation(self)

    def GenerateOutputRequestedRegion(self, refOutput):
        r"""
        GenerateOutputRequestedRegion(self, refOutput)

        Parameters
        ----------
        refOutput: itkDataObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GenerateOutputRequestedRegion(self, refOutput)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GenerateInputRequestedRegion(self)

    def SetMaximumError(self, _arg):
        r"""
        SetMaximumError(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_SetMaximumError(self, _arg)

    def GetMaximumError(self):
        r"""GetMaximumError(self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GetMaximumError(self)

    def SetUseShrinkImageFilter(self, _arg):
        r"""
        SetUseShrinkImageFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_SetUseShrinkImageFilter(self, _arg)

    def GetUseShrinkImageFilter(self):
        r"""GetUseShrinkImageFilter(self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GetUseShrinkImageFilter(self)

    def UseShrinkImageFilterOn(self):
        r"""UseShrinkImageFilterOn(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_UseShrinkImageFilterOn(self)

    def UseShrinkImageFilterOff(self):
        r"""UseShrinkImageFilterOff(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_UseShrinkImageFilterOff(self)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiResolutionPyramidImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterISS3ISS3

        Create a new object of the class itkMultiResolutionPyramidImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterISS3ISS3 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_swigregister(itkMultiResolutionPyramidImageFilterISS3ISS3)

def itkMultiResolutionPyramidImageFilterISS4ISS4_New():
    return itkMultiResolutionPyramidImageFilterISS4ISS4.New()

class itkMultiResolutionPyramidImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkMultiResolutionPyramidImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiResolutionPyramidImageFilterISS4ISS4_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiResolutionPyramidImageFilterISS4ISS4_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_Clone(self)

    def SetNumberOfLevels(self, num):
        r"""
        SetNumberOfLevels(self, num)

        Parameters
        ----------
        num: unsigned int

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_SetNumberOfLevels(self, num)

    def GetNumberOfLevels(self):
        r"""GetNumberOfLevels(self) -> unsigned int"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_GetNumberOfLevels(self)

    def SetSchedule(self, schedule):
        r"""
        SetSchedule(self, schedule)

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_SetSchedule(self, schedule)

    def GetSchedule(self):
        r"""GetSchedule(self) -> itkArray2DUI"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_GetSchedule(self)

    def SetStartingShrinkFactors(self, *args):
        r"""
        SetStartingShrinkFactors(self, factor)

        Parameters
        ----------
        factor: unsigned int

        SetStartingShrinkFactors(self, factors)

        Parameters
        ----------
        factors: unsigned int const *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_SetStartingShrinkFactors(self, *args)

    def GetStartingShrinkFactors(self):
        r"""GetStartingShrinkFactors(self) -> unsigned int const *"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_GetStartingShrinkFactors(self)

    @staticmethod
    def IsScheduleDownwardDivisible(schedule):
        r"""
        IsScheduleDownwardDivisible(schedule) -> bool

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_IsScheduleDownwardDivisible(schedule)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_GenerateOutputInformation(self)

    def GenerateOutputRequestedRegion(self, refOutput):
        r"""
        GenerateOutputRequestedRegion(self, refOutput)

        Parameters
        ----------
        refOutput: itkDataObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_GenerateOutputRequestedRegion(self, refOutput)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_GenerateInputRequestedRegion(self)

    def SetMaximumError(self, _arg):
        r"""
        SetMaximumError(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_SetMaximumError(self, _arg)

    def GetMaximumError(self):
        r"""GetMaximumError(self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_GetMaximumError(self)

    def SetUseShrinkImageFilter(self, _arg):
        r"""
        SetUseShrinkImageFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_SetUseShrinkImageFilter(self, _arg)

    def GetUseShrinkImageFilter(self):
        r"""GetUseShrinkImageFilter(self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_GetUseShrinkImageFilter(self)

    def UseShrinkImageFilterOn(self):
        r"""UseShrinkImageFilterOn(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_UseShrinkImageFilterOn(self)

    def UseShrinkImageFilterOff(self):
        r"""UseShrinkImageFilterOff(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_UseShrinkImageFilterOff(self)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiResolutionPyramidImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterISS4ISS4

        Create a new object of the class itkMultiResolutionPyramidImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterISS4ISS4 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_swigregister(itkMultiResolutionPyramidImageFilterISS4ISS4)

def itkMultiResolutionPyramidImageFilterIUC2IUC2_New():
    return itkMultiResolutionPyramidImageFilterIUC2IUC2.New()

class itkMultiResolutionPyramidImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkMultiResolutionPyramidImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiResolutionPyramidImageFilterIUC2IUC2_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiResolutionPyramidImageFilterIUC2IUC2_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_Clone(self)

    def SetNumberOfLevels(self, num):
        r"""
        SetNumberOfLevels(self, num)

        Parameters
        ----------
        num: unsigned int

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_SetNumberOfLevels(self, num)

    def GetNumberOfLevels(self):
        r"""GetNumberOfLevels(self) -> unsigned int"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GetNumberOfLevels(self)

    def SetSchedule(self, schedule):
        r"""
        SetSchedule(self, schedule)

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_SetSchedule(self, schedule)

    def GetSchedule(self):
        r"""GetSchedule(self) -> itkArray2DUI"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GetSchedule(self)

    def SetStartingShrinkFactors(self, *args):
        r"""
        SetStartingShrinkFactors(self, factor)

        Parameters
        ----------
        factor: unsigned int

        SetStartingShrinkFactors(self, factors)

        Parameters
        ----------
        factors: unsigned int const *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_SetStartingShrinkFactors(self, *args)

    def GetStartingShrinkFactors(self):
        r"""GetStartingShrinkFactors(self) -> unsigned int const *"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GetStartingShrinkFactors(self)

    @staticmethod
    def IsScheduleDownwardDivisible(schedule):
        r"""
        IsScheduleDownwardDivisible(schedule) -> bool

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_IsScheduleDownwardDivisible(schedule)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GenerateOutputInformation(self)

    def GenerateOutputRequestedRegion(self, refOutput):
        r"""
        GenerateOutputRequestedRegion(self, refOutput)

        Parameters
        ----------
        refOutput: itkDataObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GenerateOutputRequestedRegion(self, refOutput)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GenerateInputRequestedRegion(self)

    def SetMaximumError(self, _arg):
        r"""
        SetMaximumError(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_SetMaximumError(self, _arg)

    def GetMaximumError(self):
        r"""GetMaximumError(self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GetMaximumError(self)

    def SetUseShrinkImageFilter(self, _arg):
        r"""
        SetUseShrinkImageFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_SetUseShrinkImageFilter(self, _arg)

    def GetUseShrinkImageFilter(self):
        r"""GetUseShrinkImageFilter(self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GetUseShrinkImageFilter(self)

    def UseShrinkImageFilterOn(self):
        r"""UseShrinkImageFilterOn(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_UseShrinkImageFilterOn(self)

    def UseShrinkImageFilterOff(self):
        r"""UseShrinkImageFilterOff(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_UseShrinkImageFilterOff(self)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiResolutionPyramidImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterIUC2IUC2

        Create a new object of the class itkMultiResolutionPyramidImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterIUC2IUC2 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_swigregister(itkMultiResolutionPyramidImageFilterIUC2IUC2)

def itkMultiResolutionPyramidImageFilterIUC3IUC3_New():
    return itkMultiResolutionPyramidImageFilterIUC3IUC3.New()

class itkMultiResolutionPyramidImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkMultiResolutionPyramidImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiResolutionPyramidImageFilterIUC3IUC3_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiResolutionPyramidImageFilterIUC3IUC3_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_Clone(self)

    def SetNumberOfLevels(self, num):
        r"""
        SetNumberOfLevels(self, num)

        Parameters
        ----------
        num: unsigned int

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_SetNumberOfLevels(self, num)

    def GetNumberOfLevels(self):
        r"""GetNumberOfLevels(self) -> unsigned int"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GetNumberOfLevels(self)

    def SetSchedule(self, schedule):
        r"""
        SetSchedule(self, schedule)

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_SetSchedule(self, schedule)

    def GetSchedule(self):
        r"""GetSchedule(self) -> itkArray2DUI"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GetSchedule(self)

    def SetStartingShrinkFactors(self, *args):
        r"""
        SetStartingShrinkFactors(self, factor)

        Parameters
        ----------
        factor: unsigned int

        SetStartingShrinkFactors(self, factors)

        Parameters
        ----------
        factors: unsigned int const *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_SetStartingShrinkFactors(self, *args)

    def GetStartingShrinkFactors(self):
        r"""GetStartingShrinkFactors(self) -> unsigned int const *"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GetStartingShrinkFactors(self)

    @staticmethod
    def IsScheduleDownwardDivisible(schedule):
        r"""
        IsScheduleDownwardDivisible(schedule) -> bool

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_IsScheduleDownwardDivisible(schedule)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GenerateOutputInformation(self)

    def GenerateOutputRequestedRegion(self, refOutput):
        r"""
        GenerateOutputRequestedRegion(self, refOutput)

        Parameters
        ----------
        refOutput: itkDataObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GenerateOutputRequestedRegion(self, refOutput)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GenerateInputRequestedRegion(self)

    def SetMaximumError(self, _arg):
        r"""
        SetMaximumError(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_SetMaximumError(self, _arg)

    def GetMaximumError(self):
        r"""GetMaximumError(self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GetMaximumError(self)

    def SetUseShrinkImageFilter(self, _arg):
        r"""
        SetUseShrinkImageFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_SetUseShrinkImageFilter(self, _arg)

    def GetUseShrinkImageFilter(self):
        r"""GetUseShrinkImageFilter(self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GetUseShrinkImageFilter(self)

    def UseShrinkImageFilterOn(self):
        r"""UseShrinkImageFilterOn(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_UseShrinkImageFilterOn(self)

    def UseShrinkImageFilterOff(self):
        r"""UseShrinkImageFilterOff(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_UseShrinkImageFilterOff(self)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiResolutionPyramidImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterIUC3IUC3

        Create a new object of the class itkMultiResolutionPyramidImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterIUC3IUC3 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_swigregister(itkMultiResolutionPyramidImageFilterIUC3IUC3)

def itkMultiResolutionPyramidImageFilterIUC4IUC4_New():
    return itkMultiResolutionPyramidImageFilterIUC4IUC4.New()

class itkMultiResolutionPyramidImageFilterIUC4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkMultiResolutionPyramidImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiResolutionPyramidImageFilterIUC4IUC4_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiResolutionPyramidImageFilterIUC4IUC4_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_Clone(self)

    def SetNumberOfLevels(self, num):
        r"""
        SetNumberOfLevels(self, num)

        Parameters
        ----------
        num: unsigned int

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_SetNumberOfLevels(self, num)

    def GetNumberOfLevels(self):
        r"""GetNumberOfLevels(self) -> unsigned int"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_GetNumberOfLevels(self)

    def SetSchedule(self, schedule):
        r"""
        SetSchedule(self, schedule)

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_SetSchedule(self, schedule)

    def GetSchedule(self):
        r"""GetSchedule(self) -> itkArray2DUI"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_GetSchedule(self)

    def SetStartingShrinkFactors(self, *args):
        r"""
        SetStartingShrinkFactors(self, factor)

        Parameters
        ----------
        factor: unsigned int

        SetStartingShrinkFactors(self, factors)

        Parameters
        ----------
        factors: unsigned int const *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_SetStartingShrinkFactors(self, *args)

    def GetStartingShrinkFactors(self):
        r"""GetStartingShrinkFactors(self) -> unsigned int const *"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_GetStartingShrinkFactors(self)

    @staticmethod
    def IsScheduleDownwardDivisible(schedule):
        r"""
        IsScheduleDownwardDivisible(schedule) -> bool

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_IsScheduleDownwardDivisible(schedule)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_GenerateOutputInformation(self)

    def GenerateOutputRequestedRegion(self, refOutput):
        r"""
        GenerateOutputRequestedRegion(self, refOutput)

        Parameters
        ----------
        refOutput: itkDataObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_GenerateOutputRequestedRegion(self, refOutput)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_GenerateInputRequestedRegion(self)

    def SetMaximumError(self, _arg):
        r"""
        SetMaximumError(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_SetMaximumError(self, _arg)

    def GetMaximumError(self):
        r"""GetMaximumError(self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_GetMaximumError(self)

    def SetUseShrinkImageFilter(self, _arg):
        r"""
        SetUseShrinkImageFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_SetUseShrinkImageFilter(self, _arg)

    def GetUseShrinkImageFilter(self):
        r"""GetUseShrinkImageFilter(self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_GetUseShrinkImageFilter(self)

    def UseShrinkImageFilterOn(self):
        r"""UseShrinkImageFilterOn(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_UseShrinkImageFilterOn(self)

    def UseShrinkImageFilterOff(self):
        r"""UseShrinkImageFilterOff(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_UseShrinkImageFilterOff(self)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiResolutionPyramidImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterIUC4IUC4

        Create a new object of the class itkMultiResolutionPyramidImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterIUC4IUC4 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_swigregister(itkMultiResolutionPyramidImageFilterIUC4IUC4)

def itkMultiResolutionPyramidImageFilterIUS2IUS2_New():
    return itkMultiResolutionPyramidImageFilterIUS2IUS2.New()

class itkMultiResolutionPyramidImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkMultiResolutionPyramidImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiResolutionPyramidImageFilterIUS2IUS2_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiResolutionPyramidImageFilterIUS2IUS2_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_Clone(self)

    def SetNumberOfLevels(self, num):
        r"""
        SetNumberOfLevels(self, num)

        Parameters
        ----------
        num: unsigned int

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_SetNumberOfLevels(self, num)

    def GetNumberOfLevels(self):
        r"""GetNumberOfLevels(self) -> unsigned int"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GetNumberOfLevels(self)

    def SetSchedule(self, schedule):
        r"""
        SetSchedule(self, schedule)

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_SetSchedule(self, schedule)

    def GetSchedule(self):
        r"""GetSchedule(self) -> itkArray2DUI"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GetSchedule(self)

    def SetStartingShrinkFactors(self, *args):
        r"""
        SetStartingShrinkFactors(self, factor)

        Parameters
        ----------
        factor: unsigned int

        SetStartingShrinkFactors(self, factors)

        Parameters
        ----------
        factors: unsigned int const *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_SetStartingShrinkFactors(self, *args)

    def GetStartingShrinkFactors(self):
        r"""GetStartingShrinkFactors(self) -> unsigned int const *"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GetStartingShrinkFactors(self)

    @staticmethod
    def IsScheduleDownwardDivisible(schedule):
        r"""
        IsScheduleDownwardDivisible(schedule) -> bool

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_IsScheduleDownwardDivisible(schedule)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GenerateOutputInformation(self)

    def GenerateOutputRequestedRegion(self, refOutput):
        r"""
        GenerateOutputRequestedRegion(self, refOutput)

        Parameters
        ----------
        refOutput: itkDataObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GenerateOutputRequestedRegion(self, refOutput)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GenerateInputRequestedRegion(self)

    def SetMaximumError(self, _arg):
        r"""
        SetMaximumError(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_SetMaximumError(self, _arg)

    def GetMaximumError(self):
        r"""GetMaximumError(self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GetMaximumError(self)

    def SetUseShrinkImageFilter(self, _arg):
        r"""
        SetUseShrinkImageFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_SetUseShrinkImageFilter(self, _arg)

    def GetUseShrinkImageFilter(self):
        r"""GetUseShrinkImageFilter(self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GetUseShrinkImageFilter(self)

    def UseShrinkImageFilterOn(self):
        r"""UseShrinkImageFilterOn(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_UseShrinkImageFilterOn(self)

    def UseShrinkImageFilterOff(self):
        r"""UseShrinkImageFilterOff(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_UseShrinkImageFilterOff(self)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiResolutionPyramidImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterIUS2IUS2

        Create a new object of the class itkMultiResolutionPyramidImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterIUS2IUS2 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_swigregister(itkMultiResolutionPyramidImageFilterIUS2IUS2)

def itkMultiResolutionPyramidImageFilterIUS3IUS3_New():
    return itkMultiResolutionPyramidImageFilterIUS3IUS3.New()

class itkMultiResolutionPyramidImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkMultiResolutionPyramidImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiResolutionPyramidImageFilterIUS3IUS3_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiResolutionPyramidImageFilterIUS3IUS3_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_Clone(self)

    def SetNumberOfLevels(self, num):
        r"""
        SetNumberOfLevels(self, num)

        Parameters
        ----------
        num: unsigned int

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_SetNumberOfLevels(self, num)

    def GetNumberOfLevels(self):
        r"""GetNumberOfLevels(self) -> unsigned int"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GetNumberOfLevels(self)

    def SetSchedule(self, schedule):
        r"""
        SetSchedule(self, schedule)

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_SetSchedule(self, schedule)

    def GetSchedule(self):
        r"""GetSchedule(self) -> itkArray2DUI"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GetSchedule(self)

    def SetStartingShrinkFactors(self, *args):
        r"""
        SetStartingShrinkFactors(self, factor)

        Parameters
        ----------
        factor: unsigned int

        SetStartingShrinkFactors(self, factors)

        Parameters
        ----------
        factors: unsigned int const *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_SetStartingShrinkFactors(self, *args)

    def GetStartingShrinkFactors(self):
        r"""GetStartingShrinkFactors(self) -> unsigned int const *"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GetStartingShrinkFactors(self)

    @staticmethod
    def IsScheduleDownwardDivisible(schedule):
        r"""
        IsScheduleDownwardDivisible(schedule) -> bool

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_IsScheduleDownwardDivisible(schedule)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GenerateOutputInformation(self)

    def GenerateOutputRequestedRegion(self, refOutput):
        r"""
        GenerateOutputRequestedRegion(self, refOutput)

        Parameters
        ----------
        refOutput: itkDataObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GenerateOutputRequestedRegion(self, refOutput)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GenerateInputRequestedRegion(self)

    def SetMaximumError(self, _arg):
        r"""
        SetMaximumError(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_SetMaximumError(self, _arg)

    def GetMaximumError(self):
        r"""GetMaximumError(self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GetMaximumError(self)

    def SetUseShrinkImageFilter(self, _arg):
        r"""
        SetUseShrinkImageFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_SetUseShrinkImageFilter(self, _arg)

    def GetUseShrinkImageFilter(self):
        r"""GetUseShrinkImageFilter(self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GetUseShrinkImageFilter(self)

    def UseShrinkImageFilterOn(self):
        r"""UseShrinkImageFilterOn(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_UseShrinkImageFilterOn(self)

    def UseShrinkImageFilterOff(self):
        r"""UseShrinkImageFilterOff(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_UseShrinkImageFilterOff(self)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiResolutionPyramidImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterIUS3IUS3

        Create a new object of the class itkMultiResolutionPyramidImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterIUS3IUS3 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_swigregister(itkMultiResolutionPyramidImageFilterIUS3IUS3)

def itkMultiResolutionPyramidImageFilterIUS4IUS4_New():
    return itkMultiResolutionPyramidImageFilterIUS4IUS4.New()

class itkMultiResolutionPyramidImageFilterIUS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkMultiResolutionPyramidImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiResolutionPyramidImageFilterIUS4IUS4_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiResolutionPyramidImageFilterIUS4IUS4_Pointer"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_Clone(self)

    def SetNumberOfLevels(self, num):
        r"""
        SetNumberOfLevels(self, num)

        Parameters
        ----------
        num: unsigned int

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_SetNumberOfLevels(self, num)

    def GetNumberOfLevels(self):
        r"""GetNumberOfLevels(self) -> unsigned int"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_GetNumberOfLevels(self)

    def SetSchedule(self, schedule):
        r"""
        SetSchedule(self, schedule)

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_SetSchedule(self, schedule)

    def GetSchedule(self):
        r"""GetSchedule(self) -> itkArray2DUI"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_GetSchedule(self)

    def SetStartingShrinkFactors(self, *args):
        r"""
        SetStartingShrinkFactors(self, factor)

        Parameters
        ----------
        factor: unsigned int

        SetStartingShrinkFactors(self, factors)

        Parameters
        ----------
        factors: unsigned int const *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_SetStartingShrinkFactors(self, *args)

    def GetStartingShrinkFactors(self):
        r"""GetStartingShrinkFactors(self) -> unsigned int const *"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_GetStartingShrinkFactors(self)

    @staticmethod
    def IsScheduleDownwardDivisible(schedule):
        r"""
        IsScheduleDownwardDivisible(schedule) -> bool

        Parameters
        ----------
        schedule: itkArray2DUI const &

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_IsScheduleDownwardDivisible(schedule)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_GenerateOutputInformation(self)

    def GenerateOutputRequestedRegion(self, refOutput):
        r"""
        GenerateOutputRequestedRegion(self, refOutput)

        Parameters
        ----------
        refOutput: itkDataObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_GenerateOutputRequestedRegion(self, refOutput)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_GenerateInputRequestedRegion(self)

    def SetMaximumError(self, _arg):
        r"""
        SetMaximumError(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_SetMaximumError(self, _arg)

    def GetMaximumError(self):
        r"""GetMaximumError(self) -> double const &"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_GetMaximumError(self)

    def SetUseShrinkImageFilter(self, _arg):
        r"""
        SetUseShrinkImageFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_SetUseShrinkImageFilter(self, _arg)

    def GetUseShrinkImageFilter(self):
        r"""GetUseShrinkImageFilter(self) -> bool"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_GetUseShrinkImageFilter(self)

    def UseShrinkImageFilterOn(self):
        r"""UseShrinkImageFilterOn(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_UseShrinkImageFilterOn(self)

    def UseShrinkImageFilterOff(self):
        r"""UseShrinkImageFilterOff(self)"""
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_UseShrinkImageFilterOff(self)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiResolutionPyramidImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterIUS4IUS4

        Create a new object of the class itkMultiResolutionPyramidImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterIUS4IUS4 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_swigregister(itkMultiResolutionPyramidImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def multi_resolution_pyramid_image_filter(*args: itkt.ImageLike,  number_of_levels: int=..., schedule=..., starting_shrink_factors: int=..., maximum_error: float=..., use_shrink_image_filter: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for MultiResolutionPyramidImageFilter"""
    import itk

    kwarg_typehints = { 'number_of_levels':number_of_levels,'schedule':schedule,'starting_shrink_factors':starting_shrink_factors,'maximum_error':maximum_error,'use_shrink_image_filter':use_shrink_image_filter }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.MultiResolutionPyramidImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def multi_resolution_pyramid_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKRegistrationCommon.MultiResolutionPyramidImageFilter
    multi_resolution_pyramid_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    multi_resolution_pyramid_image_filter.__doc__ = filter_object.__doc__



