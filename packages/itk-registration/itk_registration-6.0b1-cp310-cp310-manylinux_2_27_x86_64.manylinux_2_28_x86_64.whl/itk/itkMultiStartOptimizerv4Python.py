# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKOptimizersv4Python



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMultiStartOptimizerv4Python
else:
    import _itkMultiStartOptimizerv4Python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkObjectToObjectOptimizerBasePython
import itk.itkOptimizerParameterScalesEstimatorPython
import itk.itkObjectToObjectMetricBasePython
import itk.itkSingleValuedCostFunctionv4Python
import itk.itkCostFunctionPython

def itkMultiStartOptimizerv4TemplateD_New():
    return itkMultiStartOptimizerv4TemplateD.New()

class itkMultiStartOptimizerv4TemplateD(itk.itkObjectToObjectOptimizerBasePython.itkObjectToObjectOptimizerBaseTemplateD):
    r"""Proxy of C++ itkMultiStartOptimizerv4TemplateD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiStartOptimizerv4TemplateD_Pointer"""
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiStartOptimizerv4TemplateD_Pointer"""
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateD_Clone(self)

    def GetStopCondition(self):
        r"""GetStopCondition(self) -> itkObjectToObjectOptimizerBaseTemplateEnums::StopConditionObjectToObjectOptimizer const &"""
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateD_GetStopCondition(self)

    def InstantiateLocalOptimizer(self):
        r"""InstantiateLocalOptimizer(self)"""
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateD_InstantiateLocalOptimizer(self)

    def StartOptimization(self, doOnlyInitialization=False):
        r"""
        StartOptimization(self, doOnlyInitialization=False)

        Parameters
        ----------
        doOnlyInitialization: bool

        """
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateD_StartOptimization(self, doOnlyInitialization)

    def StopOptimization(self):
        r"""StopOptimization(self)"""
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateD_StopOptimization(self)

    def ResumeOptimization(self):
        r"""ResumeOptimization(self)"""
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateD_ResumeOptimization(self)

    def GetParametersList(self):
        r"""GetParametersList(self) -> std::vector< itkOptimizerParametersD,std::allocator< itkOptimizerParametersD > > &"""
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateD_GetParametersList(self)

    def SetParametersList(self, p):
        r"""
        SetParametersList(self, p)

        Parameters
        ----------
        p: std::vector< itkOptimizerParametersD,std::allocator< itkOptimizerParametersD > > &

        """
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateD_SetParametersList(self, p)

    def GetMetricValuesList(self):
        r"""GetMetricValuesList(self) -> vectorD"""
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateD_GetMetricValuesList(self)

    def GetBestParameters(self):
        r"""GetBestParameters(self) -> itkOptimizerParametersD"""
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateD_GetBestParameters(self)

    def SetLocalOptimizer(self, _arg):
        r"""
        SetLocalOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkObjectToObjectOptimizerBaseTemplateD *

        """
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateD_SetLocalOptimizer(self, _arg)

    def GetModifiableLocalOptimizer(self):
        r"""GetModifiableLocalOptimizer(self) -> itkObjectToObjectOptimizerBaseTemplateD"""
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateD_GetModifiableLocalOptimizer(self)

    def GetLocalOptimizer(self, *args):
        r"""
        GetLocalOptimizer(self) -> itkObjectToObjectOptimizerBaseTemplateD
        GetLocalOptimizer(self) -> itkObjectToObjectOptimizerBaseTemplateD
        """
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateD_GetLocalOptimizer(self, *args)

    def GetBestParametersIndex(self):
        r"""GetBestParametersIndex(self) -> unsigned long"""
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateD_GetBestParametersIndex(self)
    __swig_destroy__ = _itkMultiStartOptimizerv4Python.delete_itkMultiStartOptimizerv4TemplateD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiStartOptimizerv4TemplateD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiStartOptimizerv4TemplateD

        Create a new object of the class itkMultiStartOptimizerv4TemplateD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiStartOptimizerv4TemplateD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiStartOptimizerv4TemplateD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiStartOptimizerv4TemplateD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiStartOptimizerv4TemplateD in _itkMultiStartOptimizerv4Python:
_itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateD_swigregister(itkMultiStartOptimizerv4TemplateD)

def itkMultiStartOptimizerv4TemplateF_New():
    return itkMultiStartOptimizerv4TemplateF.New()

class itkMultiStartOptimizerv4TemplateF(itk.itkObjectToObjectOptimizerBasePython.itkObjectToObjectOptimizerBaseTemplateF):
    r"""Proxy of C++ itkMultiStartOptimizerv4TemplateF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMultiStartOptimizerv4TemplateF_Pointer"""
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMultiStartOptimizerv4TemplateF_Pointer"""
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateF_Clone(self)

    def GetStopCondition(self):
        r"""GetStopCondition(self) -> itkObjectToObjectOptimizerBaseTemplateEnums::StopConditionObjectToObjectOptimizer const &"""
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateF_GetStopCondition(self)

    def InstantiateLocalOptimizer(self):
        r"""InstantiateLocalOptimizer(self)"""
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateF_InstantiateLocalOptimizer(self)

    def StartOptimization(self, doOnlyInitialization=False):
        r"""
        StartOptimization(self, doOnlyInitialization=False)

        Parameters
        ----------
        doOnlyInitialization: bool

        """
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateF_StartOptimization(self, doOnlyInitialization)

    def StopOptimization(self):
        r"""StopOptimization(self)"""
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateF_StopOptimization(self)

    def ResumeOptimization(self):
        r"""ResumeOptimization(self)"""
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateF_ResumeOptimization(self)

    def GetParametersList(self):
        r"""GetParametersList(self) -> std::vector< itkOptimizerParametersF,std::allocator< itkOptimizerParametersF > > &"""
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateF_GetParametersList(self)

    def SetParametersList(self, p):
        r"""
        SetParametersList(self, p)

        Parameters
        ----------
        p: std::vector< itkOptimizerParametersF,std::allocator< itkOptimizerParametersF > > &

        """
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateF_SetParametersList(self, p)

    def GetMetricValuesList(self):
        r"""GetMetricValuesList(self) -> vectorF"""
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateF_GetMetricValuesList(self)

    def GetBestParameters(self):
        r"""GetBestParameters(self) -> itkOptimizerParametersF"""
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateF_GetBestParameters(self)

    def SetLocalOptimizer(self, _arg):
        r"""
        SetLocalOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkObjectToObjectOptimizerBaseTemplateF *

        """
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateF_SetLocalOptimizer(self, _arg)

    def GetModifiableLocalOptimizer(self):
        r"""GetModifiableLocalOptimizer(self) -> itkObjectToObjectOptimizerBaseTemplateF"""
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateF_GetModifiableLocalOptimizer(self)

    def GetLocalOptimizer(self, *args):
        r"""
        GetLocalOptimizer(self) -> itkObjectToObjectOptimizerBaseTemplateF
        GetLocalOptimizer(self) -> itkObjectToObjectOptimizerBaseTemplateF
        """
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateF_GetLocalOptimizer(self, *args)

    def GetBestParametersIndex(self):
        r"""GetBestParametersIndex(self) -> unsigned long"""
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateF_GetBestParametersIndex(self)
    __swig_destroy__ = _itkMultiStartOptimizerv4Python.delete_itkMultiStartOptimizerv4TemplateF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiStartOptimizerv4TemplateF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMultiStartOptimizerv4TemplateF

        Create a new object of the class itkMultiStartOptimizerv4TemplateF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiStartOptimizerv4TemplateF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiStartOptimizerv4TemplateF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiStartOptimizerv4TemplateF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiStartOptimizerv4TemplateF in _itkMultiStartOptimizerv4Python:
_itkMultiStartOptimizerv4Python.itkMultiStartOptimizerv4TemplateF_swigregister(itkMultiStartOptimizerv4TemplateF)

