# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKRegistrationCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLandmarkBasedTransformInitializerPython
else:
    import _itkLandmarkBasedTransformInitializerPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.ITKCommonBasePython
import itk.vnl_matrix_fixedPython
import itk.itkArray2DPython
import itk.itkArrayPython
import itk.itkOptimizerParametersPython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSimilarity3DTransformPython
import itk.itkVersorRigid3DTransformPython
import itk.itkVersorTransformPython
import itk.itkVersorPython
import itk.itkRigid3DTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkAffineTransformPython
import itk.itkBSplineTransformPython
import itk.itkBSplineBaseTransformPython
import itk.itkBSplineInterpolationWeightFunctionPython
import itk.itkContinuousIndexPython
import itk.itkFunctionBasePython
import itk.itkRigid2DTransformPython

def itkLandmarkBasedTransformInitializerTD22_New():
    return itkLandmarkBasedTransformInitializerTD22.New()

class itkLandmarkBasedTransformInitializerTD22(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkLandmarkBasedTransformInitializerTD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLandmarkBasedTransformInitializerTD22_Pointer"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLandmarkBasedTransformInitializerTD22_Pointer"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_Clone(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD22 *

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_SetTransform(self, _arg)

    def SetReferenceImage(self, _arg):
        r"""
        SetReferenceImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageBase2 const *

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_SetReferenceImage(self, _arg)

    def SetBSplineNumberOfControlPoints(self, _arg):
        r"""
        SetBSplineNumberOfControlPoints(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_SetBSplineNumberOfControlPoints(self, _arg)

    def SetFixedLandmarks(self, fixedLandmarks):
        r"""
        SetFixedLandmarks(self, fixedLandmarks)

        Parameters
        ----------
        fixedLandmarks: std::vector< itkPointD2,std::allocator< itkPointD2 > > const &

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_SetFixedLandmarks(self, fixedLandmarks)

    def SetMovingLandmarks(self, movingLandmarks):
        r"""
        SetMovingLandmarks(self, movingLandmarks)

        Parameters
        ----------
        movingLandmarks: std::vector< itkPointD2,std::allocator< itkPointD2 > > const &

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_SetMovingLandmarks(self, movingLandmarks)

    def SetLandmarkWeight(self, landmarkWeight):
        r"""
        SetLandmarkWeight(self, landmarkWeight)

        Parameters
        ----------
        landmarkWeight: std::vector< double,std::allocator< double > > &

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_SetLandmarkWeight(self, landmarkWeight)

    def InitializeTransform(self):
        r"""InitializeTransform(self)"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_InitializeTransform(self)
    __swig_destroy__ = _itkLandmarkBasedTransformInitializerPython.delete_itkLandmarkBasedTransformInitializerTD22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLandmarkBasedTransformInitializerTD22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLandmarkBasedTransformInitializerTD22

        Create a new object of the class itkLandmarkBasedTransformInitializerTD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkBasedTransformInitializerTD22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandmarkBasedTransformInitializerTD22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandmarkBasedTransformInitializerTD22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandmarkBasedTransformInitializerTD22 in _itkLandmarkBasedTransformInitializerPython:
_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_swigregister(itkLandmarkBasedTransformInitializerTD22)

def itkLandmarkBasedTransformInitializerTD33_New():
    return itkLandmarkBasedTransformInitializerTD33.New()

class itkLandmarkBasedTransformInitializerTD33(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkLandmarkBasedTransformInitializerTD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLandmarkBasedTransformInitializerTD33_Pointer"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLandmarkBasedTransformInitializerTD33_Pointer"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_Clone(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD33 *

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_SetTransform(self, _arg)

    def SetReferenceImage(self, _arg):
        r"""
        SetReferenceImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageBase3 const *

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_SetReferenceImage(self, _arg)

    def SetBSplineNumberOfControlPoints(self, _arg):
        r"""
        SetBSplineNumberOfControlPoints(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_SetBSplineNumberOfControlPoints(self, _arg)

    def SetFixedLandmarks(self, fixedLandmarks):
        r"""
        SetFixedLandmarks(self, fixedLandmarks)

        Parameters
        ----------
        fixedLandmarks: std::vector< itkPointD3,std::allocator< itkPointD3 > > const &

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_SetFixedLandmarks(self, fixedLandmarks)

    def SetMovingLandmarks(self, movingLandmarks):
        r"""
        SetMovingLandmarks(self, movingLandmarks)

        Parameters
        ----------
        movingLandmarks: std::vector< itkPointD3,std::allocator< itkPointD3 > > const &

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_SetMovingLandmarks(self, movingLandmarks)

    def SetLandmarkWeight(self, landmarkWeight):
        r"""
        SetLandmarkWeight(self, landmarkWeight)

        Parameters
        ----------
        landmarkWeight: std::vector< double,std::allocator< double > > &

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_SetLandmarkWeight(self, landmarkWeight)

    def InitializeTransform(self):
        r"""InitializeTransform(self)"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_InitializeTransform(self)
    __swig_destroy__ = _itkLandmarkBasedTransformInitializerPython.delete_itkLandmarkBasedTransformInitializerTD33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLandmarkBasedTransformInitializerTD33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLandmarkBasedTransformInitializerTD33

        Create a new object of the class itkLandmarkBasedTransformInitializerTD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkBasedTransformInitializerTD33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandmarkBasedTransformInitializerTD33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandmarkBasedTransformInitializerTD33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandmarkBasedTransformInitializerTD33 in _itkLandmarkBasedTransformInitializerPython:
_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_swigregister(itkLandmarkBasedTransformInitializerTD33)

def itkLandmarkBasedTransformInitializerTD44_New():
    return itkLandmarkBasedTransformInitializerTD44.New()

class itkLandmarkBasedTransformInitializerTD44(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkLandmarkBasedTransformInitializerTD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLandmarkBasedTransformInitializerTD44_Pointer"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLandmarkBasedTransformInitializerTD44_Pointer"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD44_Clone(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD44 *

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD44_SetTransform(self, _arg)

    def SetReferenceImage(self, _arg):
        r"""
        SetReferenceImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageBase4 const *

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD44_SetReferenceImage(self, _arg)

    def SetBSplineNumberOfControlPoints(self, _arg):
        r"""
        SetBSplineNumberOfControlPoints(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD44_SetBSplineNumberOfControlPoints(self, _arg)

    def SetFixedLandmarks(self, fixedLandmarks):
        r"""
        SetFixedLandmarks(self, fixedLandmarks)

        Parameters
        ----------
        fixedLandmarks: std::vector< itkPointD4,std::allocator< itkPointD4 > > const &

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD44_SetFixedLandmarks(self, fixedLandmarks)

    def SetMovingLandmarks(self, movingLandmarks):
        r"""
        SetMovingLandmarks(self, movingLandmarks)

        Parameters
        ----------
        movingLandmarks: std::vector< itkPointD4,std::allocator< itkPointD4 > > const &

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD44_SetMovingLandmarks(self, movingLandmarks)

    def SetLandmarkWeight(self, landmarkWeight):
        r"""
        SetLandmarkWeight(self, landmarkWeight)

        Parameters
        ----------
        landmarkWeight: std::vector< double,std::allocator< double > > &

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD44_SetLandmarkWeight(self, landmarkWeight)

    def InitializeTransform(self):
        r"""InitializeTransform(self)"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD44_InitializeTransform(self)
    __swig_destroy__ = _itkLandmarkBasedTransformInitializerPython.delete_itkLandmarkBasedTransformInitializerTD44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLandmarkBasedTransformInitializerTD44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD44_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLandmarkBasedTransformInitializerTD44

        Create a new object of the class itkLandmarkBasedTransformInitializerTD44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkBasedTransformInitializerTD44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandmarkBasedTransformInitializerTD44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandmarkBasedTransformInitializerTD44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandmarkBasedTransformInitializerTD44 in _itkLandmarkBasedTransformInitializerPython:
_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD44_swigregister(itkLandmarkBasedTransformInitializerTD44)

def itkLandmarkBasedTransformInitializerTF22_New():
    return itkLandmarkBasedTransformInitializerTF22.New()

class itkLandmarkBasedTransformInitializerTF22(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkLandmarkBasedTransformInitializerTF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLandmarkBasedTransformInitializerTF22_Pointer"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLandmarkBasedTransformInitializerTF22_Pointer"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_Clone(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformF22 *

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_SetTransform(self, _arg)

    def SetReferenceImage(self, _arg):
        r"""
        SetReferenceImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageBase2 const *

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_SetReferenceImage(self, _arg)

    def SetBSplineNumberOfControlPoints(self, _arg):
        r"""
        SetBSplineNumberOfControlPoints(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_SetBSplineNumberOfControlPoints(self, _arg)

    def SetFixedLandmarks(self, fixedLandmarks):
        r"""
        SetFixedLandmarks(self, fixedLandmarks)

        Parameters
        ----------
        fixedLandmarks: std::vector< itkPointD2,std::allocator< itkPointD2 > > const &

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_SetFixedLandmarks(self, fixedLandmarks)

    def SetMovingLandmarks(self, movingLandmarks):
        r"""
        SetMovingLandmarks(self, movingLandmarks)

        Parameters
        ----------
        movingLandmarks: std::vector< itkPointD2,std::allocator< itkPointD2 > > const &

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_SetMovingLandmarks(self, movingLandmarks)

    def SetLandmarkWeight(self, landmarkWeight):
        r"""
        SetLandmarkWeight(self, landmarkWeight)

        Parameters
        ----------
        landmarkWeight: std::vector< double,std::allocator< double > > &

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_SetLandmarkWeight(self, landmarkWeight)

    def InitializeTransform(self):
        r"""InitializeTransform(self)"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_InitializeTransform(self)
    __swig_destroy__ = _itkLandmarkBasedTransformInitializerPython.delete_itkLandmarkBasedTransformInitializerTF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLandmarkBasedTransformInitializerTF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLandmarkBasedTransformInitializerTF22

        Create a new object of the class itkLandmarkBasedTransformInitializerTF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkBasedTransformInitializerTF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandmarkBasedTransformInitializerTF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandmarkBasedTransformInitializerTF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandmarkBasedTransformInitializerTF22 in _itkLandmarkBasedTransformInitializerPython:
_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_swigregister(itkLandmarkBasedTransformInitializerTF22)

def itkLandmarkBasedTransformInitializerTF33_New():
    return itkLandmarkBasedTransformInitializerTF33.New()

class itkLandmarkBasedTransformInitializerTF33(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkLandmarkBasedTransformInitializerTF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLandmarkBasedTransformInitializerTF33_Pointer"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLandmarkBasedTransformInitializerTF33_Pointer"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_Clone(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformF33 *

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_SetTransform(self, _arg)

    def SetReferenceImage(self, _arg):
        r"""
        SetReferenceImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageBase3 const *

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_SetReferenceImage(self, _arg)

    def SetBSplineNumberOfControlPoints(self, _arg):
        r"""
        SetBSplineNumberOfControlPoints(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_SetBSplineNumberOfControlPoints(self, _arg)

    def SetFixedLandmarks(self, fixedLandmarks):
        r"""
        SetFixedLandmarks(self, fixedLandmarks)

        Parameters
        ----------
        fixedLandmarks: std::vector< itkPointD3,std::allocator< itkPointD3 > > const &

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_SetFixedLandmarks(self, fixedLandmarks)

    def SetMovingLandmarks(self, movingLandmarks):
        r"""
        SetMovingLandmarks(self, movingLandmarks)

        Parameters
        ----------
        movingLandmarks: std::vector< itkPointD3,std::allocator< itkPointD3 > > const &

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_SetMovingLandmarks(self, movingLandmarks)

    def SetLandmarkWeight(self, landmarkWeight):
        r"""
        SetLandmarkWeight(self, landmarkWeight)

        Parameters
        ----------
        landmarkWeight: std::vector< double,std::allocator< double > > &

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_SetLandmarkWeight(self, landmarkWeight)

    def InitializeTransform(self):
        r"""InitializeTransform(self)"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_InitializeTransform(self)
    __swig_destroy__ = _itkLandmarkBasedTransformInitializerPython.delete_itkLandmarkBasedTransformInitializerTF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLandmarkBasedTransformInitializerTF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLandmarkBasedTransformInitializerTF33

        Create a new object of the class itkLandmarkBasedTransformInitializerTF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkBasedTransformInitializerTF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandmarkBasedTransformInitializerTF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandmarkBasedTransformInitializerTF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandmarkBasedTransformInitializerTF33 in _itkLandmarkBasedTransformInitializerPython:
_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_swigregister(itkLandmarkBasedTransformInitializerTF33)

def itkLandmarkBasedTransformInitializerTF44_New():
    return itkLandmarkBasedTransformInitializerTF44.New()

class itkLandmarkBasedTransformInitializerTF44(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkLandmarkBasedTransformInitializerTF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLandmarkBasedTransformInitializerTF44_Pointer"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLandmarkBasedTransformInitializerTF44_Pointer"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF44_Clone(self)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformF44 *

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF44_SetTransform(self, _arg)

    def SetReferenceImage(self, _arg):
        r"""
        SetReferenceImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageBase4 const *

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF44_SetReferenceImage(self, _arg)

    def SetBSplineNumberOfControlPoints(self, _arg):
        r"""
        SetBSplineNumberOfControlPoints(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF44_SetBSplineNumberOfControlPoints(self, _arg)

    def SetFixedLandmarks(self, fixedLandmarks):
        r"""
        SetFixedLandmarks(self, fixedLandmarks)

        Parameters
        ----------
        fixedLandmarks: std::vector< itkPointD4,std::allocator< itkPointD4 > > const &

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF44_SetFixedLandmarks(self, fixedLandmarks)

    def SetMovingLandmarks(self, movingLandmarks):
        r"""
        SetMovingLandmarks(self, movingLandmarks)

        Parameters
        ----------
        movingLandmarks: std::vector< itkPointD4,std::allocator< itkPointD4 > > const &

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF44_SetMovingLandmarks(self, movingLandmarks)

    def SetLandmarkWeight(self, landmarkWeight):
        r"""
        SetLandmarkWeight(self, landmarkWeight)

        Parameters
        ----------
        landmarkWeight: std::vector< double,std::allocator< double > > &

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF44_SetLandmarkWeight(self, landmarkWeight)

    def InitializeTransform(self):
        r"""InitializeTransform(self)"""
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF44_InitializeTransform(self)
    __swig_destroy__ = _itkLandmarkBasedTransformInitializerPython.delete_itkLandmarkBasedTransformInitializerTF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLandmarkBasedTransformInitializerTF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF44_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLandmarkBasedTransformInitializerTF44

        Create a new object of the class itkLandmarkBasedTransformInitializerTF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkBasedTransformInitializerTF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandmarkBasedTransformInitializerTF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandmarkBasedTransformInitializerTF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandmarkBasedTransformInitializerTF44 in _itkLandmarkBasedTransformInitializerPython:
_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF44_swigregister(itkLandmarkBasedTransformInitializerTF44)

