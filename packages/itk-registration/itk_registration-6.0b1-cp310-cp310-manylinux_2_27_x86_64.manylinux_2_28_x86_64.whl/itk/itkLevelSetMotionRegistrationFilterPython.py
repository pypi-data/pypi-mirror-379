# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKPDEDeformableRegistrationPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLevelSetMotionRegistrationFilterPython
else:
    import _itkLevelSetMotionRegistrationFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkPDEDeformableRegistrationFilterPython
import itk.itkDenseFiniteDifferenceImageFilterPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterAPython

def itkLevelSetMotionRegistrationFilterID2ID2IVF22_New():
    return itkLevelSetMotionRegistrationFilterID2ID2IVF22.New()

class itkLevelSetMotionRegistrationFilterID2ID2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22):
    r"""Proxy of C++ itkLevelSetMotionRegistrationFilterID2ID2IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLevelSetMotionRegistrationFilterID2ID2IVF22_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLevelSetMotionRegistrationFilterID2ID2IVF22_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_GetMetric(self)

    def SetAlpha(self, arg0):
        r"""
        SetAlpha(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_SetAlpha(self, arg0)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_GetAlpha(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_GetIntensityDifferenceThreshold(self)

    def SetGradientMagnitudeThreshold(self, arg0):
        r"""
        SetGradientMagnitudeThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_SetGradientMagnitudeThreshold(self, arg0)

    def GetGradientMagnitudeThreshold(self):
        r"""GetGradientMagnitudeThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_GetGradientMagnitudeThreshold(self)

    def SetGradientSmoothingStandardDeviations(self, sigma):
        r"""
        SetGradientSmoothingStandardDeviations(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_SetGradientSmoothingStandardDeviations(self, sigma)

    def GetGradientSmoothingStandardDeviations(self):
        r"""GetGradientSmoothingStandardDeviations(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_GetGradientSmoothingStandardDeviations(self)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterID2ID2IVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLevelSetMotionRegistrationFilterID2ID2IVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterID2ID2IVF22

        Create a new object of the class itkLevelSetMotionRegistrationFilterID2ID2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterID2ID2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterID2ID2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterID2ID2IVF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterID2ID2IVF22 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_swigregister(itkLevelSetMotionRegistrationFilterID2ID2IVF22)

def itkLevelSetMotionRegistrationFilterID3ID3IVF33_New():
    return itkLevelSetMotionRegistrationFilterID3ID3IVF33.New()

class itkLevelSetMotionRegistrationFilterID3ID3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33):
    r"""Proxy of C++ itkLevelSetMotionRegistrationFilterID3ID3IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLevelSetMotionRegistrationFilterID3ID3IVF33_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLevelSetMotionRegistrationFilterID3ID3IVF33_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_GetMetric(self)

    def SetAlpha(self, arg0):
        r"""
        SetAlpha(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_SetAlpha(self, arg0)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_GetAlpha(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_GetIntensityDifferenceThreshold(self)

    def SetGradientMagnitudeThreshold(self, arg0):
        r"""
        SetGradientMagnitudeThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_SetGradientMagnitudeThreshold(self, arg0)

    def GetGradientMagnitudeThreshold(self):
        r"""GetGradientMagnitudeThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_GetGradientMagnitudeThreshold(self)

    def SetGradientSmoothingStandardDeviations(self, sigma):
        r"""
        SetGradientSmoothingStandardDeviations(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_SetGradientSmoothingStandardDeviations(self, sigma)

    def GetGradientSmoothingStandardDeviations(self):
        r"""GetGradientSmoothingStandardDeviations(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_GetGradientSmoothingStandardDeviations(self)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterID3ID3IVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLevelSetMotionRegistrationFilterID3ID3IVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterID3ID3IVF33

        Create a new object of the class itkLevelSetMotionRegistrationFilterID3ID3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterID3ID3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterID3ID3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterID3ID3IVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterID3ID3IVF33 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_swigregister(itkLevelSetMotionRegistrationFilterID3ID3IVF33)

def itkLevelSetMotionRegistrationFilterID4ID4IVF44_New():
    return itkLevelSetMotionRegistrationFilterID4ID4IVF44.New()

class itkLevelSetMotionRegistrationFilterID4ID4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44):
    r"""Proxy of C++ itkLevelSetMotionRegistrationFilterID4ID4IVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLevelSetMotionRegistrationFilterID4ID4IVF44_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLevelSetMotionRegistrationFilterID4ID4IVF44_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_GetMetric(self)

    def SetAlpha(self, arg0):
        r"""
        SetAlpha(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_SetAlpha(self, arg0)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_GetAlpha(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_GetIntensityDifferenceThreshold(self)

    def SetGradientMagnitudeThreshold(self, arg0):
        r"""
        SetGradientMagnitudeThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_SetGradientMagnitudeThreshold(self, arg0)

    def GetGradientMagnitudeThreshold(self):
        r"""GetGradientMagnitudeThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_GetGradientMagnitudeThreshold(self)

    def SetGradientSmoothingStandardDeviations(self, sigma):
        r"""
        SetGradientSmoothingStandardDeviations(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_SetGradientSmoothingStandardDeviations(self, sigma)

    def GetGradientSmoothingStandardDeviations(self):
        r"""GetGradientSmoothingStandardDeviations(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_GetGradientSmoothingStandardDeviations(self)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterID4ID4IVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLevelSetMotionRegistrationFilterID4ID4IVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterID4ID4IVF44

        Create a new object of the class itkLevelSetMotionRegistrationFilterID4ID4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterID4ID4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterID4ID4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterID4ID4IVF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterID4ID4IVF44 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_swigregister(itkLevelSetMotionRegistrationFilterID4ID4IVF44)

def itkLevelSetMotionRegistrationFilterIF2IF2IVF22_New():
    return itkLevelSetMotionRegistrationFilterIF2IF2IVF22.New()

class itkLevelSetMotionRegistrationFilterIF2IF2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22):
    r"""Proxy of C++ itkLevelSetMotionRegistrationFilterIF2IF2IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLevelSetMotionRegistrationFilterIF2IF2IVF22_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLevelSetMotionRegistrationFilterIF2IF2IVF22_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_GetMetric(self)

    def SetAlpha(self, arg0):
        r"""
        SetAlpha(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_SetAlpha(self, arg0)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_GetAlpha(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_GetIntensityDifferenceThreshold(self)

    def SetGradientMagnitudeThreshold(self, arg0):
        r"""
        SetGradientMagnitudeThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_SetGradientMagnitudeThreshold(self, arg0)

    def GetGradientMagnitudeThreshold(self):
        r"""GetGradientMagnitudeThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_GetGradientMagnitudeThreshold(self)

    def SetGradientSmoothingStandardDeviations(self, sigma):
        r"""
        SetGradientSmoothingStandardDeviations(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_SetGradientSmoothingStandardDeviations(self, sigma)

    def GetGradientSmoothingStandardDeviations(self):
        r"""GetGradientSmoothingStandardDeviations(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_GetGradientSmoothingStandardDeviations(self)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterIF2IF2IVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLevelSetMotionRegistrationFilterIF2IF2IVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterIF2IF2IVF22

        Create a new object of the class itkLevelSetMotionRegistrationFilterIF2IF2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterIF2IF2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterIF2IF2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterIF2IF2IVF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterIF2IF2IVF22 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_swigregister(itkLevelSetMotionRegistrationFilterIF2IF2IVF22)

def itkLevelSetMotionRegistrationFilterIF3IF3IVF33_New():
    return itkLevelSetMotionRegistrationFilterIF3IF3IVF33.New()

class itkLevelSetMotionRegistrationFilterIF3IF3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33):
    r"""Proxy of C++ itkLevelSetMotionRegistrationFilterIF3IF3IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLevelSetMotionRegistrationFilterIF3IF3IVF33_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLevelSetMotionRegistrationFilterIF3IF3IVF33_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_GetMetric(self)

    def SetAlpha(self, arg0):
        r"""
        SetAlpha(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_SetAlpha(self, arg0)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_GetAlpha(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_GetIntensityDifferenceThreshold(self)

    def SetGradientMagnitudeThreshold(self, arg0):
        r"""
        SetGradientMagnitudeThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_SetGradientMagnitudeThreshold(self, arg0)

    def GetGradientMagnitudeThreshold(self):
        r"""GetGradientMagnitudeThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_GetGradientMagnitudeThreshold(self)

    def SetGradientSmoothingStandardDeviations(self, sigma):
        r"""
        SetGradientSmoothingStandardDeviations(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_SetGradientSmoothingStandardDeviations(self, sigma)

    def GetGradientSmoothingStandardDeviations(self):
        r"""GetGradientSmoothingStandardDeviations(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_GetGradientSmoothingStandardDeviations(self)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterIF3IF3IVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLevelSetMotionRegistrationFilterIF3IF3IVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterIF3IF3IVF33

        Create a new object of the class itkLevelSetMotionRegistrationFilterIF3IF3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterIF3IF3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterIF3IF3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterIF3IF3IVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterIF3IF3IVF33 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_swigregister(itkLevelSetMotionRegistrationFilterIF3IF3IVF33)

def itkLevelSetMotionRegistrationFilterIF4IF4IVF44_New():
    return itkLevelSetMotionRegistrationFilterIF4IF4IVF44.New()

class itkLevelSetMotionRegistrationFilterIF4IF4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44):
    r"""Proxy of C++ itkLevelSetMotionRegistrationFilterIF4IF4IVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLevelSetMotionRegistrationFilterIF4IF4IVF44_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLevelSetMotionRegistrationFilterIF4IF4IVF44_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_GetMetric(self)

    def SetAlpha(self, arg0):
        r"""
        SetAlpha(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_SetAlpha(self, arg0)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_GetAlpha(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_GetIntensityDifferenceThreshold(self)

    def SetGradientMagnitudeThreshold(self, arg0):
        r"""
        SetGradientMagnitudeThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_SetGradientMagnitudeThreshold(self, arg0)

    def GetGradientMagnitudeThreshold(self):
        r"""GetGradientMagnitudeThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_GetGradientMagnitudeThreshold(self)

    def SetGradientSmoothingStandardDeviations(self, sigma):
        r"""
        SetGradientSmoothingStandardDeviations(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_SetGradientSmoothingStandardDeviations(self, sigma)

    def GetGradientSmoothingStandardDeviations(self):
        r"""GetGradientSmoothingStandardDeviations(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_GetGradientSmoothingStandardDeviations(self)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterIF4IF4IVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLevelSetMotionRegistrationFilterIF4IF4IVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterIF4IF4IVF44

        Create a new object of the class itkLevelSetMotionRegistrationFilterIF4IF4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterIF4IF4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterIF4IF4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterIF4IF4IVF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterIF4IF4IVF44 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_swigregister(itkLevelSetMotionRegistrationFilterIF4IF4IVF44)

def itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_New():
    return itkLevelSetMotionRegistrationFilterISS2ISS2IVF22.New()

class itkLevelSetMotionRegistrationFilterISS2ISS2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22):
    r"""Proxy of C++ itkLevelSetMotionRegistrationFilterISS2ISS2IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_GetMetric(self)

    def SetAlpha(self, arg0):
        r"""
        SetAlpha(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_SetAlpha(self, arg0)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_GetAlpha(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_GetIntensityDifferenceThreshold(self)

    def SetGradientMagnitudeThreshold(self, arg0):
        r"""
        SetGradientMagnitudeThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_SetGradientMagnitudeThreshold(self, arg0)

    def GetGradientMagnitudeThreshold(self):
        r"""GetGradientMagnitudeThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_GetGradientMagnitudeThreshold(self)

    def SetGradientSmoothingStandardDeviations(self, sigma):
        r"""
        SetGradientSmoothingStandardDeviations(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_SetGradientSmoothingStandardDeviations(self, sigma)

    def GetGradientSmoothingStandardDeviations(self):
        r"""GetGradientSmoothingStandardDeviations(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_GetGradientSmoothingStandardDeviations(self)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterISS2ISS2IVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLevelSetMotionRegistrationFilterISS2ISS2IVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterISS2ISS2IVF22

        Create a new object of the class itkLevelSetMotionRegistrationFilterISS2ISS2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterISS2ISS2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterISS2ISS2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterISS2ISS2IVF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterISS2ISS2IVF22 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_swigregister(itkLevelSetMotionRegistrationFilterISS2ISS2IVF22)

def itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_New():
    return itkLevelSetMotionRegistrationFilterISS3ISS3IVF33.New()

class itkLevelSetMotionRegistrationFilterISS3ISS3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33):
    r"""Proxy of C++ itkLevelSetMotionRegistrationFilterISS3ISS3IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_GetMetric(self)

    def SetAlpha(self, arg0):
        r"""
        SetAlpha(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_SetAlpha(self, arg0)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_GetAlpha(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_GetIntensityDifferenceThreshold(self)

    def SetGradientMagnitudeThreshold(self, arg0):
        r"""
        SetGradientMagnitudeThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_SetGradientMagnitudeThreshold(self, arg0)

    def GetGradientMagnitudeThreshold(self):
        r"""GetGradientMagnitudeThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_GetGradientMagnitudeThreshold(self)

    def SetGradientSmoothingStandardDeviations(self, sigma):
        r"""
        SetGradientSmoothingStandardDeviations(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_SetGradientSmoothingStandardDeviations(self, sigma)

    def GetGradientSmoothingStandardDeviations(self):
        r"""GetGradientSmoothingStandardDeviations(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_GetGradientSmoothingStandardDeviations(self)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterISS3ISS3IVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLevelSetMotionRegistrationFilterISS3ISS3IVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterISS3ISS3IVF33

        Create a new object of the class itkLevelSetMotionRegistrationFilterISS3ISS3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterISS3ISS3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterISS3ISS3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterISS3ISS3IVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterISS3ISS3IVF33 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_swigregister(itkLevelSetMotionRegistrationFilterISS3ISS3IVF33)

def itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_New():
    return itkLevelSetMotionRegistrationFilterISS4ISS4IVF44.New()

class itkLevelSetMotionRegistrationFilterISS4ISS4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44):
    r"""Proxy of C++ itkLevelSetMotionRegistrationFilterISS4ISS4IVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_GetMetric(self)

    def SetAlpha(self, arg0):
        r"""
        SetAlpha(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_SetAlpha(self, arg0)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_GetAlpha(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_GetIntensityDifferenceThreshold(self)

    def SetGradientMagnitudeThreshold(self, arg0):
        r"""
        SetGradientMagnitudeThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_SetGradientMagnitudeThreshold(self, arg0)

    def GetGradientMagnitudeThreshold(self):
        r"""GetGradientMagnitudeThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_GetGradientMagnitudeThreshold(self)

    def SetGradientSmoothingStandardDeviations(self, sigma):
        r"""
        SetGradientSmoothingStandardDeviations(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_SetGradientSmoothingStandardDeviations(self, sigma)

    def GetGradientSmoothingStandardDeviations(self):
        r"""GetGradientSmoothingStandardDeviations(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_GetGradientSmoothingStandardDeviations(self)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterISS4ISS4IVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLevelSetMotionRegistrationFilterISS4ISS4IVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterISS4ISS4IVF44

        Create a new object of the class itkLevelSetMotionRegistrationFilterISS4ISS4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterISS4ISS4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterISS4ISS4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterISS4ISS4IVF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterISS4ISS4IVF44 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_swigregister(itkLevelSetMotionRegistrationFilterISS4ISS4IVF44)

def itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_New():
    return itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22.New()

class itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22):
    r"""Proxy of C++ itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_GetMetric(self)

    def SetAlpha(self, arg0):
        r"""
        SetAlpha(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_SetAlpha(self, arg0)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_GetAlpha(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_GetIntensityDifferenceThreshold(self)

    def SetGradientMagnitudeThreshold(self, arg0):
        r"""
        SetGradientMagnitudeThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_SetGradientMagnitudeThreshold(self, arg0)

    def GetGradientMagnitudeThreshold(self):
        r"""GetGradientMagnitudeThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_GetGradientMagnitudeThreshold(self)

    def SetGradientSmoothingStandardDeviations(self, sigma):
        r"""
        SetGradientSmoothingStandardDeviations(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_SetGradientSmoothingStandardDeviations(self, sigma)

    def GetGradientSmoothingStandardDeviations(self):
        r"""GetGradientSmoothingStandardDeviations(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_GetGradientSmoothingStandardDeviations(self)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22

        Create a new object of the class itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_swigregister(itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22)

def itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_New():
    return itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33.New()

class itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33):
    r"""Proxy of C++ itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_GetMetric(self)

    def SetAlpha(self, arg0):
        r"""
        SetAlpha(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_SetAlpha(self, arg0)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_GetAlpha(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_GetIntensityDifferenceThreshold(self)

    def SetGradientMagnitudeThreshold(self, arg0):
        r"""
        SetGradientMagnitudeThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_SetGradientMagnitudeThreshold(self, arg0)

    def GetGradientMagnitudeThreshold(self):
        r"""GetGradientMagnitudeThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_GetGradientMagnitudeThreshold(self)

    def SetGradientSmoothingStandardDeviations(self, sigma):
        r"""
        SetGradientSmoothingStandardDeviations(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_SetGradientSmoothingStandardDeviations(self, sigma)

    def GetGradientSmoothingStandardDeviations(self):
        r"""GetGradientSmoothingStandardDeviations(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_GetGradientSmoothingStandardDeviations(self)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33

        Create a new object of the class itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_swigregister(itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33)

def itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_New():
    return itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44.New()

class itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44):
    r"""Proxy of C++ itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_GetMetric(self)

    def SetAlpha(self, arg0):
        r"""
        SetAlpha(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_SetAlpha(self, arg0)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_GetAlpha(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_GetIntensityDifferenceThreshold(self)

    def SetGradientMagnitudeThreshold(self, arg0):
        r"""
        SetGradientMagnitudeThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_SetGradientMagnitudeThreshold(self, arg0)

    def GetGradientMagnitudeThreshold(self):
        r"""GetGradientMagnitudeThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_GetGradientMagnitudeThreshold(self)

    def SetGradientSmoothingStandardDeviations(self, sigma):
        r"""
        SetGradientSmoothingStandardDeviations(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_SetGradientSmoothingStandardDeviations(self, sigma)

    def GetGradientSmoothingStandardDeviations(self):
        r"""GetGradientSmoothingStandardDeviations(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_GetGradientSmoothingStandardDeviations(self)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44

        Create a new object of the class itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_swigregister(itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44)

def itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_New():
    return itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22.New()

class itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22):
    r"""Proxy of C++ itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_GetMetric(self)

    def SetAlpha(self, arg0):
        r"""
        SetAlpha(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_SetAlpha(self, arg0)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_GetAlpha(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_GetIntensityDifferenceThreshold(self)

    def SetGradientMagnitudeThreshold(self, arg0):
        r"""
        SetGradientMagnitudeThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_SetGradientMagnitudeThreshold(self, arg0)

    def GetGradientMagnitudeThreshold(self):
        r"""GetGradientMagnitudeThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_GetGradientMagnitudeThreshold(self)

    def SetGradientSmoothingStandardDeviations(self, sigma):
        r"""
        SetGradientSmoothingStandardDeviations(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_SetGradientSmoothingStandardDeviations(self, sigma)

    def GetGradientSmoothingStandardDeviations(self):
        r"""GetGradientSmoothingStandardDeviations(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_GetGradientSmoothingStandardDeviations(self)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22

        Create a new object of the class itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_swigregister(itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22)

def itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_New():
    return itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33.New()

class itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33):
    r"""Proxy of C++ itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_GetMetric(self)

    def SetAlpha(self, arg0):
        r"""
        SetAlpha(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_SetAlpha(self, arg0)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_GetAlpha(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_GetIntensityDifferenceThreshold(self)

    def SetGradientMagnitudeThreshold(self, arg0):
        r"""
        SetGradientMagnitudeThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_SetGradientMagnitudeThreshold(self, arg0)

    def GetGradientMagnitudeThreshold(self):
        r"""GetGradientMagnitudeThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_GetGradientMagnitudeThreshold(self)

    def SetGradientSmoothingStandardDeviations(self, sigma):
        r"""
        SetGradientSmoothingStandardDeviations(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_SetGradientSmoothingStandardDeviations(self, sigma)

    def GetGradientSmoothingStandardDeviations(self):
        r"""GetGradientSmoothingStandardDeviations(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_GetGradientSmoothingStandardDeviations(self)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33

        Create a new object of the class itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_swigregister(itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33)

def itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_New():
    return itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44.New()

class itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44):
    r"""Proxy of C++ itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_Pointer"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_GetMetric(self)

    def SetAlpha(self, arg0):
        r"""
        SetAlpha(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_SetAlpha(self, arg0)

    def GetAlpha(self):
        r"""GetAlpha(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_GetAlpha(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_GetIntensityDifferenceThreshold(self)

    def SetGradientMagnitudeThreshold(self, arg0):
        r"""
        SetGradientMagnitudeThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_SetGradientMagnitudeThreshold(self, arg0)

    def GetGradientMagnitudeThreshold(self):
        r"""GetGradientMagnitudeThreshold(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_GetGradientMagnitudeThreshold(self)

    def SetGradientSmoothingStandardDeviations(self, sigma):
        r"""
        SetGradientSmoothingStandardDeviations(self, sigma)

        Parameters
        ----------
        sigma: double

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_SetGradientSmoothingStandardDeviations(self, sigma)

    def GetGradientSmoothingStandardDeviations(self):
        r"""GetGradientSmoothingStandardDeviations(self) -> double"""
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_GetGradientSmoothingStandardDeviations(self)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44

        Create a new object of the class itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_swigregister(itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def level_set_motion_registration_filter(*args: itkt.ImageLike,  alpha: float=..., intensity_difference_threshold: float=..., gradient_magnitude_threshold: float=..., gradient_smoothing_standard_deviations: float=..., fixed_image: itkt.Image=..., moving_image: itkt.Image=..., initial_displacement_field: itkt.Image=..., smooth_displacement_field: bool=..., standard_deviations: Union[float, Sequence[float]]=..., smooth_update_field: bool=..., update_field_standard_deviations: Union[float, Sequence[float]]=..., maximum_error: float=..., maximum_kernel_width: int=..., difference_function=..., number_of_iterations: int=..., use_image_spacing: bool=..., maximum_rms_error: float=..., rms_change: float=..., manual_reinitialization: bool=..., is_initialized: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for LevelSetMotionRegistrationFilter"""
    import itk

    kwarg_typehints = { 'alpha':alpha,'intensity_difference_threshold':intensity_difference_threshold,'gradient_magnitude_threshold':gradient_magnitude_threshold,'gradient_smoothing_standard_deviations':gradient_smoothing_standard_deviations,'fixed_image':fixed_image,'moving_image':moving_image,'initial_displacement_field':initial_displacement_field,'smooth_displacement_field':smooth_displacement_field,'standard_deviations':standard_deviations,'smooth_update_field':smooth_update_field,'update_field_standard_deviations':update_field_standard_deviations,'maximum_error':maximum_error,'maximum_kernel_width':maximum_kernel_width,'difference_function':difference_function,'number_of_iterations':number_of_iterations,'use_image_spacing':use_image_spacing,'maximum_rms_error':maximum_rms_error,'rms_change':rms_change,'manual_reinitialization':manual_reinitialization,'is_initialized':is_initialized }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.LevelSetMotionRegistrationFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def level_set_motion_registration_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKPDEDeformableRegistration.LevelSetMotionRegistrationFilter
    level_set_motion_registration_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    level_set_motion_registration_filter.__doc__ = filter_object.__doc__



