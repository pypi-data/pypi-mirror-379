# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKRegistrationCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPointsLocatorPython
else:
    import _itkPointsLocatorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkVectorContainerPython
import itk.itkArrayPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython

def itkPointsLocatorVCULPD2_New():
    return itkPointsLocatorVCULPD2.New()

class itkPointsLocatorVCULPD2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkPointsLocatorVCULPD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPointsLocatorVCULPD2_Pointer"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPointsLocatorVCULPD2_Pointer"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD2_Clone(self)

    def SetPoints(self, _arg):
        r"""
        SetPoints(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerULPD2 *

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD2_SetPoints(self, _arg)

    def GetModifiablePoints(self):
        r"""GetModifiablePoints(self) -> itkVectorContainerULPD2"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD2_GetModifiablePoints(self)

    def GetPoints(self, *args):
        r"""
        GetPoints(self) -> itkVectorContainerULPD2
        GetPoints(self) -> itkVectorContainerULPD2
        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD2_GetPoints(self, *args)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD2_Initialize(self)

    def FindClosestPoint(self, query):
        r"""
        FindClosestPoint(self, query) -> unsigned long

        Parameters
        ----------
        query: itkPointD2 const &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD2_FindClosestPoint(self, query)

    def FindClosestNPoints(self, *args):
        r"""
        FindClosestNPoints(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointD2 const &
        arg1: unsigned int
        arg2: std::vector< unsigned long,std::allocator< unsigned long > > &

        FindClosestNPoints(self, arg0, arg1, arg2, arg3)

        Parameters
        ----------
        arg0: itkPointD2 const &
        arg1: unsigned int
        arg2: std::vector< unsigned long,std::allocator< unsigned long > > &
        arg3: std::vector< double,std::allocator< double > > &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD2_FindClosestNPoints(self, *args)

    def FindPointsWithinRadius(self, arg0, arg1, arg2):
        r"""
        FindPointsWithinRadius(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointD2 const &
        arg1: double
        arg2: std::vector< unsigned long,std::allocator< unsigned long > > &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD2_FindPointsWithinRadius(self, arg0, arg1, arg2)
    __swig_destroy__ = _itkPointsLocatorPython.delete_itkPointsLocatorVCULPD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPointsLocatorVCULPD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPointsLocatorVCULPD2

        Create a new object of the class itkPointsLocatorVCULPD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointsLocatorVCULPD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointsLocatorVCULPD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointsLocatorVCULPD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointsLocatorVCULPD2 in _itkPointsLocatorPython:
_itkPointsLocatorPython.itkPointsLocatorVCULPD2_swigregister(itkPointsLocatorVCULPD2)

def itkPointsLocatorVCULPD3_New():
    return itkPointsLocatorVCULPD3.New()

class itkPointsLocatorVCULPD3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkPointsLocatorVCULPD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPointsLocatorVCULPD3_Pointer"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPointsLocatorVCULPD3_Pointer"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD3_Clone(self)

    def SetPoints(self, _arg):
        r"""
        SetPoints(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerULPD3 *

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD3_SetPoints(self, _arg)

    def GetModifiablePoints(self):
        r"""GetModifiablePoints(self) -> itkVectorContainerULPD3"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD3_GetModifiablePoints(self)

    def GetPoints(self, *args):
        r"""
        GetPoints(self) -> itkVectorContainerULPD3
        GetPoints(self) -> itkVectorContainerULPD3
        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD3_GetPoints(self, *args)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD3_Initialize(self)

    def FindClosestPoint(self, query):
        r"""
        FindClosestPoint(self, query) -> unsigned long

        Parameters
        ----------
        query: itkPointD3 const &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD3_FindClosestPoint(self, query)

    def FindClosestNPoints(self, *args):
        r"""
        FindClosestNPoints(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointD3 const &
        arg1: unsigned int
        arg2: std::vector< unsigned long,std::allocator< unsigned long > > &

        FindClosestNPoints(self, arg0, arg1, arg2, arg3)

        Parameters
        ----------
        arg0: itkPointD3 const &
        arg1: unsigned int
        arg2: std::vector< unsigned long,std::allocator< unsigned long > > &
        arg3: std::vector< double,std::allocator< double > > &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD3_FindClosestNPoints(self, *args)

    def FindPointsWithinRadius(self, arg0, arg1, arg2):
        r"""
        FindPointsWithinRadius(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointD3 const &
        arg1: double
        arg2: std::vector< unsigned long,std::allocator< unsigned long > > &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD3_FindPointsWithinRadius(self, arg0, arg1, arg2)
    __swig_destroy__ = _itkPointsLocatorPython.delete_itkPointsLocatorVCULPD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPointsLocatorVCULPD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPointsLocatorVCULPD3

        Create a new object of the class itkPointsLocatorVCULPD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointsLocatorVCULPD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointsLocatorVCULPD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointsLocatorVCULPD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointsLocatorVCULPD3 in _itkPointsLocatorPython:
_itkPointsLocatorPython.itkPointsLocatorVCULPD3_swigregister(itkPointsLocatorVCULPD3)

def itkPointsLocatorVCULPD4_New():
    return itkPointsLocatorVCULPD4.New()

class itkPointsLocatorVCULPD4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkPointsLocatorVCULPD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPointsLocatorVCULPD4_Pointer"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPointsLocatorVCULPD4_Pointer"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD4_Clone(self)

    def SetPoints(self, _arg):
        r"""
        SetPoints(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerULPD4 *

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD4_SetPoints(self, _arg)

    def GetModifiablePoints(self):
        r"""GetModifiablePoints(self) -> itkVectorContainerULPD4"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD4_GetModifiablePoints(self)

    def GetPoints(self, *args):
        r"""
        GetPoints(self) -> itkVectorContainerULPD4
        GetPoints(self) -> itkVectorContainerULPD4
        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD4_GetPoints(self, *args)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD4_Initialize(self)

    def FindClosestPoint(self, query):
        r"""
        FindClosestPoint(self, query) -> unsigned long

        Parameters
        ----------
        query: itkPointD4 const &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD4_FindClosestPoint(self, query)

    def FindClosestNPoints(self, *args):
        r"""
        FindClosestNPoints(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointD4 const &
        arg1: unsigned int
        arg2: std::vector< unsigned long,std::allocator< unsigned long > > &

        FindClosestNPoints(self, arg0, arg1, arg2, arg3)

        Parameters
        ----------
        arg0: itkPointD4 const &
        arg1: unsigned int
        arg2: std::vector< unsigned long,std::allocator< unsigned long > > &
        arg3: std::vector< double,std::allocator< double > > &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD4_FindClosestNPoints(self, *args)

    def FindPointsWithinRadius(self, arg0, arg1, arg2):
        r"""
        FindPointsWithinRadius(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointD4 const &
        arg1: double
        arg2: std::vector< unsigned long,std::allocator< unsigned long > > &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD4_FindPointsWithinRadius(self, arg0, arg1, arg2)
    __swig_destroy__ = _itkPointsLocatorPython.delete_itkPointsLocatorVCULPD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPointsLocatorVCULPD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPointsLocatorVCULPD4

        Create a new object of the class itkPointsLocatorVCULPD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointsLocatorVCULPD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointsLocatorVCULPD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointsLocatorVCULPD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointsLocatorVCULPD4 in _itkPointsLocatorPython:
_itkPointsLocatorPython.itkPointsLocatorVCULPD4_swigregister(itkPointsLocatorVCULPD4)

def itkPointsLocatorVCULPF2_New():
    return itkPointsLocatorVCULPF2.New()

class itkPointsLocatorVCULPF2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkPointsLocatorVCULPF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPointsLocatorVCULPF2_Pointer"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPointsLocatorVCULPF2_Pointer"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF2_Clone(self)

    def SetPoints(self, _arg):
        r"""
        SetPoints(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerULPF2 *

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF2_SetPoints(self, _arg)

    def GetModifiablePoints(self):
        r"""GetModifiablePoints(self) -> itkVectorContainerULPF2"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF2_GetModifiablePoints(self)

    def GetPoints(self, *args):
        r"""
        GetPoints(self) -> itkVectorContainerULPF2
        GetPoints(self) -> itkVectorContainerULPF2
        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF2_GetPoints(self, *args)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF2_Initialize(self)

    def FindClosestPoint(self, query):
        r"""
        FindClosestPoint(self, query) -> unsigned long

        Parameters
        ----------
        query: itkPointF2 const &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF2_FindClosestPoint(self, query)

    def FindClosestNPoints(self, *args):
        r"""
        FindClosestNPoints(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointF2 const &
        arg1: unsigned int
        arg2: std::vector< unsigned long,std::allocator< unsigned long > > &

        FindClosestNPoints(self, arg0, arg1, arg2, arg3)

        Parameters
        ----------
        arg0: itkPointF2 const &
        arg1: unsigned int
        arg2: std::vector< unsigned long,std::allocator< unsigned long > > &
        arg3: std::vector< double,std::allocator< double > > &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF2_FindClosestNPoints(self, *args)

    def FindPointsWithinRadius(self, arg0, arg1, arg2):
        r"""
        FindPointsWithinRadius(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointF2 const &
        arg1: double
        arg2: std::vector< unsigned long,std::allocator< unsigned long > > &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF2_FindPointsWithinRadius(self, arg0, arg1, arg2)
    __swig_destroy__ = _itkPointsLocatorPython.delete_itkPointsLocatorVCULPF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPointsLocatorVCULPF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPointsLocatorVCULPF2

        Create a new object of the class itkPointsLocatorVCULPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointsLocatorVCULPF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointsLocatorVCULPF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointsLocatorVCULPF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointsLocatorVCULPF2 in _itkPointsLocatorPython:
_itkPointsLocatorPython.itkPointsLocatorVCULPF2_swigregister(itkPointsLocatorVCULPF2)

def itkPointsLocatorVCULPF3_New():
    return itkPointsLocatorVCULPF3.New()

class itkPointsLocatorVCULPF3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkPointsLocatorVCULPF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPointsLocatorVCULPF3_Pointer"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPointsLocatorVCULPF3_Pointer"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF3_Clone(self)

    def SetPoints(self, _arg):
        r"""
        SetPoints(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerULPF3 *

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF3_SetPoints(self, _arg)

    def GetModifiablePoints(self):
        r"""GetModifiablePoints(self) -> itkVectorContainerULPF3"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF3_GetModifiablePoints(self)

    def GetPoints(self, *args):
        r"""
        GetPoints(self) -> itkVectorContainerULPF3
        GetPoints(self) -> itkVectorContainerULPF3
        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF3_GetPoints(self, *args)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF3_Initialize(self)

    def FindClosestPoint(self, query):
        r"""
        FindClosestPoint(self, query) -> unsigned long

        Parameters
        ----------
        query: itkPointF3 const &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF3_FindClosestPoint(self, query)

    def FindClosestNPoints(self, *args):
        r"""
        FindClosestNPoints(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointF3 const &
        arg1: unsigned int
        arg2: std::vector< unsigned long,std::allocator< unsigned long > > &

        FindClosestNPoints(self, arg0, arg1, arg2, arg3)

        Parameters
        ----------
        arg0: itkPointF3 const &
        arg1: unsigned int
        arg2: std::vector< unsigned long,std::allocator< unsigned long > > &
        arg3: std::vector< double,std::allocator< double > > &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF3_FindClosestNPoints(self, *args)

    def FindPointsWithinRadius(self, arg0, arg1, arg2):
        r"""
        FindPointsWithinRadius(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointF3 const &
        arg1: double
        arg2: std::vector< unsigned long,std::allocator< unsigned long > > &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF3_FindPointsWithinRadius(self, arg0, arg1, arg2)
    __swig_destroy__ = _itkPointsLocatorPython.delete_itkPointsLocatorVCULPF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPointsLocatorVCULPF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPointsLocatorVCULPF3

        Create a new object of the class itkPointsLocatorVCULPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointsLocatorVCULPF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointsLocatorVCULPF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointsLocatorVCULPF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointsLocatorVCULPF3 in _itkPointsLocatorPython:
_itkPointsLocatorPython.itkPointsLocatorVCULPF3_swigregister(itkPointsLocatorVCULPF3)

def itkPointsLocatorVCULPF4_New():
    return itkPointsLocatorVCULPF4.New()

class itkPointsLocatorVCULPF4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkPointsLocatorVCULPF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPointsLocatorVCULPF4_Pointer"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPointsLocatorVCULPF4_Pointer"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF4_Clone(self)

    def SetPoints(self, _arg):
        r"""
        SetPoints(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerULPF4 *

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF4_SetPoints(self, _arg)

    def GetModifiablePoints(self):
        r"""GetModifiablePoints(self) -> itkVectorContainerULPF4"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF4_GetModifiablePoints(self)

    def GetPoints(self, *args):
        r"""
        GetPoints(self) -> itkVectorContainerULPF4
        GetPoints(self) -> itkVectorContainerULPF4
        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF4_GetPoints(self, *args)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF4_Initialize(self)

    def FindClosestPoint(self, query):
        r"""
        FindClosestPoint(self, query) -> unsigned long

        Parameters
        ----------
        query: itkPointF4 const &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF4_FindClosestPoint(self, query)

    def FindClosestNPoints(self, *args):
        r"""
        FindClosestNPoints(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointF4 const &
        arg1: unsigned int
        arg2: std::vector< unsigned long,std::allocator< unsigned long > > &

        FindClosestNPoints(self, arg0, arg1, arg2, arg3)

        Parameters
        ----------
        arg0: itkPointF4 const &
        arg1: unsigned int
        arg2: std::vector< unsigned long,std::allocator< unsigned long > > &
        arg3: std::vector< double,std::allocator< double > > &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF4_FindClosestNPoints(self, *args)

    def FindPointsWithinRadius(self, arg0, arg1, arg2):
        r"""
        FindPointsWithinRadius(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointF4 const &
        arg1: double
        arg2: std::vector< unsigned long,std::allocator< unsigned long > > &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF4_FindPointsWithinRadius(self, arg0, arg1, arg2)
    __swig_destroy__ = _itkPointsLocatorPython.delete_itkPointsLocatorVCULPF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPointsLocatorVCULPF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULPF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPointsLocatorVCULPF4

        Create a new object of the class itkPointsLocatorVCULPF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointsLocatorVCULPF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointsLocatorVCULPF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointsLocatorVCULPF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointsLocatorVCULPF4 in _itkPointsLocatorPython:
_itkPointsLocatorPython.itkPointsLocatorVCULPF4_swigregister(itkPointsLocatorVCULPF4)

