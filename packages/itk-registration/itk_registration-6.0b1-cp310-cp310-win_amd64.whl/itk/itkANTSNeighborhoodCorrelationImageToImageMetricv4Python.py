# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKMetricsv4Python



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python
else:
    import _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkSizePython
import itk.pyBasePython
import itk.itkImageToImageMetricv4Python
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.ITKCommonBasePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSpatialObjectBasePython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkOptimizerParametersPython
import itk.itkArray2DPython
import itk.itkDiffusionTensor3DPython
import itk.itkTransformBasePython
import itk.itkSpatialObjectPropertyPython
import itk.itkRGBAPixelPython
import itk.itkBoundingBoxPython
import itk.itkMapContainerPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkPointSetPython
import itk.itkInterpolateImageFunctionPython
import itk.itkImageFunctionBasePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkFunctionBasePython
import itk.itkDisplacementFieldTransformPython
import itk.itkVectorImagePython
import itk.itkObjectToObjectMetricBasePython
import itk.itkSingleValuedCostFunctionv4Python
import itk.itkCostFunctionPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkANTSNeighborhoodCorrelationImageToImageMetricv4ID2ID2_New():
    return itkANTSNeighborhoodCorrelationImageToImageMetricv4ID2ID2.New()

class itkANTSNeighborhoodCorrelationImageToImageMetricv4ID2ID2(itk.itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2):
    r"""Proxy of C++ itkANTSNeighborhoodCorrelationImageToImageMetricv4ID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkANTSNeighborhoodCorrelationImageToImageMetricv4ID2ID2_Pointer"""
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4ID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkANTSNeighborhoodCorrelationImageToImageMetricv4ID2ID2_Pointer"""
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4ID2ID2_Clone(self)

    def SetRadius(self, _arg):
        r"""
        SetRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        """
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4ID2ID2_SetRadius(self, _arg)

    def GetRadius(self, *args):
        r"""
        GetRadius(self) -> itkSize2
        GetRadius(self) -> itkSize2
        """
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4ID2ID2_GetRadius(self, *args)
    __swig_destroy__ = _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.delete_itkANTSNeighborhoodCorrelationImageToImageMetricv4ID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkANTSNeighborhoodCorrelationImageToImageMetricv4ID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4ID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkANTSNeighborhoodCorrelationImageToImageMetricv4ID2ID2

        Create a new object of the class itkANTSNeighborhoodCorrelationImageToImageMetricv4ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkANTSNeighborhoodCorrelationImageToImageMetricv4ID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkANTSNeighborhoodCorrelationImageToImageMetricv4ID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkANTSNeighborhoodCorrelationImageToImageMetricv4ID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkANTSNeighborhoodCorrelationImageToImageMetricv4ID2ID2 in _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python:
_itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4ID2ID2_swigregister(itkANTSNeighborhoodCorrelationImageToImageMetricv4ID2ID2)

def itkANTSNeighborhoodCorrelationImageToImageMetricv4ID3ID3_New():
    return itkANTSNeighborhoodCorrelationImageToImageMetricv4ID3ID3.New()

class itkANTSNeighborhoodCorrelationImageToImageMetricv4ID3ID3(itk.itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3):
    r"""Proxy of C++ itkANTSNeighborhoodCorrelationImageToImageMetricv4ID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkANTSNeighborhoodCorrelationImageToImageMetricv4ID3ID3_Pointer"""
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4ID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkANTSNeighborhoodCorrelationImageToImageMetricv4ID3ID3_Pointer"""
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4ID3ID3_Clone(self)

    def SetRadius(self, _arg):
        r"""
        SetRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4ID3ID3_SetRadius(self, _arg)

    def GetRadius(self, *args):
        r"""
        GetRadius(self) -> itkSize3
        GetRadius(self) -> itkSize3
        """
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4ID3ID3_GetRadius(self, *args)
    __swig_destroy__ = _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.delete_itkANTSNeighborhoodCorrelationImageToImageMetricv4ID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkANTSNeighborhoodCorrelationImageToImageMetricv4ID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4ID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkANTSNeighborhoodCorrelationImageToImageMetricv4ID3ID3

        Create a new object of the class itkANTSNeighborhoodCorrelationImageToImageMetricv4ID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkANTSNeighborhoodCorrelationImageToImageMetricv4ID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkANTSNeighborhoodCorrelationImageToImageMetricv4ID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkANTSNeighborhoodCorrelationImageToImageMetricv4ID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkANTSNeighborhoodCorrelationImageToImageMetricv4ID3ID3 in _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python:
_itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4ID3ID3_swigregister(itkANTSNeighborhoodCorrelationImageToImageMetricv4ID3ID3)

def itkANTSNeighborhoodCorrelationImageToImageMetricv4ID4ID4_New():
    return itkANTSNeighborhoodCorrelationImageToImageMetricv4ID4ID4.New()

class itkANTSNeighborhoodCorrelationImageToImageMetricv4ID4ID4(itk.itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4):
    r"""Proxy of C++ itkANTSNeighborhoodCorrelationImageToImageMetricv4ID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkANTSNeighborhoodCorrelationImageToImageMetricv4ID4ID4_Pointer"""
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4ID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkANTSNeighborhoodCorrelationImageToImageMetricv4ID4ID4_Pointer"""
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4ID4ID4_Clone(self)

    def SetRadius(self, _arg):
        r"""
        SetRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        """
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4ID4ID4_SetRadius(self, _arg)

    def GetRadius(self, *args):
        r"""
        GetRadius(self) -> itkSize4
        GetRadius(self) -> itkSize4
        """
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4ID4ID4_GetRadius(self, *args)
    __swig_destroy__ = _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.delete_itkANTSNeighborhoodCorrelationImageToImageMetricv4ID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkANTSNeighborhoodCorrelationImageToImageMetricv4ID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4ID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkANTSNeighborhoodCorrelationImageToImageMetricv4ID4ID4

        Create a new object of the class itkANTSNeighborhoodCorrelationImageToImageMetricv4ID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkANTSNeighborhoodCorrelationImageToImageMetricv4ID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkANTSNeighborhoodCorrelationImageToImageMetricv4ID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkANTSNeighborhoodCorrelationImageToImageMetricv4ID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkANTSNeighborhoodCorrelationImageToImageMetricv4ID4ID4 in _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python:
_itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4ID4ID4_swigregister(itkANTSNeighborhoodCorrelationImageToImageMetricv4ID4ID4)

def itkANTSNeighborhoodCorrelationImageToImageMetricv4IF2IF2_New():
    return itkANTSNeighborhoodCorrelationImageToImageMetricv4IF2IF2.New()

class itkANTSNeighborhoodCorrelationImageToImageMetricv4IF2IF2(itk.itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2):
    r"""Proxy of C++ itkANTSNeighborhoodCorrelationImageToImageMetricv4IF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkANTSNeighborhoodCorrelationImageToImageMetricv4IF2IF2_Pointer"""
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4IF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkANTSNeighborhoodCorrelationImageToImageMetricv4IF2IF2_Pointer"""
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4IF2IF2_Clone(self)

    def SetRadius(self, _arg):
        r"""
        SetRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        """
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4IF2IF2_SetRadius(self, _arg)

    def GetRadius(self, *args):
        r"""
        GetRadius(self) -> itkSize2
        GetRadius(self) -> itkSize2
        """
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4IF2IF2_GetRadius(self, *args)
    __swig_destroy__ = _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.delete_itkANTSNeighborhoodCorrelationImageToImageMetricv4IF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkANTSNeighborhoodCorrelationImageToImageMetricv4IF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4IF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkANTSNeighborhoodCorrelationImageToImageMetricv4IF2IF2

        Create a new object of the class itkANTSNeighborhoodCorrelationImageToImageMetricv4IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkANTSNeighborhoodCorrelationImageToImageMetricv4IF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkANTSNeighborhoodCorrelationImageToImageMetricv4IF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkANTSNeighborhoodCorrelationImageToImageMetricv4IF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkANTSNeighborhoodCorrelationImageToImageMetricv4IF2IF2 in _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python:
_itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4IF2IF2_swigregister(itkANTSNeighborhoodCorrelationImageToImageMetricv4IF2IF2)

def itkANTSNeighborhoodCorrelationImageToImageMetricv4IF3IF3_New():
    return itkANTSNeighborhoodCorrelationImageToImageMetricv4IF3IF3.New()

class itkANTSNeighborhoodCorrelationImageToImageMetricv4IF3IF3(itk.itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3):
    r"""Proxy of C++ itkANTSNeighborhoodCorrelationImageToImageMetricv4IF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkANTSNeighborhoodCorrelationImageToImageMetricv4IF3IF3_Pointer"""
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4IF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkANTSNeighborhoodCorrelationImageToImageMetricv4IF3IF3_Pointer"""
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4IF3IF3_Clone(self)

    def SetRadius(self, _arg):
        r"""
        SetRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4IF3IF3_SetRadius(self, _arg)

    def GetRadius(self, *args):
        r"""
        GetRadius(self) -> itkSize3
        GetRadius(self) -> itkSize3
        """
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4IF3IF3_GetRadius(self, *args)
    __swig_destroy__ = _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.delete_itkANTSNeighborhoodCorrelationImageToImageMetricv4IF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkANTSNeighborhoodCorrelationImageToImageMetricv4IF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4IF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkANTSNeighborhoodCorrelationImageToImageMetricv4IF3IF3

        Create a new object of the class itkANTSNeighborhoodCorrelationImageToImageMetricv4IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkANTSNeighborhoodCorrelationImageToImageMetricv4IF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkANTSNeighborhoodCorrelationImageToImageMetricv4IF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkANTSNeighborhoodCorrelationImageToImageMetricv4IF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkANTSNeighborhoodCorrelationImageToImageMetricv4IF3IF3 in _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python:
_itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4IF3IF3_swigregister(itkANTSNeighborhoodCorrelationImageToImageMetricv4IF3IF3)

def itkANTSNeighborhoodCorrelationImageToImageMetricv4IF4IF4_New():
    return itkANTSNeighborhoodCorrelationImageToImageMetricv4IF4IF4.New()

class itkANTSNeighborhoodCorrelationImageToImageMetricv4IF4IF4(itk.itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4):
    r"""Proxy of C++ itkANTSNeighborhoodCorrelationImageToImageMetricv4IF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkANTSNeighborhoodCorrelationImageToImageMetricv4IF4IF4_Pointer"""
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4IF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkANTSNeighborhoodCorrelationImageToImageMetricv4IF4IF4_Pointer"""
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4IF4IF4_Clone(self)

    def SetRadius(self, _arg):
        r"""
        SetRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        """
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4IF4IF4_SetRadius(self, _arg)

    def GetRadius(self, *args):
        r"""
        GetRadius(self) -> itkSize4
        GetRadius(self) -> itkSize4
        """
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4IF4IF4_GetRadius(self, *args)
    __swig_destroy__ = _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.delete_itkANTSNeighborhoodCorrelationImageToImageMetricv4IF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkANTSNeighborhoodCorrelationImageToImageMetricv4IF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4IF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkANTSNeighborhoodCorrelationImageToImageMetricv4IF4IF4

        Create a new object of the class itkANTSNeighborhoodCorrelationImageToImageMetricv4IF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkANTSNeighborhoodCorrelationImageToImageMetricv4IF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkANTSNeighborhoodCorrelationImageToImageMetricv4IF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkANTSNeighborhoodCorrelationImageToImageMetricv4IF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkANTSNeighborhoodCorrelationImageToImageMetricv4IF4IF4 in _itkANTSNeighborhoodCorrelationImageToImageMetricv4Python:
_itkANTSNeighborhoodCorrelationImageToImageMetricv4Python.itkANTSNeighborhoodCorrelationImageToImageMetricv4IF4IF4_swigregister(itkANTSNeighborhoodCorrelationImageToImageMetricv4IF4IF4)

