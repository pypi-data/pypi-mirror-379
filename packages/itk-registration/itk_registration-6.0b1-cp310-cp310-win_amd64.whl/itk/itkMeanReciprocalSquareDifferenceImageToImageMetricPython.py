# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKRegistrationCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMeanReciprocalSquareDifferenceImageToImageMetricPython
else:
    import _itkMeanReciprocalSquareDifferenceImageToImageMetricPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkImageToImageMetricPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImagePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.ITKCommonBasePython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkInterpolateImageFunctionPython
import itk.itkImageFunctionBasePython
import itk.itkContinuousIndexPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkFunctionBasePython
import itk.itkSpatialObjectBasePython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkVariableLengthVectorPython
import itk.itkOptimizerParametersPython
import itk.itkArray2DPython
import itk.itkDiffusionTensor3DPython
import itk.itkTransformBasePython
import itk.itkSpatialObjectPropertyPython
import itk.itkBoundingBoxPython
import itk.itkMapContainerPython
import itk.itkVectorContainerPython
import itk.ITKCostFunctionsPython
import itk.vnl_least_squares_functionPython
import itk.vnl_cost_functionPython
import itk.vnl_unary_functionPython
import itk.itkCostFunctionPython

def itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2(itk.itkImageToImageMetricPython.itkImageToImageMetricID2ID2):
    r"""Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_Clone(self)

    def GetLambda(self):
        r"""GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_GetLambda(self)

    def SetLambda(self, _arg):
        r"""
        SetLambda(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_SetLambda(self, _arg)

    def GetDelta(self):
        r"""GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_GetDelta(self)

    def SetDelta(self, _arg):
        r"""
        SetDelta(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_SetDelta(self, _arg)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2)

def itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3(itk.itkImageToImageMetricPython.itkImageToImageMetricID3ID3):
    r"""Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_Clone(self)

    def GetLambda(self):
        r"""GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_GetLambda(self)

    def SetLambda(self, _arg):
        r"""
        SetLambda(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_SetLambda(self, _arg)

    def GetDelta(self):
        r"""GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_GetDelta(self)

    def SetDelta(self, _arg):
        r"""
        SetDelta(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_SetDelta(self, _arg)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3)

def itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4(itk.itkImageToImageMetricPython.itkImageToImageMetricID4ID4):
    r"""Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4_Clone(self)

    def GetLambda(self):
        r"""GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4_GetLambda(self)

    def SetLambda(self, _arg):
        r"""
        SetLambda(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4_SetLambda(self, _arg)

    def GetDelta(self):
        r"""GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4_GetDelta(self)

    def SetDelta(self, _arg):
        r"""
        SetDelta(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4_SetDelta(self, _arg)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4)

def itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2(itk.itkImageToImageMetricPython.itkImageToImageMetricIF2IF2):
    r"""Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Clone(self)

    def GetLambda(self):
        r"""GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_GetLambda(self)

    def SetLambda(self, _arg):
        r"""
        SetLambda(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_SetLambda(self, _arg)

    def GetDelta(self):
        r"""GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_GetDelta(self)

    def SetDelta(self, _arg):
        r"""
        SetDelta(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_SetDelta(self, _arg)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2)

def itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3(itk.itkImageToImageMetricPython.itkImageToImageMetricIF3IF3):
    r"""Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Clone(self)

    def GetLambda(self):
        r"""GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_GetLambda(self)

    def SetLambda(self, _arg):
        r"""
        SetLambda(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_SetLambda(self, _arg)

    def GetDelta(self):
        r"""GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_GetDelta(self)

    def SetDelta(self, _arg):
        r"""
        SetDelta(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_SetDelta(self, _arg)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3)

def itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4(itk.itkImageToImageMetricPython.itkImageToImageMetricIF4IF4):
    r"""Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4_Clone(self)

    def GetLambda(self):
        r"""GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4_GetLambda(self)

    def SetLambda(self, _arg):
        r"""
        SetLambda(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4_SetLambda(self, _arg)

    def GetDelta(self):
        r"""GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4_GetDelta(self)

    def SetDelta(self, _arg):
        r"""
        SetDelta(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4_SetDelta(self, _arg)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4)

def itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2(itk.itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2):
    r"""Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_Clone(self)

    def GetLambda(self):
        r"""GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_GetLambda(self)

    def SetLambda(self, _arg):
        r"""
        SetLambda(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_SetLambda(self, _arg)

    def GetDelta(self):
        r"""GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_GetDelta(self)

    def SetDelta(self, _arg):
        r"""
        SetDelta(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_SetDelta(self, _arg)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2)

def itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3(itk.itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3):
    r"""Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_Clone(self)

    def GetLambda(self):
        r"""GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_GetLambda(self)

    def SetLambda(self, _arg):
        r"""
        SetLambda(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_SetLambda(self, _arg)

    def GetDelta(self):
        r"""GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_GetDelta(self)

    def SetDelta(self, _arg):
        r"""
        SetDelta(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_SetDelta(self, _arg)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3)

def itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4(itk.itkImageToImageMetricPython.itkImageToImageMetricISS4ISS4):
    r"""Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4_Clone(self)

    def GetLambda(self):
        r"""GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4_GetLambda(self)

    def SetLambda(self, _arg):
        r"""
        SetLambda(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4_SetLambda(self, _arg)

    def GetDelta(self):
        r"""GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4_GetDelta(self)

    def SetDelta(self, _arg):
        r"""
        SetDelta(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4_SetDelta(self, _arg)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4)

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2(itk.itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2):
    r"""Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Clone(self)

    def GetLambda(self):
        r"""GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_GetLambda(self)

    def SetLambda(self, _arg):
        r"""
        SetLambda(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_SetLambda(self, _arg)

    def GetDelta(self):
        r"""GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_GetDelta(self)

    def SetDelta(self, _arg):
        r"""
        SetDelta(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_SetDelta(self, _arg)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2)

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3(itk.itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3):
    r"""Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Clone(self)

    def GetLambda(self):
        r"""GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_GetLambda(self)

    def SetLambda(self, _arg):
        r"""
        SetLambda(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_SetLambda(self, _arg)

    def GetDelta(self):
        r"""GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_GetDelta(self)

    def SetDelta(self, _arg):
        r"""
        SetDelta(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_SetDelta(self, _arg)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3)

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4(itk.itkImageToImageMetricPython.itkImageToImageMetricIUC4IUC4):
    r"""Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4_Clone(self)

    def GetLambda(self):
        r"""GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4_GetLambda(self)

    def SetLambda(self, _arg):
        r"""
        SetLambda(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4_SetLambda(self, _arg)

    def GetDelta(self):
        r"""GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4_GetDelta(self)

    def SetDelta(self, _arg):
        r"""
        SetDelta(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4_SetDelta(self, _arg)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4)

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2(itk.itkImageToImageMetricPython.itkImageToImageMetricIUS2IUS2):
    r"""Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Clone(self)

    def GetLambda(self):
        r"""GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_GetLambda(self)

    def SetLambda(self, _arg):
        r"""
        SetLambda(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_SetLambda(self, _arg)

    def GetDelta(self):
        r"""GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_GetDelta(self)

    def SetDelta(self, _arg):
        r"""
        SetDelta(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_SetDelta(self, _arg)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2)

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3(itk.itkImageToImageMetricPython.itkImageToImageMetricIUS3IUS3):
    r"""Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Clone(self)

    def GetLambda(self):
        r"""GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_GetLambda(self)

    def SetLambda(self, _arg):
        r"""
        SetLambda(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_SetLambda(self, _arg)

    def GetDelta(self):
        r"""GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_GetDelta(self)

    def SetDelta(self, _arg):
        r"""
        SetDelta(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_SetDelta(self, _arg)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3)

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4(itk.itkImageToImageMetricPython.itkImageToImageMetricIUS4IUS4):
    r"""Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4_Pointer"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4_Clone(self)

    def GetLambda(self):
        r"""GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4_GetLambda(self)

    def SetLambda(self, _arg):
        r"""
        SetLambda(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4_SetLambda(self, _arg)

    def GetDelta(self):
        r"""GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4_GetDelta(self)

    def SetDelta(self, _arg):
        r"""
        SetDelta(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4_SetDelta(self, _arg)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4)

