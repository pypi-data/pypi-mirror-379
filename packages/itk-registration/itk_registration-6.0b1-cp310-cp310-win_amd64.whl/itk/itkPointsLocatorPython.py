# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKRegistrationCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPointsLocatorPython
else:
    import _itkPointsLocatorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkArrayPython

def itkPointsLocatorVCULLPD2_New():
    return itkPointsLocatorVCULLPD2.New()

class itkPointsLocatorVCULLPD2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkPointsLocatorVCULLPD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPointsLocatorVCULLPD2_Pointer"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPointsLocatorVCULLPD2_Pointer"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD2_Clone(self)

    def SetPoints(self, _arg):
        r"""
        SetPoints(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerULLPD2 *

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD2_SetPoints(self, _arg)

    def GetModifiablePoints(self):
        r"""GetModifiablePoints(self) -> itkVectorContainerULLPD2"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD2_GetModifiablePoints(self)

    def GetPoints(self, *args):
        r"""
        GetPoints(self) -> itkVectorContainerULLPD2
        GetPoints(self) -> itkVectorContainerULLPD2
        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD2_GetPoints(self, *args)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD2_Initialize(self)

    def FindClosestPoint(self, query):
        r"""
        FindClosestPoint(self, query) -> unsigned long long

        Parameters
        ----------
        query: itkPointD2 const &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD2_FindClosestPoint(self, query)

    def FindClosestNPoints(self, *args):
        r"""
        FindClosestNPoints(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointD2 const &
        arg1: unsigned int
        arg2: std::vector< unsigned long long,std::allocator< unsigned long long > > &

        FindClosestNPoints(self, arg0, arg1, arg2, arg3)

        Parameters
        ----------
        arg0: itkPointD2 const &
        arg1: unsigned int
        arg2: std::vector< unsigned long long,std::allocator< unsigned long long > > &
        arg3: std::vector< double,std::allocator< double > > &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD2_FindClosestNPoints(self, *args)

    def FindPointsWithinRadius(self, arg0, arg1, arg2):
        r"""
        FindPointsWithinRadius(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointD2 const &
        arg1: double
        arg2: std::vector< unsigned long long,std::allocator< unsigned long long > > &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD2_FindPointsWithinRadius(self, arg0, arg1, arg2)
    __swig_destroy__ = _itkPointsLocatorPython.delete_itkPointsLocatorVCULLPD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPointsLocatorVCULLPD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPointsLocatorVCULLPD2

        Create a new object of the class itkPointsLocatorVCULLPD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointsLocatorVCULLPD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointsLocatorVCULLPD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointsLocatorVCULLPD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointsLocatorVCULLPD2 in _itkPointsLocatorPython:
_itkPointsLocatorPython.itkPointsLocatorVCULLPD2_swigregister(itkPointsLocatorVCULLPD2)

def itkPointsLocatorVCULLPD3_New():
    return itkPointsLocatorVCULLPD3.New()

class itkPointsLocatorVCULLPD3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkPointsLocatorVCULLPD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPointsLocatorVCULLPD3_Pointer"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPointsLocatorVCULLPD3_Pointer"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD3_Clone(self)

    def SetPoints(self, _arg):
        r"""
        SetPoints(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerULLPD3 *

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD3_SetPoints(self, _arg)

    def GetModifiablePoints(self):
        r"""GetModifiablePoints(self) -> itkVectorContainerULLPD3"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD3_GetModifiablePoints(self)

    def GetPoints(self, *args):
        r"""
        GetPoints(self) -> itkVectorContainerULLPD3
        GetPoints(self) -> itkVectorContainerULLPD3
        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD3_GetPoints(self, *args)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD3_Initialize(self)

    def FindClosestPoint(self, query):
        r"""
        FindClosestPoint(self, query) -> unsigned long long

        Parameters
        ----------
        query: itkPointD3 const &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD3_FindClosestPoint(self, query)

    def FindClosestNPoints(self, *args):
        r"""
        FindClosestNPoints(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointD3 const &
        arg1: unsigned int
        arg2: std::vector< unsigned long long,std::allocator< unsigned long long > > &

        FindClosestNPoints(self, arg0, arg1, arg2, arg3)

        Parameters
        ----------
        arg0: itkPointD3 const &
        arg1: unsigned int
        arg2: std::vector< unsigned long long,std::allocator< unsigned long long > > &
        arg3: std::vector< double,std::allocator< double > > &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD3_FindClosestNPoints(self, *args)

    def FindPointsWithinRadius(self, arg0, arg1, arg2):
        r"""
        FindPointsWithinRadius(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointD3 const &
        arg1: double
        arg2: std::vector< unsigned long long,std::allocator< unsigned long long > > &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD3_FindPointsWithinRadius(self, arg0, arg1, arg2)
    __swig_destroy__ = _itkPointsLocatorPython.delete_itkPointsLocatorVCULLPD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPointsLocatorVCULLPD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPointsLocatorVCULLPD3

        Create a new object of the class itkPointsLocatorVCULLPD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointsLocatorVCULLPD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointsLocatorVCULLPD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointsLocatorVCULLPD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointsLocatorVCULLPD3 in _itkPointsLocatorPython:
_itkPointsLocatorPython.itkPointsLocatorVCULLPD3_swigregister(itkPointsLocatorVCULLPD3)

def itkPointsLocatorVCULLPD4_New():
    return itkPointsLocatorVCULLPD4.New()

class itkPointsLocatorVCULLPD4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkPointsLocatorVCULLPD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPointsLocatorVCULLPD4_Pointer"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPointsLocatorVCULLPD4_Pointer"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD4_Clone(self)

    def SetPoints(self, _arg):
        r"""
        SetPoints(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerULLPD4 *

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD4_SetPoints(self, _arg)

    def GetModifiablePoints(self):
        r"""GetModifiablePoints(self) -> itkVectorContainerULLPD4"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD4_GetModifiablePoints(self)

    def GetPoints(self, *args):
        r"""
        GetPoints(self) -> itkVectorContainerULLPD4
        GetPoints(self) -> itkVectorContainerULLPD4
        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD4_GetPoints(self, *args)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD4_Initialize(self)

    def FindClosestPoint(self, query):
        r"""
        FindClosestPoint(self, query) -> unsigned long long

        Parameters
        ----------
        query: itkPointD4 const &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD4_FindClosestPoint(self, query)

    def FindClosestNPoints(self, *args):
        r"""
        FindClosestNPoints(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointD4 const &
        arg1: unsigned int
        arg2: std::vector< unsigned long long,std::allocator< unsigned long long > > &

        FindClosestNPoints(self, arg0, arg1, arg2, arg3)

        Parameters
        ----------
        arg0: itkPointD4 const &
        arg1: unsigned int
        arg2: std::vector< unsigned long long,std::allocator< unsigned long long > > &
        arg3: std::vector< double,std::allocator< double > > &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD4_FindClosestNPoints(self, *args)

    def FindPointsWithinRadius(self, arg0, arg1, arg2):
        r"""
        FindPointsWithinRadius(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointD4 const &
        arg1: double
        arg2: std::vector< unsigned long long,std::allocator< unsigned long long > > &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD4_FindPointsWithinRadius(self, arg0, arg1, arg2)
    __swig_destroy__ = _itkPointsLocatorPython.delete_itkPointsLocatorVCULLPD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPointsLocatorVCULLPD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPointsLocatorVCULLPD4

        Create a new object of the class itkPointsLocatorVCULLPD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointsLocatorVCULLPD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointsLocatorVCULLPD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointsLocatorVCULLPD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointsLocatorVCULLPD4 in _itkPointsLocatorPython:
_itkPointsLocatorPython.itkPointsLocatorVCULLPD4_swigregister(itkPointsLocatorVCULLPD4)

def itkPointsLocatorVCULLPF2_New():
    return itkPointsLocatorVCULLPF2.New()

class itkPointsLocatorVCULLPF2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkPointsLocatorVCULLPF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPointsLocatorVCULLPF2_Pointer"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPointsLocatorVCULLPF2_Pointer"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF2_Clone(self)

    def SetPoints(self, _arg):
        r"""
        SetPoints(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerULLPF2 *

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF2_SetPoints(self, _arg)

    def GetModifiablePoints(self):
        r"""GetModifiablePoints(self) -> itkVectorContainerULLPF2"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF2_GetModifiablePoints(self)

    def GetPoints(self, *args):
        r"""
        GetPoints(self) -> itkVectorContainerULLPF2
        GetPoints(self) -> itkVectorContainerULLPF2
        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF2_GetPoints(self, *args)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF2_Initialize(self)

    def FindClosestPoint(self, query):
        r"""
        FindClosestPoint(self, query) -> unsigned long long

        Parameters
        ----------
        query: itkPointF2 const &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF2_FindClosestPoint(self, query)

    def FindClosestNPoints(self, *args):
        r"""
        FindClosestNPoints(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointF2 const &
        arg1: unsigned int
        arg2: std::vector< unsigned long long,std::allocator< unsigned long long > > &

        FindClosestNPoints(self, arg0, arg1, arg2, arg3)

        Parameters
        ----------
        arg0: itkPointF2 const &
        arg1: unsigned int
        arg2: std::vector< unsigned long long,std::allocator< unsigned long long > > &
        arg3: std::vector< double,std::allocator< double > > &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF2_FindClosestNPoints(self, *args)

    def FindPointsWithinRadius(self, arg0, arg1, arg2):
        r"""
        FindPointsWithinRadius(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointF2 const &
        arg1: double
        arg2: std::vector< unsigned long long,std::allocator< unsigned long long > > &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF2_FindPointsWithinRadius(self, arg0, arg1, arg2)
    __swig_destroy__ = _itkPointsLocatorPython.delete_itkPointsLocatorVCULLPF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPointsLocatorVCULLPF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPointsLocatorVCULLPF2

        Create a new object of the class itkPointsLocatorVCULLPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointsLocatorVCULLPF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointsLocatorVCULLPF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointsLocatorVCULLPF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointsLocatorVCULLPF2 in _itkPointsLocatorPython:
_itkPointsLocatorPython.itkPointsLocatorVCULLPF2_swigregister(itkPointsLocatorVCULLPF2)

def itkPointsLocatorVCULLPF3_New():
    return itkPointsLocatorVCULLPF3.New()

class itkPointsLocatorVCULLPF3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkPointsLocatorVCULLPF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPointsLocatorVCULLPF3_Pointer"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPointsLocatorVCULLPF3_Pointer"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF3_Clone(self)

    def SetPoints(self, _arg):
        r"""
        SetPoints(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerULLPF3 *

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF3_SetPoints(self, _arg)

    def GetModifiablePoints(self):
        r"""GetModifiablePoints(self) -> itkVectorContainerULLPF3"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF3_GetModifiablePoints(self)

    def GetPoints(self, *args):
        r"""
        GetPoints(self) -> itkVectorContainerULLPF3
        GetPoints(self) -> itkVectorContainerULLPF3
        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF3_GetPoints(self, *args)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF3_Initialize(self)

    def FindClosestPoint(self, query):
        r"""
        FindClosestPoint(self, query) -> unsigned long long

        Parameters
        ----------
        query: itkPointF3 const &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF3_FindClosestPoint(self, query)

    def FindClosestNPoints(self, *args):
        r"""
        FindClosestNPoints(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointF3 const &
        arg1: unsigned int
        arg2: std::vector< unsigned long long,std::allocator< unsigned long long > > &

        FindClosestNPoints(self, arg0, arg1, arg2, arg3)

        Parameters
        ----------
        arg0: itkPointF3 const &
        arg1: unsigned int
        arg2: std::vector< unsigned long long,std::allocator< unsigned long long > > &
        arg3: std::vector< double,std::allocator< double > > &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF3_FindClosestNPoints(self, *args)

    def FindPointsWithinRadius(self, arg0, arg1, arg2):
        r"""
        FindPointsWithinRadius(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointF3 const &
        arg1: double
        arg2: std::vector< unsigned long long,std::allocator< unsigned long long > > &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF3_FindPointsWithinRadius(self, arg0, arg1, arg2)
    __swig_destroy__ = _itkPointsLocatorPython.delete_itkPointsLocatorVCULLPF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPointsLocatorVCULLPF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPointsLocatorVCULLPF3

        Create a new object of the class itkPointsLocatorVCULLPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointsLocatorVCULLPF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointsLocatorVCULLPF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointsLocatorVCULLPF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointsLocatorVCULLPF3 in _itkPointsLocatorPython:
_itkPointsLocatorPython.itkPointsLocatorVCULLPF3_swigregister(itkPointsLocatorVCULLPF3)

def itkPointsLocatorVCULLPF4_New():
    return itkPointsLocatorVCULLPF4.New()

class itkPointsLocatorVCULLPF4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkPointsLocatorVCULLPF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkPointsLocatorVCULLPF4_Pointer"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkPointsLocatorVCULLPF4_Pointer"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF4_Clone(self)

    def SetPoints(self, _arg):
        r"""
        SetPoints(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerULLPF4 *

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF4_SetPoints(self, _arg)

    def GetModifiablePoints(self):
        r"""GetModifiablePoints(self) -> itkVectorContainerULLPF4"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF4_GetModifiablePoints(self)

    def GetPoints(self, *args):
        r"""
        GetPoints(self) -> itkVectorContainerULLPF4
        GetPoints(self) -> itkVectorContainerULLPF4
        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF4_GetPoints(self, *args)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF4_Initialize(self)

    def FindClosestPoint(self, query):
        r"""
        FindClosestPoint(self, query) -> unsigned long long

        Parameters
        ----------
        query: itkPointF4 const &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF4_FindClosestPoint(self, query)

    def FindClosestNPoints(self, *args):
        r"""
        FindClosestNPoints(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointF4 const &
        arg1: unsigned int
        arg2: std::vector< unsigned long long,std::allocator< unsigned long long > > &

        FindClosestNPoints(self, arg0, arg1, arg2, arg3)

        Parameters
        ----------
        arg0: itkPointF4 const &
        arg1: unsigned int
        arg2: std::vector< unsigned long long,std::allocator< unsigned long long > > &
        arg3: std::vector< double,std::allocator< double > > &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF4_FindClosestNPoints(self, *args)

    def FindPointsWithinRadius(self, arg0, arg1, arg2):
        r"""
        FindPointsWithinRadius(self, arg0, arg1, arg2)

        Parameters
        ----------
        arg0: itkPointF4 const &
        arg1: double
        arg2: std::vector< unsigned long long,std::allocator< unsigned long long > > &

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF4_FindPointsWithinRadius(self, arg0, arg1, arg2)
    __swig_destroy__ = _itkPointsLocatorPython.delete_itkPointsLocatorVCULLPF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkPointsLocatorVCULLPF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkPointsLocatorPython.itkPointsLocatorVCULLPF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkPointsLocatorVCULLPF4

        Create a new object of the class itkPointsLocatorVCULLPF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointsLocatorVCULLPF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointsLocatorVCULLPF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointsLocatorVCULLPF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointsLocatorVCULLPF4 in _itkPointsLocatorPython:
_itkPointsLocatorPython.itkPointsLocatorVCULLPF4_swigregister(itkPointsLocatorVCULLPF4)

