# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKMetricsv4Python



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageToImageMetricv4Python
else:
    import _itkImageToImageMetricv4Python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.ITKCommonBasePython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSpatialObjectBasePython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkOptimizerParametersPython
import itk.itkArray2DPython
import itk.itkDiffusionTensor3DPython
import itk.itkTransformBasePython
import itk.itkSpatialObjectPropertyPython
import itk.itkRGBAPixelPython
import itk.itkBoundingBoxPython
import itk.itkMapContainerPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkPointSetPython
import itk.itkInterpolateImageFunctionPython
import itk.itkImageFunctionBasePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkFunctionBasePython
import itk.itkDisplacementFieldTransformPython
import itk.itkVectorImagePython
import itk.itkObjectToObjectMetricBasePython
import itk.itkSingleValuedCostFunctionv4Python
import itk.itkCostFunctionPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
class itkImageToImageMetricv4D2D2_Superclass(itk.itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD):
    r"""Proxy of C++ itkImageToImageMetricv4D2D2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedTransform(self, _arg):
        r"""
        SetFixedTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD22 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_SetFixedTransform(self, _arg)

    def GetModifiableFixedTransform(self):
        r"""GetModifiableFixedTransform(self) -> itkTransformD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetModifiableFixedTransform(self)

    def GetFixedTransform(self, *args):
        r"""
        GetFixedTransform(self) -> itkTransformD22
        GetFixedTransform(self) -> itkTransformD22
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetFixedTransform(self, *args)

    def SetMovingTransform(self, _arg):
        r"""
        SetMovingTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD22 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_SetMovingTransform(self, _arg)

    def GetModifiableMovingTransform(self):
        r"""GetModifiableMovingTransform(self) -> itkTransformD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetModifiableMovingTransform(self)

    def GetMovingTransform(self, *args):
        r"""
        GetMovingTransform(self) -> itkTransformD22
        GetMovingTransform(self) -> itkTransformD22
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetMovingTransform(self, *args)

    def SetTransform(self, transform):
        r"""
        SetTransform(self, transform)

        Parameters
        ----------
        transform: itkTransformD22 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_SetTransform(self, transform)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetTransform(self)

    def GetNumberOfValidPoints(self):
        r"""GetNumberOfValidPoints(self) -> unsigned long long"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetNumberOfValidPoints(self)

    def SetVirtualDomain(self, spacing, origin, direction, region):
        r"""
        SetVirtualDomain(self, spacing, origin, direction, region)

        Parameters
        ----------
        spacing: itkVectorD2 const &
        origin: itkPointD2 const &
        direction: itkMatrixD22 const &
        region: itkImageRegion2 const &

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_SetVirtualDomain(self, spacing, origin, direction, region)

    def SetVirtualDomainFromImage(self, virtualImage):
        r"""
        SetVirtualDomainFromImage(self, virtualImage)

        Parameters
        ----------
        virtualImage: itkImageD2 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_SetVirtualDomainFromImage(self, virtualImage)

    def SupportsArbitraryVirtualDomainSamples(self):
        r"""SupportsArbitraryVirtualDomainSamples(self) -> bool"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_SupportsArbitraryVirtualDomainSamples(self)

    def GetVirtualDomainTimeStamp(self):
        r"""GetVirtualDomainTimeStamp(self) -> itkTimeStamp"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetVirtualDomainTimeStamp(self)

    def GetVirtualSpacing(self):
        r"""GetVirtualSpacing(self) -> itkVectorD2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetVirtualSpacing(self)

    def GetVirtualOrigin(self):
        r"""GetVirtualOrigin(self) -> itkPointD2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetVirtualOrigin(self)

    def GetVirtualDirection(self):
        r"""GetVirtualDirection(self) -> itkMatrixD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetVirtualDirection(self)

    def GetVirtualRegion(self):
        r"""GetVirtualRegion(self) -> itkImageRegion2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetVirtualRegion(self)

    def GetModifiableVirtualImage(self):
        r"""GetModifiableVirtualImage(self) -> itkImageD2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetModifiableVirtualImage(self)

    def GetVirtualImage(self, *args):
        r"""
        GetVirtualImage(self) -> itkImageD2
        GetVirtualImage(self) -> itkImageD2
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_GetVirtualImage(self, *args)

    def ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters):
        r"""
        ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters) -> long long

        Parameters
        ----------
        index: itkIndex2 const &
        numberOfLocalParameters: unsigned int const &

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters)

    def ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters):
        r"""
        ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters) -> long long

        Parameters
        ----------
        point: itkPointD2 const &
        numberOfLocalParameters: unsigned int const &

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters)

    def IsInsideVirtualDomain(self, *args):
        r"""
        IsInsideVirtualDomain(self, point) -> bool

        Parameters
        ----------
        point: itkPointD2 const &

        IsInsideVirtualDomain(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_IsInsideVirtualDomain(self, *args)
    __swig_destroy__ = _itkImageToImageMetricv4Python.delete_itkImageToImageMetricv4D2D2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageMetricv4D2D2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_cast(obj)

# Register itkImageToImageMetricv4D2D2_Superclass in _itkImageToImageMetricv4Python:
_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_Superclass_swigregister(itkImageToImageMetricv4D2D2_Superclass)
class itkImageToImageMetricv4D3D3_Superclass(itk.itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD):
    r"""Proxy of C++ itkImageToImageMetricv4D3D3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedTransform(self, _arg):
        r"""
        SetFixedTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD33 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_SetFixedTransform(self, _arg)

    def GetModifiableFixedTransform(self):
        r"""GetModifiableFixedTransform(self) -> itkTransformD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetModifiableFixedTransform(self)

    def GetFixedTransform(self, *args):
        r"""
        GetFixedTransform(self) -> itkTransformD33
        GetFixedTransform(self) -> itkTransformD33
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetFixedTransform(self, *args)

    def SetMovingTransform(self, _arg):
        r"""
        SetMovingTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD33 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_SetMovingTransform(self, _arg)

    def GetModifiableMovingTransform(self):
        r"""GetModifiableMovingTransform(self) -> itkTransformD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetModifiableMovingTransform(self)

    def GetMovingTransform(self, *args):
        r"""
        GetMovingTransform(self) -> itkTransformD33
        GetMovingTransform(self) -> itkTransformD33
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetMovingTransform(self, *args)

    def SetTransform(self, transform):
        r"""
        SetTransform(self, transform)

        Parameters
        ----------
        transform: itkTransformD33 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_SetTransform(self, transform)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetTransform(self)

    def GetNumberOfValidPoints(self):
        r"""GetNumberOfValidPoints(self) -> unsigned long long"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetNumberOfValidPoints(self)

    def SetVirtualDomain(self, spacing, origin, direction, region):
        r"""
        SetVirtualDomain(self, spacing, origin, direction, region)

        Parameters
        ----------
        spacing: itkVectorD3 const &
        origin: itkPointD3 const &
        direction: itkMatrixD33 const &
        region: itkImageRegion3 const &

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_SetVirtualDomain(self, spacing, origin, direction, region)

    def SetVirtualDomainFromImage(self, virtualImage):
        r"""
        SetVirtualDomainFromImage(self, virtualImage)

        Parameters
        ----------
        virtualImage: itkImageD3 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_SetVirtualDomainFromImage(self, virtualImage)

    def SupportsArbitraryVirtualDomainSamples(self):
        r"""SupportsArbitraryVirtualDomainSamples(self) -> bool"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_SupportsArbitraryVirtualDomainSamples(self)

    def GetVirtualDomainTimeStamp(self):
        r"""GetVirtualDomainTimeStamp(self) -> itkTimeStamp"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetVirtualDomainTimeStamp(self)

    def GetVirtualSpacing(self):
        r"""GetVirtualSpacing(self) -> itkVectorD3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetVirtualSpacing(self)

    def GetVirtualOrigin(self):
        r"""GetVirtualOrigin(self) -> itkPointD3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetVirtualOrigin(self)

    def GetVirtualDirection(self):
        r"""GetVirtualDirection(self) -> itkMatrixD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetVirtualDirection(self)

    def GetVirtualRegion(self):
        r"""GetVirtualRegion(self) -> itkImageRegion3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetVirtualRegion(self)

    def GetModifiableVirtualImage(self):
        r"""GetModifiableVirtualImage(self) -> itkImageD3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetModifiableVirtualImage(self)

    def GetVirtualImage(self, *args):
        r"""
        GetVirtualImage(self) -> itkImageD3
        GetVirtualImage(self) -> itkImageD3
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_GetVirtualImage(self, *args)

    def ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters):
        r"""
        ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters) -> long long

        Parameters
        ----------
        index: itkIndex3 const &
        numberOfLocalParameters: unsigned int const &

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters)

    def ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters):
        r"""
        ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters) -> long long

        Parameters
        ----------
        point: itkPointD3 const &
        numberOfLocalParameters: unsigned int const &

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters)

    def IsInsideVirtualDomain(self, *args):
        r"""
        IsInsideVirtualDomain(self, point) -> bool

        Parameters
        ----------
        point: itkPointD3 const &

        IsInsideVirtualDomain(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_IsInsideVirtualDomain(self, *args)
    __swig_destroy__ = _itkImageToImageMetricv4Python.delete_itkImageToImageMetricv4D3D3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageMetricv4D3D3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_cast(obj)

# Register itkImageToImageMetricv4D3D3_Superclass in _itkImageToImageMetricv4Python:
_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_Superclass_swigregister(itkImageToImageMetricv4D3D3_Superclass)
class itkImageToImageMetricv4D4D4_Superclass(itk.itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD):
    r"""Proxy of C++ itkImageToImageMetricv4D4D4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedTransform(self, _arg):
        r"""
        SetFixedTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD44 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_Superclass_SetFixedTransform(self, _arg)

    def GetModifiableFixedTransform(self):
        r"""GetModifiableFixedTransform(self) -> itkTransformD44"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_Superclass_GetModifiableFixedTransform(self)

    def GetFixedTransform(self, *args):
        r"""
        GetFixedTransform(self) -> itkTransformD44
        GetFixedTransform(self) -> itkTransformD44
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_Superclass_GetFixedTransform(self, *args)

    def SetMovingTransform(self, _arg):
        r"""
        SetMovingTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD44 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_Superclass_SetMovingTransform(self, _arg)

    def GetModifiableMovingTransform(self):
        r"""GetModifiableMovingTransform(self) -> itkTransformD44"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_Superclass_GetModifiableMovingTransform(self)

    def GetMovingTransform(self, *args):
        r"""
        GetMovingTransform(self) -> itkTransformD44
        GetMovingTransform(self) -> itkTransformD44
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_Superclass_GetMovingTransform(self, *args)

    def SetTransform(self, transform):
        r"""
        SetTransform(self, transform)

        Parameters
        ----------
        transform: itkTransformD44 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_Superclass_SetTransform(self, transform)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformD44"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_Superclass_GetTransform(self)

    def GetNumberOfValidPoints(self):
        r"""GetNumberOfValidPoints(self) -> unsigned long long"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_Superclass_GetNumberOfValidPoints(self)

    def SetVirtualDomain(self, spacing, origin, direction, region):
        r"""
        SetVirtualDomain(self, spacing, origin, direction, region)

        Parameters
        ----------
        spacing: itkVectorD4 const &
        origin: itkPointD4 const &
        direction: itkMatrixD44 const &
        region: itkImageRegion4 const &

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_Superclass_SetVirtualDomain(self, spacing, origin, direction, region)

    def SetVirtualDomainFromImage(self, virtualImage):
        r"""
        SetVirtualDomainFromImage(self, virtualImage)

        Parameters
        ----------
        virtualImage: itkImageD4 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_Superclass_SetVirtualDomainFromImage(self, virtualImage)

    def SupportsArbitraryVirtualDomainSamples(self):
        r"""SupportsArbitraryVirtualDomainSamples(self) -> bool"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_Superclass_SupportsArbitraryVirtualDomainSamples(self)

    def GetVirtualDomainTimeStamp(self):
        r"""GetVirtualDomainTimeStamp(self) -> itkTimeStamp"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_Superclass_GetVirtualDomainTimeStamp(self)

    def GetVirtualSpacing(self):
        r"""GetVirtualSpacing(self) -> itkVectorD4"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_Superclass_GetVirtualSpacing(self)

    def GetVirtualOrigin(self):
        r"""GetVirtualOrigin(self) -> itkPointD4"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_Superclass_GetVirtualOrigin(self)

    def GetVirtualDirection(self):
        r"""GetVirtualDirection(self) -> itkMatrixD44"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_Superclass_GetVirtualDirection(self)

    def GetVirtualRegion(self):
        r"""GetVirtualRegion(self) -> itkImageRegion4"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_Superclass_GetVirtualRegion(self)

    def GetModifiableVirtualImage(self):
        r"""GetModifiableVirtualImage(self) -> itkImageD4"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_Superclass_GetModifiableVirtualImage(self)

    def GetVirtualImage(self, *args):
        r"""
        GetVirtualImage(self) -> itkImageD4
        GetVirtualImage(self) -> itkImageD4
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_Superclass_GetVirtualImage(self, *args)

    def ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters):
        r"""
        ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters) -> long long

        Parameters
        ----------
        index: itkIndex4 const &
        numberOfLocalParameters: unsigned int const &

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_Superclass_ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters)

    def ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters):
        r"""
        ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters) -> long long

        Parameters
        ----------
        point: itkPointD4 const &
        numberOfLocalParameters: unsigned int const &

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_Superclass_ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters)

    def IsInsideVirtualDomain(self, *args):
        r"""
        IsInsideVirtualDomain(self, point) -> bool

        Parameters
        ----------
        point: itkPointD4 const &

        IsInsideVirtualDomain(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_Superclass_IsInsideVirtualDomain(self, *args)
    __swig_destroy__ = _itkImageToImageMetricv4Python.delete_itkImageToImageMetricv4D4D4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageMetricv4D4D4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_Superclass_cast(obj)

# Register itkImageToImageMetricv4D4D4_Superclass in _itkImageToImageMetricv4Python:
_itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_Superclass_swigregister(itkImageToImageMetricv4D4D4_Superclass)
class itkImageToImageMetricv4F2F2_Superclass(itk.itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD):
    r"""Proxy of C++ itkImageToImageMetricv4F2F2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedTransform(self, _arg):
        r"""
        SetFixedTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD22 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_SetFixedTransform(self, _arg)

    def GetModifiableFixedTransform(self):
        r"""GetModifiableFixedTransform(self) -> itkTransformD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetModifiableFixedTransform(self)

    def GetFixedTransform(self, *args):
        r"""
        GetFixedTransform(self) -> itkTransformD22
        GetFixedTransform(self) -> itkTransformD22
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetFixedTransform(self, *args)

    def SetMovingTransform(self, _arg):
        r"""
        SetMovingTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD22 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_SetMovingTransform(self, _arg)

    def GetModifiableMovingTransform(self):
        r"""GetModifiableMovingTransform(self) -> itkTransformD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetModifiableMovingTransform(self)

    def GetMovingTransform(self, *args):
        r"""
        GetMovingTransform(self) -> itkTransformD22
        GetMovingTransform(self) -> itkTransformD22
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetMovingTransform(self, *args)

    def SetTransform(self, transform):
        r"""
        SetTransform(self, transform)

        Parameters
        ----------
        transform: itkTransformD22 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_SetTransform(self, transform)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetTransform(self)

    def GetNumberOfValidPoints(self):
        r"""GetNumberOfValidPoints(self) -> unsigned long long"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetNumberOfValidPoints(self)

    def SetVirtualDomain(self, spacing, origin, direction, region):
        r"""
        SetVirtualDomain(self, spacing, origin, direction, region)

        Parameters
        ----------
        spacing: itkVectorD2 const &
        origin: itkPointD2 const &
        direction: itkMatrixD22 const &
        region: itkImageRegion2 const &

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_SetVirtualDomain(self, spacing, origin, direction, region)

    def SetVirtualDomainFromImage(self, virtualImage):
        r"""
        SetVirtualDomainFromImage(self, virtualImage)

        Parameters
        ----------
        virtualImage: itkImageF2 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_SetVirtualDomainFromImage(self, virtualImage)

    def SupportsArbitraryVirtualDomainSamples(self):
        r"""SupportsArbitraryVirtualDomainSamples(self) -> bool"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_SupportsArbitraryVirtualDomainSamples(self)

    def GetVirtualDomainTimeStamp(self):
        r"""GetVirtualDomainTimeStamp(self) -> itkTimeStamp"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetVirtualDomainTimeStamp(self)

    def GetVirtualSpacing(self):
        r"""GetVirtualSpacing(self) -> itkVectorD2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetVirtualSpacing(self)

    def GetVirtualOrigin(self):
        r"""GetVirtualOrigin(self) -> itkPointD2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetVirtualOrigin(self)

    def GetVirtualDirection(self):
        r"""GetVirtualDirection(self) -> itkMatrixD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetVirtualDirection(self)

    def GetVirtualRegion(self):
        r"""GetVirtualRegion(self) -> itkImageRegion2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetVirtualRegion(self)

    def GetModifiableVirtualImage(self):
        r"""GetModifiableVirtualImage(self) -> itkImageF2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetModifiableVirtualImage(self)

    def GetVirtualImage(self, *args):
        r"""
        GetVirtualImage(self) -> itkImageF2
        GetVirtualImage(self) -> itkImageF2
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_GetVirtualImage(self, *args)

    def ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters):
        r"""
        ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters) -> long long

        Parameters
        ----------
        index: itkIndex2 const &
        numberOfLocalParameters: unsigned int const &

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters)

    def ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters):
        r"""
        ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters) -> long long

        Parameters
        ----------
        point: itkPointD2 const &
        numberOfLocalParameters: unsigned int const &

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters)

    def IsInsideVirtualDomain(self, *args):
        r"""
        IsInsideVirtualDomain(self, point) -> bool

        Parameters
        ----------
        point: itkPointD2 const &

        IsInsideVirtualDomain(self, index) -> bool

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_IsInsideVirtualDomain(self, *args)
    __swig_destroy__ = _itkImageToImageMetricv4Python.delete_itkImageToImageMetricv4F2F2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageMetricv4F2F2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_cast(obj)

# Register itkImageToImageMetricv4F2F2_Superclass in _itkImageToImageMetricv4Python:
_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_Superclass_swigregister(itkImageToImageMetricv4F2F2_Superclass)
class itkImageToImageMetricv4F3F3_Superclass(itk.itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD):
    r"""Proxy of C++ itkImageToImageMetricv4F3F3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedTransform(self, _arg):
        r"""
        SetFixedTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD33 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_SetFixedTransform(self, _arg)

    def GetModifiableFixedTransform(self):
        r"""GetModifiableFixedTransform(self) -> itkTransformD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetModifiableFixedTransform(self)

    def GetFixedTransform(self, *args):
        r"""
        GetFixedTransform(self) -> itkTransformD33
        GetFixedTransform(self) -> itkTransformD33
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetFixedTransform(self, *args)

    def SetMovingTransform(self, _arg):
        r"""
        SetMovingTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD33 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_SetMovingTransform(self, _arg)

    def GetModifiableMovingTransform(self):
        r"""GetModifiableMovingTransform(self) -> itkTransformD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetModifiableMovingTransform(self)

    def GetMovingTransform(self, *args):
        r"""
        GetMovingTransform(self) -> itkTransformD33
        GetMovingTransform(self) -> itkTransformD33
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetMovingTransform(self, *args)

    def SetTransform(self, transform):
        r"""
        SetTransform(self, transform)

        Parameters
        ----------
        transform: itkTransformD33 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_SetTransform(self, transform)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetTransform(self)

    def GetNumberOfValidPoints(self):
        r"""GetNumberOfValidPoints(self) -> unsigned long long"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetNumberOfValidPoints(self)

    def SetVirtualDomain(self, spacing, origin, direction, region):
        r"""
        SetVirtualDomain(self, spacing, origin, direction, region)

        Parameters
        ----------
        spacing: itkVectorD3 const &
        origin: itkPointD3 const &
        direction: itkMatrixD33 const &
        region: itkImageRegion3 const &

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_SetVirtualDomain(self, spacing, origin, direction, region)

    def SetVirtualDomainFromImage(self, virtualImage):
        r"""
        SetVirtualDomainFromImage(self, virtualImage)

        Parameters
        ----------
        virtualImage: itkImageF3 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_SetVirtualDomainFromImage(self, virtualImage)

    def SupportsArbitraryVirtualDomainSamples(self):
        r"""SupportsArbitraryVirtualDomainSamples(self) -> bool"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_SupportsArbitraryVirtualDomainSamples(self)

    def GetVirtualDomainTimeStamp(self):
        r"""GetVirtualDomainTimeStamp(self) -> itkTimeStamp"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetVirtualDomainTimeStamp(self)

    def GetVirtualSpacing(self):
        r"""GetVirtualSpacing(self) -> itkVectorD3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetVirtualSpacing(self)

    def GetVirtualOrigin(self):
        r"""GetVirtualOrigin(self) -> itkPointD3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetVirtualOrigin(self)

    def GetVirtualDirection(self):
        r"""GetVirtualDirection(self) -> itkMatrixD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetVirtualDirection(self)

    def GetVirtualRegion(self):
        r"""GetVirtualRegion(self) -> itkImageRegion3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetVirtualRegion(self)

    def GetModifiableVirtualImage(self):
        r"""GetModifiableVirtualImage(self) -> itkImageF3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetModifiableVirtualImage(self)

    def GetVirtualImage(self, *args):
        r"""
        GetVirtualImage(self) -> itkImageF3
        GetVirtualImage(self) -> itkImageF3
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_GetVirtualImage(self, *args)

    def ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters):
        r"""
        ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters) -> long long

        Parameters
        ----------
        index: itkIndex3 const &
        numberOfLocalParameters: unsigned int const &

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters)

    def ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters):
        r"""
        ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters) -> long long

        Parameters
        ----------
        point: itkPointD3 const &
        numberOfLocalParameters: unsigned int const &

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters)

    def IsInsideVirtualDomain(self, *args):
        r"""
        IsInsideVirtualDomain(self, point) -> bool

        Parameters
        ----------
        point: itkPointD3 const &

        IsInsideVirtualDomain(self, index) -> bool

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_IsInsideVirtualDomain(self, *args)
    __swig_destroy__ = _itkImageToImageMetricv4Python.delete_itkImageToImageMetricv4F3F3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageMetricv4F3F3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_cast(obj)

# Register itkImageToImageMetricv4F3F3_Superclass in _itkImageToImageMetricv4Python:
_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_Superclass_swigregister(itkImageToImageMetricv4F3F3_Superclass)
class itkImageToImageMetricv4F4F4_Superclass(itk.itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD):
    r"""Proxy of C++ itkImageToImageMetricv4F4F4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedTransform(self, _arg):
        r"""
        SetFixedTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD44 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_Superclass_SetFixedTransform(self, _arg)

    def GetModifiableFixedTransform(self):
        r"""GetModifiableFixedTransform(self) -> itkTransformD44"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_Superclass_GetModifiableFixedTransform(self)

    def GetFixedTransform(self, *args):
        r"""
        GetFixedTransform(self) -> itkTransformD44
        GetFixedTransform(self) -> itkTransformD44
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_Superclass_GetFixedTransform(self, *args)

    def SetMovingTransform(self, _arg):
        r"""
        SetMovingTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD44 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_Superclass_SetMovingTransform(self, _arg)

    def GetModifiableMovingTransform(self):
        r"""GetModifiableMovingTransform(self) -> itkTransformD44"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_Superclass_GetModifiableMovingTransform(self)

    def GetMovingTransform(self, *args):
        r"""
        GetMovingTransform(self) -> itkTransformD44
        GetMovingTransform(self) -> itkTransformD44
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_Superclass_GetMovingTransform(self, *args)

    def SetTransform(self, transform):
        r"""
        SetTransform(self, transform)

        Parameters
        ----------
        transform: itkTransformD44 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_Superclass_SetTransform(self, transform)

    def GetTransform(self):
        r"""GetTransform(self) -> itkTransformD44"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_Superclass_GetTransform(self)

    def GetNumberOfValidPoints(self):
        r"""GetNumberOfValidPoints(self) -> unsigned long long"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_Superclass_GetNumberOfValidPoints(self)

    def SetVirtualDomain(self, spacing, origin, direction, region):
        r"""
        SetVirtualDomain(self, spacing, origin, direction, region)

        Parameters
        ----------
        spacing: itkVectorD4 const &
        origin: itkPointD4 const &
        direction: itkMatrixD44 const &
        region: itkImageRegion4 const &

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_Superclass_SetVirtualDomain(self, spacing, origin, direction, region)

    def SetVirtualDomainFromImage(self, virtualImage):
        r"""
        SetVirtualDomainFromImage(self, virtualImage)

        Parameters
        ----------
        virtualImage: itkImageF4 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_Superclass_SetVirtualDomainFromImage(self, virtualImage)

    def SupportsArbitraryVirtualDomainSamples(self):
        r"""SupportsArbitraryVirtualDomainSamples(self) -> bool"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_Superclass_SupportsArbitraryVirtualDomainSamples(self)

    def GetVirtualDomainTimeStamp(self):
        r"""GetVirtualDomainTimeStamp(self) -> itkTimeStamp"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_Superclass_GetVirtualDomainTimeStamp(self)

    def GetVirtualSpacing(self):
        r"""GetVirtualSpacing(self) -> itkVectorD4"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_Superclass_GetVirtualSpacing(self)

    def GetVirtualOrigin(self):
        r"""GetVirtualOrigin(self) -> itkPointD4"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_Superclass_GetVirtualOrigin(self)

    def GetVirtualDirection(self):
        r"""GetVirtualDirection(self) -> itkMatrixD44"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_Superclass_GetVirtualDirection(self)

    def GetVirtualRegion(self):
        r"""GetVirtualRegion(self) -> itkImageRegion4"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_Superclass_GetVirtualRegion(self)

    def GetModifiableVirtualImage(self):
        r"""GetModifiableVirtualImage(self) -> itkImageF4"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_Superclass_GetModifiableVirtualImage(self)

    def GetVirtualImage(self, *args):
        r"""
        GetVirtualImage(self) -> itkImageF4
        GetVirtualImage(self) -> itkImageF4
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_Superclass_GetVirtualImage(self, *args)

    def ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters):
        r"""
        ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters) -> long long

        Parameters
        ----------
        index: itkIndex4 const &
        numberOfLocalParameters: unsigned int const &

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_Superclass_ComputeParameterOffsetFromVirtualIndex(self, index, numberOfLocalParameters)

    def ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters):
        r"""
        ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters) -> long long

        Parameters
        ----------
        point: itkPointD4 const &
        numberOfLocalParameters: unsigned int const &

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_Superclass_ComputeParameterOffsetFromVirtualPoint(self, point, numberOfLocalParameters)

    def IsInsideVirtualDomain(self, *args):
        r"""
        IsInsideVirtualDomain(self, point) -> bool

        Parameters
        ----------
        point: itkPointD4 const &

        IsInsideVirtualDomain(self, index) -> bool

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_Superclass_IsInsideVirtualDomain(self, *args)
    __swig_destroy__ = _itkImageToImageMetricv4Python.delete_itkImageToImageMetricv4F4F4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageMetricv4F4F4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_Superclass_cast(obj)

# Register itkImageToImageMetricv4F4F4_Superclass in _itkImageToImageMetricv4Python:
_itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_Superclass_swigregister(itkImageToImageMetricv4F4F4_Superclass)
class itkImageToImageMetricv4D2D2(itkImageToImageMetricv4D2D2_Superclass):
    r"""Proxy of C++ itkImageToImageMetricv4D2D2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedImage(self, _arg):
        r"""
        SetFixedImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageD2 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetFixedImage(self, _arg)

    def GetFixedImage(self):
        r"""GetFixedImage(self) -> itkImageD2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetFixedImage(self)

    def SetMovingImage(self, _arg):
        r"""
        SetMovingImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageD2 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetMovingImage(self, _arg)

    def GetMovingImage(self):
        r"""GetMovingImage(self) -> itkImageD2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetMovingImage(self)

    def SetFixedInterpolator(self, _arg):
        r"""
        SetFixedInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionID2D *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetFixedInterpolator(self, _arg)

    def GetModifiableFixedInterpolator(self):
        r"""GetModifiableFixedInterpolator(self) -> itkInterpolateImageFunctionID2D"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetModifiableFixedInterpolator(self)

    def GetFixedInterpolator(self, *args):
        r"""
        GetFixedInterpolator(self) -> itkInterpolateImageFunctionID2D
        GetFixedInterpolator(self) -> itkInterpolateImageFunctionID2D
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetFixedInterpolator(self, *args)

    def SetMovingInterpolator(self, _arg):
        r"""
        SetMovingInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionID2D *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetMovingInterpolator(self, _arg)

    def GetModifiableMovingInterpolator(self):
        r"""GetModifiableMovingInterpolator(self) -> itkInterpolateImageFunctionID2D"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetModifiableMovingInterpolator(self)

    def GetMovingInterpolator(self, *args):
        r"""
        GetMovingInterpolator(self) -> itkInterpolateImageFunctionID2D
        GetMovingInterpolator(self) -> itkInterpolateImageFunctionID2D
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetMovingInterpolator(self, *args)

    def SetMovingImageMask(self, *args):
        r"""
        SetMovingImageMask(self, arg)

        Parameters
        ----------
        arg: itkSpatialObject2 *const

        SetMovingImageMask(self, _arg)

        Parameters
        ----------
        _arg: itkSpatialObject2 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetMovingImageMask(self, *args)

    def GetMovingImageMask(self):
        r"""GetMovingImageMask(self) -> itkSpatialObject2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetMovingImageMask(self)

    def SetFixedImageMask(self, *args):
        r"""
        SetFixedImageMask(self, arg)

        Parameters
        ----------
        arg: itkSpatialObject2 *const

        SetFixedImageMask(self, _arg)

        Parameters
        ----------
        _arg: itkSpatialObject2 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetFixedImageMask(self, *args)

    def GetFixedImageMask(self):
        r"""GetFixedImageMask(self) -> itkSpatialObject2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetFixedImageMask(self)

    def SetFixedSampledPointSet(self, *args):
        r"""
        SetFixedSampledPointSet(self, arg)

        Parameters
        ----------
        arg: itkPointSetD2 *const

        SetFixedSampledPointSet(self, _arg)

        Parameters
        ----------
        _arg: itkPointSetD2 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetFixedSampledPointSet(self, *args)

    def GetFixedSampledPointSet(self):
        r"""GetFixedSampledPointSet(self) -> itkPointSetD2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetFixedSampledPointSet(self)

    def SetVirtualSampledPointSet(self, _arg):
        r"""
        SetVirtualSampledPointSet(self, _arg)

        Parameters
        ----------
        _arg: itkPointSetD2 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetVirtualSampledPointSet(self, _arg)

    def GetVirtualSampledPointSet(self):
        r"""GetVirtualSampledPointSet(self) -> itkPointSetD2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetVirtualSampledPointSet(self)

    def SetUseSampledPointSet(self, _arg):
        r"""
        SetUseSampledPointSet(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetUseSampledPointSet(self, _arg)

    def GetUseSampledPointSet(self):
        r"""GetUseSampledPointSet(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetUseSampledPointSet(self)

    def UseSampledPointSetOn(self):
        r"""UseSampledPointSetOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseSampledPointSetOn(self)

    def UseSampledPointSetOff(self):
        r"""UseSampledPointSetOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseSampledPointSetOff(self)

    def SetUseVirtualSampledPointSet(self, _arg):
        r"""
        SetUseVirtualSampledPointSet(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetUseVirtualSampledPointSet(self, _arg)

    def GetUseVirtualSampledPointSet(self):
        r"""GetUseVirtualSampledPointSet(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetUseVirtualSampledPointSet(self)

    def UseVirtualSampledPointSetOn(self):
        r"""UseVirtualSampledPointSetOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseVirtualSampledPointSetOn(self)

    def UseVirtualSampledPointSetOff(self):
        r"""UseVirtualSampledPointSetOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseVirtualSampledPointSetOff(self)

    def SetFixedImageGradientFilter(self, _arg):
        r"""
        SetFixedImageGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageFilterID2ICVD22 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetFixedImageGradientFilter(self, _arg)

    def GetModifiableFixedImageGradientFilter(self):
        r"""GetModifiableFixedImageGradientFilter(self) -> itkImageToImageFilterID2ICVD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetModifiableFixedImageGradientFilter(self)

    def GetFixedImageGradientFilter(self, *args):
        r"""
        GetFixedImageGradientFilter(self) -> itkImageToImageFilterID2ICVD22
        GetFixedImageGradientFilter(self) -> itkImageToImageFilterID2ICVD22
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetFixedImageGradientFilter(self, *args)

    def SetMovingImageGradientFilter(self, _arg):
        r"""
        SetMovingImageGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageFilterID2ICVD22 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetMovingImageGradientFilter(self, _arg)

    def GetModifiableMovingImageGradientFilter(self):
        r"""GetModifiableMovingImageGradientFilter(self) -> itkImageToImageFilterID2ICVD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetModifiableMovingImageGradientFilter(self)

    def GetMovingImageGradientFilter(self, *args):
        r"""
        GetMovingImageGradientFilter(self) -> itkImageToImageFilterID2ICVD22
        GetMovingImageGradientFilter(self) -> itkImageToImageFilterID2ICVD22
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetMovingImageGradientFilter(self, *args)

    def SetFixedImageGradientCalculator(self, _arg):
        r"""
        SetFixedImageGradientCalculator(self, _arg)

        Parameters
        ----------
        _arg: itk::ImageFunction< itk::Image< double >,itk::CovariantVector< double,2 >,double > *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetFixedImageGradientCalculator(self, _arg)

    def GetModifiableFixedImageGradientCalculator(self):
        r"""GetModifiableFixedImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< double >,itk::CovariantVector< double,2 >,double > *"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetModifiableFixedImageGradientCalculator(self)

    def GetFixedImageGradientCalculator(self, *args):
        r"""
        GetFixedImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< double >,itk::CovariantVector< double,2 >,double > const
        GetFixedImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< double >,itk::CovariantVector< double,2 >,double > *
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetFixedImageGradientCalculator(self, *args)

    def SetMovingImageGradientCalculator(self, _arg):
        r"""
        SetMovingImageGradientCalculator(self, _arg)

        Parameters
        ----------
        _arg: itk::ImageFunction< itk::Image< double >,itk::CovariantVector< double,2 >,double > *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetMovingImageGradientCalculator(self, _arg)

    def GetModifiableMovingImageGradientCalculator(self):
        r"""GetModifiableMovingImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< double >,itk::CovariantVector< double,2 >,double > *"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetModifiableMovingImageGradientCalculator(self)

    def GetMovingImageGradientCalculator(self, *args):
        r"""
        GetMovingImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< double >,itk::CovariantVector< double,2 >,double > const
        GetMovingImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< double >,itk::CovariantVector< double,2 >,double > *
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetMovingImageGradientCalculator(self, *args)

    def SetUseFixedImageGradientFilter(self, _arg):
        r"""
        SetUseFixedImageGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetUseFixedImageGradientFilter(self, _arg)

    def GetUseFixedImageGradientFilter(self):
        r"""GetUseFixedImageGradientFilter(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetUseFixedImageGradientFilter(self)

    def UseFixedImageGradientFilterOn(self):
        r"""UseFixedImageGradientFilterOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseFixedImageGradientFilterOn(self)

    def UseFixedImageGradientFilterOff(self):
        r"""UseFixedImageGradientFilterOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseFixedImageGradientFilterOff(self)

    def SetUseMovingImageGradientFilter(self, _arg):
        r"""
        SetUseMovingImageGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetUseMovingImageGradientFilter(self, _arg)

    def GetUseMovingImageGradientFilter(self):
        r"""GetUseMovingImageGradientFilter(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetUseMovingImageGradientFilter(self)

    def UseMovingImageGradientFilterOn(self):
        r"""UseMovingImageGradientFilterOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseMovingImageGradientFilterOn(self)

    def UseMovingImageGradientFilterOff(self):
        r"""UseMovingImageGradientFilterOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseMovingImageGradientFilterOff(self)

    def GetNumberOfWorkUnitsUsed(self):
        r"""GetNumberOfWorkUnitsUsed(self) -> unsigned int"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetNumberOfWorkUnitsUsed(self)

    def SetMaximumNumberOfWorkUnits(self, number):
        r"""
        SetMaximumNumberOfWorkUnits(self, number)

        Parameters
        ----------
        number: unsigned int const

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetMaximumNumberOfWorkUnits(self, number)

    def GetMaximumNumberOfWorkUnits(self):
        r"""GetMaximumNumberOfWorkUnits(self) -> unsigned int"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetMaximumNumberOfWorkUnits(self)

    def FinalizeThread(self, arg0):
        r"""
        FinalizeThread(self, arg0)

        Parameters
        ----------
        arg0: unsigned int const

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_FinalizeThread(self, arg0)

    def GetModifiableFixedImageGradientImage(self):
        r"""GetModifiableFixedImageGradientImage(self) -> itkImageCVD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetModifiableFixedImageGradientImage(self)

    def GetFixedImageGradientImage(self, *args):
        r"""
        GetFixedImageGradientImage(self) -> itkImageCVD22
        GetFixedImageGradientImage(self) -> itkImageCVD22
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetFixedImageGradientImage(self, *args)

    def GetModifiableMovingImageGradientImage(self):
        r"""GetModifiableMovingImageGradientImage(self) -> itkImageCVD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetModifiableMovingImageGradientImage(self)

    def GetMovingImageGradientImage(self, *args):
        r"""
        GetMovingImageGradientImage(self) -> itkImageCVD22
        GetMovingImageGradientImage(self) -> itkImageCVD22
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetMovingImageGradientImage(self, *args)

    def GetNumberOfDomainPoints(self):
        r"""GetNumberOfDomainPoints(self) -> unsigned long long"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetNumberOfDomainPoints(self)

    def SetUseFloatingPointCorrection(self, _arg):
        r"""
        SetUseFloatingPointCorrection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetUseFloatingPointCorrection(self, _arg)

    def GetUseFloatingPointCorrection(self):
        r"""GetUseFloatingPointCorrection(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetUseFloatingPointCorrection(self)

    def UseFloatingPointCorrectionOn(self):
        r"""UseFloatingPointCorrectionOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseFloatingPointCorrectionOn(self)

    def UseFloatingPointCorrectionOff(self):
        r"""UseFloatingPointCorrectionOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_UseFloatingPointCorrectionOff(self)

    def SetFloatingPointCorrectionResolution(self, _arg):
        r"""
        SetFloatingPointCorrectionResolution(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_SetFloatingPointCorrectionResolution(self, _arg)

    def GetFloatingPointCorrectionResolution(self):
        r"""GetFloatingPointCorrectionResolution(self) -> double"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetFloatingPointCorrectionResolution(self)

    def GetNumberOfSkippedFixedSampledPoints(self):
        r"""GetNumberOfSkippedFixedSampledPoints(self) -> unsigned long long const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_GetNumberOfSkippedFixedSampledPoints(self)
    __swig_destroy__ = _itkImageToImageMetricv4Python.delete_itkImageToImageMetricv4D2D2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageMetricv4D2D2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_cast(obj)

# Register itkImageToImageMetricv4D2D2 in _itkImageToImageMetricv4Python:
_itkImageToImageMetricv4Python.itkImageToImageMetricv4D2D2_swigregister(itkImageToImageMetricv4D2D2)
class itkImageToImageMetricv4D3D3(itkImageToImageMetricv4D3D3_Superclass):
    r"""Proxy of C++ itkImageToImageMetricv4D3D3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedImage(self, _arg):
        r"""
        SetFixedImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageD3 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetFixedImage(self, _arg)

    def GetFixedImage(self):
        r"""GetFixedImage(self) -> itkImageD3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetFixedImage(self)

    def SetMovingImage(self, _arg):
        r"""
        SetMovingImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageD3 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetMovingImage(self, _arg)

    def GetMovingImage(self):
        r"""GetMovingImage(self) -> itkImageD3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetMovingImage(self)

    def SetFixedInterpolator(self, _arg):
        r"""
        SetFixedInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionID3D *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetFixedInterpolator(self, _arg)

    def GetModifiableFixedInterpolator(self):
        r"""GetModifiableFixedInterpolator(self) -> itkInterpolateImageFunctionID3D"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetModifiableFixedInterpolator(self)

    def GetFixedInterpolator(self, *args):
        r"""
        GetFixedInterpolator(self) -> itkInterpolateImageFunctionID3D
        GetFixedInterpolator(self) -> itkInterpolateImageFunctionID3D
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetFixedInterpolator(self, *args)

    def SetMovingInterpolator(self, _arg):
        r"""
        SetMovingInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionID3D *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetMovingInterpolator(self, _arg)

    def GetModifiableMovingInterpolator(self):
        r"""GetModifiableMovingInterpolator(self) -> itkInterpolateImageFunctionID3D"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetModifiableMovingInterpolator(self)

    def GetMovingInterpolator(self, *args):
        r"""
        GetMovingInterpolator(self) -> itkInterpolateImageFunctionID3D
        GetMovingInterpolator(self) -> itkInterpolateImageFunctionID3D
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetMovingInterpolator(self, *args)

    def SetMovingImageMask(self, *args):
        r"""
        SetMovingImageMask(self, arg)

        Parameters
        ----------
        arg: itkSpatialObject3 *const

        SetMovingImageMask(self, _arg)

        Parameters
        ----------
        _arg: itkSpatialObject3 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetMovingImageMask(self, *args)

    def GetMovingImageMask(self):
        r"""GetMovingImageMask(self) -> itkSpatialObject3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetMovingImageMask(self)

    def SetFixedImageMask(self, *args):
        r"""
        SetFixedImageMask(self, arg)

        Parameters
        ----------
        arg: itkSpatialObject3 *const

        SetFixedImageMask(self, _arg)

        Parameters
        ----------
        _arg: itkSpatialObject3 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetFixedImageMask(self, *args)

    def GetFixedImageMask(self):
        r"""GetFixedImageMask(self) -> itkSpatialObject3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetFixedImageMask(self)

    def SetFixedSampledPointSet(self, *args):
        r"""
        SetFixedSampledPointSet(self, arg)

        Parameters
        ----------
        arg: itkPointSetD3 *const

        SetFixedSampledPointSet(self, _arg)

        Parameters
        ----------
        _arg: itkPointSetD3 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetFixedSampledPointSet(self, *args)

    def GetFixedSampledPointSet(self):
        r"""GetFixedSampledPointSet(self) -> itkPointSetD3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetFixedSampledPointSet(self)

    def SetVirtualSampledPointSet(self, _arg):
        r"""
        SetVirtualSampledPointSet(self, _arg)

        Parameters
        ----------
        _arg: itkPointSetD3 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetVirtualSampledPointSet(self, _arg)

    def GetVirtualSampledPointSet(self):
        r"""GetVirtualSampledPointSet(self) -> itkPointSetD3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetVirtualSampledPointSet(self)

    def SetUseSampledPointSet(self, _arg):
        r"""
        SetUseSampledPointSet(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetUseSampledPointSet(self, _arg)

    def GetUseSampledPointSet(self):
        r"""GetUseSampledPointSet(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetUseSampledPointSet(self)

    def UseSampledPointSetOn(self):
        r"""UseSampledPointSetOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseSampledPointSetOn(self)

    def UseSampledPointSetOff(self):
        r"""UseSampledPointSetOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseSampledPointSetOff(self)

    def SetUseVirtualSampledPointSet(self, _arg):
        r"""
        SetUseVirtualSampledPointSet(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetUseVirtualSampledPointSet(self, _arg)

    def GetUseVirtualSampledPointSet(self):
        r"""GetUseVirtualSampledPointSet(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetUseVirtualSampledPointSet(self)

    def UseVirtualSampledPointSetOn(self):
        r"""UseVirtualSampledPointSetOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseVirtualSampledPointSetOn(self)

    def UseVirtualSampledPointSetOff(self):
        r"""UseVirtualSampledPointSetOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseVirtualSampledPointSetOff(self)

    def SetFixedImageGradientFilter(self, _arg):
        r"""
        SetFixedImageGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageFilterID3ICVD33 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetFixedImageGradientFilter(self, _arg)

    def GetModifiableFixedImageGradientFilter(self):
        r"""GetModifiableFixedImageGradientFilter(self) -> itkImageToImageFilterID3ICVD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetModifiableFixedImageGradientFilter(self)

    def GetFixedImageGradientFilter(self, *args):
        r"""
        GetFixedImageGradientFilter(self) -> itkImageToImageFilterID3ICVD33
        GetFixedImageGradientFilter(self) -> itkImageToImageFilterID3ICVD33
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetFixedImageGradientFilter(self, *args)

    def SetMovingImageGradientFilter(self, _arg):
        r"""
        SetMovingImageGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageFilterID3ICVD33 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetMovingImageGradientFilter(self, _arg)

    def GetModifiableMovingImageGradientFilter(self):
        r"""GetModifiableMovingImageGradientFilter(self) -> itkImageToImageFilterID3ICVD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetModifiableMovingImageGradientFilter(self)

    def GetMovingImageGradientFilter(self, *args):
        r"""
        GetMovingImageGradientFilter(self) -> itkImageToImageFilterID3ICVD33
        GetMovingImageGradientFilter(self) -> itkImageToImageFilterID3ICVD33
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetMovingImageGradientFilter(self, *args)

    def SetFixedImageGradientCalculator(self, _arg):
        r"""
        SetFixedImageGradientCalculator(self, _arg)

        Parameters
        ----------
        _arg: itk::ImageFunction< itk::Image< double,3 >,itk::CovariantVector< double >,double > *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetFixedImageGradientCalculator(self, _arg)

    def GetModifiableFixedImageGradientCalculator(self):
        r"""GetModifiableFixedImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< double,3 >,itk::CovariantVector< double >,double > *"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetModifiableFixedImageGradientCalculator(self)

    def GetFixedImageGradientCalculator(self, *args):
        r"""
        GetFixedImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< double,3 >,itk::CovariantVector< double >,double > const
        GetFixedImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< double,3 >,itk::CovariantVector< double >,double > *
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetFixedImageGradientCalculator(self, *args)

    def SetMovingImageGradientCalculator(self, _arg):
        r"""
        SetMovingImageGradientCalculator(self, _arg)

        Parameters
        ----------
        _arg: itk::ImageFunction< itk::Image< double,3 >,itk::CovariantVector< double >,double > *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetMovingImageGradientCalculator(self, _arg)

    def GetModifiableMovingImageGradientCalculator(self):
        r"""GetModifiableMovingImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< double,3 >,itk::CovariantVector< double >,double > *"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetModifiableMovingImageGradientCalculator(self)

    def GetMovingImageGradientCalculator(self, *args):
        r"""
        GetMovingImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< double,3 >,itk::CovariantVector< double >,double > const
        GetMovingImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< double,3 >,itk::CovariantVector< double >,double > *
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetMovingImageGradientCalculator(self, *args)

    def SetUseFixedImageGradientFilter(self, _arg):
        r"""
        SetUseFixedImageGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetUseFixedImageGradientFilter(self, _arg)

    def GetUseFixedImageGradientFilter(self):
        r"""GetUseFixedImageGradientFilter(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetUseFixedImageGradientFilter(self)

    def UseFixedImageGradientFilterOn(self):
        r"""UseFixedImageGradientFilterOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseFixedImageGradientFilterOn(self)

    def UseFixedImageGradientFilterOff(self):
        r"""UseFixedImageGradientFilterOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseFixedImageGradientFilterOff(self)

    def SetUseMovingImageGradientFilter(self, _arg):
        r"""
        SetUseMovingImageGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetUseMovingImageGradientFilter(self, _arg)

    def GetUseMovingImageGradientFilter(self):
        r"""GetUseMovingImageGradientFilter(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetUseMovingImageGradientFilter(self)

    def UseMovingImageGradientFilterOn(self):
        r"""UseMovingImageGradientFilterOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseMovingImageGradientFilterOn(self)

    def UseMovingImageGradientFilterOff(self):
        r"""UseMovingImageGradientFilterOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseMovingImageGradientFilterOff(self)

    def GetNumberOfWorkUnitsUsed(self):
        r"""GetNumberOfWorkUnitsUsed(self) -> unsigned int"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetNumberOfWorkUnitsUsed(self)

    def SetMaximumNumberOfWorkUnits(self, number):
        r"""
        SetMaximumNumberOfWorkUnits(self, number)

        Parameters
        ----------
        number: unsigned int const

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetMaximumNumberOfWorkUnits(self, number)

    def GetMaximumNumberOfWorkUnits(self):
        r"""GetMaximumNumberOfWorkUnits(self) -> unsigned int"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetMaximumNumberOfWorkUnits(self)

    def FinalizeThread(self, arg0):
        r"""
        FinalizeThread(self, arg0)

        Parameters
        ----------
        arg0: unsigned int const

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_FinalizeThread(self, arg0)

    def GetModifiableFixedImageGradientImage(self):
        r"""GetModifiableFixedImageGradientImage(self) -> itkImageCVD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetModifiableFixedImageGradientImage(self)

    def GetFixedImageGradientImage(self, *args):
        r"""
        GetFixedImageGradientImage(self) -> itkImageCVD33
        GetFixedImageGradientImage(self) -> itkImageCVD33
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetFixedImageGradientImage(self, *args)

    def GetModifiableMovingImageGradientImage(self):
        r"""GetModifiableMovingImageGradientImage(self) -> itkImageCVD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetModifiableMovingImageGradientImage(self)

    def GetMovingImageGradientImage(self, *args):
        r"""
        GetMovingImageGradientImage(self) -> itkImageCVD33
        GetMovingImageGradientImage(self) -> itkImageCVD33
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetMovingImageGradientImage(self, *args)

    def GetNumberOfDomainPoints(self):
        r"""GetNumberOfDomainPoints(self) -> unsigned long long"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetNumberOfDomainPoints(self)

    def SetUseFloatingPointCorrection(self, _arg):
        r"""
        SetUseFloatingPointCorrection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetUseFloatingPointCorrection(self, _arg)

    def GetUseFloatingPointCorrection(self):
        r"""GetUseFloatingPointCorrection(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetUseFloatingPointCorrection(self)

    def UseFloatingPointCorrectionOn(self):
        r"""UseFloatingPointCorrectionOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseFloatingPointCorrectionOn(self)

    def UseFloatingPointCorrectionOff(self):
        r"""UseFloatingPointCorrectionOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_UseFloatingPointCorrectionOff(self)

    def SetFloatingPointCorrectionResolution(self, _arg):
        r"""
        SetFloatingPointCorrectionResolution(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_SetFloatingPointCorrectionResolution(self, _arg)

    def GetFloatingPointCorrectionResolution(self):
        r"""GetFloatingPointCorrectionResolution(self) -> double"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetFloatingPointCorrectionResolution(self)

    def GetNumberOfSkippedFixedSampledPoints(self):
        r"""GetNumberOfSkippedFixedSampledPoints(self) -> unsigned long long const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_GetNumberOfSkippedFixedSampledPoints(self)
    __swig_destroy__ = _itkImageToImageMetricv4Python.delete_itkImageToImageMetricv4D3D3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageMetricv4D3D3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_cast(obj)

# Register itkImageToImageMetricv4D3D3 in _itkImageToImageMetricv4Python:
_itkImageToImageMetricv4Python.itkImageToImageMetricv4D3D3_swigregister(itkImageToImageMetricv4D3D3)
class itkImageToImageMetricv4D4D4(itkImageToImageMetricv4D4D4_Superclass):
    r"""Proxy of C++ itkImageToImageMetricv4D4D4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedImage(self, _arg):
        r"""
        SetFixedImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageD4 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_SetFixedImage(self, _arg)

    def GetFixedImage(self):
        r"""GetFixedImage(self) -> itkImageD4"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetFixedImage(self)

    def SetMovingImage(self, _arg):
        r"""
        SetMovingImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageD4 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_SetMovingImage(self, _arg)

    def GetMovingImage(self):
        r"""GetMovingImage(self) -> itkImageD4"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetMovingImage(self)

    def SetFixedInterpolator(self, _arg):
        r"""
        SetFixedInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionID4D *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_SetFixedInterpolator(self, _arg)

    def GetModifiableFixedInterpolator(self):
        r"""GetModifiableFixedInterpolator(self) -> itkInterpolateImageFunctionID4D"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetModifiableFixedInterpolator(self)

    def GetFixedInterpolator(self, *args):
        r"""
        GetFixedInterpolator(self) -> itkInterpolateImageFunctionID4D
        GetFixedInterpolator(self) -> itkInterpolateImageFunctionID4D
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetFixedInterpolator(self, *args)

    def SetMovingInterpolator(self, _arg):
        r"""
        SetMovingInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionID4D *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_SetMovingInterpolator(self, _arg)

    def GetModifiableMovingInterpolator(self):
        r"""GetModifiableMovingInterpolator(self) -> itkInterpolateImageFunctionID4D"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetModifiableMovingInterpolator(self)

    def GetMovingInterpolator(self, *args):
        r"""
        GetMovingInterpolator(self) -> itkInterpolateImageFunctionID4D
        GetMovingInterpolator(self) -> itkInterpolateImageFunctionID4D
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetMovingInterpolator(self, *args)

    def SetMovingImageMask(self, *args):
        r"""
        SetMovingImageMask(self, arg)

        Parameters
        ----------
        arg: itkSpatialObject4 *const

        SetMovingImageMask(self, _arg)

        Parameters
        ----------
        _arg: itkSpatialObject4 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_SetMovingImageMask(self, *args)

    def GetMovingImageMask(self):
        r"""GetMovingImageMask(self) -> itkSpatialObject4"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetMovingImageMask(self)

    def SetFixedImageMask(self, *args):
        r"""
        SetFixedImageMask(self, arg)

        Parameters
        ----------
        arg: itkSpatialObject4 *const

        SetFixedImageMask(self, _arg)

        Parameters
        ----------
        _arg: itkSpatialObject4 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_SetFixedImageMask(self, *args)

    def GetFixedImageMask(self):
        r"""GetFixedImageMask(self) -> itkSpatialObject4"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetFixedImageMask(self)

    def SetFixedSampledPointSet(self, *args):
        r"""
        SetFixedSampledPointSet(self, arg)

        Parameters
        ----------
        arg: itkPointSetD4 *const

        SetFixedSampledPointSet(self, _arg)

        Parameters
        ----------
        _arg: itkPointSetD4 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_SetFixedSampledPointSet(self, *args)

    def GetFixedSampledPointSet(self):
        r"""GetFixedSampledPointSet(self) -> itkPointSetD4"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetFixedSampledPointSet(self)

    def SetVirtualSampledPointSet(self, _arg):
        r"""
        SetVirtualSampledPointSet(self, _arg)

        Parameters
        ----------
        _arg: itkPointSetD4 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_SetVirtualSampledPointSet(self, _arg)

    def GetVirtualSampledPointSet(self):
        r"""GetVirtualSampledPointSet(self) -> itkPointSetD4"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetVirtualSampledPointSet(self)

    def SetUseSampledPointSet(self, _arg):
        r"""
        SetUseSampledPointSet(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_SetUseSampledPointSet(self, _arg)

    def GetUseSampledPointSet(self):
        r"""GetUseSampledPointSet(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetUseSampledPointSet(self)

    def UseSampledPointSetOn(self):
        r"""UseSampledPointSetOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_UseSampledPointSetOn(self)

    def UseSampledPointSetOff(self):
        r"""UseSampledPointSetOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_UseSampledPointSetOff(self)

    def SetUseVirtualSampledPointSet(self, _arg):
        r"""
        SetUseVirtualSampledPointSet(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_SetUseVirtualSampledPointSet(self, _arg)

    def GetUseVirtualSampledPointSet(self):
        r"""GetUseVirtualSampledPointSet(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetUseVirtualSampledPointSet(self)

    def UseVirtualSampledPointSetOn(self):
        r"""UseVirtualSampledPointSetOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_UseVirtualSampledPointSetOn(self)

    def UseVirtualSampledPointSetOff(self):
        r"""UseVirtualSampledPointSetOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_UseVirtualSampledPointSetOff(self)

    def SetFixedImageGradientFilter(self, _arg):
        r"""
        SetFixedImageGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageFilterID4ICVD44 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_SetFixedImageGradientFilter(self, _arg)

    def GetModifiableFixedImageGradientFilter(self):
        r"""GetModifiableFixedImageGradientFilter(self) -> itkImageToImageFilterID4ICVD44"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetModifiableFixedImageGradientFilter(self)

    def GetFixedImageGradientFilter(self, *args):
        r"""
        GetFixedImageGradientFilter(self) -> itkImageToImageFilterID4ICVD44
        GetFixedImageGradientFilter(self) -> itkImageToImageFilterID4ICVD44
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetFixedImageGradientFilter(self, *args)

    def SetMovingImageGradientFilter(self, _arg):
        r"""
        SetMovingImageGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageFilterID4ICVD44 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_SetMovingImageGradientFilter(self, _arg)

    def GetModifiableMovingImageGradientFilter(self):
        r"""GetModifiableMovingImageGradientFilter(self) -> itkImageToImageFilterID4ICVD44"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetModifiableMovingImageGradientFilter(self)

    def GetMovingImageGradientFilter(self, *args):
        r"""
        GetMovingImageGradientFilter(self) -> itkImageToImageFilterID4ICVD44
        GetMovingImageGradientFilter(self) -> itkImageToImageFilterID4ICVD44
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetMovingImageGradientFilter(self, *args)

    def SetFixedImageGradientCalculator(self, _arg):
        r"""
        SetFixedImageGradientCalculator(self, _arg)

        Parameters
        ----------
        _arg: itk::ImageFunction< itk::Image< double,4 >,itk::CovariantVector< double,4 >,double > *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_SetFixedImageGradientCalculator(self, _arg)

    def GetModifiableFixedImageGradientCalculator(self):
        r"""GetModifiableFixedImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< double,4 >,itk::CovariantVector< double,4 >,double > *"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetModifiableFixedImageGradientCalculator(self)

    def GetFixedImageGradientCalculator(self, *args):
        r"""
        GetFixedImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< double,4 >,itk::CovariantVector< double,4 >,double > const
        GetFixedImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< double,4 >,itk::CovariantVector< double,4 >,double > *
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetFixedImageGradientCalculator(self, *args)

    def SetMovingImageGradientCalculator(self, _arg):
        r"""
        SetMovingImageGradientCalculator(self, _arg)

        Parameters
        ----------
        _arg: itk::ImageFunction< itk::Image< double,4 >,itk::CovariantVector< double,4 >,double > *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_SetMovingImageGradientCalculator(self, _arg)

    def GetModifiableMovingImageGradientCalculator(self):
        r"""GetModifiableMovingImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< double,4 >,itk::CovariantVector< double,4 >,double > *"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetModifiableMovingImageGradientCalculator(self)

    def GetMovingImageGradientCalculator(self, *args):
        r"""
        GetMovingImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< double,4 >,itk::CovariantVector< double,4 >,double > const
        GetMovingImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< double,4 >,itk::CovariantVector< double,4 >,double > *
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetMovingImageGradientCalculator(self, *args)

    def SetUseFixedImageGradientFilter(self, _arg):
        r"""
        SetUseFixedImageGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_SetUseFixedImageGradientFilter(self, _arg)

    def GetUseFixedImageGradientFilter(self):
        r"""GetUseFixedImageGradientFilter(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetUseFixedImageGradientFilter(self)

    def UseFixedImageGradientFilterOn(self):
        r"""UseFixedImageGradientFilterOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_UseFixedImageGradientFilterOn(self)

    def UseFixedImageGradientFilterOff(self):
        r"""UseFixedImageGradientFilterOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_UseFixedImageGradientFilterOff(self)

    def SetUseMovingImageGradientFilter(self, _arg):
        r"""
        SetUseMovingImageGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_SetUseMovingImageGradientFilter(self, _arg)

    def GetUseMovingImageGradientFilter(self):
        r"""GetUseMovingImageGradientFilter(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetUseMovingImageGradientFilter(self)

    def UseMovingImageGradientFilterOn(self):
        r"""UseMovingImageGradientFilterOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_UseMovingImageGradientFilterOn(self)

    def UseMovingImageGradientFilterOff(self):
        r"""UseMovingImageGradientFilterOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_UseMovingImageGradientFilterOff(self)

    def GetNumberOfWorkUnitsUsed(self):
        r"""GetNumberOfWorkUnitsUsed(self) -> unsigned int"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetNumberOfWorkUnitsUsed(self)

    def SetMaximumNumberOfWorkUnits(self, number):
        r"""
        SetMaximumNumberOfWorkUnits(self, number)

        Parameters
        ----------
        number: unsigned int const

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_SetMaximumNumberOfWorkUnits(self, number)

    def GetMaximumNumberOfWorkUnits(self):
        r"""GetMaximumNumberOfWorkUnits(self) -> unsigned int"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetMaximumNumberOfWorkUnits(self)

    def FinalizeThread(self, arg0):
        r"""
        FinalizeThread(self, arg0)

        Parameters
        ----------
        arg0: unsigned int const

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_FinalizeThread(self, arg0)

    def GetModifiableFixedImageGradientImage(self):
        r"""GetModifiableFixedImageGradientImage(self) -> itkImageCVD44"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetModifiableFixedImageGradientImage(self)

    def GetFixedImageGradientImage(self, *args):
        r"""
        GetFixedImageGradientImage(self) -> itkImageCVD44
        GetFixedImageGradientImage(self) -> itkImageCVD44
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetFixedImageGradientImage(self, *args)

    def GetModifiableMovingImageGradientImage(self):
        r"""GetModifiableMovingImageGradientImage(self) -> itkImageCVD44"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetModifiableMovingImageGradientImage(self)

    def GetMovingImageGradientImage(self, *args):
        r"""
        GetMovingImageGradientImage(self) -> itkImageCVD44
        GetMovingImageGradientImage(self) -> itkImageCVD44
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetMovingImageGradientImage(self, *args)

    def GetNumberOfDomainPoints(self):
        r"""GetNumberOfDomainPoints(self) -> unsigned long long"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetNumberOfDomainPoints(self)

    def SetUseFloatingPointCorrection(self, _arg):
        r"""
        SetUseFloatingPointCorrection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_SetUseFloatingPointCorrection(self, _arg)

    def GetUseFloatingPointCorrection(self):
        r"""GetUseFloatingPointCorrection(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetUseFloatingPointCorrection(self)

    def UseFloatingPointCorrectionOn(self):
        r"""UseFloatingPointCorrectionOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_UseFloatingPointCorrectionOn(self)

    def UseFloatingPointCorrectionOff(self):
        r"""UseFloatingPointCorrectionOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_UseFloatingPointCorrectionOff(self)

    def SetFloatingPointCorrectionResolution(self, _arg):
        r"""
        SetFloatingPointCorrectionResolution(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_SetFloatingPointCorrectionResolution(self, _arg)

    def GetFloatingPointCorrectionResolution(self):
        r"""GetFloatingPointCorrectionResolution(self) -> double"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetFloatingPointCorrectionResolution(self)

    def GetNumberOfSkippedFixedSampledPoints(self):
        r"""GetNumberOfSkippedFixedSampledPoints(self) -> unsigned long long const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_GetNumberOfSkippedFixedSampledPoints(self)
    __swig_destroy__ = _itkImageToImageMetricv4Python.delete_itkImageToImageMetricv4D4D4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageMetricv4D4D4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_cast(obj)

# Register itkImageToImageMetricv4D4D4 in _itkImageToImageMetricv4Python:
_itkImageToImageMetricv4Python.itkImageToImageMetricv4D4D4_swigregister(itkImageToImageMetricv4D4D4)
class itkImageToImageMetricv4F2F2(itkImageToImageMetricv4F2F2_Superclass):
    r"""Proxy of C++ itkImageToImageMetricv4F2F2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedImage(self, _arg):
        r"""
        SetFixedImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageF2 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetFixedImage(self, _arg)

    def GetFixedImage(self):
        r"""GetFixedImage(self) -> itkImageF2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetFixedImage(self)

    def SetMovingImage(self, _arg):
        r"""
        SetMovingImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageF2 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetMovingImage(self, _arg)

    def GetMovingImage(self):
        r"""GetMovingImage(self) -> itkImageF2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetMovingImage(self)

    def SetFixedInterpolator(self, _arg):
        r"""
        SetFixedInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIF2D *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetFixedInterpolator(self, _arg)

    def GetModifiableFixedInterpolator(self):
        r"""GetModifiableFixedInterpolator(self) -> itkInterpolateImageFunctionIF2D"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetModifiableFixedInterpolator(self)

    def GetFixedInterpolator(self, *args):
        r"""
        GetFixedInterpolator(self) -> itkInterpolateImageFunctionIF2D
        GetFixedInterpolator(self) -> itkInterpolateImageFunctionIF2D
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetFixedInterpolator(self, *args)

    def SetMovingInterpolator(self, _arg):
        r"""
        SetMovingInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIF2D *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetMovingInterpolator(self, _arg)

    def GetModifiableMovingInterpolator(self):
        r"""GetModifiableMovingInterpolator(self) -> itkInterpolateImageFunctionIF2D"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetModifiableMovingInterpolator(self)

    def GetMovingInterpolator(self, *args):
        r"""
        GetMovingInterpolator(self) -> itkInterpolateImageFunctionIF2D
        GetMovingInterpolator(self) -> itkInterpolateImageFunctionIF2D
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetMovingInterpolator(self, *args)

    def SetMovingImageMask(self, *args):
        r"""
        SetMovingImageMask(self, arg)

        Parameters
        ----------
        arg: itkSpatialObject2 *const

        SetMovingImageMask(self, _arg)

        Parameters
        ----------
        _arg: itkSpatialObject2 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetMovingImageMask(self, *args)

    def GetMovingImageMask(self):
        r"""GetMovingImageMask(self) -> itkSpatialObject2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetMovingImageMask(self)

    def SetFixedImageMask(self, *args):
        r"""
        SetFixedImageMask(self, arg)

        Parameters
        ----------
        arg: itkSpatialObject2 *const

        SetFixedImageMask(self, _arg)

        Parameters
        ----------
        _arg: itkSpatialObject2 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetFixedImageMask(self, *args)

    def GetFixedImageMask(self):
        r"""GetFixedImageMask(self) -> itkSpatialObject2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetFixedImageMask(self)

    def SetFixedSampledPointSet(self, *args):
        r"""
        SetFixedSampledPointSet(self, arg)

        Parameters
        ----------
        arg: itkPointSetF2 *const

        SetFixedSampledPointSet(self, _arg)

        Parameters
        ----------
        _arg: itkPointSetF2 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetFixedSampledPointSet(self, *args)

    def GetFixedSampledPointSet(self):
        r"""GetFixedSampledPointSet(self) -> itkPointSetF2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetFixedSampledPointSet(self)

    def SetVirtualSampledPointSet(self, _arg):
        r"""
        SetVirtualSampledPointSet(self, _arg)

        Parameters
        ----------
        _arg: itkPointSetF2 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetVirtualSampledPointSet(self, _arg)

    def GetVirtualSampledPointSet(self):
        r"""GetVirtualSampledPointSet(self) -> itkPointSetF2"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetVirtualSampledPointSet(self)

    def SetUseSampledPointSet(self, _arg):
        r"""
        SetUseSampledPointSet(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetUseSampledPointSet(self, _arg)

    def GetUseSampledPointSet(self):
        r"""GetUseSampledPointSet(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetUseSampledPointSet(self)

    def UseSampledPointSetOn(self):
        r"""UseSampledPointSetOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseSampledPointSetOn(self)

    def UseSampledPointSetOff(self):
        r"""UseSampledPointSetOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseSampledPointSetOff(self)

    def SetUseVirtualSampledPointSet(self, _arg):
        r"""
        SetUseVirtualSampledPointSet(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetUseVirtualSampledPointSet(self, _arg)

    def GetUseVirtualSampledPointSet(self):
        r"""GetUseVirtualSampledPointSet(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetUseVirtualSampledPointSet(self)

    def UseVirtualSampledPointSetOn(self):
        r"""UseVirtualSampledPointSetOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseVirtualSampledPointSetOn(self)

    def UseVirtualSampledPointSetOff(self):
        r"""UseVirtualSampledPointSetOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseVirtualSampledPointSetOff(self)

    def SetFixedImageGradientFilter(self, _arg):
        r"""
        SetFixedImageGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageFilterIF2ICVD22 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetFixedImageGradientFilter(self, _arg)

    def GetModifiableFixedImageGradientFilter(self):
        r"""GetModifiableFixedImageGradientFilter(self) -> itkImageToImageFilterIF2ICVD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetModifiableFixedImageGradientFilter(self)

    def GetFixedImageGradientFilter(self, *args):
        r"""
        GetFixedImageGradientFilter(self) -> itkImageToImageFilterIF2ICVD22
        GetFixedImageGradientFilter(self) -> itkImageToImageFilterIF2ICVD22
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetFixedImageGradientFilter(self, *args)

    def SetMovingImageGradientFilter(self, _arg):
        r"""
        SetMovingImageGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageFilterIF2ICVD22 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetMovingImageGradientFilter(self, _arg)

    def GetModifiableMovingImageGradientFilter(self):
        r"""GetModifiableMovingImageGradientFilter(self) -> itkImageToImageFilterIF2ICVD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetModifiableMovingImageGradientFilter(self)

    def GetMovingImageGradientFilter(self, *args):
        r"""
        GetMovingImageGradientFilter(self) -> itkImageToImageFilterIF2ICVD22
        GetMovingImageGradientFilter(self) -> itkImageToImageFilterIF2ICVD22
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetMovingImageGradientFilter(self, *args)

    def SetFixedImageGradientCalculator(self, _arg):
        r"""
        SetFixedImageGradientCalculator(self, _arg)

        Parameters
        ----------
        _arg: itk::ImageFunction< itk::Image< float >,itk::CovariantVector< double,2 >,double > *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetFixedImageGradientCalculator(self, _arg)

    def GetModifiableFixedImageGradientCalculator(self):
        r"""GetModifiableFixedImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< float >,itk::CovariantVector< double,2 >,double > *"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetModifiableFixedImageGradientCalculator(self)

    def GetFixedImageGradientCalculator(self, *args):
        r"""
        GetFixedImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< float >,itk::CovariantVector< double,2 >,double > const
        GetFixedImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< float >,itk::CovariantVector< double,2 >,double > *
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetFixedImageGradientCalculator(self, *args)

    def SetMovingImageGradientCalculator(self, _arg):
        r"""
        SetMovingImageGradientCalculator(self, _arg)

        Parameters
        ----------
        _arg: itk::ImageFunction< itk::Image< float >,itk::CovariantVector< double,2 >,double > *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetMovingImageGradientCalculator(self, _arg)

    def GetModifiableMovingImageGradientCalculator(self):
        r"""GetModifiableMovingImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< float >,itk::CovariantVector< double,2 >,double > *"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetModifiableMovingImageGradientCalculator(self)

    def GetMovingImageGradientCalculator(self, *args):
        r"""
        GetMovingImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< float >,itk::CovariantVector< double,2 >,double > const
        GetMovingImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< float >,itk::CovariantVector< double,2 >,double > *
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetMovingImageGradientCalculator(self, *args)

    def SetUseFixedImageGradientFilter(self, _arg):
        r"""
        SetUseFixedImageGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetUseFixedImageGradientFilter(self, _arg)

    def GetUseFixedImageGradientFilter(self):
        r"""GetUseFixedImageGradientFilter(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetUseFixedImageGradientFilter(self)

    def UseFixedImageGradientFilterOn(self):
        r"""UseFixedImageGradientFilterOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseFixedImageGradientFilterOn(self)

    def UseFixedImageGradientFilterOff(self):
        r"""UseFixedImageGradientFilterOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseFixedImageGradientFilterOff(self)

    def SetUseMovingImageGradientFilter(self, _arg):
        r"""
        SetUseMovingImageGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetUseMovingImageGradientFilter(self, _arg)

    def GetUseMovingImageGradientFilter(self):
        r"""GetUseMovingImageGradientFilter(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetUseMovingImageGradientFilter(self)

    def UseMovingImageGradientFilterOn(self):
        r"""UseMovingImageGradientFilterOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseMovingImageGradientFilterOn(self)

    def UseMovingImageGradientFilterOff(self):
        r"""UseMovingImageGradientFilterOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseMovingImageGradientFilterOff(self)

    def GetNumberOfWorkUnitsUsed(self):
        r"""GetNumberOfWorkUnitsUsed(self) -> unsigned int"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetNumberOfWorkUnitsUsed(self)

    def SetMaximumNumberOfWorkUnits(self, number):
        r"""
        SetMaximumNumberOfWorkUnits(self, number)

        Parameters
        ----------
        number: unsigned int const

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetMaximumNumberOfWorkUnits(self, number)

    def GetMaximumNumberOfWorkUnits(self):
        r"""GetMaximumNumberOfWorkUnits(self) -> unsigned int"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetMaximumNumberOfWorkUnits(self)

    def FinalizeThread(self, arg0):
        r"""
        FinalizeThread(self, arg0)

        Parameters
        ----------
        arg0: unsigned int const

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_FinalizeThread(self, arg0)

    def GetModifiableFixedImageGradientImage(self):
        r"""GetModifiableFixedImageGradientImage(self) -> itkImageCVD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetModifiableFixedImageGradientImage(self)

    def GetFixedImageGradientImage(self, *args):
        r"""
        GetFixedImageGradientImage(self) -> itkImageCVD22
        GetFixedImageGradientImage(self) -> itkImageCVD22
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetFixedImageGradientImage(self, *args)

    def GetModifiableMovingImageGradientImage(self):
        r"""GetModifiableMovingImageGradientImage(self) -> itkImageCVD22"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetModifiableMovingImageGradientImage(self)

    def GetMovingImageGradientImage(self, *args):
        r"""
        GetMovingImageGradientImage(self) -> itkImageCVD22
        GetMovingImageGradientImage(self) -> itkImageCVD22
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetMovingImageGradientImage(self, *args)

    def GetNumberOfDomainPoints(self):
        r"""GetNumberOfDomainPoints(self) -> unsigned long long"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetNumberOfDomainPoints(self)

    def SetUseFloatingPointCorrection(self, _arg):
        r"""
        SetUseFloatingPointCorrection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetUseFloatingPointCorrection(self, _arg)

    def GetUseFloatingPointCorrection(self):
        r"""GetUseFloatingPointCorrection(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetUseFloatingPointCorrection(self)

    def UseFloatingPointCorrectionOn(self):
        r"""UseFloatingPointCorrectionOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseFloatingPointCorrectionOn(self)

    def UseFloatingPointCorrectionOff(self):
        r"""UseFloatingPointCorrectionOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_UseFloatingPointCorrectionOff(self)

    def SetFloatingPointCorrectionResolution(self, _arg):
        r"""
        SetFloatingPointCorrectionResolution(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_SetFloatingPointCorrectionResolution(self, _arg)

    def GetFloatingPointCorrectionResolution(self):
        r"""GetFloatingPointCorrectionResolution(self) -> double"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetFloatingPointCorrectionResolution(self)

    def GetNumberOfSkippedFixedSampledPoints(self):
        r"""GetNumberOfSkippedFixedSampledPoints(self) -> unsigned long long const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_GetNumberOfSkippedFixedSampledPoints(self)
    __swig_destroy__ = _itkImageToImageMetricv4Python.delete_itkImageToImageMetricv4F2F2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageMetricv4F2F2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_cast(obj)

# Register itkImageToImageMetricv4F2F2 in _itkImageToImageMetricv4Python:
_itkImageToImageMetricv4Python.itkImageToImageMetricv4F2F2_swigregister(itkImageToImageMetricv4F2F2)
class itkImageToImageMetricv4F3F3(itkImageToImageMetricv4F3F3_Superclass):
    r"""Proxy of C++ itkImageToImageMetricv4F3F3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedImage(self, _arg):
        r"""
        SetFixedImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageF3 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetFixedImage(self, _arg)

    def GetFixedImage(self):
        r"""GetFixedImage(self) -> itkImageF3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetFixedImage(self)

    def SetMovingImage(self, _arg):
        r"""
        SetMovingImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageF3 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetMovingImage(self, _arg)

    def GetMovingImage(self):
        r"""GetMovingImage(self) -> itkImageF3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetMovingImage(self)

    def SetFixedInterpolator(self, _arg):
        r"""
        SetFixedInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIF3D *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetFixedInterpolator(self, _arg)

    def GetModifiableFixedInterpolator(self):
        r"""GetModifiableFixedInterpolator(self) -> itkInterpolateImageFunctionIF3D"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetModifiableFixedInterpolator(self)

    def GetFixedInterpolator(self, *args):
        r"""
        GetFixedInterpolator(self) -> itkInterpolateImageFunctionIF3D
        GetFixedInterpolator(self) -> itkInterpolateImageFunctionIF3D
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetFixedInterpolator(self, *args)

    def SetMovingInterpolator(self, _arg):
        r"""
        SetMovingInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIF3D *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetMovingInterpolator(self, _arg)

    def GetModifiableMovingInterpolator(self):
        r"""GetModifiableMovingInterpolator(self) -> itkInterpolateImageFunctionIF3D"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetModifiableMovingInterpolator(self)

    def GetMovingInterpolator(self, *args):
        r"""
        GetMovingInterpolator(self) -> itkInterpolateImageFunctionIF3D
        GetMovingInterpolator(self) -> itkInterpolateImageFunctionIF3D
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetMovingInterpolator(self, *args)

    def SetMovingImageMask(self, *args):
        r"""
        SetMovingImageMask(self, arg)

        Parameters
        ----------
        arg: itkSpatialObject3 *const

        SetMovingImageMask(self, _arg)

        Parameters
        ----------
        _arg: itkSpatialObject3 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetMovingImageMask(self, *args)

    def GetMovingImageMask(self):
        r"""GetMovingImageMask(self) -> itkSpatialObject3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetMovingImageMask(self)

    def SetFixedImageMask(self, *args):
        r"""
        SetFixedImageMask(self, arg)

        Parameters
        ----------
        arg: itkSpatialObject3 *const

        SetFixedImageMask(self, _arg)

        Parameters
        ----------
        _arg: itkSpatialObject3 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetFixedImageMask(self, *args)

    def GetFixedImageMask(self):
        r"""GetFixedImageMask(self) -> itkSpatialObject3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetFixedImageMask(self)

    def SetFixedSampledPointSet(self, *args):
        r"""
        SetFixedSampledPointSet(self, arg)

        Parameters
        ----------
        arg: itkPointSetF3 *const

        SetFixedSampledPointSet(self, _arg)

        Parameters
        ----------
        _arg: itkPointSetF3 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetFixedSampledPointSet(self, *args)

    def GetFixedSampledPointSet(self):
        r"""GetFixedSampledPointSet(self) -> itkPointSetF3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetFixedSampledPointSet(self)

    def SetVirtualSampledPointSet(self, _arg):
        r"""
        SetVirtualSampledPointSet(self, _arg)

        Parameters
        ----------
        _arg: itkPointSetF3 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetVirtualSampledPointSet(self, _arg)

    def GetVirtualSampledPointSet(self):
        r"""GetVirtualSampledPointSet(self) -> itkPointSetF3"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetVirtualSampledPointSet(self)

    def SetUseSampledPointSet(self, _arg):
        r"""
        SetUseSampledPointSet(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetUseSampledPointSet(self, _arg)

    def GetUseSampledPointSet(self):
        r"""GetUseSampledPointSet(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetUseSampledPointSet(self)

    def UseSampledPointSetOn(self):
        r"""UseSampledPointSetOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseSampledPointSetOn(self)

    def UseSampledPointSetOff(self):
        r"""UseSampledPointSetOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseSampledPointSetOff(self)

    def SetUseVirtualSampledPointSet(self, _arg):
        r"""
        SetUseVirtualSampledPointSet(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetUseVirtualSampledPointSet(self, _arg)

    def GetUseVirtualSampledPointSet(self):
        r"""GetUseVirtualSampledPointSet(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetUseVirtualSampledPointSet(self)

    def UseVirtualSampledPointSetOn(self):
        r"""UseVirtualSampledPointSetOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseVirtualSampledPointSetOn(self)

    def UseVirtualSampledPointSetOff(self):
        r"""UseVirtualSampledPointSetOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseVirtualSampledPointSetOff(self)

    def SetFixedImageGradientFilter(self, _arg):
        r"""
        SetFixedImageGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageFilterIF3ICVD33 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetFixedImageGradientFilter(self, _arg)

    def GetModifiableFixedImageGradientFilter(self):
        r"""GetModifiableFixedImageGradientFilter(self) -> itkImageToImageFilterIF3ICVD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetModifiableFixedImageGradientFilter(self)

    def GetFixedImageGradientFilter(self, *args):
        r"""
        GetFixedImageGradientFilter(self) -> itkImageToImageFilterIF3ICVD33
        GetFixedImageGradientFilter(self) -> itkImageToImageFilterIF3ICVD33
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetFixedImageGradientFilter(self, *args)

    def SetMovingImageGradientFilter(self, _arg):
        r"""
        SetMovingImageGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageFilterIF3ICVD33 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetMovingImageGradientFilter(self, _arg)

    def GetModifiableMovingImageGradientFilter(self):
        r"""GetModifiableMovingImageGradientFilter(self) -> itkImageToImageFilterIF3ICVD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetModifiableMovingImageGradientFilter(self)

    def GetMovingImageGradientFilter(self, *args):
        r"""
        GetMovingImageGradientFilter(self) -> itkImageToImageFilterIF3ICVD33
        GetMovingImageGradientFilter(self) -> itkImageToImageFilterIF3ICVD33
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetMovingImageGradientFilter(self, *args)

    def SetFixedImageGradientCalculator(self, _arg):
        r"""
        SetFixedImageGradientCalculator(self, _arg)

        Parameters
        ----------
        _arg: itk::ImageFunction< itk::Image< float,3 >,itk::CovariantVector< double >,double > *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetFixedImageGradientCalculator(self, _arg)

    def GetModifiableFixedImageGradientCalculator(self):
        r"""GetModifiableFixedImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< float,3 >,itk::CovariantVector< double >,double > *"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetModifiableFixedImageGradientCalculator(self)

    def GetFixedImageGradientCalculator(self, *args):
        r"""
        GetFixedImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< float,3 >,itk::CovariantVector< double >,double > const
        GetFixedImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< float,3 >,itk::CovariantVector< double >,double > *
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetFixedImageGradientCalculator(self, *args)

    def SetMovingImageGradientCalculator(self, _arg):
        r"""
        SetMovingImageGradientCalculator(self, _arg)

        Parameters
        ----------
        _arg: itk::ImageFunction< itk::Image< float,3 >,itk::CovariantVector< double >,double > *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetMovingImageGradientCalculator(self, _arg)

    def GetModifiableMovingImageGradientCalculator(self):
        r"""GetModifiableMovingImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< float,3 >,itk::CovariantVector< double >,double > *"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetModifiableMovingImageGradientCalculator(self)

    def GetMovingImageGradientCalculator(self, *args):
        r"""
        GetMovingImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< float,3 >,itk::CovariantVector< double >,double > const
        GetMovingImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< float,3 >,itk::CovariantVector< double >,double > *
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetMovingImageGradientCalculator(self, *args)

    def SetUseFixedImageGradientFilter(self, _arg):
        r"""
        SetUseFixedImageGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetUseFixedImageGradientFilter(self, _arg)

    def GetUseFixedImageGradientFilter(self):
        r"""GetUseFixedImageGradientFilter(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetUseFixedImageGradientFilter(self)

    def UseFixedImageGradientFilterOn(self):
        r"""UseFixedImageGradientFilterOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseFixedImageGradientFilterOn(self)

    def UseFixedImageGradientFilterOff(self):
        r"""UseFixedImageGradientFilterOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseFixedImageGradientFilterOff(self)

    def SetUseMovingImageGradientFilter(self, _arg):
        r"""
        SetUseMovingImageGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetUseMovingImageGradientFilter(self, _arg)

    def GetUseMovingImageGradientFilter(self):
        r"""GetUseMovingImageGradientFilter(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetUseMovingImageGradientFilter(self)

    def UseMovingImageGradientFilterOn(self):
        r"""UseMovingImageGradientFilterOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseMovingImageGradientFilterOn(self)

    def UseMovingImageGradientFilterOff(self):
        r"""UseMovingImageGradientFilterOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseMovingImageGradientFilterOff(self)

    def GetNumberOfWorkUnitsUsed(self):
        r"""GetNumberOfWorkUnitsUsed(self) -> unsigned int"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetNumberOfWorkUnitsUsed(self)

    def SetMaximumNumberOfWorkUnits(self, number):
        r"""
        SetMaximumNumberOfWorkUnits(self, number)

        Parameters
        ----------
        number: unsigned int const

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetMaximumNumberOfWorkUnits(self, number)

    def GetMaximumNumberOfWorkUnits(self):
        r"""GetMaximumNumberOfWorkUnits(self) -> unsigned int"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetMaximumNumberOfWorkUnits(self)

    def FinalizeThread(self, arg0):
        r"""
        FinalizeThread(self, arg0)

        Parameters
        ----------
        arg0: unsigned int const

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_FinalizeThread(self, arg0)

    def GetModifiableFixedImageGradientImage(self):
        r"""GetModifiableFixedImageGradientImage(self) -> itkImageCVD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetModifiableFixedImageGradientImage(self)

    def GetFixedImageGradientImage(self, *args):
        r"""
        GetFixedImageGradientImage(self) -> itkImageCVD33
        GetFixedImageGradientImage(self) -> itkImageCVD33
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetFixedImageGradientImage(self, *args)

    def GetModifiableMovingImageGradientImage(self):
        r"""GetModifiableMovingImageGradientImage(self) -> itkImageCVD33"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetModifiableMovingImageGradientImage(self)

    def GetMovingImageGradientImage(self, *args):
        r"""
        GetMovingImageGradientImage(self) -> itkImageCVD33
        GetMovingImageGradientImage(self) -> itkImageCVD33
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetMovingImageGradientImage(self, *args)

    def GetNumberOfDomainPoints(self):
        r"""GetNumberOfDomainPoints(self) -> unsigned long long"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetNumberOfDomainPoints(self)

    def SetUseFloatingPointCorrection(self, _arg):
        r"""
        SetUseFloatingPointCorrection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetUseFloatingPointCorrection(self, _arg)

    def GetUseFloatingPointCorrection(self):
        r"""GetUseFloatingPointCorrection(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetUseFloatingPointCorrection(self)

    def UseFloatingPointCorrectionOn(self):
        r"""UseFloatingPointCorrectionOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseFloatingPointCorrectionOn(self)

    def UseFloatingPointCorrectionOff(self):
        r"""UseFloatingPointCorrectionOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_UseFloatingPointCorrectionOff(self)

    def SetFloatingPointCorrectionResolution(self, _arg):
        r"""
        SetFloatingPointCorrectionResolution(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_SetFloatingPointCorrectionResolution(self, _arg)

    def GetFloatingPointCorrectionResolution(self):
        r"""GetFloatingPointCorrectionResolution(self) -> double"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetFloatingPointCorrectionResolution(self)

    def GetNumberOfSkippedFixedSampledPoints(self):
        r"""GetNumberOfSkippedFixedSampledPoints(self) -> unsigned long long const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_GetNumberOfSkippedFixedSampledPoints(self)
    __swig_destroy__ = _itkImageToImageMetricv4Python.delete_itkImageToImageMetricv4F3F3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageMetricv4F3F3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_cast(obj)

# Register itkImageToImageMetricv4F3F3 in _itkImageToImageMetricv4Python:
_itkImageToImageMetricv4Python.itkImageToImageMetricv4F3F3_swigregister(itkImageToImageMetricv4F3F3)
class itkImageToImageMetricv4F4F4(itkImageToImageMetricv4F4F4_Superclass):
    r"""Proxy of C++ itkImageToImageMetricv4F4F4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedImage(self, _arg):
        r"""
        SetFixedImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageF4 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_SetFixedImage(self, _arg)

    def GetFixedImage(self):
        r"""GetFixedImage(self) -> itkImageF4"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetFixedImage(self)

    def SetMovingImage(self, _arg):
        r"""
        SetMovingImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageF4 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_SetMovingImage(self, _arg)

    def GetMovingImage(self):
        r"""GetMovingImage(self) -> itkImageF4"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetMovingImage(self)

    def SetFixedInterpolator(self, _arg):
        r"""
        SetFixedInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIF4D *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_SetFixedInterpolator(self, _arg)

    def GetModifiableFixedInterpolator(self):
        r"""GetModifiableFixedInterpolator(self) -> itkInterpolateImageFunctionIF4D"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetModifiableFixedInterpolator(self)

    def GetFixedInterpolator(self, *args):
        r"""
        GetFixedInterpolator(self) -> itkInterpolateImageFunctionIF4D
        GetFixedInterpolator(self) -> itkInterpolateImageFunctionIF4D
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetFixedInterpolator(self, *args)

    def SetMovingInterpolator(self, _arg):
        r"""
        SetMovingInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIF4D *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_SetMovingInterpolator(self, _arg)

    def GetModifiableMovingInterpolator(self):
        r"""GetModifiableMovingInterpolator(self) -> itkInterpolateImageFunctionIF4D"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetModifiableMovingInterpolator(self)

    def GetMovingInterpolator(self, *args):
        r"""
        GetMovingInterpolator(self) -> itkInterpolateImageFunctionIF4D
        GetMovingInterpolator(self) -> itkInterpolateImageFunctionIF4D
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetMovingInterpolator(self, *args)

    def SetMovingImageMask(self, *args):
        r"""
        SetMovingImageMask(self, arg)

        Parameters
        ----------
        arg: itkSpatialObject4 *const

        SetMovingImageMask(self, _arg)

        Parameters
        ----------
        _arg: itkSpatialObject4 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_SetMovingImageMask(self, *args)

    def GetMovingImageMask(self):
        r"""GetMovingImageMask(self) -> itkSpatialObject4"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetMovingImageMask(self)

    def SetFixedImageMask(self, *args):
        r"""
        SetFixedImageMask(self, arg)

        Parameters
        ----------
        arg: itkSpatialObject4 *const

        SetFixedImageMask(self, _arg)

        Parameters
        ----------
        _arg: itkSpatialObject4 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_SetFixedImageMask(self, *args)

    def GetFixedImageMask(self):
        r"""GetFixedImageMask(self) -> itkSpatialObject4"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetFixedImageMask(self)

    def SetFixedSampledPointSet(self, *args):
        r"""
        SetFixedSampledPointSet(self, arg)

        Parameters
        ----------
        arg: itkPointSetF4 *const

        SetFixedSampledPointSet(self, _arg)

        Parameters
        ----------
        _arg: itkPointSetF4 const *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_SetFixedSampledPointSet(self, *args)

    def GetFixedSampledPointSet(self):
        r"""GetFixedSampledPointSet(self) -> itkPointSetF4"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetFixedSampledPointSet(self)

    def SetVirtualSampledPointSet(self, _arg):
        r"""
        SetVirtualSampledPointSet(self, _arg)

        Parameters
        ----------
        _arg: itkPointSetF4 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_SetVirtualSampledPointSet(self, _arg)

    def GetVirtualSampledPointSet(self):
        r"""GetVirtualSampledPointSet(self) -> itkPointSetF4"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetVirtualSampledPointSet(self)

    def SetUseSampledPointSet(self, _arg):
        r"""
        SetUseSampledPointSet(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_SetUseSampledPointSet(self, _arg)

    def GetUseSampledPointSet(self):
        r"""GetUseSampledPointSet(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetUseSampledPointSet(self)

    def UseSampledPointSetOn(self):
        r"""UseSampledPointSetOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_UseSampledPointSetOn(self)

    def UseSampledPointSetOff(self):
        r"""UseSampledPointSetOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_UseSampledPointSetOff(self)

    def SetUseVirtualSampledPointSet(self, _arg):
        r"""
        SetUseVirtualSampledPointSet(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_SetUseVirtualSampledPointSet(self, _arg)

    def GetUseVirtualSampledPointSet(self):
        r"""GetUseVirtualSampledPointSet(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetUseVirtualSampledPointSet(self)

    def UseVirtualSampledPointSetOn(self):
        r"""UseVirtualSampledPointSetOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_UseVirtualSampledPointSetOn(self)

    def UseVirtualSampledPointSetOff(self):
        r"""UseVirtualSampledPointSetOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_UseVirtualSampledPointSetOff(self)

    def SetFixedImageGradientFilter(self, _arg):
        r"""
        SetFixedImageGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageFilterIF4ICVD44 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_SetFixedImageGradientFilter(self, _arg)

    def GetModifiableFixedImageGradientFilter(self):
        r"""GetModifiableFixedImageGradientFilter(self) -> itkImageToImageFilterIF4ICVD44"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetModifiableFixedImageGradientFilter(self)

    def GetFixedImageGradientFilter(self, *args):
        r"""
        GetFixedImageGradientFilter(self) -> itkImageToImageFilterIF4ICVD44
        GetFixedImageGradientFilter(self) -> itkImageToImageFilterIF4ICVD44
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetFixedImageGradientFilter(self, *args)

    def SetMovingImageGradientFilter(self, _arg):
        r"""
        SetMovingImageGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageFilterIF4ICVD44 *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_SetMovingImageGradientFilter(self, _arg)

    def GetModifiableMovingImageGradientFilter(self):
        r"""GetModifiableMovingImageGradientFilter(self) -> itkImageToImageFilterIF4ICVD44"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetModifiableMovingImageGradientFilter(self)

    def GetMovingImageGradientFilter(self, *args):
        r"""
        GetMovingImageGradientFilter(self) -> itkImageToImageFilterIF4ICVD44
        GetMovingImageGradientFilter(self) -> itkImageToImageFilterIF4ICVD44
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetMovingImageGradientFilter(self, *args)

    def SetFixedImageGradientCalculator(self, _arg):
        r"""
        SetFixedImageGradientCalculator(self, _arg)

        Parameters
        ----------
        _arg: itk::ImageFunction< itk::Image< float,4 >,itk::CovariantVector< double,4 >,double > *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_SetFixedImageGradientCalculator(self, _arg)

    def GetModifiableFixedImageGradientCalculator(self):
        r"""GetModifiableFixedImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< float,4 >,itk::CovariantVector< double,4 >,double > *"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetModifiableFixedImageGradientCalculator(self)

    def GetFixedImageGradientCalculator(self, *args):
        r"""
        GetFixedImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< float,4 >,itk::CovariantVector< double,4 >,double > const
        GetFixedImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< float,4 >,itk::CovariantVector< double,4 >,double > *
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetFixedImageGradientCalculator(self, *args)

    def SetMovingImageGradientCalculator(self, _arg):
        r"""
        SetMovingImageGradientCalculator(self, _arg)

        Parameters
        ----------
        _arg: itk::ImageFunction< itk::Image< float,4 >,itk::CovariantVector< double,4 >,double > *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_SetMovingImageGradientCalculator(self, _arg)

    def GetModifiableMovingImageGradientCalculator(self):
        r"""GetModifiableMovingImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< float,4 >,itk::CovariantVector< double,4 >,double > *"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetModifiableMovingImageGradientCalculator(self)

    def GetMovingImageGradientCalculator(self, *args):
        r"""
        GetMovingImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< float,4 >,itk::CovariantVector< double,4 >,double > const
        GetMovingImageGradientCalculator(self) -> itk::ImageFunction< itk::Image< float,4 >,itk::CovariantVector< double,4 >,double > *
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetMovingImageGradientCalculator(self, *args)

    def SetUseFixedImageGradientFilter(self, _arg):
        r"""
        SetUseFixedImageGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_SetUseFixedImageGradientFilter(self, _arg)

    def GetUseFixedImageGradientFilter(self):
        r"""GetUseFixedImageGradientFilter(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetUseFixedImageGradientFilter(self)

    def UseFixedImageGradientFilterOn(self):
        r"""UseFixedImageGradientFilterOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_UseFixedImageGradientFilterOn(self)

    def UseFixedImageGradientFilterOff(self):
        r"""UseFixedImageGradientFilterOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_UseFixedImageGradientFilterOff(self)

    def SetUseMovingImageGradientFilter(self, _arg):
        r"""
        SetUseMovingImageGradientFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_SetUseMovingImageGradientFilter(self, _arg)

    def GetUseMovingImageGradientFilter(self):
        r"""GetUseMovingImageGradientFilter(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetUseMovingImageGradientFilter(self)

    def UseMovingImageGradientFilterOn(self):
        r"""UseMovingImageGradientFilterOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_UseMovingImageGradientFilterOn(self)

    def UseMovingImageGradientFilterOff(self):
        r"""UseMovingImageGradientFilterOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_UseMovingImageGradientFilterOff(self)

    def GetNumberOfWorkUnitsUsed(self):
        r"""GetNumberOfWorkUnitsUsed(self) -> unsigned int"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetNumberOfWorkUnitsUsed(self)

    def SetMaximumNumberOfWorkUnits(self, number):
        r"""
        SetMaximumNumberOfWorkUnits(self, number)

        Parameters
        ----------
        number: unsigned int const

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_SetMaximumNumberOfWorkUnits(self, number)

    def GetMaximumNumberOfWorkUnits(self):
        r"""GetMaximumNumberOfWorkUnits(self) -> unsigned int"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetMaximumNumberOfWorkUnits(self)

    def FinalizeThread(self, arg0):
        r"""
        FinalizeThread(self, arg0)

        Parameters
        ----------
        arg0: unsigned int const

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_FinalizeThread(self, arg0)

    def GetModifiableFixedImageGradientImage(self):
        r"""GetModifiableFixedImageGradientImage(self) -> itkImageCVD44"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetModifiableFixedImageGradientImage(self)

    def GetFixedImageGradientImage(self, *args):
        r"""
        GetFixedImageGradientImage(self) -> itkImageCVD44
        GetFixedImageGradientImage(self) -> itkImageCVD44
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetFixedImageGradientImage(self, *args)

    def GetModifiableMovingImageGradientImage(self):
        r"""GetModifiableMovingImageGradientImage(self) -> itkImageCVD44"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetModifiableMovingImageGradientImage(self)

    def GetMovingImageGradientImage(self, *args):
        r"""
        GetMovingImageGradientImage(self) -> itkImageCVD44
        GetMovingImageGradientImage(self) -> itkImageCVD44
        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetMovingImageGradientImage(self, *args)

    def GetNumberOfDomainPoints(self):
        r"""GetNumberOfDomainPoints(self) -> unsigned long long"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetNumberOfDomainPoints(self)

    def SetUseFloatingPointCorrection(self, _arg):
        r"""
        SetUseFloatingPointCorrection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_SetUseFloatingPointCorrection(self, _arg)

    def GetUseFloatingPointCorrection(self):
        r"""GetUseFloatingPointCorrection(self) -> bool const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetUseFloatingPointCorrection(self)

    def UseFloatingPointCorrectionOn(self):
        r"""UseFloatingPointCorrectionOn(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_UseFloatingPointCorrectionOn(self)

    def UseFloatingPointCorrectionOff(self):
        r"""UseFloatingPointCorrectionOff(self)"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_UseFloatingPointCorrectionOff(self)

    def SetFloatingPointCorrectionResolution(self, _arg):
        r"""
        SetFloatingPointCorrectionResolution(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_SetFloatingPointCorrectionResolution(self, _arg)

    def GetFloatingPointCorrectionResolution(self):
        r"""GetFloatingPointCorrectionResolution(self) -> double"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetFloatingPointCorrectionResolution(self)

    def GetNumberOfSkippedFixedSampledPoints(self):
        r"""GetNumberOfSkippedFixedSampledPoints(self) -> unsigned long long const &"""
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_GetNumberOfSkippedFixedSampledPoints(self)
    __swig_destroy__ = _itkImageToImageMetricv4Python.delete_itkImageToImageMetricv4F4F4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageMetricv4F4F4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_cast(obj)

# Register itkImageToImageMetricv4F4F4 in _itkImageToImageMetricv4Python:
_itkImageToImageMetricv4Python.itkImageToImageMetricv4F4F4_swigregister(itkImageToImageMetricv4F4F4)

