# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKRegistrationCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkTransformParametersAdaptorBasePython
else:
    import _itkTransformParametersAdaptorBasePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkTransformBasePython
import itk.itkVariableLengthVectorPython
import itk.itkArray2DPython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
class itkTransformParametersAdaptorBaseD2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkTransformParametersAdaptorBaseD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetTransform(self, _arg, priorityLower=None):
        r"""
        SetTransform(self, _arg, priorityLower=None)

        Parameters
        ----------
        _arg: itkTransformD22 *
        priorityLower: void *

        """
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD2_SetTransform(self, _arg, priorityLower)

    def SetRequiredFixedParameters(self, _arg):
        r"""
        SetRequiredFixedParameters(self, _arg)

        Parameters
        ----------
        _arg: itkOptimizerParametersD

        """
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD2_SetRequiredFixedParameters(self, _arg)

    def GetRequiredFixedParameters(self):
        r"""GetRequiredFixedParameters(self) -> itkOptimizerParametersD"""
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD2_GetRequiredFixedParameters(self)

    def AdaptTransformParameters(self):
        r"""AdaptTransformParameters(self)"""
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD2_AdaptTransformParameters(self)
    __swig_destroy__ = _itkTransformParametersAdaptorBasePython.delete_itkTransformParametersAdaptorBaseD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformParametersAdaptorBaseD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD2_cast(obj)

# Register itkTransformParametersAdaptorBaseD2 in _itkTransformParametersAdaptorBasePython:
_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD2_swigregister(itkTransformParametersAdaptorBaseD2)
class itkTransformParametersAdaptorBaseD3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkTransformParametersAdaptorBaseD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetTransform(self, _arg, priorityLower=None):
        r"""
        SetTransform(self, _arg, priorityLower=None)

        Parameters
        ----------
        _arg: itkTransformD33 *
        priorityLower: void *

        """
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD3_SetTransform(self, _arg, priorityLower)

    def SetRequiredFixedParameters(self, _arg):
        r"""
        SetRequiredFixedParameters(self, _arg)

        Parameters
        ----------
        _arg: itkOptimizerParametersD

        """
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD3_SetRequiredFixedParameters(self, _arg)

    def GetRequiredFixedParameters(self):
        r"""GetRequiredFixedParameters(self) -> itkOptimizerParametersD"""
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD3_GetRequiredFixedParameters(self)

    def AdaptTransformParameters(self):
        r"""AdaptTransformParameters(self)"""
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD3_AdaptTransformParameters(self)
    __swig_destroy__ = _itkTransformParametersAdaptorBasePython.delete_itkTransformParametersAdaptorBaseD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformParametersAdaptorBaseD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD3_cast(obj)

# Register itkTransformParametersAdaptorBaseD3 in _itkTransformParametersAdaptorBasePython:
_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD3_swigregister(itkTransformParametersAdaptorBaseD3)
class itkTransformParametersAdaptorBaseD4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkTransformParametersAdaptorBaseD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetTransform(self, _arg, priorityLower=None):
        r"""
        SetTransform(self, _arg, priorityLower=None)

        Parameters
        ----------
        _arg: itkTransformD44 *
        priorityLower: void *

        """
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD4_SetTransform(self, _arg, priorityLower)

    def SetRequiredFixedParameters(self, _arg):
        r"""
        SetRequiredFixedParameters(self, _arg)

        Parameters
        ----------
        _arg: itkOptimizerParametersD

        """
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD4_SetRequiredFixedParameters(self, _arg)

    def GetRequiredFixedParameters(self):
        r"""GetRequiredFixedParameters(self) -> itkOptimizerParametersD"""
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD4_GetRequiredFixedParameters(self)

    def AdaptTransformParameters(self):
        r"""AdaptTransformParameters(self)"""
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD4_AdaptTransformParameters(self)
    __swig_destroy__ = _itkTransformParametersAdaptorBasePython.delete_itkTransformParametersAdaptorBaseD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformParametersAdaptorBaseD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD4_cast(obj)

# Register itkTransformParametersAdaptorBaseD4 in _itkTransformParametersAdaptorBasePython:
_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseD4_swigregister(itkTransformParametersAdaptorBaseD4)
class itkTransformParametersAdaptorBaseF2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkTransformParametersAdaptorBaseF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetTransform(self, _arg, priorityLower=None):
        r"""
        SetTransform(self, _arg, priorityLower=None)

        Parameters
        ----------
        _arg: itkTransformF22 *
        priorityLower: void *

        """
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF2_SetTransform(self, _arg, priorityLower)

    def SetRequiredFixedParameters(self, _arg):
        r"""
        SetRequiredFixedParameters(self, _arg)

        Parameters
        ----------
        _arg: itkOptimizerParametersD

        """
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF2_SetRequiredFixedParameters(self, _arg)

    def GetRequiredFixedParameters(self):
        r"""GetRequiredFixedParameters(self) -> itkOptimizerParametersD"""
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF2_GetRequiredFixedParameters(self)

    def AdaptTransformParameters(self):
        r"""AdaptTransformParameters(self)"""
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF2_AdaptTransformParameters(self)
    __swig_destroy__ = _itkTransformParametersAdaptorBasePython.delete_itkTransformParametersAdaptorBaseF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformParametersAdaptorBaseF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF2_cast(obj)

# Register itkTransformParametersAdaptorBaseF2 in _itkTransformParametersAdaptorBasePython:
_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF2_swigregister(itkTransformParametersAdaptorBaseF2)
class itkTransformParametersAdaptorBaseF3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkTransformParametersAdaptorBaseF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetTransform(self, _arg, priorityLower=None):
        r"""
        SetTransform(self, _arg, priorityLower=None)

        Parameters
        ----------
        _arg: itkTransformF33 *
        priorityLower: void *

        """
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF3_SetTransform(self, _arg, priorityLower)

    def SetRequiredFixedParameters(self, _arg):
        r"""
        SetRequiredFixedParameters(self, _arg)

        Parameters
        ----------
        _arg: itkOptimizerParametersD

        """
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF3_SetRequiredFixedParameters(self, _arg)

    def GetRequiredFixedParameters(self):
        r"""GetRequiredFixedParameters(self) -> itkOptimizerParametersD"""
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF3_GetRequiredFixedParameters(self)

    def AdaptTransformParameters(self):
        r"""AdaptTransformParameters(self)"""
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF3_AdaptTransformParameters(self)
    __swig_destroy__ = _itkTransformParametersAdaptorBasePython.delete_itkTransformParametersAdaptorBaseF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformParametersAdaptorBaseF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF3_cast(obj)

# Register itkTransformParametersAdaptorBaseF3 in _itkTransformParametersAdaptorBasePython:
_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF3_swigregister(itkTransformParametersAdaptorBaseF3)
class itkTransformParametersAdaptorBaseF4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkTransformParametersAdaptorBaseF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetTransform(self, _arg, priorityLower=None):
        r"""
        SetTransform(self, _arg, priorityLower=None)

        Parameters
        ----------
        _arg: itkTransformF44 *
        priorityLower: void *

        """
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF4_SetTransform(self, _arg, priorityLower)

    def SetRequiredFixedParameters(self, _arg):
        r"""
        SetRequiredFixedParameters(self, _arg)

        Parameters
        ----------
        _arg: itkOptimizerParametersD

        """
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF4_SetRequiredFixedParameters(self, _arg)

    def GetRequiredFixedParameters(self):
        r"""GetRequiredFixedParameters(self) -> itkOptimizerParametersD"""
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF4_GetRequiredFixedParameters(self)

    def AdaptTransformParameters(self):
        r"""AdaptTransformParameters(self)"""
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF4_AdaptTransformParameters(self)
    __swig_destroy__ = _itkTransformParametersAdaptorBasePython.delete_itkTransformParametersAdaptorBaseF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformParametersAdaptorBaseF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF4_cast(obj)

# Register itkTransformParametersAdaptorBaseF4 in _itkTransformParametersAdaptorBasePython:
_itkTransformParametersAdaptorBasePython.itkTransformParametersAdaptorBaseF4_swigregister(itkTransformParametersAdaptorBaseF4)

