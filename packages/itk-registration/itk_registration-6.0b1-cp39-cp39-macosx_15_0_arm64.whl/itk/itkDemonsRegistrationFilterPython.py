# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKPDEDeformableRegistrationPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDemonsRegistrationFilterPython
else:
    import _itkDemonsRegistrationFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkPDEDeformableRegistrationFilterPython
import itk.itkDenseFiniteDifferenceImageFilterPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterBPython

def itkDemonsRegistrationFilterID2ID2IVF22_New():
    return itkDemonsRegistrationFilterID2ID2IVF22.New()

class itkDemonsRegistrationFilterID2ID2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22):
    r"""Proxy of C++ itkDemonsRegistrationFilterID2ID2IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDemonsRegistrationFilterID2ID2IVF22_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDemonsRegistrationFilterID2ID2IVF22_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_GetMetric(self)

    def SetUseMovingImageGradient(self, _arg):
        r"""
        SetUseMovingImageGradient(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_SetUseMovingImageGradient(self, _arg)

    def GetUseMovingImageGradient(self):
        r"""GetUseMovingImageGradient(self) -> bool"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_GetUseMovingImageGradient(self)

    def UseMovingImageGradientOn(self):
        r"""UseMovingImageGradientOn(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_UseMovingImageGradientOn(self)

    def UseMovingImageGradientOff(self):
        r"""UseMovingImageGradientOff(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_UseMovingImageGradientOff(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_GetIntensityDifferenceThreshold(self)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterID2ID2IVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDemonsRegistrationFilterID2ID2IVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterID2ID2IVF22

        Create a new object of the class itkDemonsRegistrationFilterID2ID2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterID2ID2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterID2ID2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterID2ID2IVF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterID2ID2IVF22 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_swigregister(itkDemonsRegistrationFilterID2ID2IVF22)

def itkDemonsRegistrationFilterID3ID3IVF33_New():
    return itkDemonsRegistrationFilterID3ID3IVF33.New()

class itkDemonsRegistrationFilterID3ID3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33):
    r"""Proxy of C++ itkDemonsRegistrationFilterID3ID3IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDemonsRegistrationFilterID3ID3IVF33_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDemonsRegistrationFilterID3ID3IVF33_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_GetMetric(self)

    def SetUseMovingImageGradient(self, _arg):
        r"""
        SetUseMovingImageGradient(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_SetUseMovingImageGradient(self, _arg)

    def GetUseMovingImageGradient(self):
        r"""GetUseMovingImageGradient(self) -> bool"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_GetUseMovingImageGradient(self)

    def UseMovingImageGradientOn(self):
        r"""UseMovingImageGradientOn(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_UseMovingImageGradientOn(self)

    def UseMovingImageGradientOff(self):
        r"""UseMovingImageGradientOff(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_UseMovingImageGradientOff(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_GetIntensityDifferenceThreshold(self)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterID3ID3IVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDemonsRegistrationFilterID3ID3IVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterID3ID3IVF33

        Create a new object of the class itkDemonsRegistrationFilterID3ID3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterID3ID3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterID3ID3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterID3ID3IVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterID3ID3IVF33 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_swigregister(itkDemonsRegistrationFilterID3ID3IVF33)

def itkDemonsRegistrationFilterID4ID4IVF44_New():
    return itkDemonsRegistrationFilterID4ID4IVF44.New()

class itkDemonsRegistrationFilterID4ID4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44):
    r"""Proxy of C++ itkDemonsRegistrationFilterID4ID4IVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDemonsRegistrationFilterID4ID4IVF44_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID4ID4IVF44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDemonsRegistrationFilterID4ID4IVF44_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID4ID4IVF44_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID4ID4IVF44_GetMetric(self)

    def SetUseMovingImageGradient(self, _arg):
        r"""
        SetUseMovingImageGradient(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID4ID4IVF44_SetUseMovingImageGradient(self, _arg)

    def GetUseMovingImageGradient(self):
        r"""GetUseMovingImageGradient(self) -> bool"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID4ID4IVF44_GetUseMovingImageGradient(self)

    def UseMovingImageGradientOn(self):
        r"""UseMovingImageGradientOn(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID4ID4IVF44_UseMovingImageGradientOn(self)

    def UseMovingImageGradientOff(self):
        r"""UseMovingImageGradientOff(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID4ID4IVF44_UseMovingImageGradientOff(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID4ID4IVF44_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID4ID4IVF44_GetIntensityDifferenceThreshold(self)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterID4ID4IVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDemonsRegistrationFilterID4ID4IVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID4ID4IVF44_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterID4ID4IVF44

        Create a new object of the class itkDemonsRegistrationFilterID4ID4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterID4ID4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterID4ID4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterID4ID4IVF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterID4ID4IVF44 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID4ID4IVF44_swigregister(itkDemonsRegistrationFilterID4ID4IVF44)

def itkDemonsRegistrationFilterIF2IF2IVF22_New():
    return itkDemonsRegistrationFilterIF2IF2IVF22.New()

class itkDemonsRegistrationFilterIF2IF2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22):
    r"""Proxy of C++ itkDemonsRegistrationFilterIF2IF2IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDemonsRegistrationFilterIF2IF2IVF22_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDemonsRegistrationFilterIF2IF2IVF22_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_GetMetric(self)

    def SetUseMovingImageGradient(self, _arg):
        r"""
        SetUseMovingImageGradient(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_SetUseMovingImageGradient(self, _arg)

    def GetUseMovingImageGradient(self):
        r"""GetUseMovingImageGradient(self) -> bool"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_GetUseMovingImageGradient(self)

    def UseMovingImageGradientOn(self):
        r"""UseMovingImageGradientOn(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_UseMovingImageGradientOn(self)

    def UseMovingImageGradientOff(self):
        r"""UseMovingImageGradientOff(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_UseMovingImageGradientOff(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_GetIntensityDifferenceThreshold(self)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIF2IF2IVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDemonsRegistrationFilterIF2IF2IVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIF2IF2IVF22

        Create a new object of the class itkDemonsRegistrationFilterIF2IF2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIF2IF2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIF2IF2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIF2IF2IVF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIF2IF2IVF22 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_swigregister(itkDemonsRegistrationFilterIF2IF2IVF22)

def itkDemonsRegistrationFilterIF3IF3IVF33_New():
    return itkDemonsRegistrationFilterIF3IF3IVF33.New()

class itkDemonsRegistrationFilterIF3IF3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33):
    r"""Proxy of C++ itkDemonsRegistrationFilterIF3IF3IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDemonsRegistrationFilterIF3IF3IVF33_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDemonsRegistrationFilterIF3IF3IVF33_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_GetMetric(self)

    def SetUseMovingImageGradient(self, _arg):
        r"""
        SetUseMovingImageGradient(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_SetUseMovingImageGradient(self, _arg)

    def GetUseMovingImageGradient(self):
        r"""GetUseMovingImageGradient(self) -> bool"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_GetUseMovingImageGradient(self)

    def UseMovingImageGradientOn(self):
        r"""UseMovingImageGradientOn(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_UseMovingImageGradientOn(self)

    def UseMovingImageGradientOff(self):
        r"""UseMovingImageGradientOff(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_UseMovingImageGradientOff(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_GetIntensityDifferenceThreshold(self)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIF3IF3IVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDemonsRegistrationFilterIF3IF3IVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIF3IF3IVF33

        Create a new object of the class itkDemonsRegistrationFilterIF3IF3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIF3IF3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIF3IF3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIF3IF3IVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIF3IF3IVF33 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_swigregister(itkDemonsRegistrationFilterIF3IF3IVF33)

def itkDemonsRegistrationFilterIF4IF4IVF44_New():
    return itkDemonsRegistrationFilterIF4IF4IVF44.New()

class itkDemonsRegistrationFilterIF4IF4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44):
    r"""Proxy of C++ itkDemonsRegistrationFilterIF4IF4IVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDemonsRegistrationFilterIF4IF4IVF44_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF4IF4IVF44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDemonsRegistrationFilterIF4IF4IVF44_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF4IF4IVF44_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF4IF4IVF44_GetMetric(self)

    def SetUseMovingImageGradient(self, _arg):
        r"""
        SetUseMovingImageGradient(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF4IF4IVF44_SetUseMovingImageGradient(self, _arg)

    def GetUseMovingImageGradient(self):
        r"""GetUseMovingImageGradient(self) -> bool"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF4IF4IVF44_GetUseMovingImageGradient(self)

    def UseMovingImageGradientOn(self):
        r"""UseMovingImageGradientOn(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF4IF4IVF44_UseMovingImageGradientOn(self)

    def UseMovingImageGradientOff(self):
        r"""UseMovingImageGradientOff(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF4IF4IVF44_UseMovingImageGradientOff(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF4IF4IVF44_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF4IF4IVF44_GetIntensityDifferenceThreshold(self)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIF4IF4IVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDemonsRegistrationFilterIF4IF4IVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF4IF4IVF44_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIF4IF4IVF44

        Create a new object of the class itkDemonsRegistrationFilterIF4IF4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIF4IF4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIF4IF4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIF4IF4IVF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIF4IF4IVF44 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF4IF4IVF44_swigregister(itkDemonsRegistrationFilterIF4IF4IVF44)

def itkDemonsRegistrationFilterISS2ISS2IVF22_New():
    return itkDemonsRegistrationFilterISS2ISS2IVF22.New()

class itkDemonsRegistrationFilterISS2ISS2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22):
    r"""Proxy of C++ itkDemonsRegistrationFilterISS2ISS2IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDemonsRegistrationFilterISS2ISS2IVF22_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDemonsRegistrationFilterISS2ISS2IVF22_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_GetMetric(self)

    def SetUseMovingImageGradient(self, _arg):
        r"""
        SetUseMovingImageGradient(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_SetUseMovingImageGradient(self, _arg)

    def GetUseMovingImageGradient(self):
        r"""GetUseMovingImageGradient(self) -> bool"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_GetUseMovingImageGradient(self)

    def UseMovingImageGradientOn(self):
        r"""UseMovingImageGradientOn(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_UseMovingImageGradientOn(self)

    def UseMovingImageGradientOff(self):
        r"""UseMovingImageGradientOff(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_UseMovingImageGradientOff(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_GetIntensityDifferenceThreshold(self)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterISS2ISS2IVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDemonsRegistrationFilterISS2ISS2IVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterISS2ISS2IVF22

        Create a new object of the class itkDemonsRegistrationFilterISS2ISS2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterISS2ISS2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterISS2ISS2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterISS2ISS2IVF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterISS2ISS2IVF22 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_swigregister(itkDemonsRegistrationFilterISS2ISS2IVF22)

def itkDemonsRegistrationFilterISS3ISS3IVF33_New():
    return itkDemonsRegistrationFilterISS3ISS3IVF33.New()

class itkDemonsRegistrationFilterISS3ISS3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33):
    r"""Proxy of C++ itkDemonsRegistrationFilterISS3ISS3IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDemonsRegistrationFilterISS3ISS3IVF33_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDemonsRegistrationFilterISS3ISS3IVF33_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_GetMetric(self)

    def SetUseMovingImageGradient(self, _arg):
        r"""
        SetUseMovingImageGradient(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_SetUseMovingImageGradient(self, _arg)

    def GetUseMovingImageGradient(self):
        r"""GetUseMovingImageGradient(self) -> bool"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_GetUseMovingImageGradient(self)

    def UseMovingImageGradientOn(self):
        r"""UseMovingImageGradientOn(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_UseMovingImageGradientOn(self)

    def UseMovingImageGradientOff(self):
        r"""UseMovingImageGradientOff(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_UseMovingImageGradientOff(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_GetIntensityDifferenceThreshold(self)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterISS3ISS3IVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDemonsRegistrationFilterISS3ISS3IVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterISS3ISS3IVF33

        Create a new object of the class itkDemonsRegistrationFilterISS3ISS3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterISS3ISS3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterISS3ISS3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterISS3ISS3IVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterISS3ISS3IVF33 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_swigregister(itkDemonsRegistrationFilterISS3ISS3IVF33)

def itkDemonsRegistrationFilterISS4ISS4IVF44_New():
    return itkDemonsRegistrationFilterISS4ISS4IVF44.New()

class itkDemonsRegistrationFilterISS4ISS4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44):
    r"""Proxy of C++ itkDemonsRegistrationFilterISS4ISS4IVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDemonsRegistrationFilterISS4ISS4IVF44_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS4ISS4IVF44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDemonsRegistrationFilterISS4ISS4IVF44_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS4ISS4IVF44_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS4ISS4IVF44_GetMetric(self)

    def SetUseMovingImageGradient(self, _arg):
        r"""
        SetUseMovingImageGradient(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS4ISS4IVF44_SetUseMovingImageGradient(self, _arg)

    def GetUseMovingImageGradient(self):
        r"""GetUseMovingImageGradient(self) -> bool"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS4ISS4IVF44_GetUseMovingImageGradient(self)

    def UseMovingImageGradientOn(self):
        r"""UseMovingImageGradientOn(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS4ISS4IVF44_UseMovingImageGradientOn(self)

    def UseMovingImageGradientOff(self):
        r"""UseMovingImageGradientOff(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS4ISS4IVF44_UseMovingImageGradientOff(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS4ISS4IVF44_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS4ISS4IVF44_GetIntensityDifferenceThreshold(self)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterISS4ISS4IVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDemonsRegistrationFilterISS4ISS4IVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS4ISS4IVF44_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterISS4ISS4IVF44

        Create a new object of the class itkDemonsRegistrationFilterISS4ISS4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterISS4ISS4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterISS4ISS4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterISS4ISS4IVF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterISS4ISS4IVF44 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS4ISS4IVF44_swigregister(itkDemonsRegistrationFilterISS4ISS4IVF44)

def itkDemonsRegistrationFilterIUC2IUC2IVF22_New():
    return itkDemonsRegistrationFilterIUC2IUC2IVF22.New()

class itkDemonsRegistrationFilterIUC2IUC2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22):
    r"""Proxy of C++ itkDemonsRegistrationFilterIUC2IUC2IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDemonsRegistrationFilterIUC2IUC2IVF22_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDemonsRegistrationFilterIUC2IUC2IVF22_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_GetMetric(self)

    def SetUseMovingImageGradient(self, _arg):
        r"""
        SetUseMovingImageGradient(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_SetUseMovingImageGradient(self, _arg)

    def GetUseMovingImageGradient(self):
        r"""GetUseMovingImageGradient(self) -> bool"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_GetUseMovingImageGradient(self)

    def UseMovingImageGradientOn(self):
        r"""UseMovingImageGradientOn(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_UseMovingImageGradientOn(self)

    def UseMovingImageGradientOff(self):
        r"""UseMovingImageGradientOff(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_UseMovingImageGradientOff(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_GetIntensityDifferenceThreshold(self)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIUC2IUC2IVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDemonsRegistrationFilterIUC2IUC2IVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIUC2IUC2IVF22

        Create a new object of the class itkDemonsRegistrationFilterIUC2IUC2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIUC2IUC2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIUC2IUC2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIUC2IUC2IVF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIUC2IUC2IVF22 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_swigregister(itkDemonsRegistrationFilterIUC2IUC2IVF22)

def itkDemonsRegistrationFilterIUC3IUC3IVF33_New():
    return itkDemonsRegistrationFilterIUC3IUC3IVF33.New()

class itkDemonsRegistrationFilterIUC3IUC3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33):
    r"""Proxy of C++ itkDemonsRegistrationFilterIUC3IUC3IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDemonsRegistrationFilterIUC3IUC3IVF33_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDemonsRegistrationFilterIUC3IUC3IVF33_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_GetMetric(self)

    def SetUseMovingImageGradient(self, _arg):
        r"""
        SetUseMovingImageGradient(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_SetUseMovingImageGradient(self, _arg)

    def GetUseMovingImageGradient(self):
        r"""GetUseMovingImageGradient(self) -> bool"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_GetUseMovingImageGradient(self)

    def UseMovingImageGradientOn(self):
        r"""UseMovingImageGradientOn(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_UseMovingImageGradientOn(self)

    def UseMovingImageGradientOff(self):
        r"""UseMovingImageGradientOff(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_UseMovingImageGradientOff(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_GetIntensityDifferenceThreshold(self)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIUC3IUC3IVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDemonsRegistrationFilterIUC3IUC3IVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIUC3IUC3IVF33

        Create a new object of the class itkDemonsRegistrationFilterIUC3IUC3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIUC3IUC3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIUC3IUC3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIUC3IUC3IVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIUC3IUC3IVF33 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_swigregister(itkDemonsRegistrationFilterIUC3IUC3IVF33)

def itkDemonsRegistrationFilterIUC4IUC4IVF44_New():
    return itkDemonsRegistrationFilterIUC4IUC4IVF44.New()

class itkDemonsRegistrationFilterIUC4IUC4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44):
    r"""Proxy of C++ itkDemonsRegistrationFilterIUC4IUC4IVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDemonsRegistrationFilterIUC4IUC4IVF44_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC4IUC4IVF44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDemonsRegistrationFilterIUC4IUC4IVF44_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC4IUC4IVF44_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC4IUC4IVF44_GetMetric(self)

    def SetUseMovingImageGradient(self, _arg):
        r"""
        SetUseMovingImageGradient(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC4IUC4IVF44_SetUseMovingImageGradient(self, _arg)

    def GetUseMovingImageGradient(self):
        r"""GetUseMovingImageGradient(self) -> bool"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC4IUC4IVF44_GetUseMovingImageGradient(self)

    def UseMovingImageGradientOn(self):
        r"""UseMovingImageGradientOn(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC4IUC4IVF44_UseMovingImageGradientOn(self)

    def UseMovingImageGradientOff(self):
        r"""UseMovingImageGradientOff(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC4IUC4IVF44_UseMovingImageGradientOff(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC4IUC4IVF44_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC4IUC4IVF44_GetIntensityDifferenceThreshold(self)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIUC4IUC4IVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDemonsRegistrationFilterIUC4IUC4IVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC4IUC4IVF44_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIUC4IUC4IVF44

        Create a new object of the class itkDemonsRegistrationFilterIUC4IUC4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIUC4IUC4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIUC4IUC4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIUC4IUC4IVF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIUC4IUC4IVF44 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC4IUC4IVF44_swigregister(itkDemonsRegistrationFilterIUC4IUC4IVF44)

def itkDemonsRegistrationFilterIUS2IUS2IVF22_New():
    return itkDemonsRegistrationFilterIUS2IUS2IVF22.New()

class itkDemonsRegistrationFilterIUS2IUS2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22):
    r"""Proxy of C++ itkDemonsRegistrationFilterIUS2IUS2IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDemonsRegistrationFilterIUS2IUS2IVF22_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDemonsRegistrationFilterIUS2IUS2IVF22_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_GetMetric(self)

    def SetUseMovingImageGradient(self, _arg):
        r"""
        SetUseMovingImageGradient(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_SetUseMovingImageGradient(self, _arg)

    def GetUseMovingImageGradient(self):
        r"""GetUseMovingImageGradient(self) -> bool"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_GetUseMovingImageGradient(self)

    def UseMovingImageGradientOn(self):
        r"""UseMovingImageGradientOn(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_UseMovingImageGradientOn(self)

    def UseMovingImageGradientOff(self):
        r"""UseMovingImageGradientOff(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_UseMovingImageGradientOff(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_GetIntensityDifferenceThreshold(self)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIUS2IUS2IVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDemonsRegistrationFilterIUS2IUS2IVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIUS2IUS2IVF22

        Create a new object of the class itkDemonsRegistrationFilterIUS2IUS2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIUS2IUS2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIUS2IUS2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIUS2IUS2IVF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIUS2IUS2IVF22 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_swigregister(itkDemonsRegistrationFilterIUS2IUS2IVF22)

def itkDemonsRegistrationFilterIUS3IUS3IVF33_New():
    return itkDemonsRegistrationFilterIUS3IUS3IVF33.New()

class itkDemonsRegistrationFilterIUS3IUS3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33):
    r"""Proxy of C++ itkDemonsRegistrationFilterIUS3IUS3IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDemonsRegistrationFilterIUS3IUS3IVF33_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDemonsRegistrationFilterIUS3IUS3IVF33_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_GetMetric(self)

    def SetUseMovingImageGradient(self, _arg):
        r"""
        SetUseMovingImageGradient(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_SetUseMovingImageGradient(self, _arg)

    def GetUseMovingImageGradient(self):
        r"""GetUseMovingImageGradient(self) -> bool"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_GetUseMovingImageGradient(self)

    def UseMovingImageGradientOn(self):
        r"""UseMovingImageGradientOn(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_UseMovingImageGradientOn(self)

    def UseMovingImageGradientOff(self):
        r"""UseMovingImageGradientOff(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_UseMovingImageGradientOff(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_GetIntensityDifferenceThreshold(self)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIUS3IUS3IVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDemonsRegistrationFilterIUS3IUS3IVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIUS3IUS3IVF33

        Create a new object of the class itkDemonsRegistrationFilterIUS3IUS3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIUS3IUS3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIUS3IUS3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIUS3IUS3IVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIUS3IUS3IVF33 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_swigregister(itkDemonsRegistrationFilterIUS3IUS3IVF33)

def itkDemonsRegistrationFilterIUS4IUS4IVF44_New():
    return itkDemonsRegistrationFilterIUS4IUS4IVF44.New()

class itkDemonsRegistrationFilterIUS4IUS4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44):
    r"""Proxy of C++ itkDemonsRegistrationFilterIUS4IUS4IVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkDemonsRegistrationFilterIUS4IUS4IVF44_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS4IUS4IVF44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkDemonsRegistrationFilterIUS4IUS4IVF44_Pointer"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS4IUS4IVF44_Clone(self)

    def GetMetric(self):
        r"""GetMetric(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS4IUS4IVF44_GetMetric(self)

    def SetUseMovingImageGradient(self, _arg):
        r"""
        SetUseMovingImageGradient(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS4IUS4IVF44_SetUseMovingImageGradient(self, _arg)

    def GetUseMovingImageGradient(self):
        r"""GetUseMovingImageGradient(self) -> bool"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS4IUS4IVF44_GetUseMovingImageGradient(self)

    def UseMovingImageGradientOn(self):
        r"""UseMovingImageGradientOn(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS4IUS4IVF44_UseMovingImageGradientOn(self)

    def UseMovingImageGradientOff(self):
        r"""UseMovingImageGradientOff(self)"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS4IUS4IVF44_UseMovingImageGradientOff(self)

    def SetIntensityDifferenceThreshold(self, arg0):
        r"""
        SetIntensityDifferenceThreshold(self, arg0)

        Parameters
        ----------
        arg0: double

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS4IUS4IVF44_SetIntensityDifferenceThreshold(self, arg0)

    def GetIntensityDifferenceThreshold(self):
        r"""GetIntensityDifferenceThreshold(self) -> double"""
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS4IUS4IVF44_GetIntensityDifferenceThreshold(self)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIUS4IUS4IVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDemonsRegistrationFilterIUS4IUS4IVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS4IUS4IVF44_cast(obj)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIUS4IUS4IVF44

        Create a new object of the class itkDemonsRegistrationFilterIUS4IUS4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIUS4IUS4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIUS4IUS4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIUS4IUS4IVF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIUS4IUS4IVF44 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS4IUS4IVF44_swigregister(itkDemonsRegistrationFilterIUS4IUS4IVF44)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def demons_registration_filter(*args: itkt.ImageLike,  use_moving_image_gradient: bool=..., intensity_difference_threshold: float=..., fixed_image: itkt.Image=..., moving_image: itkt.Image=..., initial_displacement_field: itkt.Image=..., smooth_displacement_field: bool=..., standard_deviations: Union[Sequence[float], float]=..., smooth_update_field: bool=..., update_field_standard_deviations: Union[Sequence[float], float]=..., maximum_error: float=..., maximum_kernel_width: int=..., difference_function=..., number_of_iterations: int=..., use_image_spacing: bool=..., maximum_rms_error: float=..., rms_change: float=..., manual_reinitialization: bool=..., is_initialized: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for DemonsRegistrationFilter"""
    import itk

    kwarg_typehints = { 'use_moving_image_gradient':use_moving_image_gradient,'intensity_difference_threshold':intensity_difference_threshold,'fixed_image':fixed_image,'moving_image':moving_image,'initial_displacement_field':initial_displacement_field,'smooth_displacement_field':smooth_displacement_field,'standard_deviations':standard_deviations,'smooth_update_field':smooth_update_field,'update_field_standard_deviations':update_field_standard_deviations,'maximum_error':maximum_error,'maximum_kernel_width':maximum_kernel_width,'difference_function':difference_function,'number_of_iterations':number_of_iterations,'use_image_spacing':use_image_spacing,'maximum_rms_error':maximum_rms_error,'rms_change':rms_change,'manual_reinitialization':manual_reinitialization,'is_initialized':is_initialized }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.DemonsRegistrationFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def demons_registration_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKPDEDeformableRegistration.DemonsRegistrationFilter
    demons_registration_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    demons_registration_filter.__doc__ = filter_object.__doc__



