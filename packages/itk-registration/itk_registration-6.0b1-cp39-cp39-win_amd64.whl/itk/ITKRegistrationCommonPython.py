# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ITKRegistrationCommonPython
else:
    import _ITKRegistrationCommonPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



swig = {}
import itk.ITKPyBasePython
import itk.ITKStatisticsPython
import itk.ITKSpatialObjectsPython
import itk.ITKSmoothingPython
import itk.ITKOptimizersPython
import itk.ITKImageIntensityPython
import itk.ITKImageGridPython
import itk.ITKImageGradientPython
import itk.ITKImageFunctionPython
import itk.ITKImageFeaturePython
import itk.ITKFiniteDifferencePython
import itk.ITKDisplacementFieldPython
from itk.itkTransformParametersAdaptorBasePython import *
from itk.itkRecursiveMultiResolutionPyramidImageFilterPython import *
from itk.itkPointsLocatorPython import *
from itk.itkPointSetToPointSetRegistrationMethodPython import *
from itk.itkPointSetToPointSetMetricPython import *
from itk.itkPDEDeformableRegistrationFunctionPython import *
from itk.itkNormalizedCorrelationImageToImageMetricPython import *
from itk.itkMutualInformationImageToImageMetricPython import *
from itk.itkMultiResolutionPyramidImageFilterPython import *
from itk.itkMultiResolutionImageRegistrationMethodPython import *
from itk.itkMeanSquaresImageToImageMetricPython import *
from itk.itkMeanReciprocalSquareDifferenceImageToImageMetricPython import *
from itk.itkMattesMutualInformationImageToImageMetricPython import *
from itk.itkMatchCardinalityImageToImageMetricPython import *
from itk.itkLandmarkBasedTransformInitializerPython import *
from itk.itkImageToImageMetricPython import *
from itk.itkImageRegistrationMethodPython import *
from itk.itkGradientDifferenceImageToImageMetricPython import *
from itk.itkCenteredVersorTransformInitializerPython import *
from itk.itkCenteredTransformInitializerPython import *
from itk.itkBlockMatchingImageFilterPython import *



