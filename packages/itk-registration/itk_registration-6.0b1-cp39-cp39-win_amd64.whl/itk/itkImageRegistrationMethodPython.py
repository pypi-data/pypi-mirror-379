# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKRegistrationCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageRegistrationMethodPython
else:
    import _itkImageRegistrationMethodPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkInterpolateImageFunctionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageFunctionBasePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkContinuousIndexPython
import itk.itkFunctionBasePython
import itk.itkArrayPython
import itk.itkImageToImageMetricPython
import itk.ITKCostFunctionsPython
import itk.itkOptimizerParametersPython
import itk.vnl_cost_functionPython
import itk.vnl_unary_functionPython
import itk.itkCostFunctionPython
import itk.itkArray2DPython
import itk.vnl_least_squares_functionPython
import itk.itkSpatialObjectBasePython
import itk.itkBoundingBoxPython
import itk.itkMapContainerPython
import itk.itkVectorContainerPython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkVariableLengthVectorPython
import itk.itkDiffusionTensor3DPython
import itk.itkTransformBasePython
import itk.itkSpatialObjectPropertyPython
import itk.ITKOptimizersBasePython

def itkImageRegistrationMethodID2ID2_New():
    return itkImageRegistrationMethodID2ID2.New()

class itkImageRegistrationMethodID2ID2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageRegistrationMethodID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageRegistrationMethodID2ID2_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageRegistrationMethodID2ID2_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_Clone(self)

    def SetFixedImage(self, fixedImage):
        r"""
        SetFixedImage(self, fixedImage)

        Parameters
        ----------
        fixedImage: itkImageD2 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetFixedImage(self, fixedImage)

    def GetFixedImage(self):
        r"""GetFixedImage(self) -> itkImageD2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetFixedImage(self)

    def SetMovingImage(self, movingImage):
        r"""
        SetMovingImage(self, movingImage)

        Parameters
        ----------
        movingImage: itkImageD2 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetMovingImage(self, movingImage)

    def GetMovingImage(self):
        r"""GetMovingImage(self) -> itkImageD2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetMovingImage(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetOptimizer(self, _arg)

    def GetModifiableOptimizer(self):
        r"""GetModifiableOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetModifiableOptimizer(self)

    def GetOptimizer(self, *args):
        r"""
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetOptimizer(self, *args)

    def SetMetric(self, _arg):
        r"""
        SetMetric(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageMetricID2ID2 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetMetric(self, _arg)

    def GetModifiableMetric(self):
        r"""GetModifiableMetric(self) -> itkImageToImageMetricID2ID2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetModifiableMetric(self)

    def GetMetric(self, *args):
        r"""
        GetMetric(self) -> itkImageToImageMetricID2ID2
        GetMetric(self) -> itkImageToImageMetricID2ID2
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetMetric(self, *args)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD22 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformD22"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformD22
        GetTransform(self) -> itkTransformD22
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionID2D *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionID2D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionID2D
        GetInterpolator(self) -> itkInterpolateImageFunctionID2D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetInterpolator(self, *args)

    def SetInitialTransformParameters(self, param):
        r"""
        SetInitialTransformParameters(self, param)

        Parameters
        ----------
        param: itkOptimizerParametersD const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetInitialTransformParameters(self, param)

    def GetInitialTransformParameters(self):
        r"""GetInitialTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetInitialTransformParameters(self)

    def GetLastTransformParameters(self):
        r"""GetLastTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetLastTransformParameters(self)

    def SetFixedImageRegion(self, region):
        r"""
        SetFixedImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetFixedImageRegion(self, region)

    def GetFixedImageRegion(self):
        r"""GetFixedImageRegion(self) -> itkImageRegion2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetFixedImageRegion(self)

    def GetFixedImageRegionDefined(self):
        r"""GetFixedImageRegionDefined(self) -> bool"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetFixedImageRegionDefined(self)

    def SetFixedImageRegionDefined(self, _arg):
        r"""
        SetFixedImageRegionDefined(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetFixedImageRegionDefined(self, _arg)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_Initialize(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkDataObjectDecoratorTD22"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetOutput(self)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageRegistrationMethodID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodID2ID2

        Create a new object of the class itkImageRegistrationMethodID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodID2ID2 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_swigregister(itkImageRegistrationMethodID2ID2)

def itkImageRegistrationMethodID3ID3_New():
    return itkImageRegistrationMethodID3ID3.New()

class itkImageRegistrationMethodID3ID3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageRegistrationMethodID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageRegistrationMethodID3ID3_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageRegistrationMethodID3ID3_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_Clone(self)

    def SetFixedImage(self, fixedImage):
        r"""
        SetFixedImage(self, fixedImage)

        Parameters
        ----------
        fixedImage: itkImageD3 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetFixedImage(self, fixedImage)

    def GetFixedImage(self):
        r"""GetFixedImage(self) -> itkImageD3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetFixedImage(self)

    def SetMovingImage(self, movingImage):
        r"""
        SetMovingImage(self, movingImage)

        Parameters
        ----------
        movingImage: itkImageD3 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetMovingImage(self, movingImage)

    def GetMovingImage(self):
        r"""GetMovingImage(self) -> itkImageD3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetMovingImage(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetOptimizer(self, _arg)

    def GetModifiableOptimizer(self):
        r"""GetModifiableOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetModifiableOptimizer(self)

    def GetOptimizer(self, *args):
        r"""
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetOptimizer(self, *args)

    def SetMetric(self, _arg):
        r"""
        SetMetric(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageMetricID3ID3 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetMetric(self, _arg)

    def GetModifiableMetric(self):
        r"""GetModifiableMetric(self) -> itkImageToImageMetricID3ID3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetModifiableMetric(self)

    def GetMetric(self, *args):
        r"""
        GetMetric(self) -> itkImageToImageMetricID3ID3
        GetMetric(self) -> itkImageToImageMetricID3ID3
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetMetric(self, *args)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD33 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformD33"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformD33
        GetTransform(self) -> itkTransformD33
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionID3D *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionID3D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionID3D
        GetInterpolator(self) -> itkInterpolateImageFunctionID3D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetInterpolator(self, *args)

    def SetInitialTransformParameters(self, param):
        r"""
        SetInitialTransformParameters(self, param)

        Parameters
        ----------
        param: itkOptimizerParametersD const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetInitialTransformParameters(self, param)

    def GetInitialTransformParameters(self):
        r"""GetInitialTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetInitialTransformParameters(self)

    def GetLastTransformParameters(self):
        r"""GetLastTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetLastTransformParameters(self)

    def SetFixedImageRegion(self, region):
        r"""
        SetFixedImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetFixedImageRegion(self, region)

    def GetFixedImageRegion(self):
        r"""GetFixedImageRegion(self) -> itkImageRegion3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetFixedImageRegion(self)

    def GetFixedImageRegionDefined(self):
        r"""GetFixedImageRegionDefined(self) -> bool"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetFixedImageRegionDefined(self)

    def SetFixedImageRegionDefined(self, _arg):
        r"""
        SetFixedImageRegionDefined(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetFixedImageRegionDefined(self, _arg)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_Initialize(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkDataObjectDecoratorTD33"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetOutput(self)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageRegistrationMethodID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodID3ID3

        Create a new object of the class itkImageRegistrationMethodID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodID3ID3 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_swigregister(itkImageRegistrationMethodID3ID3)

def itkImageRegistrationMethodID4ID4_New():
    return itkImageRegistrationMethodID4ID4.New()

class itkImageRegistrationMethodID4ID4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageRegistrationMethodID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageRegistrationMethodID4ID4_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageRegistrationMethodID4ID4_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_Clone(self)

    def SetFixedImage(self, fixedImage):
        r"""
        SetFixedImage(self, fixedImage)

        Parameters
        ----------
        fixedImage: itkImageD4 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_SetFixedImage(self, fixedImage)

    def GetFixedImage(self):
        r"""GetFixedImage(self) -> itkImageD4"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetFixedImage(self)

    def SetMovingImage(self, movingImage):
        r"""
        SetMovingImage(self, movingImage)

        Parameters
        ----------
        movingImage: itkImageD4 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_SetMovingImage(self, movingImage)

    def GetMovingImage(self):
        r"""GetMovingImage(self) -> itkImageD4"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetMovingImage(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_SetOptimizer(self, _arg)

    def GetModifiableOptimizer(self):
        r"""GetModifiableOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetModifiableOptimizer(self)

    def GetOptimizer(self, *args):
        r"""
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetOptimizer(self, *args)

    def SetMetric(self, _arg):
        r"""
        SetMetric(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageMetricID4ID4 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_SetMetric(self, _arg)

    def GetModifiableMetric(self):
        r"""GetModifiableMetric(self) -> itkImageToImageMetricID4ID4"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetModifiableMetric(self)

    def GetMetric(self, *args):
        r"""
        GetMetric(self) -> itkImageToImageMetricID4ID4
        GetMetric(self) -> itkImageToImageMetricID4ID4
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetMetric(self, *args)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD44 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformD44"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformD44
        GetTransform(self) -> itkTransformD44
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionID4D *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionID4D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionID4D
        GetInterpolator(self) -> itkInterpolateImageFunctionID4D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetInterpolator(self, *args)

    def SetInitialTransformParameters(self, param):
        r"""
        SetInitialTransformParameters(self, param)

        Parameters
        ----------
        param: itkOptimizerParametersD const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_SetInitialTransformParameters(self, param)

    def GetInitialTransformParameters(self):
        r"""GetInitialTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetInitialTransformParameters(self)

    def GetLastTransformParameters(self):
        r"""GetLastTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetLastTransformParameters(self)

    def SetFixedImageRegion(self, region):
        r"""
        SetFixedImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_SetFixedImageRegion(self, region)

    def GetFixedImageRegion(self):
        r"""GetFixedImageRegion(self) -> itkImageRegion4"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetFixedImageRegion(self)

    def GetFixedImageRegionDefined(self):
        r"""GetFixedImageRegionDefined(self) -> bool"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetFixedImageRegionDefined(self)

    def SetFixedImageRegionDefined(self, _arg):
        r"""
        SetFixedImageRegionDefined(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_SetFixedImageRegionDefined(self, _arg)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_Initialize(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkDataObjectDecoratorTD44"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetOutput(self)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageRegistrationMethodID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodID4ID4

        Create a new object of the class itkImageRegistrationMethodID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodID4ID4 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_swigregister(itkImageRegistrationMethodID4ID4)

def itkImageRegistrationMethodIF2IF2_New():
    return itkImageRegistrationMethodIF2IF2.New()

class itkImageRegistrationMethodIF2IF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageRegistrationMethodIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageRegistrationMethodIF2IF2_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageRegistrationMethodIF2IF2_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_Clone(self)

    def SetFixedImage(self, fixedImage):
        r"""
        SetFixedImage(self, fixedImage)

        Parameters
        ----------
        fixedImage: itkImageF2 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetFixedImage(self, fixedImage)

    def GetFixedImage(self):
        r"""GetFixedImage(self) -> itkImageF2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetFixedImage(self)

    def SetMovingImage(self, movingImage):
        r"""
        SetMovingImage(self, movingImage)

        Parameters
        ----------
        movingImage: itkImageF2 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetMovingImage(self, movingImage)

    def GetMovingImage(self):
        r"""GetMovingImage(self) -> itkImageF2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetMovingImage(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetOptimizer(self, _arg)

    def GetModifiableOptimizer(self):
        r"""GetModifiableOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetModifiableOptimizer(self)

    def GetOptimizer(self, *args):
        r"""
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetOptimizer(self, *args)

    def SetMetric(self, _arg):
        r"""
        SetMetric(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageMetricIF2IF2 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetMetric(self, _arg)

    def GetModifiableMetric(self):
        r"""GetModifiableMetric(self) -> itkImageToImageMetricIF2IF2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetModifiableMetric(self)

    def GetMetric(self, *args):
        r"""
        GetMetric(self) -> itkImageToImageMetricIF2IF2
        GetMetric(self) -> itkImageToImageMetricIF2IF2
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetMetric(self, *args)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD22 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformD22"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformD22
        GetTransform(self) -> itkTransformD22
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIF2D *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionIF2D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionIF2D
        GetInterpolator(self) -> itkInterpolateImageFunctionIF2D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetInterpolator(self, *args)

    def SetInitialTransformParameters(self, param):
        r"""
        SetInitialTransformParameters(self, param)

        Parameters
        ----------
        param: itkOptimizerParametersD const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetInitialTransformParameters(self, param)

    def GetInitialTransformParameters(self):
        r"""GetInitialTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetInitialTransformParameters(self)

    def GetLastTransformParameters(self):
        r"""GetLastTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetLastTransformParameters(self)

    def SetFixedImageRegion(self, region):
        r"""
        SetFixedImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetFixedImageRegion(self, region)

    def GetFixedImageRegion(self):
        r"""GetFixedImageRegion(self) -> itkImageRegion2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetFixedImageRegion(self)

    def GetFixedImageRegionDefined(self):
        r"""GetFixedImageRegionDefined(self) -> bool"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetFixedImageRegionDefined(self)

    def SetFixedImageRegionDefined(self, _arg):
        r"""
        SetFixedImageRegionDefined(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetFixedImageRegionDefined(self, _arg)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_Initialize(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkDataObjectDecoratorTD22"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetOutput(self)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageRegistrationMethodIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodIF2IF2

        Create a new object of the class itkImageRegistrationMethodIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodIF2IF2 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_swigregister(itkImageRegistrationMethodIF2IF2)

def itkImageRegistrationMethodIF3IF3_New():
    return itkImageRegistrationMethodIF3IF3.New()

class itkImageRegistrationMethodIF3IF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageRegistrationMethodIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageRegistrationMethodIF3IF3_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageRegistrationMethodIF3IF3_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_Clone(self)

    def SetFixedImage(self, fixedImage):
        r"""
        SetFixedImage(self, fixedImage)

        Parameters
        ----------
        fixedImage: itkImageF3 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetFixedImage(self, fixedImage)

    def GetFixedImage(self):
        r"""GetFixedImage(self) -> itkImageF3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetFixedImage(self)

    def SetMovingImage(self, movingImage):
        r"""
        SetMovingImage(self, movingImage)

        Parameters
        ----------
        movingImage: itkImageF3 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetMovingImage(self, movingImage)

    def GetMovingImage(self):
        r"""GetMovingImage(self) -> itkImageF3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetMovingImage(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetOptimizer(self, _arg)

    def GetModifiableOptimizer(self):
        r"""GetModifiableOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetModifiableOptimizer(self)

    def GetOptimizer(self, *args):
        r"""
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetOptimizer(self, *args)

    def SetMetric(self, _arg):
        r"""
        SetMetric(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageMetricIF3IF3 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetMetric(self, _arg)

    def GetModifiableMetric(self):
        r"""GetModifiableMetric(self) -> itkImageToImageMetricIF3IF3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetModifiableMetric(self)

    def GetMetric(self, *args):
        r"""
        GetMetric(self) -> itkImageToImageMetricIF3IF3
        GetMetric(self) -> itkImageToImageMetricIF3IF3
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetMetric(self, *args)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD33 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformD33"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformD33
        GetTransform(self) -> itkTransformD33
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIF3D *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionIF3D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionIF3D
        GetInterpolator(self) -> itkInterpolateImageFunctionIF3D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetInterpolator(self, *args)

    def SetInitialTransformParameters(self, param):
        r"""
        SetInitialTransformParameters(self, param)

        Parameters
        ----------
        param: itkOptimizerParametersD const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetInitialTransformParameters(self, param)

    def GetInitialTransformParameters(self):
        r"""GetInitialTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetInitialTransformParameters(self)

    def GetLastTransformParameters(self):
        r"""GetLastTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetLastTransformParameters(self)

    def SetFixedImageRegion(self, region):
        r"""
        SetFixedImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetFixedImageRegion(self, region)

    def GetFixedImageRegion(self):
        r"""GetFixedImageRegion(self) -> itkImageRegion3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetFixedImageRegion(self)

    def GetFixedImageRegionDefined(self):
        r"""GetFixedImageRegionDefined(self) -> bool"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetFixedImageRegionDefined(self)

    def SetFixedImageRegionDefined(self, _arg):
        r"""
        SetFixedImageRegionDefined(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetFixedImageRegionDefined(self, _arg)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_Initialize(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkDataObjectDecoratorTD33"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetOutput(self)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageRegistrationMethodIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodIF3IF3

        Create a new object of the class itkImageRegistrationMethodIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodIF3IF3 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_swigregister(itkImageRegistrationMethodIF3IF3)

def itkImageRegistrationMethodIF4IF4_New():
    return itkImageRegistrationMethodIF4IF4.New()

class itkImageRegistrationMethodIF4IF4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageRegistrationMethodIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageRegistrationMethodIF4IF4_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageRegistrationMethodIF4IF4_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_Clone(self)

    def SetFixedImage(self, fixedImage):
        r"""
        SetFixedImage(self, fixedImage)

        Parameters
        ----------
        fixedImage: itkImageF4 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_SetFixedImage(self, fixedImage)

    def GetFixedImage(self):
        r"""GetFixedImage(self) -> itkImageF4"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetFixedImage(self)

    def SetMovingImage(self, movingImage):
        r"""
        SetMovingImage(self, movingImage)

        Parameters
        ----------
        movingImage: itkImageF4 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_SetMovingImage(self, movingImage)

    def GetMovingImage(self):
        r"""GetMovingImage(self) -> itkImageF4"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetMovingImage(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_SetOptimizer(self, _arg)

    def GetModifiableOptimizer(self):
        r"""GetModifiableOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetModifiableOptimizer(self)

    def GetOptimizer(self, *args):
        r"""
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetOptimizer(self, *args)

    def SetMetric(self, _arg):
        r"""
        SetMetric(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageMetricIF4IF4 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_SetMetric(self, _arg)

    def GetModifiableMetric(self):
        r"""GetModifiableMetric(self) -> itkImageToImageMetricIF4IF4"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetModifiableMetric(self)

    def GetMetric(self, *args):
        r"""
        GetMetric(self) -> itkImageToImageMetricIF4IF4
        GetMetric(self) -> itkImageToImageMetricIF4IF4
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetMetric(self, *args)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD44 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformD44"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformD44
        GetTransform(self) -> itkTransformD44
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIF4D *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionIF4D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionIF4D
        GetInterpolator(self) -> itkInterpolateImageFunctionIF4D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetInterpolator(self, *args)

    def SetInitialTransformParameters(self, param):
        r"""
        SetInitialTransformParameters(self, param)

        Parameters
        ----------
        param: itkOptimizerParametersD const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_SetInitialTransformParameters(self, param)

    def GetInitialTransformParameters(self):
        r"""GetInitialTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetInitialTransformParameters(self)

    def GetLastTransformParameters(self):
        r"""GetLastTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetLastTransformParameters(self)

    def SetFixedImageRegion(self, region):
        r"""
        SetFixedImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_SetFixedImageRegion(self, region)

    def GetFixedImageRegion(self):
        r"""GetFixedImageRegion(self) -> itkImageRegion4"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetFixedImageRegion(self)

    def GetFixedImageRegionDefined(self):
        r"""GetFixedImageRegionDefined(self) -> bool"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetFixedImageRegionDefined(self)

    def SetFixedImageRegionDefined(self, _arg):
        r"""
        SetFixedImageRegionDefined(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_SetFixedImageRegionDefined(self, _arg)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_Initialize(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkDataObjectDecoratorTD44"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetOutput(self)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageRegistrationMethodIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodIF4IF4

        Create a new object of the class itkImageRegistrationMethodIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodIF4IF4 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_swigregister(itkImageRegistrationMethodIF4IF4)

def itkImageRegistrationMethodISS2ISS2_New():
    return itkImageRegistrationMethodISS2ISS2.New()

class itkImageRegistrationMethodISS2ISS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageRegistrationMethodISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageRegistrationMethodISS2ISS2_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageRegistrationMethodISS2ISS2_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_Clone(self)

    def SetFixedImage(self, fixedImage):
        r"""
        SetFixedImage(self, fixedImage)

        Parameters
        ----------
        fixedImage: itkImageSS2 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetFixedImage(self, fixedImage)

    def GetFixedImage(self):
        r"""GetFixedImage(self) -> itkImageSS2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetFixedImage(self)

    def SetMovingImage(self, movingImage):
        r"""
        SetMovingImage(self, movingImage)

        Parameters
        ----------
        movingImage: itkImageSS2 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetMovingImage(self, movingImage)

    def GetMovingImage(self):
        r"""GetMovingImage(self) -> itkImageSS2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetMovingImage(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetOptimizer(self, _arg)

    def GetModifiableOptimizer(self):
        r"""GetModifiableOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetModifiableOptimizer(self)

    def GetOptimizer(self, *args):
        r"""
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetOptimizer(self, *args)

    def SetMetric(self, _arg):
        r"""
        SetMetric(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageMetricISS2ISS2 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetMetric(self, _arg)

    def GetModifiableMetric(self):
        r"""GetModifiableMetric(self) -> itkImageToImageMetricISS2ISS2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetModifiableMetric(self)

    def GetMetric(self, *args):
        r"""
        GetMetric(self) -> itkImageToImageMetricISS2ISS2
        GetMetric(self) -> itkImageToImageMetricISS2ISS2
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetMetric(self, *args)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD22 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformD22"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformD22
        GetTransform(self) -> itkTransformD22
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionISS2D *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionISS2D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionISS2D
        GetInterpolator(self) -> itkInterpolateImageFunctionISS2D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetInterpolator(self, *args)

    def SetInitialTransformParameters(self, param):
        r"""
        SetInitialTransformParameters(self, param)

        Parameters
        ----------
        param: itkOptimizerParametersD const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetInitialTransformParameters(self, param)

    def GetInitialTransformParameters(self):
        r"""GetInitialTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetInitialTransformParameters(self)

    def GetLastTransformParameters(self):
        r"""GetLastTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetLastTransformParameters(self)

    def SetFixedImageRegion(self, region):
        r"""
        SetFixedImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetFixedImageRegion(self, region)

    def GetFixedImageRegion(self):
        r"""GetFixedImageRegion(self) -> itkImageRegion2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetFixedImageRegion(self)

    def GetFixedImageRegionDefined(self):
        r"""GetFixedImageRegionDefined(self) -> bool"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetFixedImageRegionDefined(self)

    def SetFixedImageRegionDefined(self, _arg):
        r"""
        SetFixedImageRegionDefined(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetFixedImageRegionDefined(self, _arg)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_Initialize(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkDataObjectDecoratorTD22"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetOutput(self)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageRegistrationMethodISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodISS2ISS2

        Create a new object of the class itkImageRegistrationMethodISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodISS2ISS2 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_swigregister(itkImageRegistrationMethodISS2ISS2)

def itkImageRegistrationMethodISS3ISS3_New():
    return itkImageRegistrationMethodISS3ISS3.New()

class itkImageRegistrationMethodISS3ISS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageRegistrationMethodISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageRegistrationMethodISS3ISS3_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageRegistrationMethodISS3ISS3_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_Clone(self)

    def SetFixedImage(self, fixedImage):
        r"""
        SetFixedImage(self, fixedImage)

        Parameters
        ----------
        fixedImage: itkImageSS3 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetFixedImage(self, fixedImage)

    def GetFixedImage(self):
        r"""GetFixedImage(self) -> itkImageSS3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetFixedImage(self)

    def SetMovingImage(self, movingImage):
        r"""
        SetMovingImage(self, movingImage)

        Parameters
        ----------
        movingImage: itkImageSS3 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetMovingImage(self, movingImage)

    def GetMovingImage(self):
        r"""GetMovingImage(self) -> itkImageSS3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetMovingImage(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetOptimizer(self, _arg)

    def GetModifiableOptimizer(self):
        r"""GetModifiableOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetModifiableOptimizer(self)

    def GetOptimizer(self, *args):
        r"""
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetOptimizer(self, *args)

    def SetMetric(self, _arg):
        r"""
        SetMetric(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageMetricISS3ISS3 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetMetric(self, _arg)

    def GetModifiableMetric(self):
        r"""GetModifiableMetric(self) -> itkImageToImageMetricISS3ISS3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetModifiableMetric(self)

    def GetMetric(self, *args):
        r"""
        GetMetric(self) -> itkImageToImageMetricISS3ISS3
        GetMetric(self) -> itkImageToImageMetricISS3ISS3
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetMetric(self, *args)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD33 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformD33"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformD33
        GetTransform(self) -> itkTransformD33
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionISS3D *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionISS3D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionISS3D
        GetInterpolator(self) -> itkInterpolateImageFunctionISS3D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetInterpolator(self, *args)

    def SetInitialTransformParameters(self, param):
        r"""
        SetInitialTransformParameters(self, param)

        Parameters
        ----------
        param: itkOptimizerParametersD const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetInitialTransformParameters(self, param)

    def GetInitialTransformParameters(self):
        r"""GetInitialTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetInitialTransformParameters(self)

    def GetLastTransformParameters(self):
        r"""GetLastTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetLastTransformParameters(self)

    def SetFixedImageRegion(self, region):
        r"""
        SetFixedImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetFixedImageRegion(self, region)

    def GetFixedImageRegion(self):
        r"""GetFixedImageRegion(self) -> itkImageRegion3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetFixedImageRegion(self)

    def GetFixedImageRegionDefined(self):
        r"""GetFixedImageRegionDefined(self) -> bool"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetFixedImageRegionDefined(self)

    def SetFixedImageRegionDefined(self, _arg):
        r"""
        SetFixedImageRegionDefined(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetFixedImageRegionDefined(self, _arg)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_Initialize(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkDataObjectDecoratorTD33"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetOutput(self)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageRegistrationMethodISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodISS3ISS3

        Create a new object of the class itkImageRegistrationMethodISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodISS3ISS3 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_swigregister(itkImageRegistrationMethodISS3ISS3)

def itkImageRegistrationMethodISS4ISS4_New():
    return itkImageRegistrationMethodISS4ISS4.New()

class itkImageRegistrationMethodISS4ISS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageRegistrationMethodISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageRegistrationMethodISS4ISS4_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageRegistrationMethodISS4ISS4_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_Clone(self)

    def SetFixedImage(self, fixedImage):
        r"""
        SetFixedImage(self, fixedImage)

        Parameters
        ----------
        fixedImage: itkImageSS4 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_SetFixedImage(self, fixedImage)

    def GetFixedImage(self):
        r"""GetFixedImage(self) -> itkImageSS4"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetFixedImage(self)

    def SetMovingImage(self, movingImage):
        r"""
        SetMovingImage(self, movingImage)

        Parameters
        ----------
        movingImage: itkImageSS4 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_SetMovingImage(self, movingImage)

    def GetMovingImage(self):
        r"""GetMovingImage(self) -> itkImageSS4"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetMovingImage(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_SetOptimizer(self, _arg)

    def GetModifiableOptimizer(self):
        r"""GetModifiableOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetModifiableOptimizer(self)

    def GetOptimizer(self, *args):
        r"""
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetOptimizer(self, *args)

    def SetMetric(self, _arg):
        r"""
        SetMetric(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageMetricISS4ISS4 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_SetMetric(self, _arg)

    def GetModifiableMetric(self):
        r"""GetModifiableMetric(self) -> itkImageToImageMetricISS4ISS4"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetModifiableMetric(self)

    def GetMetric(self, *args):
        r"""
        GetMetric(self) -> itkImageToImageMetricISS4ISS4
        GetMetric(self) -> itkImageToImageMetricISS4ISS4
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetMetric(self, *args)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD44 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformD44"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformD44
        GetTransform(self) -> itkTransformD44
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionISS4D *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionISS4D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionISS4D
        GetInterpolator(self) -> itkInterpolateImageFunctionISS4D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetInterpolator(self, *args)

    def SetInitialTransformParameters(self, param):
        r"""
        SetInitialTransformParameters(self, param)

        Parameters
        ----------
        param: itkOptimizerParametersD const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_SetInitialTransformParameters(self, param)

    def GetInitialTransformParameters(self):
        r"""GetInitialTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetInitialTransformParameters(self)

    def GetLastTransformParameters(self):
        r"""GetLastTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetLastTransformParameters(self)

    def SetFixedImageRegion(self, region):
        r"""
        SetFixedImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_SetFixedImageRegion(self, region)

    def GetFixedImageRegion(self):
        r"""GetFixedImageRegion(self) -> itkImageRegion4"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetFixedImageRegion(self)

    def GetFixedImageRegionDefined(self):
        r"""GetFixedImageRegionDefined(self) -> bool"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetFixedImageRegionDefined(self)

    def SetFixedImageRegionDefined(self, _arg):
        r"""
        SetFixedImageRegionDefined(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_SetFixedImageRegionDefined(self, _arg)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_Initialize(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkDataObjectDecoratorTD44"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetOutput(self)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageRegistrationMethodISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodISS4ISS4

        Create a new object of the class itkImageRegistrationMethodISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodISS4ISS4 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_swigregister(itkImageRegistrationMethodISS4ISS4)

def itkImageRegistrationMethodIUC2IUC2_New():
    return itkImageRegistrationMethodIUC2IUC2.New()

class itkImageRegistrationMethodIUC2IUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageRegistrationMethodIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageRegistrationMethodIUC2IUC2_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageRegistrationMethodIUC2IUC2_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_Clone(self)

    def SetFixedImage(self, fixedImage):
        r"""
        SetFixedImage(self, fixedImage)

        Parameters
        ----------
        fixedImage: itkImageUC2 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetFixedImage(self, fixedImage)

    def GetFixedImage(self):
        r"""GetFixedImage(self) -> itkImageUC2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetFixedImage(self)

    def SetMovingImage(self, movingImage):
        r"""
        SetMovingImage(self, movingImage)

        Parameters
        ----------
        movingImage: itkImageUC2 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetMovingImage(self, movingImage)

    def GetMovingImage(self):
        r"""GetMovingImage(self) -> itkImageUC2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetMovingImage(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetOptimizer(self, _arg)

    def GetModifiableOptimizer(self):
        r"""GetModifiableOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetModifiableOptimizer(self)

    def GetOptimizer(self, *args):
        r"""
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetOptimizer(self, *args)

    def SetMetric(self, _arg):
        r"""
        SetMetric(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageMetricIUC2IUC2 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetMetric(self, _arg)

    def GetModifiableMetric(self):
        r"""GetModifiableMetric(self) -> itkImageToImageMetricIUC2IUC2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetModifiableMetric(self)

    def GetMetric(self, *args):
        r"""
        GetMetric(self) -> itkImageToImageMetricIUC2IUC2
        GetMetric(self) -> itkImageToImageMetricIUC2IUC2
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetMetric(self, *args)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD22 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformD22"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformD22
        GetTransform(self) -> itkTransformD22
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIUC2D *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionIUC2D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionIUC2D
        GetInterpolator(self) -> itkInterpolateImageFunctionIUC2D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetInterpolator(self, *args)

    def SetInitialTransformParameters(self, param):
        r"""
        SetInitialTransformParameters(self, param)

        Parameters
        ----------
        param: itkOptimizerParametersD const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetInitialTransformParameters(self, param)

    def GetInitialTransformParameters(self):
        r"""GetInitialTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetInitialTransformParameters(self)

    def GetLastTransformParameters(self):
        r"""GetLastTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetLastTransformParameters(self)

    def SetFixedImageRegion(self, region):
        r"""
        SetFixedImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetFixedImageRegion(self, region)

    def GetFixedImageRegion(self):
        r"""GetFixedImageRegion(self) -> itkImageRegion2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetFixedImageRegion(self)

    def GetFixedImageRegionDefined(self):
        r"""GetFixedImageRegionDefined(self) -> bool"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetFixedImageRegionDefined(self)

    def SetFixedImageRegionDefined(self, _arg):
        r"""
        SetFixedImageRegionDefined(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetFixedImageRegionDefined(self, _arg)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_Initialize(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkDataObjectDecoratorTD22"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetOutput(self)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageRegistrationMethodIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodIUC2IUC2

        Create a new object of the class itkImageRegistrationMethodIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodIUC2IUC2 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_swigregister(itkImageRegistrationMethodIUC2IUC2)

def itkImageRegistrationMethodIUC3IUC3_New():
    return itkImageRegistrationMethodIUC3IUC3.New()

class itkImageRegistrationMethodIUC3IUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageRegistrationMethodIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageRegistrationMethodIUC3IUC3_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageRegistrationMethodIUC3IUC3_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_Clone(self)

    def SetFixedImage(self, fixedImage):
        r"""
        SetFixedImage(self, fixedImage)

        Parameters
        ----------
        fixedImage: itkImageUC3 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetFixedImage(self, fixedImage)

    def GetFixedImage(self):
        r"""GetFixedImage(self) -> itkImageUC3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetFixedImage(self)

    def SetMovingImage(self, movingImage):
        r"""
        SetMovingImage(self, movingImage)

        Parameters
        ----------
        movingImage: itkImageUC3 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetMovingImage(self, movingImage)

    def GetMovingImage(self):
        r"""GetMovingImage(self) -> itkImageUC3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetMovingImage(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetOptimizer(self, _arg)

    def GetModifiableOptimizer(self):
        r"""GetModifiableOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetModifiableOptimizer(self)

    def GetOptimizer(self, *args):
        r"""
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetOptimizer(self, *args)

    def SetMetric(self, _arg):
        r"""
        SetMetric(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageMetricIUC3IUC3 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetMetric(self, _arg)

    def GetModifiableMetric(self):
        r"""GetModifiableMetric(self) -> itkImageToImageMetricIUC3IUC3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetModifiableMetric(self)

    def GetMetric(self, *args):
        r"""
        GetMetric(self) -> itkImageToImageMetricIUC3IUC3
        GetMetric(self) -> itkImageToImageMetricIUC3IUC3
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetMetric(self, *args)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD33 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformD33"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformD33
        GetTransform(self) -> itkTransformD33
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIUC3D *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionIUC3D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionIUC3D
        GetInterpolator(self) -> itkInterpolateImageFunctionIUC3D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetInterpolator(self, *args)

    def SetInitialTransformParameters(self, param):
        r"""
        SetInitialTransformParameters(self, param)

        Parameters
        ----------
        param: itkOptimizerParametersD const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetInitialTransformParameters(self, param)

    def GetInitialTransformParameters(self):
        r"""GetInitialTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetInitialTransformParameters(self)

    def GetLastTransformParameters(self):
        r"""GetLastTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetLastTransformParameters(self)

    def SetFixedImageRegion(self, region):
        r"""
        SetFixedImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetFixedImageRegion(self, region)

    def GetFixedImageRegion(self):
        r"""GetFixedImageRegion(self) -> itkImageRegion3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetFixedImageRegion(self)

    def GetFixedImageRegionDefined(self):
        r"""GetFixedImageRegionDefined(self) -> bool"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetFixedImageRegionDefined(self)

    def SetFixedImageRegionDefined(self, _arg):
        r"""
        SetFixedImageRegionDefined(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetFixedImageRegionDefined(self, _arg)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_Initialize(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkDataObjectDecoratorTD33"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetOutput(self)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageRegistrationMethodIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodIUC3IUC3

        Create a new object of the class itkImageRegistrationMethodIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodIUC3IUC3 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_swigregister(itkImageRegistrationMethodIUC3IUC3)

def itkImageRegistrationMethodIUC4IUC4_New():
    return itkImageRegistrationMethodIUC4IUC4.New()

class itkImageRegistrationMethodIUC4IUC4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageRegistrationMethodIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageRegistrationMethodIUC4IUC4_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageRegistrationMethodIUC4IUC4_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_Clone(self)

    def SetFixedImage(self, fixedImage):
        r"""
        SetFixedImage(self, fixedImage)

        Parameters
        ----------
        fixedImage: itkImageUC4 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_SetFixedImage(self, fixedImage)

    def GetFixedImage(self):
        r"""GetFixedImage(self) -> itkImageUC4"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetFixedImage(self)

    def SetMovingImage(self, movingImage):
        r"""
        SetMovingImage(self, movingImage)

        Parameters
        ----------
        movingImage: itkImageUC4 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_SetMovingImage(self, movingImage)

    def GetMovingImage(self):
        r"""GetMovingImage(self) -> itkImageUC4"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetMovingImage(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_SetOptimizer(self, _arg)

    def GetModifiableOptimizer(self):
        r"""GetModifiableOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetModifiableOptimizer(self)

    def GetOptimizer(self, *args):
        r"""
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetOptimizer(self, *args)

    def SetMetric(self, _arg):
        r"""
        SetMetric(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageMetricIUC4IUC4 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_SetMetric(self, _arg)

    def GetModifiableMetric(self):
        r"""GetModifiableMetric(self) -> itkImageToImageMetricIUC4IUC4"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetModifiableMetric(self)

    def GetMetric(self, *args):
        r"""
        GetMetric(self) -> itkImageToImageMetricIUC4IUC4
        GetMetric(self) -> itkImageToImageMetricIUC4IUC4
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetMetric(self, *args)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD44 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformD44"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformD44
        GetTransform(self) -> itkTransformD44
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIUC4D *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionIUC4D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionIUC4D
        GetInterpolator(self) -> itkInterpolateImageFunctionIUC4D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetInterpolator(self, *args)

    def SetInitialTransformParameters(self, param):
        r"""
        SetInitialTransformParameters(self, param)

        Parameters
        ----------
        param: itkOptimizerParametersD const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_SetInitialTransformParameters(self, param)

    def GetInitialTransformParameters(self):
        r"""GetInitialTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetInitialTransformParameters(self)

    def GetLastTransformParameters(self):
        r"""GetLastTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetLastTransformParameters(self)

    def SetFixedImageRegion(self, region):
        r"""
        SetFixedImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_SetFixedImageRegion(self, region)

    def GetFixedImageRegion(self):
        r"""GetFixedImageRegion(self) -> itkImageRegion4"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetFixedImageRegion(self)

    def GetFixedImageRegionDefined(self):
        r"""GetFixedImageRegionDefined(self) -> bool"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetFixedImageRegionDefined(self)

    def SetFixedImageRegionDefined(self, _arg):
        r"""
        SetFixedImageRegionDefined(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_SetFixedImageRegionDefined(self, _arg)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_Initialize(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkDataObjectDecoratorTD44"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetOutput(self)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageRegistrationMethodIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodIUC4IUC4

        Create a new object of the class itkImageRegistrationMethodIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodIUC4IUC4 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_swigregister(itkImageRegistrationMethodIUC4IUC4)

def itkImageRegistrationMethodIUS2IUS2_New():
    return itkImageRegistrationMethodIUS2IUS2.New()

class itkImageRegistrationMethodIUS2IUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageRegistrationMethodIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageRegistrationMethodIUS2IUS2_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageRegistrationMethodIUS2IUS2_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_Clone(self)

    def SetFixedImage(self, fixedImage):
        r"""
        SetFixedImage(self, fixedImage)

        Parameters
        ----------
        fixedImage: itkImageUS2 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetFixedImage(self, fixedImage)

    def GetFixedImage(self):
        r"""GetFixedImage(self) -> itkImageUS2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetFixedImage(self)

    def SetMovingImage(self, movingImage):
        r"""
        SetMovingImage(self, movingImage)

        Parameters
        ----------
        movingImage: itkImageUS2 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetMovingImage(self, movingImage)

    def GetMovingImage(self):
        r"""GetMovingImage(self) -> itkImageUS2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetMovingImage(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetOptimizer(self, _arg)

    def GetModifiableOptimizer(self):
        r"""GetModifiableOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetModifiableOptimizer(self)

    def GetOptimizer(self, *args):
        r"""
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetOptimizer(self, *args)

    def SetMetric(self, _arg):
        r"""
        SetMetric(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageMetricIUS2IUS2 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetMetric(self, _arg)

    def GetModifiableMetric(self):
        r"""GetModifiableMetric(self) -> itkImageToImageMetricIUS2IUS2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetModifiableMetric(self)

    def GetMetric(self, *args):
        r"""
        GetMetric(self) -> itkImageToImageMetricIUS2IUS2
        GetMetric(self) -> itkImageToImageMetricIUS2IUS2
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetMetric(self, *args)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD22 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformD22"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformD22
        GetTransform(self) -> itkTransformD22
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIUS2D *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionIUS2D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionIUS2D
        GetInterpolator(self) -> itkInterpolateImageFunctionIUS2D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetInterpolator(self, *args)

    def SetInitialTransformParameters(self, param):
        r"""
        SetInitialTransformParameters(self, param)

        Parameters
        ----------
        param: itkOptimizerParametersD const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetInitialTransformParameters(self, param)

    def GetInitialTransformParameters(self):
        r"""GetInitialTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetInitialTransformParameters(self)

    def GetLastTransformParameters(self):
        r"""GetLastTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetLastTransformParameters(self)

    def SetFixedImageRegion(self, region):
        r"""
        SetFixedImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetFixedImageRegion(self, region)

    def GetFixedImageRegion(self):
        r"""GetFixedImageRegion(self) -> itkImageRegion2"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetFixedImageRegion(self)

    def GetFixedImageRegionDefined(self):
        r"""GetFixedImageRegionDefined(self) -> bool"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetFixedImageRegionDefined(self)

    def SetFixedImageRegionDefined(self, _arg):
        r"""
        SetFixedImageRegionDefined(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetFixedImageRegionDefined(self, _arg)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_Initialize(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkDataObjectDecoratorTD22"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetOutput(self)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageRegistrationMethodIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodIUS2IUS2

        Create a new object of the class itkImageRegistrationMethodIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodIUS2IUS2 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_swigregister(itkImageRegistrationMethodIUS2IUS2)

def itkImageRegistrationMethodIUS3IUS3_New():
    return itkImageRegistrationMethodIUS3IUS3.New()

class itkImageRegistrationMethodIUS3IUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageRegistrationMethodIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageRegistrationMethodIUS3IUS3_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageRegistrationMethodIUS3IUS3_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_Clone(self)

    def SetFixedImage(self, fixedImage):
        r"""
        SetFixedImage(self, fixedImage)

        Parameters
        ----------
        fixedImage: itkImageUS3 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetFixedImage(self, fixedImage)

    def GetFixedImage(self):
        r"""GetFixedImage(self) -> itkImageUS3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetFixedImage(self)

    def SetMovingImage(self, movingImage):
        r"""
        SetMovingImage(self, movingImage)

        Parameters
        ----------
        movingImage: itkImageUS3 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetMovingImage(self, movingImage)

    def GetMovingImage(self):
        r"""GetMovingImage(self) -> itkImageUS3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetMovingImage(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetOptimizer(self, _arg)

    def GetModifiableOptimizer(self):
        r"""GetModifiableOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetModifiableOptimizer(self)

    def GetOptimizer(self, *args):
        r"""
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetOptimizer(self, *args)

    def SetMetric(self, _arg):
        r"""
        SetMetric(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageMetricIUS3IUS3 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetMetric(self, _arg)

    def GetModifiableMetric(self):
        r"""GetModifiableMetric(self) -> itkImageToImageMetricIUS3IUS3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetModifiableMetric(self)

    def GetMetric(self, *args):
        r"""
        GetMetric(self) -> itkImageToImageMetricIUS3IUS3
        GetMetric(self) -> itkImageToImageMetricIUS3IUS3
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetMetric(self, *args)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD33 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformD33"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformD33
        GetTransform(self) -> itkTransformD33
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIUS3D *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionIUS3D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionIUS3D
        GetInterpolator(self) -> itkInterpolateImageFunctionIUS3D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetInterpolator(self, *args)

    def SetInitialTransformParameters(self, param):
        r"""
        SetInitialTransformParameters(self, param)

        Parameters
        ----------
        param: itkOptimizerParametersD const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetInitialTransformParameters(self, param)

    def GetInitialTransformParameters(self):
        r"""GetInitialTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetInitialTransformParameters(self)

    def GetLastTransformParameters(self):
        r"""GetLastTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetLastTransformParameters(self)

    def SetFixedImageRegion(self, region):
        r"""
        SetFixedImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetFixedImageRegion(self, region)

    def GetFixedImageRegion(self):
        r"""GetFixedImageRegion(self) -> itkImageRegion3"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetFixedImageRegion(self)

    def GetFixedImageRegionDefined(self):
        r"""GetFixedImageRegionDefined(self) -> bool"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetFixedImageRegionDefined(self)

    def SetFixedImageRegionDefined(self, _arg):
        r"""
        SetFixedImageRegionDefined(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetFixedImageRegionDefined(self, _arg)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_Initialize(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkDataObjectDecoratorTD33"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetOutput(self)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageRegistrationMethodIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodIUS3IUS3

        Create a new object of the class itkImageRegistrationMethodIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodIUS3IUS3 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_swigregister(itkImageRegistrationMethodIUS3IUS3)

def itkImageRegistrationMethodIUS4IUS4_New():
    return itkImageRegistrationMethodIUS4IUS4.New()

class itkImageRegistrationMethodIUS4IUS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageRegistrationMethodIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageRegistrationMethodIUS4IUS4_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageRegistrationMethodIUS4IUS4_Pointer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_Clone(self)

    def SetFixedImage(self, fixedImage):
        r"""
        SetFixedImage(self, fixedImage)

        Parameters
        ----------
        fixedImage: itkImageUS4 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_SetFixedImage(self, fixedImage)

    def GetFixedImage(self):
        r"""GetFixedImage(self) -> itkImageUS4"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetFixedImage(self)

    def SetMovingImage(self, movingImage):
        r"""
        SetMovingImage(self, movingImage)

        Parameters
        ----------
        movingImage: itkImageUS4 const *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_SetMovingImage(self, movingImage)

    def GetMovingImage(self):
        r"""GetMovingImage(self) -> itkImageUS4"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetMovingImage(self)

    def SetOptimizer(self, _arg):
        r"""
        SetOptimizer(self, _arg)

        Parameters
        ----------
        _arg: itkSingleValuedNonLinearOptimizer *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_SetOptimizer(self, _arg)

    def GetModifiableOptimizer(self):
        r"""GetModifiableOptimizer(self) -> itkSingleValuedNonLinearOptimizer"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetModifiableOptimizer(self)

    def GetOptimizer(self, *args):
        r"""
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        GetOptimizer(self) -> itkSingleValuedNonLinearOptimizer
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetOptimizer(self, *args)

    def SetMetric(self, _arg):
        r"""
        SetMetric(self, _arg)

        Parameters
        ----------
        _arg: itkImageToImageMetricIUS4IUS4 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_SetMetric(self, _arg)

    def GetModifiableMetric(self):
        r"""GetModifiableMetric(self) -> itkImageToImageMetricIUS4IUS4"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetModifiableMetric(self)

    def GetMetric(self, *args):
        r"""
        GetMetric(self) -> itkImageToImageMetricIUS4IUS4
        GetMetric(self) -> itkImageToImageMetricIUS4IUS4
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetMetric(self, *args)

    def SetTransform(self, _arg):
        r"""
        SetTransform(self, _arg)

        Parameters
        ----------
        _arg: itkTransformD44 *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_SetTransform(self, _arg)

    def GetModifiableTransform(self):
        r"""GetModifiableTransform(self) -> itkTransformD44"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetModifiableTransform(self)

    def GetTransform(self, *args):
        r"""
        GetTransform(self) -> itkTransformD44
        GetTransform(self) -> itkTransformD44
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetTransform(self, *args)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIUS4D *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionIUS4D"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionIUS4D
        GetInterpolator(self) -> itkInterpolateImageFunctionIUS4D
        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetInterpolator(self, *args)

    def SetInitialTransformParameters(self, param):
        r"""
        SetInitialTransformParameters(self, param)

        Parameters
        ----------
        param: itkOptimizerParametersD const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_SetInitialTransformParameters(self, param)

    def GetInitialTransformParameters(self):
        r"""GetInitialTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetInitialTransformParameters(self)

    def GetLastTransformParameters(self):
        r"""GetLastTransformParameters(self) -> itkOptimizerParametersD"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetLastTransformParameters(self)

    def SetFixedImageRegion(self, region):
        r"""
        SetFixedImageRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_SetFixedImageRegion(self, region)

    def GetFixedImageRegion(self):
        r"""GetFixedImageRegion(self) -> itkImageRegion4"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetFixedImageRegion(self)

    def GetFixedImageRegionDefined(self):
        r"""GetFixedImageRegionDefined(self) -> bool"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetFixedImageRegionDefined(self)

    def SetFixedImageRegionDefined(self, _arg):
        r"""
        SetFixedImageRegionDefined(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_SetFixedImageRegionDefined(self, _arg)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_Initialize(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkDataObjectDecoratorTD44"""
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetOutput(self)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageRegistrationMethodIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodIUS4IUS4

        Create a new object of the class itkImageRegistrationMethodIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodIUS4IUS4 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_swigregister(itkImageRegistrationMethodIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def image_registration_method(*args,  fixed_image: itkt.Image=..., moving_image: itkt.Image=..., optimizer=..., metric=..., transform: itkt.Transform=..., interpolator: itkt.InterpolateImageFunction=..., initial_transform_parameters=..., fixed_image_region: itkt.ImageRegion=..., fixed_image_region_defined: bool=...,**kwargs):
    """Functional interface for ImageRegistrationMethod"""
    import itk

    kwarg_typehints = { 'fixed_image':fixed_image,'moving_image':moving_image,'optimizer':optimizer,'metric':metric,'transform':transform,'interpolator':interpolator,'initial_transform_parameters':initial_transform_parameters,'fixed_image_region':fixed_image_region,'fixed_image_region_defined':fixed_image_region_defined }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ImageRegistrationMethod.New(*args, **kwargs)

    return instance.__internal_call__()

def image_registration_method_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKRegistrationCommon.ImageRegistrationMethod
    image_registration_method.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_registration_method.__doc__ = filter_object.__doc__



