# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKRegistrationCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBlockMatchingImageFilterPython
else:
    import _itkBlockMatchingImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkPointSetPython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkVectorContainerPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.ITKCommonBasePython
import itk.itkCovariantVectorPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython

def itkBlockMatchingImageFilterID3_Superclass_Superclass_New():
    return itkBlockMatchingImageFilterID3_Superclass_Superclass.New()

class itkBlockMatchingImageFilterID3_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkBlockMatchingImageFilterID3_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBlockMatchingImageFilterIF3_Superclass_Superclass_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBlockMatchingImageFilterIF3_Superclass_Superclass_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Superclass_Clone(self)

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkPointSetVF33
        GetOutput(self, idx) -> itkPointSetVF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Superclass_GetOutput(self, *args)

    def SetOutput(self, output):
        r"""
        SetOutput(self, output)

        Parameters
        ----------
        output: itkPointSetVF33 *

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Superclass_SetOutput(self, output)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Superclass_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Superclass_GraftNthOutput(self, idx, graft)
    __swig_destroy__ = _itkBlockMatchingImageFilterPython.delete_itkBlockMatchingImageFilterID3_Superclass_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBlockMatchingImageFilterID3_Superclass_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBlockMatchingImageFilterID3_Superclass_Superclass

        Create a new object of the class itkBlockMatchingImageFilterID3_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlockMatchingImageFilterID3_Superclass_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBlockMatchingImageFilterID3_Superclass_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBlockMatchingImageFilterID3_Superclass_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBlockMatchingImageFilterID3_Superclass_Superclass in _itkBlockMatchingImageFilterPython:
_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Superclass_swigregister(itkBlockMatchingImageFilterID3_Superclass_Superclass)

def itkBlockMatchingImageFilterIF3_Superclass_Superclass_New():
    return itkBlockMatchingImageFilterIF3_Superclass_Superclass.New()

class itkBlockMatchingImageFilterIF3_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkBlockMatchingImageFilterIF3_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBlockMatchingImageFilterIF3_Superclass_Superclass_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBlockMatchingImageFilterIF3_Superclass_Superclass_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Superclass_Clone(self)

    def GetOutput(self, *args):
        r"""
        GetOutput(self) -> itkPointSetVF33
        GetOutput(self, idx) -> itkPointSetVF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Superclass_GetOutput(self, *args)

    def SetOutput(self, output):
        r"""
        SetOutput(self, output)

        Parameters
        ----------
        output: itkPointSetVF33 *

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Superclass_SetOutput(self, output)

    def GraftOutput(self, *args):
        r"""
        GraftOutput(self, graft)

        Parameters
        ----------
        graft: itkDataObject *

        GraftOutput(self, key, graft)

        Parameters
        ----------
        key: std::string const &
        graft: itkDataObject *

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Superclass_GraftOutput(self, *args)

    def GraftNthOutput(self, idx, graft):
        r"""
        GraftNthOutput(self, idx, graft)

        Parameters
        ----------
        idx: unsigned int
        graft: itkDataObject *

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Superclass_GraftNthOutput(self, idx, graft)
    __swig_destroy__ = _itkBlockMatchingImageFilterPython.delete_itkBlockMatchingImageFilterIF3_Superclass_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBlockMatchingImageFilterIF3_Superclass_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBlockMatchingImageFilterIF3_Superclass_Superclass

        Create a new object of the class itkBlockMatchingImageFilterIF3_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlockMatchingImageFilterIF3_Superclass_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBlockMatchingImageFilterIF3_Superclass_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBlockMatchingImageFilterIF3_Superclass_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBlockMatchingImageFilterIF3_Superclass_Superclass in _itkBlockMatchingImageFilterPython:
_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Superclass_swigregister(itkBlockMatchingImageFilterIF3_Superclass_Superclass)

def itkBlockMatchingImageFilterID3_Superclass_New():
    return itkBlockMatchingImageFilterID3_Superclass.New()

class itkBlockMatchingImageFilterID3_Superclass(itkBlockMatchingImageFilterIF3_Superclass_Superclass):
    r"""Proxy of C++ itkBlockMatchingImageFilterID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBlockMatchingImageFilterIF3_Superclass_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBlockMatchingImageFilterIF3_Superclass_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPointSetMD33 const *

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPointSetMD33
        GetInput(self, idx) -> itkPointSetMD33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_GetInput(self, *args)
    __swig_destroy__ = _itkBlockMatchingImageFilterPython.delete_itkBlockMatchingImageFilterID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBlockMatchingImageFilterID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBlockMatchingImageFilterID3_Superclass

        Create a new object of the class itkBlockMatchingImageFilterID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlockMatchingImageFilterID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBlockMatchingImageFilterID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBlockMatchingImageFilterID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBlockMatchingImageFilterID3_Superclass in _itkBlockMatchingImageFilterPython:
_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Superclass_swigregister(itkBlockMatchingImageFilterID3_Superclass)

def itkBlockMatchingImageFilterIF3_Superclass_New():
    return itkBlockMatchingImageFilterIF3_Superclass.New()

class itkBlockMatchingImageFilterIF3_Superclass(itkBlockMatchingImageFilterIF3_Superclass_Superclass):
    r"""Proxy of C++ itkBlockMatchingImageFilterIF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBlockMatchingImageFilterIF3_Superclass_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBlockMatchingImageFilterIF3_Superclass_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPointSetMD33 const *

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_SetInput(self, input)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPointSetMD33
        GetInput(self, idx) -> itkPointSetMD33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_GetInput(self, *args)
    __swig_destroy__ = _itkBlockMatchingImageFilterPython.delete_itkBlockMatchingImageFilterIF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBlockMatchingImageFilterIF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBlockMatchingImageFilterIF3_Superclass

        Create a new object of the class itkBlockMatchingImageFilterIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlockMatchingImageFilterIF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBlockMatchingImageFilterIF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBlockMatchingImageFilterIF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBlockMatchingImageFilterIF3_Superclass in _itkBlockMatchingImageFilterPython:
_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Superclass_swigregister(itkBlockMatchingImageFilterIF3_Superclass)

def itkBlockMatchingImageFilterID3_New():
    return itkBlockMatchingImageFilterID3.New()

class itkBlockMatchingImageFilterID3(itkBlockMatchingImageFilterIF3_Superclass):
    r"""Proxy of C++ itkBlockMatchingImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBlockMatchingImageFilterID3_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBlockMatchingImageFilterID3_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_Clone(self)

    def SetBlockRadius(self, _arg):
        r"""
        SetBlockRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_SetBlockRadius(self, _arg)

    def GetBlockRadius(self):
        r"""GetBlockRadius(self) -> itkSize3"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_GetBlockRadius(self)

    def SetSearchRadius(self, _arg):
        r"""
        SetSearchRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_SetSearchRadius(self, _arg)

    def GetSearchRadius(self):
        r"""GetSearchRadius(self) -> itkSize3"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_GetSearchRadius(self)

    def SetFixedImage(self, _arg):
        r"""
        SetFixedImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageD3 const *

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_SetFixedImage(self, _arg)

    def GetFixedImage(self):
        r"""GetFixedImage(self) -> itkImageD3"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_GetFixedImage(self)

    def SetMovingImage(self, _arg):
        r"""
        SetMovingImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageD3 const *

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_SetMovingImage(self, _arg)

    def GetMovingImage(self):
        r"""GetMovingImage(self) -> itkImageD3"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_GetMovingImage(self)

    def SetFeaturePoints(self, _arg):
        r"""
        SetFeaturePoints(self, _arg)

        Parameters
        ----------
        _arg: itkPointSetMD33 const *

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_SetFeaturePoints(self, _arg)

    def GetFeaturePoints(self):
        r"""GetFeaturePoints(self) -> itkPointSetMD33"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_GetFeaturePoints(self)

    def GetDisplacements(self):
        r"""GetDisplacements(self) -> itkPointSetVF33"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_GetDisplacements(self)

    def GetSimilarities(self):
        r"""GetSimilarities(self) -> itkPointSetD3"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_GetSimilarities(self)
    __swig_destroy__ = _itkBlockMatchingImageFilterPython.delete_itkBlockMatchingImageFilterID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBlockMatchingImageFilterID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBlockMatchingImageFilterID3

        Create a new object of the class itkBlockMatchingImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlockMatchingImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBlockMatchingImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBlockMatchingImageFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBlockMatchingImageFilterID3 in _itkBlockMatchingImageFilterPython:
_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterID3_swigregister(itkBlockMatchingImageFilterID3)

def itkBlockMatchingImageFilterIF3_New():
    return itkBlockMatchingImageFilterIF3.New()

class itkBlockMatchingImageFilterIF3(itkBlockMatchingImageFilterIF3_Superclass):
    r"""Proxy of C++ itkBlockMatchingImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBlockMatchingImageFilterIF3_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBlockMatchingImageFilterIF3_Pointer"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_Clone(self)

    def SetBlockRadius(self, _arg):
        r"""
        SetBlockRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_SetBlockRadius(self, _arg)

    def GetBlockRadius(self):
        r"""GetBlockRadius(self) -> itkSize3"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_GetBlockRadius(self)

    def SetSearchRadius(self, _arg):
        r"""
        SetSearchRadius(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_SetSearchRadius(self, _arg)

    def GetSearchRadius(self):
        r"""GetSearchRadius(self) -> itkSize3"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_GetSearchRadius(self)

    def SetFixedImage(self, _arg):
        r"""
        SetFixedImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageF3 const *

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_SetFixedImage(self, _arg)

    def GetFixedImage(self):
        r"""GetFixedImage(self) -> itkImageF3"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_GetFixedImage(self)

    def SetMovingImage(self, _arg):
        r"""
        SetMovingImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageF3 const *

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_SetMovingImage(self, _arg)

    def GetMovingImage(self):
        r"""GetMovingImage(self) -> itkImageF3"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_GetMovingImage(self)

    def SetFeaturePoints(self, _arg):
        r"""
        SetFeaturePoints(self, _arg)

        Parameters
        ----------
        _arg: itkPointSetMD33 const *

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_SetFeaturePoints(self, _arg)

    def GetFeaturePoints(self):
        r"""GetFeaturePoints(self) -> itkPointSetMD33"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_GetFeaturePoints(self)

    def GetDisplacements(self):
        r"""GetDisplacements(self) -> itkPointSetVF33"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_GetDisplacements(self)

    def GetSimilarities(self):
        r"""GetSimilarities(self) -> itkPointSetD3"""
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_GetSimilarities(self)
    __swig_destroy__ = _itkBlockMatchingImageFilterPython.delete_itkBlockMatchingImageFilterIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBlockMatchingImageFilterIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBlockMatchingImageFilterIF3

        Create a new object of the class itkBlockMatchingImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBlockMatchingImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBlockMatchingImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBlockMatchingImageFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBlockMatchingImageFilterIF3 in _itkBlockMatchingImageFilterPython:
_itkBlockMatchingImageFilterPython.itkBlockMatchingImageFilterIF3_swigregister(itkBlockMatchingImageFilterIF3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def mesh_source(*args,  output: itkt.PointSet=...,**kwargs):
    """Functional interface for MeshSource"""
    import itk

    kwarg_typehints = { 'output':output }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.MeshSource.New(*args, **kwargs)

    return instance.__internal_call__()

def mesh_source_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKRegistrationCommon.MeshSource
    mesh_source.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    mesh_source.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def block_matching_image_filter(*args: itkt.Mesh,  block_radius: Sequence[int]=..., search_radius: Sequence[int]=..., fixed_image: itkt.Image=..., moving_image: itkt.Image=..., feature_points: itkt.PointSet=..., output: itkt.PointSet=...,**kwargs)-> itkt.MeshSourceReturn:
    """Functional interface for BlockMatchingImageFilter"""
    import itk

    kwarg_typehints = { 'block_radius':block_radius,'search_radius':search_radius,'fixed_image':fixed_image,'moving_image':moving_image,'feature_points':feature_points,'output':output }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.BlockMatchingImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def block_matching_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKRegistrationCommon.BlockMatchingImageFilter
    block_matching_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    block_matching_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def mesh_to_mesh_filter(*args,  output: itkt.PointSet=...,**kwargs)-> itkt.MeshSourceReturn:
    """Functional interface for MeshToMeshFilter"""
    import itk

    kwarg_typehints = { 'output':output }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.MeshToMeshFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def mesh_to_mesh_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKRegistrationCommon.MeshToMeshFilter
    mesh_to_mesh_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    mesh_to_mesh_filter.__doc__ = filter_object.__doc__



