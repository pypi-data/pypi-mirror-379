[project]
name = "flagbit"
version = "0.1.2"
description = "A 🐍 open source package for flag management 🚩"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "fastapi>=0.116.1",
    "httpx>=0.28.1",
    "jinja2>=3.1.6",
    "loguru>=0.7.3",
    "pydantic-settings>=2.10.1",
    "pymongo>=4.14.1",
    "pytz>=2025.2",
    "sqlalchemy>=2.0.43",
    "uvicorn>=0.35.0",
]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "faker>=37.6.0",
    "hypothesis>=6.138.14",
    "isort>=6.0.1",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.20",
    "mutmut>=3.3.1",
    "mypy>=1.17.1",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.3.0",
    "pytest-watch>=4.2.0",
    "ruff>=0.12.12",
    "types-pytz>=2025.2.0.20250809",
]


[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true


[tool.ruff]
# Target Python version
target-version = "py312"


lint.select = [
"ALL"
]

lint.ignore = [
  "E501",      # line length (let formatter handle wrapping)
    "D",       # ignore any docstring issues (we'll use pydocstyle separately)
    "COM812",  # line break before binary operator (handled by formatter)
    "ERA001",  # Found commented-out code
    "PGH003",  # Use specific rule codes when ignoring type issues
    "TRY300",  # Consider moving this statement to an `else` block

]

# Maximum line length (matches Black’s default)
line-length = 100

exclude = [
  ".git",
  ".mypy_cache",
  ".ruff_cache",
  "__pycache__",
  "build",
  "dist",
    "**/tests/*.py"
]

[tool.ruff.format]
quote-style = "double"          # normalize to double quotes
indent-style = "space"          # enforce spaces
line-ending = "lf"              # consistent LF endings
skip-magic-trailing-comma = false
docstring-code-format = true    # format code inside docstrings
