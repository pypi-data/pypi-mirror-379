# SPDX-FileCopyrightText: 2024, German Cancer Research Center (DKFZ), Division of Medical Image Computing (MIC)
#
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# or find it in LICENSE.txt.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import logging

import avid.common.artefact.defaultProps as artefactProps

from . import BatchActionBase
from .pythonAction import PythonAction
from .simpleScheduler import SimpleScheduler

logger = logging.getLogger(__name__)


class ArtefactRefineAction(PythonAction):
    """Class that takes a artefact and generates a new artefact pointing to the same url/file.
    This action can e.g. be used to add or change artefact properties in a workflow without duplicating the
    resource the artefact url is pointing to.
    By default an output artefact will generated for each artefact in primary_input. The output
    artefacts will be generated by cloning the first input artefact and and changing action the action
    tag. Further property manipulations can be done via the arguments "additionalActionProps",
    "properertyInheritanceDict" or by providing an own generateCallable."""

    @staticmethod
    def _indicate_outputs(actionInstance, **allActionArgs):

        artefactRefs = actionInstance._inputArgs["primaryInputs"]

        result = list()

        for artefactRef in artefactRefs:
            resultArtefact = actionInstance.generateArtefact(artefactRef)
            resultArtefact[artefactProps.URL] = artefactRef[artefactProps.URL]
            result.append(resultArtefact)

        return result

    @staticmethod
    def _refine_artefact_default(outputs, **allargs):
        # default implementation does nothing. All default refinements are already
        # done in the indicate_output.
        pass

    def __init__(
        self,
        primaryInputs,
        generateCallable=None,
        indicateCallable=None,
        actionTag="ArtefactRefineAction",
        alwaysDo=True,
        session=None,
        additionalActionProps=None,
        propInheritanceDict=None,
        **inputArgs,
    ):
        """
        :param generateCallable: Custome callable that can be defined if a specific refinement is needed. If nothing is
            set. The output is kept as indicated by the indicateCallable. The signature of generateCallable is:
            generateCallable(primaryInputs ( = Input artefacts), outputs (=the output that should be produced),
            \*\*allArgs (= all other arguments passed to the action))
        """
        if generateCallable is None:
            generateCallable = ArtefactRefineAction._refine_artefact_default

        if indicateCallable is None:
            indicateCallable = ArtefactRefineAction._indicate_outputs

        PythonAction.__init__(
            self,
            primaryInputs=primaryInputs,
            generateCallable=generateCallable,
            indicateCallable=indicateCallable,
            passOnlyURLs=False,
            actionTag=actionTag,
            alwaysDo=alwaysDo,
            session=session,
            additionalActionProps=additionalActionProps,
            propInheritanceDict=propInheritanceDict,
            **inputArgs,
        )


class ArtefactRefineBatchAction(BatchActionBase):
    """Simple Batch class for the ArtefactRefineAction that only has the primary input and uses single split."""

    def __init__(
        self,
        inputSelector,
        actionTag="ArtefactRefine",
        session=None,
        additionalActionProps=None,
        scheduler=SimpleScheduler(),
        **singleActionParameters,
    ):
        BatchActionBase.__init__(
            self,
            actionTag=actionTag,
            actionClass=ArtefactRefineAction,
            primaryInputSelector=inputSelector,
            primaryAlias="primaryInputs",
            session=session,
            scheduler=scheduler,
            additionalActionProps=additionalActionProps,
            **singleActionParameters,
        )
