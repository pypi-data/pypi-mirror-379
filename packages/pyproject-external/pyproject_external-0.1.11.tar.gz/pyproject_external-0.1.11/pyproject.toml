[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "pyproject-external"
description = "Utilities to work with PEP 725 `[external]` metadata"
readme = "README.md"
authors = [
  { name = "Ralf Gommers", email = "rgommers@quansight.com" },
  { name = "Jaime RodrÃ­guez-Guerra", email = "jrodriguez@quansight.com" },
]
license = { file = "LICENSE" }
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
requires-python = ">=3.10"
dependencies = [
  "pip",
  "build",
  "requests",
  "jsonschema",
  "distro",
  "rich",
  "tomli; python_version <= '3.10'",
  "tomli-w",
  "typer>=0.17",
  "click",
  "typing_extensions; python_version <= '3.10'",
  "packaging",
  "packageurl-python>=0.17.1",
  "platformdirs >=3.10.0",
  "pypi-json",
  "dependency-groups",
]
dynamic = ["version"]

[project.urls]
homepage = "https://github.com/jaimergp/pyproject-external"

[tool.hatch.metadata]
allow-direct-references = true

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-64", "osx-arm64", "win-64"]

[tool.pixi.pypi-dependencies]
pyproject-external = { path = ".", editable = true }

[tool.pixi.tasks]
cli = "python -m pyproject_external"

[tool.pixi.feature.pre-commit.dependencies]
pre-commit = "*"
[tool.pixi.feature.pre-commit.tasks]
pre-commit = "pre-commit"

[tool.pixi.feature.py310.dependencies]
python = "3.10.*"
[tool.pixi.feature.py311.dependencies]
python = "3.11.*"
[tool.pixi.feature.py312.dependencies]
python = "3.12.*"
[tool.pixi.feature.py313.dependencies]
python = "3.13.*"

[tool.pixi.feature.test.dependencies]
pytest = "*"
pytest-cov = "*"
micromamba = "*"

[tool.pixi.feature.test.tasks]
test = "pytest"
test-cov = "pytest --cov=pyproject_external --cov-report xml:cov.xml"

[tool.pixi.environments]
test-py310 = ["test", "py310"]
test-py311 = ["test", "py311"]
test-py312 = ["test", "py312"]
test-py313 = ["test", "py313"]
pre-commit = ["pre-commit"]

[tool.ruff]
line-length = 99
[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    "W",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # isort
    "I",
    # pep8 naming
    "N",
    # annotations
    "ANN",
    # debugger
    "T10",
    # flake8-return
    "RET",
]
ignore = [
    "ANN002", # Missing type annotation for `*args`
    "ANN003", # Missing type annotation for `**kwargs`
    "ANN201", # Missing return type annotation for public function (makes no sense for NoneType return types...)
    "ANN204", # Missing return type annotation for special method
    "B905", # zip() without an explicit strict=; incompatible with python<3.12
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__
    "D203", # 1 blank line before after class docstring
    "D204", # 1 blank line required after class docstring
    "D206", # Docstrings should be indented with spaces; unnecessary when running ruff-format
    "D211", # No blank line before class
    "D213", # Multiline summary second line
    "D413", # 1 black line after parameters
    "E501", # Line length too long; unnecessary when running ruff-format
    "W191", # Indentation contains tabs; unnecessary when running ruff-format
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"test_*.py" = ["ANN001"]

[tool.mypy]
show_error_codes = true
ignore_missing_imports = true
strict = true

[tool.hatch.build.hooks.vcs]
version-file = "src/pyproject_external/_version.py"

[tool.hatch.version]
source = "vcs"
