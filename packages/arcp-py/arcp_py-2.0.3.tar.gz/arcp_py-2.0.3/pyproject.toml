[tool.poetry]
name = "arcp-py"
version = "2.0.3"
description = "ARCP (Agent Registry & Control Protocol) is a sophisticated agent orchestration protocol that provides centralized service discovery, registration, communication, and control for distributed agent systems."
authors = ["Muhannad <01muhannad.a@gmail.com>"]
license = "Apache-2.0"
readme = "README.md"
homepage = "https://github.com/0x00K1/ARCP"
repository = "https://github.com/0x00K1/ARCP"
documentation = "https://arcp.0x001.tech/docs"
keywords = ["ai", "agents", "registry", "control", "protocol", "microservice", "fastapi"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
packages = [
    { include = "arcp", from = "src" },
    { include = "web" },
]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = ">=0.115.0,<1.0.0"
uvicorn = {extras = ["standard"], version = ">=0.24.0,<1.0.0"}
pydantic = ">=2.5.0,<3.0.0"
PyJWT = ">=2.10.1,<3.0.0"
psutil = ">=7.0.0,<8.0.0"
redis = ">=5.0.1,<7.0.0"
prometheus-client = ">=0.19.0,<1.0.0"
httpx = ">=0.25.2,<1.0.0"
openai = ">=1.3.0,<2.0.0"
python-dotenv = ">=1.0.0,<2.0.0"
opentelemetry-api = ">=1.21.0,<2.0.0"
opentelemetry-sdk = ">=1.21.0,<2.0.0"
opentelemetry-instrumentation = ">=0.42b0,<1.0.0"
opentelemetry-instrumentation-fastapi = ">=0.42b0,<1.0.0"
opentelemetry-instrumentation-redis = ">=0.42b0,<1.0.0"
opentelemetry-instrumentation-httpx = ">=0.42b0,<1.0.0"
opentelemetry-exporter-jaeger-thrift = ">=1.21.0,<2.0.0"
opentelemetry-exporter-otlp-proto-grpc = ">=1.21.0,<2.0.0"
opentelemetry-semantic-conventions = ">=0.42b0,<1.0.0"
deprecated = ">=1.2.0,<2.0.0"
wrapt = ">=1.10.0,<2.0.0"
thrift = ">=0.13.0,<1.0.0"
importlib-metadata = ">=1.7.0,<7.0.0"
websockets = ">=11.0.3,<16.0.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
# aiohttp = "^3.12.15"  # For security testing only - install manually if needed

# Code Quality
black = "^24.10.0"
isort = "^5.12.0"
flake8 = "^7.0.0"
flake8-pyproject = "^1.2.3"
# mypy = "^1.7.0"
# bandit = "^1.7.5"
safety = "^3.0.0"

# Pre-commit hooks
pre-commit = "^3.6.0"

# Documentation
mkdocs = "^1.5.0"
mkdocs-material = "^9.4.0"
mkdocs-gen-files = "^0.5.0"
mkdocs-literate-nav = "^0.6.0"
mkdocs-section-index = "^0.3.0"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}

# Development tools
ipython = "^8.17.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# Package build configuration for PyPI
[tool.poetry.build]
generate-setup-file = true

# Include additional files in the package
[tool.poetry.extras]
dev = ["pytest", "pytest-asyncio", "httpx", "aiofiles"]
all = ["pytest", "pytest-asyncio", "httpx", "aiofiles"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | docs
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true
skip_glob = ["*/migrations/*"]
known_third_party = ["fastapi", "pydantic", "redis", "openai", "numpy", "pytest"]
known_first_party = ["arcp"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "E501", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".eggs",
    "*.egg",
    ".venv",
    "venv",
    "env",
    "node_modules",
]
extend-exclude = [
    ".venv",
    ".venv/",
    "**/.venv/**",
    "venv",
    "env",
    "**/site-packages/**",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as async",
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    ".venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.commitizen]
name = "cz_conventional_commits"
version = "2.0.0"
version_files = [
    "src/arcp/__init__.py:__version__",
    "pyproject.toml:version"
]
style = [
    ["qmark", "fg:#ff9d00 bold"],
    ["question", "bold"],
    ["answer", "fg:#ff9d00 bold"],
    ["pointer", "fg:#ff9d00 bold"],
    ["highlighted", "fg:#ff9d00 bold"],
    ["selected", "fg:#cc5454"],
    ["separator", "fg:#cc5454"],
    ["instruction", ""],
    ["text", ""],
    ["disabled", "fg:#858585 italic"]
]

[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F"]
ignore = []

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Python 3.11.
target-version = "py311"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10