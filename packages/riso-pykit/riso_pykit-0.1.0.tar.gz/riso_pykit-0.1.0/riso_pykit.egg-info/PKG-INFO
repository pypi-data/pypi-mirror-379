Metadata-Version: 2.4
Name: riso-pykit
Version: 0.1.0
Summary: RisoTech Python Kit - A collection of Python tools and libraries for the Riso framework
Author-email: Bin Nguyen <tu.nguyen@risotech.vn>
Project-URL: Homepage, https://github.com/libs-factory/riso-pykit
Project-URL: Documentation, https://github.com/libs-factory/riso-pykit#readme
Project-URL: Repository, https://github.com/libs-factory/riso-pykit
Project-URL: Bug Tracker, https://github.com/libs-factory/riso-pykit/issues
Keywords: riso,pykit,risotech,python,toolkit,utilities,logger
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.12
Description-Content-Type: text/markdown
Requires-Dist: build==1.2.2
Requires-Dist: twine==6.0.1
Requires-Dist: ruff==0.13.0
Requires-Dist: pre-commit==4.3.0
Requires-Dist: ipdb==0.13.13
Requires-Dist: pytest==8.3.4
Requires-Dist: pytest-cov==6.0.0

# Riso Python Kit

[![Python Version](https://img.shields.io/badge/python-3.12%2B-blue)](https://www.python.org/downloads/)
[![PyPI - Version](https://img.shields.io/pypi/v/riso-toolkit)](https://pypi.org/project/riso-toolkit/)


RisoTech Python Kit provides a set of utilities, components, and best practices to enhance the functionality of Riso-based Python applications.

## Features

### Terminal Logging Package (`pykit.logging`)

A colorful terminal logging system converted from bash script to Python, providing:

- üé® **Colorful terminal output** with ANSI color codes
- üìä **Workflow tracking** with timing and context management
- üìã **Step-by-step logging** with progress indicators
- üì¶ **Group logging** with context managers
- üö® **Error handling** with recovery hints
- üêõ **Debug mode** support

#### Quick Usage

**Simple logging (like print()):**
```python
from pykit.logging import log_info, log_success, log_error, log_warning

log_info("This works like print but with colors!")
log_success("Operation completed successfully!")
log_error("Something went wrong!")
log_warning("This is a warning!")
```

**Advanced workflow logging:**
```python
from pykit.logging import TerminalLogger

logger = TerminalLogger()
logger.workflow_start("Data Processing")

logger.step_start("Load Data", 1, 3)
logger.info("Loading data from database...")
logger.step_end("Load Data", "success")

with logger.group("Data Transformation"):
    logger.info("Applying transformations...")
    logger.success("Transformations completed")

logger.workflow_end("Data Processing", "success")
```
