[build-system]
requires = ["maturin>=1.8,<2.0"]
build-backend = "maturin"

[project]
name = "nupunkt-rs"
requires-python = ">=3.11"
description = "High-performance Rust implementation of nupunkt sentence/paragraph tokenization"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "ALEA Institute", email = "hello@aleainstitute.ai" }
]
keywords = [
    "nlp",
    "natural language processing",
    "tokenization",
    "sentence boundary detection",
    "paragraph detection",
    "punkt",
    "text processing",
    "linguistics",
    "rust"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Programming Language :: Rust",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
    "Natural Language :: English",
    "Operating System :: OS Independent",
]
dynamic = ["version"]

[project.urls]
"Homepage" = "https://github.com/alea-institute/nupunkt-rs"
"Source" = "https://github.com/alea-institute/nupunkt-rs"
"Bug Tracker" = "https://github.com/alea-institute/nupunkt-rs/issues"
"Documentation" = "https://github.com/alea-institute/nupunkt-rs"

[project.optional-dependencies]
tests = [
    "pytest>=8.3.2",
    "pytest-benchmark>=5.1.0",
    "pytest-cov>=6.0.0",
]
dev = [
    "pytest>=8.3.2",
    "pytest-benchmark>=5.1.0",
    "pytest-cov>=6.0.0",
    "maturin>=1.8",
    "memory-profiler>=0.61.0",
    "psutil>=7.0.0",
]
[tool.maturin]
python-source = "python"
features = ["pyo3/extension-module"]
module-name = "nupunkt_rs._nupunkt_rs"
compatibility = "manylinux2014"
strip = true

[tool.ruff]
target-version = "py311"
line-length = 100

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "B",    # flake8-bugbear
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
    "PTH",  # use pathlib
]

ignore = [
    "E501",  # line too long
    "E741",  # ambiguous variable name
]

[tool.black]
line-length = 100
target-version = ["py311"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true

[tool.pytest.ini_options]
testpaths = ["python/tests"]
python_files = "test_*.py"
addopts = "-v"

[dependency-groups]
dev = [
    "pytest>=8.4.1",
]
