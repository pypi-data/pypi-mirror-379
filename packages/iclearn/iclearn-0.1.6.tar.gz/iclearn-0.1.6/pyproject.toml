[project]
name = "iclearn"
version = "0.1.6"
authors = [
  { name="James Grogan, Irish Centre for High End Computing", email="james.grogan@ichec.ie" },
]
description = "A collection of utilities for machine learning applications."
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: OS Independent",
    "Topic :: System :: Distributed Computing"
]
keywords = ["Machine Learning", "Workflow", "HPC"]

dependencies = ["icsystemutils==0.2.5",
                "icplot==0.2.4",
                "mlflow",
                "tensorboard",
                "opencv-python-headless"]
            
[project.urls]
Repository = "https://git.ichec.ie/performance/toolshed/iclearn"
Homepage = "https://git.ichec.ie/performance/toolshed/iclearn"

[project.scripts]
iclearn = "iclearn.main_cli:main_cli"

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-cov",
    "pytest-sugar",
    "black",
    "flake8",
    "pylint",
    "mypy"
]

torch = ["torch", "torchvision"]

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.mypy]
ignore_missing_imports = true

[tool.setuptools.package-data]
"iclearn" = ["py.typed"]

[tool.setuptools.packages.find]
where = ["src"]

[tool.pytest.ini_options]
testpaths = ["test",]
log_cli = 1
log_cli_level = "debug"
addopts = "--cov=iclearn --cov-report term --cov-fail-under=50 --cov-report xml:coverage.xml --cov-report html"
markers = [
    "gpu: marks tests that require GPUs and NCCL (deselect with '-m \"not gpu\"')"
]

[tool.pylint.main]

source-roots = ["src"]
fail-under = 7.3

[tool.pylint.basic]

class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
docstring-min-length = -1

function-naming-style = "snake_case"
method-naming-style = "snake_case"
module-naming-style = "snake_case"
variable-naming-style = "snake_case"

no-docstring-rgx = "^_"

[tool.pylint.design]
# Maximum number of arguments for function / method.
max-args = 6
# Maximum number of attributes for a class (see R0902).
max-attributes = 7
# Minimum number of public methods for a class (see R0903).
min-public-methods = 1

[tool.pylint.logging]
# The type of string formatting that logging methods do. `old` means using %
# formatting, `new` is for `{}` formatting.
logging-format-style = "old"

# Disable the message, report, category or checker with the given id(s). You can
# either give multiple identifiers separated by comma (,) or put this option
# multiple times (only on the command line, not in the configuration file where
# it should appear only once). You can also use "--disable=all" to disable
# everything first and then re-enable specific checks. For example, if you want
# to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use "--disable=all --enable=classes
# --disable=W".
disable = ["raw-checker-failed", "missing-module-docstring", "missing-function-docstring", "bad-inline-option", "locally-disabled", "file-ignored", "suppressed-message", "useless-suppression", "deprecated-pragma", "use-symbolic-message-instead", "use-implicit-booleaness-not-comparison-to-string", "use-implicit-booleaness-not-comparison-to-zero"]


[tool.tox]
legacy_tox_ini = """
[tox]
requires =
    tox
env_list = format_check, lint, style, type, unit, docs
skip_missing_interpreters = true

[testenv:unit]
description = Run Unit Tests
allowlist_externals =
   bash
   ./infra/pip_torch_wrapper.sh
install_command =
    bash ./infra/pip_torch_wrapper.sh {opts} {packages}
deps =
    pytest
    pytest-sugar
    pytest-cov
    pillow
extras = torch
commands =
    pytest -m "not gpu" {posargs:test}

[testenv:unit-gpu]
description = Run Unit Tests with GPU enabled PyTorch
allowlist_externals =
   bash
   ./infra/pip_torch_wrapper_gpu.sh
install_command =
    bash ./infra/pip_torch_wrapper_gpu.sh {opts} {packages}
deps =
    pytest
    pytest-sugar
    pytest-cov
    pillow
    pynvml
extras = torch
commands =
    pytest -m "gpu" {posargs:test}

[testenv:format_apply]
description = Apply Black Formatting
skip_install = true
deps =
    black
commands = black {posargs:src test}

[testenv:format_check]
description = Check Black Formatting
skip_install = true
deps =
    black
commands = black --check --diff {posargs:src test}

[testenv:lint]
description = Run Linter
skip_install = true
deps =
    pylint
commands = pylint {posargs:src}

[testenv:style]
description = Run Style Check
skip_install = true
deps =
    flake8
commands = flake8 {posargs:src}

[testenv:type]
description = Run Type Check
deps =
    mypy
    iclearn[types]
commands =
    mypy {posargs:src}

[testenv:docs]
description = Generate Docs
changedir = docs
deps = sphinx
commands = sphinx-build -W -b html -d {envtmpdir}/doctrees . {envtmpdir}/html
"""
