# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'LocalFileResult',
    'AwaitableLocalFileResult',
    'local_file',
    'local_file_output',
]

@pulumi.output_type
class LocalFileResult:
    def __init__(__self__, contents=None, filename=None, local_path=None, mode=None):
        if contents and not isinstance(contents, str):
            raise TypeError("Expected argument 'contents' to be a str")
        pulumi.set(__self__, "contents", contents)
        if filename and not isinstance(filename, str):
            raise TypeError("Expected argument 'filename' to be a str")
        pulumi.set(__self__, "filename", filename)
        if local_path and not isinstance(local_path, str):
            raise TypeError("Expected argument 'local_path' to be a str")
        pulumi.set(__self__, "local_path", local_path)
        if mode and not isinstance(mode, int):
            raise TypeError("Expected argument 'mode' to be a int")
        pulumi.set(__self__, "mode", mode)

    @_builtins.property
    @pulumi.getter
    def contents(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "contents")

    @_builtins.property
    @pulumi.getter
    def filename(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "filename")

    @_builtins.property
    @pulumi.getter(name="localPath")
    def local_path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "local_path")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "mode")


class AwaitableLocalFileResult(LocalFileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return LocalFileResult(
            contents=self.contents,
            filename=self.filename,
            local_path=self.local_path,
            mode=self.mode)


def local_file(contents: Optional[_builtins.str] = None,
               filename: Optional[_builtins.str] = None,
               local_path: Optional[_builtins.str] = None,
               mode: Optional[_builtins.int] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableLocalFileResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['contents'] = contents
    __args__['filename'] = filename
    __args__['localPath'] = local_path
    __args__['mode'] = mode
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('runner:runner:localFile', __args__, opts=opts, typ=LocalFileResult).value

    return AwaitableLocalFileResult(
        contents=pulumi.get(__ret__, 'contents'),
        filename=pulumi.get(__ret__, 'filename'),
        local_path=pulumi.get(__ret__, 'local_path'),
        mode=pulumi.get(__ret__, 'mode'))
def local_file_output(contents: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      filename: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      local_path: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      mode: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[LocalFileResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['contents'] = contents
    __args__['filename'] = filename
    __args__['localPath'] = local_path
    __args__['mode'] = mode
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('runner:runner:localFile', __args__, opts=opts, typ=LocalFileResult)
    return __ret__.apply(lambda __response__: LocalFileResult(
        contents=pulumi.get(__response__, 'contents'),
        filename=pulumi.get(__response__, 'filename'),
        local_path=pulumi.get(__response__, 'local_path'),
        mode=pulumi.get(__response__, 'mode')))
