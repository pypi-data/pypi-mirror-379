# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import deb as _deb

__all__ = [
    'CommandDefinition',
    'Config',
    'FileAsset',
]

@pulumi.output_type
class CommandDefinition(dict):
    def __init__(__self__, *,
                 command: _builtins.str,
                 environment: Optional[Mapping[str, _builtins.str]] = None,
                 payload: Optional[Sequence['outputs.FileAsset']] = None):
        pulumi.set(__self__, "command", command)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if payload is not None:
            pulumi.set(__self__, "payload", payload)

    @_builtins.property
    @pulumi.getter
    def command(self) -> _builtins.str:
        return pulumi.get(self, "command")

    @_builtins.property
    @pulumi.getter
    def environment(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "environment")

    @_builtins.property
    @pulumi.getter
    def payload(self) -> Optional[Sequence['outputs.FileAsset']]:
        return pulumi.get(self, "payload")


@pulumi.output_type
class Config(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aptLockTimeout":
            suggest = "apt_lock_timeout"
        elif key == "keepPayload":
            suggest = "keep_payload"
        elif key == "packageConfig":
            suggest = "package_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Config. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Config.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Config.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apt_lock_timeout: Optional[_builtins.int] = None,
                 keep_payload: Optional[_builtins.bool] = None,
                 package_config: Optional['_deb.outputs.PackageConfig'] = None):
        if apt_lock_timeout is not None:
            pulumi.set(__self__, "apt_lock_timeout", apt_lock_timeout)
        if keep_payload is not None:
            pulumi.set(__self__, "keep_payload", keep_payload)
        if package_config is not None:
            pulumi.set(__self__, "package_config", package_config)

    @_builtins.property
    @pulumi.getter(name="aptLockTimeout")
    def apt_lock_timeout(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "apt_lock_timeout")

    @_builtins.property
    @pulumi.getter(name="keepPayload")
    def keep_payload(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "keep_payload")

    @_builtins.property
    @pulumi.getter(name="packageConfig")
    def package_config(self) -> Optional['_deb.outputs.PackageConfig']:
        return pulumi.get(self, "package_config")


@pulumi.output_type
class FileAsset(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localPath":
            suggest = "local_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FileAsset. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FileAsset.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FileAsset.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contents: Optional[_builtins.str] = None,
                 filename: Optional[_builtins.str] = None,
                 local_path: Optional[_builtins.str] = None,
                 mode: Optional[_builtins.int] = None):
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if local_path is not None:
            pulumi.set(__self__, "local_path", local_path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @_builtins.property
    @pulumi.getter
    def contents(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "contents")

    @_builtins.property
    @pulumi.getter
    def filename(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "filename")

    @_builtins.property
    @pulumi.getter(name="localPath")
    def local_path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "local_path")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "mode")


