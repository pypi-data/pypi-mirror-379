# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import deb as _deb
from .. import ssh as _ssh
from ._inputs import *

__all__ = ['SSHDeployerArgs', 'SSHDeployer']

@pulumi.input_type
class SSHDeployerArgs:
    def __init__(__self__, *,
                 connection: pulumi.Input['_ssh.ConnectionArgs'],
                 config: Optional[pulumi.Input['ConfigArgs']] = None,
                 create: Optional[pulumi.Input['CommandDefinitionArgs']] = None,
                 delete: Optional[pulumi.Input['CommandDefinitionArgs']] = None,
                 environment: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 payload: Optional[pulumi.Input[Sequence[pulumi.Input['FileAssetArgs']]]] = None,
                 update: Optional[pulumi.Input['CommandDefinitionArgs']] = None):
        """
        The set of arguments for constructing a SSHDeployer resource.
        """
        pulumi.set(__self__, "connection", connection)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if payload is not None:
            pulumi.set(__self__, "payload", payload)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def connection(self) -> pulumi.Input['_ssh.ConnectionArgs']:
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: pulumi.Input['_ssh.ConnectionArgs']):
        pulumi.set(self, "connection", value)

    @_builtins.property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['ConfigArgs']]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['ConfigArgs']]):
        pulumi.set(self, "config", value)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input['CommandDefinitionArgs']]:
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input['CommandDefinitionArgs']]):
        pulumi.set(self, "create", value)

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input['CommandDefinitionArgs']]:
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input['CommandDefinitionArgs']]):
        pulumi.set(self, "delete", value)

    @_builtins.property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "environment", value)

    @_builtins.property
    @pulumi.getter
    def payload(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FileAssetArgs']]]]:
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FileAssetArgs']]]]):
        pulumi.set(self, "payload", value)

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input['CommandDefinitionArgs']]:
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input['CommandDefinitionArgs']]):
        pulumi.set(self, "update", value)


@pulumi.type_token("runner:runner:SSHDeployer")
class SSHDeployer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[Union['ConfigArgs', 'ConfigArgsDict']]] = None,
                 connection: Optional[pulumi.Input[Union['_ssh.ConnectionArgs', '_ssh.ConnectionArgsDict']]] = None,
                 create: Optional[pulumi.Input[Union['CommandDefinitionArgs', 'CommandDefinitionArgsDict']]] = None,
                 delete: Optional[pulumi.Input[Union['CommandDefinitionArgs', 'CommandDefinitionArgsDict']]] = None,
                 environment: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 payload: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FileAssetArgs', 'FileAssetArgsDict']]]]] = None,
                 update: Optional[pulumi.Input[Union['CommandDefinitionArgs', 'CommandDefinitionArgsDict']]] = None,
                 __props__=None):
        """
        Create a SSHDeployer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SSHDeployerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SSHDeployer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SSHDeployerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SSHDeployerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[Union['ConfigArgs', 'ConfigArgsDict']]] = None,
                 connection: Optional[pulumi.Input[Union['_ssh.ConnectionArgs', '_ssh.ConnectionArgsDict']]] = None,
                 create: Optional[pulumi.Input[Union['CommandDefinitionArgs', 'CommandDefinitionArgsDict']]] = None,
                 delete: Optional[pulumi.Input[Union['CommandDefinitionArgs', 'CommandDefinitionArgsDict']]] = None,
                 environment: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 payload: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FileAssetArgs', 'FileAssetArgsDict']]]]] = None,
                 update: Optional[pulumi.Input[Union['CommandDefinitionArgs', 'CommandDefinitionArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SSHDeployerArgs.__new__(SSHDeployerArgs)

            __props__.__dict__["config"] = config
            if connection is None and not opts.urn:
                raise TypeError("Missing required property 'connection'")
            __props__.__dict__["connection"] = connection
            __props__.__dict__["create"] = create
            __props__.__dict__["delete"] = delete
            __props__.__dict__["environment"] = environment
            __props__.__dict__["payload"] = payload
            __props__.__dict__["update"] = update
        super(SSHDeployer, __self__).__init__(
            'runner:runner:SSHDeployer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'SSHDeployer':
        """
        Get an existing SSHDeployer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = SSHDeployerArgs.__new__(SSHDeployerArgs)

        __props__.__dict__["config"] = None
        __props__.__dict__["connection"] = None
        __props__.__dict__["create"] = None
        __props__.__dict__["delete"] = None
        __props__.__dict__["environment"] = None
        __props__.__dict__["payload"] = None
        __props__.__dict__["update"] = None
        return SSHDeployer(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def config(self) -> pulumi.Output[Optional['outputs.Config']]:
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter
    def connection(self) -> pulumi.Output['_ssh.outputs.Connection']:
        return pulumi.get(self, "connection")

    @_builtins.property
    @pulumi.getter
    def create(self) -> pulumi.Output[Optional['outputs.CommandDefinition']]:
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> pulumi.Output[Optional['outputs.CommandDefinition']]:
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def environment(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        return pulumi.get(self, "environment")

    @_builtins.property
    @pulumi.getter
    def payload(self) -> pulumi.Output[Optional[Sequence['outputs.FileAsset']]]:
        return pulumi.get(self, "payload")

    @_builtins.property
    @pulumi.getter
    def update(self) -> pulumi.Output[Optional['outputs.CommandDefinition']]:
        return pulumi.get(self, "update")

