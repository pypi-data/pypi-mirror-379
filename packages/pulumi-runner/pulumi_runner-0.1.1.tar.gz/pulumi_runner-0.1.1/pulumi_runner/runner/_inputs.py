# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from .. import deb as _deb

__all__ = [
    'CommandDefinitionArgs',
    'CommandDefinitionArgsDict',
    'ConfigArgs',
    'ConfigArgsDict',
    'FileAssetArgs',
    'FileAssetArgsDict',
]

MYPY = False

if not MYPY:
    class CommandDefinitionArgsDict(TypedDict):
        command: pulumi.Input[_builtins.str]
        environment: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        payload: NotRequired[pulumi.Input[Sequence[pulumi.Input['FileAssetArgsDict']]]]
elif False:
    CommandDefinitionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CommandDefinitionArgs:
    def __init__(__self__, *,
                 command: pulumi.Input[_builtins.str],
                 environment: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 payload: Optional[pulumi.Input[Sequence[pulumi.Input['FileAssetArgs']]]] = None):
        pulumi.set(__self__, "command", command)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if payload is not None:
            pulumi.set(__self__, "payload", payload)

    @_builtins.property
    @pulumi.getter
    def command(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "command", value)

    @_builtins.property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "environment", value)

    @_builtins.property
    @pulumi.getter
    def payload(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FileAssetArgs']]]]:
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FileAssetArgs']]]]):
        pulumi.set(self, "payload", value)


if not MYPY:
    class ConfigArgsDict(TypedDict):
        apt_lock_timeout: NotRequired[pulumi.Input[_builtins.int]]
        keep_payload: NotRequired[pulumi.Input[_builtins.bool]]
        package_config: NotRequired[pulumi.Input['_deb.PackageConfigArgsDict']]
elif False:
    ConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigArgs:
    def __init__(__self__, *,
                 apt_lock_timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 keep_payload: Optional[pulumi.Input[_builtins.bool]] = None,
                 package_config: Optional[pulumi.Input['_deb.PackageConfigArgs']] = None):
        if apt_lock_timeout is not None:
            pulumi.set(__self__, "apt_lock_timeout", apt_lock_timeout)
        if keep_payload is not None:
            pulumi.set(__self__, "keep_payload", keep_payload)
        if package_config is not None:
            pulumi.set(__self__, "package_config", package_config)

    @_builtins.property
    @pulumi.getter(name="aptLockTimeout")
    def apt_lock_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "apt_lock_timeout")

    @apt_lock_timeout.setter
    def apt_lock_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "apt_lock_timeout", value)

    @_builtins.property
    @pulumi.getter(name="keepPayload")
    def keep_payload(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "keep_payload")

    @keep_payload.setter
    def keep_payload(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "keep_payload", value)

    @_builtins.property
    @pulumi.getter(name="packageConfig")
    def package_config(self) -> Optional[pulumi.Input['_deb.PackageConfigArgs']]:
        return pulumi.get(self, "package_config")

    @package_config.setter
    def package_config(self, value: Optional[pulumi.Input['_deb.PackageConfigArgs']]):
        pulumi.set(self, "package_config", value)


if not MYPY:
    class FileAssetArgsDict(TypedDict):
        contents: NotRequired[pulumi.Input[_builtins.str]]
        filename: NotRequired[pulumi.Input[_builtins.str]]
        local_path: NotRequired[pulumi.Input[_builtins.str]]
        mode: NotRequired[pulumi.Input[_builtins.int]]
elif False:
    FileAssetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FileAssetArgs:
    def __init__(__self__, *,
                 contents: Optional[pulumi.Input[_builtins.str]] = None,
                 filename: Optional[pulumi.Input[_builtins.str]] = None,
                 local_path: Optional[pulumi.Input[_builtins.str]] = None,
                 mode: Optional[pulumi.Input[_builtins.int]] = None):
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if local_path is not None:
            pulumi.set(__self__, "local_path", local_path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @_builtins.property
    @pulumi.getter
    def contents(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "contents")

    @contents.setter
    def contents(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "contents", value)

    @_builtins.property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "filename", value)

    @_builtins.property
    @pulumi.getter(name="localPath")
    def local_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "local_path")

    @local_path.setter
    def local_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_path", value)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "mode", value)


