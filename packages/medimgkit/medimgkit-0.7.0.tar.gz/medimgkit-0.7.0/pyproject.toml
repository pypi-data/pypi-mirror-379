[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "medimgkit"
version = "0.7.0"
description = "A comprehensive toolkit for medical image processing, including DICOM, NIfTI, and multi-format I/O utilities"
readme = "README.md"
license = "MIT"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["medical", "imaging", "dicom", "nifti", "healthcare", "radiology", "medical-imaging", "image-processing"]
dependencies = [
    "pydicom>=2.3.0",
    "nibabel>=3.2.0",
    "numpy>=1.20.0",
    "Pillow>=8.0.0",
    "opencv-python>=4.5.0",
    "tqdm>=4.60.0",
    "python-magic>=0.4.24",
    'puremagic>=1.30',
    'plotly>=5.19.0',
    'nbformat>=4.3.0',
    'pandas>=1.5.3',
    'pylibjpeg>=2.0.0',
    'pylibjpeg-libjpeg>=2.0.0'
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov",
    "flake8",
]
test = [
    "pytest>=6.0",
    "pytest-cov",
]
docs = [
    "sphinx",
    "sphinx-rtd-theme",
]

[project.urls]
Homepage = "https://github.com/SonanceAI/medimgkit"
Repository = "https://github.com/SonanceAI/medimgkit"
"Bug Tracker" = "https://github.com/SonanceAI/medimgkit/issues"

[tool.setuptools]
packages = ["medimgkit"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["medimgkit"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
