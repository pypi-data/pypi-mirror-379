import abc
import dataclasses
from _typeshed import Incomplete
from shops_payment_processing.logging_config import logger as logger
from typing import Any

@dataclasses.dataclass
class CreateInvoiceRequest:
    shop_name: str
    order_id: str
    order_number: str
    amount: float
    currency: str = ...
    description: str | None = ...
    customer_phone: str | None = ...
    customer_email: str | None = ...
    redirect_url: str | None = ...
    items: list | None = ...
    metadata: dict[str, Any] | None = ...
    def __init__(self, shop_name, order_id, order_number, amount, currency=..., description=..., customer_phone=..., customer_email=..., redirect_url=..., items=..., metadata=...) -> None: ...

@dataclasses.dataclass
class CreateInvoiceResponse:
    payment_id: str
    payment_url: str | None = ...
    status: str = ...
    raw_response: dict[str, Any] | None = ...
    def __init__(self, payment_id, payment_url=..., status=..., raw_response=...) -> None: ...

@dataclasses.dataclass
class PaymentStatusResponse:
    payment_id: str
    status: str
    amount: float
    currency: str = ...
    paid: bool = ...
    refunded: bool = ...
    created_at: str | None = ...
    raw_response: dict[str, Any] | None = ...
    def __init__(self, payment_id, status, amount, currency=..., paid=..., refunded=..., created_at=..., raw_response=...) -> None: ...

@dataclasses.dataclass
class RefundRequest:
    payment_id: str
    amount: float | None = ...
    reason: str | None = ...
    def __init__(self, payment_id, amount=..., reason=...) -> None: ...

@dataclasses.dataclass
class RefundResponse:
    refund_id: str
    payment_id: str
    status: str
    amount: float
    currency: str = ...
    raw_response: dict[str, Any] | None = ...
    def __init__(self, refund_id, payment_id, status, amount, currency=..., raw_response=...) -> None: ...

class BasePaymentsAPI(abc.ABC, metaclass=abc.ABCMeta):
    url: Incomplete
    timeout: Incomplete
    max_retries: Incomplete
    retry_delay: Incomplete
    def __init__(self, **kwargs) -> None: ...
    @abc.abstractmethod
    async def create_invoice(self, req: CreateInvoiceRequest) -> CreateInvoiceResponse: ...
    @abc.abstractmethod
    async def get_payment_status(self, payment_id: str) -> PaymentStatusResponse: ...
    @abc.abstractmethod
    async def refund(self, req: RefundRequest) -> RefundResponse: ...
