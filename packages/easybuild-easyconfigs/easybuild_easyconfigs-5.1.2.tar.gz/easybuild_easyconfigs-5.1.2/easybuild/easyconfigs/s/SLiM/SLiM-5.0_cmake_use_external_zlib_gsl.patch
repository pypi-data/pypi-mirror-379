Based on original patch from Ake Sandgren <ake.sandgren@hpc2n.umu.se>
Updating CMakeList.txt file etc. to use the EasyBuild provided GSL and ZLIB
Author: J. Sassmannshausen (Imperial College London/UK)

diff --git a/SLiM-5.0.orig/CMakeLists.txt b/SLiM-5.0/CMakeLists.txt
index 875a3dd..06a8f9b 100644
--- a/SLiM-5.0.orig/CMakeLists.txt
+++ b/SLiM-5.0/CMakeLists.txt
@@ -126,7 +126,7 @@ get_git_head_revision(GIT_REFSPEC GIT_SHA1)
 
 
 # Use the flags below for [all / Debug / Release] builds; these flags are built in to cmake
-# Note that -fno-math-errno is deliberately set for C++ (for eidos and slim) but not for C (for gsl, eidos_zlib, kastore, tables)
+# Note that -fno-math-errno is deliberately set for C++ (for eidos and slim) but not for C (for gsl, libz.a, kastore, tables)
 set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c11 -Wno-attributes -Wunused-label -Wimplicit -Wunused-variable -Wunused-value -Wno-pragmas -Wempty-body -Wshadow -Wparentheses -Wmissing-prototypes -Wswitch -Wpointer-sign -Wsign-compare -Wstrict-prototypes -Wno-sign-conversion -Wuninitialized")
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wno-attributes -Wunused-label -Wunused-variable -Wunused-value -Wno-pragmas -Wempty-body -Wshadow -Wparentheses -Wswitch -Wsign-compare -Wno-sign-conversion -Wuninitialized -fno-math-errno")
 
@@ -239,19 +239,11 @@ if(BUILD_LTO)
     endif()
 endif()
 
-# GSL - adding /usr/local/include so all targets that use GSL_INCLUDES get omp.h
-set(TARGET_NAME_GSL gsl)
-file(GLOB_RECURSE GSL_SOURCES ${PROJECT_SOURCE_DIR}/gsl/*.c ${PROJECT_SOURCE_DIR}/gsl/*/*.c)
-set(GSL_INCLUDES ${PROJECT_SOURCE_DIR}/gsl ${PROJECT_SOURCE_DIR}/gsl/specfunc ${PROJECT_SOURCE_DIR}/gsl/blas ${PROJECT_SOURCE_DIR}/gsl/rng ${PROJECT_SOURCE_DIR}/gsl/cdf ${PROJECT_SOURCE_DIR}/gsl/vector ${PROJECT_SOURCE_DIR}/gsl/err ${PROJECT_SOURCE_DIR}/gsl/sys ${PROJECT_SOURCE_DIR}/gsl/randist ${PROJECT_SOURCE_DIR}/gsl/matrix ${PROJECT_SOURCE_DIR}/gsl/cblas ${PROJECT_SOURCE_DIR}/gsl/complex ${PROJECT_SOURCE_DIR}/gsl/block ${PROJECT_SOURCE_DIR}/gsl/interpolation ${PROJECT_SOURCE_DIR}/gsl/linalg /usr/local/include)
-add_library(${TARGET_NAME_GSL} STATIC ${GSL_SOURCES})
-target_include_directories(${TARGET_NAME_GSL} PUBLIC ${GSL_INCLUDES})
+# GSL (coming from EasyBuild) 
+find_package(GSL)
 
-# ZLIB
-set(TARGET_NAME_ZLIB eidos_zlib)
-file(GLOB_RECURSE ZLIB_SOURCES ${PROJECT_SOURCE_DIR}/eidos_zlib/*.c)
-set(ZLIB_INCLUDES ${PROJECT_SOURCE_DIR}/eidos_zlib)
-add_library(${TARGET_NAME_ZLIB} STATIC ${ZLIB_SOURCES})
-target_include_directories(${TARGET_NAME_ZLIB} PUBLIC)
+# ZLIB (coming from EasyBuild)
+find_package(ZLIB)
 
 # KASTORE
 set(TARGET_NAME_KASTORE kastore)
@@ -285,7 +277,7 @@ list(APPEND SLIM_SOURCES "${CMAKE_CURRENT_BINARY_DIR}/GitSHA1.cpp" ${PROJECT_SOU
 
 add_executable(${TARGET_NAME_SLIM} ${SLIM_SOURCES})
 target_include_directories(${TARGET_NAME_SLIM} PRIVATE ${GSL_INCLUDES} "${PROJECT_SOURCE_DIR}/core" "${PROJECT_SOURCE_DIR}/eidos")
-target_link_libraries(${TARGET_NAME_SLIM} PUBLIC gsl eidos_zlib tables)
+target_link_libraries(${TARGET_NAME_SLIM} PUBLIC flexiblas gsl libz.a tables)
 if(PARALLEL)
 	# linking in the OpenMP library is maybe automatic with gcc?
 	#target_link_libraries(${TARGET_NAME_SLIM} PUBLIC omp)
@@ -307,7 +299,7 @@ endif(PARALLEL)
 file(GLOB_RECURSE EIDOS_SOURCES  ${PROJECT_SOURCE_DIR}/eidos/*.cpp  ${PROJECT_SOURCE_DIR}/eidostool/*.cpp)
 add_executable(${TARGET_NAME_EIDOS} ${EIDOS_SOURCES})
 target_include_directories(${TARGET_NAME_EIDOS} PRIVATE ${GSL_INCLUDES} "${PROJECT_SOURCE_DIR}/eidos")
-target_link_libraries(${TARGET_NAME_EIDOS} PUBLIC gsl eidos_zlib tables)
+target_link_libraries(${TARGET_NAME_EIDOS} PUBLIC flexiblas gsl libz.a tables)
 if(PARALLEL)
 	# linking in the OpenMP library is maybe automatic with gcc?
 	#target_link_libraries(${TARGET_NAME_EIDOS} PUBLIC omp)
@@ -384,15 +376,15 @@ if(BUILD_SLIMGUI)
   
   # Operating System-specific install stuff.
   if(APPLE)
-    target_link_libraries( ${TARGET_NAME_SLIMGUI} PUBLIC OpenGL::GL gsl tables eidos_zlib )
+    target_link_libraries( ${TARGET_NAME_SLIMGUI} PUBLIC OpenGL::GL flexiblas gsl tables libz.a )
   else()
     if(WIN32)
       set_source_files_properties(${QTSLIM_SOURCES} PROPERTIES COMPILE_FLAGS "-include config.h")
       set_source_files_properties(${GNULIB_NAMESPACE_SOURCES} TARGET_DIRECTORY slim eidos SLiMgui PROPERTIES COMPILE_FLAGS "-include config.h -DGNULIB_NAMESPACE=gnulib")
       target_include_directories(${TARGET_NAME_SLIMGUI} BEFORE PUBLIC ${GNU_DIR})
-      target_link_libraries(${TARGET_NAME_SLIMGUI} PUBLIC OpenGL::GL gsl tables eidos_zlib gnu )
+      target_link_libraries(${TARGET_NAME_SLIMGUI} PUBLIC OpenGL::GL flexiblas gsl tables libz.a gnu )
     else()
-      target_link_libraries( ${TARGET_NAME_SLIMGUI} PUBLIC OpenGL::GL gsl tables eidos_zlib )
+      target_link_libraries( ${TARGET_NAME_SLIMGUI} PUBLIC OpenGL::GL flexiblas gsl tables libz.a )
 
       # Install icons and desktop files to the data root directory (usually /usr/local/share, or /usr/share).
       if(CMAKE_VERSION VERSION_GREATER_EQUAL "3.14")
diff --git a/SLiM-5.0.orig/core/spatial_map.cpp b/SLiM-5.0/core/spatial_map.cpp
index 1665fd8..5f405b7 100644
--- a/SLiM-5.0.orig/core/spatial_map.cpp
+++ b/SLiM-5.0/core/spatial_map.cpp
@@ -23,10 +23,10 @@
 #include "subpopulation.h"
 #include "eidos_class_Image.h"
 
-#include "gsl_math.h"
-#include "gsl_spline.h"
-#include "gsl_interp2d.h"
-#include "gsl_spline2d.h"
+#include "gsl/gsl_math.h"
+#include "gsl/gsl_spline.h"
+#include "gsl/gsl_interp2d.h"
+#include "gsl/gsl_spline2d.h"
 
 #include <utility>
 #include <string>
diff --git a/SLiM-5.0.orig/eidos/eidos_functions_distributions.cpp b/SLiM-5.0/eidos/eidos_functions_distributions.cpp
index 2494d10..011bd71 100644
--- a/SLiM-5.0.orig/eidos/eidos_functions_distributions.cpp
+++ b/SLiM-5.0/eidos/eidos_functions_distributions.cpp
@@ -23,9 +23,9 @@
 
 #include <vector>
 
-#include "gsl_linalg.h"
-#include "gsl_errno.h"
-#include "gsl_cdf.h"
+#include "gsl/gsl_linalg.h"
+#include "gsl/gsl_errno.h"
+#include "gsl/gsl_cdf.h"
 
 
 // BCH 20 October 2016: continuing to try to fix problems with gcc 5.4.0 on Linux without breaking other
diff --git a/SLiM-5.0.orig/eidos/eidos_functions_files.cpp b/SLiM-5.0/eidos/eidos_functions_files.cpp
index f732671..28a3e7f 100644
--- a/SLiM-5.0.orig/eidos/eidos_functions_files.cpp
+++ b/SLiM-5.0/eidos/eidos_functions_files.cpp
@@ -29,7 +29,7 @@
 #include <fstream>
 #include <sys/stat.h>
 
-#include "../eidos_zlib/zlib.h"
+#include <zlib.h>
 
 
 // ************************************************************************************
diff --git a/SLiM-5.0.orig/eidos/eidos_globals.cpp b/SLiM-5.0/eidos/eidos_globals.cpp
index 5255d88..e2fc9fb 100644
--- a/SLiM-5.0.orig/eidos/eidos_globals.cpp
+++ b/SLiM-5.0/eidos/eidos_globals.cpp
@@ -65,13 +65,13 @@
 #endif
 
 // for Eidos_WelchTTest()
-#include "gsl_cdf.h"
+#include <gsl/gsl_cdf.h>
 
 // for Eidos_calc_sha_256()
 #include <stdint.h>
 
 // for _Eidos_FlushZipBuffer()
-#include "../eidos_zlib/zlib.h"
+#include <zlib.h>
 
 // for Eidos_ColorPaletteLookup()
 #include "eidos_tinycolormap.h"
diff --git a/SLiM-5.0.orig/eidos/eidos_rng.h b/SLiM-5.0/eidos/eidos_rng.h
index 1daf9a2..e632048 100644
--- a/SLiM-5.0.orig/eidos/eidos_rng.h
+++ b/SLiM-5.0/eidos/eidos_rng.h
@@ -29,8 +29,8 @@
 
 // We have our own private copy of (parts of) the GSL library, so that we don't have link dependencies.
 // See the _README file in the gsl directory for information on the local copy of the GSL included in this project.
-#include "gsl_rng.h"
-#include "gsl_randist.h"
+#include <gsl/gsl_rng.h>
+#include <gsl/gsl_randist.h>
 
 #include <stdint.h>
 #include <cmath>
