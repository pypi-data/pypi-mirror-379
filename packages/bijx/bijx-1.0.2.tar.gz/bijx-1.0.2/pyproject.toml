[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "bijx"
dynamic = ["version"]
description = "Bijections & normalizing flows with JAX/NNX"
readme = "README.md"
requires-python = ">=3.10"
license = "Apache-2.0"
authors = [
    {name = "Mathis Gerdes", email = "mathisgerdes@gmail.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "chex>=0.1.89",
    "diffrax>=0.6.2",
    "einops>=0.8.0",
    "flax>=0.12.0",
    "jax>=0.5",
    "jaxlib>=0.5",
    "jax-autovmap>=0.3.0",
    "numpy>=2.0.2",
    "optax>=0.2.4"
]

[project.optional-dependencies]
dev = [
    "mypy>=1.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.0.241",
    "pre-commit>=3.0.0",
    "pytest>=7.0",
    "pytest-xdist>=3.0.0",
    "pytest-cov>=4.0.0",
    "flowjax>=0.3.0",
    "hypothesis[numpy]>=6.90",
    "matplotlib>=3.9.0",
    "nb-clean>=4.0.1",
]
docs = [
    "sphinx",
    "furo",
    "myst-nb",
    "sphinx-autodoc-typehints",
    "sphinx-copybutton",
    "sphinx-math-dollar",
    "numpydoc",
    "ipykernel",
    "ipywidgets",
    "matplotlib",
    "numpy",
]

[tool.setuptools_scm]
write_to = "src/bijx/_version.py"

[tool.setuptools]
package-dir = {"" = "src"}
packages = ["bijx", "bijx.lattice", "bijx.nn"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
addopts = "--doctest-modules"
doctest_optionflags = "NORMALIZE_WHITESPACE"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true

[tool.black]
line-length = 88

[tool.isort]
profile = "black"
line_length = 88

[tool.ruff]
line-length = 88

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "src/bijx/_version.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
