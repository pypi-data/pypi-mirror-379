{
  "issue_title": "输入验证：路径遍历：ZIP条目覆盖",
  "issue_level": "High",
  "issue_count": "1",
  "issue_desc": "程序在解压zip文件时，由于没有对文件名进行合法性的校验，而是直接将文件名拼接在待解压目录后面，导致可以将文件解压到正常解压缩路径之外并覆盖可执行文件，从而等待系统或用户调用他们实现代码执行（也可能是覆盖配置文件或其他可敏感文件）。\n\n**例1**：以下代码示例解压zip文件。\n```java\n...\nFile sourceFile = new File(sourceName);\nZipFile zipFile = null;\ntry {\n    zipFile = new ZipFile(sourceFile,\"UTF-8\");\n} catch (IOException exception) {\n    exception.printStackTrace();\n    System.out.println(\"解压文件不存在!\");\n}\nEnumeration e = zipFile.getEntries();\nwhile(e.hasMoreElements()) {\n    ZipEntry zipEntry = (ZipEntry)e.nextElement();\n    System.out.println(`zipEntry.getName()`);\n    File f = new File(targetFile,`zipEntry.getName()`);\n    f.getParentFile().mkdirs();\n    f.createNewFile();\n    InputStream is = zipFile.getInputStream(zipEntry);\n    FileOutputStream fos = new FileOutputStream(f);\n    int length = 0;\n    byte[] b = new byte[1024];\n    while((length=is.read(b, 0, 1024))!=-1) {\n        fos.write(b, 0, length);\n    }\n    is.close();\n    fos.close();\n}\nif (zipFile != null) {\n    zipFile.close();\n}\n```\n代码示例未验证`zipEntry.getName()`，如果zip文件放在`/tmp/`目录中，zip条目为`../etc/hosts`，且应用程序在必要的权限下运行，则会导致系统的hosts文件被覆盖。\n**例2**：以下代码使用`org.zeroturnaround.zip.ZipUtil`解压zip文件。\n```java\npublic void unZip(String zipPath,String targetPath) {\n    ...\n    ZipUtil.unpack(new File(zipPath), new File(targetPath));\n    ...\n}\n```\n代码示例中如果使用了`zt-zip 1.13`之前版本。攻击者可借助带有目录遍历名称的zip文件利用该漏洞写入任意文件。",
  "fix_advice": "防止ZIP条目覆盖导致路径遍历可以通过判定zipEntry路径是否在指定路径内，或者使用一些最新的解压jar包来解压文件。\n\n**例1**：下面的validateFileDir函数来限制zip条目文件路径只在许可的目录内。\n```java\n//限制文件在许可的目录内\npublic static String validateFileDir(String fileName, String permitDirectory) throws IOException{\n    File file= new File(fileName);\n    String canonicalFilePath= checkFile.getCanonicalPath();\n    File permitDir = new File(permitDirectory);\n    String canonicalPermitDir = permitDir.getCanonicalPath();\n    if (canonicalFilePath.startsWith(canonicalPermitDir)){\n        return canonicalFilePath;\n    }else{\n        throw new IllegalStateException(\"文件不在许可的目录内\");\n    }\n}\n```\n可以解压zip文件过程中使用`validateFileDir`函数来限制zip条目文件只在许可目录内。\n**例2**：使用当前zt-zip 1.13以及之后的版本来进行解压文件。",
  "code_sample": "",
  "code_list": [
    {
      "code_location": "src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileZipSlip.java",
      "code_line_num": "81",
      "code_details": "跟踪路径:跟踪路径1:\n\n1 src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileZipSlip.java;79行不可信的数据从getName()方法返回值返回\n\n2 src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileZipSlip.java;79行不可信的数据从File()方法第2个参数进入,然后从this参数返回\n\n3 src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileZipSlip.java;79行赋值不可信的数据给变量f\n\n4 src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileZipSlip.java;81行不可信的数据从toPath()方法this参数进入,然后从返回值返回\n\n5 src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileZipSlip.java;81行不可信的数据从copy()方法第2个参数进入\n\n跟踪路径2:\n\n1 src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileZipSlip.java;79行不可信的数据从getName()方法返回值返回\n\n2 src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileZipSlip.java;79行不可信的数据从File()方法第2个参数进入,然后从this参数返回\n\n3 src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileZipSlip.java;79行赋值不可信的数据给变量f\n\n4 src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileZipSlip.java;81行不可信的数据从toPath()方法this参数进入,然后从返回值返回\n\n5 src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileZipSlip.java;81行不可信的数据从copy()方法第2个参数进入"
    }
  ],
  "next_block_start": 10
}