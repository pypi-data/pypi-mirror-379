{
  "issue_title": "代码注入：JavaScript劫持",
  "issue_level": "High",
  "issue_count": "2",
  "issue_desc": "使用JavaScript传送敏感数据的应用程序可能会存在JavaScript劫持的漏洞，该漏洞允许未经授权的攻击者从一个易受攻击的应用程序中读取机密数据。\n\nJavaScript劫持可以简单的理解为模拟授权的用户，窃取用户在服务器上的信息。Web浏览器使用同源策略(Same Origin Policy)，以保护用户免受恶意网站的攻击。同源策略规定：如果要使用JavaScript来访问某个网页的内容的话，则JavaScript和网页必须都来源于相同的域。若不采取同源策略，恶意网站便可以使用受害者的客户端凭证来运行 JavaScript，从其他网站加载的敏感信息，并对这些信息进行处理，然后将其返回给攻击者。\n\n使用JSON传输数据的JavaScript应用更容易受到JavaScript劫持攻击。由于JSON使用JavaScript语法的子集表示对象、数组、简单值，JSON本身可以被当做JavaScript执行，且使用*eval*()函数对JSON数据结构求值早被认为是存在风险的，其可能执行恶意代码。",
  "fix_advice": "尽量避免跨域的数据传输，对于同域的数据传输使用xmlhttp的方式作为数据获取的方式。如果是跨域的数据传输，必须要对敏感的数据获取做权限认证，具体的方式可以包括：\n1. referer的来源限制，利用前端referer的不可伪造性来保障请求数据的应用来源于可信的地方，此种方式力度较稀，完全依赖于referer，某些情况下(如存在XSS)可能导致被绕过。\n2. 加入Token。利用Token对调用者的身份进行认证，这种方式对于调用者的身份会要求力度较细，但是一旦出现XSS也可能导致前端Token的泄露，从而导致保护失效。\n3. 避免直接执行JavaScript响应：在响应中加入一些额外的字符。这些响应只有经过了修改，才能成功地转到JavaScript解释器进行处理。这样可以防止攻击者使用\\&lt;script\\&gt;标签来进行劫持。比如，可以给响应加上注释符号，使其无法直接执行；或者是在真实的响应前面，添加死循环语句，使其无法正常的直接运行。",
  "code_sample": "",
  "code_list": [
    {
      "code_location": "src/main/resources/webgoat/static/js/libs/text.js",
      "code_line_num": "270",
      "code_details": "跟踪路径:跟踪路径1:\n\n1 src/main/resources/webgoat/static/js/libs/text.js;270行open"
    },
    {
      "code_location": "src/main/resources/webgoat/static/js/quiz.js",
      "code_line_num": "15",
      "code_details": "跟踪路径:跟踪路径1:\n\n1 src/main/resources/webgoat/static/js/quiz.js;15行open"
    }
  ],
  "next_block_start": 14
}