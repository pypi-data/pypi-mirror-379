{
  "issue_title": "输入验证：直接绑定敏感字段",
  "issue_level": "Medium",
  "issue_count": "3",
  "issue_desc": "目前大部分WEB框架支持将HTTP请求参数与类的属性相匹配的而生成一个对象。因此，攻击者能够将值放入HTTP请求参数中从而绑定系统对象。\n\n**例如**：在以下代码片段中， Spring MVC可以将 HTTP请求参数绑定到 User属性：\n```java\n@RequestMapping(\"/login\" )\npublic String login(User user) {\n  ...\n}\n```\n其中，User 类定义为：\n```java\npublic class User {\n  private String username;\n  private String address;\n  private int age;\n  private boolean admin;\n  ...\n}\n```\n当Spring MVC未配置为禁止绑定敏感属性，则攻击者可能会通过发送以下使普通用户变为管理员。\n`name=张三&amp;address=北京&amp;age=22&amp;admin=true`",
  "fix_advice": "当程序将非将HTTP请求参数直接绑定给对象时，应该要控制绑定到对象的属性，防止暴露敏感属性。\n\n**例1**：在以下代码片段中，在 Spring MVC(3.0版本至最新)禁止绑定敏感属性。\n```java\n@InitBinder\npublic void initBinder(WebDataBinder binder) {\n    binder.setDisallowedFields(new String[]{\"admin\"});\n}\n@RequestMapping(\"/login\" )\npublic String login(User user) {\n  ...\n}\n```\n\n**例2**：在 Spring MVC(2.X版本)禁止绑定敏感属性。\n```java\n@Override\nprotected void initBinder(HttpServletRequest request, ServletRequestDataBinder binder) throws Exception {\n    binder.setDisallowedFields(new String[]{\"admin\"});\n}\n```\n在使用`@RequestBody`注释参数的 Spring MVC应用程序中，绑定过程由`HttpMessageConverter`进行处理，这些实例使用Jackson和JAXB等库将 HTTP请求参数转换为Java对象。这些库提供了注释来控制应允许或禁止的字段。例如对于Jackson，可以使用`@JsonIgnore`注释禁止将某个字段绑定到请求。\n**例3**：在以下代码片段中，Jackson禁止绑定敏感属性。\n```java\n@RequestMapping(value=\"/add/user\", method=RequestMethod.POST, consumes=\"text/html\")\npublic void addEmployee(@RequestBody User user){\n    ...\n}\npublic class User {\n  private String username;\n  private String address;\n  @JsonIgnore\n  private boolean admin;\n  private int age;\n  ...\n}\n```\n同理，Jackson还可以使用`@JsonIgnoreProperties、@JsonIgnoreTyp和 @JsonInclude`等注解告诉框架忽略这些属性，使用JAXB使用`@XmlAccessorType、@XmlAttribute、@XmlElement和 @XmlTransient`等注解告诉框架忽略这些属性,然后使用`@XmlAttribute和@XmlElement`等注解选择应绑定的字段。\n**例4**：在以下代码片段中，Jackson使用`@XmlAttribute`选择要绑定的字段。\n```java\n@XmlRootElement\n@XmlAccessorType(XmlAccessType.NONE)\npublic class User {\n    private String username;\n    private String address;\n    @JsonIgnore\n    private boolean admin;\n    private int age;\n    @XmlAttribute\n    public String getUsername() {\n        return username;\n    }\n    public void setUsername(String username) {\n        this.username = username;\n    }\n    @XmlAttribute\n    public String getAddress() {\n        return address;\n    }\n    public void setAddress(String address) {\n        this.address = address;\n    }\n    private boolean isAdmin()  {\n       return admin;\n    }\n    private void setAdmin(boolean admin)  {\n       this.admin = admin;\n    }\n    ...\n}\n```\n**例5**：在以下代码片段中，在Struts可以将某个属性的`setter`方法设置为私有从而禁止绑定敏感属性。\n```java\nprivate boolean admin;\nprivate void setAdmin(boolean admin)  {\n   this.admin = admin;\n}\n```\n还有另一种方法是使用将 HTTP请求参数绑定到仅含有 Web表单或 API中定义的属性DTO对象中，再将其映射到User中，防止敏感字段暴露。",
  "code_sample": "",
  "code_list": [
    {
      "code_location": "src/main/java/org/owasp/webgoat/container/users/WebGoatUser.java",
      "code_line_num": "26",
      "code_details": "跟踪路径:跟踪路径1:\n\n1 src/main/java/org/owasp/webgoat/container/users/WebGoatUser.java;26行ROLE_USER"
    },
    {
      "code_location": "src/main/java/org/owasp/webgoat/container/users/WebGoatUser.java",
      "code_line_num": "31",
      "code_details": "跟踪路径:跟踪路径1:\n\n1 src/main/java/org/owasp/webgoat/container/users/WebGoatUser.java;31行role"
    },
    {
      "code_location": "src/main/java/org/owasp/webgoat/container/users/WebGoatUser.java",
      "code_line_num": "27",
      "code_details": "跟踪路径:跟踪路径1:\n\n1 src/main/java/org/owasp/webgoat/container/users/WebGoatUser.java;27行ROLE_ADMIN"
    }
  ],
  "next_block_start": 18
}