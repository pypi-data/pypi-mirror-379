"""
Custom Prior Distribution for Unique Random Value Generation.

This module provides a specialized prior distribution class that extends the
ImproperUniform prior from smcpy to generate unique random values using a
custom generator function. It is designed to prevent duplicate values in
sampling scenarios where uniqueness is required.

Constants
---------
MAX_REPEATS : int
    Maximum number of consecutive attempts allowed before warning about
    potential generator issues (default: 100).

Example
-------
>>> def my_generator():
...     return np.random.randint(0, 1000)
>>>
>>> prior = Prior(my_generator)
>>> samples = prior.rvs(10)  # Generate 10 unique samples
>>> print(samples.shape)
(10, 1)

"""

import warnings
import numpy as np

from smcpy.priors import ImproperUniform

MAX_REPEATS = 100


class Prior(ImproperUniform):
    """
    A class that extends ImproperUniform to generate unique random values.

    This prior uses a custom generator function to produce unique random values
    and warns if the generator repeatedly produces duplicates.

    Parameters
    ----------
    generator : callable
        A function that generates random values when called with no arguments.
        This generator should return a hashable type.

    Notes
    -----
    This class tracks duplicate values and warns if the generator fails to
    produce a unique value after a set number of consecutive attempts.
    """

    def __init__(self, generator):
        super().__init__()
        self._generator = generator

    # pylint: disable=W0613
    def rvs(self, N, random_state=None):
        """
        Generate N unique random values using the generator.

        Parameters
        ----------
        N : int
            Number of unique random values to generate.

        Returns
        -------
        ndarray
            Array of shape (N, 1) containing unique values generated by the generator.

        Warns
        -----
        UserWarning
            If the generator fails to produce a new unique value after MAX_REPEATS
            consecutive attempts.

        Notes
        -----
        The random_state parameter is included for compatibility with scipy.stats
        distributions but is not actually used by this method.
        """
        pool = set()
        pool_size = 0
        attempts = 0
        already_warned = False
        while len(pool) < N:
            pool.add(self._generator())

            if not already_warned:
                if len(pool) == pool_size:
                    attempts += 1
                else:
                    pool_size = len(pool)
                    attempts = 0

                if attempts >= MAX_REPEATS:
                    warnings.warn(
                        f"Generator called {MAX_REPEATS} times in a row without finding a "
                        "new unique model. This may indicate an issue with the generator "
                        "or insufficient unique models available."
                    )
                    already_warned = True

        return np.c_[list(pool)]
