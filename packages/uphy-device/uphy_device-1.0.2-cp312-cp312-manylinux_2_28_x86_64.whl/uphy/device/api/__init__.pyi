"""
This type stub file was generated by cyright.
"""

import upgen.model.uphy as uphy_model
import rich.repr
from libc import stdint
from libcpp import bool
from typing import TypeAlias, Iterable, Mapping
from enum import IntEnum

ValueSingleType: TypeAlias = int | float | None
ValueArrayType: TypeAlias = list[int | None] | list[float | None]
LOG = ...

def version() -> str: ...

DTYPE_BITLEN = ...

def _rich_to_plain(obj) -> str: ...
def _set_properties(obj, **kwargs):  # -> None:
    ...

class ApiError(Exception): ...

class Signal:
    """Data signal representation."""
    def __init__(
        self,
        model: uphy_model.Model,
        signal: uphy_model.Signal,
        frame_offset: int,
        ix: int = ...,
    ) -> None: ...
    def __repr__(self) -> str: ...
    def __rich_repr__(self) -> rich.repr.Result: ...
    @property
    def _value_view(self):  # -> __MemoryView__[float]:
        ...
    @property
    def values(self) -> ValueArrayType: ...
    @values.setter
    def values(self, value: ValueArrayType) -> None: ...
    @property
    def values_len(self) -> int: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @property
    def ix(self) -> int: ...
    @ix.setter
    def ix(self, value: int) -> None:
        ...
    @property
    def flags(self) -> int: ...
    @flags.setter
    def flags(self, value: int) -> None: ...
    @property
    def datatype(self) -> up_dtype_t: ...
    @datatype.setter
    def datatype(self, value: up_dtype_t) -> None: ...
    @property
    def bitlength(self) -> int: ...
    @bitlength.setter
    def bitlength(self, value: int) -> None:
        ...
    @property
    def frame_offset(self) -> int: ...
    @frame_offset.setter
    def frame_offset(self, value: int) -> None:
        ...
    @property
    def default_value(self) -> stdint.uint64_t: ...
    @default_value.setter
    def default_value(self, value: stdint.uint64_t) -> None: ...
    @property
    def min_value(self) -> stdint.uint64_t: ...
    @min_value.setter
    def min_value(self, value: stdint.uint64_t) -> None: ...
    @property
    def max_value(self) -> stdint.uint64_t: ...
    @max_value.setter
    def max_value(self, value: stdint.uint64_t) -> None: ...

    @property
    def is_array(self) -> bool: ...
    @is_array.setter
    def is_array(self, is_array: bool) -> None:
        ...

class Param:
    def __init__(
        self,
        model: uphy_model.Model,
        param: uphy_model.Parameter,
        frame_offset: int,
        ix: int = ...,
    )  -> None: ...
    def __repr__(self) -> str: ...
    def __rich_repr__(self) -> rich.repr.Result: ...
    @property
    def _value_view(self):  # -> __MemoryView__[float]:
        ...
    @property
    def values(self) -> ValueArrayType:
        ...
    @values.setter
    def values(self, value: ValueArrayType) -> None:
        ...
    @property
    def values_len(self) -> int: ...
    @property
    def name(self) -> str | None:
        ...
    @name.setter
    def name(self, value: str) -> None:
        ...
    @property
    def ix(self) -> int: ...
    @ix.setter
    def ix(self, value: int) -> None:
        ...
    @property
    def flags(self) -> int: ...
    @flags.setter
    def flags(self, value: int) -> None:
        ...
    @property
    def datatype(self) -> up_dtype_t: ...
    @datatype.setter
    def datatype(self, value: up_dtype_t) -> None: ...
    @property
    def bitlength(self) -> int: ...
    @bitlength.setter
    def bitlength(self, value: int) -> None:
        ...
    @property
    def frame_offset(self) -> int: ...
    @frame_offset.setter
    def frame_offset(self, value: int) -> None:
        ...
    @property
    def permissions(self) -> int: ...
    @permissions.setter
    def permissions(self, value: int) -> None:
        ...

    @property
    def is_array(self) -> bool: ...
    @is_array.setter
    def is_array(self, is_array: bool) -> None:
        ...


class SignalInfo:
    @staticmethod
    def from_signal(signal: Signal) -> SignalInfo: ...
    @staticmethod
    def from_param(param: Param) -> SignalInfo: ...

class SignalInfos:
    def __init__(self, infos: list[SignalInfo] | None = ...) -> None: ...
    @staticmethod
    def from_slots(slots: Iterable[Slot]) -> SignalInfos: ...
    def __len__(self):  # -> int:
        ...
    def __getitem__(self, ix) -> SignalInfo: ...

class Slot:
    """A slot on a u-phy device."""
    def __init__(
        self,
        model: uphy_model.Root,
        slot: uphy_model.Slot,
        input_offset=...,
        output_offset=...,
        parameter_offset=...,
    ) -> None: ...
    @property
    def name(self):  # -> str:
        ...
    @property
    def inputs(self) -> Mapping[str, Signal]: ...
    @property
    def outputs(self) -> Mapping[str, Signal]: ...
    @property
    def params(self) -> Mapping[str, Param]: ...
    def __repr__(self) -> str: ...
    def __rich_repr__(self) -> rich.repr.Result: ...


class MemoryHolder: ...

class ProfinetParam:
    def __init__(
        self,
        model: uphy_model.Root, parameter: uphy_model.Parameter
    ) -> None: ...
    @property
    def pn_index(self) -> stdint.uint32_t: ...
    @pn_index.setter
    def pn_index(self, value: stdint.uint32_t):  # -> None:
        ...
    def __repr__(self) -> str: ...
    def __rich_repr__(self) -> rich.repr.Result: ...

class ProfinetSlot:
    def __init__(
        self,
        model: uphy_model.Root, device: uphy_model.Device, slot: uphy_model.Slot
    ) -> None: ...
    @property
    def module_ix(self) -> stdint.uint32_t: ...
    @module_ix.setter
    def module_ix(self, value: stdint.uint32_t):  # -> None:
        ...
    def __repr__(self) -> str: ...
    def __rich_repr__(self) -> rich.repr.Result: ...

class ProfinetModule:
    def __init__(
        self,
        model: uphy_model.Root, module: uphy_model.Module
    ) -> ProfinetModule: ...
    def __repr__(self) -> str: ...
    def __rich_repr__(self) -> rich.repr.Result: ...
    @property
    def module_id(self) -> stdint.uint32_t: ...
    @module_id.setter
    def module_id(self, value: stdint.uint32_t):  # -> None:
        ...
    @property
    def submodule_id(self) -> stdint.uint32_t: ...
    @submodule_id.setter
    def submodule_id(self, value: stdint.uint32_t):  # -> None:
        ...
    @property
    def params(self) -> list[ProfinetParam]: ...
    @params.setter
    def params(self, value: list[ProfinetParam]):  # -> None:
        ...

class BusConfig:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __rich_repr__(self) -> rich.repr.Result: ...
    @property
    def bustype(self) -> up_bustype_t: ...


class ProfinetConfig(BusConfig):
    def __init__(
        self,
        model: uphy_model.Root, device: uphy_model.Device
    ) -> None: ...
    @property
    def vendor_id(self) -> stdint.uint16_t: ...
    @vendor_id.setter
    def vendor_id(self, value: stdint.uint16_t):  # -> None:
        ...
    @property
    def device_id(self) -> stdint.uint16_t: ...
    @device_id.setter
    def device_id(self, value: stdint.uint16_t):  # -> None:
        ...
    @property
    def dap_module_id(self) -> stdint.uint32_t: ...
    @dap_module_id.setter
    def dap_module_id(self, value: stdint.uint32_t):  # -> None:
        ...
    @property
    def dap_identity_submodule_id(self) -> stdint.uint32_t: ...
    @dap_identity_submodule_id.setter
    def dap_identity_submodule_id(self, value: stdint.uint32_t):  # -> None:
        ...
    @property
    def dap_interface_submodule_id(self) -> stdint.uint32_t: ...
    @dap_interface_submodule_id.setter
    def dap_interface_submodule_id(self, value: stdint.uint32_t):  # -> None:
        ...
    @property
    def dap_port_1_submodule_id(self) -> stdint.uint32_t: ...
    @dap_port_1_submodule_id.setter
    def dap_port_1_submodule_id(self, value: stdint.uint32_t):  # -> None:
        ...
    @property
    def dap_port_2_submodule_id(self) -> stdint.uint32_t: ...
    @dap_port_2_submodule_id.setter
    def dap_port_2_submodule_id(self, value: stdint.uint32_t):  # -> None:
        ...
    @property
    def profile_id(self) -> stdint.uint16_t: ...
    @profile_id.setter
    def profile_id(self, value: stdint.uint16_t):  # -> None:
        ...
    @property
    def profile_specific_type(self) -> stdint.uint16_t: ...
    @profile_specific_type.setter
    def profile_specific_type(self, value: stdint.uint16_t):  # -> None:
        ...
    @property
    def min_device_interval(self) -> stdint.uint16_t: ...
    @min_device_interval.setter
    def min_device_interval(self, value: stdint.uint16_t):  # -> None:
        ...
    @property
    def default_stationname(self) -> str | None: ...
    @default_stationname.setter
    def default_stationname(self, value: str):  # -> None:
        ...
    @property
    def order_id(self) -> str | None: ...
    @order_id.setter
    def order_id(self, value: str):  # -> None:
        ...
    @property
    def hw_revision(self) -> stdint.uint16_t: ...
    @hw_revision.setter
    def hw_revision(self, value: stdint.uint16_t):  # -> None:
        ...
    @property
    def sw_revision_prefix(self) -> stdint.uint8_t: ...
    @sw_revision_prefix.setter
    def sw_revision_prefix(self, value: stdint.uint8_t):  # -> None:
        ...
    @property
    def sw_revision_functional_enhancement(self) -> stdint.uint8_t: ...
    @sw_revision_functional_enhancement.setter
    def sw_revision_functional_enhancement(self, value: stdint.uint8_t):  # -> None:
        ...
    @property
    def sw_revision_bug_fix(self) -> stdint.uint8_t: ...
    @sw_revision_bug_fix.setter
    def sw_revision_bug_fix(self, value: stdint.uint8_t):  # -> None:
        ...
    @property
    def sw_revision_internal_change(self) -> stdint.uint8_t: ...
    @sw_revision_internal_change.setter
    def sw_revision_internal_change(self, value: stdint.uint8_t):  # -> None:
        ...
    @property
    def revision_counter(self) -> stdint.uint16_t: ...
    @revision_counter.setter
    def revision_counter(self, value: stdint.uint16_t):  # -> None:
        ...
    @property
    def modules(self) -> list[ProfinetModule]: ...
    @modules.setter
    def modules(self, value: list[ProfinetModule]):  # -> None:
        ...
    @property
    def slots(self) -> list[ProfinetSlot]: ...
    @slots.setter
    def slots(self, value: list[ProfinetSlot]):  # -> None:
        ...

class Device:
    def __init__(model: uphy_model.Root, device: uphy_model.Device) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def serial_number(self) -> str: ...
    @property
    def webgui_enable(self) -> str: ...
    @property
    def slots(self) -> dict[str, Slot]: ...
    def __repr__(self) -> str: ...
    def __rich_repr__(self) -> rich.repr.Result: ...


class Up:
    """Connection to U.Phy server."""
    def _avail(self):  # -> None:
        ...
    def _sync(self):  # -> None:
        ...
    def _status_ind(self, status: int) -> None: ...
    def _error_ind(self):  # -> None:
        ...
    def _profinet_signal_led_ind(self):  # -> None:
        ...
    def _poll_ind(self):  # -> None:
        ...

    _profinet_config: ProfinetConfig
    _ethercat_device: EthercatDevice
    _modbus_device: ModbusDevice
    _device: Device
    _vars: SignalInfos
    _transport: bytes
    _up_worker_error: BaseException | None
    def __init__(
        self,
        device: Device,
        vars: SignalInfos,
        busconf: ProfinetConfig | EthercatDevice | ModbusDevice,
    ) -> None: ...
    @property
    def device(self) -> Device: ...
    def serial_transport_init(self, name: str):  # -> None:
        ...
    def tcp_transport_init(self, ip: str, port: int):  # -> None:
        ...
    def rpc_init(self):  # -> None:
        ...
    def rpc_start(self, reset_core: bool = ...):  # -> None:
        ...
    def init_device(self):  # -> None:
        ...
    def enable_watchdog(self, enable: bool):  # -> None:
        ...
    def write_inputs(self):  # -> None:
        ...
    def read_outputs(self):  # -> None:
        ...
    def start_device(self):  # -> None:
        ...
    def worker(self) -> bool: ...

class Util:
    def init(self, device: Device, up: Up, signal_infos: SignalInfos) -> None: ...

class EthercatSlot:
    def __init__(
        self,
        model: uphy_model.Root,
        device: uphy_model.Device,
        slot: uphy_model.Slot,
    ) -> None: ...
    def __repr__(self) -> str: ...
    def __rich_repr__(self) -> rich.repr.Result: ...

class CiaObject:
    def __init__(
        self,
        model: uphy_model.Root,
        object: uphy_model.CiAObject,
        is_signal: bool,
        signal_or_param_ix: int,
    ) -> None: ...
    def __repr__(self) -> str: ...
    def __rich_repr__(self) -> rich.repr.Result: ...

class CiaPdo:
    def __init__(
        self, model: uphy_model.Root, pdo: uphy_model.CiAPDO, index_base: int
    ) -> None: ...
    def __repr__(self) -> str: ...
    def __rich_repr__(self) -> rich.repr.Result: ...

class EthercatModule:
    def __init__(self, model: uphy_model.Root, module: uphy_model.Module) -> None: ...
    def __repr__(self) -> str: ...
    def __rich_repr__(self) -> rich.repr.Result: ...

class EthercatDevice(BusConfig):
    def __init__(self, model: uphy_model.Root, device: uphy_model.Device) -> None: ...

class ModbusDevice(BusConfig):
    def __init__(self, model: uphy_model.Root, device: uphy_model.Device) -> None: ...

class EthernetIPConfig(BusConfig):
    def __init__(self, model: uphy_model.Root, device: uphy_model.Device) -> None: ...

class up_dtype_t(IntEnum):
    UP_DTYPE_INT8 = ...
    UP_DTYPE_UINT8 = ...
    UP_DTYPE_INT16 = ...
    UP_DTYPE_UINT16 = ...
    UP_DTYPE_INT32 = ...
    UP_DTYPE_UINT32 = ...
    UP_DTYPE_REAL32 = ...

UP_DTYPE_INT8: up_dtype_t = ...
UP_DTYPE_UINT8: up_dtype_t = ...
UP_DTYPE_INT16: up_dtype_t = ...
UP_DTYPE_UINT16: up_dtype_t = ...
UP_DTYPE_INT32: up_dtype_t = ...
UP_DTYPE_UINT32: up_dtype_t = ...
UP_DTYPE_REAL32: up_dtype_t = ...

class up_core_status_t(IntEnum):
    UP_CORE_CONNECTED = ...
    UP_CORE_CONFIGURED = ...
    UP_CORE_RUNNING = ...

UP_CORE_CONNECTED: up_core_status_t = ...
UP_CORE_CONFIGURED: up_core_status_t = ...
UP_CORE_RUNNING: up_core_status_t = ...

class up_signal_status_t(IntEnum):
    UP_STATUS_OK = ...

UP_STATUS_OK: up_signal_status_t = ...

class up_error_t(IntEnum):
    UP_ERROR_NONE = ...
    UP_ERROR_CORE_COMMUNICATION = ...
    UP_ERROR_PARAMETER_WRITE = ...
    UP_ERROR_PARAMETER_READ = ...
    UP_ERROR_INVALID_PROFINET_MODULE_ID = ...
    UP_ERROR_INVALID_PROFINET_SUBMODULE_ID = ...
    UP_ERROR_INVALID_PROFINET_PARAMETER_INDEX = ...

UP_ERROR_NONE: up_error_t = ...
UP_ERROR_CORE_COMMUNICATION: up_error_t = ...
UP_ERROR_PARAMETER_WRITE: up_error_t = ...
UP_ERROR_PARAMETER_READ: up_error_t = ...
UP_ERROR_INVALID_PROFINET_MODULE_ID: up_error_t = ...
UP_ERROR_INVALID_PROFINET_SUBMODULE_ID: up_error_t = ...
UP_ERROR_INVALID_PROFINET_PARAMETER_INDEX: up_error_t = ...

class up_transport_t(IntEnum):
    UP_TRANSPORT_SPI = ...
    UP_TRANSPORT_UART = ...
    UP_TRANSPORT_USB = ...
    UP_TRANSPORT_TCP = ...
    UP_TRANSPORT_INVALID = ...

UP_TRANSPORT_SPI: up_transport_t = ...
UP_TRANSPORT_UART: up_transport_t = ...
UP_TRANSPORT_USB: up_transport_t = ...
UP_TRANSPORT_TCP: up_transport_t = ...
UP_TRANSPORT_INVALID: up_transport_t = ...

class up_event_t(IntEnum):
    UP_EVENT_AVAIL = ...
    UP_EVENT_SYNC = ...
    UP_EVENT_PARAM_WRITE_IND = ...
    UP_EVENT_STATUS_IND = ...
    UP_EVENT_MESSAGE_IND = ...
    UP_EVENT_MASK_FREE_RUNNING_MODE = ...
    UP_EVENT_MASK_SYNCHRONOUS_MODE = ...
    UP_EVENT_ALL = ...

UP_EVENT_AVAIL: up_event_t = ...
UP_EVENT_SYNC: up_event_t = ...
UP_EVENT_PARAM_WRITE_IND: up_event_t = ...
UP_EVENT_STATUS_IND: up_event_t = ...
UP_EVENT_MESSAGE_IND: up_event_t = ...
UP_EVENT_MASK_FREE_RUNNING_MODE: up_event_t = ...
UP_EVENT_MASK_SYNCHRONOUS_MODE: up_event_t = ...
UP_EVENT_ALL: up_event_t = ...

class up_signal_flags_t(IntEnum):
    UP_SIG_FLAG_IS_ARRAY = ...

UP_SIG_FLAG_IS_ARRAY: up_signal_flags_t = ...

class up_message_id_t(IntEnum):
    UP_MESSAGE_ID_ERROR = ...
    UP_MESSAGE_ID_PROFINET_SIGNAL_LED = ...

UP_MESSAGE_ID_ERROR: up_message_id_t = ...
UP_MESSAGE_ID_PROFINET_SIGNAL_LED: up_message_id_t = ...

class up_perm_t(IntEnum):
    UP_PERM_RO = ...
    UP_PERM_RW = ...

UP_PERM_RO: up_perm_t = ...
UP_PERM_RW: up_perm_t = ...

class up_bustype_t(IntEnum):
    UP_BUSTYPE_MOCK = ...
    UP_BUSTYPE_PROFINET = ...
    UP_BUSTYPE_ECAT = ...
    UP_BUSTYPE_ETHERNETIP = ...
    UP_BUSTYPE_MODBUS = ...

UP_BUSTYPE_MOCK: up_bustype_t = ...
UP_BUSTYPE_PROFINET: up_bustype_t = ...
UP_BUSTYPE_ECAT: up_bustype_t = ...
UP_BUSTYPE_ETHERNETIP: up_bustype_t = ...
UP_BUSTYPE_MODBUS: up_bustype_t = ...

class up_alarm_level_t(IntEnum):
    UP_ALARM_ERROR = ...
    UP_ALARM_WARNING = ...
    UP_ALARM_INFO = ...

UP_ALARM_ERROR: up_alarm_level_t = ...
UP_ALARM_WARNING: up_alarm_level_t = ...
UP_ALARM_INFO: up_alarm_level_t = ...
