Metadata-Version: 2.4
Name: maite
Version: 0.9.0
Summary: Library of common types, protocols (a.k.a. structural subtypes), and utilities to support AI test and evaluation
License: MIT License
         
         Copyright (c) 2024 Massachusetts Institute of Technology
         
         Permission is hereby granted, free of charge, to any person obtaining a copy
         of this software and associated documentation files (the "Software"), to deal
         in the Software without restriction, including without limitation the rights
         to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
         copies of the Software, and to permit persons to whom the Software is
         furnished to do so, subject to the following conditions:
         
         The above copyright notice and this permission notice shall be included in all
         copies or substantial portions of the Software.
         
         THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
         IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
         FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
         AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
         LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
         OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
         SOFTWARE.
License-File: LICENSE.txt
Keywords: machine learning,testing,pytest
Author: MIT Lincoln Laboratory
Requires-Python: >=3.10
Classifier: Development Status :: 3 - Alpha
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Intended Audience :: Science/Research
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering
Classifier: Programming Language :: Python :: 3 :: Only
Provides-Extra: builddocs
Provides-Extra: dev
Provides-Extra: test
Provides-Extra: torchmetrics
Provides-Extra: yolo-models
Requires-Dist: boto3 (>=1.35) ; extra == "yolo-models"
Requires-Dist: botocore (>=1.35) ; extra == "yolo-models"
Requires-Dist: datasets (>=3) ; extra == "builddocs"
Requires-Dist: hypothesis (>=6.61.0,<=6.113) ; extra == "test"
Requires-Dist: jupyter ; extra == "builddocs"
Requires-Dist: jupytext (>=1.14.0) ; extra == "test"
Requires-Dist: kornia ; extra == "builddocs"
Requires-Dist: matplotlib (>=3.7.1) ; extra == "yolo-models"
Requires-Dist: matplotlib ; extra == "builddocs"
Requires-Dist: nbconvert ; extra == "builddocs"
Requires-Dist: numpy (>=1.24.2)
Requires-Dist: numpydoc (>=1.5.0) ; extra == "test"
Requires-Dist: opencv-python-headless (>=4.6.0) ; extra == "yolo-models"
Requires-Dist: pandas (>=2.0) ; extra == "yolo-models"
Requires-Dist: pip ; extra == "test"
Requires-Dist: pre-commit ; extra == "dev"
Requires-Dist: pycocotools ; extra == "builddocs"
Requires-Dist: pyright (>=1.1.280,!=1.1.401) ; extra == "test"
Requires-Dist: pytest (>=7.0.0) ; extra == "builddocs"
Requires-Dist: pytest (>=7.0.0) ; extra == "test"
Requires-Dist: pytest-mock (>=3.10.0) ; extra == "test"
Requires-Dist: roboflow (>=1.1.30) ; extra == "yolo-models"
Requires-Dist: torch (>=1.7,!=1.12.0) ; extra == "builddocs"
Requires-Dist: torch (>=1.7,!=1.12.0) ; extra == "test"
Requires-Dist: torch (>=2.2.0) ; extra == "yolo-models"
Requires-Dist: torchmetrics[detection] (>=1.7.0,<2.0.0) ; extra == "torchmetrics"
Requires-Dist: torchmetrics[detection] ; extra == "builddocs"
Requires-Dist: torchvision ; extra == "builddocs"
Requires-Dist: tox (>=4.24.2,<5.0.0) ; extra == "builddocs"
Requires-Dist: tox ; extra == "dev"
Requires-Dist: transformers ; extra == "builddocs"
Requires-Dist: typing-extensions (>=4.5,!=4.6)
Requires-Dist: ultralytics (>=8.2.78) ; extra == "yolo-models"
Requires-Dist: ultralytics ; extra == "builddocs"
Requires-Dist: watermark ; extra == "builddocs"
Requires-Dist: yolov5 (>=7.0.13) ; extra == "yolo-models"
Project-URL: Bug Reports, https://github.com/mit-ll-ai-technology/maite/issues
Project-URL: Homepage, https://github.com/mit-ll-ai-technology/maite
Project-URL: Source, https://github.com/mit-ll-ai-technology/maite
Description-Content-Type: text/markdown

# MAITE (Modular AI Trustworthy Engineering)

<p align="center">
  <a>
    <img src="https://img.shields.io/badge/python-3.9%20&#8208;%203.11-blue.svg" alt="Python version support" />
  </a>
  <a>
    <img src="https://img.shields.io/badge/coverage-%3E90%25-green.svg" alt="Code Coverage" />
  <a href="https://github.com/microsoft/pyright/blob/92b4028cd5fd483efcf3f1cdb8597b2d4edd8866/docs/typed-libraries.md#verifying-type-completeness">
    <img src="https://img.shields.io/badge/type%20completeness-100%25-green.svg" alt="Type-Completeness Score" />
  <a href="https://hypothesis.readthedocs.io/">
    <img src="https://img.shields.io/badge/hypothesis-tested-brightgreen.svg" alt="Tested with Hypothesis" />
  </a>
  </p>

  <p align="center">
    A toolbox of common types, protocols, and tooling to support AI test and evaluation workflows.
  </p>

  <p align="center">
    Check out the <a href="https://mit-ll-ai-technology.github.io/maite/">documentation</a> and
    <a href="https://github.com/mit-ll-ai-technology/maite/tree/main/examples">examples</a> for more information.
  </p>
</p>

MAITE is a library of common types, protocols (a.k.a. structural subtypes), and utilities for the test and evaluation (T&E) of supervised machine learning models. It is being developed under the [Joint AI T&E Infrastructure Capability (JATIC)](https://gitlab.jatic.net/home/) program. Its goal is to streamline the development of JATIC Python projects by ensuring seamless, synergistic workflows when working with MAITE-conforming Python packages for different T&E tasks. To this end, MAITE seeks to eliminate redundancies that would otherwise be shared across – and burden – separate efforts in machine learning test and evaluation. MAITE is designed to be a low-dependency, frequently-improved Python package that is installed by JATIC projects. The following is a brief overview of the current state of its submodules.

## Installation

### From Python Package Index (PyPI)
To install from the Python Package Index (PyPI), run:

```console
pip install maite
```

> :information_source: You can install MAITE for a given release tag, e.g. `v0.6.1`, by running:
>
>```console
>$ pip install git+ssh://git@github.com/mit-ll-ai-technology/maite.git@v0.6.1
>```

### From Source

To clone this repository and install from source, run:

```console
$ git clone https://github.com/mit-ll-ai-technology/maite
$ cd maite
$ pip install .
```

## maite.protocols

*Common types for machine learning test and evaluation*

The `protocols` subpackage defines common types – such as an inference-mode object detector – to be leveraged across JATIC projects. These are specifically designed to be [Python protocol classes](https://peps.python.org/pep-0544/), which support structural subtyping. As a result, developers and users can satisfy MAITE-typed interfaces without having to explicitly subclass. This ability helps to promote common interfaces across JATIC projects without introducing explicit inter-dependencies between them.

### Pyright Static Type Checking in Code

```python
>>> def f(x: str):
...     return 1 + x
>>> pyright_analyze(f)
{'version': '1.1.281',
  'time': '1669686515154',
  'generalDiagnostics': [{'file': 'source.py',
    'severity': 'error',
    'message': 'Operator "+" not supported for types "Literal[1]" and "str"\n\xa0\xa0Operator "+" not supported for types "Literal[1]" and "str"',
    'range': {'start': {'line': 1, 'character': 11},
    'end': {'line': 1, 'character': 16}},
    'rule': 'reportGeneralTypeIssues'}],
  'summary': {'filesAnalyzed': 20,
  'errorCount': 1,
  'warningCount': 0,
  'informationCount': 0,
  'timeInSec': 0.319}}
```

## maite.utils

*General utilities*

- Functions for validating the types and values of user arguments, with explicit and consistent user-error messages, that raise MAITE-customized exceptions.
- Specialized PyTorch utilities to help facilitate safe and ergonomic code patterns for manipulating stateful torch objects
- Other quality assurance and convenience functions that may be widely useful across projects

## Disclaimer

DISTRIBUTION STATEMENT A. Approved for public release. Distribution is unlimited.

© 2024 MASSACHUSETTS INSTITUTE OF TECHNOLOGY

* Subject to FAR 52.227-11 – Patent Rights – Ownership by the Contractor (May 2014)
* SPDX-License-Identifier: MIT

This material is based upon work supported by the Under Secretary of Defense for Research and Engineering under Air Force Contract No. FA8702-15-D-0001. Any opinions, findings, conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the Under Secretary of Defense for Research and Engineering.

The software/firmware is provided to you on an As-Is basis

