[build-system]
requires = ['setuptools>=60', 'setuptools-scm>=8.0']
build-backend = 'setuptools.build_meta'

[project]
name = 's1_frame_enumerator'
requires-python = '>=3.11'
authors = [
    { name = 'Charlie Marshak, David Bekaert, Joseph Kennedy, Sim Sangha, and ACCESS Team ' },
]
description = 'Enumerate interferogram pairs from ARIA spatially fixed frames'
license = { text = 'Apache-2.0' }
classifiers = [
    'Intended Audience :: Science/Research',
    'Natural Language :: English',
    'Operating System :: OS Independent',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
]

dynamic = ['version', 'readme']

dependencies = [
    'geopandas',
    'pandas',
    'asf_search',
    'tqdm',
    'requests',
    'rasterio',
    'shapely>=2.0',
]

[project.optional-dependencies]
develop = [
    'pytest',
    'pytest-cov',
    'flake8',
    'flake8-import-order',
    'flake8-blind-except',
    'flake8-builtins',
]

[project.urls]
Homepage = 'https://github.com/ACCESS-Cloud-Based-InSAR/s1-frame-enumerator'
'Bug Tracker' = 'https://github.com/ACCESS-Cloud-Based-InSAR/s1-frame-enumerator/issues'

[tool.setuptools]
include-package-data = true
zip-safe = false

[tool.setuptools.packages.find]
where = ['src']
exclude = ['notebooks*', 'tests*']

[tool.setuptools.dynamic]
readme = { file = ['README.md'], content-type = 'text/markdown' }

[tool.setuptools_scm]

[tool.ruff]
line-length = 120
src = ["src", "tests"]
exclude = [
    ".eggs",
    ".git",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".vscode",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "site-packages",
    "notebooks/*",
    "tests/data/*",
]
indent-width = 4

[tool.ruff.format]
quote-style = "single"
indent-style = "space"

[tool.ruff.lint]
select = [
    "F",   # flake8: https://docs.astral.sh/ruff/rules/#flake8-f
    "E",   # flake8: https://docs.astral.sh/ruff/rules/#flake8-e
    "I",   # isort: https://docs.astral.sh/ruff/rules/#isort-i
    "UP",  # pyupgrade: https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "D",   # pydocstyle: https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "ANN", # annotations: https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
    "PTH", # use-pathlib-pth: https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    "TRY", # tryceratops
]

ignore = [
  "D100",   # Missing docstring in public module
  "D101",   # Missing docstring in public class
  "D102",   # Missing docstring in public method
  "D103",   # Missing docstring in public function
  "D104",   # Missing docstring in public package
  "D105",   # Missing docstring in magic method
  "D203",   # 1 blank line required before class docstring
  "D213",   # Multi-line docstring summary should start at the second line
  "TRY003", # Avoid specifying long messages outside the exception
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.isort]
case-sensitive = true
lines-after-imports = 2