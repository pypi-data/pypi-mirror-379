name: Python CI/CD

on:
  push:
    branches:
      - "**"
    tags:
      - "v*.*.*"
    paths:
      - grafi/**
      - tests/**
      - uv.lock
      - pyproject.toml

concurrency:
  group: graphite-ci-pipeline
  cancel-in-progress: true

permissions:
  contents: write
  id-token: write

env:
  PYTHON_VERSION: "3.12"
jobs:

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python and uv
        uses: astral-sh/setup-uv@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # ----------------------------------------------
      #       load cached venv if cache exists
      # ----------------------------------------------
      - name: Load cached venv
        id: cached-uv-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/uv.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-uv-dependencies.outputs.cache-hit != 'true'
        run: uv sync --dev

      - name: Check Python and Pytest
        run: |
          python --version
          which python
          uv run python -m pytest --version

      - name: Run Tests
        run: uv run pytest tests/

  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Check out the code
      uses: actions/checkout@v4

    - name: Set up Python and uv
      uses: astral-sh/setup-uv@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Load cached venv
      id: cached-uv-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/uv.lock') }}

    - name: Install dependencies
      if: steps.cached-uv-dependencies.outputs.cache-hit != 'true'
      run: uv sync --dev

    - name: Run Integration Test ALL
      run: |
        set -e
        output=$(uv run python tests_integration/run_all.py)
        echo "$output"

        # Check if there are any failed tests
        if echo "$output" | grep -q "Failed scripts:"; then
          echo "❌ Integration tests failed! Check the output above for details."
          exit 1
        else
          echo "✅ All integration tests passed!"
        fi
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}


  version:
    name: Get Package Version
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs:
      - unit-tests
      - integration-tests

    outputs:
      package-version: ${{ steps.package-version.outputs.VERSION }}
      remote-version: ${{ steps.remote-version.outputs.LATEST_VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full history for tagging

      - name: Set up Python and uv
        uses: astral-sh/setup-uv@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Get Package Version
        id: package-version
        run: |
          echo "VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")" >> $GITHUB_OUTPUT

      - name: Remote Check PyPI Version
        id: remote-version
        run: |
          echo "LATEST_VERSION=$(pip index versions grafi 2>/dev/null | grep 'LATEST:' | awk '{print $2}')" >> $GITHUB_OUTPUT


  publish_pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: version
    if: github.ref == 'refs/heads/main' && ( needs.version.outputs.package-version != needs.version.outputs.remote-version )


    # Specifying a GitHub environment is optional, but strongly encouraged
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python and uv
        uses: astral-sh/setup-uv@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Check if new version is different than PyPi remote
        id: check-version
        run: |
          remote_latest_version=$(curl -s https://pypi.org/pypi/grafi/json | jq -r .info.version)
          current_version=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          if [ "$remote_latest_version" == "$current_version" ]; then
            echo "No new version to publish."
            exit 0
          else
            echo "New version available: $current_version"
          fi

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-uv-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/uv.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-uv-dependencies.outputs.cache-hit != 'true'
        run: uv sync

      - name: Build project
        run: uv build

      - name: mint API token
        id: mint-token
        run: |
          # retrieve the ambient OIDC token
          resp=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=pypi")
          oidc_token=$(jq -r '.value' <<< "${resp}")

          # exchange the OIDC token for an API token
          resp=$(curl -X POST https://pypi.org/_/oidc/mint-token -d "{\"token\": \"${oidc_token}\"}")
          api_token=$(jq -r '.token' <<< "${resp}")

          # mask the newly minted API token, so that we don't accidentally leak it
          echo "::add-mask::${api_token}"

          # see the next step in the workflow for an example of using this step output
          echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"


      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github_release:
    name: Github Release
    runs-on: ubuntu-latest
    needs:
      - publish_pypi
      - version
      - integration-tests

    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full history f

      - name: Set up Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions@github.com"


      - name: Create Release
        uses: ncipollo/release-action@v1.12.0
        with:
          allowUpdates: true
          draft: false
          makeLatest: true
          name: ${{ needs.version.outputs.package-version }}
          body: Changelog Contents
          token: ${{ github.token }}
          tag: ${{ needs.version.outputs.package-version }}
          skipIfReleaseExists: true
