"""
Auto-generated property classes for TRAVEL output parsers.

DO NOT EDIT THIS FILE MANUALLY!
This file is generated by tools/generate_properties.py

To modify property names, edit src/travelpy/config/column_mappings.py
and run: python tools/generate_properties.py
"""

from typing import TYPE_CHECKING

import pandas as pd

if TYPE_CHECKING:
    pass


class AvgOutGenerated:
    """Auto-generated properties for AvgOut parser."""

    @property
    def card_number(self) -> pd.Series:
        """Card sequence number (Returns the column: 'Card Number')"""
        return self.dataframe["Card Number"]

    @property
    def card_type(self) -> pd.Series:
        """TRAVEL card type (Returns the column: 'Card Type')"""
        return self.dataframe["Card Type"]

    @property
    def z(self) -> pd.Series:
        """Longitudinal position along beamline [m] (Returns the column: 'Length [m]')"""
        return self.dataframe["Length [m]"]

    @property
    def transmission(self) -> pd.Series:
        """Beam transmission percentage [%] (Returns the column: 'Alive [%]')"""
        return self.dataframe["Alive [%]"]

    @property
    def x_avg(self) -> pd.Series:
        """Average x position [m] (Returns the column: 'x Average [m]')"""
        return self.dataframe["x Average [m]"]

    @property
    def xp_avg(self) -> pd.Series:
        """Average x divergence [rad] (Returns the column: 'x\' Average [rad]')"""
        return self.dataframe["x' Average [rad]"]

    @property
    def y_avg(self) -> pd.Series:
        """Average y position [m] (Returns the column: 'y Average [m]')"""
        return self.dataframe["y Average [m]"]

    @property
    def yp_avg(self) -> pd.Series:
        """Average y divergence [rad] (Returns the column: 'y\' Average [rad]')"""
        return self.dataframe["y' Average [rad]"]

    @property
    def phi_avg(self) -> pd.Series:
        """Average RF phase [rad] (Returns the column: 'Phase Average [rad]')"""
        return self.dataframe["Phase Average [rad]"]

    @property
    def p_avg(self) -> pd.Series:
        """Average momentum [GeV/c] (Returns the column: 'Momentum Average [GeV/c]')"""
        return self.dataframe["Momentum Average [GeV/c]"]

    @property
    def ekin_avg(self) -> pd.Series:
        """Average kinetic energy [GeV] (Returns the column: 'Kinetic Energy Average [GeV]')"""
        return self.dataframe["Kinetic Energy Average [GeV]"]

    @property
    def rest_energy_avg(self) -> pd.Series:
        """Average rest energy [GeV] (Returns the column: 'Rest Energy Average [GeV]')"""
        return self.dataframe["Rest Energy Average [GeV]"]

    @property
    def rf_phase(self) -> pd.Series:
        """RF phase at gaps [deg] (Returns the column: 'RF Phase [deg]')"""
        return self.dataframe["RF Phase [deg]"]

    @property
    def power_loss(self) -> pd.Series:
        """Power loss [W] (Returns the column: 'Power loss [watt]')"""
        return self.dataframe["Power loss [watt]"]


class RmsOutGenerated:
    """Auto-generated properties for RmsOut parser."""

    @property
    def card_number(self) -> pd.Series:
        """Card sequence number (Returns the column: 'Card Number')"""
        return self.dataframe["Card Number"]

    @property
    def card_type(self) -> pd.Series:
        """TRAVEL card type (Returns the column: 'Card Type')"""
        return self.dataframe["Card Type"]

    @property
    def z(self) -> pd.Series:
        """Longitudinal position along beamline [m] (Returns the column: 'Length [m]')"""
        return self.dataframe["Length [m]"]

    @property
    def aperture_x(self) -> pd.Series:
        """X aperture [m] (Returns the column: 'Aperture x [m]')"""
        return self.dataframe["Aperture x [m]"]

    @property
    def aperture_y(self) -> pd.Series:
        """Y aperture [m] (Returns the column: 'Aperture y [m]')"""
        return self.dataframe["Aperture y [m]"]

    @property
    def x_rms(self) -> pd.Series:
        """RMS x beam size [m] (Returns the column: 'x RMS [m]')"""
        return self.dataframe["x RMS [m]"]

    @property
    def xp_rms(self) -> pd.Series:
        """RMS x divergence [rad] (Returns the column: 'x\' RMS [rad]')"""
        return self.dataframe["x' RMS [rad]"]

    @property
    def y_rms(self) -> pd.Series:
        """RMS y beam size [m] (Returns the column: 'y RMS [m]')"""
        return self.dataframe["y RMS [m]"]

    @property
    def yp_rms(self) -> pd.Series:
        """RMS y divergence [rad] (Returns the column: 'y\' RMS [rad]')"""
        return self.dataframe["y' RMS [rad]"]

    @property
    def phi_rms(self) -> pd.Series:
        """RMS phase spread [rad] (Returns the column: 'Phase RMS [rad]')"""
        return self.dataframe["Phase RMS [rad]"]

    @property
    def p_rms(self) -> pd.Series:
        """RMS momentum [GeV/c] (Returns the column: 'Momentum RMS [GeV/c]')"""
        return self.dataframe["Momentum RMS [GeV/c]"]

    @property
    def ekin_rms(self) -> pd.Series:
        """RMS kinetic energy [GeV] (Returns the column: 'Kinetic Energy RMS [GeV]')"""
        return self.dataframe["Kinetic Energy RMS [GeV]"]

    @property
    def rest_energy_rms(self) -> pd.Series:
        """RMS rest energy [GeV] (Returns the column: 'Rest Energy RMS [GeV]')"""
        return self.dataframe["Rest Energy RMS [GeV]"]

    @property
    def p_std(self) -> pd.Series:
        """Momentum standard deviation [GeV/c] (Returns the column: 'Momentum Standard Deviation [GeV/c]')"""
        return self.dataframe["Momentum Standard Deviation [GeV/c]"]

    @property
    def ekin_std(self) -> pd.Series:
        """Kinetic energy standard deviation [GeV] (Returns the column: 'Kinetic Energy Standard Deviation [GeV]')"""
        return self.dataframe["Kinetic Energy Standard Deviation [GeV]"]

    @property
    def emitt_norm_100_x_xp(self) -> pd.Series:
        """X emittance (100%) [m·rad] (Returns the column: '(X,BGX\') 100%-Emittance [m.rad]')"""
        return self.dataframe["(X,BGX') 100%-Emittance [m.rad]"]

    @property
    def emitt_norm_90_x_xp(self) -> pd.Series:
        """X emittance (90%) [m·rad] (Returns the column: '(X,BGX\') 90%-Emittance [m.rad]')"""
        return self.dataframe["(X,BGX') 90%-Emittance [m.rad]"]

    @property
    def emitt_norm_rms_x_xp(self) -> pd.Series:
        """X RMS emittance [m·rad] (Returns the column: '(X,BGX\') RMS-Emittance [m.rad]')"""
        return self.dataframe["(X,BGX') RMS-Emittance [m.rad]"]

    @property
    def emitt_norm_100_y_yp(self) -> pd.Series:
        """Y emittance (100%) [m·rad] (Returns the column: '(Y,BGY\') 100%-Emittance [m.rad]')"""
        return self.dataframe["(Y,BGY') 100%-Emittance [m.rad]"]

    @property
    def emitt_norm_90_y_yp(self) -> pd.Series:
        """Y emittance (90%) [m·rad] (Returns the column: '(Y,BGY\') 90%-Emittance [m.rad]')"""
        return self.dataframe["(Y,BGY') 90%-Emittance [m.rad]"]

    @property
    def emitt_norm_rms_y_yp(self) -> pd.Series:
        """Y RMS emittance [m·rad] (Returns the column: '(Y,BGY\') RMS-Emittance [m.rad]')"""
        return self.dataframe["(Y,BGY') RMS-Emittance [m.rad]"]

    @property
    def emitt_100_phi_ekin(self) -> pd.Series:
        """Longitudinal emittance (100%) [deg·MeV] (Returns the column: '(PHI,dE) 100%-Emittance [deg.MeV]')"""
        return self.dataframe["(PHI,dE) 100%-Emittance [deg.MeV]"]

    @property
    def emitt_90_phi_ekin(self) -> pd.Series:
        """Longitudinal emittance (90%) [deg·MeV] (Returns the column: '(PHI,dE) 90%-Emittance [deg.MeV]')"""
        return self.dataframe["(PHI,dE) 90%-Emittance [deg.MeV]"]

    @property
    def emitt_rms_phi_ekin(self) -> pd.Series:
        """Longitudinal RMS emittance [deg·MeV] (Returns the column: '(PHI,dE) RMS-Emittance [deg.MeV]')"""
        return self.dataframe["(PHI,dE) RMS-Emittance [deg.MeV]"]

    @property
    def emitt_100_phi_p(self) -> pd.Series:
        """Momentum-phase emittance (100%) [deg·MeV/c] (Returns the column: '(PHI,dP) 100%-Emittance [deg.MeV/c]')"""
        return self.dataframe["(PHI,dP) 100%-Emittance [deg.MeV/c]"]

    @property
    def emitt_90_phi_p(self) -> pd.Series:
        """Momentum-phase emittance (90%) [deg·MeV/c] (Returns the column: '(PHI,dP) 90%-Emittance [deg.MeV/c]')"""
        return self.dataframe["(PHI,dP) 90%-Emittance [deg.MeV/c]"]

    @property
    def emitt_rms_phi_p(self) -> pd.Series:
        """Momentum-phase RMS emittance [deg·MeV/c] (Returns the column: '(PHI,dP) RMS-Emittance [deg.MeV/c]')"""
        return self.dataframe["(PHI,dP) RMS-Emittance [deg.MeV/c]"]

    @property
    def alpha_x(self) -> pd.Series:
        """X Twiss alpha (Returns the column: '(X,X\') Alpha [1]')"""
        return self.dataframe["(X,X') Alpha [1]"]

    @property
    def beta_x(self) -> pd.Series:
        """X Twiss beta [m/rad] (Returns the column: '(X,X\') Beta [m/rad]')"""
        return self.dataframe["(X,X') Beta [m/rad]"]

    @property
    def alpha_y(self) -> pd.Series:
        """Y Twiss alpha (Returns the column: '(Y,Y\') Alpha [1]')"""
        return self.dataframe["(Y,Y') Alpha [1]"]

    @property
    def beta_y(self) -> pd.Series:
        """Y Twiss beta [m/rad] (Returns the column: '(Y,Y\') Beta [m/rad]')"""
        return self.dataframe["(Y,Y') Beta [m/rad]"]

    @property
    def alpha_z(self) -> pd.Series:
        """Longitudinal Twiss alpha (Returns the column: '(PHI,dE) Alpha [1]')"""
        return self.dataframe["(PHI,dE) Alpha [1]"]

    @property
    def beta_z(self) -> pd.Series:
        """Longitudinal Twiss beta [deg/MeV] (Returns the column: '(PHI,dE) Beta [deg/MeV]')"""
        return self.dataframe["(PHI,dE) Beta [deg/MeV]"]

    @property
    def alpha_phi_p(self) -> pd.Series:
        """Momentum-phase Twiss alpha (Returns the column: '(PHI,dP) Alpha [1]')"""
        return self.dataframe["(PHI,dP) Alpha [1]"]

    @property
    def beta_phi_p(self) -> pd.Series:
        """Momentum-phase Twiss beta [deg·c/MeV] (Returns the column: '(PHI,dP) Beta [deg.c/MeV]')"""
        return self.dataframe["(PHI,dP) Beta [deg.c/MeV]"]

    @property
    def halo_x(self) -> pd.Series:
        """X halo parameter (Returns the column: 'Halo(X,BGX\')')"""
        return self.dataframe["Halo(X,BGX')"]

    @property
    def halo_y(self) -> pd.Series:
        """Y halo parameter (Returns the column: 'Halo(Y,BGY\')')"""
        return self.dataframe["Halo(Y,BGY')"]

    @property
    def halo_z(self) -> pd.Series:
        """Z halo parameter (Returns the column: 'Halo(Z,Z\')')"""
        return self.dataframe["Halo(Z,Z')"]

    @property
    def alpha_x_y(self) -> pd.Series:
        """X-Y correlation alpha (Returns the column: '(X,Y) Alpha [1]')"""
        return self.dataframe["(X,Y) Alpha [1]"]

    @property
    def beta_x_y(self) -> pd.Series:
        """X-Y correlation beta (Returns the column: '(X,Y) Beta [1]')"""
        return self.dataframe["(X,Y) Beta [1]"]

    @property
    def alpha_x_yp(self) -> pd.Series:
        """X-Y' correlation alpha (Returns the column: '(X,Y\') Alpha [1]')"""
        return self.dataframe["(X,Y') Alpha [1]"]

    @property
    def beta_x_yp(self) -> pd.Series:
        """X-Y' correlation beta [m/rad] (Returns the column: '(X,Y\') Beta [m/rad]')"""
        return self.dataframe["(X,Y') Beta [m/rad]"]

    @property
    def alpha_xp_y(self) -> pd.Series:
        """X'-Y correlation alpha (Returns the column: '(X\',Y) Alpha [1]')"""
        return self.dataframe["(X',Y) Alpha [1]"]

    @property
    def beta_xp_y(self) -> pd.Series:
        """X'-Y correlation beta [rad/m] (Returns the column: '(X\',Y) Beta [rad/m]')"""
        return self.dataframe["(X',Y) Beta [rad/m]"]

    @property
    def alpha_xp_yp(self) -> pd.Series:
        """X'-Y' correlation alpha (Returns the column: '(X\',Y\') Alpha [1]')"""
        return self.dataframe["(X',Y') Alpha [1]"]

    @property
    def beta_xp_yp(self) -> pd.Series:
        """X'-Y' correlation beta (Returns the column: '(X\',Y\') Beta [1]')"""
        return self.dataframe["(X',Y') Beta [1]"]

    @property
    def wanted_emitt_norm_x_xp(self) -> pd.Series:
        """User-defined X emittance [m·rad] (Returns the column: '(X, BGX\') Wanted Emittance [m.rad]')"""
        return self.dataframe["(X, BGX') Wanted Emittance [m.rad]"]

    @property
    def wanted_emitt_norm_y_yp(self) -> pd.Series:
        """User-defined Y emittance [m·rad] (Returns the column: '(Y, BGY\') Wanted Emittance [m.rad]')"""
        return self.dataframe["(Y, BGY') Wanted Emittance [m.rad]"]

    @property
    def wanted_emitt_phi_ekin(self) -> pd.Series:
        """User-defined Z emittance [deg·MeV] (Returns the column: '(PHI, dE) Wanted Emittance [deg.MeV]')"""
        return self.dataframe["(PHI, dE) Wanted Emittance [deg.MeV]"]

    @property
    def wanted_emitt_phi_p(self) -> pd.Series:
        """User-defined momentum-phase emittance [deg·MeV/c] (Returns the column: '(PHI, dP) Wanted Emittance [deg.MeV/c]')"""
        return self.dataframe["(PHI, dP) Wanted Emittance [deg.MeV/c]"]

    @property
    def wanted_x_size(self) -> pd.Series:
        """X beam size in wanted emittance [m] (Returns the column: ' x beam size in wanted emittance [m]')"""
        return self.dataframe[" x beam size in wanted emittance [m]"]

    @property
    def wanted_xp_size(self) -> pd.Series:
        """X' beam size in wanted emittance [rad] (Returns the column: ' x\' beam size in wanted emittance [rad]')"""
        return self.dataframe[" x' beam size in wanted emittance [rad]"]

    @property
    def wanted_y_size(self) -> pd.Series:
        """Y beam size in wanted emittance [m] (Returns the column: ' y beam size in wanted emittance [m]')"""
        return self.dataframe[" y beam size in wanted emittance [m]"]

    @property
    def wanted_yp_size(self) -> pd.Series:
        """Y' beam size in wanted emittance [rad] (Returns the column: ' y\' beam size in wanted emittance [rad]')"""
        return self.dataframe[" y' beam size in wanted emittance [rad]"]

    @property
    def wanted_phi_size(self) -> pd.Series:
        """Phase beam size in wanted emittance [rad] (Returns the column: ' Phase beam size in wanted emittance [rad]')"""
        return self.dataframe[" Phase beam size in wanted emittance [rad]"]

    @property
    def wanted_energy_size(self) -> pd.Series:
        """Energy beam size in wanted emittance [GeV] (Returns the column: ' Energy beam size in wanted emittance [GeV]')"""
        return self.dataframe[" Energy beam size in wanted emittance [GeV]"]

    @property
    def emitt_rms_x_y(self) -> pd.Series:
        """X-Y RMS emittance [m²] (Returns the column: '(X,Y) RMS-Emitt [m2]')"""
        return self.dataframe["(X,Y) RMS-Emitt [m2]"]

    @property
    def emitt_rms_x_yp(self) -> pd.Series:
        """X-Y' RMS emittance [m²·rad²] (Returns the column: '(X,Y\') RMS-Emitt [m2.rad2]')"""
        return self.dataframe["(X,Y') RMS-Emitt [m2.rad2]"]

    @property
    def emitt_rms_xp_y(self) -> pd.Series:
        """X'-Y RMS emittance [m²·rad²] (Returns the column: '(X\',Y) RMS-Emitt [m2.rad2]')"""
        return self.dataframe["(X',Y) RMS-Emitt [m2.rad2]"]

    @property
    def emitt_rms_xp_yp(self) -> pd.Series:
        """X'-Y' RMS emittance [rad²] (Returns the column: '(X\',Y\') RMS-Emitt [rad2]')"""
        return self.dataframe["(X',Y') RMS-Emitt [rad2]"]

    @property
    def alpha_x_phi(self) -> pd.Series:
        """X-Phase correlation alpha (Returns the column: '(X,PH) Alpha [1]')"""
        return self.dataframe["(X,PH) Alpha [1]"]

    @property
    def beta_x_phi(self) -> pd.Series:
        """X-Phase correlation beta [m/deg] (Returns the column: '(X,PH) Beta [m/deg]')"""
        return self.dataframe["(X,PH) Beta [m/deg]"]

    @property
    def emitt_rms_x_phi(self) -> pd.Series:
        """X-Phase RMS emittance [m·deg] (Returns the column: '(X,PH)RMS-Emittance [m.deg]')"""
        return self.dataframe["(X,PH)RMS-Emittance [m.deg]"]

    @property
    def alpha_y_phi(self) -> pd.Series:
        """Y-Phase correlation alpha (Returns the column: '(Y,PH) Alpha [1]')"""
        return self.dataframe["(Y,PH) Alpha [1]"]

    @property
    def beta_y_phi(self) -> pd.Series:
        """Y-Phase correlation beta [m/deg] (Returns the column: '(Y,PH) Beta [m/deg]')"""
        return self.dataframe["(Y,PH) Beta [m/deg]"]

    @property
    def emitt_rms_y_phi(self) -> pd.Series:
        """Y-Phase RMS emittance [m·deg] (Returns the column: '(Y,PH)RMS-Emittance [m.deg]')"""
        return self.dataframe["(Y,PH)RMS-Emittance [m.deg]"]
