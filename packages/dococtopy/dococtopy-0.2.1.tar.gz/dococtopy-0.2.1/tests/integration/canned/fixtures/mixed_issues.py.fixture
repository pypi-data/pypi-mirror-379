"""Scenario 3: Mixed issues - missing params, wrong sections, etc."""


def complex_function(data, limit=None, sort_key=None, reverse=False):
    """Process complex data with various options.

    Args:
        data: The input data to process

    Returns:
        Processed data
    """
    if limit:
        data = data[:limit]
    if sort_key:
        data = sorted(data, key=sort_key, reverse=reverse)
    return data


def calculate_statistics(numbers):
    """Calculate basic statistics for a list of numbers.

    Args:
        numbers: List of numbers

    Returns:
        Dictionary with statistics
    """
    if not numbers:
        return {"mean": 0, "median": 0, "mode": 0}
    
    mean = sum(numbers) / len(numbers)
    sorted_numbers = sorted(numbers)
    n = len(sorted_numbers)
    median = (sorted_numbers[n//2-1] + sorted_numbers[n//2]) / 2 if n % 2 == 0 else sorted_numbers[n//2]
    
    return {"mean": mean, "median": median, "mode": max(set(numbers), key=numbers.count)}


def validate_user_input(username, email, age):
    """Validate user input data.

    Args:
        username: Username to validate
        email: Email to validate

    Returns:
        Validation result
    """
    errors = []
    if not username or len(username) < 3:
        errors.append("Username must be at least 3 characters")
    if not email or "@" not in email:
        errors.append("Invalid email format")
    if age < 0 or age > 150:
        errors.append("Invalid age")
    
    return {"valid": len(errors) == 0, "errors": errors}


class DataProcessor:
    """Process various types of data."""

    def __init__(self, config):
        self.config = config

    def process(self, data):
        """Process the data according to configuration.

        Args:
            data: Data to process

        Returns:
            Processed data
        """
        if self.config.get("sort"):
            data = sorted(data)
        if self.config.get("filter"):
            data = [x for x in data if x]
        return data

    def save_results(self, results, filename):
        """Save results to file.

        Args:
            results: Results to save
        """
        with open(filename, 'w') as f:
            f.write(str(results))