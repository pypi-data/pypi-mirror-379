"""

A RTF, or Ray Transfer Function, is constructed using a fitting method that finds a polynomial as an interpolating function.
This node is exclusively used for the Imported camera Node and contains all associated data and information.
These data are generated by the Camera importer and cannot be edited like other parameters.
"""
from __future__ import annotations
import numpy
import ocean.abyss.nodes
__all__ = ['Linked', 'Rtf', 'Spectralrtfs']
class Linked(ocean.abyss.nodes.Node, ocean.abyss.nodes.CNodeHandler):
    """
    **Linked**
    
    .. raw:: html
    
        <iframe id="Linked" src="https://docs.eclat-digital.com/ocean2024-docs/reference/nodes/rtf/linked.html" loading="lazy" alt="https://docs.eclat-digital.com/ocean2024-docs/reference/nodes/rtf/linked.html"></iframe>
    """
    def __init__(self, name: str) -> None:
        ...
    def getTarget(self) -> str:
        """
        Get the target parameter
        """
    def setTarget(self, target: str) -> bool:
        """
        Set the target parameter
        """
class Rtf(ocean.abyss.nodes.Node, ocean.abyss.nodes.CNodeHandler):
    """
    **Rtf**
    
    .. raw:: html
    
        <iframe id="Rtf" src="https://docs.eclat-digital.com/ocean2024-docs/reference/nodes/rtf/rtf.html" loading="lazy" alt="https://docs.eclat-digital.com/ocean2024-docs/reference/nodes/rtf/rtf.html"></iframe>
    """
    def __init__(self, name: str) -> None:
        ...
    def getRawIsBeams(self) -> numpy.ndarray[numpy.int32]:
        ...
    def getRawIsOutputDirZUniformByPart(self) -> numpy.ndarray[numpy.int32]:
        ...
    def getRawIsPlanar(self) -> numpy.ndarray[numpy.int32]:
        ...
    def getRawOutputRadius(self) -> numpy.ndarray[numpy.float64]:
        ...
    def getRawPassPlaneDistance(self) -> numpy.ndarray[numpy.float64]:
        ...
    def getRawTermdx(self) -> numpy.ndarray[numpy.int32]:
        ...
    def getRawTermdy(self) -> numpy.ndarray[numpy.int32]:
        ...
    def getRawTermr(self) -> numpy.ndarray[numpy.int32]:
        ...
    def getRawWavelength(self) -> numpy.ndarray[numpy.float64]:
        ...
    def getRawYMaxInput(self) -> numpy.ndarray[numpy.float64]:
        ...
    def getRawZInput(self) -> numpy.ndarray[numpy.float64]:
        ...
    def setRawIsBeams(self, arg0: numpy.ndarray[numpy.int32]) -> bool:
        ...
    def setRawIsOutputDirZUniformByPart(self, arg0: numpy.ndarray[numpy.int32]) -> bool:
        ...
    def setRawIsPlanar(self, arg0: numpy.ndarray[numpy.int32]) -> bool:
        ...
    def setRawOutputRadius(self, arg0: numpy.ndarray[numpy.float64]) -> bool:
        ...
    def setRawPassPlaneDistance(self, arg0: numpy.ndarray[numpy.float64]) -> bool:
        ...
    def setRawTermdx(self, arg0: numpy.ndarray[numpy.int32]) -> bool:
        ...
    def setRawTermdy(self, arg0: numpy.ndarray[numpy.int32]) -> bool:
        ...
    def setRawTermr(self, arg0: numpy.ndarray[numpy.int32]) -> bool:
        ...
    def setRawWavelength(self, arg0: numpy.ndarray[numpy.float64]) -> bool:
        ...
    def setRawYMaxInput(self, arg0: numpy.ndarray[numpy.float64]) -> bool:
        ...
    def setRawZInput(self, arg0: numpy.ndarray[numpy.float64]) -> bool:
        ...
class Spectralrtfs(ocean.abyss.nodes.Node, ocean.abyss.nodes.CNodeHandler):
    """
    **Spectralrtfs**
    
    .. raw:: html
    
        <iframe id="Spectralrtfs" src="https://docs.eclat-digital.com/ocean2024-docs/reference/nodes/rtf/spectralrtfs.html" loading="lazy" alt="https://docs.eclat-digital.com/ocean2024-docs/reference/nodes/rtf/spectralrtfs.html"></iframe>
    """
    def __init__(self, name: str) -> None:
        ...
