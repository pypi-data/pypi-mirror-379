# coding: utf-8

"""
    Anansi REST API

    These endpoints describe the REST API of the Anansi Data Lineage Tool. The Catalog endpoint is for saving data into Nodes. The Relationships endpoints is for connecting data between Nodes. The endpoints use JWT as the security mechanism.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: admin@suketa.in
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GraphRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'case': 'str',
        'item': 'GraphRequestItem'
    }

    attribute_map = {
        'case': 'Case',
        'item': 'Item'
    }

    def __init__(self, case=None, item=None):  # noqa: E501
        """GraphRequest - a model defined in Swagger"""  # noqa: E501
        self._case = None
        self._item = None
        self.discriminator = None
        self.case = case
        if item is not None:
            self.item = item

    @property
    def case(self):
        """Gets the case of this GraphRequest.  # noqa: E501


        :return: The case of this GraphRequest.  # noqa: E501
        :rtype: str
        """
        return self._case

    @case.setter
    def case(self, case):
        """Sets the case of this GraphRequest.


        :param case: The case of this GraphRequest.  # noqa: E501
        :type: str
        """
        if case is None:
            raise ValueError("Invalid value for `case`, must not be `None`")  # noqa: E501
        allowed_values = ["SystemGraphRequest", "DatabaseSchemaRequest"]  # noqa: E501
        if case not in allowed_values:
            raise ValueError(
                "Invalid value for `case` ({0}), must be one of {1}"  # noqa: E501
                .format(case, allowed_values)
            )

        self._case = case

    @property
    def item(self):
        """Gets the item of this GraphRequest.  # noqa: E501


        :return: The item of this GraphRequest.  # noqa: E501
        :rtype: GraphRequestItem
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this GraphRequest.


        :param item: The item of this GraphRequest.  # noqa: E501
        :type: GraphRequestItem
        """

        self._item = item

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GraphRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GraphRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
