# coding: utf-8

"""
    Anansi REST API

    These endpoints describe the REST API of the Anansi Data Lineage Tool. The Catalog endpoint is for saving data into Nodes. The Relationships endpoints is for connecting data between Nodes. The endpoints use JWT as the security mechanism.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: admin@suketa.in
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SuccessResponseOnCRUD(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contains_updates': 'bool',
        'nodes_created': 'int',
        'nodes_deleted': 'int',
        'relationships_created': 'int',
        'relationships_deleted': 'int',
        'properties_set': 'int',
        'labels_added': 'int',
        'labels_removed': 'int',
        'indexes_added': 'int',
        'indexes_removed': 'int',
        'constraints_added': 'int',
        'constraints_removed': 'int',
        'system_updates': 'int',
        'contains_system_updates': 'bool'
    }

    attribute_map = {
        'contains_updates': 'ContainsUpdates',
        'nodes_created': 'NodesCreated',
        'nodes_deleted': 'NodesDeleted',
        'relationships_created': 'RelationshipsCreated',
        'relationships_deleted': 'RelationshipsDeleted',
        'properties_set': 'PropertiesSet',
        'labels_added': 'LabelsAdded',
        'labels_removed': 'LabelsRemoved',
        'indexes_added': 'IndexesAdded',
        'indexes_removed': 'IndexesRemoved',
        'constraints_added': 'ConstraintsAdded',
        'constraints_removed': 'ConstraintsRemoved',
        'system_updates': 'SystemUpdates',
        'contains_system_updates': 'ContainsSystemUpdates'
    }

    def __init__(self, contains_updates=None, nodes_created=None, nodes_deleted=None, relationships_created=None, relationships_deleted=None, properties_set=None, labels_added=None, labels_removed=None, indexes_added=None, indexes_removed=None, constraints_added=None, constraints_removed=None, system_updates=None, contains_system_updates=None):  # noqa: E501
        """SuccessResponseOnCRUD - a model defined in Swagger"""  # noqa: E501
        self._contains_updates = None
        self._nodes_created = None
        self._nodes_deleted = None
        self._relationships_created = None
        self._relationships_deleted = None
        self._properties_set = None
        self._labels_added = None
        self._labels_removed = None
        self._indexes_added = None
        self._indexes_removed = None
        self._constraints_added = None
        self._constraints_removed = None
        self._system_updates = None
        self._contains_system_updates = None
        self.discriminator = None
        if contains_updates is not None:
            self.contains_updates = contains_updates
        if nodes_created is not None:
            self.nodes_created = nodes_created
        if nodes_deleted is not None:
            self.nodes_deleted = nodes_deleted
        if relationships_created is not None:
            self.relationships_created = relationships_created
        if relationships_deleted is not None:
            self.relationships_deleted = relationships_deleted
        if properties_set is not None:
            self.properties_set = properties_set
        if labels_added is not None:
            self.labels_added = labels_added
        if labels_removed is not None:
            self.labels_removed = labels_removed
        if indexes_added is not None:
            self.indexes_added = indexes_added
        if indexes_removed is not None:
            self.indexes_removed = indexes_removed
        if constraints_added is not None:
            self.constraints_added = constraints_added
        if constraints_removed is not None:
            self.constraints_removed = constraints_removed
        if system_updates is not None:
            self.system_updates = system_updates
        if contains_system_updates is not None:
            self.contains_system_updates = contains_system_updates

    @property
    def contains_updates(self):
        """Gets the contains_updates of this SuccessResponseOnCRUD.  # noqa: E501


        :return: The contains_updates of this SuccessResponseOnCRUD.  # noqa: E501
        :rtype: bool
        """
        return self._contains_updates

    @contains_updates.setter
    def contains_updates(self, contains_updates):
        """Sets the contains_updates of this SuccessResponseOnCRUD.


        :param contains_updates: The contains_updates of this SuccessResponseOnCRUD.  # noqa: E501
        :type: bool
        """

        self._contains_updates = contains_updates

    @property
    def nodes_created(self):
        """Gets the nodes_created of this SuccessResponseOnCRUD.  # noqa: E501


        :return: The nodes_created of this SuccessResponseOnCRUD.  # noqa: E501
        :rtype: int
        """
        return self._nodes_created

    @nodes_created.setter
    def nodes_created(self, nodes_created):
        """Sets the nodes_created of this SuccessResponseOnCRUD.


        :param nodes_created: The nodes_created of this SuccessResponseOnCRUD.  # noqa: E501
        :type: int
        """

        self._nodes_created = nodes_created

    @property
    def nodes_deleted(self):
        """Gets the nodes_deleted of this SuccessResponseOnCRUD.  # noqa: E501


        :return: The nodes_deleted of this SuccessResponseOnCRUD.  # noqa: E501
        :rtype: int
        """
        return self._nodes_deleted

    @nodes_deleted.setter
    def nodes_deleted(self, nodes_deleted):
        """Sets the nodes_deleted of this SuccessResponseOnCRUD.


        :param nodes_deleted: The nodes_deleted of this SuccessResponseOnCRUD.  # noqa: E501
        :type: int
        """

        self._nodes_deleted = nodes_deleted

    @property
    def relationships_created(self):
        """Gets the relationships_created of this SuccessResponseOnCRUD.  # noqa: E501


        :return: The relationships_created of this SuccessResponseOnCRUD.  # noqa: E501
        :rtype: int
        """
        return self._relationships_created

    @relationships_created.setter
    def relationships_created(self, relationships_created):
        """Sets the relationships_created of this SuccessResponseOnCRUD.


        :param relationships_created: The relationships_created of this SuccessResponseOnCRUD.  # noqa: E501
        :type: int
        """

        self._relationships_created = relationships_created

    @property
    def relationships_deleted(self):
        """Gets the relationships_deleted of this SuccessResponseOnCRUD.  # noqa: E501


        :return: The relationships_deleted of this SuccessResponseOnCRUD.  # noqa: E501
        :rtype: int
        """
        return self._relationships_deleted

    @relationships_deleted.setter
    def relationships_deleted(self, relationships_deleted):
        """Sets the relationships_deleted of this SuccessResponseOnCRUD.


        :param relationships_deleted: The relationships_deleted of this SuccessResponseOnCRUD.  # noqa: E501
        :type: int
        """

        self._relationships_deleted = relationships_deleted

    @property
    def properties_set(self):
        """Gets the properties_set of this SuccessResponseOnCRUD.  # noqa: E501


        :return: The properties_set of this SuccessResponseOnCRUD.  # noqa: E501
        :rtype: int
        """
        return self._properties_set

    @properties_set.setter
    def properties_set(self, properties_set):
        """Sets the properties_set of this SuccessResponseOnCRUD.


        :param properties_set: The properties_set of this SuccessResponseOnCRUD.  # noqa: E501
        :type: int
        """

        self._properties_set = properties_set

    @property
    def labels_added(self):
        """Gets the labels_added of this SuccessResponseOnCRUD.  # noqa: E501


        :return: The labels_added of this SuccessResponseOnCRUD.  # noqa: E501
        :rtype: int
        """
        return self._labels_added

    @labels_added.setter
    def labels_added(self, labels_added):
        """Sets the labels_added of this SuccessResponseOnCRUD.


        :param labels_added: The labels_added of this SuccessResponseOnCRUD.  # noqa: E501
        :type: int
        """

        self._labels_added = labels_added

    @property
    def labels_removed(self):
        """Gets the labels_removed of this SuccessResponseOnCRUD.  # noqa: E501


        :return: The labels_removed of this SuccessResponseOnCRUD.  # noqa: E501
        :rtype: int
        """
        return self._labels_removed

    @labels_removed.setter
    def labels_removed(self, labels_removed):
        """Sets the labels_removed of this SuccessResponseOnCRUD.


        :param labels_removed: The labels_removed of this SuccessResponseOnCRUD.  # noqa: E501
        :type: int
        """

        self._labels_removed = labels_removed

    @property
    def indexes_added(self):
        """Gets the indexes_added of this SuccessResponseOnCRUD.  # noqa: E501


        :return: The indexes_added of this SuccessResponseOnCRUD.  # noqa: E501
        :rtype: int
        """
        return self._indexes_added

    @indexes_added.setter
    def indexes_added(self, indexes_added):
        """Sets the indexes_added of this SuccessResponseOnCRUD.


        :param indexes_added: The indexes_added of this SuccessResponseOnCRUD.  # noqa: E501
        :type: int
        """

        self._indexes_added = indexes_added

    @property
    def indexes_removed(self):
        """Gets the indexes_removed of this SuccessResponseOnCRUD.  # noqa: E501


        :return: The indexes_removed of this SuccessResponseOnCRUD.  # noqa: E501
        :rtype: int
        """
        return self._indexes_removed

    @indexes_removed.setter
    def indexes_removed(self, indexes_removed):
        """Sets the indexes_removed of this SuccessResponseOnCRUD.


        :param indexes_removed: The indexes_removed of this SuccessResponseOnCRUD.  # noqa: E501
        :type: int
        """

        self._indexes_removed = indexes_removed

    @property
    def constraints_added(self):
        """Gets the constraints_added of this SuccessResponseOnCRUD.  # noqa: E501


        :return: The constraints_added of this SuccessResponseOnCRUD.  # noqa: E501
        :rtype: int
        """
        return self._constraints_added

    @constraints_added.setter
    def constraints_added(self, constraints_added):
        """Sets the constraints_added of this SuccessResponseOnCRUD.


        :param constraints_added: The constraints_added of this SuccessResponseOnCRUD.  # noqa: E501
        :type: int
        """

        self._constraints_added = constraints_added

    @property
    def constraints_removed(self):
        """Gets the constraints_removed of this SuccessResponseOnCRUD.  # noqa: E501


        :return: The constraints_removed of this SuccessResponseOnCRUD.  # noqa: E501
        :rtype: int
        """
        return self._constraints_removed

    @constraints_removed.setter
    def constraints_removed(self, constraints_removed):
        """Sets the constraints_removed of this SuccessResponseOnCRUD.


        :param constraints_removed: The constraints_removed of this SuccessResponseOnCRUD.  # noqa: E501
        :type: int
        """

        self._constraints_removed = constraints_removed

    @property
    def system_updates(self):
        """Gets the system_updates of this SuccessResponseOnCRUD.  # noqa: E501


        :return: The system_updates of this SuccessResponseOnCRUD.  # noqa: E501
        :rtype: int
        """
        return self._system_updates

    @system_updates.setter
    def system_updates(self, system_updates):
        """Sets the system_updates of this SuccessResponseOnCRUD.


        :param system_updates: The system_updates of this SuccessResponseOnCRUD.  # noqa: E501
        :type: int
        """

        self._system_updates = system_updates

    @property
    def contains_system_updates(self):
        """Gets the contains_system_updates of this SuccessResponseOnCRUD.  # noqa: E501


        :return: The contains_system_updates of this SuccessResponseOnCRUD.  # noqa: E501
        :rtype: bool
        """
        return self._contains_system_updates

    @contains_system_updates.setter
    def contains_system_updates(self, contains_system_updates):
        """Sets the contains_system_updates of this SuccessResponseOnCRUD.


        :param contains_system_updates: The contains_system_updates of this SuccessResponseOnCRUD.  # noqa: E501
        :type: bool
        """

        self._contains_system_updates = contains_system_updates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SuccessResponseOnCRUD, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SuccessResponseOnCRUD):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
