# coding: utf-8

"""
    Anansi REST API

    These endpoints describe the REST API of the Anansi Data Lineage Tool. The Catalog endpoint is for saving data into Nodes. The Relationships endpoints is for connecting data between Nodes. The endpoints use JWT as the security mechanism.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: admin@suketa.in
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Relationship(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source': 'str',
        'source_id': 'str',
        'type': 'str',
        'destination': 'str',
        'destination_id': 'str',
        'label': 'str',
        'description': 'str',
        'last_updated_by': 'str',
        'last_updated_date_time': 'str',
        'created_by': 'str',
        'created_date_time': 'str'
    }

    attribute_map = {
        'source': 'Source',
        'source_id': 'Source Id',
        'type': 'Type',
        'destination': 'Destination',
        'destination_id': 'Destination Id',
        'label': 'Label',
        'description': 'Description',
        'last_updated_by': 'Last Updated By',
        'last_updated_date_time': 'Last Updated DateTime',
        'created_by': 'Created By',
        'created_date_time': 'Created DateTime'
    }

    def __init__(self, source=None, source_id=None, type=None, destination=None, destination_id=None, label=None, description=None, last_updated_by=None, last_updated_date_time=None, created_by=None, created_date_time=None):  # noqa: E501
        """Relationship - a model defined in Swagger"""  # noqa: E501
        self._source = None
        self._source_id = None
        self._type = None
        self._destination = None
        self._destination_id = None
        self._label = None
        self._description = None
        self._last_updated_by = None
        self._last_updated_date_time = None
        self._created_by = None
        self._created_date_time = None
        self.discriminator = None
        self.source = source
        self.source_id = source_id
        self.type = type
        self.destination = destination
        self.destination_id = destination_id
        if label is not None:
            self.label = label
        if description is not None:
            self.description = description
        self.last_updated_by = last_updated_by
        self.last_updated_date_time = last_updated_date_time
        self.created_by = created_by
        self.created_date_time = created_date_time

    @property
    def source(self):
        """Gets the source of this Relationship.  # noqa: E501


        :return: The source of this Relationship.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Relationship.


        :param source: The source of this Relationship.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def source_id(self):
        """Gets the source_id of this Relationship.  # noqa: E501


        :return: The source_id of this Relationship.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Relationship.


        :param source_id: The source_id of this Relationship.  # noqa: E501
        :type: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")  # noqa: E501

        self._source_id = source_id

    @property
    def type(self):
        """Gets the type of this Relationship.  # noqa: E501


        :return: The type of this Relationship.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Relationship.


        :param type: The type of this Relationship.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def destination(self):
        """Gets the destination of this Relationship.  # noqa: E501


        :return: The destination of this Relationship.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this Relationship.


        :param destination: The destination of this Relationship.  # noqa: E501
        :type: str
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")  # noqa: E501

        self._destination = destination

    @property
    def destination_id(self):
        """Gets the destination_id of this Relationship.  # noqa: E501


        :return: The destination_id of this Relationship.  # noqa: E501
        :rtype: str
        """
        return self._destination_id

    @destination_id.setter
    def destination_id(self, destination_id):
        """Sets the destination_id of this Relationship.


        :param destination_id: The destination_id of this Relationship.  # noqa: E501
        :type: str
        """
        if destination_id is None:
            raise ValueError("Invalid value for `destination_id`, must not be `None`")  # noqa: E501

        self._destination_id = destination_id

    @property
    def label(self):
        """Gets the label of this Relationship.  # noqa: E501


        :return: The label of this Relationship.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Relationship.


        :param label: The label of this Relationship.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def description(self):
        """Gets the description of this Relationship.  # noqa: E501


        :return: The description of this Relationship.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Relationship.


        :param description: The description of this Relationship.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this Relationship.  # noqa: E501


        :return: The last_updated_by of this Relationship.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this Relationship.


        :param last_updated_by: The last_updated_by of this Relationship.  # noqa: E501
        :type: str
        """
        if last_updated_by is None:
            raise ValueError("Invalid value for `last_updated_by`, must not be `None`")  # noqa: E501

        self._last_updated_by = last_updated_by

    @property
    def last_updated_date_time(self):
        """Gets the last_updated_date_time of this Relationship.  # noqa: E501


        :return: The last_updated_date_time of this Relationship.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_date_time

    @last_updated_date_time.setter
    def last_updated_date_time(self, last_updated_date_time):
        """Sets the last_updated_date_time of this Relationship.


        :param last_updated_date_time: The last_updated_date_time of this Relationship.  # noqa: E501
        :type: str
        """
        if last_updated_date_time is None:
            raise ValueError("Invalid value for `last_updated_date_time`, must not be `None`")  # noqa: E501

        self._last_updated_date_time = last_updated_date_time

    @property
    def created_by(self):
        """Gets the created_by of this Relationship.  # noqa: E501


        :return: The created_by of this Relationship.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Relationship.


        :param created_by: The created_by of this Relationship.  # noqa: E501
        :type: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def created_date_time(self):
        """Gets the created_date_time of this Relationship.  # noqa: E501


        :return: The created_date_time of this Relationship.  # noqa: E501
        :rtype: str
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this Relationship.


        :param created_date_time: The created_date_time of this Relationship.  # noqa: E501
        :type: str
        """
        if created_date_time is None:
            raise ValueError("Invalid value for `created_date_time`, must not be `None`")  # noqa: E501

        self._created_date_time = created_date_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Relationship, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Relationship):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
