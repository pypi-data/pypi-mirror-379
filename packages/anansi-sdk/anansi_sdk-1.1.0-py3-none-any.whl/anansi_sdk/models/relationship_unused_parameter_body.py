# coding: utf-8

"""
    Anansi REST API

    These endpoints describe the REST API of the Anansi Data Lineage Tool. The Catalog endpoint is for saving data into Nodes. The Relationships endpoints is for connecting data between Nodes. The endpoints use JWT as the security mechanism.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: admin@suketa.in
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RelationshipUnusedParameterBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source': 'str',
        'source_id': 'str',
        'type': 'str',
        'destination': 'str',
        'destination_id': 'str',
        'description': 'str',
        'label': 'str'
    }

    attribute_map = {
        'source': 'Source',
        'source_id': 'Source Id',
        'type': 'Type',
        'destination': 'Destination',
        'destination_id': 'Destination Id',
        'description': 'Description',
        'label': 'Label'
    }

    def __init__(self, source=None, source_id=None, type=None, destination=None, destination_id=None, description=None, label=None):  # noqa: E501
        """RelationshipUnusedParameterBody - a model defined in Swagger"""  # noqa: E501
        self._source = None
        self._source_id = None
        self._type = None
        self._destination = None
        self._destination_id = None
        self._description = None
        self._label = None
        self.discriminator = None
        self.source = source
        self.source_id = source_id
        self.type = type
        self.destination = destination
        self.destination_id = destination_id
        if description is not None:
            self.description = description
        if label is not None:
            self.label = label

    @property
    def source(self):
        """Gets the source of this RelationshipUnusedParameterBody.  # noqa: E501


        :return: The source of this RelationshipUnusedParameterBody.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this RelationshipUnusedParameterBody.


        :param source: The source of this RelationshipUnusedParameterBody.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def source_id(self):
        """Gets the source_id of this RelationshipUnusedParameterBody.  # noqa: E501


        :return: The source_id of this RelationshipUnusedParameterBody.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this RelationshipUnusedParameterBody.


        :param source_id: The source_id of this RelationshipUnusedParameterBody.  # noqa: E501
        :type: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")  # noqa: E501

        self._source_id = source_id

    @property
    def type(self):
        """Gets the type of this RelationshipUnusedParameterBody.  # noqa: E501


        :return: The type of this RelationshipUnusedParameterBody.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RelationshipUnusedParameterBody.


        :param type: The type of this RelationshipUnusedParameterBody.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def destination(self):
        """Gets the destination of this RelationshipUnusedParameterBody.  # noqa: E501


        :return: The destination of this RelationshipUnusedParameterBody.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this RelationshipUnusedParameterBody.


        :param destination: The destination of this RelationshipUnusedParameterBody.  # noqa: E501
        :type: str
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")  # noqa: E501

        self._destination = destination

    @property
    def destination_id(self):
        """Gets the destination_id of this RelationshipUnusedParameterBody.  # noqa: E501


        :return: The destination_id of this RelationshipUnusedParameterBody.  # noqa: E501
        :rtype: str
        """
        return self._destination_id

    @destination_id.setter
    def destination_id(self, destination_id):
        """Sets the destination_id of this RelationshipUnusedParameterBody.


        :param destination_id: The destination_id of this RelationshipUnusedParameterBody.  # noqa: E501
        :type: str
        """
        if destination_id is None:
            raise ValueError("Invalid value for `destination_id`, must not be `None`")  # noqa: E501

        self._destination_id = destination_id

    @property
    def description(self):
        """Gets the description of this RelationshipUnusedParameterBody.  # noqa: E501


        :return: The description of this RelationshipUnusedParameterBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RelationshipUnusedParameterBody.


        :param description: The description of this RelationshipUnusedParameterBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def label(self):
        """Gets the label of this RelationshipUnusedParameterBody.  # noqa: E501


        :return: The label of this RelationshipUnusedParameterBody.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this RelationshipUnusedParameterBody.


        :param label: The label of this RelationshipUnusedParameterBody.  # noqa: E501
        :type: str
        """

        self._label = label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RelationshipUnusedParameterBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RelationshipUnusedParameterBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
