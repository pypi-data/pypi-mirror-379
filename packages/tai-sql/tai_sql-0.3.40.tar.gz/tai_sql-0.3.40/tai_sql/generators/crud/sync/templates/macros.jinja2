

{% macro pydantic_model_config() -%}
    model_config = ConfigDict(
        # Performance optimizations
        arbitrary_types_allowed=False,  # Más rápido al validar tipos estrictos
        use_enum_values=True,
        validate_assignment=True,  # Valida en cada asignación
        frozen=False,  # Si True, hace el objeto inmutable
        str_strip_whitespace=False,  # No procesa strings automáticamente
        validate_default=False,  # No valida valores por defecto
        extra="forbid",  # Más rápido que "allow" o "ignore"
        # Configuraciones adicionales de v2
        populate_by_name=True,  # Permite usar alias y nombres originales
        use_attribute_docstrings=True,  # Usa docstrings como descripciones
        validate_call=True,  # Valida llamadas a métodos
    )
{%- endmacro %}


{% macro generate_query_parameters(model) -%}
{% for column in model.columns -%}
{% if not column.args.get('autoincrement', False) -%}
    {% if column.args.get('primary_key', False) or column.is_foreign_key -%}
{{ column.name }}: Optional[{{ column.type }}] = None,
in_{{ column.name }}: Optional[List[{{ column.type }}]] = None,
    {% elif 'str' == column.type -%}
{{ column.name }}: Optional[{{ column.type }}] = None,
in_{{ column.name }}: Optional[List[{{ column.type }}]] = None,
    {% elif 'bool' == column.type -%}
{{ column.name }}: Optional[{{ column.type }}] = None,
    {% elif  'date' == column.type or 'int' == column.type -%}
{{ column.name }}: Optional[{{ column.type }}] = None,
in_{{ column.name }}: Optional[List[{{ column.type }}]] = None,
min_{{ column.name }}: Optional[{{ column.type }}] = None,
max_{{ column.name }}: Optional[{{ column.type }}] = None,
    {% elif 'float' == column.type or 'datetime' == column.type or 'time' == column.type -%}
min_{{ column.name }}: Optional[{{ column.type }}] = None,
max_{{ column.name }}: Optional[{{ column.type }}] = None,
    {% elif 'bytes' == column.type %}
    {% else %}
{{ column.name }}: Optional[{{ column.type }}] = None,
    {% endif -%}
{%- endif -%}
{%- endfor -%}
{%- endmacro -%}


{% macro generate_query_args(model) -%}
{% for column in model.columns -%}
{% if not column.args.get('autoincrement', False) -%}
{% if column.args.get('primary_key', False) or column.is_foreign_key -%}
- {{ column.name }}: Filtrar por {{ column.name }}
- in_{{ column.name }}: Filtrar por múltiples valores de {{ column.name }} (OR lógico)
{% elif 'str' == column.type -%}
- {{ column.name }}: Filtrar por {{ column.name }}
- in_{{ column.name }}: Filtrar por múltiples valores de {{ column.name }} (OR lógico)
{% elif 'bool' == column.type -%}
- {{ column.name }}: Filtrar por {{ column.name }}
{% elif  'date' == column.type or 'int' == column.type -%}
- {{ column.name }}: Filtrar por {{ column.name }}
- in_{{ column.name }}: Filtrar por múltiples valores de {{ column.name }} (OR lógico)
- min_{{ column.name }}: Filtrar por fecha mínima (incluída)
- max_{{ column.name }}: Filtrar por fecha máxima (incluída)
{% elif 'float' == column.type or 'datetime' == column.type or 'time' == column.type -%}
- min_{{ column.name }}: Filtrar por valor mínimo de {{ column.name }} (incluído)
- max_{{ column.name }}: Filtrar por valor máximo de {{ column.name }} (incluído)
{% elif 'bytes' == column.type %}
{% else %}
- {{ column.name }}: Filtrar por {{ column.name }}
{% endif -%}
{%- endif -%}
{%- endfor -%}
{%- endmacro %}


{% macro asing_parameters(model) -%}
{% for column in model.columns -%}
{% if not column.args.get('autoincrement', False) -%}
{% if column.args.get('primary_key', False) or column.is_foreign_key -%}
{{ column.name }}={{ column.name }},
in_{{ column.name }}=in_{{ column.name }},
{% elif 'str' == column.type -%}
{{ column.name }}={{ column.name }},
in_{{ column.name }}=in_{{ column.name }},
{% elif 'bool' == column.type -%}
{{ column.name }}={{ column.name }},
{% elif  'date' == column.type or 'int' == column.type -%}
{{ column.name }}={{ column.name }},
in_{{ column.name }}=in_{{ column.name }},
min_{{ column.name }}=min_{{ column.name }},
max_{{ column.name }}=max_{{ column.name }},
{% elif 'float' == column.type or 'datetime' == column.type or 'time' == column.type -%}
min_{{ column.name }}=min_{{ column.name }},
max_{{ column.name }}=max_{{ column.name }},
{% elif 'bytes' == column.type %}
{% else %}
{{ column.name }}={{ column.name }},
{% endif -%}
{%- endif -%}
{%- endfor -%}
{%- endmacro %}


{% macro generate_filter_query(model) -%}
{% for column in model.columns -%}
{% if not column.args.get('autoincrement', False) -%}
{% if column.args.get('primary_key', False) or column.is_foreign_key -%}
if {{ column.name }} is not None:
    filters['{{ column.name }}'] = {{ column.name }}
    query = query.where({{ model.name }}.{{ column.name }} == {{ column.name }})
if in_{{ column.name }} is not None and len(in_{{ column.name }}) > 0:
    filters['in_{{ column.name }}'] = in_{{ column.name }}
    query = query.where({{ model.name }}.{{ column.name }}.in_(in_{{ column.name }})){{ '' }}
{% elif 'str' == column.type and not column.encrypt -%}
if {{ column.name }} is not None:
    filters['{{ column.name }}'] = {{ column.name }}
    if isinstance({{ column.name }}, str) and '%' in {{ column.name }}:
        query = query.where({{ model.name }}.{{ column.name }}.ilike({{ column.name }}))
    else:
        query = query.where({{ model.name }}.{{ column.name }} == {{ column.name }})
if in_{{ column.name }} is not None and len(in_{{ column.name }}) > 0:
    filters['in_{{ column.name }}'] = in_{{ column.name }}
    query = query.where({{ model.name }}.{{ column.name }}.in_(in_{{ column.name }}))
{% elif 'bool' == column.type -%}
if {{ column.name }} is not None:
    filters['{{ column.name }}'] = {{ column.name }}
    query = query.where({{ model.name }}.{{ column.name }} == {{ column.name }})
{% elif 'date' == column.type or 'int' == column.type -%}
if {{ column.name }} is not None:
    filters['{{ column.name }}'] = {{ column.name }}
    query = query.where({{ model.name }}.{{ column.name }} == {{ column.name }})
if in_{{ column.name }} is not None and len(in_{{ column.name }}) > 0:
    filters['in_{{ column.name }}'] = in_{{ column.name }}
    query = query.where({{ model.name }}.{{ column.name }}.in_(in_{{ column.name }}))
if min_{{ column.name }} is not None:
    filters['min_{{ column.name }}'] = min_{{ column.name }}
    query = query.where({{ model.name }}.{{ column.name }} >= min_{{ column.name }})
if max_{{ column.name }} is not None:
    filters['max_{{ column.name }}'] = max_{{ column.name }}
    query = query.where({{ model.name }}.{{ column.name }} <= max_{{ column.name }})
{% elif 'float' == column.type or 'datetime' == column.type or 'time' == column.type -%}
if min_{{ column.name }} is not None:
    filters['min_{{ column.name }}'] = min_{{ column.name }}
    query = query.where({{ model.name }}.{{ column.name }} >= min_{{ column.name }})
if max_{{ column.name }} is not None:
    filters['max_{{ column.name }}'] = max_{{ column.name }}
    query = query.where({{ model.name }}.{{ column.name }} <= max_{{ column.name }})
{% elif 'bytes' == column.type %}
{% else %}
if {{ column.name }} is not None:
    filters['{{ column.name }}'] = {{ column.name }}
    # Verificar si es un string con patrones para usar ilike
    if isinstance({{ column.name }}, str) and '%' in {{ column.name }}:
        query = query.where({{ model.name }}.{{ column.name }}.ilike({{ column.name }}))
    else:
        query = query.where({{ model.name }}.{{ column.name }} == {{ column.name }})
{% endif -%}
{%- endif -%}
{%- endfor -%}
{%- endmacro %}