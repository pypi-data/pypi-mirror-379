# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _mesh
else:
    import _mesh

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _mesh.SWIG_PyInstanceMethod_New
_swig_new_static_method = _mesh.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._ser.matrix
import mfem._ser.vector
import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.globals
import mfem._ser.operators
import mfem._ser.attribute_sets
import mfem._ser.arrays_by_name
import mfem._ser.sort_pairs
import mfem._ser.ncmesh
import mfem._ser.gridfunc
import mfem._ser.coefficient
import mfem._ser.symmat
import mfem._ser.intrules
import mfem._ser.sparsemat
import mfem._ser.densemat
import mfem._ser.eltrans
import mfem._ser.fe
import mfem._ser.geom
import mfem._ser.fe_base
import mfem._ser.doftrans
import mfem._ser.fe_fixed_order
import mfem._ser.element
import mfem._ser.table
import mfem._ser.hash
import mfem._ser.fe_h1
import mfem._ser.fe_nd
import mfem._ser.fe_rt
import mfem._ser.fe_l2
import mfem._ser.fe_nurbs
import mfem._ser.fe_pos
import mfem._ser.fe_ser
import mfem._ser.fespace
import mfem._ser.fe_coll
import mfem._ser.lininteg
import mfem._ser.handle
import mfem._ser.restriction
import mfem._ser.bilininteg
import mfem._ser.linearform
import mfem._ser.nonlininteg
import mfem._ser.integrator
import mfem._ser.bounds
import mfem._ser.vertex
import mfem._ser.vtk
import mfem._ser.std_vectors
FaceType_Interior = _mesh.FaceType_Interior

FaceType_Boundary = _mesh.FaceType_Boundary

class Mesh(object):
    r"""Proxy of C++ mfem::Mesh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NONE = _mesh.Mesh_NONE
    
    REFINE = _mesh.Mesh_REFINE
    
    DEREFINE = _mesh.Mesh_DEREFINE
    
    REBALANCE = _mesh.Mesh_REBALANCE
    
    attributes = property(_mesh.Mesh_attributes_get, doc=r"""attributes : mfem::Array<(int)>""")
    bdr_attributes = property(_mesh.Mesh_bdr_attributes_get, doc=r"""bdr_attributes : mfem::Array<(int)>""")
    attribute_sets = property(_mesh.Mesh_attribute_sets_get, doc=r"""attribute_sets : mfem::AttributeSets""")
    bdr_attribute_sets = property(_mesh.Mesh_bdr_attribute_sets_get, doc=r"""bdr_attribute_sets : mfem::AttributeSets""")
    NURBSext = property(_mesh.Mesh_NURBSext_get, _mesh.Mesh_NURBSext_set, doc=r"""NURBSext : p.mfem::NURBSExtension""")
    ncmesh = property(_mesh.Mesh_ncmesh_get, _mesh.Mesh_ncmesh_set, doc=r"""ncmesh : p.mfem::NCMesh""")
    geom_factors = property(_mesh.Mesh_geom_factors_get, _mesh.Mesh_geom_factors_set, doc=r"""geom_factors : mfem::Array<(p.mfem::GeometricFactors)>""")
    face_geom_factors = property(_mesh.Mesh_face_geom_factors_get, _mesh.Mesh_face_geom_factors_set, doc=r"""face_geom_factors : mfem::Array<(p.mfem::FaceGeometricFactors)>""")
    remove_unused_vertices = property(_mesh.Mesh_remove_unused_vertices_get, _mesh.Mesh_remove_unused_vertices_set, doc=r"""remove_unused_vertices : bool""")

    def Load(self, input, generate_edges=0, refine=1, fix_orientation=True):
        r"""Load(Mesh self, std::istream & input, int generate_edges=0, int refine=1, bool fix_orientation=True)"""
        return _mesh.Mesh_Load(self, input, generate_edges, refine, fix_orientation)
    Load = _swig_new_instance_method(_mesh.Mesh_Load)

    def Swap(self, other, non_geometry):
        r"""Swap(Mesh self, Mesh other, bool non_geometry)"""
        return _mesh.Mesh_Swap(self, other, non_geometry)
    Swap = _swig_new_instance_method(_mesh.Mesh_Swap)

    def Clear(self):
        r"""Clear(Mesh self)"""
        return _mesh.Mesh_Clear(self)
    Clear = _swig_new_instance_method(_mesh.Mesh_Clear)
    __swig_destroy__ = _mesh.delete_Mesh

    @staticmethod
    def LoadFromFile(filename, generate_edges=0, refine=1, fix_orientation=True):
        r"""LoadFromFile(std::string const & filename, int generate_edges=0, int refine=1, bool fix_orientation=True) -> Mesh"""
        return _mesh.Mesh_LoadFromFile(filename, generate_edges, refine, fix_orientation)
    LoadFromFile = _swig_new_static_method(_mesh.Mesh_LoadFromFile)

    @staticmethod
    def MakeCartesian1D(n, sx=1.0):
        r"""MakeCartesian1D(int n, mfem::real_t sx=1.0) -> Mesh"""
        return _mesh.Mesh_MakeCartesian1D(n, sx)
    MakeCartesian1D = _swig_new_static_method(_mesh.Mesh_MakeCartesian1D)

    @staticmethod
    def MakeCartesian2D(nx, ny, type, generate_edges=False, sx=1.0, sy=1.0, sfc_ordering=True):
        r"""MakeCartesian2D(int nx, int ny, mfem::Element::Type type, bool generate_edges=False, mfem::real_t sx=1.0, mfem::real_t sy=1.0, bool sfc_ordering=True) -> Mesh"""
        return _mesh.Mesh_MakeCartesian2D(nx, ny, type, generate_edges, sx, sy, sfc_ordering)
    MakeCartesian2D = _swig_new_static_method(_mesh.Mesh_MakeCartesian2D)

    @staticmethod
    def MakeCartesian3D(nx, ny, nz, type, sx=1.0, sy=1.0, sz=1.0, sfc_ordering=True):
        r"""MakeCartesian3D(int nx, int ny, int nz, mfem::Element::Type type, mfem::real_t sx=1.0, mfem::real_t sy=1.0, mfem::real_t sz=1.0, bool sfc_ordering=True) -> Mesh"""
        return _mesh.Mesh_MakeCartesian3D(nx, ny, nz, type, sx, sy, sz, sfc_ordering)
    MakeCartesian3D = _swig_new_static_method(_mesh.Mesh_MakeCartesian3D)

    @staticmethod
    def MakeCartesian3DWith24TetsPerHex(nx, ny, nz, sx=1.0, sy=1.0, sz=1.0):
        r"""MakeCartesian3DWith24TetsPerHex(int nx, int ny, int nz, mfem::real_t sx=1.0, mfem::real_t sy=1.0, mfem::real_t sz=1.0) -> Mesh"""
        return _mesh.Mesh_MakeCartesian3DWith24TetsPerHex(nx, ny, nz, sx, sy, sz)
    MakeCartesian3DWith24TetsPerHex = _swig_new_static_method(_mesh.Mesh_MakeCartesian3DWith24TetsPerHex)

    @staticmethod
    def MakeCartesian2DWith4TrisPerQuad(nx, ny, sx=1.0, sy=1.0):
        r"""MakeCartesian2DWith4TrisPerQuad(int nx, int ny, mfem::real_t sx=1.0, mfem::real_t sy=1.0) -> Mesh"""
        return _mesh.Mesh_MakeCartesian2DWith4TrisPerQuad(nx, ny, sx, sy)
    MakeCartesian2DWith4TrisPerQuad = _swig_new_static_method(_mesh.Mesh_MakeCartesian2DWith4TrisPerQuad)

    @staticmethod
    def MakeCartesian2DWith5QuadsPerQuad(nx, ny, sx=1.0, sy=1.0):
        r"""MakeCartesian2DWith5QuadsPerQuad(int nx, int ny, mfem::real_t sx=1.0, mfem::real_t sy=1.0) -> Mesh"""
        return _mesh.Mesh_MakeCartesian2DWith5QuadsPerQuad(nx, ny, sx, sy)
    MakeCartesian2DWith5QuadsPerQuad = _swig_new_static_method(_mesh.Mesh_MakeCartesian2DWith5QuadsPerQuad)

    @staticmethod
    def MakeRefined(*args):
        r"""
        MakeRefined(Mesh orig_mesh, int ref_factor, int ref_type) -> Mesh
        MakeRefined(Mesh orig_mesh, intArray ref_factors, int ref_type) -> Mesh
        """
        return _mesh.Mesh_MakeRefined(*args)
    MakeRefined = _swig_new_static_method(_mesh.Mesh_MakeRefined)

    @staticmethod
    def MakeSimplicial(orig_mesh):
        r"""MakeSimplicial(Mesh orig_mesh) -> Mesh"""
        return _mesh.Mesh_MakeSimplicial(orig_mesh)
    MakeSimplicial = _swig_new_static_method(_mesh.Mesh_MakeSimplicial)

    @staticmethod
    def MakePeriodic(orig_mesh, v2v):
        r"""MakePeriodic(Mesh orig_mesh, std::vector< int,std::allocator< int > > const & v2v) -> Mesh"""
        return _mesh.Mesh_MakePeriodic(orig_mesh, v2v)
    MakePeriodic = _swig_new_static_method(_mesh.Mesh_MakePeriodic)

    def NewElement(self, geom):
        r"""NewElement(Mesh self, int geom) -> Element"""
        return _mesh.Mesh_NewElement(self, geom)
    NewElement = _swig_new_instance_method(_mesh.Mesh_NewElement)

    def AddVertex(self, *args):
        r"""
        AddVertex(Mesh self, mfem::real_t x, mfem::real_t y=0.0, mfem::real_t z=0.0) -> int
        AddVertex(Mesh self, mfem::real_t const * coords) -> int
        AddVertex(Mesh self, Vector coords) -> int
        """
        return _mesh.Mesh_AddVertex(self, *args)
    AddVertex = _swig_new_instance_method(_mesh.Mesh_AddVertex)

    def AddVertexParents(self, i, p1, p2):
        r"""AddVertexParents(Mesh self, int i, int p1, int p2)"""
        return _mesh.Mesh_AddVertexParents(self, i, p1, p2)
    AddVertexParents = _swig_new_instance_method(_mesh.Mesh_AddVertexParents)

    def AddVertexAtMeanCenter(self, vi, nverts, dim=3):
        r"""AddVertexAtMeanCenter(Mesh self, int const * vi, int const nverts, int dim=3) -> int"""
        return _mesh.Mesh_AddVertexAtMeanCenter(self, vi, nverts, dim)
    AddVertexAtMeanCenter = _swig_new_instance_method(_mesh.Mesh_AddVertexAtMeanCenter)

    def AddSegment(self, *args):
        r"""
        AddSegment(Mesh self, int v1, int v2, int attr=1) -> int
        AddSegment(Mesh self, int const * vi, int attr=1) -> int
        """
        return _mesh.Mesh_AddSegment(self, *args)
    AddSegment = _swig_new_instance_method(_mesh.Mesh_AddSegment)

    def AddTriangle(self, *args):
        r"""
        AddTriangle(Mesh self, int v1, int v2, int v3, int attr=1) -> int
        AddTriangle(Mesh self, int const * vi, int attr=1) -> int
        """
        return _mesh.Mesh_AddTriangle(self, *args)
    AddTriangle = _swig_new_instance_method(_mesh.Mesh_AddTriangle)

    def AddTri(self, vi, attr=1):
        r"""AddTri(Mesh self, int const * vi, int attr=1) -> int"""
        return _mesh.Mesh_AddTri(self, vi, attr)
    AddTri = _swig_new_instance_method(_mesh.Mesh_AddTri)

    def AddQuad(self, *args):
        r"""
        AddQuad(Mesh self, int v1, int v2, int v3, int v4, int attr=1) -> int
        AddQuad(Mesh self, int const * vi, int attr=1) -> int
        """
        return _mesh.Mesh_AddQuad(self, *args)
    AddQuad = _swig_new_instance_method(_mesh.Mesh_AddQuad)

    def AddTet(self, *args):
        r"""
        AddTet(Mesh self, int v1, int v2, int v3, int v4, int attr=1) -> int
        AddTet(Mesh self, int const * vi, int attr=1) -> int
        """
        return _mesh.Mesh_AddTet(self, *args)
    AddTet = _swig_new_instance_method(_mesh.Mesh_AddTet)

    def AddWedge(self, *args):
        r"""
        AddWedge(Mesh self, int v1, int v2, int v3, int v4, int v5, int v6, int attr=1) -> int
        AddWedge(Mesh self, int const * vi, int attr=1) -> int
        """
        return _mesh.Mesh_AddWedge(self, *args)
    AddWedge = _swig_new_instance_method(_mesh.Mesh_AddWedge)

    def AddPyramid(self, *args):
        r"""
        AddPyramid(Mesh self, int v1, int v2, int v3, int v4, int v5, int attr=1) -> int
        AddPyramid(Mesh self, int const * vi, int attr=1) -> int
        """
        return _mesh.Mesh_AddPyramid(self, *args)
    AddPyramid = _swig_new_instance_method(_mesh.Mesh_AddPyramid)

    def AddHex(self, *args):
        r"""
        AddHex(Mesh self, int v1, int v2, int v3, int v4, int v5, int v6, int v7, int v8, int attr=1) -> int
        AddHex(Mesh self, int const * vi, int attr=1) -> int
        """
        return _mesh.Mesh_AddHex(self, *args)
    AddHex = _swig_new_instance_method(_mesh.Mesh_AddHex)

    def AddHexAsTets(self, vi, attr=1):
        r"""AddHexAsTets(Mesh self, int const * vi, int attr=1)"""
        return _mesh.Mesh_AddHexAsTets(self, vi, attr)
    AddHexAsTets = _swig_new_instance_method(_mesh.Mesh_AddHexAsTets)

    def AddHexAsWedges(self, vi, attr=1):
        r"""AddHexAsWedges(Mesh self, int const * vi, int attr=1)"""
        return _mesh.Mesh_AddHexAsWedges(self, vi, attr)
    AddHexAsWedges = _swig_new_instance_method(_mesh.Mesh_AddHexAsWedges)

    def AddHexAsPyramids(self, vi, attr=1):
        r"""AddHexAsPyramids(Mesh self, int const * vi, int attr=1)"""
        return _mesh.Mesh_AddHexAsPyramids(self, vi, attr)
    AddHexAsPyramids = _swig_new_instance_method(_mesh.Mesh_AddHexAsPyramids)

    def AddHexAs24TetsWithPoints(self, vi, hex_face_verts, attr=1):
        r"""AddHexAs24TetsWithPoints(Mesh self, int * vi, std::map< std::array< int,4 >,int > & hex_face_verts, int attr=1)"""
        return _mesh.Mesh_AddHexAs24TetsWithPoints(self, vi, hex_face_verts, attr)
    AddHexAs24TetsWithPoints = _swig_new_instance_method(_mesh.Mesh_AddHexAs24TetsWithPoints)

    def AddQuadAs4TrisWithPoints(self, vi, attr=1):
        r"""AddQuadAs4TrisWithPoints(Mesh self, int * vi, int attr=1)"""
        return _mesh.Mesh_AddQuadAs4TrisWithPoints(self, vi, attr)
    AddQuadAs4TrisWithPoints = _swig_new_instance_method(_mesh.Mesh_AddQuadAs4TrisWithPoints)

    def AddQuadAs5QuadsWithPoints(self, vi, attr=1):
        r"""AddQuadAs5QuadsWithPoints(Mesh self, int * vi, int attr=1)"""
        return _mesh.Mesh_AddQuadAs5QuadsWithPoints(self, vi, attr)
    AddQuadAs5QuadsWithPoints = _swig_new_instance_method(_mesh.Mesh_AddQuadAs5QuadsWithPoints)

    def AddElement(self, elem):
        r"""AddElement(Mesh self, Element elem) -> int"""
        return _mesh.Mesh_AddElement(self, elem)
    AddElement = _swig_new_instance_method(_mesh.Mesh_AddElement)

    def AddBdrElement(self, elem):
        r"""AddBdrElement(Mesh self, Element elem) -> int"""
        return _mesh.Mesh_AddBdrElement(self, elem)
    AddBdrElement = _swig_new_instance_method(_mesh.Mesh_AddBdrElement)

    def AddBdrElements(self, bdr_elems, be_to_face):
        r"""AddBdrElements(Mesh self, mfem::Array< mfem::Element * > & bdr_elems, intArray be_to_face)"""
        return _mesh.Mesh_AddBdrElements(self, bdr_elems, be_to_face)
    AddBdrElements = _swig_new_instance_method(_mesh.Mesh_AddBdrElements)

    def AddBdrSegment(self, *args):
        r"""
        AddBdrSegment(Mesh self, int v1, int v2, int attr=1) -> int
        AddBdrSegment(Mesh self, int const * vi, int attr=1) -> int
        """
        return _mesh.Mesh_AddBdrSegment(self, *args)
    AddBdrSegment = _swig_new_instance_method(_mesh.Mesh_AddBdrSegment)

    def AddBdrTriangle(self, *args):
        r"""
        AddBdrTriangle(Mesh self, int v1, int v2, int v3, int attr=1) -> int
        AddBdrTriangle(Mesh self, int const * vi, int attr=1) -> int
        """
        return _mesh.Mesh_AddBdrTriangle(self, *args)
    AddBdrTriangle = _swig_new_instance_method(_mesh.Mesh_AddBdrTriangle)

    def AddBdrQuad(self, *args):
        r"""
        AddBdrQuad(Mesh self, int v1, int v2, int v3, int v4, int attr=1) -> int
        AddBdrQuad(Mesh self, int const * vi, int attr=1) -> int
        """
        return _mesh.Mesh_AddBdrQuad(self, *args)
    AddBdrQuad = _swig_new_instance_method(_mesh.Mesh_AddBdrQuad)

    def AddBdrQuadAsTriangles(self, vi, attr=1):
        r"""AddBdrQuadAsTriangles(Mesh self, int const * vi, int attr=1)"""
        return _mesh.Mesh_AddBdrQuadAsTriangles(self, vi, attr)
    AddBdrQuadAsTriangles = _swig_new_instance_method(_mesh.Mesh_AddBdrQuadAsTriangles)

    def AddBdrPoint(self, v, attr=1):
        r"""AddBdrPoint(Mesh self, int v, int attr=1) -> int"""
        return _mesh.Mesh_AddBdrPoint(self, v, attr)
    AddBdrPoint = _swig_new_instance_method(_mesh.Mesh_AddBdrPoint)

    def GenerateBoundaryElements(self):
        r"""GenerateBoundaryElements(Mesh self)"""
        return _mesh.Mesh_GenerateBoundaryElements(self)
    GenerateBoundaryElements = _swig_new_instance_method(_mesh.Mesh_GenerateBoundaryElements)

    def FinalizeTriMesh(self, generate_edges=0, refine=0, fix_orientation=True):
        r"""FinalizeTriMesh(Mesh self, int generate_edges=0, int refine=0, bool fix_orientation=True)"""
        return _mesh.Mesh_FinalizeTriMesh(self, generate_edges, refine, fix_orientation)
    FinalizeTriMesh = _swig_new_instance_method(_mesh.Mesh_FinalizeTriMesh)

    def FinalizeQuadMesh(self, generate_edges=0, refine=0, fix_orientation=True):
        r"""FinalizeQuadMesh(Mesh self, int generate_edges=0, int refine=0, bool fix_orientation=True)"""
        return _mesh.Mesh_FinalizeQuadMesh(self, generate_edges, refine, fix_orientation)
    FinalizeQuadMesh = _swig_new_instance_method(_mesh.Mesh_FinalizeQuadMesh)

    def FinalizeTetMesh(self, generate_edges=0, refine=0, fix_orientation=True):
        r"""FinalizeTetMesh(Mesh self, int generate_edges=0, int refine=0, bool fix_orientation=True)"""
        return _mesh.Mesh_FinalizeTetMesh(self, generate_edges, refine, fix_orientation)
    FinalizeTetMesh = _swig_new_instance_method(_mesh.Mesh_FinalizeTetMesh)

    def FinalizeWedgeMesh(self, generate_edges=0, refine=0, fix_orientation=True):
        r"""FinalizeWedgeMesh(Mesh self, int generate_edges=0, int refine=0, bool fix_orientation=True)"""
        return _mesh.Mesh_FinalizeWedgeMesh(self, generate_edges, refine, fix_orientation)
    FinalizeWedgeMesh = _swig_new_instance_method(_mesh.Mesh_FinalizeWedgeMesh)

    def FinalizeHexMesh(self, generate_edges=0, refine=0, fix_orientation=True):
        r"""FinalizeHexMesh(Mesh self, int generate_edges=0, int refine=0, bool fix_orientation=True)"""
        return _mesh.Mesh_FinalizeHexMesh(self, generate_edges, refine, fix_orientation)
    FinalizeHexMesh = _swig_new_instance_method(_mesh.Mesh_FinalizeHexMesh)

    def FinalizeMesh(self, refine=0, fix_orientation=True):
        r"""FinalizeMesh(Mesh self, int refine=0, bool fix_orientation=True)"""
        return _mesh.Mesh_FinalizeMesh(self, refine, fix_orientation)
    FinalizeMesh = _swig_new_instance_method(_mesh.Mesh_FinalizeMesh)

    def FinalizeTopology(self, generate_bdr=True):
        r"""FinalizeTopology(Mesh self, bool generate_bdr=True)"""
        return _mesh.Mesh_FinalizeTopology(self, generate_bdr)
    FinalizeTopology = _swig_new_instance_method(_mesh.Mesh_FinalizeTopology)

    def Finalize(self, refine=False, fix_orientation=False):
        r"""Finalize(Mesh self, bool refine=False, bool fix_orientation=False)"""
        return _mesh.Mesh_Finalize(self, refine, fix_orientation)
    Finalize = _swig_new_instance_method(_mesh.Mesh_Finalize)

    def SetAttributes(self):
        r"""SetAttributes(Mesh self)"""
        return _mesh.Mesh_SetAttributes(self)
    SetAttributes = _swig_new_instance_method(_mesh.Mesh_SetAttributes)

    def CheckElementOrientation(self, fix_it=True):
        r"""CheckElementOrientation(Mesh self, bool fix_it=True) -> int"""
        return _mesh.Mesh_CheckElementOrientation(self, fix_it)
    CheckElementOrientation = _swig_new_instance_method(_mesh.Mesh_CheckElementOrientation)

    def CheckBdrElementOrientation(self, fix_it=True):
        r"""CheckBdrElementOrientation(Mesh self, bool fix_it=True) -> int"""
        return _mesh.Mesh_CheckBdrElementOrientation(self, fix_it)
    CheckBdrElementOrientation = _swig_new_instance_method(_mesh.Mesh_CheckBdrElementOrientation)

    def ReorientTetMesh(self):
        r"""ReorientTetMesh(Mesh self)"""
        return _mesh.Mesh_ReorientTetMesh(self)
    ReorientTetMesh = _swig_new_instance_method(_mesh.Mesh_ReorientTetMesh)

    def RemoveUnusedVertices(self):
        r"""RemoveUnusedVertices(Mesh self)"""
        return _mesh.Mesh_RemoveUnusedVertices(self)
    RemoveUnusedVertices = _swig_new_instance_method(_mesh.Mesh_RemoveUnusedVertices)

    def RemoveInternalBoundaries(self):
        r"""RemoveInternalBoundaries(Mesh self)"""
        return _mesh.Mesh_RemoveInternalBoundaries(self)
    RemoveInternalBoundaries = _swig_new_instance_method(_mesh.Mesh_RemoveInternalBoundaries)

    def DeleteBoundaryElementToEdge(self):
        r"""DeleteBoundaryElementToEdge(Mesh self)"""
        return _mesh.Mesh_DeleteBoundaryElementToEdge(self)
    DeleteBoundaryElementToEdge = _swig_new_instance_method(_mesh.Mesh_DeleteBoundaryElementToEdge)

    def GetGeckoElementOrdering(self, ordering, iterations=4, window=4, period=2, seed=0, verbose=False, time_limit=0):
        r"""GetGeckoElementOrdering(Mesh self, intArray ordering, int iterations=4, int window=4, int period=2, int seed=0, bool verbose=False, mfem::real_t time_limit=0) -> mfem::real_t"""
        return _mesh.Mesh_GetGeckoElementOrdering(self, ordering, iterations, window, period, seed, verbose, time_limit)
    GetGeckoElementOrdering = _swig_new_instance_method(_mesh.Mesh_GetGeckoElementOrdering)

    def GetHilbertElementOrdering(self, ordering):
        r"""GetHilbertElementOrdering(Mesh self, intArray ordering)"""
        return _mesh.Mesh_GetHilbertElementOrdering(self, ordering)
    GetHilbertElementOrdering = _swig_new_instance_method(_mesh.Mesh_GetHilbertElementOrdering)

    def ReorderElements(self, ordering, reorder_vertices=True):
        r"""ReorderElements(Mesh self, intArray ordering, bool reorder_vertices=True)"""
        return _mesh.Mesh_ReorderElements(self, ordering, reorder_vertices)
    ReorderElements = _swig_new_instance_method(_mesh.Mesh_ReorderElements)

    def Dimension(self):
        r"""Dimension(Mesh self) -> int"""
        return _mesh.Mesh_Dimension(self)
    Dimension = _swig_new_instance_method(_mesh.Mesh_Dimension)

    def SpaceDimension(self):
        r"""SpaceDimension(Mesh self) -> int"""
        return _mesh.Mesh_SpaceDimension(self)
    SpaceDimension = _swig_new_instance_method(_mesh.Mesh_SpaceDimension)

    def EulerNumber(self):
        r"""EulerNumber(Mesh self) -> int"""
        return _mesh.Mesh_EulerNumber(self)
    EulerNumber = _swig_new_instance_method(_mesh.Mesh_EulerNumber)

    def EulerNumber2D(self):
        r"""EulerNumber2D(Mesh self) -> int"""
        return _mesh.Mesh_EulerNumber2D(self)
    EulerNumber2D = _swig_new_instance_method(_mesh.Mesh_EulerNumber2D)

    def MeshGenerator(self):
        r"""MeshGenerator(Mesh self) -> int"""
        return _mesh.Mesh_MeshGenerator(self)
    MeshGenerator = _swig_new_instance_method(_mesh.Mesh_MeshGenerator)

    def HasBoundaryElements(self):
        r"""HasBoundaryElements(Mesh self) -> bool"""
        return _mesh.Mesh_HasBoundaryElements(self)
    HasBoundaryElements = _swig_new_instance_method(_mesh.Mesh_HasBoundaryElements)

    def HasGeometry(self, geom):
        r"""HasGeometry(Mesh self, mfem::Geometry::Type geom) -> bool"""
        return _mesh.Mesh_HasGeometry(self, geom)
    HasGeometry = _swig_new_instance_method(_mesh.Mesh_HasGeometry)

    def GetNumGeometries(self, dim):
        r"""GetNumGeometries(Mesh self, int dim) -> int"""
        return _mesh.Mesh_GetNumGeometries(self, dim)
    GetNumGeometries = _swig_new_instance_method(_mesh.Mesh_GetNumGeometries)

    def GetGeometries(self, dim, el_geoms):
        r"""GetGeometries(Mesh self, int dim, GeometryTypeArray el_geoms)"""
        return _mesh.Mesh_GetGeometries(self, dim, el_geoms)
    GetGeometries = _swig_new_instance_method(_mesh.Mesh_GetGeometries)

    def GetBoundingBox(self, ref = 2):
        from  .vector import Vector
        min = Vector()
        max = Vector()
        _mesh.Mesh_GetBoundingBox(self, min, max, ref)
        return min.GetDataArray().copy(), max.GetDataArray().copy()



    def GetCharacteristics(self, h_min, h_max, kappa_min, kappa_max, Vh=None, Vk=None):
        r"""GetCharacteristics(Mesh self, mfem::real_t & h_min, mfem::real_t & h_max, mfem::real_t & kappa_min, mfem::real_t & kappa_max, Vector Vh=None, Vector Vk=None)"""
        return _mesh.Mesh_GetCharacteristics(self, h_min, h_max, kappa_min, kappa_max, Vh, Vk)
    GetCharacteristics = _swig_new_instance_method(_mesh.Mesh_GetCharacteristics)

    def GetNV(self):
        r"""GetNV(Mesh self) -> int"""
        return _mesh.Mesh_GetNV(self)
    GetNV = _swig_new_instance_method(_mesh.Mesh_GetNV)

    def GetNE(self):
        r"""GetNE(Mesh self) -> int"""
        return _mesh.Mesh_GetNE(self)
    GetNE = _swig_new_instance_method(_mesh.Mesh_GetNE)

    def GetNBE(self):
        r"""GetNBE(Mesh self) -> int"""
        return _mesh.Mesh_GetNBE(self)
    GetNBE = _swig_new_instance_method(_mesh.Mesh_GetNBE)

    def GetNEdges(self):
        r"""GetNEdges(Mesh self) -> int"""
        return _mesh.Mesh_GetNEdges(self)
    GetNEdges = _swig_new_instance_method(_mesh.Mesh_GetNEdges)

    def GetNFaces(self):
        r"""GetNFaces(Mesh self) -> int"""
        return _mesh.Mesh_GetNFaces(self)
    GetNFaces = _swig_new_instance_method(_mesh.Mesh_GetNFaces)

    def GetNumFaces(self):
        r"""GetNumFaces(Mesh self) -> int"""
        return _mesh.Mesh_GetNumFaces(self)
    GetNumFaces = _swig_new_instance_method(_mesh.Mesh_GetNumFaces)

    def GetNumFacesWithGhost(self):
        r"""GetNumFacesWithGhost(Mesh self) -> int"""
        return _mesh.Mesh_GetNumFacesWithGhost(self)
    GetNumFacesWithGhost = _swig_new_instance_method(_mesh.Mesh_GetNumFacesWithGhost)

    def GetNFbyType(self, type):
        r"""GetNFbyType(Mesh self, mfem::FaceType type) -> int"""
        return _mesh.Mesh_GetNFbyType(self, type)
    GetNFbyType = _swig_new_instance_method(_mesh.Mesh_GetNFbyType)

    def GetGlobalNE(self):
        r"""GetGlobalNE(Mesh self) -> long long"""
        return _mesh.Mesh_GetGlobalNE(self)
    GetGlobalNE = _swig_new_instance_method(_mesh.Mesh_GetGlobalNE)

    def GetVertex(self, *args):
        r"""
        GetVertex(Mesh self, int i) -> mfem::real_t const
        GetVertex(Mesh self, int i) -> mfem::real_t *
        """
        return _mesh.Mesh_GetVertex(self, *args)
    GetVertex = _swig_new_instance_method(_mesh.Mesh_GetVertex)

    def GetElement(self, *args):
        r"""
        GetElement(Mesh self, int i) -> Element
        GetElement(Mesh self, int i) -> Element
        """
        return _mesh.Mesh_GetElement(self, *args)
    GetElement = _swig_new_instance_method(_mesh.Mesh_GetElement)

    def GetBdrElement(self, *args):
        r"""
        GetBdrElement(Mesh self, int i) -> Element
        GetBdrElement(Mesh self, int i) -> Element
        """
        return _mesh.Mesh_GetBdrElement(self, *args)
    GetBdrElement = _swig_new_instance_method(_mesh.Mesh_GetBdrElement)

    def GetFace(self, i):
        r"""GetFace(Mesh self, int i) -> Element"""
        return _mesh.Mesh_GetFace(self, i)
    GetFace = _swig_new_instance_method(_mesh.Mesh_GetFace)

    def GetElementsArray(self):
        r"""GetElementsArray(Mesh self) -> mfem::Element const *const *"""
        return _mesh.Mesh_GetElementsArray(self)
    GetElementsArray = _swig_new_instance_method(_mesh.Mesh_GetElementsArray)

    def GetElementData(self, geom, elem_vtx, attr):
        r"""GetElementData(Mesh self, int geom, intArray elem_vtx, intArray attr)"""
        return _mesh.Mesh_GetElementData(self, geom, elem_vtx, attr)
    GetElementData = _swig_new_instance_method(_mesh.Mesh_GetElementData)

    def GetBdrElementData(self, geom, bdr_elem_vtx, bdr_attr):
        r"""GetBdrElementData(Mesh self, int geom, intArray bdr_elem_vtx, intArray bdr_attr)"""
        return _mesh.Mesh_GetBdrElementData(self, geom, bdr_elem_vtx, bdr_attr)
    GetBdrElementData = _swig_new_instance_method(_mesh.Mesh_GetBdrElementData)

    def GetAttribute(self, i):
        r"""GetAttribute(Mesh self, int i) -> int"""
        return _mesh.Mesh_GetAttribute(self, i)
    GetAttribute = _swig_new_instance_method(_mesh.Mesh_GetAttribute)

    def SetAttribute(self, i, attr):
        r"""SetAttribute(Mesh self, int i, int attr)"""
        return _mesh.Mesh_SetAttribute(self, i, attr)
    SetAttribute = _swig_new_instance_method(_mesh.Mesh_SetAttribute)

    def GetBdrAttribute(self, i):
        r"""GetBdrAttribute(Mesh self, int i) -> int"""
        return _mesh.Mesh_GetBdrAttribute(self, i)
    GetBdrAttribute = _swig_new_instance_method(_mesh.Mesh_GetBdrAttribute)

    def SetBdrAttribute(self, i, attr):
        r"""SetBdrAttribute(Mesh self, int i, int attr)"""
        return _mesh.Mesh_SetBdrAttribute(self, i, attr)
    SetBdrAttribute = _swig_new_instance_method(_mesh.Mesh_SetBdrAttribute)

    def GetPatchAttribute(self, i):
        r"""GetPatchAttribute(Mesh self, int i) -> int"""
        return _mesh.Mesh_GetPatchAttribute(self, i)
    GetPatchAttribute = _swig_new_instance_method(_mesh.Mesh_GetPatchAttribute)

    def SetPatchAttribute(self, i, attr):
        r"""SetPatchAttribute(Mesh self, int i, int attr)"""
        return _mesh.Mesh_SetPatchAttribute(self, i, attr)
    SetPatchAttribute = _swig_new_instance_method(_mesh.Mesh_SetPatchAttribute)

    def GetPatchBdrAttribute(self, i):
        r"""GetPatchBdrAttribute(Mesh self, int i) -> int"""
        return _mesh.Mesh_GetPatchBdrAttribute(self, i)
    GetPatchBdrAttribute = _swig_new_instance_method(_mesh.Mesh_GetPatchBdrAttribute)

    def SetPatchBdrAttribute(self, i, attr):
        r"""SetPatchBdrAttribute(Mesh self, int i, int attr)"""
        return _mesh.Mesh_SetPatchBdrAttribute(self, i, attr)
    SetPatchBdrAttribute = _swig_new_instance_method(_mesh.Mesh_SetPatchBdrAttribute)

    def GetElementType(self, i):
        r"""GetElementType(Mesh self, int i) -> mfem::Element::Type"""
        return _mesh.Mesh_GetElementType(self, i)
    GetElementType = _swig_new_instance_method(_mesh.Mesh_GetElementType)

    def GetBdrElementType(self, i):
        r"""GetBdrElementType(Mesh self, int i) -> mfem::Element::Type"""
        return _mesh.Mesh_GetBdrElementType(self, i)
    GetBdrElementType = _swig_new_instance_method(_mesh.Mesh_GetBdrElementType)

    def GetFaceGeometryType(self, Face):
        r"""GetFaceGeometryType(Mesh self, int Face) -> mfem::Geometry::Type"""
        return _mesh.Mesh_GetFaceGeometryType(self, Face)
    GetFaceGeometryType = _swig_new_instance_method(_mesh.Mesh_GetFaceGeometryType)

    def GetFaceElementType(self, Face):
        r"""GetFaceElementType(Mesh self, int Face) -> mfem::Element::Type"""
        return _mesh.Mesh_GetFaceElementType(self, Face)
    GetFaceElementType = _swig_new_instance_method(_mesh.Mesh_GetFaceElementType)

    def GetFaceGeometry(self, i):
        r"""GetFaceGeometry(Mesh self, int i) -> mfem::Geometry::Type"""
        return _mesh.Mesh_GetFaceGeometry(self, i)
    GetFaceGeometry = _swig_new_instance_method(_mesh.Mesh_GetFaceGeometry)

    def GetTypicalFaceGeometry(self):
        r"""GetTypicalFaceGeometry(Mesh self) -> mfem::Geometry::Type"""
        return _mesh.Mesh_GetTypicalFaceGeometry(self)
    GetTypicalFaceGeometry = _swig_new_instance_method(_mesh.Mesh_GetTypicalFaceGeometry)

    def GetElementGeometry(self, i):
        r"""GetElementGeometry(Mesh self, int i) -> mfem::Geometry::Type"""
        return _mesh.Mesh_GetElementGeometry(self, i)
    GetElementGeometry = _swig_new_instance_method(_mesh.Mesh_GetElementGeometry)

    def GetTypicalElementGeometry(self):
        r"""GetTypicalElementGeometry(Mesh self) -> mfem::Geometry::Type"""
        return _mesh.Mesh_GetTypicalElementGeometry(self)
    GetTypicalElementGeometry = _swig_new_instance_method(_mesh.Mesh_GetTypicalElementGeometry)

    def GetBdrElementGeometry(self, i):
        r"""GetBdrElementGeometry(Mesh self, int i) -> mfem::Geometry::Type"""
        return _mesh.Mesh_GetBdrElementGeometry(self, i)
    GetBdrElementGeometry = _swig_new_instance_method(_mesh.Mesh_GetBdrElementGeometry)

    def GetFaceBaseGeometry(self, i):
        r"""GetFaceBaseGeometry(Mesh self, int i) -> mfem::Geometry::Type"""
        return _mesh.Mesh_GetFaceBaseGeometry(self, i)
    GetFaceBaseGeometry = _swig_new_instance_method(_mesh.Mesh_GetFaceBaseGeometry)

    def GetElementBaseGeometry(self, i):
        r"""GetElementBaseGeometry(Mesh self, int i) -> mfem::Geometry::Type"""
        return _mesh.Mesh_GetElementBaseGeometry(self, i)
    GetElementBaseGeometry = _swig_new_instance_method(_mesh.Mesh_GetElementBaseGeometry)

    def GetBdrElementBaseGeometry(self, i):
        r"""GetBdrElementBaseGeometry(Mesh self, int i) -> mfem::Geometry::Type"""
        return _mesh.Mesh_GetBdrElementBaseGeometry(self, i)
    GetBdrElementBaseGeometry = _swig_new_instance_method(_mesh.Mesh_GetBdrElementBaseGeometry)

    def FaceIsInterior(self, FaceNo):
        r"""FaceIsInterior(Mesh self, int FaceNo) -> bool"""
        return _mesh.Mesh_FaceIsInterior(self, FaceNo)
    FaceIsInterior = _swig_new_instance_method(_mesh.Mesh_FaceIsInterior)

    def GetElementSize(self, *args):
        r"""
        GetElementSize(Mesh self, int i, int type=0) -> mfem::real_t
        GetElementSize(Mesh self, int i, Vector dir) -> mfem::real_t
        GetElementSize(Mesh self, ElementTransformation T, int type=0) -> mfem::real_t
        """
        return _mesh.Mesh_GetElementSize(self, *args)
    GetElementSize = _swig_new_instance_method(_mesh.Mesh_GetElementSize)

    def GetElementVolume(self, i):
        r"""GetElementVolume(Mesh self, int i) -> mfem::real_t"""
        return _mesh.Mesh_GetElementVolume(self, i)
    GetElementVolume = _swig_new_instance_method(_mesh.Mesh_GetElementVolume)

    def GetElementCenter(self, i, center):
        r"""GetElementCenter(Mesh self, int i, Vector center)"""
        return _mesh.Mesh_GetElementCenter(self, i, center)
    GetElementCenter = _swig_new_instance_method(_mesh.Mesh_GetElementCenter)

    def GetElementJacobian(self, i, J, ip=None):
        r"""GetElementJacobian(Mesh self, int i, DenseMatrix J, IntegrationPoint ip=None)"""
        return _mesh.Mesh_GetElementJacobian(self, i, J, ip)
    GetElementJacobian = _swig_new_instance_method(_mesh.Mesh_GetElementJacobian)

    def GetElementVertices(self, i):
        from  .array import intArray
        ivert = intArray()
        _mesh.Mesh_GetElementVertices(self, i, ivert)
        return ivert.ToList()



    def GetBdrElementVertices(self, i):
        from  .array import intArray
        ivert = intArray()
        _mesh.Mesh_GetBdrElementVertices(self, i, ivert)
        return ivert.ToList()



    def GetElementEdges(self, i):
        from  .array import intArray
        ia = intArray()
        ib = intArray()
        _mesh.Mesh_GetElementEdges(self, i, ia, ib)
        return ia.ToList(), ib.ToList()



    def GetBdrElementEdges(self, i):
        from  .array import intArray
        ia = intArray()
        ib = intArray()
        _mesh.Mesh_GetBdrElementEdges(self, i, ia, ib)
        return ia.ToList(), ib.ToList()



    def GetFaceEdges(self, i):
        from  .array import intArray
        ia = intArray()
        ib = intArray()
        _mesh.Mesh_GetFaceEdges(self, i, ia, ib)
        return ia.ToList(), ib.ToList()



    def GetFaceVertices(self, i):
        from  .array import intArray
        ia = intArray()
        _mesh.Mesh_GetFaceVertices(self, i, ia)
        return ia.ToList()



    def GetEdgeVertices(self, i):
        from  .array import intArray
        ia = intArray()
        _mesh.Mesh_GetEdgeVertices(self, i, ia)
        return ia.ToList()



    def GetElementFaces(self, i):
        from  .array import intArray
        ia = intArray()
        ib = intArray()
        _mesh.Mesh_GetElementFaces(self, i, ia, ib)
        return ia.ToList(), ib.ToList()



    def FindFaceNeighbors(self, elem):
        r"""FindFaceNeighbors(Mesh self, int const elem) -> intArray"""
        return _mesh.Mesh_FindFaceNeighbors(self, elem)
    FindFaceNeighbors = _swig_new_instance_method(_mesh.Mesh_FindFaceNeighbors)

    def GetBdrElementAdjacentElement(self, bdr_el):
        from mfem.ser import intp
        el = intp()
        info = intp()
        _mesh.Mesh_GetBdrElementAdjacentElement(self, bdr_el, el, info)
        return el.value(), info.value()



    def GetBdrElementAdjacentElement2(self, bdr_el, el, info):
        r"""GetBdrElementAdjacentElement2(Mesh self, int bdr_el, int & el, int & info)"""
        return _mesh.Mesh_GetBdrElementAdjacentElement2(self, bdr_el, el, info)
    GetBdrElementAdjacentElement2 = _swig_new_instance_method(_mesh.Mesh_GetBdrElementAdjacentElement2)

    def GetBdrElementFaceIndex(self, be_idx):
        r"""GetBdrElementFaceIndex(Mesh self, int be_idx) -> int"""
        return _mesh.Mesh_GetBdrElementFaceIndex(self, be_idx)
    GetBdrElementFaceIndex = _swig_new_instance_method(_mesh.Mesh_GetBdrElementFaceIndex)

    def GetBdrFace(self, i):
        r"""GetBdrFace(Mesh self, int i) -> int"""
        return _mesh.Mesh_GetBdrFace(self, i)
    GetBdrFace = _swig_new_instance_method(_mesh.Mesh_GetBdrFace)

    def GetBdrElementEdgeIndex(self, i):
        r"""GetBdrElementEdgeIndex(Mesh self, int i) -> int"""
        return _mesh.Mesh_GetBdrElementEdgeIndex(self, i)
    GetBdrElementEdgeIndex = _swig_new_instance_method(_mesh.Mesh_GetBdrElementEdgeIndex)

    def GetVertexToElementTable(self):
        r"""GetVertexToElementTable(Mesh self) -> Table"""
        return _mesh.Mesh_GetVertexToElementTable(self)
    GetVertexToElementTable = _swig_new_instance_method(_mesh.Mesh_GetVertexToElementTable)

    def GetVertexToBdrElementTable(self):
        r"""GetVertexToBdrElementTable(Mesh self) -> Table"""
        return _mesh.Mesh_GetVertexToBdrElementTable(self)
    GetVertexToBdrElementTable = _swig_new_instance_method(_mesh.Mesh_GetVertexToBdrElementTable)

    def GetFaceToElementTable(self):
        r"""GetFaceToElementTable(Mesh self) -> Table"""
        return _mesh.Mesh_GetFaceToElementTable(self)
    GetFaceToElementTable = _swig_new_instance_method(_mesh.Mesh_GetFaceToElementTable)

    def GetFaceEdgeTable(self):
        r"""GetFaceEdgeTable(Mesh self) -> Table"""
        return _mesh.Mesh_GetFaceEdgeTable(self)
    GetFaceEdgeTable = _swig_new_instance_method(_mesh.Mesh_GetFaceEdgeTable)

    def GetEdgeVertexTable(self):
        r"""GetEdgeVertexTable(Mesh self) -> Table"""
        return _mesh.Mesh_GetEdgeVertexTable(self)
    GetEdgeVertexTable = _swig_new_instance_method(_mesh.Mesh_GetEdgeVertexTable)

    def GetVertexToVertexTable(self, arg2):
        r"""GetVertexToVertexTable(Mesh self, DSTable arg2)"""
        return _mesh.Mesh_GetVertexToVertexTable(self, arg2)
    GetVertexToVertexTable = _swig_new_instance_method(_mesh.Mesh_GetVertexToVertexTable)

    def ElementToElementTable(self):
        r"""ElementToElementTable(Mesh self) -> Table"""
        return _mesh.Mesh_ElementToElementTable(self)
    ElementToElementTable = _swig_new_instance_method(_mesh.Mesh_ElementToElementTable)

    def ElementToFaceTable(self):
        r"""ElementToFaceTable(Mesh self) -> Table"""
        return _mesh.Mesh_ElementToFaceTable(self)
    ElementToFaceTable = _swig_new_instance_method(_mesh.Mesh_ElementToFaceTable)

    def ElementToEdgeTable(self):
        r"""ElementToEdgeTable(Mesh self) -> Table"""
        return _mesh.Mesh_ElementToEdgeTable(self)
    ElementToEdgeTable = _swig_new_instance_method(_mesh.Mesh_ElementToEdgeTable)

    def GetFaceToBdrElMap(self):
        r"""GetFaceToBdrElMap(Mesh self) -> intArray"""
        return _mesh.Mesh_GetFaceToBdrElMap(self)
    GetFaceToBdrElMap = _swig_new_instance_method(_mesh.Mesh_GetFaceToBdrElMap)

    @staticmethod
    def GetTransformationFEforElementType(arg1):
        r"""GetTransformationFEforElementType(mfem::Element::Type arg1) -> FiniteElement"""
        return _mesh.Mesh_GetTransformationFEforElementType(arg1)
    GetTransformationFEforElementType = _swig_new_static_method(_mesh.Mesh_GetTransformationFEforElementType)

    @staticmethod
    def TransformBdrElementToFace(geom, o, ip):
        r"""TransformBdrElementToFace(mfem::Geometry::Type geom, int o, IntegrationPoint ip) -> IntegrationPoint"""
        return _mesh.Mesh_TransformBdrElementToFace(geom, o, ip)
    TransformBdrElementToFace = _swig_new_static_method(_mesh.Mesh_TransformBdrElementToFace)

    def GetTypicalElementTransformation(self):
        r"""GetTypicalElementTransformation(Mesh self) -> ElementTransformation"""
        return _mesh.Mesh_GetTypicalElementTransformation(self)
    GetTypicalElementTransformation = _swig_new_instance_method(_mesh.Mesh_GetTypicalElementTransformation)

    def GetElementTransformation(self, i, Tr=None):
        from mfem.ser import IsoparametricTransformation
        if Tr is None:
           Tr = IsoparametricTransformation()
        _mesh.Mesh_GetElementTransformation(self, i, Tr)
        return Tr



    def GetBdrElementTransformation(self, i, Tr=None):
        from mfem.ser import IsoparametricTransformation
        if Tr is None:
           Tr = IsoparametricTransformation()
        _mesh.Mesh_GetBdrElementTransformation(self, i, Tr)
        return Tr



    def GetFaceTransformation(self, i, Tr=None):
        from mfem.ser import IsoparametricTransformation
        if Tr is None:
           Tr = IsoparametricTransformation()
        _mesh.Mesh_GetFaceTransformation(self, i, Tr)
        return Tr



    def GetLocalFaceTransformation(self, face_type, elem_type, Transf, info):
        r"""GetLocalFaceTransformation(Mesh self, int face_type, int elem_type, IsoparametricTransformation Transf, int info)"""
        return _mesh.Mesh_GetLocalFaceTransformation(self, face_type, elem_type, Transf, info)
    GetLocalFaceTransformation = _swig_new_instance_method(_mesh.Mesh_GetLocalFaceTransformation)

    def GetEdgeTransformation(self, i, Tr=None):
        from mfem.ser import IsoparametricTransformation
        if Tr is None:
           Tr = IsoparametricTransformation()
        _mesh.Mesh_GetEdgeTransformation(self, i, Tr)
        return Tr



    def GetFaceElementTransformations(self, *args):
        r"""
        GetFaceElementTransformations(Mesh self, int FaceNo, int mask=31) -> FaceElementTransformations
        GetFaceElementTransformations(Mesh self, int FaceNo, FaceElementTransformations FElTr, IsoparametricTransformation ElTr1, IsoparametricTransformation ElTr2, int mask=31)
        """
        return _mesh.Mesh_GetFaceElementTransformations(self, *args)
    GetFaceElementTransformations = _swig_new_instance_method(_mesh.Mesh_GetFaceElementTransformations)

    def GetInteriorFaceTransformations(self, *args):
        r"""
        GetInteriorFaceTransformations(Mesh self, int FaceNo) -> FaceElementTransformations
        GetInteriorFaceTransformations(Mesh self, int FaceNo, FaceElementTransformations FElTr, IsoparametricTransformation ElTr1, IsoparametricTransformation ElTr2)
        """
        return _mesh.Mesh_GetInteriorFaceTransformations(self, *args)
    GetInteriorFaceTransformations = _swig_new_instance_method(_mesh.Mesh_GetInteriorFaceTransformations)

    def GetBdrFaceTransformations(self, *args):
        r"""
        GetBdrFaceTransformations(Mesh self, int BdrElemNo) -> FaceElementTransformations
        GetBdrFaceTransformations(Mesh self, int BdrElemNo, FaceElementTransformations FElTr, IsoparametricTransformation ElTr1, IsoparametricTransformation ElTr2)
        """
        return _mesh.Mesh_GetBdrFaceTransformations(self, *args)
    GetBdrFaceTransformations = _swig_new_instance_method(_mesh.Mesh_GetBdrFaceTransformations)

    def GetGeometricFactors(self, *args, **kwargs):
        r"""GetGeometricFactors(Mesh self, IntegrationRule ir, int const flags, mfem::MemoryType d_mt=DEFAULT) -> GeometricFactors"""
        return _mesh.Mesh_GetGeometricFactors(self, *args, **kwargs)
    GetGeometricFactors = _swig_new_instance_method(_mesh.Mesh_GetGeometricFactors)

    def GetFaceGeometricFactors(self, *args, **kwargs):
        r"""GetFaceGeometricFactors(Mesh self, IntegrationRule ir, int const flags, mfem::FaceType type, mfem::MemoryType d_mt=DEFAULT) -> FaceGeometricFactors"""
        return _mesh.Mesh_GetFaceGeometricFactors(self, *args, **kwargs)
    GetFaceGeometricFactors = _swig_new_instance_method(_mesh.Mesh_GetFaceGeometricFactors)

    def DeleteGeometricFactors(self):
        r"""DeleteGeometricFactors(Mesh self)"""
        return _mesh.Mesh_DeleteGeometricFactors(self)
    DeleteGeometricFactors = _swig_new_instance_method(_mesh.Mesh_DeleteGeometricFactors)
    FaceTopology_Boundary = _mesh.Mesh_FaceTopology_Boundary
    
    FaceTopology_Conforming = _mesh.Mesh_FaceTopology_Conforming
    
    FaceTopology_Nonconforming = _mesh.Mesh_FaceTopology_Nonconforming
    
    FaceTopology_NA = _mesh.Mesh_FaceTopology_NA
    
    ElementLocation_Local = _mesh.Mesh_ElementLocation_Local
    
    ElementLocation_FaceNbr = _mesh.Mesh_ElementLocation_FaceNbr
    
    ElementLocation_NA = _mesh.Mesh_ElementLocation_NA
    
    ElementConformity_Coincident = _mesh.Mesh_ElementConformity_Coincident
    
    ElementConformity_Superset = _mesh.Mesh_ElementConformity_Superset
    
    ElementConformity_Subset = _mesh.Mesh_ElementConformity_Subset
    
    ElementConformity_NA = _mesh.Mesh_ElementConformity_NA
    
    FaceInfoTag_Boundary = _mesh.Mesh_FaceInfoTag_Boundary
    
    FaceInfoTag_LocalConforming = _mesh.Mesh_FaceInfoTag_LocalConforming
    
    FaceInfoTag_LocalSlaveNonconforming = _mesh.Mesh_FaceInfoTag_LocalSlaveNonconforming
    
    FaceInfoTag_SharedConforming = _mesh.Mesh_FaceInfoTag_SharedConforming
    
    FaceInfoTag_SharedSlaveNonconforming = _mesh.Mesh_FaceInfoTag_SharedSlaveNonconforming
    
    FaceInfoTag_MasterNonconforming = _mesh.Mesh_FaceInfoTag_MasterNonconforming
    
    FaceInfoTag_GhostSlave = _mesh.Mesh_FaceInfoTag_GhostSlave
    
    FaceInfoTag_GhostMaster = _mesh.Mesh_FaceInfoTag_GhostMaster
    

    @staticmethod
    def DecodeFaceInfoOrientation(info):
        r"""DecodeFaceInfoOrientation(int info) -> int"""
        return _mesh.Mesh_DecodeFaceInfoOrientation(info)
    DecodeFaceInfoOrientation = _swig_new_static_method(_mesh.Mesh_DecodeFaceInfoOrientation)

    @staticmethod
    def DecodeFaceInfoLocalIndex(info):
        r"""DecodeFaceInfoLocalIndex(int info) -> int"""
        return _mesh.Mesh_DecodeFaceInfoLocalIndex(info)
    DecodeFaceInfoLocalIndex = _swig_new_static_method(_mesh.Mesh_DecodeFaceInfoLocalIndex)

    @staticmethod
    def EncodeFaceInfo(local_face_index, orientation):
        r"""EncodeFaceInfo(int local_face_index, int orientation) -> int"""
        return _mesh.Mesh_EncodeFaceInfo(local_face_index, orientation)
    EncodeFaceInfo = _swig_new_static_method(_mesh.Mesh_EncodeFaceInfo)

    def GetPointMatrix(self, i, pointmat):
        r"""GetPointMatrix(Mesh self, int i, DenseMatrix pointmat)"""
        return _mesh.Mesh_GetPointMatrix(self, i, pointmat)
    GetPointMatrix = _swig_new_instance_method(_mesh.Mesh_GetPointMatrix)

    def GetBdrPointMatrix(self, i, pointmat):
        r"""GetBdrPointMatrix(Mesh self, int i, DenseMatrix pointmat)"""
        return _mesh.Mesh_GetBdrPointMatrix(self, i, pointmat)
    GetBdrPointMatrix = _swig_new_instance_method(_mesh.Mesh_GetBdrPointMatrix)

    def GetFaceInformation(self, f):
        r"""GetFaceInformation(Mesh self, int f) -> mfem::Mesh::FaceInformation"""
        return _mesh.Mesh_GetFaceInformation(self, f)
    GetFaceInformation = _swig_new_instance_method(_mesh.Mesh_GetFaceInformation)

    def GetFaceElements(self, Face):
        from mfem.ser import intp
        Elem1 = intp()
        Elem2 = intp()
        val = _mesh.Mesh_GetFaceElements(self, Face, Elem1, Elem2)
        return Elem1.value(), Elem2.value()



    def GetFaceInfos(self, i):
        from mfem.ser import intp
        Elem1 = intp()
        Elem2 = intp()

        if self.Conforming():
            _mesh.Mesh_GetFaceInfos(self, i, Elem1, Elem2)
            return Elem1.value(), Elem2.value()
        else:
            NCFace = intp()
            _mesh.Mesh_GetFaceInfos(self, i, Elem1, Elem2, NCFace)
            return Elem1.value(), Elem2.value(), NCFace.value()



    def GetExteriorFaceMarker(self, face_marker):
        r"""GetExteriorFaceMarker(Mesh self, intArray face_marker)"""
        return _mesh.Mesh_GetExteriorFaceMarker(self, face_marker)
    GetExteriorFaceMarker = _swig_new_instance_method(_mesh.Mesh_GetExteriorFaceMarker)

    def UnmarkInternalBoundaries(self, bdr_marker, excl=True):
        r"""UnmarkInternalBoundaries(Mesh self, intArray bdr_marker, bool excl=True)"""
        return _mesh.Mesh_UnmarkInternalBoundaries(self, bdr_marker, excl)
    UnmarkInternalBoundaries = _swig_new_instance_method(_mesh.Mesh_UnmarkInternalBoundaries)

    def UnmarkNamedBoundaries(self, set_name, bdr_marker):
        r"""UnmarkNamedBoundaries(Mesh self, std::string const & set_name, intArray bdr_marker)"""
        return _mesh.Mesh_UnmarkNamedBoundaries(self, set_name, bdr_marker)
    UnmarkNamedBoundaries = _swig_new_instance_method(_mesh.Mesh_UnmarkNamedBoundaries)

    def MarkExternalBoundaries(self, bdr_marker, excl=True):
        r"""MarkExternalBoundaries(Mesh self, intArray bdr_marker, bool excl=True)"""
        return _mesh.Mesh_MarkExternalBoundaries(self, bdr_marker, excl)
    MarkExternalBoundaries = _swig_new_instance_method(_mesh.Mesh_MarkExternalBoundaries)

    def MarkNamedBoundaries(self, set_name, bdr_marker):
        r"""MarkNamedBoundaries(Mesh self, std::string const & set_name, intArray bdr_marker)"""
        return _mesh.Mesh_MarkNamedBoundaries(self, set_name, bdr_marker)
    MarkNamedBoundaries = _swig_new_instance_method(_mesh.Mesh_MarkNamedBoundaries)

    def CartesianPartitioning(self, nxyz, return_list=False):
        import mfem.ser as mfem
        import warnings
        try:
            nxyz = list(nxyz)
            d = mfem.intArray(nxyz)
            dd = d.GetData()
        except BaseException:
            dd = nxyz
            warnings.warn("CartesianPartitioning argument should be iterable",
                          DeprecationWarning,)
        r = _mesh.Mesh_CartesianPartitioning(self, dd)

        if not return_list:
            return r
        else:
            result = mfem.intArray()
            result.MakeRef(r, self.GetNE())
            result.MakeDataOwner()
            return result.ToList()



    def GeneratePartitioning(self, nparts, part_method=1):
        r"""GeneratePartitioning(Mesh self, int nparts, int part_method=1) -> int *"""
        return _mesh.Mesh_GeneratePartitioning(self, nparts, part_method)
    GeneratePartitioning = _swig_new_instance_method(_mesh.Mesh_GeneratePartitioning)

    def CheckPartitioning(self, partitioning_):
        r"""CheckPartitioning(Mesh self, int * partitioning_)"""
        return _mesh.Mesh_CheckPartitioning(self, partitioning_)
    CheckPartitioning = _swig_new_instance_method(_mesh.Mesh_CheckPartitioning)

    def MoveVertices(self, displacements):
        r"""MoveVertices(Mesh self, Vector displacements)"""
        return _mesh.Mesh_MoveVertices(self, displacements)
    MoveVertices = _swig_new_instance_method(_mesh.Mesh_MoveVertices)

    def GetVertices(self, vert_coord):
        r"""GetVertices(Mesh self, Vector vert_coord)"""
        return _mesh.Mesh_GetVertices(self, vert_coord)
    GetVertices = _swig_new_instance_method(_mesh.Mesh_GetVertices)

    def SetVertices(self, vert_coord):
        r"""SetVertices(Mesh self, Vector vert_coord)"""
        return _mesh.Mesh_SetVertices(self, vert_coord)
    SetVertices = _swig_new_instance_method(_mesh.Mesh_SetVertices)

    def ChangeVertexDataOwnership(self, vertices, len_vertices, zerocopy=False):
        r"""ChangeVertexDataOwnership(Mesh self, mfem::real_t * vertices, int len_vertices, bool zerocopy=False)"""
        return _mesh.Mesh_ChangeVertexDataOwnership(self, vertices, len_vertices, zerocopy)
    ChangeVertexDataOwnership = _swig_new_instance_method(_mesh.Mesh_ChangeVertexDataOwnership)

    def GetNode(self, i, coord):
        r"""GetNode(Mesh self, int i, mfem::real_t * coord)"""
        return _mesh.Mesh_GetNode(self, i, coord)
    GetNode = _swig_new_instance_method(_mesh.Mesh_GetNode)

    def SetNode(self, i, coord):
        r"""SetNode(Mesh self, int i, mfem::real_t const * coord)"""
        return _mesh.Mesh_SetNode(self, i, coord)
    SetNode = _swig_new_instance_method(_mesh.Mesh_SetNode)

    def MoveNodes(self, displacements):
        r"""MoveNodes(Mesh self, Vector displacements)"""
        return _mesh.Mesh_MoveNodes(self, displacements)
    MoveNodes = _swig_new_instance_method(_mesh.Mesh_MoveNodes)

    def SetNodes(self, node_coord):
        r"""SetNodes(Mesh self, Vector node_coord)"""
        return _mesh.Mesh_SetNodes(self, node_coord)
    SetNodes = _swig_new_instance_method(_mesh.Mesh_SetNodes)

    def ScaleSubdomains(self, sf):
        r"""ScaleSubdomains(Mesh self, mfem::real_t sf)"""
        return _mesh.Mesh_ScaleSubdomains(self, sf)
    ScaleSubdomains = _swig_new_instance_method(_mesh.Mesh_ScaleSubdomains)

    def ScaleElements(self, sf):
        r"""ScaleElements(Mesh self, mfem::real_t sf)"""
        return _mesh.Mesh_ScaleElements(self, sf)
    ScaleElements = _swig_new_instance_method(_mesh.Mesh_ScaleElements)

    def Transform(self, *args):
        r"""
        Transform(Mesh self, void (*)(mfem::Vector const &,mfem::Vector &) f)
        Transform(Mesh self, VectorCoefficient deformation)
        """
        return _mesh.Mesh_Transform(self, *args)
    Transform = _swig_new_instance_method(_mesh.Mesh_Transform)

    def NodesUpdated(self):
        r"""NodesUpdated(Mesh self)"""
        return _mesh.Mesh_NodesUpdated(self)
    NodesUpdated = _swig_new_instance_method(_mesh.Mesh_NodesUpdated)

    def OwnsNodes(self):
        r"""OwnsNodes(Mesh self) -> bool"""
        return _mesh.Mesh_OwnsNodes(self)
    OwnsNodes = _swig_new_instance_method(_mesh.Mesh_OwnsNodes)

    def SetNodesOwner(self, nodes_owner):
        r"""SetNodesOwner(Mesh self, bool nodes_owner)"""
        return _mesh.Mesh_SetNodesOwner(self, nodes_owner)
    SetNodesOwner = _swig_new_instance_method(_mesh.Mesh_SetNodesOwner)

    def NewNodes(self, nodes, make_owner=False):
        r"""NewNodes(Mesh self, GridFunction nodes, bool make_owner=False)"""
        return _mesh.Mesh_NewNodes(self, nodes, make_owner)
    NewNodes = _swig_new_instance_method(_mesh.Mesh_NewNodes)

    def SwapNodes(self, nodes, own_nodes_):
        r"""SwapNodes(Mesh self, mfem::GridFunction *& nodes, int & own_nodes_)"""
        return _mesh.Mesh_SwapNodes(self, nodes, own_nodes_)
    SwapNodes = _swig_new_instance_method(_mesh.Mesh_SwapNodes)

    def GetNodes(self, *args):
        r"""
        GetNodes(Mesh self, Vector node_coord)
        GetNodes(Mesh self) -> GridFunction
        GetNodes(Mesh self) -> GridFunction
        GetNodes(Mesh self, GridFunction nodes)
        """
        return _mesh.Mesh_GetNodes(self, *args)
    GetNodes = _swig_new_instance_method(_mesh.Mesh_GetNodes)

    def SetNodalFESpace(self, nfes):
        r"""SetNodalFESpace(Mesh self, FiniteElementSpace nfes)"""
        return _mesh.Mesh_SetNodalFESpace(self, nfes)
    SetNodalFESpace = _swig_new_instance_method(_mesh.Mesh_SetNodalFESpace)

    def SetNodalGridFunction(self, nodes, make_owner=False):
        r"""SetNodalGridFunction(Mesh self, GridFunction nodes, bool make_owner=False)"""
        return _mesh.Mesh_SetNodalGridFunction(self, nodes, make_owner)
    SetNodalGridFunction = _swig_new_instance_method(_mesh.Mesh_SetNodalGridFunction)

    def GetNodalFESpace(self):
        r"""GetNodalFESpace(Mesh self) -> FiniteElementSpace"""
        return _mesh.Mesh_GetNodalFESpace(self)
    GetNodalFESpace = _swig_new_instance_method(_mesh.Mesh_GetNodalFESpace)

    def EnsureNodes(self):
        r"""EnsureNodes(Mesh self)"""
        return _mesh.Mesh_EnsureNodes(self)
    EnsureNodes = _swig_new_instance_method(_mesh.Mesh_EnsureNodes)

    def SetCurvature(self, order, discont=False, space_dim=-1, ordering=1):
        r"""SetCurvature(Mesh self, int order, bool discont=False, int space_dim=-1, int ordering=1)"""
        return _mesh.Mesh_SetCurvature(self, order, discont, space_dim, ordering)
    SetCurvature = _swig_new_instance_method(_mesh.Mesh_SetCurvature)

    def UniformRefinement(self, ref_algo=0):
        r"""UniformRefinement(Mesh self, int ref_algo=0)"""
        return _mesh.Mesh_UniformRefinement(self, ref_algo)
    UniformRefinement = _swig_new_instance_method(_mesh.Mesh_UniformRefinement)

    def NURBSUniformRefinement(self, *args):
        r"""
        NURBSUniformRefinement(Mesh self, int rf=2, mfem::real_t tol=1.0e-12)
        NURBSUniformRefinement(Mesh self, intArray rf, mfem::real_t tol=1.e-12)
        """
        return _mesh.Mesh_NURBSUniformRefinement(self, *args)
    NURBSUniformRefinement = _swig_new_instance_method(_mesh.Mesh_NURBSUniformRefinement)

    def NURBSCoarsening(self, cf=2, tol=1.0e-12):
        r"""NURBSCoarsening(Mesh self, int cf=2, mfem::real_t tol=1.0e-12)"""
        return _mesh.Mesh_NURBSCoarsening(self, cf, tol)
    NURBSCoarsening = _swig_new_instance_method(_mesh.Mesh_NURBSCoarsening)

    def GeneralRefinement(self, *args):
        r"""
        GeneralRefinement(Mesh self, RefinementArray refinements, int nonconforming=-1, int nc_limit=0)
        GeneralRefinement(Mesh self, intArray el_to_refine, int nonconforming=-1, int nc_limit=0)
        """
        return _mesh.Mesh_GeneralRefinement(self, *args)
    GeneralRefinement = _swig_new_instance_method(_mesh.Mesh_GeneralRefinement)

    def RandomRefinement(self, prob, aniso=False, nonconforming=-1, nc_limit=0):
        r"""RandomRefinement(Mesh self, mfem::real_t prob, bool aniso=False, int nonconforming=-1, int nc_limit=0)"""
        return _mesh.Mesh_RandomRefinement(self, prob, aniso, nonconforming, nc_limit)
    RandomRefinement = _swig_new_instance_method(_mesh.Mesh_RandomRefinement)

    def RefineAtVertex(self, vert, eps=0.0, nonconforming=-1):
        r"""RefineAtVertex(Mesh self, Vertex vert, mfem::real_t eps=0.0, int nonconforming=-1)"""
        return _mesh.Mesh_RefineAtVertex(self, vert, eps, nonconforming)
    RefineAtVertex = _swig_new_instance_method(_mesh.Mesh_RefineAtVertex)

    def RefineByError(self, *args):
        r"""
        RefineByError(Mesh self, doubleArray elem_error, mfem::real_t threshold, int nonconforming=-1, int nc_limit=0) -> bool
        RefineByError(Mesh self, Vector elem_error, mfem::real_t threshold, int nonconforming=-1, int nc_limit=0) -> bool
        """
        return _mesh.Mesh_RefineByError(self, *args)
    RefineByError = _swig_new_instance_method(_mesh.Mesh_RefineByError)

    def DerefineByError(self, *args):
        r"""
        DerefineByError(Mesh self, doubleArray elem_error, mfem::real_t threshold, int nc_limit=0, int op=1) -> bool
        DerefineByError(Mesh self, Vector elem_error, mfem::real_t threshold, int nc_limit=0, int op=1) -> bool
        """
        return _mesh.Mesh_DerefineByError(self, *args)
    DerefineByError = _swig_new_instance_method(_mesh.Mesh_DerefineByError)

    def EnsureNCMesh(self, simplices_nonconforming=False):
        r"""EnsureNCMesh(Mesh self, bool simplices_nonconforming=False)"""
        return _mesh.Mesh_EnsureNCMesh(self, simplices_nonconforming)
    EnsureNCMesh = _swig_new_instance_method(_mesh.Mesh_EnsureNCMesh)

    def Conforming(self):
        r"""Conforming(Mesh self) -> bool"""
        return _mesh.Mesh_Conforming(self)
    Conforming = _swig_new_instance_method(_mesh.Mesh_Conforming)

    def Nonconforming(self):
        r"""Nonconforming(Mesh self) -> bool"""
        return _mesh.Mesh_Nonconforming(self)
    Nonconforming = _swig_new_instance_method(_mesh.Mesh_Nonconforming)

    def SetScaledNCMesh(self):
        r"""SetScaledNCMesh(Mesh self)"""
        return _mesh.Mesh_SetScaledNCMesh(self)
    SetScaledNCMesh = _swig_new_instance_method(_mesh.Mesh_SetScaledNCMesh)

    def GetRefinementTransforms(self):
        r"""GetRefinementTransforms(Mesh self) -> CoarseFineTransformations"""
        return _mesh.Mesh_GetRefinementTransforms(self)
    GetRefinementTransforms = _swig_new_instance_method(_mesh.Mesh_GetRefinementTransforms)

    def GetLastOperation(self):
        r"""GetLastOperation(Mesh self) -> mfem::Mesh::Operation"""
        return _mesh.Mesh_GetLastOperation(self)
    GetLastOperation = _swig_new_instance_method(_mesh.Mesh_GetLastOperation)

    def GetSequence(self):
        r"""GetSequence(Mesh self) -> long"""
        return _mesh.Mesh_GetSequence(self)
    GetSequence = _swig_new_instance_method(_mesh.Mesh_GetSequence)

    def GetNodesSequence(self):
        r"""GetNodesSequence(Mesh self) -> long"""
        return _mesh.Mesh_GetNodesSequence(self)
    GetNodesSequence = _swig_new_instance_method(_mesh.Mesh_GetNodesSequence)

    def RefineNURBSFromFile(self, ref_file):
        r"""RefineNURBSFromFile(Mesh self, std::string ref_file)"""
        return _mesh.Mesh_RefineNURBSFromFile(self, ref_file)
    RefineNURBSFromFile = _swig_new_instance_method(_mesh.Mesh_RefineNURBSFromFile)

    def KnotInsert(self, *args):
        r"""
        KnotInsert(Mesh self, mfem::Array< mfem::KnotVector * > & kv)
        KnotInsert(Mesh self, VectorArray kv)
        """
        return _mesh.Mesh_KnotInsert(self, *args)
    KnotInsert = _swig_new_instance_method(_mesh.Mesh_KnotInsert)

    def KnotRemove(self, kv):
        r"""KnotRemove(Mesh self, VectorArray kv)"""
        return _mesh.Mesh_KnotRemove(self, kv)
    KnotRemove = _swig_new_instance_method(_mesh.Mesh_KnotRemove)

    def DegreeElevate(self, rel_degree, degree=16):
        r"""DegreeElevate(Mesh self, int rel_degree, int degree=16)"""
        return _mesh.Mesh_DegreeElevate(self, rel_degree, degree)
    DegreeElevate = _swig_new_instance_method(_mesh.Mesh_DegreeElevate)

    def Save(self, fname, precision=16):
        r"""Save(Mesh self, std::string const & fname, int precision=16)"""
        return _mesh.Mesh_Save(self, fname, precision)
    Save = _swig_new_instance_method(_mesh.Mesh_Save)

    def PrintVTU(self, *args):
        r"""
        PrintVTU(Mesh self, std::ostream & os, int ref=1, mfem::VTKFormat format=ASCII, bool high_order_output=False, int compression_level=0, bool bdr_elements=False)
        PrintVTU(Mesh self, std::string fname, mfem::VTKFormat format=ASCII, bool high_order_output=False, int compression_level=0, bool bdr=False)
        """
        return _mesh.Mesh_PrintVTU(self, *args)
    PrintVTU = _swig_new_instance_method(_mesh.Mesh_PrintVTU)

    def PrintBdrVTU(self, *args, **kwargs):
        r"""PrintBdrVTU(Mesh self, std::string fname, mfem::VTKFormat format=ASCII, bool high_order_output=False, int compression_level=0)"""
        return _mesh.Mesh_PrintBdrVTU(self, *args, **kwargs)
    PrintBdrVTU = _swig_new_instance_method(_mesh.Mesh_PrintBdrVTU)

    def PrintWithPartitioning(self, partitioning, os, elem_attr=0):
        r"""PrintWithPartitioning(Mesh self, int * partitioning, std::ostream & os, int elem_attr=0)"""
        return _mesh.Mesh_PrintWithPartitioning(self, partitioning, os, elem_attr)
    PrintWithPartitioning = _swig_new_instance_method(_mesh.Mesh_PrintWithPartitioning)

    def PrintElementsWithPartitioning(self, partitioning, os, interior_faces=0):
        r"""PrintElementsWithPartitioning(Mesh self, int * partitioning, std::ostream & os, int interior_faces=0)"""
        return _mesh.Mesh_PrintElementsWithPartitioning(self, partitioning, os, interior_faces)
    PrintElementsWithPartitioning = _swig_new_instance_method(_mesh.Mesh_PrintElementsWithPartitioning)

    def PrintSurfaces(self, Aface_face, os):
        r"""PrintSurfaces(Mesh self, Table Aface_face, std::ostream & os)"""
        return _mesh.Mesh_PrintSurfaces(self, Aface_face, os)
    PrintSurfaces = _swig_new_instance_method(_mesh.Mesh_PrintSurfaces)

    @staticmethod
    def PrintElementsByGeometry(dim, num_elems_by_geom, os):
        r"""PrintElementsByGeometry(int dim, intArray num_elems_by_geom, std::ostream & os)"""
        return _mesh.Mesh_PrintElementsByGeometry(dim, num_elems_by_geom, os)
    PrintElementsByGeometry = _swig_new_static_method(_mesh.Mesh_PrintElementsByGeometry)

    def PrintCharacteristics(self, *args, **kwargs):
        r"""PrintCharacteristics(Mesh self, Vector Vh=None, Vector Vk=None, std::ostream & os=out)"""
        return _mesh.Mesh_PrintCharacteristics(self, *args, **kwargs)
    PrintCharacteristics = _swig_new_instance_method(_mesh.Mesh_PrintCharacteristics)

    def CreatePeriodicVertexMapping(self, translations, tol=1e-8):
        r"""CreatePeriodicVertexMapping(Mesh self, vector_Vector translations, mfem::real_t tol=1e-8) -> std::vector< int,std::allocator< int > >"""
        return _mesh.Mesh_CreatePeriodicVertexMapping(self, translations, tol)
    CreatePeriodicVertexMapping = _swig_new_instance_method(_mesh.Mesh_CreatePeriodicVertexMapping)

    def FindPoints(self, pp, warn=True, inv_trans=None):
        r"""count, element_id, integration_points = FindPoints(points, warn=True, inv_trans=None)"""
        import numpy as np
        import mfem.ser as mfem

        pp = np.asarray(pp, dtype=float).transpose()
        M = mfem.DenseMatrix(pp.shape[0], pp.shape[1])
        M.Assign(pp)
        elem_ids = mfem.intArray()
        int_points = mfem.IntegrationPointArray()
        count = _mesh.Mesh_FindPoints(self, M, elem_ids, int_points, warn, inv_trans)
        elem_ids = elem_ids.ToList()
        return count, elem_ids, int_points



    def GetGeometricParametersFromJacobian(self, J, volume, aspr, skew, ori):
        r"""GetGeometricParametersFromJacobian(Mesh self, DenseMatrix J, mfem::real_t & volume, Vector aspr, Vector skew, Vector ori)"""
        return _mesh.Mesh_GetGeometricParametersFromJacobian(self, J, volume, aspr, skew, ori)
    GetGeometricParametersFromJacobian = _swig_new_instance_method(_mesh.Mesh_GetGeometricParametersFromJacobian)

    def ReduceInt(self, value):
        r"""ReduceInt(Mesh self, int value) -> long long"""
        return _mesh.Mesh_ReduceInt(self, value)
    ReduceInt = _swig_new_instance_method(_mesh.Mesh_ReduceInt)

    def GetElementColoring(self, colors, el0=0):
        r"""GetElementColoring(Mesh self, intArray colors, int el0=0)"""
        return _mesh.Mesh_GetElementColoring(self, colors, el0)
    GetElementColoring = _swig_new_instance_method(_mesh.Mesh_GetElementColoring)

    def CheckDisplacements(self, displacements, tmax):
        r"""CheckDisplacements(Mesh self, Vector displacements, mfem::real_t & tmax)"""
        return _mesh.Mesh_CheckDisplacements(self, displacements, tmax)
    CheckDisplacements = _swig_new_instance_method(_mesh.Mesh_CheckDisplacements)

    def __init__(self, *args):
        r"""
        __init__(Mesh self) -> Mesh
        __init__(Mesh self, Mesh mesh, bool copy_nodes=True) -> Mesh
        __init__(Mesh self, Mesh mesh) -> Mesh
        __init__(Mesh self, mfem::real_t * vertices, int num_vertices, int * element_indices, mfem::Geometry::Type element_type, int * element_attributes, int num_elements, int * boundary_indices, mfem::Geometry::Type boundary_type, int * boundary_attributes, int num_boundary_elements, int dimension, int space_dimension=-1) -> Mesh
        __init__(Mesh self, int Dim_, int NVert, int NElem, int NBdrElem=0, int spaceDim_=-1) -> Mesh
        __init__(Mesh self, std::string const & filename, int generate_edges=0, int refine=1, bool fix_orientation=True) -> Mesh
        __init__(Mesh self, std::istream & input, int generate_edges=0, int refine=1, bool fix_orientation=True) -> Mesh
        __init__(Mesh self, mfem::Mesh *[] mesh_array, int num_pieces) -> Mesh
        __init__(Mesh self, mfem::NURBSExtension const & ext) -> Mesh
        __init__(Mesh self, int nx, int ny, int nz, mfem::Element::Type type, bool generate_edges=False, mfem::real_t sx=1.0, mfem::real_t sy=1.0, mfem::real_t sz=1.0, bool sfc_ordering=True) -> Mesh
        __init__(Mesh self, int nx, int ny, mfem::Element::Type type, bool generate_edges=False, mfem::real_t sx=1.0, mfem::real_t sy=1.0, bool sfc_ordering=True) -> Mesh
        __init__(Mesh self, int n, mfem::real_t sx=1.0) -> Mesh
        __init__(Mesh self, Mesh orig_mesh, int ref_factor, int ref_type) -> Mesh
        __init__(Mesh self, int nx, int ny, int nz, char const * type, bool generate_edges=False, double sx=1.0, double sy=1.0, double sz=1.0, bool sfc_ordering=True) -> Mesh
        __init__(Mesh self, int nx, int ny, char const * type, bool generate_edges=False, double sx=1.0, double sy=1.0, bool sfc_ordering=True) -> Mesh
        """
        _mesh.Mesh_swiginit(self, _mesh.new_Mesh(*args))

    @staticmethod
    def MakeMerged(tuple_or_list):
        r"""MakeMerged(PyObject * tuple_or_list) -> PyObject *"""
        return _mesh.Mesh_MakeMerged(tuple_or_list)
    MakeMerged = _swig_new_static_method(_mesh.Mesh_MakeMerged)

    def PrintToFile(self, mesh_file, precision):
        r"""PrintToFile(Mesh self, char const * mesh_file, int const precision)"""
        return _mesh.Mesh_PrintToFile(self, mesh_file, precision)
    PrintToFile = _swig_new_instance_method(_mesh.Mesh_PrintToFile)

    def WriteToStream(self, StringIO):
        r"""WriteToStream(Mesh self, PyObject * StringIO) -> PyObject *"""
        return _mesh.Mesh_WriteToStream(self, StringIO)
    WriteToStream = _swig_new_instance_method(_mesh.Mesh_WriteToStream)

    def GetAttributeArray(self):
        r"""GetAttributeArray(Mesh self) -> PyObject *"""
        return _mesh.Mesh_GetAttributeArray(self)
    GetAttributeArray = _swig_new_instance_method(_mesh.Mesh_GetAttributeArray)

    def GetVertexArray(self, *args):
        r"""
        GetVertexArray(Mesh self, int i) -> PyObject
        GetVertexArray(Mesh self) -> PyObject *
        """
        return _mesh.Mesh_GetVertexArray(self, *args)
    GetVertexArray = _swig_new_instance_method(_mesh.Mesh_GetVertexArray)

    def GetBdrElementFace(self, *args):
        r"""
        GetBdrElementFace(Mesh self, int i, int * f, int * o)
        GetBdrElementFace(Mesh self, int i) -> PyObject *
        """
        return _mesh.Mesh_GetBdrElementFace(self, *args)
    GetBdrElementFace = _swig_new_instance_method(_mesh.Mesh_GetBdrElementFace)

    def GetBdrAttributeArray(self):
        r"""GetBdrAttributeArray(Mesh self) -> PyObject *"""
        return _mesh.Mesh_GetBdrAttributeArray(self)
    GetBdrAttributeArray = _swig_new_instance_method(_mesh.Mesh_GetBdrAttributeArray)

    def GetBdrArray(self, idx):
        r"""GetBdrArray(Mesh self, int idx) -> PyObject *"""
        return _mesh.Mesh_GetBdrArray(self, idx)
    GetBdrArray = _swig_new_instance_method(_mesh.Mesh_GetBdrArray)

    def GetDomainArray(self, idx):
        r"""GetDomainArray(Mesh self, int idx) -> PyObject *"""
        return _mesh.Mesh_GetDomainArray(self, idx)
    GetDomainArray = _swig_new_instance_method(_mesh.Mesh_GetDomainArray)

    def GetElementCenterArray(self, idx):
        r"""GetElementCenterArray(Mesh self, int idx) -> PyObject *"""
        return _mesh.Mesh_GetElementCenterArray(self, idx)
    GetElementCenterArray = _swig_new_instance_method(_mesh.Mesh_GetElementCenterArray)

    def GetScaledJacobian(self, i, sd=2):
        r"""GetScaledJacobian(Mesh self, int i, int sd=2) -> double"""
        return _mesh.Mesh_GetScaledJacobian(self, i, sd)
    GetScaledJacobian = _swig_new_instance_method(_mesh.Mesh_GetScaledJacobian)

    def IsElementOnPlaneArray(self, aa, bb, cc, dd):
        r"""IsElementOnPlaneArray(Mesh self, PyObject * aa, PyObject * bb, PyObject * cc, PyObject * dd) -> PyObject *"""
        return _mesh.Mesh_IsElementOnPlaneArray(self, aa, bb, cc, dd)
    IsElementOnPlaneArray = _swig_new_instance_method(_mesh.Mesh_IsElementOnPlaneArray)

    def PrintInfo(self, *args):
        r"""
        PrintInfo(Mesh self, std::ostream & os=out)
        PrintInfo(Mesh self, char const * file, int precision=16)
        """
        return _mesh.Mesh_PrintInfo(self, *args)
    PrintInfo = _swig_new_instance_method(_mesh.Mesh_PrintInfo)

    def PrintInfoGZ(self, file, precision=16):
        r"""PrintInfoGZ(Mesh self, char const * file, int precision=16)"""
        return _mesh.Mesh_PrintInfoGZ(self, file, precision)
    PrintInfoGZ = _swig_new_instance_method(_mesh.Mesh_PrintInfoGZ)

    def Print(self, *args):
        r"""
        Print(Mesh self, std::ostream & os=out, std::string const & comments="")
        Print(Mesh self, char const * file, int precision=16)
        """
        return _mesh.Mesh_Print(self, *args)
    Print = _swig_new_instance_method(_mesh.Mesh_Print)

    def PrintGZ(self, file, precision=16):
        r"""PrintGZ(Mesh self, char const * file, int precision=16)"""
        return _mesh.Mesh_PrintGZ(self, file, precision)
    PrintGZ = _swig_new_instance_method(_mesh.Mesh_PrintGZ)

    def PrintXG(self, *args):
        r"""
        PrintXG(Mesh self, std::ostream & os=out)
        PrintXG(Mesh self, char const * file, int precision=16)
        """
        return _mesh.Mesh_PrintXG(self, *args)
    PrintXG = _swig_new_instance_method(_mesh.Mesh_PrintXG)

    def PrintXGGZ(self, file, precision=16):
        r"""PrintXGGZ(Mesh self, char const * file, int precision=16)"""
        return _mesh.Mesh_PrintXGGZ(self, file, precision)
    PrintXGGZ = _swig_new_instance_method(_mesh.Mesh_PrintXGGZ)

    def PrintVTK(self, *args):
        r"""
        PrintVTK(Mesh self, std::ostream & os)
        PrintVTK(Mesh self, std::ostream & os, int ref, int field_data=0)
        PrintVTK(Mesh self, char const * file, int precision=16)
        """
        return _mesh.Mesh_PrintVTK(self, *args)
    PrintVTK = _swig_new_instance_method(_mesh.Mesh_PrintVTK)

    def PrintVTKGZ(self, file, precision=16):
        r"""PrintVTKGZ(Mesh self, char const * file, int precision=16)"""
        return _mesh.Mesh_PrintVTKGZ(self, file, precision)
    PrintVTKGZ = _swig_new_instance_method(_mesh.Mesh_PrintVTKGZ)

# Register Mesh in _mesh:
_mesh.Mesh_swigregister(Mesh)
cvar = _mesh.cvar


def __lshift__(*args):
    r"""
    __lshift__(std::ostream & os, SparseMatrix mat) -> std::ostream
    __lshift__(std::ostream & out, GridFunction sol) -> std::ostream
    __lshift__(std::ostream & out, mfem::QuadratureFunction const & qf) -> std::ostream
    __lshift__(std::ostream & os, Mesh mesh) -> std::ostream
    __lshift__(std::ostream & os, mfem::Mesh::FaceInformation const & info) -> std::ostream &
    """
    return _mesh.__lshift__(*args)
__lshift__ = _mesh.__lshift__
class MeshPart(object):
    r"""Proxy of C++ mfem::MeshPart class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dimension = property(_mesh.MeshPart_dimension_get, _mesh.MeshPart_dimension_set, doc=r"""dimension : int""")
    space_dimension = property(_mesh.MeshPart_space_dimension_get, _mesh.MeshPart_space_dimension_set, doc=r"""space_dimension : int""")
    num_vertices = property(_mesh.MeshPart_num_vertices_get, _mesh.MeshPart_num_vertices_set, doc=r"""num_vertices : int""")
    num_elements = property(_mesh.MeshPart_num_elements_get, _mesh.MeshPart_num_elements_set, doc=r"""num_elements : int""")
    num_bdr_elements = property(_mesh.MeshPart_num_bdr_elements_get, _mesh.MeshPart_num_bdr_elements_set, doc=r"""num_bdr_elements : int""")
    entity_to_vertex = property(_mesh.MeshPart_entity_to_vertex_get, _mesh.MeshPart_entity_to_vertex_set, doc=r"""entity_to_vertex : a(mfem::Geometry::NumGeom).mfem::Array<(int)>""")
    tet_refine_flags = property(_mesh.MeshPart_tet_refine_flags_get, _mesh.MeshPart_tet_refine_flags_set, doc=r"""tet_refine_flags : mfem::Array<(int)>""")
    element_map = property(_mesh.MeshPart_element_map_get, _mesh.MeshPart_element_map_set, doc=r"""element_map : mfem::Array<(int)>""")
    boundary_map = property(_mesh.MeshPart_boundary_map_get, _mesh.MeshPart_boundary_map_set, doc=r"""boundary_map : mfem::Array<(int)>""")
    attributes = property(_mesh.MeshPart_attributes_get, doc=r"""attributes : mfem::Array<(int)>""")
    bdr_attributes = property(_mesh.MeshPart_bdr_attributes_get, doc=r"""bdr_attributes : mfem::Array<(int)>""")
    vertex_coordinates = property(_mesh.MeshPart_vertex_coordinates_get, _mesh.MeshPart_vertex_coordinates_set, doc=r"""vertex_coordinates : mfem::Array<(mfem::real_t)>""")
    mesh = property(_mesh.MeshPart_mesh_get, doc=r"""mesh : std::unique_ptr<(mfem::Mesh)>""")
    nodal_fes = property(_mesh.MeshPart_nodal_fes_get, doc=r"""nodal_fes : std::unique_ptr<(mfem::FiniteElementSpace)>""")
    nodes = property(_mesh.MeshPart_nodes_get, doc=r"""nodes : std::unique_ptr<(mfem::GridFunction)>""")
    num_parts = property(_mesh.MeshPart_num_parts_get, _mesh.MeshPart_num_parts_set, doc=r"""num_parts : int""")
    my_part_id = property(_mesh.MeshPart_my_part_id_get, _mesh.MeshPart_my_part_id_set, doc=r"""my_part_id : int""")
    my_groups = property(_mesh.MeshPart_my_groups_get, _mesh.MeshPart_my_groups_set, doc=r"""my_groups : mfem::Table""")
    group_shared_entity_to_vertex = property(_mesh.MeshPart_group_shared_entity_to_vertex_get, _mesh.MeshPart_group_shared_entity_to_vertex_set, doc=r"""group_shared_entity_to_vertex : a(mfem::Geometry::NumGeom).mfem::Table""")

    def Print(self, os):
        r"""Print(MeshPart self, std::ostream & os)"""
        return _mesh.MeshPart_Print(self, os)
    Print = _swig_new_instance_method(_mesh.MeshPart_Print)

    def GetMesh(self):
        r"""GetMesh(MeshPart self) -> Mesh"""
        return _mesh.MeshPart_GetMesh(self)
    GetMesh = _swig_new_instance_method(_mesh.MeshPart_GetMesh)

    def __init__(self):
        r"""__init__(MeshPart self) -> MeshPart"""
        _mesh.MeshPart_swiginit(self, _mesh.new_MeshPart())
    __swig_destroy__ = _mesh.delete_MeshPart

# Register MeshPart in _mesh:
_mesh.MeshPart_swigregister(MeshPart)
class MeshPartitioner(object):
    r"""Proxy of C++ mfem::MeshPartitioner class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesh_, num_parts_, partitioning_=None, part_method=1):
        r"""__init__(MeshPartitioner self, Mesh mesh_, int num_parts_, int const * partitioning_=None, int part_method=1) -> MeshPartitioner"""
        _mesh.MeshPartitioner_swiginit(self, _mesh.new_MeshPartitioner(mesh_, num_parts_, partitioning_, part_method))

    def ExtractPart(self, part_id, mesh_part):
        r"""ExtractPart(MeshPartitioner self, int part_id, MeshPart mesh_part)"""
        return _mesh.MeshPartitioner_ExtractPart(self, part_id, mesh_part)
    ExtractPart = _swig_new_instance_method(_mesh.MeshPartitioner_ExtractPart)

    def ExtractFESpace(self, mesh_part, global_fespace):
        r"""ExtractFESpace(MeshPartitioner self, MeshPart mesh_part, FiniteElementSpace global_fespace) -> std::unique_ptr< mfem::FiniteElementSpace >"""
        return _mesh.MeshPartitioner_ExtractFESpace(self, mesh_part, global_fespace)
    ExtractFESpace = _swig_new_instance_method(_mesh.MeshPartitioner_ExtractFESpace)

    def ExtractGridFunction(self, mesh_part, global_gf, local_fespace):
        r"""ExtractGridFunction(MeshPartitioner self, MeshPart mesh_part, GridFunction global_gf, FiniteElementSpace local_fespace) -> std::unique_ptr< mfem::GridFunction >"""
        return _mesh.MeshPartitioner_ExtractGridFunction(self, mesh_part, global_gf, local_fespace)
    ExtractGridFunction = _swig_new_instance_method(_mesh.MeshPartitioner_ExtractGridFunction)
    __swig_destroy__ = _mesh.delete_MeshPartitioner

# Register MeshPartitioner in _mesh:
_mesh.MeshPartitioner_swigregister(MeshPartitioner)
class GeometricFactors(object):
    r"""Proxy of C++ mfem::GeometricFactors class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mesh = property(_mesh.GeometricFactors_mesh_get, _mesh.GeometricFactors_mesh_set, doc=r"""mesh : p.q(const).mfem::Mesh""")
    IntRule = property(_mesh.GeometricFactors_IntRule_get, _mesh.GeometricFactors_IntRule_set, doc=r"""IntRule : p.q(const).mfem::IntegrationRule""")
    computed_factors = property(_mesh.GeometricFactors_computed_factors_get, _mesh.GeometricFactors_computed_factors_set, doc=r"""computed_factors : int""")
    COORDINATES = _mesh.GeometricFactors_COORDINATES
    
    JACOBIANS = _mesh.GeometricFactors_JACOBIANS
    
    DETERMINANTS = _mesh.GeometricFactors_DETERMINANTS
    

    def __init__(self, *args):
        r"""
        __init__(GeometricFactors self, Mesh mesh, IntegrationRule ir, int flags, mfem::MemoryType d_mt=DEFAULT) -> GeometricFactors
        __init__(GeometricFactors self, GridFunction nodes, IntegrationRule ir, int flags, mfem::MemoryType d_mt=DEFAULT) -> GeometricFactors
        """
        _mesh.GeometricFactors_swiginit(self, _mesh.new_GeometricFactors(*args))
    X = property(_mesh.GeometricFactors_X_get, _mesh.GeometricFactors_X_set, doc=r"""X : mfem::Vector""")
    J = property(_mesh.GeometricFactors_J_get, _mesh.GeometricFactors_J_set, doc=r"""J : mfem::Vector""")
    detJ = property(_mesh.GeometricFactors_detJ_get, _mesh.GeometricFactors_detJ_set, doc=r"""detJ : mfem::Vector""")
    __swig_destroy__ = _mesh.delete_GeometricFactors

# Register GeometricFactors in _mesh:
_mesh.GeometricFactors_swigregister(GeometricFactors)
class FaceGeometricFactors(object):
    r"""Proxy of C++ mfem::FaceGeometricFactors class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mesh = property(_mesh.FaceGeometricFactors_mesh_get, _mesh.FaceGeometricFactors_mesh_set, doc=r"""mesh : p.q(const).mfem::Mesh""")
    IntRule = property(_mesh.FaceGeometricFactors_IntRule_get, _mesh.FaceGeometricFactors_IntRule_set, doc=r"""IntRule : p.q(const).mfem::IntegrationRule""")
    computed_factors = property(_mesh.FaceGeometricFactors_computed_factors_get, _mesh.FaceGeometricFactors_computed_factors_set, doc=r"""computed_factors : int""")
    type = property(_mesh.FaceGeometricFactors_type_get, _mesh.FaceGeometricFactors_type_set, doc=r"""type : mfem::FaceType""")
    COORDINATES = _mesh.FaceGeometricFactors_COORDINATES
    
    JACOBIANS = _mesh.FaceGeometricFactors_JACOBIANS
    
    DETERMINANTS = _mesh.FaceGeometricFactors_DETERMINANTS
    
    NORMALS = _mesh.FaceGeometricFactors_NORMALS
    

    def __init__(self, *args, **kwargs):
        r"""__init__(FaceGeometricFactors self, Mesh mesh, IntegrationRule ir, int flags, mfem::FaceType type, mfem::MemoryType d_mt=DEFAULT) -> FaceGeometricFactors"""
        _mesh.FaceGeometricFactors_swiginit(self, _mesh.new_FaceGeometricFactors(*args, **kwargs))
    X = property(_mesh.FaceGeometricFactors_X_get, _mesh.FaceGeometricFactors_X_set, doc=r"""X : mfem::Vector""")
    J = property(_mesh.FaceGeometricFactors_J_get, _mesh.FaceGeometricFactors_J_set, doc=r"""J : mfem::Vector""")
    detJ = property(_mesh.FaceGeometricFactors_detJ_get, _mesh.FaceGeometricFactors_detJ_set, doc=r"""detJ : mfem::Vector""")
    normal = property(_mesh.FaceGeometricFactors_normal_get, _mesh.FaceGeometricFactors_normal_set, doc=r"""normal : mfem::Vector""")
    __swig_destroy__ = _mesh.delete_FaceGeometricFactors

# Register FaceGeometricFactors in _mesh:
_mesh.FaceGeometricFactors_swigregister(FaceGeometricFactors)
class NodeExtrudeCoefficient(mfem._ser.coefficient.VectorCoefficient):
    r"""Proxy of C++ mfem::NodeExtrudeCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dim, n_, s_):
        r"""__init__(NodeExtrudeCoefficient self, int const dim, int const n_, mfem::real_t const s_) -> NodeExtrudeCoefficient"""
        _mesh.NodeExtrudeCoefficient_swiginit(self, _mesh.new_NodeExtrudeCoefficient(dim, n_, s_))

    def SetLayer(self, l):
        r"""SetLayer(NodeExtrudeCoefficient self, int const l)"""
        return _mesh.NodeExtrudeCoefficient_SetLayer(self, l)
    SetLayer = _swig_new_instance_method(_mesh.NodeExtrudeCoefficient_SetLayer)

    def Eval(self, *args):
        r"""
        Eval(NodeExtrudeCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        Eval(NodeExtrudeCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        """
        return _mesh.NodeExtrudeCoefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_mesh.NodeExtrudeCoefficient_Eval)
    __swig_destroy__ = _mesh.delete_NodeExtrudeCoefficient

# Register NodeExtrudeCoefficient in _mesh:
_mesh.NodeExtrudeCoefficient_swigregister(NodeExtrudeCoefficient)

def Extrude1D(mesh, ny, sy, closed=False):
    r"""Extrude1D(Mesh mesh, int const ny, mfem::real_t const sy, bool const closed=False) -> Mesh"""
    return _mesh.Extrude1D(mesh, ny, sy, closed)
Extrude1D = _mesh.Extrude1D

def Extrude2D(mesh, nz, sz):
    r"""Extrude2D(Mesh mesh, int const nz, mfem::real_t const sz) -> Mesh"""
    return _mesh.Extrude2D(mesh, nz, sz)
Extrude2D = _mesh.Extrude2D

def ShiftRight(a, b, c):
    r"""ShiftRight(int & a, int & b, int & c)"""
    return _mesh.ShiftRight(a, b, c)
ShiftRight = _mesh.ShiftRight

