# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _complexstaticcond
else:
    import _complexstaticcond

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _complexstaticcond.SWIG_PyInstanceMethod_New
_swig_new_static_method = _complexstaticcond.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._ser.element
import mfem._ser.globals
import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.densemat
import mfem._ser.vector
import mfem._ser.operators
import mfem._ser.matrix
import mfem._ser.geom
import mfem._ser.intrules
import mfem._ser.table
import mfem._ser.hash
import mfem._ser.gridfunc
import mfem._ser.coefficient
import mfem._ser.symmat
import mfem._ser.sparsemat
import mfem._ser.eltrans
import mfem._ser.fe
import mfem._ser.fe_base
import mfem._ser.doftrans
import mfem._ser.fe_fixed_order
import mfem._ser.fe_h1
import mfem._ser.fe_nd
import mfem._ser.fe_rt
import mfem._ser.fe_l2
import mfem._ser.fe_nurbs
import mfem._ser.fe_pos
import mfem._ser.fe_ser
import mfem._ser.mesh
import mfem._ser.attribute_sets
import mfem._ser.arrays_by_name
import mfem._ser.sort_pairs
import mfem._ser.ncmesh
import mfem._ser.vertex
import mfem._ser.vtk
import mfem._ser.std_vectors
import mfem._ser.fespace
import mfem._ser.fe_coll
import mfem._ser.lininteg
import mfem._ser.handle
import mfem._ser.restriction
import mfem._ser.bilininteg
import mfem._ser.linearform
import mfem._ser.nonlininteg
import mfem._ser.integrator
import mfem._ser.bounds
import mfem._ser.solvers
import mfem._ser.blockmatrix
import mfem._ser.complex_densemat
import mfem._ser.complex_operator
class ComplexBlockStaticCondensation(object):
    r"""Proxy of C++ mfem::ComplexBlockStaticCondensation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fes_):
        r"""__init__(ComplexBlockStaticCondensation self, FiniteElementSpaceArray fes_) -> ComplexBlockStaticCondensation"""
        _complexstaticcond.ComplexBlockStaticCondensation_swiginit(self, _complexstaticcond.new_ComplexBlockStaticCondensation(fes_))
    __swig_destroy__ = _complexstaticcond.delete_ComplexBlockStaticCondensation

    def AssembleReducedSystem(self, el, elmat, elvect_r, elvect_i):
        r"""AssembleReducedSystem(ComplexBlockStaticCondensation self, int el, ComplexDenseMatrix elmat, Vector elvect_r, Vector elvect_i)"""
        return _complexstaticcond.ComplexBlockStaticCondensation_AssembleReducedSystem(self, el, elmat, elvect_r, elvect_i)
    AssembleReducedSystem = _swig_new_instance_method(_complexstaticcond.ComplexBlockStaticCondensation_AssembleReducedSystem)

    def Finalize(self, skip_zeros=0):
        r"""Finalize(ComplexBlockStaticCondensation self, int skip_zeros=0)"""
        return _complexstaticcond.ComplexBlockStaticCondensation_Finalize(self, skip_zeros)
    Finalize = _swig_new_instance_method(_complexstaticcond.ComplexBlockStaticCondensation_Finalize)

    def SetEssentialTrueDofs(self, ess_tdof_list):
        r"""SetEssentialTrueDofs(ComplexBlockStaticCondensation self, intArray ess_tdof_list)"""
        return _complexstaticcond.ComplexBlockStaticCondensation_SetEssentialTrueDofs(self, ess_tdof_list)
    SetEssentialTrueDofs = _swig_new_instance_method(_complexstaticcond.ComplexBlockStaticCondensation_SetEssentialTrueDofs)

    def EliminateReducedTrueDofs(self, ess_rtdof_list, dpolicy):
        r"""EliminateReducedTrueDofs(ComplexBlockStaticCondensation self, intArray ess_rtdof_list, mfem::Matrix::DiagonalPolicy dpolicy)"""
        return _complexstaticcond.ComplexBlockStaticCondensation_EliminateReducedTrueDofs(self, ess_rtdof_list, dpolicy)
    EliminateReducedTrueDofs = _swig_new_instance_method(_complexstaticcond.ComplexBlockStaticCondensation_EliminateReducedTrueDofs)

    def HasEliminatedBC(self):
        r"""HasEliminatedBC(ComplexBlockStaticCondensation self) -> bool"""
        return _complexstaticcond.ComplexBlockStaticCondensation_HasEliminatedBC(self)
    HasEliminatedBC = _swig_new_instance_method(_complexstaticcond.ComplexBlockStaticCondensation_HasEliminatedBC)

    def GetSchurMatrix_r(self):
        r"""GetSchurMatrix_r(ComplexBlockStaticCondensation self) -> BlockMatrix"""
        return _complexstaticcond.ComplexBlockStaticCondensation_GetSchurMatrix_r(self)
    GetSchurMatrix_r = _swig_new_instance_method(_complexstaticcond.ComplexBlockStaticCondensation_GetSchurMatrix_r)

    def GetSchurMatrix_i(self):
        r"""GetSchurMatrix_i(ComplexBlockStaticCondensation self) -> BlockMatrix"""
        return _complexstaticcond.ComplexBlockStaticCondensation_GetSchurMatrix_i(self)
    GetSchurMatrix_i = _swig_new_instance_method(_complexstaticcond.ComplexBlockStaticCondensation_GetSchurMatrix_i)

    def GetSchurComplexOperator(self):
        r"""GetSchurComplexOperator(ComplexBlockStaticCondensation self) -> ComplexOperator"""
        return _complexstaticcond.ComplexBlockStaticCondensation_GetSchurComplexOperator(self)
    GetSchurComplexOperator = _swig_new_instance_method(_complexstaticcond.ComplexBlockStaticCondensation_GetSchurComplexOperator)

    def GetSchurMatrixElim_r(self):
        r"""GetSchurMatrixElim_r(ComplexBlockStaticCondensation self) -> BlockMatrix"""
        return _complexstaticcond.ComplexBlockStaticCondensation_GetSchurMatrixElim_r(self)
    GetSchurMatrixElim_r = _swig_new_instance_method(_complexstaticcond.ComplexBlockStaticCondensation_GetSchurMatrixElim_r)

    def GetSchurMatrixElim_i(self):
        r"""GetSchurMatrixElim_i(ComplexBlockStaticCondensation self) -> BlockMatrix"""
        return _complexstaticcond.ComplexBlockStaticCondensation_GetSchurMatrixElim_i(self)
    GetSchurMatrixElim_i = _swig_new_instance_method(_complexstaticcond.ComplexBlockStaticCondensation_GetSchurMatrixElim_i)

    def FormSystemMatrix(self, diag_policy):
        r"""FormSystemMatrix(ComplexBlockStaticCondensation self, mfem::Operator::DiagonalPolicy diag_policy)"""
        return _complexstaticcond.ComplexBlockStaticCondensation_FormSystemMatrix(self, diag_policy)
    FormSystemMatrix = _swig_new_instance_method(_complexstaticcond.ComplexBlockStaticCondensation_FormSystemMatrix)

    def ReduceSolution(self, sol, sc_sol):
        r"""ReduceSolution(ComplexBlockStaticCondensation self, Vector sol, Vector sc_sol)"""
        return _complexstaticcond.ComplexBlockStaticCondensation_ReduceSolution(self, sol, sc_sol)
    ReduceSolution = _swig_new_instance_method(_complexstaticcond.ComplexBlockStaticCondensation_ReduceSolution)

    def ReduceSystem(self, x, X, B, copy_interior=0):
        r"""ReduceSystem(ComplexBlockStaticCondensation self, Vector x, Vector X, Vector B, int copy_interior=0)"""
        return _complexstaticcond.ComplexBlockStaticCondensation_ReduceSystem(self, x, X, B, copy_interior)
    ReduceSystem = _swig_new_instance_method(_complexstaticcond.ComplexBlockStaticCondensation_ReduceSystem)

    def ConvertListToReducedTrueDofs(self, ess_tdof_list, ess_rtdof_list):
        r"""ConvertListToReducedTrueDofs(ComplexBlockStaticCondensation self, intArray ess_tdof_list, intArray ess_rtdof_list)"""
        return _complexstaticcond.ComplexBlockStaticCondensation_ConvertListToReducedTrueDofs(self, ess_tdof_list, ess_rtdof_list)
    ConvertListToReducedTrueDofs = _swig_new_instance_method(_complexstaticcond.ComplexBlockStaticCondensation_ConvertListToReducedTrueDofs)

    def ComputeSolution(self, sc_sol, sol):
        r"""ComputeSolution(ComplexBlockStaticCondensation self, Vector sc_sol, Vector sol)"""
        return _complexstaticcond.ComplexBlockStaticCondensation_ComputeSolution(self, sc_sol, sol)
    ComputeSolution = _swig_new_instance_method(_complexstaticcond.ComplexBlockStaticCondensation_ComputeSolution)

# Register ComplexBlockStaticCondensation in _complexstaticcond:
_complexstaticcond.ComplexBlockStaticCondensation_swigregister(ComplexBlockStaticCondensation)

