# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _vtk
else:
    import _vtk

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _vtk.SWIG_PyInstanceMethod_New
_swig_new_static_method = _vtk.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._ser.element
import mfem._ser.globals
import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.densemat
import mfem._ser.vector
import mfem._ser.operators
import mfem._ser.matrix
import mfem._ser.geom
import mfem._ser.intrules
import mfem._ser.table
import mfem._ser.hash
class VTKGeometry(object):
    r"""Proxy of C++ mfem::VTKGeometry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    POINT = _vtk.VTKGeometry_POINT
    
    SEGMENT = _vtk.VTKGeometry_SEGMENT
    
    TRIANGLE = _vtk.VTKGeometry_TRIANGLE
    
    SQUARE = _vtk.VTKGeometry_SQUARE
    
    TETRAHEDRON = _vtk.VTKGeometry_TETRAHEDRON
    
    CUBE = _vtk.VTKGeometry_CUBE
    
    PRISM = _vtk.VTKGeometry_PRISM
    
    PYRAMID = _vtk.VTKGeometry_PYRAMID
    
    QUADRATIC_SEGMENT = _vtk.VTKGeometry_QUADRATIC_SEGMENT
    
    QUADRATIC_TRIANGLE = _vtk.VTKGeometry_QUADRATIC_TRIANGLE
    
    BIQUADRATIC_SQUARE = _vtk.VTKGeometry_BIQUADRATIC_SQUARE
    
    QUADRATIC_TETRAHEDRON = _vtk.VTKGeometry_QUADRATIC_TETRAHEDRON
    
    TRIQUADRATIC_CUBE = _vtk.VTKGeometry_TRIQUADRATIC_CUBE
    
    QUADRATIC_PRISM = _vtk.VTKGeometry_QUADRATIC_PRISM
    
    BIQUADRATIC_QUADRATIC_PRISM = _vtk.VTKGeometry_BIQUADRATIC_QUADRATIC_PRISM
    
    QUADRATIC_PYRAMID = _vtk.VTKGeometry_QUADRATIC_PYRAMID
    
    LAGRANGE_SEGMENT = _vtk.VTKGeometry_LAGRANGE_SEGMENT
    
    LAGRANGE_TRIANGLE = _vtk.VTKGeometry_LAGRANGE_TRIANGLE
    
    LAGRANGE_SQUARE = _vtk.VTKGeometry_LAGRANGE_SQUARE
    
    LAGRANGE_TETRAHEDRON = _vtk.VTKGeometry_LAGRANGE_TETRAHEDRON
    
    LAGRANGE_CUBE = _vtk.VTKGeometry_LAGRANGE_CUBE
    
    LAGRANGE_PRISM = _vtk.VTKGeometry_LAGRANGE_PRISM
    
    LAGRANGE_PYRAMID = _vtk.VTKGeometry_LAGRANGE_PYRAMID
    
    VertexPermutation = property(_vtk.VTKGeometry_VertexPermutation_get, _vtk.VTKGeometry_VertexPermutation_set, doc=r"""VertexPermutation : a(mfem::Geometry::NUM_GEOMETRIES).p.q(const).int""")

    @staticmethod
    def GetMFEMGeometry(vtk_geom):
        r"""GetMFEMGeometry(int vtk_geom) -> mfem::Geometry::Type"""
        return _vtk.VTKGeometry_GetMFEMGeometry(vtk_geom)
    GetMFEMGeometry = _swig_new_static_method(_vtk.VTKGeometry_GetMFEMGeometry)

    @staticmethod
    def IsLagrange(vtk_geom):
        r"""IsLagrange(int vtk_geom) -> bool"""
        return _vtk.VTKGeometry_IsLagrange(vtk_geom)
    IsLagrange = _swig_new_static_method(_vtk.VTKGeometry_IsLagrange)

    @staticmethod
    def IsQuadratic(vtk_geom):
        r"""IsQuadratic(int vtk_geom) -> bool"""
        return _vtk.VTKGeometry_IsQuadratic(vtk_geom)
    IsQuadratic = _swig_new_static_method(_vtk.VTKGeometry_IsQuadratic)

    @staticmethod
    def GetOrder(vtk_geom, npoints):
        r"""GetOrder(int vtk_geom, int npoints) -> int"""
        return _vtk.VTKGeometry_GetOrder(vtk_geom, npoints)
    GetOrder = _swig_new_static_method(_vtk.VTKGeometry_GetOrder)

    def __init__(self):
        r"""__init__(VTKGeometry self) -> VTKGeometry"""
        _vtk.VTKGeometry_swiginit(self, _vtk.new_VTKGeometry())
    __swig_destroy__ = _vtk.delete_VTKGeometry

# Register VTKGeometry in _vtk:
_vtk.VTKGeometry_swigregister(VTKGeometry)
cvar = _vtk.cvar
VTKGeometry.PrismMap = _vtk.cvar.VTKGeometry_PrismMap
VTKGeometry.Map = _vtk.cvar.VTKGeometry_Map
VTKGeometry.QuadraticMap = _vtk.cvar.VTKGeometry_QuadraticMap
VTKGeometry.HighOrderMap = _vtk.cvar.VTKGeometry_HighOrderMap

VTKFormat_ASCII = _vtk.VTKFormat_ASCII

VTKFormat_BINARY = _vtk.VTKFormat_BINARY

VTKFormat_BINARY32 = _vtk.VTKFormat_BINARY32


def CreateVTKElementConnectivity(con, geom, ref):
    r"""CreateVTKElementConnectivity(intArray con, mfem::Geometry::Type geom, int ref)"""
    return _vtk.CreateVTKElementConnectivity(con, geom, ref)
CreateVTKElementConnectivity = _vtk.CreateVTKElementConnectivity

def WriteVTKEncodedCompressed(os, bytes, nbytes, compression_level):
    r"""WriteVTKEncodedCompressed(std::ostream & os, void const * bytes, uint32_t nbytes, int compression_level)"""
    return _vtk.WriteVTKEncodedCompressed(os, bytes, nbytes, compression_level)
WriteVTKEncodedCompressed = _vtk.WriteVTKEncodedCompressed

def BarycentricToVTKTriangle(b, ref):
    r"""BarycentricToVTKTriangle(int * b, int ref) -> int"""
    return _vtk.BarycentricToVTKTriangle(b, ref)
BarycentricToVTKTriangle = _vtk.BarycentricToVTKTriangle

def VTKByteOrder():
    r"""VTKByteOrder() -> char const *"""
    return _vtk.VTKByteOrder()
VTKByteOrder = _vtk.VTKByteOrder

def WriteBase64WithSizeAndClear(os, buf, compression_level):
    r"""WriteBase64WithSizeAndClear(std::ostream & os, std::vector< char > & buf, int compression_level)"""
    return _vtk.WriteBase64WithSizeAndClear(os, buf, compression_level)
WriteBase64WithSizeAndClear = _vtk.WriteBase64WithSizeAndClear

def VTKComponentLabels(vdim):
    r"""VTKComponentLabels(int vdim) -> std::string"""
    return _vtk.VTKComponentLabels(vdim)
VTKComponentLabels = _vtk.VTKComponentLabels

