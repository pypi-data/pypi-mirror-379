# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _qspace
else:
    import _qspace

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _qspace.SWIG_PyInstanceMethod_New
_swig_new_static_method = _qspace.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._ser.fe
import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.globals
import mfem._ser.vector
import mfem._ser.geom
import mfem._ser.intrules
import mfem._ser.densemat
import mfem._ser.operators
import mfem._ser.matrix
import mfem._ser.sparsemat
import mfem._ser.fe_base
import mfem._ser.doftrans
import mfem._ser.fe_fixed_order
import mfem._ser.element
import mfem._ser.table
import mfem._ser.hash
import mfem._ser.fe_h1
import mfem._ser.fe_nd
import mfem._ser.fe_rt
import mfem._ser.fe_l2
import mfem._ser.fe_nurbs
import mfem._ser.fe_pos
import mfem._ser.fe_ser
import mfem._ser.mesh
import mfem._ser.attribute_sets
import mfem._ser.arrays_by_name
import mfem._ser.sort_pairs
import mfem._ser.ncmesh
import mfem._ser.gridfunc
import mfem._ser.coefficient
import mfem._ser.symmat
import mfem._ser.eltrans
import mfem._ser.fespace
import mfem._ser.fe_coll
import mfem._ser.lininteg
import mfem._ser.handle
import mfem._ser.restriction
import mfem._ser.bilininteg
import mfem._ser.linearform
import mfem._ser.nonlininteg
import mfem._ser.integrator
import mfem._ser.bounds
import mfem._ser.vertex
import mfem._ser.vtk
import mfem._ser.std_vectors
class QuadratureSpaceBase(object):
    r"""Proxy of C++ mfem::QuadratureSpaceBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetSize(self):
        r"""GetSize(QuadratureSpaceBase self) -> int"""
        return _qspace.QuadratureSpaceBase_GetSize(self)
    GetSize = _swig_new_instance_method(_qspace.QuadratureSpaceBase_GetSize)

    def GetOrder(self):
        r"""GetOrder(QuadratureSpaceBase self) -> int"""
        return _qspace.QuadratureSpaceBase_GetOrder(self)
    GetOrder = _swig_new_instance_method(_qspace.QuadratureSpaceBase_GetOrder)

    def GetNE(self):
        r"""GetNE(QuadratureSpaceBase self) -> int"""
        return _qspace.QuadratureSpaceBase_GetNE(self)
    GetNE = _swig_new_instance_method(_qspace.QuadratureSpaceBase_GetNE)

    def GetMesh(self):
        r"""GetMesh(QuadratureSpaceBase self) -> Mesh"""
        return _qspace.QuadratureSpaceBase_GetMesh(self)
    GetMesh = _swig_new_instance_method(_qspace.QuadratureSpaceBase_GetMesh)

    def GetTransformation(self, idx):
        r"""GetTransformation(QuadratureSpaceBase self, int idx) -> ElementTransformation"""
        return _qspace.QuadratureSpaceBase_GetTransformation(self, idx)
    GetTransformation = _swig_new_instance_method(_qspace.QuadratureSpaceBase_GetTransformation)

    def GetGeometry(self, idx):
        r"""GetGeometry(QuadratureSpaceBase self, int idx) -> mfem::Geometry::Type"""
        return _qspace.QuadratureSpaceBase_GetGeometry(self, idx)
    GetGeometry = _swig_new_instance_method(_qspace.QuadratureSpaceBase_GetGeometry)

    def GetIntRule(self, idx):
        r"""GetIntRule(QuadratureSpaceBase self, int idx) -> IntegrationRule"""
        return _qspace.QuadratureSpaceBase_GetIntRule(self, idx)
    GetIntRule = _swig_new_instance_method(_qspace.QuadratureSpaceBase_GetIntRule)

    def GetPermutedIndex(self, idx, iq):
        r"""GetPermutedIndex(QuadratureSpaceBase self, int idx, int iq) -> int"""
        return _qspace.QuadratureSpaceBase_GetPermutedIndex(self, idx, iq)
    GetPermutedIndex = _swig_new_instance_method(_qspace.QuadratureSpaceBase_GetPermutedIndex)

    def GetEntityIndex(self, T):
        r"""GetEntityIndex(QuadratureSpaceBase self, ElementTransformation T) -> int"""
        return _qspace.QuadratureSpaceBase_GetEntityIndex(self, T)
    GetEntityIndex = _swig_new_instance_method(_qspace.QuadratureSpaceBase_GetEntityIndex)

    def Save(self, out):
        r"""Save(QuadratureSpaceBase self, std::ostream & out)"""
        return _qspace.QuadratureSpaceBase_Save(self, out)
    Save = _swig_new_instance_method(_qspace.QuadratureSpaceBase_Save)

    def GetWeights(self):
        r"""GetWeights(QuadratureSpaceBase self) -> Vector"""
        return _qspace.QuadratureSpaceBase_GetWeights(self)
    GetWeights = _swig_new_instance_method(_qspace.QuadratureSpaceBase_GetWeights)

    def Integrate(self, *args):
        r"""
        Integrate(QuadratureSpaceBase self, Coefficient coeff) -> mfem::real_t
        Integrate(QuadratureSpaceBase self, VectorCoefficient coeff, Vector integrals)
        """
        return _qspace.QuadratureSpaceBase_Integrate(self, *args)
    Integrate = _swig_new_instance_method(_qspace.QuadratureSpaceBase_Integrate)
    __swig_destroy__ = _qspace.delete_QuadratureSpaceBase

# Register QuadratureSpaceBase in _qspace:
_qspace.QuadratureSpaceBase_swigregister(QuadratureSpaceBase)
class QuadratureSpace(QuadratureSpaceBase):
    r"""Proxy of C++ mfem::QuadratureSpace class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(QuadratureSpace self, Mesh mesh_, int order_) -> QuadratureSpace
        __init__(QuadratureSpace self, Mesh mesh_, IntegrationRule ir) -> QuadratureSpace
        __init__(QuadratureSpace self, Mesh mesh_, std::istream & _in) -> QuadratureSpace
        """
        _qspace.QuadratureSpace_swiginit(self, _qspace.new_QuadratureSpace(*args))

    def GetNE(self):
        r"""GetNE(QuadratureSpace self) -> int"""
        return _qspace.QuadratureSpace_GetNE(self)
    GetNE = _swig_new_instance_method(_qspace.QuadratureSpace_GetNE)

    def GetTransformation(self, idx):
        r"""GetTransformation(QuadratureSpace self, int idx) -> ElementTransformation"""
        return _qspace.QuadratureSpace_GetTransformation(self, idx)
    GetTransformation = _swig_new_instance_method(_qspace.QuadratureSpace_GetTransformation)

    def GetGeometry(self, idx):
        r"""GetGeometry(QuadratureSpace self, int idx) -> mfem::Geometry::Type"""
        return _qspace.QuadratureSpace_GetGeometry(self, idx)
    GetGeometry = _swig_new_instance_method(_qspace.QuadratureSpace_GetGeometry)

    def GetElementIntRule(self, idx):
        r"""GetElementIntRule(QuadratureSpace self, int idx) -> IntegrationRule"""
        return _qspace.QuadratureSpace_GetElementIntRule(self, idx)
    GetElementIntRule = _swig_new_instance_method(_qspace.QuadratureSpace_GetElementIntRule)

    def GetPermutedIndex(self, idx, iq):
        r"""GetPermutedIndex(QuadratureSpace self, int idx, int iq) -> int"""
        return _qspace.QuadratureSpace_GetPermutedIndex(self, idx, iq)
    GetPermutedIndex = _swig_new_instance_method(_qspace.QuadratureSpace_GetPermutedIndex)

    def GetEntityIndex(self, T):
        r"""GetEntityIndex(QuadratureSpace self, ElementTransformation T) -> int"""
        return _qspace.QuadratureSpace_GetEntityIndex(self, T)
    GetEntityIndex = _swig_new_instance_method(_qspace.QuadratureSpace_GetEntityIndex)

    def SaveGZ(self, file, precision=16):
        r"""SaveGZ(QuadratureSpace self, char const * file, int precision=16)"""
        return _qspace.QuadratureSpace_SaveGZ(self, file, precision)
    SaveGZ = _swig_new_instance_method(_qspace.QuadratureSpace_SaveGZ)

    def Save(self, *args):
        r"""
        Save(QuadratureSpace self, std::ostream & out)
        Save(QuadratureSpace self, char const * file, int precision=16)
        Save(QuadratureSpace self)
        """
        return _qspace.QuadratureSpace_Save(self, *args)
    Save = _swig_new_instance_method(_qspace.QuadratureSpace_Save)
    __swig_destroy__ = _qspace.delete_QuadratureSpace

# Register QuadratureSpace in _qspace:
_qspace.QuadratureSpace_swigregister(QuadratureSpace)
class FaceQuadratureSpace(QuadratureSpaceBase):
    r"""Proxy of C++ mfem::FaceQuadratureSpace class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FaceQuadratureSpace self, Mesh mesh_, int order_, mfem::FaceType face_type_) -> FaceQuadratureSpace
        __init__(FaceQuadratureSpace self, Mesh mesh_, IntegrationRule ir, mfem::FaceType face_type_) -> FaceQuadratureSpace
        """
        _qspace.FaceQuadratureSpace_swiginit(self, _qspace.new_FaceQuadratureSpace(*args))

    def GetNumFaces(self):
        r"""GetNumFaces(FaceQuadratureSpace self) -> int"""
        return _qspace.FaceQuadratureSpace_GetNumFaces(self)
    GetNumFaces = _swig_new_instance_method(_qspace.FaceQuadratureSpace_GetNumFaces)

    def GetFaceType(self):
        r"""GetFaceType(FaceQuadratureSpace self) -> mfem::FaceType"""
        return _qspace.FaceQuadratureSpace_GetFaceType(self)
    GetFaceType = _swig_new_instance_method(_qspace.FaceQuadratureSpace_GetFaceType)

    def GetTransformation(self, idx):
        r"""GetTransformation(FaceQuadratureSpace self, int idx) -> ElementTransformation"""
        return _qspace.FaceQuadratureSpace_GetTransformation(self, idx)
    GetTransformation = _swig_new_instance_method(_qspace.FaceQuadratureSpace_GetTransformation)

    def GetGeometry(self, idx):
        r"""GetGeometry(FaceQuadratureSpace self, int idx) -> mfem::Geometry::Type"""
        return _qspace.FaceQuadratureSpace_GetGeometry(self, idx)
    GetGeometry = _swig_new_instance_method(_qspace.FaceQuadratureSpace_GetGeometry)

    def GetFaceIntRule(self, idx):
        r"""GetFaceIntRule(FaceQuadratureSpace self, int idx) -> IntegrationRule"""
        return _qspace.FaceQuadratureSpace_GetFaceIntRule(self, idx)
    GetFaceIntRule = _swig_new_instance_method(_qspace.FaceQuadratureSpace_GetFaceIntRule)

    def GetPermutedIndex(self, idx, iq):
        r"""GetPermutedIndex(FaceQuadratureSpace self, int idx, int iq) -> int"""
        return _qspace.FaceQuadratureSpace_GetPermutedIndex(self, idx, iq)
    GetPermutedIndex = _swig_new_instance_method(_qspace.FaceQuadratureSpace_GetPermutedIndex)

    def GetMeshFaceIndex(self, idx):
        r"""GetMeshFaceIndex(FaceQuadratureSpace self, int idx) -> int"""
        return _qspace.FaceQuadratureSpace_GetMeshFaceIndex(self, idx)
    GetMeshFaceIndex = _swig_new_instance_method(_qspace.FaceQuadratureSpace_GetMeshFaceIndex)

    def GetEntityIndex(self, T):
        r"""GetEntityIndex(FaceQuadratureSpace self, ElementTransformation T) -> int"""
        return _qspace.FaceQuadratureSpace_GetEntityIndex(self, T)
    GetEntityIndex = _swig_new_instance_method(_qspace.FaceQuadratureSpace_GetEntityIndex)

    def Save(self, out):
        r"""Save(FaceQuadratureSpace self, std::ostream & out)"""
        return _qspace.FaceQuadratureSpace_Save(self, out)
    Save = _swig_new_instance_method(_qspace.FaceQuadratureSpace_Save)
    __swig_destroy__ = _qspace.delete_FaceQuadratureSpace

# Register FaceQuadratureSpace in _qspace:
_qspace.FaceQuadratureSpace_swigregister(FaceQuadratureSpace)

