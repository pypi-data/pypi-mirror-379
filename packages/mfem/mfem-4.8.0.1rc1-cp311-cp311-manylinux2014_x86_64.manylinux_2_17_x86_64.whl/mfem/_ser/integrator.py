# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _integrator
else:
    import _integrator

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _integrator.SWIG_PyInstanceMethod_New
_swig_new_static_method = _integrator.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import mfem._ser.intrules
import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.globals
class Integrator(object):
    r"""Proxy of C++ mfem::Integrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ir=None):
        r"""__init__(Integrator self, IntegrationRule ir=None) -> Integrator"""
        _integrator.Integrator_swiginit(self, _integrator.new_Integrator(ir))

    def SetIntRule(self, ir):
        r"""SetIntRule(Integrator self, IntegrationRule ir)"""
        return _integrator.Integrator_SetIntRule(self, ir)
    SetIntRule = _swig_new_instance_method(_integrator.Integrator_SetIntRule)

    def SetIntegrationRule(self, ir):
        r"""SetIntegrationRule(Integrator self, IntegrationRule ir)"""
        return _integrator.Integrator_SetIntegrationRule(self, ir)
    SetIntegrationRule = _swig_new_instance_method(_integrator.Integrator_SetIntegrationRule)

    def SetNURBSPatchIntRule(self, pr):
        r"""SetNURBSPatchIntRule(Integrator self, NURBSMeshRules pr)"""
        return _integrator.Integrator_SetNURBSPatchIntRule(self, pr)
    SetNURBSPatchIntRule = _swig_new_instance_method(_integrator.Integrator_SetNURBSPatchIntRule)

    def HasNURBSPatchIntRule(self):
        r"""HasNURBSPatchIntRule(Integrator self) -> bool"""
        return _integrator.Integrator_HasNURBSPatchIntRule(self)
    HasNURBSPatchIntRule = _swig_new_instance_method(_integrator.Integrator_HasNURBSPatchIntRule)

    def GetIntRule(self):
        r"""GetIntRule(Integrator self) -> IntegrationRule"""
        return _integrator.Integrator_GetIntRule(self)
    GetIntRule = _swig_new_instance_method(_integrator.Integrator_GetIntRule)

    def GetIntegrationRule(self):
        r"""GetIntegrationRule(Integrator self) -> IntegrationRule"""
        return _integrator.Integrator_GetIntegrationRule(self)
    GetIntegrationRule = _swig_new_instance_method(_integrator.Integrator_GetIntegrationRule)
    __swig_destroy__ = _integrator.delete_Integrator

# Register Integrator in _integrator:
_integrator.Integrator_swigregister(Integrator)

