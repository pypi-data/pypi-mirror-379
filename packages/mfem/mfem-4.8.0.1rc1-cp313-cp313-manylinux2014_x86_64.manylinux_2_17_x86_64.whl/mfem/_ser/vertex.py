# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _vertex
else:
    import _vertex

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _vertex.SWIG_PyInstanceMethod_New
_swig_new_static_method = _vertex.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._ser.element
import mfem._ser.globals
import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.densemat
import mfem._ser.vector
import mfem._ser.operators
import mfem._ser.matrix
import mfem._ser.geom
import mfem._ser.intrules
import mfem._ser.table
import mfem._ser.hash
class Vertex(object):
    r"""Proxy of C++ mfem::Vertex class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Vertex self) -> Vertex
        __init__(Vertex self, mfem::real_t * xx, int dim) -> Vertex
        __init__(Vertex self, mfem::real_t x, mfem::real_t y) -> Vertex
        __init__(Vertex self, mfem::real_t x, mfem::real_t y, mfem::real_t z) -> Vertex
        """
        _vertex.Vertex_swiginit(self, _vertex.new_Vertex(*args))

    def __call__(self, *args):
        r"""
        __call__(Vertex self) -> mfem::real_t
        __call__(Vertex self, int i) -> mfem::real_t
        __call__(Vertex self, int i) -> mfem::real_t const &
        """
        return _vertex.Vertex___call__(self, *args)
    __call__ = _swig_new_instance_method(_vertex.Vertex___call__)

    def SetCoords(self, *args):
        r"""
        SetCoords(Vertex self, mfem::real_t const * p)
        SetCoords(Vertex self, int dim, mfem::real_t const * p)
        """

        if len(args) == 2:
             import warnings
             warnings.warn("Vertex::SetCoords(const double *p) is deprecated is deprecated",
         	              DeprecationWarning,)


        return _vertex.Vertex_SetCoords(self, *args)

    __swig_destroy__ = _vertex.delete_Vertex

# Register Vertex in _vertex:
_vertex.Vertex_swigregister(Vertex)

