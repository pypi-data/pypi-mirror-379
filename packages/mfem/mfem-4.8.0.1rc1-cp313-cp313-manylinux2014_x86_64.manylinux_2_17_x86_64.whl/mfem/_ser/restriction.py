# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _restriction
else:
    import _restriction

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _restriction.SWIG_PyInstanceMethod_New
_swig_new_static_method = _restriction.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._ser.element
import mfem._ser.globals
import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.densemat
import mfem._ser.vector
import mfem._ser.operators
import mfem._ser.matrix
import mfem._ser.geom
import mfem._ser.intrules
import mfem._ser.table
import mfem._ser.hash
import mfem._ser.mesh
import mfem._ser.attribute_sets
import mfem._ser.arrays_by_name
import mfem._ser.sort_pairs
import mfem._ser.ncmesh
import mfem._ser.gridfunc
import mfem._ser.coefficient
import mfem._ser.symmat
import mfem._ser.sparsemat
import mfem._ser.eltrans
import mfem._ser.fe
import mfem._ser.fe_base
import mfem._ser.doftrans
import mfem._ser.fe_fixed_order
import mfem._ser.fe_h1
import mfem._ser.fe_nd
import mfem._ser.fe_rt
import mfem._ser.fe_l2
import mfem._ser.fe_nurbs
import mfem._ser.fe_pos
import mfem._ser.fe_ser
import mfem._ser.fespace
import mfem._ser.fe_coll
import mfem._ser.lininteg
import mfem._ser.handle
import mfem._ser.bilininteg
import mfem._ser.linearform
import mfem._ser.nonlininteg
import mfem._ser.integrator
import mfem._ser.bounds
import mfem._ser.vertex
import mfem._ser.vtk
import mfem._ser.std_vectors
class ElementRestrictionOperator(mfem._ser.operators.Operator):
    r"""Proxy of C++ mfem::ElementRestrictionOperator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def AddMultTranspose(self, x, y, a=1.0):
        r"""AddMultTranspose(ElementRestrictionOperator self, Vector x, Vector y, mfem::real_t const a=1.0)"""
        return _restriction.ElementRestrictionOperator_AddMultTranspose(self, x, y, a)
    AddMultTranspose = _swig_new_instance_method(_restriction.ElementRestrictionOperator_AddMultTranspose)
    __swig_destroy__ = _restriction.delete_ElementRestrictionOperator

# Register ElementRestrictionOperator in _restriction:
_restriction.ElementRestrictionOperator_swigregister(ElementRestrictionOperator)
class ElementRestriction(ElementRestrictionOperator):
    r"""Proxy of C++ mfem::ElementRestriction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3):
        r"""__init__(ElementRestriction self, FiniteElementSpace arg2, mfem::ElementDofOrdering arg3) -> ElementRestriction"""
        _restriction.ElementRestriction_swiginit(self, _restriction.new_ElementRestriction(arg2, arg3))

    def Mult(self, x, y):
        r"""Mult(ElementRestriction self, Vector x, Vector y)"""
        return _restriction.ElementRestriction_Mult(self, x, y)
    Mult = _swig_new_instance_method(_restriction.ElementRestriction_Mult)

    def MultTranspose(self, x, y):
        r"""MultTranspose(ElementRestriction self, Vector x, Vector y)"""
        return _restriction.ElementRestriction_MultTranspose(self, x, y)
    MultTranspose = _swig_new_instance_method(_restriction.ElementRestriction_MultTranspose)

    def AddMultTranspose(self, x, y, a=1.0):
        r"""AddMultTranspose(ElementRestriction self, Vector x, Vector y, mfem::real_t const a=1.0)"""
        return _restriction.ElementRestriction_AddMultTranspose(self, x, y, a)
    AddMultTranspose = _swig_new_instance_method(_restriction.ElementRestriction_AddMultTranspose)

    def MultUnsigned(self, x, y):
        r"""MultUnsigned(ElementRestriction self, Vector x, Vector y)"""
        return _restriction.ElementRestriction_MultUnsigned(self, x, y)
    MultUnsigned = _swig_new_instance_method(_restriction.ElementRestriction_MultUnsigned)

    def MultTransposeUnsigned(self, x, y):
        r"""MultTransposeUnsigned(ElementRestriction self, Vector x, Vector y)"""
        return _restriction.ElementRestriction_MultTransposeUnsigned(self, x, y)
    MultTransposeUnsigned = _swig_new_instance_method(_restriction.ElementRestriction_MultTransposeUnsigned)

    def MultLeftInverse(self, x, y):
        r"""MultLeftInverse(ElementRestriction self, Vector x, Vector y)"""
        return _restriction.ElementRestriction_MultLeftInverse(self, x, y)
    MultLeftInverse = _swig_new_instance_method(_restriction.ElementRestriction_MultLeftInverse)

    def BooleanMask(self, y):
        r"""BooleanMask(ElementRestriction self, Vector y)"""
        return _restriction.ElementRestriction_BooleanMask(self, y)
    BooleanMask = _swig_new_instance_method(_restriction.ElementRestriction_BooleanMask)

    def FillSparseMatrix(self, mat_ea, mat):
        r"""FillSparseMatrix(ElementRestriction self, Vector mat_ea, SparseMatrix mat)"""
        return _restriction.ElementRestriction_FillSparseMatrix(self, mat_ea, mat)
    FillSparseMatrix = _swig_new_instance_method(_restriction.ElementRestriction_FillSparseMatrix)

    def FillI(self, mat):
        r"""FillI(ElementRestriction self, SparseMatrix mat) -> int"""
        return _restriction.ElementRestriction_FillI(self, mat)
    FillI = _swig_new_instance_method(_restriction.ElementRestriction_FillI)

    def FillJAndData(self, ea_data, mat):
        r"""FillJAndData(ElementRestriction self, Vector ea_data, SparseMatrix mat)"""
        return _restriction.ElementRestriction_FillJAndData(self, ea_data, mat)
    FillJAndData = _swig_new_instance_method(_restriction.ElementRestriction_FillJAndData)

    def GatherMap(self):
        r"""GatherMap(ElementRestriction self) -> intArray"""
        return _restriction.ElementRestriction_GatherMap(self)
    GatherMap = _swig_new_instance_method(_restriction.ElementRestriction_GatherMap)

    def Indices(self):
        r"""Indices(ElementRestriction self) -> intArray"""
        return _restriction.ElementRestriction_Indices(self)
    Indices = _swig_new_instance_method(_restriction.ElementRestriction_Indices)

    def Offsets(self):
        r"""Offsets(ElementRestriction self) -> intArray"""
        return _restriction.ElementRestriction_Offsets(self)
    Offsets = _swig_new_instance_method(_restriction.ElementRestriction_Offsets)
    __swig_destroy__ = _restriction.delete_ElementRestriction

# Register ElementRestriction in _restriction:
_restriction.ElementRestriction_swigregister(ElementRestriction)
class L2ElementRestriction(ElementRestrictionOperator):
    r"""Proxy of C++ mfem::L2ElementRestriction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2):
        r"""__init__(L2ElementRestriction self, FiniteElementSpace arg2) -> L2ElementRestriction"""
        _restriction.L2ElementRestriction_swiginit(self, _restriction.new_L2ElementRestriction(arg2))

    def Mult(self, x, y):
        r"""Mult(L2ElementRestriction self, Vector x, Vector y)"""
        return _restriction.L2ElementRestriction_Mult(self, x, y)
    Mult = _swig_new_instance_method(_restriction.L2ElementRestriction_Mult)

    def MultTranspose(self, x, y):
        r"""MultTranspose(L2ElementRestriction self, Vector x, Vector y)"""
        return _restriction.L2ElementRestriction_MultTranspose(self, x, y)
    MultTranspose = _swig_new_instance_method(_restriction.L2ElementRestriction_MultTranspose)

    def AddMultTranspose(self, x, y, a=1.0):
        r"""AddMultTranspose(L2ElementRestriction self, Vector x, Vector y, mfem::real_t const a=1.0)"""
        return _restriction.L2ElementRestriction_AddMultTranspose(self, x, y, a)
    AddMultTranspose = _swig_new_instance_method(_restriction.L2ElementRestriction_AddMultTranspose)

    def FillI(self, mat):
        r"""FillI(L2ElementRestriction self, SparseMatrix mat)"""
        return _restriction.L2ElementRestriction_FillI(self, mat)
    FillI = _swig_new_instance_method(_restriction.L2ElementRestriction_FillI)

    def FillJAndData(self, ea_data, mat):
        r"""FillJAndData(L2ElementRestriction self, Vector ea_data, SparseMatrix mat)"""
        return _restriction.L2ElementRestriction_FillJAndData(self, ea_data, mat)
    FillJAndData = _swig_new_instance_method(_restriction.L2ElementRestriction_FillJAndData)
    __swig_destroy__ = _restriction.delete_L2ElementRestriction

# Register L2ElementRestriction in _restriction:
_restriction.L2ElementRestriction_swigregister(L2ElementRestriction)
L2FaceValues_SingleValued = _restriction.L2FaceValues_SingleValued

L2FaceValues_DoubleValued = _restriction.L2FaceValues_DoubleValued

class FaceRestriction(mfem._ser.operators.Operator):
    r"""Proxy of C++ mfem::FaceRestriction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _restriction.delete_FaceRestriction

    def Mult(self, x, y):
        r"""Mult(FaceRestriction self, Vector x, Vector y)"""
        return _restriction.FaceRestriction_Mult(self, x, y)
    Mult = _swig_new_instance_method(_restriction.FaceRestriction_Mult)

    def AddMultTranspose(self, x, y, a=1.0):
        r"""AddMultTranspose(FaceRestriction self, Vector x, Vector y, mfem::real_t const a=1.0)"""
        return _restriction.FaceRestriction_AddMultTranspose(self, x, y, a)
    AddMultTranspose = _swig_new_instance_method(_restriction.FaceRestriction_AddMultTranspose)

    def AddMultTransposeUnsigned(self, x, y, a=1.0):
        r"""AddMultTransposeUnsigned(FaceRestriction self, Vector x, Vector y, mfem::real_t const a=1.0)"""
        return _restriction.FaceRestriction_AddMultTransposeUnsigned(self, x, y, a)
    AddMultTransposeUnsigned = _swig_new_instance_method(_restriction.FaceRestriction_AddMultTransposeUnsigned)

    def AddMultTransposeInPlace(self, x, y):
        r"""AddMultTransposeInPlace(FaceRestriction self, Vector x, Vector y)"""
        return _restriction.FaceRestriction_AddMultTransposeInPlace(self, x, y)
    AddMultTransposeInPlace = _swig_new_instance_method(_restriction.FaceRestriction_AddMultTransposeInPlace)

    def MultTranspose(self, x, y):
        r"""MultTranspose(FaceRestriction self, Vector x, Vector y)"""
        return _restriction.FaceRestriction_MultTranspose(self, x, y)
    MultTranspose = _swig_new_instance_method(_restriction.FaceRestriction_MultTranspose)

    def NormalDerivativeMult(self, x, y):
        r"""NormalDerivativeMult(FaceRestriction self, Vector x, Vector y)"""
        return _restriction.FaceRestriction_NormalDerivativeMult(self, x, y)
    NormalDerivativeMult = _swig_new_instance_method(_restriction.FaceRestriction_NormalDerivativeMult)

    def NormalDerivativeAddMultTranspose(self, x, y):
        r"""NormalDerivativeAddMultTranspose(FaceRestriction self, Vector x, Vector y)"""
        return _restriction.FaceRestriction_NormalDerivativeAddMultTranspose(self, x, y)
    NormalDerivativeAddMultTranspose = _swig_new_instance_method(_restriction.FaceRestriction_NormalDerivativeAddMultTranspose)

    def GatherMap(self):
        r"""GatherMap(FaceRestriction self) -> intArray"""
        return _restriction.FaceRestriction_GatherMap(self)
    GatherMap = _swig_new_instance_method(_restriction.FaceRestriction_GatherMap)

# Register FaceRestriction in _restriction:
_restriction.FaceRestriction_swigregister(FaceRestriction)
class ConformingFaceRestriction(FaceRestriction):
    r"""Proxy of C++ mfem::ConformingFaceRestriction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fes, f_ordering, type):
        r"""__init__(ConformingFaceRestriction self, FiniteElementSpace fes, mfem::ElementDofOrdering const f_ordering, mfem::FaceType const type) -> ConformingFaceRestriction"""
        _restriction.ConformingFaceRestriction_swiginit(self, _restriction.new_ConformingFaceRestriction(fes, f_ordering, type))

    def Mult(self, x, y):
        r"""Mult(ConformingFaceRestriction self, Vector x, Vector y)"""
        return _restriction.ConformingFaceRestriction_Mult(self, x, y)
    Mult = _swig_new_instance_method(_restriction.ConformingFaceRestriction_Mult)

    def AddMultTransposeInPlace(self, x, y):
        r"""AddMultTransposeInPlace(ConformingFaceRestriction self, Vector x, Vector y)"""
        return _restriction.ConformingFaceRestriction_AddMultTransposeInPlace(self, x, y)
    AddMultTransposeInPlace = _swig_new_instance_method(_restriction.ConformingFaceRestriction_AddMultTransposeInPlace)

    def AddMultTranspose(self, x, y, a=1.0):
        r"""AddMultTranspose(ConformingFaceRestriction self, Vector x, Vector y, mfem::real_t const a=1.0)"""
        return _restriction.ConformingFaceRestriction_AddMultTranspose(self, x, y, a)
    AddMultTranspose = _swig_new_instance_method(_restriction.ConformingFaceRestriction_AddMultTranspose)

    def AddMultTransposeUnsigned(self, x, y, a=1.0):
        r"""AddMultTransposeUnsigned(ConformingFaceRestriction self, Vector x, Vector y, mfem::real_t const a=1.0)"""
        return _restriction.ConformingFaceRestriction_AddMultTransposeUnsigned(self, x, y, a)
    AddMultTransposeUnsigned = _swig_new_instance_method(_restriction.ConformingFaceRestriction_AddMultTransposeUnsigned)
    __swig_destroy__ = _restriction.delete_ConformingFaceRestriction

# Register ConformingFaceRestriction in _restriction:
_restriction.ConformingFaceRestriction_swigregister(ConformingFaceRestriction)
class L2FaceRestriction(FaceRestriction):
    r"""Proxy of C++ mfem::L2FaceRestriction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(L2FaceRestriction self, FiniteElementSpace fes, mfem::ElementDofOrdering const f_ordering, mfem::FaceType const type, mfem::L2FaceValues const m=DoubleValued) -> L2FaceRestriction"""
        _restriction.L2FaceRestriction_swiginit(self, _restriction.new_L2FaceRestriction(*args))

    def Mult(self, x, y):
        r"""Mult(L2FaceRestriction self, Vector x, Vector y)"""
        return _restriction.L2FaceRestriction_Mult(self, x, y)
    Mult = _swig_new_instance_method(_restriction.L2FaceRestriction_Mult)

    def AddMultTranspose(self, x, y, a=1.0):
        r"""AddMultTranspose(L2FaceRestriction self, Vector x, Vector y, mfem::real_t const a=1.0)"""
        return _restriction.L2FaceRestriction_AddMultTranspose(self, x, y, a)
    AddMultTranspose = _swig_new_instance_method(_restriction.L2FaceRestriction_AddMultTranspose)

    def FillI(self, mat, keep_nbr_block=False):
        r"""FillI(L2FaceRestriction self, SparseMatrix mat, bool const keep_nbr_block=False)"""
        return _restriction.L2FaceRestriction_FillI(self, mat, keep_nbr_block)
    FillI = _swig_new_instance_method(_restriction.L2FaceRestriction_FillI)

    def FillJAndData(self, fea_data, mat, keep_nbr_block=False):
        r"""FillJAndData(L2FaceRestriction self, Vector fea_data, SparseMatrix mat, bool const keep_nbr_block=False)"""
        return _restriction.L2FaceRestriction_FillJAndData(self, fea_data, mat, keep_nbr_block)
    FillJAndData = _swig_new_instance_method(_restriction.L2FaceRestriction_FillJAndData)

    def AddFaceMatricesToElementMatrices(self, fea_data, ea_data):
        r"""AddFaceMatricesToElementMatrices(L2FaceRestriction self, Vector fea_data, Vector ea_data)"""
        return _restriction.L2FaceRestriction_AddFaceMatricesToElementMatrices(self, fea_data, ea_data)
    AddFaceMatricesToElementMatrices = _swig_new_instance_method(_restriction.L2FaceRestriction_AddFaceMatricesToElementMatrices)

    def NormalDerivativeMult(self, x, y):
        r"""NormalDerivativeMult(L2FaceRestriction self, Vector x, Vector y)"""
        return _restriction.L2FaceRestriction_NormalDerivativeMult(self, x, y)
    NormalDerivativeMult = _swig_new_instance_method(_restriction.L2FaceRestriction_NormalDerivativeMult)

    def NormalDerivativeAddMultTranspose(self, x, y):
        r"""NormalDerivativeAddMultTranspose(L2FaceRestriction self, Vector x, Vector y)"""
        return _restriction.L2FaceRestriction_NormalDerivativeAddMultTranspose(self, x, y)
    NormalDerivativeAddMultTranspose = _swig_new_instance_method(_restriction.L2FaceRestriction_NormalDerivativeAddMultTranspose)

    def SingleValuedConformingMult(self, x, y):
        r"""SingleValuedConformingMult(L2FaceRestriction self, Vector x, Vector y)"""
        return _restriction.L2FaceRestriction_SingleValuedConformingMult(self, x, y)
    SingleValuedConformingMult = _swig_new_instance_method(_restriction.L2FaceRestriction_SingleValuedConformingMult)

    def DoubleValuedConformingMult(self, x, y):
        r"""DoubleValuedConformingMult(L2FaceRestriction self, Vector x, Vector y)"""
        return _restriction.L2FaceRestriction_DoubleValuedConformingMult(self, x, y)
    DoubleValuedConformingMult = _swig_new_instance_method(_restriction.L2FaceRestriction_DoubleValuedConformingMult)

    def SingleValuedConformingAddMultTranspose(self, x, y):
        r"""SingleValuedConformingAddMultTranspose(L2FaceRestriction self, Vector x, Vector y)"""
        return _restriction.L2FaceRestriction_SingleValuedConformingAddMultTranspose(self, x, y)
    SingleValuedConformingAddMultTranspose = _swig_new_instance_method(_restriction.L2FaceRestriction_SingleValuedConformingAddMultTranspose)

    def DoubleValuedConformingAddMultTranspose(self, x, y):
        r"""DoubleValuedConformingAddMultTranspose(L2FaceRestriction self, Vector x, Vector y)"""
        return _restriction.L2FaceRestriction_DoubleValuedConformingAddMultTranspose(self, x, y)
    DoubleValuedConformingAddMultTranspose = _swig_new_instance_method(_restriction.L2FaceRestriction_DoubleValuedConformingAddMultTranspose)
    __swig_destroy__ = _restriction.delete_L2FaceRestriction

# Register L2FaceRestriction in _restriction:
_restriction.L2FaceRestriction_swigregister(L2FaceRestriction)
class InterpConfig(object):
    r"""Proxy of C++ mfem::InterpConfig class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    is_non_conforming = property(_restriction.InterpConfig_is_non_conforming_get, _restriction.InterpConfig_is_non_conforming_set, doc=r"""is_non_conforming : uint32_t""")
    master_side = property(_restriction.InterpConfig_master_side_get, _restriction.InterpConfig_master_side_set, doc=r"""master_side : uint32_t""")
    index = property(_restriction.InterpConfig_index_get, _restriction.InterpConfig_index_set, doc=r"""index : uint32_t""")

    def __init__(self, *args):
        r"""
        __init__(InterpConfig self) -> InterpConfig
        __init__(InterpConfig self, int master_side, int nc_index) -> InterpConfig
        __init__(InterpConfig self, InterpConfig arg2) -> InterpConfig
        """
        _restriction.InterpConfig_swiginit(self, _restriction.new_InterpConfig(*args))
    __swig_destroy__ = _restriction.delete_InterpConfig

# Register InterpConfig in _restriction:
_restriction.InterpConfig_swigregister(InterpConfig)
class NCInterpConfig(object):
    r"""Proxy of C++ mfem::NCInterpConfig class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    face_index = property(_restriction.NCInterpConfig_face_index_get, _restriction.NCInterpConfig_face_index_set, doc=r"""face_index : int""")
    is_non_conforming = property(_restriction.NCInterpConfig_is_non_conforming_get, _restriction.NCInterpConfig_is_non_conforming_set, doc=r"""is_non_conforming : uint32_t""")
    master_side = property(_restriction.NCInterpConfig_master_side_get, _restriction.NCInterpConfig_master_side_set, doc=r"""master_side : uint32_t""")
    index = property(_restriction.NCInterpConfig_index_get, _restriction.NCInterpConfig_index_set, doc=r"""index : uint32_t""")

    def __init__(self, *args):
        r"""
        __init__(NCInterpConfig self) -> NCInterpConfig
        __init__(NCInterpConfig self, int face_index, int master_side, int nc_index) -> NCInterpConfig
        __init__(NCInterpConfig self, int face_index, InterpConfig config) -> NCInterpConfig
        __init__(NCInterpConfig self, NCInterpConfig arg2) -> NCInterpConfig
        """
        _restriction.NCInterpConfig_swiginit(self, _restriction.new_NCInterpConfig(*args))
    __swig_destroy__ = _restriction.delete_NCInterpConfig

# Register NCInterpConfig in _restriction:
_restriction.NCInterpConfig_swigregister(NCInterpConfig)
class InterpolationManager(object):
    r"""Proxy of C++ mfem::InterpolationManager class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fes, ordering, type):
        r"""__init__(InterpolationManager self, FiniteElementSpace fes, mfem::ElementDofOrdering ordering, mfem::FaceType type) -> InterpolationManager"""
        _restriction.InterpolationManager_swiginit(self, _restriction.new_InterpolationManager(fes, ordering, type))

    def RegisterFaceConformingInterpolation(self, face, face_index):
        r"""RegisterFaceConformingInterpolation(InterpolationManager self, mfem::Mesh::FaceInformation const & face, int face_index)"""
        return _restriction.InterpolationManager_RegisterFaceConformingInterpolation(self, face, face_index)
    RegisterFaceConformingInterpolation = _swig_new_instance_method(_restriction.InterpolationManager_RegisterFaceConformingInterpolation)

    def RegisterFaceCoarseToFineInterpolation(self, face, face_index):
        r"""RegisterFaceCoarseToFineInterpolation(InterpolationManager self, mfem::Mesh::FaceInformation const & face, int face_index)"""
        return _restriction.InterpolationManager_RegisterFaceCoarseToFineInterpolation(self, face, face_index)
    RegisterFaceCoarseToFineInterpolation = _swig_new_instance_method(_restriction.InterpolationManager_RegisterFaceCoarseToFineInterpolation)

    def LinearizeInterpolatorMapIntoVector(self):
        r"""LinearizeInterpolatorMapIntoVector(InterpolationManager self)"""
        return _restriction.InterpolationManager_LinearizeInterpolatorMapIntoVector(self)
    LinearizeInterpolatorMapIntoVector = _swig_new_instance_method(_restriction.InterpolationManager_LinearizeInterpolatorMapIntoVector)

    def InitializeNCInterpConfig(self):
        r"""InitializeNCInterpConfig(InterpolationManager self)"""
        return _restriction.InterpolationManager_InitializeNCInterpConfig(self)
    InitializeNCInterpConfig = _swig_new_instance_method(_restriction.InterpolationManager_InitializeNCInterpConfig)

    def GetNumInterpolators(self):
        r"""GetNumInterpolators(InterpolationManager self) -> int"""
        return _restriction.InterpolationManager_GetNumInterpolators(self)
    GetNumInterpolators = _swig_new_instance_method(_restriction.InterpolationManager_GetNumInterpolators)

    def GetInterpolators(self):
        r"""GetInterpolators(InterpolationManager self) -> Vector"""
        return _restriction.InterpolationManager_GetInterpolators(self)
    GetInterpolators = _swig_new_instance_method(_restriction.InterpolationManager_GetInterpolators)

    def GetFaceInterpConfig(self):
        r"""GetFaceInterpConfig(InterpolationManager self) -> mfem::Array< mfem::InterpConfig > const &"""
        return _restriction.InterpolationManager_GetFaceInterpConfig(self)
    GetFaceInterpConfig = _swig_new_instance_method(_restriction.InterpolationManager_GetFaceInterpConfig)

    def GetNCFaceInterpConfig(self):
        r"""GetNCFaceInterpConfig(InterpolationManager self) -> mfem::Array< mfem::NCInterpConfig > const &"""
        return _restriction.InterpolationManager_GetNCFaceInterpConfig(self)
    GetNCFaceInterpConfig = _swig_new_instance_method(_restriction.InterpolationManager_GetNCFaceInterpConfig)
    __swig_destroy__ = _restriction.delete_InterpolationManager

# Register InterpolationManager in _restriction:
_restriction.InterpolationManager_swigregister(InterpolationManager)
class NCL2FaceRestriction(L2FaceRestriction):
    r"""Proxy of C++ mfem::NCL2FaceRestriction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(NCL2FaceRestriction self, FiniteElementSpace fes, mfem::ElementDofOrdering const f_ordering, mfem::FaceType const type, mfem::L2FaceValues const m=DoubleValued) -> NCL2FaceRestriction"""
        _restriction.NCL2FaceRestriction_swiginit(self, _restriction.new_NCL2FaceRestriction(*args))

    def Mult(self, x, y):
        r"""Mult(NCL2FaceRestriction self, Vector x, Vector y)"""
        return _restriction.NCL2FaceRestriction_Mult(self, x, y)
    Mult = _swig_new_instance_method(_restriction.NCL2FaceRestriction_Mult)

    def AddMultTranspose(self, x, y, a=1.0):
        r"""AddMultTranspose(NCL2FaceRestriction self, Vector x, Vector y, mfem::real_t const a=1.0)"""
        return _restriction.NCL2FaceRestriction_AddMultTranspose(self, x, y, a)
    AddMultTranspose = _swig_new_instance_method(_restriction.NCL2FaceRestriction_AddMultTranspose)

    def AddMultTransposeInPlace(self, x, y):
        r"""AddMultTransposeInPlace(NCL2FaceRestriction self, Vector x, Vector y)"""
        return _restriction.NCL2FaceRestriction_AddMultTransposeInPlace(self, x, y)
    AddMultTransposeInPlace = _swig_new_instance_method(_restriction.NCL2FaceRestriction_AddMultTransposeInPlace)

    def FillI(self, mat, keep_nbr_block=False):
        r"""FillI(NCL2FaceRestriction self, SparseMatrix mat, bool const keep_nbr_block=False)"""
        return _restriction.NCL2FaceRestriction_FillI(self, mat, keep_nbr_block)
    FillI = _swig_new_instance_method(_restriction.NCL2FaceRestriction_FillI)

    def FillJAndData(self, fea_data, mat, keep_nbr_block=False):
        r"""FillJAndData(NCL2FaceRestriction self, Vector fea_data, SparseMatrix mat, bool const keep_nbr_block=False)"""
        return _restriction.NCL2FaceRestriction_FillJAndData(self, fea_data, mat, keep_nbr_block)
    FillJAndData = _swig_new_instance_method(_restriction.NCL2FaceRestriction_FillJAndData)

    def AddFaceMatricesToElementMatrices(self, fea_data, ea_data):
        r"""AddFaceMatricesToElementMatrices(NCL2FaceRestriction self, Vector fea_data, Vector ea_data)"""
        return _restriction.NCL2FaceRestriction_AddFaceMatricesToElementMatrices(self, fea_data, ea_data)
    AddFaceMatricesToElementMatrices = _swig_new_instance_method(_restriction.NCL2FaceRestriction_AddFaceMatricesToElementMatrices)

    def DoubleValuedNonconformingMult(self, x, y):
        r"""DoubleValuedNonconformingMult(NCL2FaceRestriction self, Vector x, Vector y)"""
        return _restriction.NCL2FaceRestriction_DoubleValuedNonconformingMult(self, x, y)
    DoubleValuedNonconformingMult = _swig_new_instance_method(_restriction.NCL2FaceRestriction_DoubleValuedNonconformingMult)

    def DoubleValuedNonconformingInterpolation(self, x):
        r"""DoubleValuedNonconformingInterpolation(NCL2FaceRestriction self, Vector x)"""
        return _restriction.NCL2FaceRestriction_DoubleValuedNonconformingInterpolation(self, x)
    DoubleValuedNonconformingInterpolation = _swig_new_instance_method(_restriction.NCL2FaceRestriction_DoubleValuedNonconformingInterpolation)

    def SingleValuedNonconformingTransposeInterpolation(self, x):
        r"""SingleValuedNonconformingTransposeInterpolation(NCL2FaceRestriction self, Vector x)"""
        return _restriction.NCL2FaceRestriction_SingleValuedNonconformingTransposeInterpolation(self, x)
    SingleValuedNonconformingTransposeInterpolation = _swig_new_instance_method(_restriction.NCL2FaceRestriction_SingleValuedNonconformingTransposeInterpolation)

    def SingleValuedNonconformingTransposeInterpolationInPlace(self, x):
        r"""SingleValuedNonconformingTransposeInterpolationInPlace(NCL2FaceRestriction self, Vector x)"""
        return _restriction.NCL2FaceRestriction_SingleValuedNonconformingTransposeInterpolationInPlace(self, x)
    SingleValuedNonconformingTransposeInterpolationInPlace = _swig_new_instance_method(_restriction.NCL2FaceRestriction_SingleValuedNonconformingTransposeInterpolationInPlace)

    def DoubleValuedNonconformingTransposeInterpolation(self, x):
        r"""DoubleValuedNonconformingTransposeInterpolation(NCL2FaceRestriction self, Vector x)"""
        return _restriction.NCL2FaceRestriction_DoubleValuedNonconformingTransposeInterpolation(self, x)
    DoubleValuedNonconformingTransposeInterpolation = _swig_new_instance_method(_restriction.NCL2FaceRestriction_DoubleValuedNonconformingTransposeInterpolation)

    def DoubleValuedNonconformingTransposeInterpolationInPlace(self, x):
        r"""DoubleValuedNonconformingTransposeInterpolationInPlace(NCL2FaceRestriction self, Vector x)"""
        return _restriction.NCL2FaceRestriction_DoubleValuedNonconformingTransposeInterpolationInPlace(self, x)
    DoubleValuedNonconformingTransposeInterpolationInPlace = _swig_new_instance_method(_restriction.NCL2FaceRestriction_DoubleValuedNonconformingTransposeInterpolationInPlace)
    __swig_destroy__ = _restriction.delete_NCL2FaceRestriction

# Register NCL2FaceRestriction in _restriction:
_restriction.NCL2FaceRestriction_swigregister(NCL2FaceRestriction)
class L2InterfaceFaceRestriction(FaceRestriction):
    r"""Proxy of C++ mfem::L2InterfaceFaceRestriction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fes_, ordering_, type_):
        r"""__init__(L2InterfaceFaceRestriction self, FiniteElementSpace fes_, mfem::ElementDofOrdering const ordering_, mfem::FaceType const type_) -> L2InterfaceFaceRestriction"""
        _restriction.L2InterfaceFaceRestriction_swiginit(self, _restriction.new_L2InterfaceFaceRestriction(fes_, ordering_, type_))

    def Mult(self, x, y):
        r"""Mult(L2InterfaceFaceRestriction self, Vector x, Vector y)"""
        return _restriction.L2InterfaceFaceRestriction_Mult(self, x, y)
    Mult = _swig_new_instance_method(_restriction.L2InterfaceFaceRestriction_Mult)

    def AddMultTranspose(self, x, y, a=1.0):
        r"""AddMultTranspose(L2InterfaceFaceRestriction self, Vector x, Vector y, mfem::real_t const a=1.0)"""
        return _restriction.L2InterfaceFaceRestriction_AddMultTranspose(self, x, y, a)
    AddMultTranspose = _swig_new_instance_method(_restriction.L2InterfaceFaceRestriction_AddMultTranspose)

    def GatherMap(self):
        r"""GatherMap(L2InterfaceFaceRestriction self) -> intArray"""
        return _restriction.L2InterfaceFaceRestriction_GatherMap(self)
    GatherMap = _swig_new_instance_method(_restriction.L2InterfaceFaceRestriction_GatherMap)
    __swig_destroy__ = _restriction.delete_L2InterfaceFaceRestriction

# Register L2InterfaceFaceRestriction in _restriction:
_restriction.L2InterfaceFaceRestriction_swigregister(L2InterfaceFaceRestriction)

def ToLexOrdering(dim, face_id, size1d, index):
    r"""ToLexOrdering(int const dim, int const face_id, int const size1d, int const index) -> int"""
    return _restriction.ToLexOrdering(dim, face_id, size1d, index)
ToLexOrdering = _restriction.ToLexOrdering

def PermuteFaceL2(dim, face_id1, face_id2, orientation, size1d, index):
    r"""PermuteFaceL2(int const dim, int const face_id1, int const face_id2, int const orientation, int const size1d, int const index) -> int"""
    return _restriction.PermuteFaceL2(dim, face_id1, face_id2, orientation, size1d, index)
PermuteFaceL2 = _restriction.PermuteFaceL2

def GetLVectorFaceNbrData(fes, x, ftype):
    r"""GetLVectorFaceNbrData(FiniteElementSpace fes, Vector x, mfem::FaceType ftype) -> Vector"""
    return _restriction.GetLVectorFaceNbrData(fes, x, ftype)
GetLVectorFaceNbrData = _restriction.GetLVectorFaceNbrData

