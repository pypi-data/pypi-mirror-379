/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_bilininteg_WRAP_H_
#define SWIG_bilininteg_WRAP_H_

#include <map>
#include <string>


class SwigDirector_PyBilinearFormIntegrator : public mfem::PyBilinearFormIntegrator, public Swig::Director {

public:
    SwigDirector_PyBilinearFormIntegrator(PyObject *self,mfem::IntegrationRule const *ir=NULL);
    virtual void SetIntRule(mfem::IntegrationRule const *ir);
    virtual mfem::IntegrationRule const *GetDefaultIntegrationRule(mfem::FiniteElement const &trial_fe,mfem::FiniteElement const &test_fe,mfem::ElementTransformation const &trans) const;
    virtual mfem::IntegrationRule const *GetDefaultIntegrationRuleSwigPublic(mfem::FiniteElement const &trial_fe,mfem::FiniteElement const &test_fe,mfem::ElementTransformation const &trans) const {
      return mfem::Integrator::GetDefaultIntegrationRule(trial_fe,test_fe,trans);
    }
    virtual void AssembleElementVector(mfem::FiniteElement const &el,mfem::ElementTransformation &Tr,mfem::Vector const &elfun,mfem::Vector &elvect);
    virtual void AssembleFaceVector(mfem::FiniteElement const &el1,mfem::FiniteElement const &el2,mfem::FaceElementTransformations &Tr,mfem::Vector const &elfun,mfem::Vector &elvect);
    virtual void AssembleElementGrad(mfem::FiniteElement const &el,mfem::ElementTransformation &Tr,mfem::Vector const &elfun,mfem::DenseMatrix &elmat);
    virtual void AssembleFaceGrad(mfem::FiniteElement const &el1,mfem::FiniteElement const &el2,mfem::FaceElementTransformations &Tr,mfem::Vector const &elfun,mfem::DenseMatrix &elmat);
    virtual mfem::real_t GetElementEnergy(mfem::FiniteElement const &el,mfem::ElementTransformation &Tr,mfem::Vector const &elfun);
    virtual void AssemblePA(mfem::FiniteElementSpace const &fes);
    virtual void AssemblePA(mfem::FiniteElementSpace const &trial_fes,mfem::FiniteElementSpace const &test_fes);
    virtual void AssembleGradPA(mfem::Vector const &x,mfem::FiniteElementSpace const &fes);
    virtual mfem::real_t GetLocalStateEnergyPA(mfem::Vector const &x) const;
    virtual void AddMultPA(mfem::Vector const &x,mfem::Vector &y) const;
    virtual void AddMultGradPA(mfem::Vector const &x,mfem::Vector &y) const;
    virtual void AssembleGradDiagonalPA(mfem::Vector &diag) const;
    virtual bool SupportsCeed() const;
    virtual void AssembleMF(mfem::FiniteElementSpace const &fes);
    virtual void AddMultMF(mfem::Vector const &x,mfem::Vector &y) const;
    virtual ~SwigDirector_PyBilinearFormIntegrator();
    virtual void AssembleNURBSPA(mfem::FiniteElementSpace const &fes);
    virtual void AssemblePABoundary(mfem::FiniteElementSpace const &fes);
    virtual void AssemblePAInteriorFaces(mfem::FiniteElementSpace const &fes);
    virtual void AssemblePABoundaryFaces(mfem::FiniteElementSpace const &fes);
    virtual void AssembleDiagonalPA(mfem::Vector &diag);
    virtual void AssembleDiagonalPA_ADAt(mfem::Vector const &D,mfem::Vector &diag);
    virtual void AddMultNURBSPA(mfem::Vector const &x,mfem::Vector &y) const;
    virtual void AddMultTransposePA(mfem::Vector const &x,mfem::Vector &y) const;
    virtual void AssembleEA(mfem::FiniteElementSpace const &fes,mfem::Vector &emat,bool const add=true);
    virtual void AddMultTransposeMF(mfem::Vector const &x,mfem::Vector &y) const;
    virtual void AssembleDiagonalMF(mfem::Vector &diag);
    virtual void AssembleEABoundary(mfem::FiniteElementSpace const &fes,mfem::Vector &ea_data_bdr,bool const add=true);
    virtual void AssembleEAInteriorFaces(mfem::FiniteElementSpace const &fes,mfem::Vector &ea_data_int,mfem::Vector &ea_data_ext,bool const add=true);
    virtual void AssembleEAInteriorFaces(mfem::FiniteElementSpace const &trial_fes,mfem::FiniteElementSpace const &test_fes,mfem::Vector &emat,bool const add=true);
    virtual void AssembleEABoundaryFaces(mfem::FiniteElementSpace const &fes,mfem::Vector &ea_data_bdr,bool const add=true);
    virtual void AssembleElementMatrix(mfem::FiniteElement const &el,mfem::ElementTransformation &Trans,mfem::DenseMatrix &elmat);
    virtual void AssembleElementMatrix2(mfem::FiniteElement const &trial_fe,mfem::FiniteElement const &test_fe,mfem::ElementTransformation &Trans,mfem::DenseMatrix &elmat);
    virtual void AssemblePatchMatrix(int const patch,mfem::FiniteElementSpace const &fes,mfem::SparseMatrix *&smat);
    virtual void AssembleFaceMatrix(mfem::FiniteElement const &el1,mfem::FiniteElement const &el2,mfem::FaceElementTransformations &Trans,mfem::DenseMatrix &elmat);
    virtual void AssembleFaceMatrix(mfem::FiniteElement const &trial_fe1,mfem::FiniteElement const &test_fe1,mfem::FiniteElement const &trial_fe2,mfem::FiniteElement const &test_fe2,mfem::FaceElementTransformations &Trans,mfem::DenseMatrix &elmat);
    virtual void AssembleFaceMatrix(mfem::FiniteElement const &trial_face_fe,mfem::FiniteElement const &test_fe1,mfem::FiniteElement const &test_fe2,mfem::FaceElementTransformations &Trans,mfem::DenseMatrix &elmat);
    virtual void AssembleTraceFaceMatrix(int elem,mfem::FiniteElement const &trial_face_fe,mfem::FiniteElement const &test_fe,mfem::FaceElementTransformations &Trans,mfem::DenseMatrix &elmat);
    virtual void ComputeElementFlux(mfem::FiniteElement const &el,mfem::ElementTransformation &Trans,mfem::Vector &u,mfem::FiniteElement const &fluxelem,mfem::Vector &flux,bool with_coef=true,mfem::IntegrationRule const *ir=NULL);
    virtual mfem::real_t ComputeFluxEnergy(mfem::FiniteElement const &fluxelem,mfem::ElementTransformation &Trans,mfem::Vector &flux,mfem::Vector *d_energy=NULL);
    virtual bool RequiresFaceNormalDerivatives() const;
    virtual void AddMultPAFaceNormalDerivatives(mfem::Vector const &x,mfem::Vector const &dxdn,mfem::Vector &y,mfem::Vector &dydn) const;

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class PyBilinearFormIntegrator doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[43];
#endif

};


#endif
