# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _array
else:
    import _array

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _array.SWIG_PyInstanceMethod_New
_swig_new_static_method = _array.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import mfem._ser.mem_manager
import mfem._ser.globals

def doubleSwap(*args):
    r"""
    doubleSwap(doubleArray arg1, doubleArray arg2)
    doubleSwap(doubleArray2D arg1, doubleArray2D arg2)
    doubleSwap(double & a, double & b)
    """
    return _array.doubleSwap(*args)
doubleSwap = _array.doubleSwap

def intSwap(*args):
    r"""
    intSwap(intArray arg1, intArray arg2)
    intSwap(intArray2D arg1, intArray2D arg2)
    intSwap(int & a, int & b)
    """
    return _array.intSwap(*args)
intSwap = _array.intSwap
class intArray(object):
    r"""Proxy of C++ mfem::Array< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _array.delete_intArray

    def GetData(self, *args):
        r"""
        GetData(intArray self) -> int
        GetData(intArray self) -> int const *
        """
        return _array.intArray_GetData(self, *args)
    GetData = _swig_new_instance_method(_array.intArray_GetData)

    def GetMemory(self, *args):
        r"""
        GetMemory(intArray self) -> mfem::Memory< int >
        GetMemory(intArray self) -> mfem::Memory< int > const &
        """
        return _array.intArray_GetMemory(self, *args)
    GetMemory = _swig_new_instance_method(_array.intArray_GetMemory)

    def UseDevice(self):
        r"""UseDevice(intArray self) -> bool"""
        return _array.intArray_UseDevice(self)
    UseDevice = _swig_new_instance_method(_array.intArray_UseDevice)

    def OwnsData(self):
        r"""OwnsData(intArray self) -> bool"""
        return _array.intArray_OwnsData(self)
    OwnsData = _swig_new_instance_method(_array.intArray_OwnsData)

    def StealData(self, p):
        r"""StealData(intArray self, int ** p)"""
        return _array.intArray_StealData(self, p)
    StealData = _swig_new_instance_method(_array.intArray_StealData)

    def LoseData(self):
        r"""LoseData(intArray self)"""
        return _array.intArray_LoseData(self)
    LoseData = _swig_new_instance_method(_array.intArray_LoseData)

    def MakeDataOwner(self):
        r"""MakeDataOwner(intArray self)"""
        return _array.intArray_MakeDataOwner(self)
    MakeDataOwner = _swig_new_instance_method(_array.intArray_MakeDataOwner)

    def Size(self):
        r"""Size(intArray self) -> int"""
        return _array.intArray_Size(self)
    Size = _swig_new_instance_method(_array.intArray_Size)

    def SetSize(self, *args):
        r"""
        SetSize(intArray self, int nsize)
        SetSize(intArray self, int nsize, int const & initval)
        SetSize(intArray self, int nsize, mfem::MemoryType mt)
        """
        return _array.intArray_SetSize(self, *args)
    SetSize = _swig_new_instance_method(_array.intArray_SetSize)

    def Capacity(self):
        r"""Capacity(intArray self) -> int"""
        return _array.intArray_Capacity(self)
    Capacity = _swig_new_instance_method(_array.intArray_Capacity)

    def Reserve(self, capacity):
        r"""Reserve(intArray self, int capacity)"""
        return _array.intArray_Reserve(self, capacity)
    Reserve = _swig_new_instance_method(_array.intArray_Reserve)

    def Append(self, *args):
        r"""
        Append(intArray self, int const & el) -> int
        Append(intArray self, int const * els, int nels) -> int
        Append(intArray self, intArray els) -> int
        """

        if isinstance(args[0], list):
           return self.Append(self.__class__(args[0]))
        if isinstance(args[0], tuple):
           return self.Append(self.__class__(args[0]))


        return _array.intArray_Append(self, *args)


    def Prepend(self, el):
        r"""Prepend(intArray self, int const & el) -> int"""
        return _array.intArray_Prepend(self, el)
    Prepend = _swig_new_instance_method(_array.intArray_Prepend)

    def Last(self, *args):
        r"""
        Last(intArray self) -> int
        Last(intArray self) -> int const &
        """
        return _array.intArray_Last(self, *args)
    Last = _swig_new_instance_method(_array.intArray_Last)

    def Union(self, el):
        r"""Union(intArray self, int const & el) -> int"""
        return _array.intArray_Union(self, el)
    Union = _swig_new_instance_method(_array.intArray_Union)

    def Find(self, el):
        r"""Find(intArray self, int const & el) -> int"""
        return _array.intArray_Find(self, el)
    Find = _swig_new_instance_method(_array.intArray_Find)

    def FindSorted(self, el):
        r"""FindSorted(intArray self, int const & el) -> int"""
        return _array.intArray_FindSorted(self, el)
    FindSorted = _swig_new_instance_method(_array.intArray_FindSorted)

    def DeleteLast(self):
        r"""DeleteLast(intArray self)"""
        return _array.intArray_DeleteLast(self)
    DeleteLast = _swig_new_instance_method(_array.intArray_DeleteLast)

    def DeleteFirst(self, el):
        r"""DeleteFirst(intArray self, int const & el)"""
        return _array.intArray_DeleteFirst(self, el)
    DeleteFirst = _swig_new_instance_method(_array.intArray_DeleteFirst)

    def DeleteAll(self):
        r"""DeleteAll(intArray self)"""
        return _array.intArray_DeleteAll(self)
    DeleteAll = _swig_new_instance_method(_array.intArray_DeleteAll)

    def ShrinkToFit(self):
        r"""ShrinkToFit(intArray self)"""
        return _array.intArray_ShrinkToFit(self)
    ShrinkToFit = _swig_new_instance_method(_array.intArray_ShrinkToFit)

    def Copy(self, copy):
        r"""Copy(intArray self, intArray copy)"""
        return _array.intArray_Copy(self, copy)
    Copy = _swig_new_instance_method(_array.intArray_Copy)

    def MakeRef(self, *args):
        r"""
        MakeRef(intArray self, int * data_, int size_, bool own_data=False)
        MakeRef(intArray self, int * data_, int size, mfem::MemoryType mt, bool own_data)
        MakeRef(intArray self, intArray master)
        """
        return _array.intArray_MakeRef(self, *args)
    MakeRef = _swig_new_instance_method(_array.intArray_MakeRef)

    def GetSubArray(self, offset, sa_size, sa):
        r"""GetSubArray(intArray self, int offset, int sa_size, intArray sa)"""
        return _array.intArray_GetSubArray(self, offset, sa_size, sa)
    GetSubArray = _swig_new_instance_method(_array.intArray_GetSubArray)

    def Load(self, *args):
        r"""
        Load(intArray self, std::istream & _in, int fmt=0)
        Load(intArray self, int new_size, std::istream & _in)
        """
        return _array.intArray_Load(self, *args)
    Load = _swig_new_instance_method(_array.intArray_Load)

    def Max(self):
        r"""Max(intArray self) -> int"""
        return _array.intArray_Max(self)
    Max = _swig_new_instance_method(_array.intArray_Max)

    def Min(self):
        r"""Min(intArray self) -> int"""
        return _array.intArray_Min(self)
    Min = _swig_new_instance_method(_array.intArray_Min)

    def Sort(self):
        r"""Sort(intArray self)"""
        return _array.intArray_Sort(self)
    Sort = _swig_new_instance_method(_array.intArray_Sort)

    def Unique(self):
        r"""Unique(intArray self)"""
        return _array.intArray_Unique(self)
    Unique = _swig_new_instance_method(_array.intArray_Unique)

    def IsSorted(self):
        r"""IsSorted(intArray self) -> int"""
        return _array.intArray_IsSorted(self)
    IsSorted = _swig_new_instance_method(_array.intArray_IsSorted)

    def IsEmpty(self):
        r"""IsEmpty(intArray self) -> bool"""
        return _array.intArray_IsEmpty(self)
    IsEmpty = _swig_new_instance_method(_array.intArray_IsEmpty)

    def PartialSum(self):
        r"""PartialSum(intArray self)"""
        return _array.intArray_PartialSum(self)
    PartialSum = _swig_new_instance_method(_array.intArray_PartialSum)

    def Sum(self):
        r"""Sum(intArray self) -> int"""
        return _array.intArray_Sum(self)
    Sum = _swig_new_instance_method(_array.intArray_Sum)

    def begin(self, *args):
        r"""
        begin(intArray self) -> int
        begin(intArray self) -> int const *
        """
        return _array.intArray_begin(self, *args)
    begin = _swig_new_instance_method(_array.intArray_begin)

    def end(self, *args):
        r"""
        end(intArray self) -> int
        end(intArray self) -> int const *
        """
        return _array.intArray_end(self, *args)
    end = _swig_new_instance_method(_array.intArray_end)

    def MemoryUsage(self):
        r"""MemoryUsage(intArray self) -> std::size_t"""
        return _array.intArray_MemoryUsage(self)
    MemoryUsage = _swig_new_instance_method(_array.intArray_MemoryUsage)

    def Read(self, on_dev=True):
        r"""Read(intArray self, bool on_dev=True) -> int const *"""
        return _array.intArray_Read(self, on_dev)
    Read = _swig_new_instance_method(_array.intArray_Read)

    def HostRead(self):
        r"""HostRead(intArray self) -> int const *"""
        return _array.intArray_HostRead(self)
    HostRead = _swig_new_instance_method(_array.intArray_HostRead)

    def Write(self, on_dev=True):
        r"""Write(intArray self, bool on_dev=True) -> int *"""
        return _array.intArray_Write(self, on_dev)
    Write = _swig_new_instance_method(_array.intArray_Write)

    def HostWrite(self):
        r"""HostWrite(intArray self) -> int *"""
        return _array.intArray_HostWrite(self)
    HostWrite = _swig_new_instance_method(_array.intArray_HostWrite)

    def ReadWrite(self, on_dev=True):
        r"""ReadWrite(intArray self, bool on_dev=True) -> int *"""
        return _array.intArray_ReadWrite(self, on_dev)
    ReadWrite = _swig_new_instance_method(_array.intArray_ReadWrite)

    def HostReadWrite(self):
        r"""HostReadWrite(intArray self) -> int *"""
        return _array.intArray_HostReadWrite(self)
    HostReadWrite = _swig_new_instance_method(_array.intArray_HostReadWrite)

    def __init__(self, *args):
        r"""
        __init__(intArray self) -> intArray
        __init__(intArray self, mfem::MemoryType mt) -> intArray
        __init__(intArray self, int asize) -> intArray
        __init__(intArray self, int asize, mfem::MemoryType mt) -> intArray
        __init__(intArray self, int * data_, bool own_data=False) -> intArray
        __init__(intArray self, intArray src) -> intArray
        __init__(intArray self, intArray src) -> intArray
        __init__(intArray self, void * List_or_Tuple) -> intArray
        """
        _array.intArray_swiginit(self, _array.new_intArray(*args))

    def __setitem__(self, i, v):
        r"""__setitem__(intArray self, int i, int const v)"""

        i = int(i)
        if hasattr(v, "thisown"):
            v.thisown = False


        return _array.intArray___setitem__(self, i, v)


    def Assign(self, *args):
        r"""
        Assign(intArray self, int const * arg2)
        Assign(intArray self, int const & a)
        """
        return _array.intArray_Assign(self, *args)
    Assign = _swig_new_instance_method(_array.intArray_Assign)

    def ToList(self):
        return [self[i] for i in range(self.Size())]



    def __iter__(self):
        class iter_array:
            def __init__(self, obj):
                self.obj = obj
                self.idx = 0
                self.size = obj.Size()
            def __iter__(self):
                self.idx = 0
            def __next__(self):
                if self.idx < self.size:
                    res = self.obj[self.idx]
                    self.idx += 1
                    return res
                else:
                    raise StopIteration
        return iter_array(self)



    def Print(self, *args):
        r"""
        Print(intArray self, std::ostream & out=out, int width=4)
        Print(intArray self, char const * file, int precision=16)
        """
        return _array.intArray_Print(self, *args)
    Print = _swig_new_instance_method(_array.intArray_Print)

    def PrintGZ(self, file, precision=16):
        r"""PrintGZ(intArray self, char const * file, int precision=16)"""
        return _array.intArray_PrintGZ(self, file, precision)
    PrintGZ = _swig_new_instance_method(_array.intArray_PrintGZ)

    def SaveGZ(self, file, precision=16):
        r"""SaveGZ(intArray self, char const * file, int precision=16)"""
        return _array.intArray_SaveGZ(self, file, precision)
    SaveGZ = _swig_new_instance_method(_array.intArray_SaveGZ)

    def Save(self, *args):
        r"""
        Save(intArray self, std::ostream & out, int fmt=0)
        Save(intArray self, char const * file, int precision=16)
        Save(intArray self)
        """
        return _array.intArray_Save(self, *args)
    Save = _swig_new_instance_method(_array.intArray_Save)

    def __getitem__(self, param):
        r"""__getitem__(intArray self, PyObject * param) -> PyObject *"""
        return _array.intArray___getitem__(self, param)
    __getitem__ = _swig_new_instance_method(_array.intArray___getitem__)

    def GetDataArray(self):
        r"""GetDataArray(intArray self) -> PyObject *"""
        return _array.intArray_GetDataArray(self)
    GetDataArray = _swig_new_instance_method(_array.intArray_GetDataArray)

# Register intArray in _array:
_array.intArray_swigregister(intArray)
class doubleArray(object):
    r"""Proxy of C++ mfem::Array< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _array.delete_doubleArray

    def GetData(self, *args):
        r"""
        GetData(doubleArray self) -> double
        GetData(doubleArray self) -> double const *
        """
        return _array.doubleArray_GetData(self, *args)
    GetData = _swig_new_instance_method(_array.doubleArray_GetData)

    def GetMemory(self, *args):
        r"""
        GetMemory(doubleArray self) -> mfem::Memory< double >
        GetMemory(doubleArray self) -> mfem::Memory< double > const &
        """
        return _array.doubleArray_GetMemory(self, *args)
    GetMemory = _swig_new_instance_method(_array.doubleArray_GetMemory)

    def UseDevice(self):
        r"""UseDevice(doubleArray self) -> bool"""
        return _array.doubleArray_UseDevice(self)
    UseDevice = _swig_new_instance_method(_array.doubleArray_UseDevice)

    def OwnsData(self):
        r"""OwnsData(doubleArray self) -> bool"""
        return _array.doubleArray_OwnsData(self)
    OwnsData = _swig_new_instance_method(_array.doubleArray_OwnsData)

    def StealData(self, p):
        r"""StealData(doubleArray self, double ** p)"""
        return _array.doubleArray_StealData(self, p)
    StealData = _swig_new_instance_method(_array.doubleArray_StealData)

    def LoseData(self):
        r"""LoseData(doubleArray self)"""
        return _array.doubleArray_LoseData(self)
    LoseData = _swig_new_instance_method(_array.doubleArray_LoseData)

    def MakeDataOwner(self):
        r"""MakeDataOwner(doubleArray self)"""
        return _array.doubleArray_MakeDataOwner(self)
    MakeDataOwner = _swig_new_instance_method(_array.doubleArray_MakeDataOwner)

    def Size(self):
        r"""Size(doubleArray self) -> int"""
        return _array.doubleArray_Size(self)
    Size = _swig_new_instance_method(_array.doubleArray_Size)

    def SetSize(self, *args):
        r"""
        SetSize(doubleArray self, int nsize)
        SetSize(doubleArray self, int nsize, double const & initval)
        SetSize(doubleArray self, int nsize, mfem::MemoryType mt)
        """
        return _array.doubleArray_SetSize(self, *args)
    SetSize = _swig_new_instance_method(_array.doubleArray_SetSize)

    def Capacity(self):
        r"""Capacity(doubleArray self) -> int"""
        return _array.doubleArray_Capacity(self)
    Capacity = _swig_new_instance_method(_array.doubleArray_Capacity)

    def Reserve(self, capacity):
        r"""Reserve(doubleArray self, int capacity)"""
        return _array.doubleArray_Reserve(self, capacity)
    Reserve = _swig_new_instance_method(_array.doubleArray_Reserve)

    def Append(self, *args):
        r"""
        Append(doubleArray self, double const & el) -> int
        Append(doubleArray self, double const * els, int nels) -> int
        Append(doubleArray self, doubleArray els) -> int
        """

        if isinstance(args[0], list):
           return self.Append(self.__class__(args[0]))
        if isinstance(args[0], tuple):
           return self.Append(self.__class__(args[0]))


        return _array.doubleArray_Append(self, *args)


    def Prepend(self, el):
        r"""Prepend(doubleArray self, double const & el) -> int"""
        return _array.doubleArray_Prepend(self, el)
    Prepend = _swig_new_instance_method(_array.doubleArray_Prepend)

    def Last(self, *args):
        r"""
        Last(doubleArray self) -> double
        Last(doubleArray self) -> double const &
        """
        return _array.doubleArray_Last(self, *args)
    Last = _swig_new_instance_method(_array.doubleArray_Last)

    def Union(self, el):
        r"""Union(doubleArray self, double const & el) -> int"""
        return _array.doubleArray_Union(self, el)
    Union = _swig_new_instance_method(_array.doubleArray_Union)

    def Find(self, el):
        r"""Find(doubleArray self, double const & el) -> int"""
        return _array.doubleArray_Find(self, el)
    Find = _swig_new_instance_method(_array.doubleArray_Find)

    def FindSorted(self, el):
        r"""FindSorted(doubleArray self, double const & el) -> int"""
        return _array.doubleArray_FindSorted(self, el)
    FindSorted = _swig_new_instance_method(_array.doubleArray_FindSorted)

    def DeleteLast(self):
        r"""DeleteLast(doubleArray self)"""
        return _array.doubleArray_DeleteLast(self)
    DeleteLast = _swig_new_instance_method(_array.doubleArray_DeleteLast)

    def DeleteFirst(self, el):
        r"""DeleteFirst(doubleArray self, double const & el)"""
        return _array.doubleArray_DeleteFirst(self, el)
    DeleteFirst = _swig_new_instance_method(_array.doubleArray_DeleteFirst)

    def DeleteAll(self):
        r"""DeleteAll(doubleArray self)"""
        return _array.doubleArray_DeleteAll(self)
    DeleteAll = _swig_new_instance_method(_array.doubleArray_DeleteAll)

    def ShrinkToFit(self):
        r"""ShrinkToFit(doubleArray self)"""
        return _array.doubleArray_ShrinkToFit(self)
    ShrinkToFit = _swig_new_instance_method(_array.doubleArray_ShrinkToFit)

    def Copy(self, copy):
        r"""Copy(doubleArray self, doubleArray copy)"""
        return _array.doubleArray_Copy(self, copy)
    Copy = _swig_new_instance_method(_array.doubleArray_Copy)

    def MakeRef(self, *args):
        r"""
        MakeRef(doubleArray self, double * data_, int size_, bool own_data=False)
        MakeRef(doubleArray self, double * data_, int size, mfem::MemoryType mt, bool own_data)
        MakeRef(doubleArray self, doubleArray master)
        """
        return _array.doubleArray_MakeRef(self, *args)
    MakeRef = _swig_new_instance_method(_array.doubleArray_MakeRef)

    def GetSubArray(self, offset, sa_size, sa):
        r"""GetSubArray(doubleArray self, int offset, int sa_size, doubleArray sa)"""
        return _array.doubleArray_GetSubArray(self, offset, sa_size, sa)
    GetSubArray = _swig_new_instance_method(_array.doubleArray_GetSubArray)

    def Load(self, *args):
        r"""
        Load(doubleArray self, std::istream & _in, int fmt=0)
        Load(doubleArray self, int new_size, std::istream & _in)
        """
        return _array.doubleArray_Load(self, *args)
    Load = _swig_new_instance_method(_array.doubleArray_Load)

    def Max(self):
        r"""Max(doubleArray self) -> double"""
        return _array.doubleArray_Max(self)
    Max = _swig_new_instance_method(_array.doubleArray_Max)

    def Min(self):
        r"""Min(doubleArray self) -> double"""
        return _array.doubleArray_Min(self)
    Min = _swig_new_instance_method(_array.doubleArray_Min)

    def Sort(self):
        r"""Sort(doubleArray self)"""
        return _array.doubleArray_Sort(self)
    Sort = _swig_new_instance_method(_array.doubleArray_Sort)

    def Unique(self):
        r"""Unique(doubleArray self)"""
        return _array.doubleArray_Unique(self)
    Unique = _swig_new_instance_method(_array.doubleArray_Unique)

    def IsSorted(self):
        r"""IsSorted(doubleArray self) -> int"""
        return _array.doubleArray_IsSorted(self)
    IsSorted = _swig_new_instance_method(_array.doubleArray_IsSorted)

    def IsEmpty(self):
        r"""IsEmpty(doubleArray self) -> bool"""
        return _array.doubleArray_IsEmpty(self)
    IsEmpty = _swig_new_instance_method(_array.doubleArray_IsEmpty)

    def PartialSum(self):
        r"""PartialSum(doubleArray self)"""
        return _array.doubleArray_PartialSum(self)
    PartialSum = _swig_new_instance_method(_array.doubleArray_PartialSum)

    def Sum(self):
        r"""Sum(doubleArray self) -> double"""
        return _array.doubleArray_Sum(self)
    Sum = _swig_new_instance_method(_array.doubleArray_Sum)

    def begin(self, *args):
        r"""
        begin(doubleArray self) -> double
        begin(doubleArray self) -> double const *
        """
        return _array.doubleArray_begin(self, *args)
    begin = _swig_new_instance_method(_array.doubleArray_begin)

    def end(self, *args):
        r"""
        end(doubleArray self) -> double
        end(doubleArray self) -> double const *
        """
        return _array.doubleArray_end(self, *args)
    end = _swig_new_instance_method(_array.doubleArray_end)

    def MemoryUsage(self):
        r"""MemoryUsage(doubleArray self) -> std::size_t"""
        return _array.doubleArray_MemoryUsage(self)
    MemoryUsage = _swig_new_instance_method(_array.doubleArray_MemoryUsage)

    def Read(self, on_dev=True):
        r"""Read(doubleArray self, bool on_dev=True) -> double const *"""
        return _array.doubleArray_Read(self, on_dev)
    Read = _swig_new_instance_method(_array.doubleArray_Read)

    def HostRead(self):
        r"""HostRead(doubleArray self) -> double const *"""
        return _array.doubleArray_HostRead(self)
    HostRead = _swig_new_instance_method(_array.doubleArray_HostRead)

    def Write(self, on_dev=True):
        r"""Write(doubleArray self, bool on_dev=True) -> double *"""
        return _array.doubleArray_Write(self, on_dev)
    Write = _swig_new_instance_method(_array.doubleArray_Write)

    def HostWrite(self):
        r"""HostWrite(doubleArray self) -> double *"""
        return _array.doubleArray_HostWrite(self)
    HostWrite = _swig_new_instance_method(_array.doubleArray_HostWrite)

    def ReadWrite(self, on_dev=True):
        r"""ReadWrite(doubleArray self, bool on_dev=True) -> double *"""
        return _array.doubleArray_ReadWrite(self, on_dev)
    ReadWrite = _swig_new_instance_method(_array.doubleArray_ReadWrite)

    def HostReadWrite(self):
        r"""HostReadWrite(doubleArray self) -> double *"""
        return _array.doubleArray_HostReadWrite(self)
    HostReadWrite = _swig_new_instance_method(_array.doubleArray_HostReadWrite)

    def __init__(self, *args):
        r"""
        __init__(doubleArray self) -> doubleArray
        __init__(doubleArray self, mfem::MemoryType mt) -> doubleArray
        __init__(doubleArray self, int asize) -> doubleArray
        __init__(doubleArray self, int asize, mfem::MemoryType mt) -> doubleArray
        __init__(doubleArray self, double * data_, bool own_data=False) -> doubleArray
        __init__(doubleArray self, doubleArray src) -> doubleArray
        __init__(doubleArray self, doubleArray src) -> doubleArray
        __init__(doubleArray self, void * List_or_Tuple) -> doubleArray
        """
        _array.doubleArray_swiginit(self, _array.new_doubleArray(*args))

    def __setitem__(self, i, v):
        r"""__setitem__(doubleArray self, int i, double const v)"""

        i = int(i)
        if hasattr(v, "thisown"):
            v.thisown = False


        return _array.doubleArray___setitem__(self, i, v)


    def Assign(self, *args):
        r"""
        Assign(doubleArray self, double const * arg2)
        Assign(doubleArray self, double const & a)
        """
        return _array.doubleArray_Assign(self, *args)
    Assign = _swig_new_instance_method(_array.doubleArray_Assign)

    def ToList(self):
        return [self[i] for i in range(self.Size())]



    def __iter__(self):
        class iter_array:
            def __init__(self, obj):
                self.obj = obj
                self.idx = 0
                self.size = obj.Size()
            def __iter__(self):
                self.idx = 0
            def __next__(self):
                if self.idx < self.size:
                    res = self.obj[self.idx]
                    self.idx += 1
                    return res
                else:
                    raise StopIteration
        return iter_array(self)



    def Print(self, *args):
        r"""
        Print(doubleArray self, std::ostream & out=out, int width=4)
        Print(doubleArray self, char const * file, int precision=16)
        """
        return _array.doubleArray_Print(self, *args)
    Print = _swig_new_instance_method(_array.doubleArray_Print)

    def PrintGZ(self, file, precision=16):
        r"""PrintGZ(doubleArray self, char const * file, int precision=16)"""
        return _array.doubleArray_PrintGZ(self, file, precision)
    PrintGZ = _swig_new_instance_method(_array.doubleArray_PrintGZ)

    def SaveGZ(self, file, precision=16):
        r"""SaveGZ(doubleArray self, char const * file, int precision=16)"""
        return _array.doubleArray_SaveGZ(self, file, precision)
    SaveGZ = _swig_new_instance_method(_array.doubleArray_SaveGZ)

    def Save(self, *args):
        r"""
        Save(doubleArray self, std::ostream & out, int fmt=0)
        Save(doubleArray self, char const * file, int precision=16)
        Save(doubleArray self)
        """
        return _array.doubleArray_Save(self, *args)
    Save = _swig_new_instance_method(_array.doubleArray_Save)

    def __getitem__(self, param):
        r"""__getitem__(doubleArray self, PyObject * param) -> PyObject *"""
        return _array.doubleArray___getitem__(self, param)
    __getitem__ = _swig_new_instance_method(_array.doubleArray___getitem__)

    def GetDataArray(self):
        r"""GetDataArray(doubleArray self) -> PyObject *"""
        return _array.doubleArray_GetDataArray(self)
    GetDataArray = _swig_new_instance_method(_array.doubleArray_GetDataArray)

# Register doubleArray in _array:
_array.doubleArray_swigregister(doubleArray)
class int8Array(object):
    r"""Proxy of C++ mfem::Array< char > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _array.delete_int8Array

    def GetData(self, *args):
        r"""
        GetData(int8Array self) -> char
        GetData(int8Array self) -> char const *
        """
        return _array.int8Array_GetData(self, *args)
    GetData = _swig_new_instance_method(_array.int8Array_GetData)

    def GetMemory(self, *args):
        r"""
        GetMemory(int8Array self) -> mfem::Memory< char >
        GetMemory(int8Array self) -> mfem::Memory< char > const &
        """
        return _array.int8Array_GetMemory(self, *args)
    GetMemory = _swig_new_instance_method(_array.int8Array_GetMemory)

    def UseDevice(self):
        r"""UseDevice(int8Array self) -> bool"""
        return _array.int8Array_UseDevice(self)
    UseDevice = _swig_new_instance_method(_array.int8Array_UseDevice)

    def OwnsData(self):
        r"""OwnsData(int8Array self) -> bool"""
        return _array.int8Array_OwnsData(self)
    OwnsData = _swig_new_instance_method(_array.int8Array_OwnsData)

    def StealData(self, p):
        r"""StealData(int8Array self, char ** p)"""
        return _array.int8Array_StealData(self, p)
    StealData = _swig_new_instance_method(_array.int8Array_StealData)

    def LoseData(self):
        r"""LoseData(int8Array self)"""
        return _array.int8Array_LoseData(self)
    LoseData = _swig_new_instance_method(_array.int8Array_LoseData)

    def MakeDataOwner(self):
        r"""MakeDataOwner(int8Array self)"""
        return _array.int8Array_MakeDataOwner(self)
    MakeDataOwner = _swig_new_instance_method(_array.int8Array_MakeDataOwner)

    def Size(self):
        r"""Size(int8Array self) -> int"""
        return _array.int8Array_Size(self)
    Size = _swig_new_instance_method(_array.int8Array_Size)

    def SetSize(self, *args):
        r"""
        SetSize(int8Array self, int nsize)
        SetSize(int8Array self, int nsize, char const & initval)
        SetSize(int8Array self, int nsize, mfem::MemoryType mt)
        """
        return _array.int8Array_SetSize(self, *args)
    SetSize = _swig_new_instance_method(_array.int8Array_SetSize)

    def Capacity(self):
        r"""Capacity(int8Array self) -> int"""
        return _array.int8Array_Capacity(self)
    Capacity = _swig_new_instance_method(_array.int8Array_Capacity)

    def Reserve(self, capacity):
        r"""Reserve(int8Array self, int capacity)"""
        return _array.int8Array_Reserve(self, capacity)
    Reserve = _swig_new_instance_method(_array.int8Array_Reserve)

    def Append(self, *args):
        r"""
        Append(int8Array self, char const & el) -> int
        Append(int8Array self, char const * els, int nels) -> int
        Append(int8Array self, int8Array els) -> int
        """

        if isinstance(args[0], list):
           return self.Append(self.__class__(args[0]))
        if isinstance(args[0], tuple):
           return self.Append(self.__class__(args[0]))


        return _array.int8Array_Append(self, *args)


    def Prepend(self, el):
        r"""Prepend(int8Array self, char const & el) -> int"""
        return _array.int8Array_Prepend(self, el)
    Prepend = _swig_new_instance_method(_array.int8Array_Prepend)

    def Last(self, *args):
        r"""
        Last(int8Array self) -> char
        Last(int8Array self) -> char const &
        """
        return _array.int8Array_Last(self, *args)
    Last = _swig_new_instance_method(_array.int8Array_Last)

    def Union(self, el):
        r"""Union(int8Array self, char const & el) -> int"""
        return _array.int8Array_Union(self, el)
    Union = _swig_new_instance_method(_array.int8Array_Union)

    def Find(self, el):
        r"""Find(int8Array self, char const & el) -> int"""
        return _array.int8Array_Find(self, el)
    Find = _swig_new_instance_method(_array.int8Array_Find)

    def FindSorted(self, el):
        r"""FindSorted(int8Array self, char const & el) -> int"""
        return _array.int8Array_FindSorted(self, el)
    FindSorted = _swig_new_instance_method(_array.int8Array_FindSorted)

    def DeleteLast(self):
        r"""DeleteLast(int8Array self)"""
        return _array.int8Array_DeleteLast(self)
    DeleteLast = _swig_new_instance_method(_array.int8Array_DeleteLast)

    def DeleteFirst(self, el):
        r"""DeleteFirst(int8Array self, char const & el)"""
        return _array.int8Array_DeleteFirst(self, el)
    DeleteFirst = _swig_new_instance_method(_array.int8Array_DeleteFirst)

    def DeleteAll(self):
        r"""DeleteAll(int8Array self)"""
        return _array.int8Array_DeleteAll(self)
    DeleteAll = _swig_new_instance_method(_array.int8Array_DeleteAll)

    def ShrinkToFit(self):
        r"""ShrinkToFit(int8Array self)"""
        return _array.int8Array_ShrinkToFit(self)
    ShrinkToFit = _swig_new_instance_method(_array.int8Array_ShrinkToFit)

    def Copy(self, copy):
        r"""Copy(int8Array self, int8Array copy)"""
        return _array.int8Array_Copy(self, copy)
    Copy = _swig_new_instance_method(_array.int8Array_Copy)

    def MakeRef(self, *args):
        r"""
        MakeRef(int8Array self, char * data_, int size_, bool own_data=False)
        MakeRef(int8Array self, char * data_, int size, mfem::MemoryType mt, bool own_data)
        MakeRef(int8Array self, int8Array master)
        """
        return _array.int8Array_MakeRef(self, *args)
    MakeRef = _swig_new_instance_method(_array.int8Array_MakeRef)

    def GetSubArray(self, offset, sa_size, sa):
        r"""GetSubArray(int8Array self, int offset, int sa_size, int8Array sa)"""
        return _array.int8Array_GetSubArray(self, offset, sa_size, sa)
    GetSubArray = _swig_new_instance_method(_array.int8Array_GetSubArray)

    def Load(self, *args):
        r"""
        Load(int8Array self, std::istream & _in, int fmt=0)
        Load(int8Array self, int new_size, std::istream & _in)
        """
        return _array.int8Array_Load(self, *args)
    Load = _swig_new_instance_method(_array.int8Array_Load)

    def Max(self):
        r"""Max(int8Array self) -> char"""
        return _array.int8Array_Max(self)
    Max = _swig_new_instance_method(_array.int8Array_Max)

    def Min(self):
        r"""Min(int8Array self) -> char"""
        return _array.int8Array_Min(self)
    Min = _swig_new_instance_method(_array.int8Array_Min)

    def Sort(self):
        r"""Sort(int8Array self)"""
        return _array.int8Array_Sort(self)
    Sort = _swig_new_instance_method(_array.int8Array_Sort)

    def Unique(self):
        r"""Unique(int8Array self)"""
        return _array.int8Array_Unique(self)
    Unique = _swig_new_instance_method(_array.int8Array_Unique)

    def IsSorted(self):
        r"""IsSorted(int8Array self) -> int"""
        return _array.int8Array_IsSorted(self)
    IsSorted = _swig_new_instance_method(_array.int8Array_IsSorted)

    def IsEmpty(self):
        r"""IsEmpty(int8Array self) -> bool"""
        return _array.int8Array_IsEmpty(self)
    IsEmpty = _swig_new_instance_method(_array.int8Array_IsEmpty)

    def PartialSum(self):
        r"""PartialSum(int8Array self)"""
        return _array.int8Array_PartialSum(self)
    PartialSum = _swig_new_instance_method(_array.int8Array_PartialSum)

    def Sum(self):
        r"""Sum(int8Array self) -> char"""
        return _array.int8Array_Sum(self)
    Sum = _swig_new_instance_method(_array.int8Array_Sum)

    def begin(self, *args):
        r"""
        begin(int8Array self) -> char
        begin(int8Array self) -> char const *
        """
        return _array.int8Array_begin(self, *args)
    begin = _swig_new_instance_method(_array.int8Array_begin)

    def end(self, *args):
        r"""
        end(int8Array self) -> char
        end(int8Array self) -> char const *
        """
        return _array.int8Array_end(self, *args)
    end = _swig_new_instance_method(_array.int8Array_end)

    def MemoryUsage(self):
        r"""MemoryUsage(int8Array self) -> std::size_t"""
        return _array.int8Array_MemoryUsage(self)
    MemoryUsage = _swig_new_instance_method(_array.int8Array_MemoryUsage)

    def Read(self, on_dev=True):
        r"""Read(int8Array self, bool on_dev=True) -> char const *"""
        return _array.int8Array_Read(self, on_dev)
    Read = _swig_new_instance_method(_array.int8Array_Read)

    def HostRead(self):
        r"""HostRead(int8Array self) -> char const *"""
        return _array.int8Array_HostRead(self)
    HostRead = _swig_new_instance_method(_array.int8Array_HostRead)

    def Write(self, on_dev=True):
        r"""Write(int8Array self, bool on_dev=True) -> char *"""
        return _array.int8Array_Write(self, on_dev)
    Write = _swig_new_instance_method(_array.int8Array_Write)

    def HostWrite(self):
        r"""HostWrite(int8Array self) -> char *"""
        return _array.int8Array_HostWrite(self)
    HostWrite = _swig_new_instance_method(_array.int8Array_HostWrite)

    def ReadWrite(self, on_dev=True):
        r"""ReadWrite(int8Array self, bool on_dev=True) -> char *"""
        return _array.int8Array_ReadWrite(self, on_dev)
    ReadWrite = _swig_new_instance_method(_array.int8Array_ReadWrite)

    def HostReadWrite(self):
        r"""HostReadWrite(int8Array self) -> char *"""
        return _array.int8Array_HostReadWrite(self)
    HostReadWrite = _swig_new_instance_method(_array.int8Array_HostReadWrite)

    def __init__(self, *args):
        r"""
        __init__(int8Array self) -> int8Array
        __init__(int8Array self, mfem::MemoryType mt) -> int8Array
        __init__(int8Array self, int asize) -> int8Array
        __init__(int8Array self, int asize, mfem::MemoryType mt) -> int8Array
        __init__(int8Array self, char * data_, int asize, bool own_data=False) -> int8Array
        __init__(int8Array self, int8Array src) -> int8Array
        __init__(int8Array self, int8Array src) -> int8Array
        __init__(int8Array self, void * List_or_Tuple, char * _unused) -> int8Array
        """
        _array.int8Array_swiginit(self, _array.new_int8Array(*args))

    def __setitem__(self, i, v):
        r"""__setitem__(int8Array self, int i, char const v)"""

        i = int(i)
        if hasattr(v, "thisown"):
            v.thisown = False


        return _array.int8Array___setitem__(self, i, v)


    def Assign(self, *args):
        r"""
        Assign(int8Array self, char const * arg2)
        Assign(int8Array self, char const & a)
        """
        return _array.int8Array_Assign(self, *args)
    Assign = _swig_new_instance_method(_array.int8Array_Assign)

    def ToList(self):
        return [self[i] for i in range(self.Size())]



    def __iter__(self):
        class iter_array:
            def __init__(self, obj):
                self.obj = obj
                self.idx = 0
                self.size = obj.Size()
            def __iter__(self):
                self.idx = 0
            def __next__(self):
                if self.idx < self.size:
                    res = self.obj[self.idx]
                    self.idx += 1
                    return res
                else:
                    raise StopIteration
        return iter_array(self)



    def Print(self, *args):
        r"""
        Print(int8Array self, std::ostream & out=out, int width=4)
        Print(int8Array self, char const * file, int precision=16)
        """
        return _array.int8Array_Print(self, *args)
    Print = _swig_new_instance_method(_array.int8Array_Print)

    def PrintGZ(self, file, precision=16):
        r"""PrintGZ(int8Array self, char const * file, int precision=16)"""
        return _array.int8Array_PrintGZ(self, file, precision)
    PrintGZ = _swig_new_instance_method(_array.int8Array_PrintGZ)

    def SaveGZ(self, file, precision=16):
        r"""SaveGZ(int8Array self, char const * file, int precision=16)"""
        return _array.int8Array_SaveGZ(self, file, precision)
    SaveGZ = _swig_new_instance_method(_array.int8Array_SaveGZ)

    def Save(self, *args):
        r"""
        Save(int8Array self, std::ostream & out, int fmt=0)
        Save(int8Array self, char const * file, int precision=16)
        Save(int8Array self)
        """
        return _array.int8Array_Save(self, *args)
    Save = _swig_new_instance_method(_array.int8Array_Save)

    def __getitem__(self, param):
        r"""__getitem__(int8Array self, PyObject * param) -> PyObject *"""
        return _array.int8Array___getitem__(self, param)
    __getitem__ = _swig_new_instance_method(_array.int8Array___getitem__)

    def GetDataArray(self):
        r"""GetDataArray(int8Array self) -> PyObject *"""
        return _array.int8Array_GetDataArray(self)
    GetDataArray = _swig_new_instance_method(_array.int8Array_GetDataArray)

# Register int8Array in _array:
_array.int8Array_swigregister(int8Array)
class int64Array(object):
    r"""Proxy of C++ mfem::Array< long long > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _array.delete_int64Array

    def GetData(self, *args):
        r"""
        GetData(int64Array self) -> long long
        GetData(int64Array self) -> long long const *
        """
        return _array.int64Array_GetData(self, *args)
    GetData = _swig_new_instance_method(_array.int64Array_GetData)

    def GetMemory(self, *args):
        r"""
        GetMemory(int64Array self) -> mfem::Memory< long long >
        GetMemory(int64Array self) -> mfem::Memory< long long > const &
        """
        return _array.int64Array_GetMemory(self, *args)
    GetMemory = _swig_new_instance_method(_array.int64Array_GetMemory)

    def UseDevice(self):
        r"""UseDevice(int64Array self) -> bool"""
        return _array.int64Array_UseDevice(self)
    UseDevice = _swig_new_instance_method(_array.int64Array_UseDevice)

    def OwnsData(self):
        r"""OwnsData(int64Array self) -> bool"""
        return _array.int64Array_OwnsData(self)
    OwnsData = _swig_new_instance_method(_array.int64Array_OwnsData)

    def StealData(self, p):
        r"""StealData(int64Array self, long long ** p)"""
        return _array.int64Array_StealData(self, p)
    StealData = _swig_new_instance_method(_array.int64Array_StealData)

    def LoseData(self):
        r"""LoseData(int64Array self)"""
        return _array.int64Array_LoseData(self)
    LoseData = _swig_new_instance_method(_array.int64Array_LoseData)

    def MakeDataOwner(self):
        r"""MakeDataOwner(int64Array self)"""
        return _array.int64Array_MakeDataOwner(self)
    MakeDataOwner = _swig_new_instance_method(_array.int64Array_MakeDataOwner)

    def Size(self):
        r"""Size(int64Array self) -> int"""
        return _array.int64Array_Size(self)
    Size = _swig_new_instance_method(_array.int64Array_Size)

    def SetSize(self, *args):
        r"""
        SetSize(int64Array self, int nsize)
        SetSize(int64Array self, int nsize, long long const & initval)
        SetSize(int64Array self, int nsize, mfem::MemoryType mt)
        """
        return _array.int64Array_SetSize(self, *args)
    SetSize = _swig_new_instance_method(_array.int64Array_SetSize)

    def Capacity(self):
        r"""Capacity(int64Array self) -> int"""
        return _array.int64Array_Capacity(self)
    Capacity = _swig_new_instance_method(_array.int64Array_Capacity)

    def Reserve(self, capacity):
        r"""Reserve(int64Array self, int capacity)"""
        return _array.int64Array_Reserve(self, capacity)
    Reserve = _swig_new_instance_method(_array.int64Array_Reserve)

    def Append(self, *args):
        r"""
        Append(int64Array self, long long const & el) -> int
        Append(int64Array self, long long const * els, int nels) -> int
        Append(int64Array self, int64Array els) -> int
        """

        if isinstance(args[0], list):
           return self.Append(self.__class__(args[0]))
        if isinstance(args[0], tuple):
           return self.Append(self.__class__(args[0]))


        return _array.int64Array_Append(self, *args)


    def Prepend(self, el):
        r"""Prepend(int64Array self, long long const & el) -> int"""
        return _array.int64Array_Prepend(self, el)
    Prepend = _swig_new_instance_method(_array.int64Array_Prepend)

    def Last(self, *args):
        r"""
        Last(int64Array self) -> long long
        Last(int64Array self) -> long long const &
        """
        return _array.int64Array_Last(self, *args)
    Last = _swig_new_instance_method(_array.int64Array_Last)

    def Union(self, el):
        r"""Union(int64Array self, long long const & el) -> int"""
        return _array.int64Array_Union(self, el)
    Union = _swig_new_instance_method(_array.int64Array_Union)

    def Find(self, el):
        r"""Find(int64Array self, long long const & el) -> int"""
        return _array.int64Array_Find(self, el)
    Find = _swig_new_instance_method(_array.int64Array_Find)

    def FindSorted(self, el):
        r"""FindSorted(int64Array self, long long const & el) -> int"""
        return _array.int64Array_FindSorted(self, el)
    FindSorted = _swig_new_instance_method(_array.int64Array_FindSorted)

    def DeleteLast(self):
        r"""DeleteLast(int64Array self)"""
        return _array.int64Array_DeleteLast(self)
    DeleteLast = _swig_new_instance_method(_array.int64Array_DeleteLast)

    def DeleteFirst(self, el):
        r"""DeleteFirst(int64Array self, long long const & el)"""
        return _array.int64Array_DeleteFirst(self, el)
    DeleteFirst = _swig_new_instance_method(_array.int64Array_DeleteFirst)

    def DeleteAll(self):
        r"""DeleteAll(int64Array self)"""
        return _array.int64Array_DeleteAll(self)
    DeleteAll = _swig_new_instance_method(_array.int64Array_DeleteAll)

    def ShrinkToFit(self):
        r"""ShrinkToFit(int64Array self)"""
        return _array.int64Array_ShrinkToFit(self)
    ShrinkToFit = _swig_new_instance_method(_array.int64Array_ShrinkToFit)

    def Copy(self, copy):
        r"""Copy(int64Array self, int64Array copy)"""
        return _array.int64Array_Copy(self, copy)
    Copy = _swig_new_instance_method(_array.int64Array_Copy)

    def MakeRef(self, *args):
        r"""
        MakeRef(int64Array self, long long * data_, int size_, bool own_data=False)
        MakeRef(int64Array self, long long * data_, int size, mfem::MemoryType mt, bool own_data)
        MakeRef(int64Array self, int64Array master)
        """
        return _array.int64Array_MakeRef(self, *args)
    MakeRef = _swig_new_instance_method(_array.int64Array_MakeRef)

    def GetSubArray(self, offset, sa_size, sa):
        r"""GetSubArray(int64Array self, int offset, int sa_size, int64Array sa)"""
        return _array.int64Array_GetSubArray(self, offset, sa_size, sa)
    GetSubArray = _swig_new_instance_method(_array.int64Array_GetSubArray)

    def Load(self, *args):
        r"""
        Load(int64Array self, std::istream & _in, int fmt=0)
        Load(int64Array self, int new_size, std::istream & _in)
        """
        return _array.int64Array_Load(self, *args)
    Load = _swig_new_instance_method(_array.int64Array_Load)

    def Max(self):
        r"""Max(int64Array self) -> long long"""
        return _array.int64Array_Max(self)
    Max = _swig_new_instance_method(_array.int64Array_Max)

    def Min(self):
        r"""Min(int64Array self) -> long long"""
        return _array.int64Array_Min(self)
    Min = _swig_new_instance_method(_array.int64Array_Min)

    def Sort(self):
        r"""Sort(int64Array self)"""
        return _array.int64Array_Sort(self)
    Sort = _swig_new_instance_method(_array.int64Array_Sort)

    def Unique(self):
        r"""Unique(int64Array self)"""
        return _array.int64Array_Unique(self)
    Unique = _swig_new_instance_method(_array.int64Array_Unique)

    def IsSorted(self):
        r"""IsSorted(int64Array self) -> int"""
        return _array.int64Array_IsSorted(self)
    IsSorted = _swig_new_instance_method(_array.int64Array_IsSorted)

    def IsEmpty(self):
        r"""IsEmpty(int64Array self) -> bool"""
        return _array.int64Array_IsEmpty(self)
    IsEmpty = _swig_new_instance_method(_array.int64Array_IsEmpty)

    def PartialSum(self):
        r"""PartialSum(int64Array self)"""
        return _array.int64Array_PartialSum(self)
    PartialSum = _swig_new_instance_method(_array.int64Array_PartialSum)

    def Sum(self):
        r"""Sum(int64Array self) -> long long"""
        return _array.int64Array_Sum(self)
    Sum = _swig_new_instance_method(_array.int64Array_Sum)

    def begin(self, *args):
        r"""
        begin(int64Array self) -> long long
        begin(int64Array self) -> long long const *
        """
        return _array.int64Array_begin(self, *args)
    begin = _swig_new_instance_method(_array.int64Array_begin)

    def end(self, *args):
        r"""
        end(int64Array self) -> long long
        end(int64Array self) -> long long const *
        """
        return _array.int64Array_end(self, *args)
    end = _swig_new_instance_method(_array.int64Array_end)

    def MemoryUsage(self):
        r"""MemoryUsage(int64Array self) -> std::size_t"""
        return _array.int64Array_MemoryUsage(self)
    MemoryUsage = _swig_new_instance_method(_array.int64Array_MemoryUsage)

    def Read(self, on_dev=True):
        r"""Read(int64Array self, bool on_dev=True) -> long long const *"""
        return _array.int64Array_Read(self, on_dev)
    Read = _swig_new_instance_method(_array.int64Array_Read)

    def HostRead(self):
        r"""HostRead(int64Array self) -> long long const *"""
        return _array.int64Array_HostRead(self)
    HostRead = _swig_new_instance_method(_array.int64Array_HostRead)

    def Write(self, on_dev=True):
        r"""Write(int64Array self, bool on_dev=True) -> long long *"""
        return _array.int64Array_Write(self, on_dev)
    Write = _swig_new_instance_method(_array.int64Array_Write)

    def HostWrite(self):
        r"""HostWrite(int64Array self) -> long long *"""
        return _array.int64Array_HostWrite(self)
    HostWrite = _swig_new_instance_method(_array.int64Array_HostWrite)

    def ReadWrite(self, on_dev=True):
        r"""ReadWrite(int64Array self, bool on_dev=True) -> long long *"""
        return _array.int64Array_ReadWrite(self, on_dev)
    ReadWrite = _swig_new_instance_method(_array.int64Array_ReadWrite)

    def HostReadWrite(self):
        r"""HostReadWrite(int64Array self) -> long long *"""
        return _array.int64Array_HostReadWrite(self)
    HostReadWrite = _swig_new_instance_method(_array.int64Array_HostReadWrite)

    def __init__(self, *args):
        r"""
        __init__(int64Array self) -> int64Array
        __init__(int64Array self, mfem::MemoryType mt) -> int64Array
        __init__(int64Array self, int asize) -> int64Array
        __init__(int64Array self, int asize, mfem::MemoryType mt) -> int64Array
        __init__(int64Array self, long long * data_, int asize, bool own_data=False) -> int64Array
        __init__(int64Array self, int64Array src) -> int64Array
        __init__(int64Array self, int64Array src) -> int64Array
        __init__(int64Array self, void * List_or_Tuple, long long * _unused) -> int64Array
        """
        _array.int64Array_swiginit(self, _array.new_int64Array(*args))

    def __setitem__(self, i, v):
        r"""__setitem__(int64Array self, int i, long long const v)"""

        i = int(i)
        if hasattr(v, "thisown"):
            v.thisown = False


        return _array.int64Array___setitem__(self, i, v)


    def Assign(self, *args):
        r"""
        Assign(int64Array self, long long const * arg2)
        Assign(int64Array self, long long const & a)
        """
        return _array.int64Array_Assign(self, *args)
    Assign = _swig_new_instance_method(_array.int64Array_Assign)

    def ToList(self):
        return [self[i] for i in range(self.Size())]



    def __iter__(self):
        class iter_array:
            def __init__(self, obj):
                self.obj = obj
                self.idx = 0
                self.size = obj.Size()
            def __iter__(self):
                self.idx = 0
            def __next__(self):
                if self.idx < self.size:
                    res = self.obj[self.idx]
                    self.idx += 1
                    return res
                else:
                    raise StopIteration
        return iter_array(self)



    def Print(self, *args):
        r"""
        Print(int64Array self, std::ostream & out=out, int width=4)
        Print(int64Array self, char const * file, int precision=16)
        """
        return _array.int64Array_Print(self, *args)
    Print = _swig_new_instance_method(_array.int64Array_Print)

    def PrintGZ(self, file, precision=16):
        r"""PrintGZ(int64Array self, char const * file, int precision=16)"""
        return _array.int64Array_PrintGZ(self, file, precision)
    PrintGZ = _swig_new_instance_method(_array.int64Array_PrintGZ)

    def SaveGZ(self, file, precision=16):
        r"""SaveGZ(int64Array self, char const * file, int precision=16)"""
        return _array.int64Array_SaveGZ(self, file, precision)
    SaveGZ = _swig_new_instance_method(_array.int64Array_SaveGZ)

    def Save(self, *args):
        r"""
        Save(int64Array self, std::ostream & out, int fmt=0)
        Save(int64Array self, char const * file, int precision=16)
        Save(int64Array self)
        """
        return _array.int64Array_Save(self, *args)
    Save = _swig_new_instance_method(_array.int64Array_Save)

    def __getitem__(self, param):
        r"""__getitem__(int64Array self, PyObject * param) -> PyObject *"""
        return _array.int64Array___getitem__(self, param)
    __getitem__ = _swig_new_instance_method(_array.int64Array___getitem__)

    def GetDataArray(self):
        r"""GetDataArray(int64Array self) -> PyObject *"""
        return _array.int64Array_GetDataArray(self)
    GetDataArray = _swig_new_instance_method(_array.int64Array_GetDataArray)

# Register int64Array in _array:
_array.int64Array_swigregister(int64Array)
class boolArray(object):
    r"""Proxy of C++ mfem::Array< bool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _array.delete_boolArray

    def GetData(self, *args):
        r"""
        GetData(boolArray self) -> bool
        GetData(boolArray self) -> bool const *
        """
        return _array.boolArray_GetData(self, *args)
    GetData = _swig_new_instance_method(_array.boolArray_GetData)

    def GetMemory(self, *args):
        r"""
        GetMemory(boolArray self) -> mfem::Memory< bool >
        GetMemory(boolArray self) -> mfem::Memory< bool > const &
        """
        return _array.boolArray_GetMemory(self, *args)
    GetMemory = _swig_new_instance_method(_array.boolArray_GetMemory)

    def UseDevice(self):
        r"""UseDevice(boolArray self) -> bool"""
        return _array.boolArray_UseDevice(self)
    UseDevice = _swig_new_instance_method(_array.boolArray_UseDevice)

    def OwnsData(self):
        r"""OwnsData(boolArray self) -> bool"""
        return _array.boolArray_OwnsData(self)
    OwnsData = _swig_new_instance_method(_array.boolArray_OwnsData)

    def StealData(self, p):
        r"""StealData(boolArray self, bool ** p)"""
        return _array.boolArray_StealData(self, p)
    StealData = _swig_new_instance_method(_array.boolArray_StealData)

    def LoseData(self):
        r"""LoseData(boolArray self)"""
        return _array.boolArray_LoseData(self)
    LoseData = _swig_new_instance_method(_array.boolArray_LoseData)

    def MakeDataOwner(self):
        r"""MakeDataOwner(boolArray self)"""
        return _array.boolArray_MakeDataOwner(self)
    MakeDataOwner = _swig_new_instance_method(_array.boolArray_MakeDataOwner)

    def Size(self):
        r"""Size(boolArray self) -> int"""
        return _array.boolArray_Size(self)
    Size = _swig_new_instance_method(_array.boolArray_Size)

    def SetSize(self, *args):
        r"""
        SetSize(boolArray self, int nsize)
        SetSize(boolArray self, int nsize, bool const & initval)
        SetSize(boolArray self, int nsize, mfem::MemoryType mt)
        """
        return _array.boolArray_SetSize(self, *args)
    SetSize = _swig_new_instance_method(_array.boolArray_SetSize)

    def Capacity(self):
        r"""Capacity(boolArray self) -> int"""
        return _array.boolArray_Capacity(self)
    Capacity = _swig_new_instance_method(_array.boolArray_Capacity)

    def Reserve(self, capacity):
        r"""Reserve(boolArray self, int capacity)"""
        return _array.boolArray_Reserve(self, capacity)
    Reserve = _swig_new_instance_method(_array.boolArray_Reserve)

    def Append(self, *args):
        r"""
        Append(boolArray self, bool const & el) -> int
        Append(boolArray self, bool const * els, int nels) -> int
        Append(boolArray self, boolArray els) -> int
        """

        if isinstance(args[0], list):
           return self.Append(self.__class__(args[0]))
        if isinstance(args[0], tuple):
           return self.Append(self.__class__(args[0]))


        return _array.boolArray_Append(self, *args)


    def Prepend(self, el):
        r"""Prepend(boolArray self, bool const & el) -> int"""
        return _array.boolArray_Prepend(self, el)
    Prepend = _swig_new_instance_method(_array.boolArray_Prepend)

    def Last(self, *args):
        r"""
        Last(boolArray self) -> bool
        Last(boolArray self) -> bool const &
        """
        return _array.boolArray_Last(self, *args)
    Last = _swig_new_instance_method(_array.boolArray_Last)

    def Union(self, el):
        r"""Union(boolArray self, bool const & el) -> int"""
        return _array.boolArray_Union(self, el)
    Union = _swig_new_instance_method(_array.boolArray_Union)

    def Find(self, el):
        r"""Find(boolArray self, bool const & el) -> int"""
        return _array.boolArray_Find(self, el)
    Find = _swig_new_instance_method(_array.boolArray_Find)

    def FindSorted(self, el):
        r"""FindSorted(boolArray self, bool const & el) -> int"""
        return _array.boolArray_FindSorted(self, el)
    FindSorted = _swig_new_instance_method(_array.boolArray_FindSorted)

    def DeleteLast(self):
        r"""DeleteLast(boolArray self)"""
        return _array.boolArray_DeleteLast(self)
    DeleteLast = _swig_new_instance_method(_array.boolArray_DeleteLast)

    def DeleteFirst(self, el):
        r"""DeleteFirst(boolArray self, bool const & el)"""
        return _array.boolArray_DeleteFirst(self, el)
    DeleteFirst = _swig_new_instance_method(_array.boolArray_DeleteFirst)

    def DeleteAll(self):
        r"""DeleteAll(boolArray self)"""
        return _array.boolArray_DeleteAll(self)
    DeleteAll = _swig_new_instance_method(_array.boolArray_DeleteAll)

    def ShrinkToFit(self):
        r"""ShrinkToFit(boolArray self)"""
        return _array.boolArray_ShrinkToFit(self)
    ShrinkToFit = _swig_new_instance_method(_array.boolArray_ShrinkToFit)

    def Copy(self, copy):
        r"""Copy(boolArray self, boolArray copy)"""
        return _array.boolArray_Copy(self, copy)
    Copy = _swig_new_instance_method(_array.boolArray_Copy)

    def MakeRef(self, *args):
        r"""
        MakeRef(boolArray self, bool * data_, int size_, bool own_data=False)
        MakeRef(boolArray self, bool * data_, int size, mfem::MemoryType mt, bool own_data)
        MakeRef(boolArray self, boolArray master)
        """
        return _array.boolArray_MakeRef(self, *args)
    MakeRef = _swig_new_instance_method(_array.boolArray_MakeRef)

    def GetSubArray(self, offset, sa_size, sa):
        r"""GetSubArray(boolArray self, int offset, int sa_size, boolArray sa)"""
        return _array.boolArray_GetSubArray(self, offset, sa_size, sa)
    GetSubArray = _swig_new_instance_method(_array.boolArray_GetSubArray)

    def Sort(self):
        r"""Sort(boolArray self)"""
        return _array.boolArray_Sort(self)
    Sort = _swig_new_instance_method(_array.boolArray_Sort)

    def Unique(self):
        r"""Unique(boolArray self)"""
        return _array.boolArray_Unique(self)
    Unique = _swig_new_instance_method(_array.boolArray_Unique)

    def IsEmpty(self):
        r"""IsEmpty(boolArray self) -> bool"""
        return _array.boolArray_IsEmpty(self)
    IsEmpty = _swig_new_instance_method(_array.boolArray_IsEmpty)

    def begin(self, *args):
        r"""
        begin(boolArray self) -> bool
        begin(boolArray self) -> bool const *
        """
        return _array.boolArray_begin(self, *args)
    begin = _swig_new_instance_method(_array.boolArray_begin)

    def end(self, *args):
        r"""
        end(boolArray self) -> bool
        end(boolArray self) -> bool const *
        """
        return _array.boolArray_end(self, *args)
    end = _swig_new_instance_method(_array.boolArray_end)

    def MemoryUsage(self):
        r"""MemoryUsage(boolArray self) -> std::size_t"""
        return _array.boolArray_MemoryUsage(self)
    MemoryUsage = _swig_new_instance_method(_array.boolArray_MemoryUsage)

    def Read(self, on_dev=True):
        r"""Read(boolArray self, bool on_dev=True) -> bool const *"""
        return _array.boolArray_Read(self, on_dev)
    Read = _swig_new_instance_method(_array.boolArray_Read)

    def HostRead(self):
        r"""HostRead(boolArray self) -> bool const *"""
        return _array.boolArray_HostRead(self)
    HostRead = _swig_new_instance_method(_array.boolArray_HostRead)

    def Write(self, on_dev=True):
        r"""Write(boolArray self, bool on_dev=True) -> bool *"""
        return _array.boolArray_Write(self, on_dev)
    Write = _swig_new_instance_method(_array.boolArray_Write)

    def HostWrite(self):
        r"""HostWrite(boolArray self) -> bool *"""
        return _array.boolArray_HostWrite(self)
    HostWrite = _swig_new_instance_method(_array.boolArray_HostWrite)

    def ReadWrite(self, on_dev=True):
        r"""ReadWrite(boolArray self, bool on_dev=True) -> bool *"""
        return _array.boolArray_ReadWrite(self, on_dev)
    ReadWrite = _swig_new_instance_method(_array.boolArray_ReadWrite)

    def HostReadWrite(self):
        r"""HostReadWrite(boolArray self) -> bool *"""
        return _array.boolArray_HostReadWrite(self)
    HostReadWrite = _swig_new_instance_method(_array.boolArray_HostReadWrite)

    def __init__(self, *args):
        r"""
        __init__(boolArray self) -> boolArray
        __init__(boolArray self, mfem::MemoryType mt) -> boolArray
        __init__(boolArray self, int asize) -> boolArray
        __init__(boolArray self, int asize, mfem::MemoryType mt) -> boolArray
        __init__(boolArray self, bool * data_, bool own_data=False) -> boolArray
        __init__(boolArray self, boolArray src) -> boolArray
        __init__(boolArray self, boolArray src) -> boolArray
        __init__(boolArray self, void * List_or_Tuple) -> boolArray
        """
        _array.boolArray_swiginit(self, _array.new_boolArray(*args))

    def __setitem__(self, i, v):
        r"""__setitem__(boolArray self, int i, bool const v)"""

        i = int(i)
        if hasattr(v, "thisown"):
            v.thisown = False


        return _array.boolArray___setitem__(self, i, v)


    def Assign(self, *args):
        r"""
        Assign(boolArray self, bool const * arg2)
        Assign(boolArray self, bool const & a)
        """
        return _array.boolArray_Assign(self, *args)
    Assign = _swig_new_instance_method(_array.boolArray_Assign)

    def ToList(self):
        return [self[i] for i in range(self.Size())]



    def __iter__(self):
        class iter_array:
            def __init__(self, obj):
                self.obj = obj
                self.idx = 0
                self.size = obj.Size()
            def __iter__(self):
                self.idx = 0
            def __next__(self):
                if self.idx < self.size:
                    res = self.obj[self.idx]
                    self.idx += 1
                    return res
                else:
                    raise StopIteration
        return iter_array(self)



    def __getitem__(self, param):
        r"""__getitem__(boolArray self, PyObject * param) -> PyObject *"""
        return _array.boolArray___getitem__(self, param)
    __getitem__ = _swig_new_instance_method(_array.boolArray___getitem__)

    def GetDataArray(self):
        r"""GetDataArray(boolArray self) -> PyObject *"""
        return _array.boolArray_GetDataArray(self)
    GetDataArray = _swig_new_instance_method(_array.boolArray_GetDataArray)

# Register boolArray in _array:
_array.boolArray_swigregister(boolArray)
class uintArray(object):
    r"""Proxy of C++ mfem::Array< unsigned int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _array.delete_uintArray

    def GetData(self, *args):
        r"""
        GetData(uintArray self) -> unsigned int
        GetData(uintArray self) -> unsigned int const *
        """
        return _array.uintArray_GetData(self, *args)
    GetData = _swig_new_instance_method(_array.uintArray_GetData)

    def GetMemory(self, *args):
        r"""
        GetMemory(uintArray self) -> mfem::Memory< unsigned int >
        GetMemory(uintArray self) -> mfem::Memory< unsigned int > const &
        """
        return _array.uintArray_GetMemory(self, *args)
    GetMemory = _swig_new_instance_method(_array.uintArray_GetMemory)

    def UseDevice(self):
        r"""UseDevice(uintArray self) -> bool"""
        return _array.uintArray_UseDevice(self)
    UseDevice = _swig_new_instance_method(_array.uintArray_UseDevice)

    def OwnsData(self):
        r"""OwnsData(uintArray self) -> bool"""
        return _array.uintArray_OwnsData(self)
    OwnsData = _swig_new_instance_method(_array.uintArray_OwnsData)

    def StealData(self, p):
        r"""StealData(uintArray self, unsigned int ** p)"""
        return _array.uintArray_StealData(self, p)
    StealData = _swig_new_instance_method(_array.uintArray_StealData)

    def LoseData(self):
        r"""LoseData(uintArray self)"""
        return _array.uintArray_LoseData(self)
    LoseData = _swig_new_instance_method(_array.uintArray_LoseData)

    def MakeDataOwner(self):
        r"""MakeDataOwner(uintArray self)"""
        return _array.uintArray_MakeDataOwner(self)
    MakeDataOwner = _swig_new_instance_method(_array.uintArray_MakeDataOwner)

    def Size(self):
        r"""Size(uintArray self) -> int"""
        return _array.uintArray_Size(self)
    Size = _swig_new_instance_method(_array.uintArray_Size)

    def SetSize(self, *args):
        r"""
        SetSize(uintArray self, int nsize)
        SetSize(uintArray self, int nsize, unsigned int const & initval)
        SetSize(uintArray self, int nsize, mfem::MemoryType mt)
        """
        return _array.uintArray_SetSize(self, *args)
    SetSize = _swig_new_instance_method(_array.uintArray_SetSize)

    def Capacity(self):
        r"""Capacity(uintArray self) -> int"""
        return _array.uintArray_Capacity(self)
    Capacity = _swig_new_instance_method(_array.uintArray_Capacity)

    def Reserve(self, capacity):
        r"""Reserve(uintArray self, int capacity)"""
        return _array.uintArray_Reserve(self, capacity)
    Reserve = _swig_new_instance_method(_array.uintArray_Reserve)

    def Append(self, *args):
        r"""
        Append(uintArray self, unsigned int const & el) -> int
        Append(uintArray self, unsigned int const * els, int nels) -> int
        Append(uintArray self, uintArray els) -> int
        """

        if isinstance(args[0], list):
           return self.Append(self.__class__(args[0]))
        if isinstance(args[0], tuple):
           return self.Append(self.__class__(args[0]))


        return _array.uintArray_Append(self, *args)


    def Prepend(self, el):
        r"""Prepend(uintArray self, unsigned int const & el) -> int"""
        return _array.uintArray_Prepend(self, el)
    Prepend = _swig_new_instance_method(_array.uintArray_Prepend)

    def Last(self, *args):
        r"""
        Last(uintArray self) -> unsigned int
        Last(uintArray self) -> unsigned int const &
        """
        return _array.uintArray_Last(self, *args)
    Last = _swig_new_instance_method(_array.uintArray_Last)

    def Union(self, el):
        r"""Union(uintArray self, unsigned int const & el) -> int"""
        return _array.uintArray_Union(self, el)
    Union = _swig_new_instance_method(_array.uintArray_Union)

    def Find(self, el):
        r"""Find(uintArray self, unsigned int const & el) -> int"""
        return _array.uintArray_Find(self, el)
    Find = _swig_new_instance_method(_array.uintArray_Find)

    def FindSorted(self, el):
        r"""FindSorted(uintArray self, unsigned int const & el) -> int"""
        return _array.uintArray_FindSorted(self, el)
    FindSorted = _swig_new_instance_method(_array.uintArray_FindSorted)

    def DeleteLast(self):
        r"""DeleteLast(uintArray self)"""
        return _array.uintArray_DeleteLast(self)
    DeleteLast = _swig_new_instance_method(_array.uintArray_DeleteLast)

    def DeleteFirst(self, el):
        r"""DeleteFirst(uintArray self, unsigned int const & el)"""
        return _array.uintArray_DeleteFirst(self, el)
    DeleteFirst = _swig_new_instance_method(_array.uintArray_DeleteFirst)

    def DeleteAll(self):
        r"""DeleteAll(uintArray self)"""
        return _array.uintArray_DeleteAll(self)
    DeleteAll = _swig_new_instance_method(_array.uintArray_DeleteAll)

    def ShrinkToFit(self):
        r"""ShrinkToFit(uintArray self)"""
        return _array.uintArray_ShrinkToFit(self)
    ShrinkToFit = _swig_new_instance_method(_array.uintArray_ShrinkToFit)

    def Copy(self, copy):
        r"""Copy(uintArray self, uintArray copy)"""
        return _array.uintArray_Copy(self, copy)
    Copy = _swig_new_instance_method(_array.uintArray_Copy)

    def MakeRef(self, *args):
        r"""
        MakeRef(uintArray self, unsigned int * data_, int size_, bool own_data=False)
        MakeRef(uintArray self, unsigned int * data_, int size, mfem::MemoryType mt, bool own_data)
        MakeRef(uintArray self, uintArray master)
        """
        return _array.uintArray_MakeRef(self, *args)
    MakeRef = _swig_new_instance_method(_array.uintArray_MakeRef)

    def GetSubArray(self, offset, sa_size, sa):
        r"""GetSubArray(uintArray self, int offset, int sa_size, uintArray sa)"""
        return _array.uintArray_GetSubArray(self, offset, sa_size, sa)
    GetSubArray = _swig_new_instance_method(_array.uintArray_GetSubArray)

    def Sort(self):
        r"""Sort(uintArray self)"""
        return _array.uintArray_Sort(self)
    Sort = _swig_new_instance_method(_array.uintArray_Sort)

    def Unique(self):
        r"""Unique(uintArray self)"""
        return _array.uintArray_Unique(self)
    Unique = _swig_new_instance_method(_array.uintArray_Unique)

    def IsEmpty(self):
        r"""IsEmpty(uintArray self) -> bool"""
        return _array.uintArray_IsEmpty(self)
    IsEmpty = _swig_new_instance_method(_array.uintArray_IsEmpty)

    def begin(self, *args):
        r"""
        begin(uintArray self) -> unsigned int
        begin(uintArray self) -> unsigned int const *
        """
        return _array.uintArray_begin(self, *args)
    begin = _swig_new_instance_method(_array.uintArray_begin)

    def end(self, *args):
        r"""
        end(uintArray self) -> unsigned int
        end(uintArray self) -> unsigned int const *
        """
        return _array.uintArray_end(self, *args)
    end = _swig_new_instance_method(_array.uintArray_end)

    def MemoryUsage(self):
        r"""MemoryUsage(uintArray self) -> std::size_t"""
        return _array.uintArray_MemoryUsage(self)
    MemoryUsage = _swig_new_instance_method(_array.uintArray_MemoryUsage)

    def Read(self, on_dev=True):
        r"""Read(uintArray self, bool on_dev=True) -> unsigned int const *"""
        return _array.uintArray_Read(self, on_dev)
    Read = _swig_new_instance_method(_array.uintArray_Read)

    def HostRead(self):
        r"""HostRead(uintArray self) -> unsigned int const *"""
        return _array.uintArray_HostRead(self)
    HostRead = _swig_new_instance_method(_array.uintArray_HostRead)

    def Write(self, on_dev=True):
        r"""Write(uintArray self, bool on_dev=True) -> unsigned int *"""
        return _array.uintArray_Write(self, on_dev)
    Write = _swig_new_instance_method(_array.uintArray_Write)

    def HostWrite(self):
        r"""HostWrite(uintArray self) -> unsigned int *"""
        return _array.uintArray_HostWrite(self)
    HostWrite = _swig_new_instance_method(_array.uintArray_HostWrite)

    def ReadWrite(self, on_dev=True):
        r"""ReadWrite(uintArray self, bool on_dev=True) -> unsigned int *"""
        return _array.uintArray_ReadWrite(self, on_dev)
    ReadWrite = _swig_new_instance_method(_array.uintArray_ReadWrite)

    def HostReadWrite(self):
        r"""HostReadWrite(uintArray self) -> unsigned int *"""
        return _array.uintArray_HostReadWrite(self)
    HostReadWrite = _swig_new_instance_method(_array.uintArray_HostReadWrite)

    def __init__(self, *args):
        r"""
        __init__(uintArray self) -> uintArray
        __init__(uintArray self, mfem::MemoryType mt) -> uintArray
        __init__(uintArray self, int asize) -> uintArray
        __init__(uintArray self, int asize, mfem::MemoryType mt) -> uintArray
        __init__(uintArray self, unsigned int * data_, int asize, bool own_data=False) -> uintArray
        __init__(uintArray self, uintArray src) -> uintArray
        __init__(uintArray self, uintArray src) -> uintArray
        __init__(uintArray self, void * List_or_Tuple, unsigned int * _unused) -> uintArray
        """
        _array.uintArray_swiginit(self, _array.new_uintArray(*args))

    def __setitem__(self, i, v):
        r"""__setitem__(uintArray self, int i, unsigned int const v)"""

        i = int(i)
        if hasattr(v, "thisown"):
            v.thisown = False


        return _array.uintArray___setitem__(self, i, v)


    def Assign(self, *args):
        r"""
        Assign(uintArray self, unsigned int const * arg2)
        Assign(uintArray self, unsigned int const & a)
        """
        return _array.uintArray_Assign(self, *args)
    Assign = _swig_new_instance_method(_array.uintArray_Assign)

    def ToList(self):
        return [self[i] for i in range(self.Size())]



    def __iter__(self):
        class iter_array:
            def __init__(self, obj):
                self.obj = obj
                self.idx = 0
                self.size = obj.Size()
            def __iter__(self):
                self.idx = 0
            def __next__(self):
                if self.idx < self.size:
                    res = self.obj[self.idx]
                    self.idx += 1
                    return res
                else:
                    raise StopIteration
        return iter_array(self)



    def __getitem__(self, param):
        r"""__getitem__(uintArray self, PyObject * param) -> PyObject *"""
        return _array.uintArray___getitem__(self, param)
    __getitem__ = _swig_new_instance_method(_array.uintArray___getitem__)

    def GetDataArray(self):
        r"""GetDataArray(uintArray self) -> PyObject *"""
        return _array.uintArray_GetDataArray(self)
    GetDataArray = _swig_new_instance_method(_array.uintArray_GetDataArray)

# Register uintArray in _array:
_array.uintArray_swigregister(uintArray)
class intArrayArray(object):
    r"""Proxy of C++ mfem::Array< mfem::Array< int > * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _array.delete_intArrayArray

    def GetData(self, *args):
        r"""
        GetData(intArrayArray self) -> intArray
        GetData(intArrayArray self) -> mfem::Array< int > *const *
        """
        return _array.intArrayArray_GetData(self, *args)
    GetData = _swig_new_instance_method(_array.intArrayArray_GetData)

    def GetMemory(self, *args):
        r"""
        GetMemory(intArrayArray self) -> mfem::Memory< mfem::Array< int > * >
        GetMemory(intArrayArray self) -> mfem::Memory< mfem::Array< int > * > const &
        """
        return _array.intArrayArray_GetMemory(self, *args)
    GetMemory = _swig_new_instance_method(_array.intArrayArray_GetMemory)

    def UseDevice(self):
        r"""UseDevice(intArrayArray self) -> bool"""
        return _array.intArrayArray_UseDevice(self)
    UseDevice = _swig_new_instance_method(_array.intArrayArray_UseDevice)

    def OwnsData(self):
        r"""OwnsData(intArrayArray self) -> bool"""
        return _array.intArrayArray_OwnsData(self)
    OwnsData = _swig_new_instance_method(_array.intArrayArray_OwnsData)

    def StealData(self, p):
        r"""StealData(intArrayArray self, mfem::Array< int > *** p)"""
        return _array.intArrayArray_StealData(self, p)
    StealData = _swig_new_instance_method(_array.intArrayArray_StealData)

    def LoseData(self):
        r"""LoseData(intArrayArray self)"""
        return _array.intArrayArray_LoseData(self)
    LoseData = _swig_new_instance_method(_array.intArrayArray_LoseData)

    def MakeDataOwner(self):
        r"""MakeDataOwner(intArrayArray self)"""
        return _array.intArrayArray_MakeDataOwner(self)
    MakeDataOwner = _swig_new_instance_method(_array.intArrayArray_MakeDataOwner)

    def Size(self):
        r"""Size(intArrayArray self) -> int"""
        return _array.intArrayArray_Size(self)
    Size = _swig_new_instance_method(_array.intArrayArray_Size)

    def SetSize(self, *args):
        r"""
        SetSize(intArrayArray self, int nsize)
        SetSize(intArrayArray self, int nsize, intArray initval)
        SetSize(intArrayArray self, int nsize, mfem::MemoryType mt)
        """
        return _array.intArrayArray_SetSize(self, *args)
    SetSize = _swig_new_instance_method(_array.intArrayArray_SetSize)

    def Capacity(self):
        r"""Capacity(intArrayArray self) -> int"""
        return _array.intArrayArray_Capacity(self)
    Capacity = _swig_new_instance_method(_array.intArrayArray_Capacity)

    def Reserve(self, capacity):
        r"""Reserve(intArrayArray self, int capacity)"""
        return _array.intArrayArray_Reserve(self, capacity)
    Reserve = _swig_new_instance_method(_array.intArrayArray_Reserve)

    def Append(self, *args):
        r"""
        Append(intArrayArray self, intArray el) -> int
        Append(intArrayArray self, mfem::Array< int > *const * els, int nels) -> int
        Append(intArrayArray self, intArrayArray els) -> int
        """

        if isinstance(args[0], list):
           return self.Append(self.__class__(args[0]))
        if isinstance(args[0], tuple):
           return self.Append(self.__class__(args[0]))


        return _array.intArrayArray_Append(self, *args)


    def Prepend(self, el):
        r"""Prepend(intArrayArray self, intArray el) -> int"""
        return _array.intArrayArray_Prepend(self, el)
    Prepend = _swig_new_instance_method(_array.intArrayArray_Prepend)

    def Last(self, *args):
        r"""
        Last(intArrayArray self) -> intArray
        Last(intArrayArray self) -> intArray
        """
        return _array.intArrayArray_Last(self, *args)
    Last = _swig_new_instance_method(_array.intArrayArray_Last)

    def DeleteLast(self):
        r"""DeleteLast(intArrayArray self)"""
        return _array.intArrayArray_DeleteLast(self)
    DeleteLast = _swig_new_instance_method(_array.intArrayArray_DeleteLast)

    def DeleteAll(self):
        r"""DeleteAll(intArrayArray self)"""
        return _array.intArrayArray_DeleteAll(self)
    DeleteAll = _swig_new_instance_method(_array.intArrayArray_DeleteAll)

    def ShrinkToFit(self):
        r"""ShrinkToFit(intArrayArray self)"""
        return _array.intArrayArray_ShrinkToFit(self)
    ShrinkToFit = _swig_new_instance_method(_array.intArrayArray_ShrinkToFit)

    def Copy(self, copy):
        r"""Copy(intArrayArray self, intArrayArray copy)"""
        return _array.intArrayArray_Copy(self, copy)
    Copy = _swig_new_instance_method(_array.intArrayArray_Copy)

    def MakeRef(self, *args):
        r"""
        MakeRef(intArrayArray self, mfem::Array< int > ** data_, int size_, bool own_data=False)
        MakeRef(intArrayArray self, mfem::Array< int > ** data_, int size, mfem::MemoryType mt, bool own_data)
        MakeRef(intArrayArray self, intArrayArray master)
        """
        return _array.intArrayArray_MakeRef(self, *args)
    MakeRef = _swig_new_instance_method(_array.intArrayArray_MakeRef)

    def GetSubArray(self, offset, sa_size, sa):
        r"""GetSubArray(intArrayArray self, int offset, int sa_size, intArrayArray sa)"""
        return _array.intArrayArray_GetSubArray(self, offset, sa_size, sa)
    GetSubArray = _swig_new_instance_method(_array.intArrayArray_GetSubArray)

    def IsEmpty(self):
        r"""IsEmpty(intArrayArray self) -> bool"""
        return _array.intArrayArray_IsEmpty(self)
    IsEmpty = _swig_new_instance_method(_array.intArrayArray_IsEmpty)

    def begin(self, *args):
        r"""
        begin(intArrayArray self) -> intArray
        begin(intArrayArray self) -> mfem::Array< int > *const *
        """
        return _array.intArrayArray_begin(self, *args)
    begin = _swig_new_instance_method(_array.intArrayArray_begin)

    def end(self, *args):
        r"""
        end(intArrayArray self) -> intArray
        end(intArrayArray self) -> mfem::Array< int > *const *
        """
        return _array.intArrayArray_end(self, *args)
    end = _swig_new_instance_method(_array.intArrayArray_end)

    def MemoryUsage(self):
        r"""MemoryUsage(intArrayArray self) -> std::size_t"""
        return _array.intArrayArray_MemoryUsage(self)
    MemoryUsage = _swig_new_instance_method(_array.intArrayArray_MemoryUsage)

    def Read(self, on_dev=True):
        r"""Read(intArrayArray self, bool on_dev=True) -> mfem::Array< int > *const *"""
        return _array.intArrayArray_Read(self, on_dev)
    Read = _swig_new_instance_method(_array.intArrayArray_Read)

    def HostRead(self):
        r"""HostRead(intArrayArray self) -> mfem::Array< int > *const *"""
        return _array.intArrayArray_HostRead(self)
    HostRead = _swig_new_instance_method(_array.intArrayArray_HostRead)

    def Write(self, on_dev=True):
        r"""Write(intArrayArray self, bool on_dev=True) -> mfem::Array< int > **"""
        return _array.intArrayArray_Write(self, on_dev)
    Write = _swig_new_instance_method(_array.intArrayArray_Write)

    def HostWrite(self):
        r"""HostWrite(intArrayArray self) -> mfem::Array< int > **"""
        return _array.intArrayArray_HostWrite(self)
    HostWrite = _swig_new_instance_method(_array.intArrayArray_HostWrite)

    def ReadWrite(self, on_dev=True):
        r"""ReadWrite(intArrayArray self, bool on_dev=True) -> mfem::Array< int > **"""
        return _array.intArrayArray_ReadWrite(self, on_dev)
    ReadWrite = _swig_new_instance_method(_array.intArrayArray_ReadWrite)

    def HostReadWrite(self):
        r"""HostReadWrite(intArrayArray self) -> mfem::Array< int > **"""
        return _array.intArrayArray_HostReadWrite(self)
    HostReadWrite = _swig_new_instance_method(_array.intArrayArray_HostReadWrite)

    def __init__(self, *args):
        r"""
        __init__(intArrayArray self) -> intArrayArray
        __init__(intArrayArray self, mfem::MemoryType mt) -> intArrayArray
        __init__(intArrayArray self, int asize) -> intArrayArray
        __init__(intArrayArray self, int asize, mfem::MemoryType mt) -> intArrayArray
        __init__(intArrayArray self, mfem::Array< int > ** data_, int asize, bool own_data=False) -> intArrayArray
        __init__(intArrayArray self, intArrayArray src) -> intArrayArray
        __init__(intArrayArray self, intArrayArray src) -> intArrayArray
        __init__(intArrayArray self, void * List_or_Tuple, mfem::Array< int > ** _unused) -> intArrayArray
        """
        _array.intArrayArray_swiginit(self, _array.new_intArrayArray(*args))

    def __setitem__(self, i, v):
        r"""__setitem__(intArrayArray self, int i, intArray v)"""

        i = int(i)
        if hasattr(v, "thisown"):
            v.thisown = False


        return _array.intArrayArray___setitem__(self, i, v)


    def Assign(self, *args):
        r"""
        Assign(intArrayArray self, mfem::Array< int > *const * arg2)
        Assign(intArrayArray self, intArray a)
        """
        return _array.intArrayArray_Assign(self, *args)
    Assign = _swig_new_instance_method(_array.intArrayArray_Assign)

    def ToList(self):
        return [self[i] for i in range(self.Size())]



    def __iter__(self):
        class iter_array:
            def __init__(self, obj):
                self.obj = obj
                self.idx = 0
                self.size = obj.Size()
            def __iter__(self):
                self.idx = 0
            def __next__(self):
                if self.idx < self.size:
                    res = self.obj[self.idx]
                    self.idx += 1
                    return res
                else:
                    raise StopIteration
        return iter_array(self)



    def __getitem__(self, param):
        r"""__getitem__(intArrayArray self, PyObject * param) -> PyObject *"""
        return _array.intArrayArray___getitem__(self, param)
    __getitem__ = _swig_new_instance_method(_array.intArrayArray___getitem__)

# Register intArrayArray in _array:
_array.intArrayArray_swigregister(intArrayArray)
class intArray2D(object):
    r"""Proxy of C++ mfem::Array2D< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(intArray2D self) -> intArray2D
        __init__(intArray2D self, int m, int n) -> intArray2D
        __init__(intArray2D self, intArray2D arg2) -> intArray2D
        """
        _array.intArray2D_swiginit(self, _array.new_intArray2D(*args))

    def SetSize(self, m, n):
        r"""SetSize(intArray2D self, int m, int n)"""
        return _array.intArray2D_SetSize(self, m, n)
    SetSize = _swig_new_instance_method(_array.intArray2D_SetSize)

    def NumRows(self):
        r"""NumRows(intArray2D self) -> int"""
        return _array.intArray2D_NumRows(self)
    NumRows = _swig_new_instance_method(_array.intArray2D_NumRows)

    def NumCols(self):
        r"""NumCols(intArray2D self) -> int"""
        return _array.intArray2D_NumCols(self)
    NumCols = _swig_new_instance_method(_array.intArray2D_NumCols)

    def __call__(self, *args):
        r"""
        __call__(intArray2D self, int i, int j) -> int const
        __call__(intArray2D self, int i, int j) -> int
        __call__(intArray2D self, int i) -> int const
        __call__(intArray2D self, int i) -> int *
        """
        return _array.intArray2D___call__(self, *args)
    __call__ = _swig_new_instance_method(_array.intArray2D___call__)

    def GetRow(self, *args):
        r"""
        GetRow(intArray2D self, int i) -> int const
        GetRow(intArray2D self, int i) -> int
        GetRow(intArray2D self, int i, intArray sa)
        """
        return _array.intArray2D_GetRow(self, *args)
    GetRow = _swig_new_instance_method(_array.intArray2D_GetRow)

    def Load(self, *args):
        r"""
        Load(intArray2D self, std::istream & _in, int fmt=0)
        Load(intArray2D self, char const * filename, int fmt=0)
        Load(intArray2D self, int new_size0, int new_size1, std::istream & _in)
        """
        return _array.intArray2D_Load(self, *args)
    Load = _swig_new_instance_method(_array.intArray2D_Load)

    def Copy(self, copy):
        r"""Copy(intArray2D self, intArray2D copy)"""
        return _array.intArray2D_Copy(self, copy)
    Copy = _swig_new_instance_method(_array.intArray2D_Copy)

    def MakeRef(self, master):
        r"""MakeRef(intArray2D self, intArray2D master)"""
        return _array.intArray2D_MakeRef(self, master)
    MakeRef = _swig_new_instance_method(_array.intArray2D_MakeRef)

    def DeleteAll(self):
        r"""DeleteAll(intArray2D self)"""
        return _array.intArray2D_DeleteAll(self)
    DeleteAll = _swig_new_instance_method(_array.intArray2D_DeleteAll)

    def Print(self, *args):
        r"""
        Print(intArray2D self, std::ostream & out=out, int width=4)
        Print(intArray2D self, char const * file, int precision=16)
        """
        return _array.intArray2D_Print(self, *args)
    Print = _swig_new_instance_method(_array.intArray2D_Print)

    def PrintGZ(self, file, precision=16):
        r"""PrintGZ(intArray2D self, char const * file, int precision=16)"""
        return _array.intArray2D_PrintGZ(self, file, precision)
    PrintGZ = _swig_new_instance_method(_array.intArray2D_PrintGZ)

    def SaveGZ(self, file, precision=16):
        r"""SaveGZ(intArray2D self, char const * file, int precision=16)"""
        return _array.intArray2D_SaveGZ(self, file, precision)
    SaveGZ = _swig_new_instance_method(_array.intArray2D_SaveGZ)

    def Save(self, *args):
        r"""
        Save(intArray2D self, std::ostream & os, int fmt=0)
        Save(intArray2D self, char const * file, int precision=16)
        Save(intArray2D self)
        """
        return _array.intArray2D_Save(self, *args)
    Save = _swig_new_instance_method(_array.intArray2D_Save)

    def Assign(self, *args):
        r"""
        Assign(intArray2D self, int const & a)
        Assign(intArray2D self, intArray2D a)
        """
        return _array.intArray2D_Assign(self, *args)
    Assign = _swig_new_instance_method(_array.intArray2D_Assign)

    def __setitem__(self, param, v):
        r"""__setitem__(intArray2D self, PyObject * param, int const v)"""
        return _array.intArray2D___setitem__(self, param, v)
    __setitem__ = _swig_new_instance_method(_array.intArray2D___setitem__)

    def __getitem__(self, param):
        r"""__getitem__(intArray2D self, PyObject * param) -> int"""
        return _array.intArray2D___getitem__(self, param)
    __getitem__ = _swig_new_instance_method(_array.intArray2D___getitem__)
    __swig_destroy__ = _array.delete_intArray2D

# Register intArray2D in _array:
_array.intArray2D_swigregister(intArray2D)
class doubleArray2D(object):
    r"""Proxy of C++ mfem::Array2D< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(doubleArray2D self) -> doubleArray2D
        __init__(doubleArray2D self, int m, int n) -> doubleArray2D
        __init__(doubleArray2D self, doubleArray2D arg2) -> doubleArray2D
        """
        _array.doubleArray2D_swiginit(self, _array.new_doubleArray2D(*args))

    def SetSize(self, m, n):
        r"""SetSize(doubleArray2D self, int m, int n)"""
        return _array.doubleArray2D_SetSize(self, m, n)
    SetSize = _swig_new_instance_method(_array.doubleArray2D_SetSize)

    def NumRows(self):
        r"""NumRows(doubleArray2D self) -> int"""
        return _array.doubleArray2D_NumRows(self)
    NumRows = _swig_new_instance_method(_array.doubleArray2D_NumRows)

    def NumCols(self):
        r"""NumCols(doubleArray2D self) -> int"""
        return _array.doubleArray2D_NumCols(self)
    NumCols = _swig_new_instance_method(_array.doubleArray2D_NumCols)

    def __call__(self, *args):
        r"""
        __call__(doubleArray2D self, int i, int j) -> double const
        __call__(doubleArray2D self, int i, int j) -> double
        __call__(doubleArray2D self, int i) -> double const
        __call__(doubleArray2D self, int i) -> double *
        """
        return _array.doubleArray2D___call__(self, *args)
    __call__ = _swig_new_instance_method(_array.doubleArray2D___call__)

    def GetRow(self, *args):
        r"""
        GetRow(doubleArray2D self, int i) -> double const
        GetRow(doubleArray2D self, int i) -> double
        GetRow(doubleArray2D self, int i, doubleArray sa)
        """
        return _array.doubleArray2D_GetRow(self, *args)
    GetRow = _swig_new_instance_method(_array.doubleArray2D_GetRow)

    def Load(self, *args):
        r"""
        Load(doubleArray2D self, std::istream & _in, int fmt=0)
        Load(doubleArray2D self, char const * filename, int fmt=0)
        Load(doubleArray2D self, int new_size0, int new_size1, std::istream & _in)
        """
        return _array.doubleArray2D_Load(self, *args)
    Load = _swig_new_instance_method(_array.doubleArray2D_Load)

    def Copy(self, copy):
        r"""Copy(doubleArray2D self, doubleArray2D copy)"""
        return _array.doubleArray2D_Copy(self, copy)
    Copy = _swig_new_instance_method(_array.doubleArray2D_Copy)

    def MakeRef(self, master):
        r"""MakeRef(doubleArray2D self, doubleArray2D master)"""
        return _array.doubleArray2D_MakeRef(self, master)
    MakeRef = _swig_new_instance_method(_array.doubleArray2D_MakeRef)

    def DeleteAll(self):
        r"""DeleteAll(doubleArray2D self)"""
        return _array.doubleArray2D_DeleteAll(self)
    DeleteAll = _swig_new_instance_method(_array.doubleArray2D_DeleteAll)

    def Print(self, *args):
        r"""
        Print(doubleArray2D self, std::ostream & out=out, int width=4)
        Print(doubleArray2D self, char const * file, int precision=16)
        """
        return _array.doubleArray2D_Print(self, *args)
    Print = _swig_new_instance_method(_array.doubleArray2D_Print)

    def PrintGZ(self, file, precision=16):
        r"""PrintGZ(doubleArray2D self, char const * file, int precision=16)"""
        return _array.doubleArray2D_PrintGZ(self, file, precision)
    PrintGZ = _swig_new_instance_method(_array.doubleArray2D_PrintGZ)

    def SaveGZ(self, file, precision=16):
        r"""SaveGZ(doubleArray2D self, char const * file, int precision=16)"""
        return _array.doubleArray2D_SaveGZ(self, file, precision)
    SaveGZ = _swig_new_instance_method(_array.doubleArray2D_SaveGZ)

    def Save(self, *args):
        r"""
        Save(doubleArray2D self, std::ostream & os, int fmt=0)
        Save(doubleArray2D self, char const * file, int precision=16)
        Save(doubleArray2D self)
        """
        return _array.doubleArray2D_Save(self, *args)
    Save = _swig_new_instance_method(_array.doubleArray2D_Save)

    def Assign(self, *args):
        r"""
        Assign(doubleArray2D self, double const & a)
        Assign(doubleArray2D self, doubleArray2D a)
        """
        return _array.doubleArray2D_Assign(self, *args)
    Assign = _swig_new_instance_method(_array.doubleArray2D_Assign)

    def __setitem__(self, param, v):
        r"""__setitem__(doubleArray2D self, PyObject * param, double const v)"""
        return _array.doubleArray2D___setitem__(self, param, v)
    __setitem__ = _swig_new_instance_method(_array.doubleArray2D___setitem__)

    def __getitem__(self, param):
        r"""__getitem__(doubleArray2D self, PyObject * param) -> double"""
        return _array.doubleArray2D___getitem__(self, param)
    __getitem__ = _swig_new_instance_method(_array.doubleArray2D___getitem__)
    __swig_destroy__ = _array.delete_doubleArray2D

# Register doubleArray2D in _array:
_array.doubleArray2D_swigregister(doubleArray2D)
class DenseMatrixArray2D(object):
    r"""Proxy of C++ mfem::Array2D< mfem::DenseMatrix * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DenseMatrixArray2D self) -> DenseMatrixArray2D
        __init__(DenseMatrixArray2D self, int m, int n) -> DenseMatrixArray2D
        __init__(DenseMatrixArray2D self, DenseMatrixArray2D arg2) -> DenseMatrixArray2D
        """
        _array.DenseMatrixArray2D_swiginit(self, _array.new_DenseMatrixArray2D(*args))

    def SetSize(self, m, n):
        r"""SetSize(DenseMatrixArray2D self, int m, int n)"""
        return _array.DenseMatrixArray2D_SetSize(self, m, n)
    SetSize = _swig_new_instance_method(_array.DenseMatrixArray2D_SetSize)

    def NumRows(self):
        r"""NumRows(DenseMatrixArray2D self) -> int"""
        return _array.DenseMatrixArray2D_NumRows(self)
    NumRows = _swig_new_instance_method(_array.DenseMatrixArray2D_NumRows)

    def NumCols(self):
        r"""NumCols(DenseMatrixArray2D self) -> int"""
        return _array.DenseMatrixArray2D_NumCols(self)
    NumCols = _swig_new_instance_method(_array.DenseMatrixArray2D_NumCols)

    def __call__(self, *args):
        r"""
        __call__(DenseMatrixArray2D self, int i, int j) -> mfem::DenseMatrix
        __call__(DenseMatrixArray2D self, int i, int j) -> mfem::DenseMatrix
        __call__(DenseMatrixArray2D self, int i) -> mfem::DenseMatrix
        __call__(DenseMatrixArray2D self, int i) -> mfem::DenseMatrix **
        """
        return _array.DenseMatrixArray2D___call__(self, *args)
    __call__ = _swig_new_instance_method(_array.DenseMatrixArray2D___call__)

    def GetRow(self, *args):
        r"""
        GetRow(DenseMatrixArray2D self, int i) -> mfem::DenseMatrix
        GetRow(DenseMatrixArray2D self, int i) -> mfem::DenseMatrix
        GetRow(DenseMatrixArray2D self, int i, mfem::Array< mfem::DenseMatrix * > & sa)
        """
        return _array.DenseMatrixArray2D_GetRow(self, *args)
    GetRow = _swig_new_instance_method(_array.DenseMatrixArray2D_GetRow)

    def Copy(self, copy):
        r"""Copy(DenseMatrixArray2D self, DenseMatrixArray2D copy)"""
        return _array.DenseMatrixArray2D_Copy(self, copy)
    Copy = _swig_new_instance_method(_array.DenseMatrixArray2D_Copy)

    def MakeRef(self, master):
        r"""MakeRef(DenseMatrixArray2D self, DenseMatrixArray2D master)"""
        return _array.DenseMatrixArray2D_MakeRef(self, master)
    MakeRef = _swig_new_instance_method(_array.DenseMatrixArray2D_MakeRef)

    def DeleteAll(self):
        r"""DeleteAll(DenseMatrixArray2D self)"""
        return _array.DenseMatrixArray2D_DeleteAll(self)
    DeleteAll = _swig_new_instance_method(_array.DenseMatrixArray2D_DeleteAll)

    def Assign(self, *args):
        r"""
        Assign(DenseMatrixArray2D self, mfem::DenseMatrix *const & a)
        Assign(DenseMatrixArray2D self, DenseMatrixArray2D a)
        """
        return _array.DenseMatrixArray2D_Assign(self, *args)
    Assign = _swig_new_instance_method(_array.DenseMatrixArray2D_Assign)

    def __setitem__(self, param, v):
        r"""__setitem__(DenseMatrixArray2D self, PyObject * param, mfem::DenseMatrix *const v)"""
        return _array.DenseMatrixArray2D___setitem__(self, param, v)
    __setitem__ = _swig_new_instance_method(_array.DenseMatrixArray2D___setitem__)

    def __getitem__(self, param):
        r"""__getitem__(DenseMatrixArray2D self, PyObject * param) -> mfem::DenseMatrix *"""
        return _array.DenseMatrixArray2D___getitem__(self, param)
    __getitem__ = _swig_new_instance_method(_array.DenseMatrixArray2D___getitem__)
    __swig_destroy__ = _array.delete_DenseMatrixArray2D

# Register DenseMatrixArray2D in _array:
_array.DenseMatrixArray2D_swigregister(DenseMatrixArray2D)
class SparseMatrixArray2D(object):
    r"""Proxy of C++ mfem::Array2D< mfem::SparseMatrix * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SparseMatrixArray2D self) -> SparseMatrixArray2D
        __init__(SparseMatrixArray2D self, int m, int n) -> SparseMatrixArray2D
        __init__(SparseMatrixArray2D self, SparseMatrixArray2D arg2) -> SparseMatrixArray2D
        """
        _array.SparseMatrixArray2D_swiginit(self, _array.new_SparseMatrixArray2D(*args))

    def SetSize(self, m, n):
        r"""SetSize(SparseMatrixArray2D self, int m, int n)"""
        return _array.SparseMatrixArray2D_SetSize(self, m, n)
    SetSize = _swig_new_instance_method(_array.SparseMatrixArray2D_SetSize)

    def NumRows(self):
        r"""NumRows(SparseMatrixArray2D self) -> int"""
        return _array.SparseMatrixArray2D_NumRows(self)
    NumRows = _swig_new_instance_method(_array.SparseMatrixArray2D_NumRows)

    def NumCols(self):
        r"""NumCols(SparseMatrixArray2D self) -> int"""
        return _array.SparseMatrixArray2D_NumCols(self)
    NumCols = _swig_new_instance_method(_array.SparseMatrixArray2D_NumCols)

    def __call__(self, *args):
        r"""
        __call__(SparseMatrixArray2D self, int i, int j) -> mfem::SparseMatrix
        __call__(SparseMatrixArray2D self, int i, int j) -> mfem::SparseMatrix
        __call__(SparseMatrixArray2D self, int i) -> mfem::SparseMatrix
        __call__(SparseMatrixArray2D self, int i) -> mfem::SparseMatrix **
        """
        return _array.SparseMatrixArray2D___call__(self, *args)
    __call__ = _swig_new_instance_method(_array.SparseMatrixArray2D___call__)

    def GetRow(self, *args):
        r"""
        GetRow(SparseMatrixArray2D self, int i) -> mfem::SparseMatrix
        GetRow(SparseMatrixArray2D self, int i) -> mfem::SparseMatrix
        GetRow(SparseMatrixArray2D self, int i, mfem::Array< mfem::SparseMatrix * > & sa)
        """
        return _array.SparseMatrixArray2D_GetRow(self, *args)
    GetRow = _swig_new_instance_method(_array.SparseMatrixArray2D_GetRow)

    def Copy(self, copy):
        r"""Copy(SparseMatrixArray2D self, SparseMatrixArray2D copy)"""
        return _array.SparseMatrixArray2D_Copy(self, copy)
    Copy = _swig_new_instance_method(_array.SparseMatrixArray2D_Copy)

    def MakeRef(self, master):
        r"""MakeRef(SparseMatrixArray2D self, SparseMatrixArray2D master)"""
        return _array.SparseMatrixArray2D_MakeRef(self, master)
    MakeRef = _swig_new_instance_method(_array.SparseMatrixArray2D_MakeRef)

    def DeleteAll(self):
        r"""DeleteAll(SparseMatrixArray2D self)"""
        return _array.SparseMatrixArray2D_DeleteAll(self)
    DeleteAll = _swig_new_instance_method(_array.SparseMatrixArray2D_DeleteAll)

    def Assign(self, *args):
        r"""
        Assign(SparseMatrixArray2D self, mfem::SparseMatrix *const & a)
        Assign(SparseMatrixArray2D self, SparseMatrixArray2D a)
        """
        return _array.SparseMatrixArray2D_Assign(self, *args)
    Assign = _swig_new_instance_method(_array.SparseMatrixArray2D_Assign)

    def __setitem__(self, param, v):
        r"""__setitem__(SparseMatrixArray2D self, PyObject * param, mfem::SparseMatrix *const v)"""
        return _array.SparseMatrixArray2D___setitem__(self, param, v)
    __setitem__ = _swig_new_instance_method(_array.SparseMatrixArray2D___setitem__)

    def __getitem__(self, param):
        r"""__getitem__(SparseMatrixArray2D self, PyObject * param) -> mfem::SparseMatrix *"""
        return _array.SparseMatrixArray2D___getitem__(self, param)
    __getitem__ = _swig_new_instance_method(_array.SparseMatrixArray2D___getitem__)
    __swig_destroy__ = _array.delete_SparseMatrixArray2D

# Register SparseMatrixArray2D in _array:
_array.SparseMatrixArray2D_swigregister(SparseMatrixArray2D)

def Swap(*args):
    r"""
    Swap(intArray arg1, intArray arg2)
    Swap(doubleArray arg1, doubleArray arg2)
    Swap(int8Array arg1, int8Array arg2)
    Swap(int64Array arg1, int64Array arg2)
    Swap(boolArray arg1, boolArray arg2)
    Swap(uintArray arg1, uintArray arg2)
    Swap(intArrayArray arg1, intArrayArray arg2)
    Swap(intArray2D arg1, intArray2D arg2)
    Swap(doubleArray2D arg1, doubleArray2D arg2)
    Swap(DenseMatrixArray2D arg1, DenseMatrixArray2D arg2)
    Swap(SparseMatrixArray2D arg1, SparseMatrixArray2D arg2)
    """
    return _array.Swap(*args)
Swap = _array.Swap


