# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _multigrid
else:
    import _multigrid

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _multigrid.SWIG_PyInstanceMethod_New
_swig_new_static_method = _multigrid.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.globals
import mfem._ser.vector
import mfem._ser.bilinearform
import mfem._ser.fespace
import mfem._ser.coefficient
import mfem._ser.matrix
import mfem._ser.operators
import mfem._ser.symmat
import mfem._ser.intrules
import mfem._ser.sparsemat
import mfem._ser.densemat
import mfem._ser.eltrans
import mfem._ser.fe
import mfem._ser.geom
import mfem._ser.fe_base
import mfem._ser.doftrans
import mfem._ser.fe_fixed_order
import mfem._ser.element
import mfem._ser.table
import mfem._ser.hash
import mfem._ser.fe_h1
import mfem._ser.fe_nd
import mfem._ser.fe_rt
import mfem._ser.fe_l2
import mfem._ser.fe_nurbs
import mfem._ser.fe_pos
import mfem._ser.fe_ser
import mfem._ser.mesh
import mfem._ser.attribute_sets
import mfem._ser.arrays_by_name
import mfem._ser.sort_pairs
import mfem._ser.ncmesh
import mfem._ser.gridfunc
import mfem._ser.bilininteg
import mfem._ser.fe_coll
import mfem._ser.lininteg
import mfem._ser.linearform
import mfem._ser.nonlininteg
import mfem._ser.integrator
import mfem._ser.bounds
import mfem._ser.vertex
import mfem._ser.vtk
import mfem._ser.std_vectors
import mfem._ser.handle
import mfem._ser.restriction
import mfem._ser.hybridization
import mfem._ser.staticcond
import mfem._ser.fespacehierarchy
class MultigridBase(mfem._ser.operators.Solver):
    r"""Proxy of C++ mfem::MultigridBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    CycleType_VCYCLE = _multigrid.MultigridBase_CycleType_VCYCLE
    
    CycleType_WCYCLE = _multigrid.MultigridBase_CycleType_WCYCLE
    
    __swig_destroy__ = _multigrid.delete_MultigridBase

    def AddLevel(self, op, smoother, ownOperator, ownSmoother):
        r"""AddLevel(MultigridBase self, Operator op, Solver smoother, bool ownOperator, bool ownSmoother)"""
        return _multigrid.MultigridBase_AddLevel(self, op, smoother, ownOperator, ownSmoother)
    AddLevel = _swig_new_instance_method(_multigrid.MultigridBase_AddLevel)

    def NumLevels(self):
        r"""NumLevels(MultigridBase self) -> int"""
        return _multigrid.MultigridBase_NumLevels(self)
    NumLevels = _swig_new_instance_method(_multigrid.MultigridBase_NumLevels)

    def GetFinestLevelIndex(self):
        r"""GetFinestLevelIndex(MultigridBase self) -> int"""
        return _multigrid.MultigridBase_GetFinestLevelIndex(self)
    GetFinestLevelIndex = _swig_new_instance_method(_multigrid.MultigridBase_GetFinestLevelIndex)

    def GetOperatorAtLevel(self, *args):
        r"""
        GetOperatorAtLevel(MultigridBase self, int level) -> Operator
        GetOperatorAtLevel(MultigridBase self, int level) -> Operator
        """
        return _multigrid.MultigridBase_GetOperatorAtLevel(self, *args)
    GetOperatorAtLevel = _swig_new_instance_method(_multigrid.MultigridBase_GetOperatorAtLevel)

    def GetOperatorAtFinestLevel(self, *args):
        r"""
        GetOperatorAtFinestLevel(MultigridBase self) -> Operator
        GetOperatorAtFinestLevel(MultigridBase self) -> Operator
        """
        return _multigrid.MultigridBase_GetOperatorAtFinestLevel(self, *args)
    GetOperatorAtFinestLevel = _swig_new_instance_method(_multigrid.MultigridBase_GetOperatorAtFinestLevel)

    def GetSmootherAtLevel(self, *args):
        r"""
        GetSmootherAtLevel(MultigridBase self, int level) -> Solver
        GetSmootherAtLevel(MultigridBase self, int level) -> Solver
        """
        return _multigrid.MultigridBase_GetSmootherAtLevel(self, *args)
    GetSmootherAtLevel = _swig_new_instance_method(_multigrid.MultigridBase_GetSmootherAtLevel)

    def SetCycleType(self, cycleType_, preSmoothingSteps_, postSmoothingSteps_):
        r"""SetCycleType(MultigridBase self, mfem::MultigridBase::CycleType cycleType_, int preSmoothingSteps_, int postSmoothingSteps_)"""
        return _multigrid.MultigridBase_SetCycleType(self, cycleType_, preSmoothingSteps_, postSmoothingSteps_)
    SetCycleType = _swig_new_instance_method(_multigrid.MultigridBase_SetCycleType)

    def Mult(self, x, y):
        r"""Mult(MultigridBase self, Vector x, Vector y)"""
        return _multigrid.MultigridBase_Mult(self, x, y)
    Mult = _swig_new_instance_method(_multigrid.MultigridBase_Mult)

    def ArrayMult(self, X_, Y_):
        r"""ArrayMult(MultigridBase self, mfem::Array< mfem::Vector const * > const & X_, VectorArray Y_)"""
        return _multigrid.MultigridBase_ArrayMult(self, X_, Y_)
    ArrayMult = _swig_new_instance_method(_multigrid.MultigridBase_ArrayMult)

    def SetOperator(self, op):
        r"""SetOperator(MultigridBase self, Operator op)"""
        return _multigrid.MultigridBase_SetOperator(self, op)
    SetOperator = _swig_new_instance_method(_multigrid.MultigridBase_SetOperator)

# Register MultigridBase in _multigrid:
_multigrid.MultigridBase_swigregister(MultigridBase)
class Multigrid(MultigridBase):
    r"""Proxy of C++ mfem::Multigrid class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Multigrid self) -> Multigrid
        __init__(Multigrid self, OperatorArray operators_, SolverArray smoothers_, OperatorArray prolongations_, boolArray ownedOperators_, boolArray ownedSmoothers_, boolArray ownedProlongations_) -> Multigrid
        """
        _multigrid.Multigrid_swiginit(self, _multigrid.new_Multigrid(*args))
    __swig_destroy__ = _multigrid.delete_Multigrid

# Register Multigrid in _multigrid:
_multigrid.Multigrid_swigregister(Multigrid)
class GeometricMultigrid(Multigrid):
    r"""Proxy of C++ mfem::GeometricMultigrid class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GeometricMultigrid self, FiniteElementSpaceHierarchy fespaces_) -> GeometricMultigrid
        __init__(GeometricMultigrid self, FiniteElementSpaceHierarchy fespaces_, intArray ess_bdr) -> GeometricMultigrid
        """
        _multigrid.GeometricMultigrid_swiginit(self, _multigrid.new_GeometricMultigrid(*args))
    __swig_destroy__ = _multigrid.delete_GeometricMultigrid

    def FormFineLinearSystem(self, x, b, A, X, B):
        r"""FormFineLinearSystem(GeometricMultigrid self, Vector x, Vector b, OperatorHandle A, Vector X, Vector B)"""
        return _multigrid.GeometricMultigrid_FormFineLinearSystem(self, x, b, A, X, B)
    FormFineLinearSystem = _swig_new_instance_method(_multigrid.GeometricMultigrid_FormFineLinearSystem)

    def RecoverFineFEMSolution(self, X, b, x):
        r"""RecoverFineFEMSolution(GeometricMultigrid self, Vector X, Vector b, Vector x)"""
        return _multigrid.GeometricMultigrid_RecoverFineFEMSolution(self, X, b, x)
    RecoverFineFEMSolution = _swig_new_instance_method(_multigrid.GeometricMultigrid_RecoverFineFEMSolution)

# Register GeometricMultigrid in _multigrid:
_multigrid.GeometricMultigrid_swigregister(GeometricMultigrid)
class PyGeometricMultigrid(GeometricMultigrid):
    r"""Proxy of C++ mfem::PyGeometricMultigrid class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PyGeometricMultigrid self, FiniteElementSpaceHierarchy fespaces_) -> PyGeometricMultigrid
        __init__(PyGeometricMultigrid self, FiniteElementSpaceHierarchy fespaces_, intArray ess_bdr_) -> PyGeometricMultigrid
        """
        _multigrid.PyGeometricMultigrid_swiginit(self, _multigrid.new_PyGeometricMultigrid(*args))

    def AppendBilinearForm(self, form):
        r"""AppendBilinearForm(PyGeometricMultigrid self, BilinearForm form)"""

        if not hasattr(self, "forms"):
            self.forms=[]
        self.forms.append(form)
        form.thisown=0


        return _multigrid.PyGeometricMultigrid_AppendBilinearForm(self, form)


    def _GetBilinearFormArray(self):
        r"""_GetBilinearFormArray(PyGeometricMultigrid self) -> BilinearFormArray"""
        return _multigrid.PyGeometricMultigrid__GetBilinearFormArray(self)
    _GetBilinearFormArray = _swig_new_instance_method(_multigrid.PyGeometricMultigrid__GetBilinearFormArray)

    def _GetEssentialTrueDofs(self):
        r"""_GetEssentialTrueDofs(PyGeometricMultigrid self) -> intArrayArray"""
        return _multigrid.PyGeometricMultigrid__GetEssentialTrueDofs(self)
    _GetEssentialTrueDofs = _swig_new_instance_method(_multigrid.PyGeometricMultigrid__GetEssentialTrueDofs)

    @property
    def bfs(self):
       return self._GetBilinearFormArray()



    @property
    def essentialTrueDofs(self):
       return self._GetEssentialTrueDofs()


    __swig_destroy__ = _multigrid.delete_PyGeometricMultigrid

# Register PyGeometricMultigrid in _multigrid:
_multigrid.PyGeometricMultigrid_swigregister(PyGeometricMultigrid)

