/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_solvers_WRAP_H_
#define SWIG_solvers_WRAP_H_

#include <map>
#include <string>


class SwigDirector_IterativeSolverController : public mfem::IterativeSolverController, public Swig::Director {

public:
    SwigDirector_IterativeSolverController(PyObject *self);
    virtual ~SwigDirector_IterativeSolverController();
    virtual void Reset();
    virtual void MonitorResidual(int it,mfem::real_t norm,mfem::Vector const &r,bool final);
    virtual void MonitorSolution(int it,mfem::real_t norm,mfem::Vector const &x,bool final);

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class IterativeSolverController doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[3];
#endif

};


class SwigDirector_PyIterativeSolver : public mfem::PyIterativeSolver, public Swig::Director {

public:
    SwigDirector_PyIterativeSolver(PyObject *self);
    virtual mfem::MemoryClass GetMemoryClass() const;
    virtual void Mult(mfem::Vector const &b,mfem::Vector &x) const;
    virtual void MultTranspose(mfem::Vector const &b,mfem::Vector &x) const;
    virtual void AddMult(mfem::Vector const &x,mfem::Vector &y,mfem::real_t const a=1.0) const;
    virtual void AddMultTranspose(mfem::Vector const &x,mfem::Vector &y,mfem::real_t const a=1.0) const;
    virtual void ArrayMult(mfem::Array< mfem::Vector const * > const &X,mfem::Array< mfem::Vector * > &Y) const;
    virtual void ArrayMultTranspose(mfem::Array< mfem::Vector const * > const &X,mfem::Array< mfem::Vector * > &Y) const;
    virtual void ArrayAddMult(mfem::Array< mfem::Vector const * > const &X,mfem::Array< mfem::Vector * > &Y,mfem::real_t const a=1.0) const;
    virtual void ArrayAddMultTranspose(mfem::Array< mfem::Vector const * > const &X,mfem::Array< mfem::Vector * > &Y,mfem::real_t const a=1.0) const;
    virtual mfem::Operator &GetGradient(mfem::Vector const &x) const;
    virtual void AssembleDiagonal(mfem::Vector &diag) const;
    virtual mfem::Operator const *GetProlongation() const;
    virtual mfem::Operator const *GetRestriction() const;
    virtual mfem::Operator const *GetOutputProlongation() const;
    virtual mfem::Operator const *GetOutputRestrictionTranspose() const;
    virtual mfem::Operator const *GetOutputRestriction() const;
    virtual void RecoverFEMSolution(mfem::Vector const &X,mfem::Vector const &b,mfem::Vector &x);
    virtual void PrintMatlab(std::ostream &out) const;
    virtual ~SwigDirector_PyIterativeSolver();
    virtual void SetOperator(mfem::Operator const &op);
    virtual mfem::real_t Dot(mfem::Vector const &x,mfem::Vector const &y) const;
    virtual mfem::real_t DotSwigPublic(mfem::Vector const &x,mfem::Vector const &y) const {
      return mfem::IterativeSolver::Dot(x,y);
    }
    virtual void SetPrintLevel(int print_lvl);
    virtual void SetPrintLevel(mfem::IterativeSolver::PrintLevel arg0);
    virtual void SetPreconditioner(mfem::Solver &pr);

/* Internal director utilities */
public:
    bool swig_get_inner(const char *swig_protected_method_name) const {
      std::map<std::string, bool>::const_iterator iv = swig_inner.find(swig_protected_method_name);
      return (iv != swig_inner.end() ? iv->second : false);
    }
    void swig_set_inner(const char *swig_protected_method_name, bool swig_val) const {
      swig_inner[swig_protected_method_name] = swig_val;
    }
private:
    mutable std::map<std::string, bool> swig_inner;

#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::SwigVar_PyObject name = SWIG_Python_str_FromChar(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (!method) {
          std::string msg = "Method in class PyIterativeSolver doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      }
      return method;
    }
private:
    mutable swig::SwigVar_PyObject vtable[22];
#endif

};


#endif
