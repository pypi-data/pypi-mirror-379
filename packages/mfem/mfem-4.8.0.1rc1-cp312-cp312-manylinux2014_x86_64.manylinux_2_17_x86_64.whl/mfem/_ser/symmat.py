# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _symmat
else:
    import _symmat

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _symmat.SWIG_PyInstanceMethod_New
_swig_new_static_method = _symmat.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._ser.globals
import mfem._ser.matrix
import mfem._ser.vector
import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.operators
class DenseSymmetricMatrix(mfem._ser.matrix.Matrix):
    r"""Proxy of C++ mfem::DenseSymmetricMatrix class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DenseSymmetricMatrix self) -> DenseSymmetricMatrix
        __init__(DenseSymmetricMatrix self, int s) -> DenseSymmetricMatrix
        __init__(DenseSymmetricMatrix self, mfem::real_t * d, int s) -> DenseSymmetricMatrix
        """
        _symmat.DenseSymmetricMatrix_swiginit(self, _symmat.new_DenseSymmetricMatrix(*args))

    def UseExternalData(self, d, s):
        r"""UseExternalData(DenseSymmetricMatrix self, mfem::real_t * d, int s)"""
        return _symmat.DenseSymmetricMatrix_UseExternalData(self, d, s)
    UseExternalData = _swig_new_instance_method(_symmat.DenseSymmetricMatrix_UseExternalData)

    def Reset(self, d, s):
        r"""Reset(DenseSymmetricMatrix self, mfem::real_t * d, int s)"""
        return _symmat.DenseSymmetricMatrix_Reset(self, d, s)
    Reset = _swig_new_instance_method(_symmat.DenseSymmetricMatrix_Reset)

    def ClearExternalData(self):
        r"""ClearExternalData(DenseSymmetricMatrix self)"""
        return _symmat.DenseSymmetricMatrix_ClearExternalData(self)
    ClearExternalData = _swig_new_instance_method(_symmat.DenseSymmetricMatrix_ClearExternalData)

    def Clear(self):
        r"""Clear(DenseSymmetricMatrix self)"""
        return _symmat.DenseSymmetricMatrix_Clear(self)
    Clear = _swig_new_instance_method(_symmat.DenseSymmetricMatrix_Clear)

    def SetSize(self, s):
        r"""SetSize(DenseSymmetricMatrix self, int s)"""
        return _symmat.DenseSymmetricMatrix_SetSize(self, s)
    SetSize = _swig_new_instance_method(_symmat.DenseSymmetricMatrix_SetSize)

    def GetStoredSize(self):
        r"""GetStoredSize(DenseSymmetricMatrix self) -> int"""
        return _symmat.DenseSymmetricMatrix_GetStoredSize(self)
    GetStoredSize = _swig_new_instance_method(_symmat.DenseSymmetricMatrix_GetStoredSize)

    def Data(self):
        r"""Data(DenseSymmetricMatrix self) -> mfem::real_t *"""
        return _symmat.DenseSymmetricMatrix_Data(self)
    Data = _swig_new_instance_method(_symmat.DenseSymmetricMatrix_Data)

    def GetData(self):
        r"""GetData(DenseSymmetricMatrix self) -> mfem::real_t *"""
        return _symmat.DenseSymmetricMatrix_GetData(self)
    GetData = _swig_new_instance_method(_symmat.DenseSymmetricMatrix_GetData)

    def GetMemory(self, *args):
        r"""
        GetMemory(DenseSymmetricMatrix self) -> mfem::Memory< mfem::real_t >
        GetMemory(DenseSymmetricMatrix self) -> mfem::Memory< mfem::real_t > const &
        """
        return _symmat.DenseSymmetricMatrix_GetMemory(self, *args)
    GetMemory = _swig_new_instance_method(_symmat.DenseSymmetricMatrix_GetMemory)

    def OwnsData(self):
        r"""OwnsData(DenseSymmetricMatrix self) -> bool"""
        return _symmat.DenseSymmetricMatrix_OwnsData(self)
    OwnsData = _swig_new_instance_method(_symmat.DenseSymmetricMatrix_OwnsData)

    def __call__(self, *args):
        r"""
        __call__(DenseSymmetricMatrix self, int i, int j) -> mfem::real_t
        __call__(DenseSymmetricMatrix self, int i, int j) -> mfem::real_t const &
        """
        return _symmat.DenseSymmetricMatrix___call__(self, *args)
    __call__ = _swig_new_instance_method(_symmat.DenseSymmetricMatrix___call__)

    def Elem(self, *args):
        r"""
        Elem(DenseSymmetricMatrix self, int i, int j) -> mfem::real_t
        Elem(DenseSymmetricMatrix self, int i, int j) -> mfem::real_t const &
        """
        return _symmat.DenseSymmetricMatrix_Elem(self, *args)
    Elem = _swig_new_instance_method(_symmat.DenseSymmetricMatrix_Elem)

    def __imul__(self, c):
        r"""__imul__(DenseSymmetricMatrix self, mfem::real_t c) -> DenseSymmetricMatrix"""
        return _symmat.DenseSymmetricMatrix___imul__(self, c)
    __imul__ = _swig_new_instance_method(_symmat.DenseSymmetricMatrix___imul__)

    def MemoryUsage(self):
        r"""MemoryUsage(DenseSymmetricMatrix self) -> std::size_t"""
        return _symmat.DenseSymmetricMatrix_MemoryUsage(self)
    MemoryUsage = _swig_new_instance_method(_symmat.DenseSymmetricMatrix_MemoryUsage)

    def Read(self, on_dev=True):
        r"""Read(DenseSymmetricMatrix self, bool on_dev=True) -> mfem::real_t const *"""
        return _symmat.DenseSymmetricMatrix_Read(self, on_dev)
    Read = _swig_new_instance_method(_symmat.DenseSymmetricMatrix_Read)

    def HostRead(self):
        r"""HostRead(DenseSymmetricMatrix self) -> mfem::real_t const *"""
        return _symmat.DenseSymmetricMatrix_HostRead(self)
    HostRead = _swig_new_instance_method(_symmat.DenseSymmetricMatrix_HostRead)

    def Write(self, on_dev=True):
        r"""Write(DenseSymmetricMatrix self, bool on_dev=True) -> mfem::real_t *"""
        return _symmat.DenseSymmetricMatrix_Write(self, on_dev)
    Write = _swig_new_instance_method(_symmat.DenseSymmetricMatrix_Write)

    def HostWrite(self):
        r"""HostWrite(DenseSymmetricMatrix self) -> mfem::real_t *"""
        return _symmat.DenseSymmetricMatrix_HostWrite(self)
    HostWrite = _swig_new_instance_method(_symmat.DenseSymmetricMatrix_HostWrite)

    def ReadWrite(self, on_dev=True):
        r"""ReadWrite(DenseSymmetricMatrix self, bool on_dev=True) -> mfem::real_t *"""
        return _symmat.DenseSymmetricMatrix_ReadWrite(self, on_dev)
    ReadWrite = _swig_new_instance_method(_symmat.DenseSymmetricMatrix_ReadWrite)

    def HostReadWrite(self):
        r"""HostReadWrite(DenseSymmetricMatrix self) -> mfem::real_t *"""
        return _symmat.DenseSymmetricMatrix_HostReadWrite(self)
    HostReadWrite = _swig_new_instance_method(_symmat.DenseSymmetricMatrix_HostReadWrite)

    def Mult(self, x, y):
        r"""Mult(DenseSymmetricMatrix self, Vector x, Vector y)"""
        return _symmat.DenseSymmetricMatrix_Mult(self, x, y)
    Mult = _swig_new_instance_method(_symmat.DenseSymmetricMatrix_Mult)

    def Inverse(self):
        r"""Inverse(DenseSymmetricMatrix self) -> MatrixInverse"""
        return _symmat.DenseSymmetricMatrix_Inverse(self)
    Inverse = _swig_new_instance_method(_symmat.DenseSymmetricMatrix_Inverse)
    __swig_destroy__ = _symmat.delete_DenseSymmetricMatrix

    def Print(self, file, precision=16):
        r"""Print(DenseSymmetricMatrix self, char const * file, int precision=16)"""
        return _symmat.DenseSymmetricMatrix_Print(self, file, precision)
    Print = _swig_new_instance_method(_symmat.DenseSymmetricMatrix_Print)

    def PrintGZ(self, file, precision=16):
        r"""PrintGZ(DenseSymmetricMatrix self, char const * file, int precision=16)"""
        return _symmat.DenseSymmetricMatrix_PrintGZ(self, file, precision)
    PrintGZ = _swig_new_instance_method(_symmat.DenseSymmetricMatrix_PrintGZ)

# Register DenseSymmetricMatrix in _symmat:
_symmat.DenseSymmetricMatrix_swigregister(DenseSymmetricMatrix)

