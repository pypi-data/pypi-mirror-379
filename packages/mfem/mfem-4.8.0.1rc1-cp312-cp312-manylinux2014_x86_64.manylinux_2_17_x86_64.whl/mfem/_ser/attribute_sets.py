# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _attribute_sets
else:
    import _attribute_sets

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _attribute_sets.SWIG_PyInstanceMethod_New
_swig_new_static_method = _attribute_sets.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.globals
import mfem._ser.arrays_by_name
class AttributeSets(object):
    r"""Proxy of C++ mfem::AttributeSets class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    attr_sets = property(_attribute_sets.AttributeSets_attr_sets_get, _attribute_sets.AttributeSets_attr_sets_set, doc=r"""attr_sets : mfem::ArraysByName<(int)>""")

    def __init__(self, attr):
        r"""__init__(AttributeSets self, intArray attr) -> AttributeSets"""
        _attribute_sets.AttributeSets_swiginit(self, _attribute_sets.new_AttributeSets(attr))

    def Copy(self, copy):
        r"""Copy(AttributeSets self, AttributeSets copy)"""
        return _attribute_sets.AttributeSets_Copy(self, copy)
    Copy = _swig_new_instance_method(_attribute_sets.AttributeSets_Copy)

    def SetsExist(self):
        r"""SetsExist(AttributeSets self) -> bool"""
        return _attribute_sets.AttributeSets_SetsExist(self)
    SetsExist = _swig_new_instance_method(_attribute_sets.AttributeSets_SetsExist)

    def GetAttributeSetNames(self):
        r"""GetAttributeSetNames(AttributeSets self) -> std::set< std::string >"""
        return _attribute_sets.AttributeSets_GetAttributeSetNames(self)
    GetAttributeSetNames = _swig_new_instance_method(_attribute_sets.AttributeSets_GetAttributeSetNames)

    def AttributeSetExists(self, name):
        r"""AttributeSetExists(AttributeSets self, std::string const & name) -> bool"""
        return _attribute_sets.AttributeSets_AttributeSetExists(self, name)
    AttributeSetExists = _swig_new_instance_method(_attribute_sets.AttributeSets_AttributeSetExists)

    def CreateAttributeSet(self, set_name):
        r"""CreateAttributeSet(AttributeSets self, std::string const & set_name) -> intArray"""
        return _attribute_sets.AttributeSets_CreateAttributeSet(self, set_name)
    CreateAttributeSet = _swig_new_instance_method(_attribute_sets.AttributeSets_CreateAttributeSet)

    def DeleteAttributeSet(self, set_name):
        r"""DeleteAttributeSet(AttributeSets self, std::string const & set_name)"""
        return _attribute_sets.AttributeSets_DeleteAttributeSet(self, set_name)
    DeleteAttributeSet = _swig_new_instance_method(_attribute_sets.AttributeSets_DeleteAttributeSet)

    def SetAttributeSet(self, set_name, attr):
        r"""SetAttributeSet(AttributeSets self, std::string const & set_name, intArray attr)"""
        return _attribute_sets.AttributeSets_SetAttributeSet(self, set_name, attr)
    SetAttributeSet = _swig_new_instance_method(_attribute_sets.AttributeSets_SetAttributeSet)

    def AddToAttributeSet(self, *args):
        r"""
        AddToAttributeSet(AttributeSets self, std::string const & set_name, int attr)
        AddToAttributeSet(AttributeSets self, std::string const & set_name, intArray attr)
        """
        return _attribute_sets.AttributeSets_AddToAttributeSet(self, *args)
    AddToAttributeSet = _swig_new_instance_method(_attribute_sets.AttributeSets_AddToAttributeSet)

    def RemoveFromAttributeSet(self, set_name, attr):
        r"""RemoveFromAttributeSet(AttributeSets self, std::string const & set_name, int attr)"""
        return _attribute_sets.AttributeSets_RemoveFromAttributeSet(self, set_name, attr)
    RemoveFromAttributeSet = _swig_new_instance_method(_attribute_sets.AttributeSets_RemoveFromAttributeSet)

    def Print(self, *args, **kwargs):
        r"""Print(AttributeSets self, std::ostream & out=out, int width=-1)"""
        return _attribute_sets.AttributeSets_Print(self, *args, **kwargs)
    Print = _swig_new_instance_method(_attribute_sets.AttributeSets_Print)

    def GetAttributeSet(self, *args):
        r"""
        GetAttributeSet(AttributeSets self, std::string const & set_name) -> intArray
        GetAttributeSet(AttributeSets self, std::string const & set_name) -> intArray
        """
        return _attribute_sets.AttributeSets_GetAttributeSet(self, *args)
    GetAttributeSet = _swig_new_instance_method(_attribute_sets.AttributeSets_GetAttributeSet)

    def GetAttributeSetMarker(self, set_name):
        r"""GetAttributeSetMarker(AttributeSets self, std::string const & set_name) -> intArray"""
        return _attribute_sets.AttributeSets_GetAttributeSetMarker(self, set_name)
    GetAttributeSetMarker = _swig_new_instance_method(_attribute_sets.AttributeSets_GetAttributeSetMarker)

    @staticmethod
    def AttrToMarker(max_attr, attrs):
        r"""AttrToMarker(int max_attr, intArray attrs) -> intArray"""
        return _attribute_sets.AttributeSets_AttrToMarker(max_attr, attrs)
    AttrToMarker = _swig_new_static_method(_attribute_sets.AttributeSets_AttrToMarker)
    __swig_destroy__ = _attribute_sets.delete_AttributeSets

# Register AttributeSets in _attribute_sets:
_attribute_sets.AttributeSets_swigregister(AttributeSets)

