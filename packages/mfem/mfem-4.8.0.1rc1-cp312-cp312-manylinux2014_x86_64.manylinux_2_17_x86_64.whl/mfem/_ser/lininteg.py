# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _lininteg
else:
    import _lininteg

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _lininteg.SWIG_PyInstanceMethod_New
_swig_new_static_method = _lininteg.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._ser.globals
import mfem._ser.fe
import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.vector
import mfem._ser.geom
import mfem._ser.intrules
import mfem._ser.densemat
import mfem._ser.operators
import mfem._ser.matrix
import mfem._ser.sparsemat
import mfem._ser.fe_base
import mfem._ser.doftrans
import mfem._ser.fe_fixed_order
import mfem._ser.element
import mfem._ser.table
import mfem._ser.hash
import mfem._ser.fe_h1
import mfem._ser.fe_nd
import mfem._ser.fe_rt
import mfem._ser.fe_l2
import mfem._ser.fe_nurbs
import mfem._ser.fe_pos
import mfem._ser.fe_ser
import mfem._ser.eltrans
import mfem._ser.coefficient
import mfem._ser.symmat
import mfem._ser.fespace
import mfem._ser.mesh
import mfem._ser.attribute_sets
import mfem._ser.arrays_by_name
import mfem._ser.sort_pairs
import mfem._ser.ncmesh
import mfem._ser.gridfunc
import mfem._ser.bilininteg
import mfem._ser.fe_coll
import mfem._ser.linearform
import mfem._ser.nonlininteg
import mfem._ser.integrator
import mfem._ser.bounds
import mfem._ser.vertex
import mfem._ser.vtk
import mfem._ser.std_vectors
import mfem._ser.handle
import mfem._ser.restriction
class LinearFormIntegrator(mfem._ser.integrator.Integrator):
    r"""Proxy of C++ mfem::LinearFormIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SupportsDevice(self):
        r"""SupportsDevice(LinearFormIntegrator self) -> bool"""
        return _lininteg.LinearFormIntegrator_SupportsDevice(self)
    SupportsDevice = _swig_new_instance_method(_lininteg.LinearFormIntegrator_SupportsDevice)

    def AssembleDevice(self, fes, markers, b):
        r"""AssembleDevice(LinearFormIntegrator self, FiniteElementSpace fes, intArray markers, Vector b)"""
        return _lininteg.LinearFormIntegrator_AssembleDevice(self, fes, markers, b)
    AssembleDevice = _swig_new_instance_method(_lininteg.LinearFormIntegrator_AssembleDevice)

    def AssembleRHSElementVect(self, *args):
        r"""
        AssembleRHSElementVect(LinearFormIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elvect)
        AssembleRHSElementVect(LinearFormIntegrator self, FiniteElement el, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(LinearFormIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elvect)
        """
        return _lininteg.LinearFormIntegrator_AssembleRHSElementVect(self, *args)
    AssembleRHSElementVect = _swig_new_instance_method(_lininteg.LinearFormIntegrator_AssembleRHSElementVect)
    __swig_destroy__ = _lininteg.delete_LinearFormIntegrator

# Register LinearFormIntegrator in _lininteg:
_lininteg.LinearFormIntegrator_swigregister(LinearFormIntegrator)
class DeltaLFIntegrator(LinearFormIntegrator):
    r"""Proxy of C++ mfem::DeltaLFIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def IsDelta(self):
        r"""IsDelta(DeltaLFIntegrator self) -> bool"""
        return _lininteg.DeltaLFIntegrator_IsDelta(self)
    IsDelta = _swig_new_instance_method(_lininteg.DeltaLFIntegrator_IsDelta)

    def GetDeltaCenter(self, center):
        r"""GetDeltaCenter(DeltaLFIntegrator self, Vector center)"""
        return _lininteg.DeltaLFIntegrator_GetDeltaCenter(self, center)
    GetDeltaCenter = _swig_new_instance_method(_lininteg.DeltaLFIntegrator_GetDeltaCenter)

    def AssembleDeltaElementVect(self, fe, Trans, elvect):
        r"""AssembleDeltaElementVect(DeltaLFIntegrator self, FiniteElement fe, ElementTransformation Trans, Vector elvect)"""
        return _lininteg.DeltaLFIntegrator_AssembleDeltaElementVect(self, fe, Trans, elvect)
    AssembleDeltaElementVect = _swig_new_instance_method(_lininteg.DeltaLFIntegrator_AssembleDeltaElementVect)
    __swig_destroy__ = _lininteg.delete_DeltaLFIntegrator

# Register DeltaLFIntegrator in _lininteg:
_lininteg.DeltaLFIntegrator_swigregister(DeltaLFIntegrator)
class DomainLFIntegrator(DeltaLFIntegrator):
    r"""Proxy of C++ mfem::DomainLFIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DomainLFIntegrator self, Coefficient QF, int a=2, int b=0) -> DomainLFIntegrator
        __init__(DomainLFIntegrator self, Coefficient QF, IntegrationRule ir) -> DomainLFIntegrator
        """
        _lininteg.DomainLFIntegrator_swiginit(self, _lininteg.new_DomainLFIntegrator(*args))

        self._coeff = args




    def SupportsDevice(self):
        r"""SupportsDevice(DomainLFIntegrator self) -> bool"""
        return _lininteg.DomainLFIntegrator_SupportsDevice(self)
    SupportsDevice = _swig_new_instance_method(_lininteg.DomainLFIntegrator_SupportsDevice)

    def AssembleDevice(self, fes, markers, b):
        r"""AssembleDevice(DomainLFIntegrator self, FiniteElementSpace fes, intArray markers, Vector b)"""
        return _lininteg.DomainLFIntegrator_AssembleDevice(self, fes, markers, b)
    AssembleDevice = _swig_new_instance_method(_lininteg.DomainLFIntegrator_AssembleDevice)

    def AssembleDeltaElementVect(self, fe, Trans, elvect):
        r"""AssembleDeltaElementVect(DomainLFIntegrator self, FiniteElement fe, ElementTransformation Trans, Vector elvect)"""
        return _lininteg.DomainLFIntegrator_AssembleDeltaElementVect(self, fe, Trans, elvect)
    AssembleDeltaElementVect = _swig_new_instance_method(_lininteg.DomainLFIntegrator_AssembleDeltaElementVect)

    def AssembleRHSElementVect(self, *args):
        r"""
        AssembleRHSElementVect(DomainLFIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elvect)
        AssembleRHSElementVect(DomainLFIntegrator self, FiniteElement el, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(DomainLFIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elvect)
        """
        return _lininteg.DomainLFIntegrator_AssembleRHSElementVect(self, *args)
    AssembleRHSElementVect = _swig_new_instance_method(_lininteg.DomainLFIntegrator_AssembleRHSElementVect)
    __swig_destroy__ = _lininteg.delete_DomainLFIntegrator

# Register DomainLFIntegrator in _lininteg:
_lininteg.DomainLFIntegrator_swigregister(DomainLFIntegrator)
class DomainLFGradIntegrator(DeltaLFIntegrator):
    r"""Proxy of C++ mfem::DomainLFGradIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, QF):
        r"""__init__(DomainLFGradIntegrator self, VectorCoefficient QF) -> DomainLFGradIntegrator"""
        _lininteg.DomainLFGradIntegrator_swiginit(self, _lininteg.new_DomainLFGradIntegrator(QF))

        self._coeff = QF




    def SupportsDevice(self):
        r"""SupportsDevice(DomainLFGradIntegrator self) -> bool"""
        return _lininteg.DomainLFGradIntegrator_SupportsDevice(self)
    SupportsDevice = _swig_new_instance_method(_lininteg.DomainLFGradIntegrator_SupportsDevice)

    def AssembleDevice(self, fes, markers, b):
        r"""AssembleDevice(DomainLFGradIntegrator self, FiniteElementSpace fes, intArray markers, Vector b)"""
        return _lininteg.DomainLFGradIntegrator_AssembleDevice(self, fes, markers, b)
    AssembleDevice = _swig_new_instance_method(_lininteg.DomainLFGradIntegrator_AssembleDevice)

    def AssembleDeltaElementVect(self, fe, Trans, elvect):
        r"""AssembleDeltaElementVect(DomainLFGradIntegrator self, FiniteElement fe, ElementTransformation Trans, Vector elvect)"""
        return _lininteg.DomainLFGradIntegrator_AssembleDeltaElementVect(self, fe, Trans, elvect)
    AssembleDeltaElementVect = _swig_new_instance_method(_lininteg.DomainLFGradIntegrator_AssembleDeltaElementVect)

    def AssembleRHSElementVect(self, *args):
        r"""
        AssembleRHSElementVect(DomainLFGradIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elvect)
        AssembleRHSElementVect(DomainLFGradIntegrator self, FiniteElement el, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(DomainLFGradIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elvect)
        """
        return _lininteg.DomainLFGradIntegrator_AssembleRHSElementVect(self, *args)
    AssembleRHSElementVect = _swig_new_instance_method(_lininteg.DomainLFGradIntegrator_AssembleRHSElementVect)
    __swig_destroy__ = _lininteg.delete_DomainLFGradIntegrator

# Register DomainLFGradIntegrator in _lininteg:
_lininteg.DomainLFGradIntegrator_swigregister(DomainLFGradIntegrator)
class BoundaryLFIntegrator(LinearFormIntegrator):
    r"""Proxy of C++ mfem::BoundaryLFIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, QG, a=1, b=1):
        r"""__init__(BoundaryLFIntegrator self, Coefficient QG, int a=1, int b=1) -> BoundaryLFIntegrator"""
        _lininteg.BoundaryLFIntegrator_swiginit(self, _lininteg.new_BoundaryLFIntegrator(QG, a, b))

        self._coeff = QG




    def SupportsDevice(self):
        r"""SupportsDevice(BoundaryLFIntegrator self) -> bool"""
        return _lininteg.BoundaryLFIntegrator_SupportsDevice(self)
    SupportsDevice = _swig_new_instance_method(_lininteg.BoundaryLFIntegrator_SupportsDevice)

    def AssembleDevice(self, fes, markers, b):
        r"""AssembleDevice(BoundaryLFIntegrator self, FiniteElementSpace fes, intArray markers, Vector b)"""
        return _lininteg.BoundaryLFIntegrator_AssembleDevice(self, fes, markers, b)
    AssembleDevice = _swig_new_instance_method(_lininteg.BoundaryLFIntegrator_AssembleDevice)

    def AssembleRHSElementVect(self, *args):
        r"""
        AssembleRHSElementVect(BoundaryLFIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elvect)
        AssembleRHSElementVect(BoundaryLFIntegrator self, FiniteElement el, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(BoundaryLFIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elvect)
        """
        return _lininteg.BoundaryLFIntegrator_AssembleRHSElementVect(self, *args)
    AssembleRHSElementVect = _swig_new_instance_method(_lininteg.BoundaryLFIntegrator_AssembleRHSElementVect)
    __swig_destroy__ = _lininteg.delete_BoundaryLFIntegrator

# Register BoundaryLFIntegrator in _lininteg:
_lininteg.BoundaryLFIntegrator_swigregister(BoundaryLFIntegrator)
class BoundaryNormalLFIntegrator(LinearFormIntegrator):
    r"""Proxy of C++ mfem::BoundaryNormalLFIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, QG, a=1, b=1):
        r"""__init__(BoundaryNormalLFIntegrator self, VectorCoefficient QG, int a=1, int b=1) -> BoundaryNormalLFIntegrator"""
        _lininteg.BoundaryNormalLFIntegrator_swiginit(self, _lininteg.new_BoundaryNormalLFIntegrator(QG, a, b))

        self._coeff = QG




    def SupportsDevice(self):
        r"""SupportsDevice(BoundaryNormalLFIntegrator self) -> bool"""
        return _lininteg.BoundaryNormalLFIntegrator_SupportsDevice(self)
    SupportsDevice = _swig_new_instance_method(_lininteg.BoundaryNormalLFIntegrator_SupportsDevice)

    def AssembleDevice(self, fes, markers, b):
        r"""AssembleDevice(BoundaryNormalLFIntegrator self, FiniteElementSpace fes, intArray markers, Vector b)"""
        return _lininteg.BoundaryNormalLFIntegrator_AssembleDevice(self, fes, markers, b)
    AssembleDevice = _swig_new_instance_method(_lininteg.BoundaryNormalLFIntegrator_AssembleDevice)

    def AssembleRHSElementVect(self, *args):
        r"""
        AssembleRHSElementVect(BoundaryNormalLFIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elvect)
        AssembleRHSElementVect(BoundaryNormalLFIntegrator self, FiniteElement el, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(BoundaryNormalLFIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elvect)
        """
        return _lininteg.BoundaryNormalLFIntegrator_AssembleRHSElementVect(self, *args)
    AssembleRHSElementVect = _swig_new_instance_method(_lininteg.BoundaryNormalLFIntegrator_AssembleRHSElementVect)
    __swig_destroy__ = _lininteg.delete_BoundaryNormalLFIntegrator

# Register BoundaryNormalLFIntegrator in _lininteg:
_lininteg.BoundaryNormalLFIntegrator_swigregister(BoundaryNormalLFIntegrator)
class BoundaryTangentialLFIntegrator(LinearFormIntegrator):
    r"""Proxy of C++ mfem::BoundaryTangentialLFIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, QG, a=1, b=1):
        r"""__init__(BoundaryTangentialLFIntegrator self, VectorCoefficient QG, int a=1, int b=1) -> BoundaryTangentialLFIntegrator"""
        _lininteg.BoundaryTangentialLFIntegrator_swiginit(self, _lininteg.new_BoundaryTangentialLFIntegrator(QG, a, b))

        self._coeff = QG




    def AssembleRHSElementVect(self, *args):
        r"""
        AssembleRHSElementVect(BoundaryTangentialLFIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elvect)
        AssembleRHSElementVect(BoundaryTangentialLFIntegrator self, FiniteElement el, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(BoundaryTangentialLFIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elvect)
        """
        return _lininteg.BoundaryTangentialLFIntegrator_AssembleRHSElementVect(self, *args)
    AssembleRHSElementVect = _swig_new_instance_method(_lininteg.BoundaryTangentialLFIntegrator_AssembleRHSElementVect)
    __swig_destroy__ = _lininteg.delete_BoundaryTangentialLFIntegrator

# Register BoundaryTangentialLFIntegrator in _lininteg:
_lininteg.BoundaryTangentialLFIntegrator_swigregister(BoundaryTangentialLFIntegrator)
class VectorDomainLFIntegrator(DeltaLFIntegrator):
    r"""Proxy of C++ mfem::VectorDomainLFIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, QF):
        r"""__init__(VectorDomainLFIntegrator self, VectorCoefficient QF) -> VectorDomainLFIntegrator"""
        _lininteg.VectorDomainLFIntegrator_swiginit(self, _lininteg.new_VectorDomainLFIntegrator(QF))

        self._ir=ir
        self._coeff = QF




    def SupportsDevice(self):
        r"""SupportsDevice(VectorDomainLFIntegrator self) -> bool"""
        return _lininteg.VectorDomainLFIntegrator_SupportsDevice(self)
    SupportsDevice = _swig_new_instance_method(_lininteg.VectorDomainLFIntegrator_SupportsDevice)

    def AssembleDevice(self, fes, markers, b):
        r"""AssembleDevice(VectorDomainLFIntegrator self, FiniteElementSpace fes, intArray markers, Vector b)"""
        return _lininteg.VectorDomainLFIntegrator_AssembleDevice(self, fes, markers, b)
    AssembleDevice = _swig_new_instance_method(_lininteg.VectorDomainLFIntegrator_AssembleDevice)

    def AssembleDeltaElementVect(self, fe, Trans, elvect):
        r"""AssembleDeltaElementVect(VectorDomainLFIntegrator self, FiniteElement fe, ElementTransformation Trans, Vector elvect)"""
        return _lininteg.VectorDomainLFIntegrator_AssembleDeltaElementVect(self, fe, Trans, elvect)
    AssembleDeltaElementVect = _swig_new_instance_method(_lininteg.VectorDomainLFIntegrator_AssembleDeltaElementVect)

    def AssembleRHSElementVect(self, *args):
        r"""
        AssembleRHSElementVect(VectorDomainLFIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elvect)
        AssembleRHSElementVect(VectorDomainLFIntegrator self, FiniteElement el, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(VectorDomainLFIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elvect)
        """
        return _lininteg.VectorDomainLFIntegrator_AssembleRHSElementVect(self, *args)
    AssembleRHSElementVect = _swig_new_instance_method(_lininteg.VectorDomainLFIntegrator_AssembleRHSElementVect)
    __swig_destroy__ = _lininteg.delete_VectorDomainLFIntegrator

# Register VectorDomainLFIntegrator in _lininteg:
_lininteg.VectorDomainLFIntegrator_swigregister(VectorDomainLFIntegrator)
class VectorDomainLFGradIntegrator(DeltaLFIntegrator):
    r"""Proxy of C++ mfem::VectorDomainLFGradIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, QF):
        r"""__init__(VectorDomainLFGradIntegrator self, VectorCoefficient QF) -> VectorDomainLFGradIntegrator"""
        _lininteg.VectorDomainLFGradIntegrator_swiginit(self, _lininteg.new_VectorDomainLFGradIntegrator(QF))

        self._coeff = QF




    def SupportsDevice(self):
        r"""SupportsDevice(VectorDomainLFGradIntegrator self) -> bool"""
        return _lininteg.VectorDomainLFGradIntegrator_SupportsDevice(self)
    SupportsDevice = _swig_new_instance_method(_lininteg.VectorDomainLFGradIntegrator_SupportsDevice)

    def AssembleDevice(self, fes, markers, b):
        r"""AssembleDevice(VectorDomainLFGradIntegrator self, FiniteElementSpace fes, intArray markers, Vector b)"""
        return _lininteg.VectorDomainLFGradIntegrator_AssembleDevice(self, fes, markers, b)
    AssembleDevice = _swig_new_instance_method(_lininteg.VectorDomainLFGradIntegrator_AssembleDevice)

    def AssembleDeltaElementVect(self, fe, Trans, elvect):
        r"""AssembleDeltaElementVect(VectorDomainLFGradIntegrator self, FiniteElement fe, ElementTransformation Trans, Vector elvect)"""
        return _lininteg.VectorDomainLFGradIntegrator_AssembleDeltaElementVect(self, fe, Trans, elvect)
    AssembleDeltaElementVect = _swig_new_instance_method(_lininteg.VectorDomainLFGradIntegrator_AssembleDeltaElementVect)

    def AssembleRHSElementVect(self, *args):
        r"""
        AssembleRHSElementVect(VectorDomainLFGradIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elvect)
        AssembleRHSElementVect(VectorDomainLFGradIntegrator self, FiniteElement el, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(VectorDomainLFGradIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elvect)
        """
        return _lininteg.VectorDomainLFGradIntegrator_AssembleRHSElementVect(self, *args)
    AssembleRHSElementVect = _swig_new_instance_method(_lininteg.VectorDomainLFGradIntegrator_AssembleRHSElementVect)
    __swig_destroy__ = _lininteg.delete_VectorDomainLFGradIntegrator

# Register VectorDomainLFGradIntegrator in _lininteg:
_lininteg.VectorDomainLFGradIntegrator_swigregister(VectorDomainLFGradIntegrator)
class VectorBoundaryLFIntegrator(LinearFormIntegrator):
    r"""Proxy of C++ mfem::VectorBoundaryLFIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, QG):
        r"""__init__(VectorBoundaryLFIntegrator self, VectorCoefficient QG) -> VectorBoundaryLFIntegrator"""
        _lininteg.VectorBoundaryLFIntegrator_swiginit(self, _lininteg.new_VectorBoundaryLFIntegrator(QG))

        self._coeff = QG




    def AssembleRHSElementVect(self, *args):
        r"""
        AssembleRHSElementVect(VectorBoundaryLFIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elvect)
        AssembleRHSElementVect(VectorBoundaryLFIntegrator self, FiniteElement el, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(VectorBoundaryLFIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elvect)
        """
        return _lininteg.VectorBoundaryLFIntegrator_AssembleRHSElementVect(self, *args)
    AssembleRHSElementVect = _swig_new_instance_method(_lininteg.VectorBoundaryLFIntegrator_AssembleRHSElementVect)
    __swig_destroy__ = _lininteg.delete_VectorBoundaryLFIntegrator

# Register VectorBoundaryLFIntegrator in _lininteg:
_lininteg.VectorBoundaryLFIntegrator_swigregister(VectorBoundaryLFIntegrator)
class VectorFEDomainLFIntegrator(DeltaLFIntegrator):
    r"""Proxy of C++ mfem::VectorFEDomainLFIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, F):
        r"""__init__(VectorFEDomainLFIntegrator self, VectorCoefficient F) -> VectorFEDomainLFIntegrator"""
        _lininteg.VectorFEDomainLFIntegrator_swiginit(self, _lininteg.new_VectorFEDomainLFIntegrator(F))

        self._coeff = F




    def AssembleDeltaElementVect(self, fe, Trans, elvect):
        r"""AssembleDeltaElementVect(VectorFEDomainLFIntegrator self, FiniteElement fe, ElementTransformation Trans, Vector elvect)"""
        return _lininteg.VectorFEDomainLFIntegrator_AssembleDeltaElementVect(self, fe, Trans, elvect)
    AssembleDeltaElementVect = _swig_new_instance_method(_lininteg.VectorFEDomainLFIntegrator_AssembleDeltaElementVect)

    def SupportsDevice(self):
        r"""SupportsDevice(VectorFEDomainLFIntegrator self) -> bool"""
        return _lininteg.VectorFEDomainLFIntegrator_SupportsDevice(self)
    SupportsDevice = _swig_new_instance_method(_lininteg.VectorFEDomainLFIntegrator_SupportsDevice)

    def AssembleDevice(self, fes, markers, b):
        r"""AssembleDevice(VectorFEDomainLFIntegrator self, FiniteElementSpace fes, intArray markers, Vector b)"""
        return _lininteg.VectorFEDomainLFIntegrator_AssembleDevice(self, fes, markers, b)
    AssembleDevice = _swig_new_instance_method(_lininteg.VectorFEDomainLFIntegrator_AssembleDevice)

    def AssembleRHSElementVect(self, *args):
        r"""
        AssembleRHSElementVect(VectorFEDomainLFIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elvect)
        AssembleRHSElementVect(VectorFEDomainLFIntegrator self, FiniteElement el, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(VectorFEDomainLFIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elvect)
        """
        return _lininteg.VectorFEDomainLFIntegrator_AssembleRHSElementVect(self, *args)
    AssembleRHSElementVect = _swig_new_instance_method(_lininteg.VectorFEDomainLFIntegrator_AssembleRHSElementVect)
    __swig_destroy__ = _lininteg.delete_VectorFEDomainLFIntegrator

# Register VectorFEDomainLFIntegrator in _lininteg:
_lininteg.VectorFEDomainLFIntegrator_swigregister(VectorFEDomainLFIntegrator)
class VectorFEDomainLFCurlIntegrator(DeltaLFIntegrator):
    r"""Proxy of C++ mfem::VectorFEDomainLFCurlIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, F):
        r"""__init__(VectorFEDomainLFCurlIntegrator self, VectorCoefficient F) -> VectorFEDomainLFCurlIntegrator"""
        _lininteg.VectorFEDomainLFCurlIntegrator_swiginit(self, _lininteg.new_VectorFEDomainLFCurlIntegrator(F))

        self._coeff = F




    def AssembleDeltaElementVect(self, fe, Trans, elvect):
        r"""AssembleDeltaElementVect(VectorFEDomainLFCurlIntegrator self, FiniteElement fe, ElementTransformation Trans, Vector elvect)"""
        return _lininteg.VectorFEDomainLFCurlIntegrator_AssembleDeltaElementVect(self, fe, Trans, elvect)
    AssembleDeltaElementVect = _swig_new_instance_method(_lininteg.VectorFEDomainLFCurlIntegrator_AssembleDeltaElementVect)

    def AssembleRHSElementVect(self, *args):
        r"""
        AssembleRHSElementVect(VectorFEDomainLFCurlIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elvect)
        AssembleRHSElementVect(VectorFEDomainLFCurlIntegrator self, FiniteElement el, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(VectorFEDomainLFCurlIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elvect)
        """
        return _lininteg.VectorFEDomainLFCurlIntegrator_AssembleRHSElementVect(self, *args)
    AssembleRHSElementVect = _swig_new_instance_method(_lininteg.VectorFEDomainLFCurlIntegrator_AssembleRHSElementVect)
    __swig_destroy__ = _lininteg.delete_VectorFEDomainLFCurlIntegrator

# Register VectorFEDomainLFCurlIntegrator in _lininteg:
_lininteg.VectorFEDomainLFCurlIntegrator_swigregister(VectorFEDomainLFCurlIntegrator)
class VectorFEDomainLFDivIntegrator(DeltaLFIntegrator):
    r"""Proxy of C++ mfem::VectorFEDomainLFDivIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, QF):
        r"""__init__(VectorFEDomainLFDivIntegrator self, Coefficient QF) -> VectorFEDomainLFDivIntegrator"""
        _lininteg.VectorFEDomainLFDivIntegrator_swiginit(self, _lininteg.new_VectorFEDomainLFDivIntegrator(QF))

        self._coeff = QF




    def AssembleDeltaElementVect(self, fe, Trans, elvect):
        r"""AssembleDeltaElementVect(VectorFEDomainLFDivIntegrator self, FiniteElement fe, ElementTransformation Trans, Vector elvect)"""
        return _lininteg.VectorFEDomainLFDivIntegrator_AssembleDeltaElementVect(self, fe, Trans, elvect)
    AssembleDeltaElementVect = _swig_new_instance_method(_lininteg.VectorFEDomainLFDivIntegrator_AssembleDeltaElementVect)

    def AssembleRHSElementVect(self, *args):
        r"""
        AssembleRHSElementVect(VectorFEDomainLFDivIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elvect)
        AssembleRHSElementVect(VectorFEDomainLFDivIntegrator self, FiniteElement el, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(VectorFEDomainLFDivIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elvect)
        """
        return _lininteg.VectorFEDomainLFDivIntegrator_AssembleRHSElementVect(self, *args)
    AssembleRHSElementVect = _swig_new_instance_method(_lininteg.VectorFEDomainLFDivIntegrator_AssembleRHSElementVect)
    __swig_destroy__ = _lininteg.delete_VectorFEDomainLFDivIntegrator

# Register VectorFEDomainLFDivIntegrator in _lininteg:
_lininteg.VectorFEDomainLFDivIntegrator_swigregister(VectorFEDomainLFDivIntegrator)
class VectorBoundaryFluxLFIntegrator(LinearFormIntegrator):
    r"""Proxy of C++ mfem::VectorBoundaryFluxLFIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, f, s=1.0, ir=None):
        r"""__init__(VectorBoundaryFluxLFIntegrator self, Coefficient f, mfem::real_t s=1.0, IntegrationRule ir=None) -> VectorBoundaryFluxLFIntegrator"""
        _lininteg.VectorBoundaryFluxLFIntegrator_swiginit(self, _lininteg.new_VectorBoundaryFluxLFIntegrator(f, s, ir))

        self._ir=ir
        self._coeff = f




    def AssembleRHSElementVect(self, *args):
        r"""
        AssembleRHSElementVect(VectorBoundaryFluxLFIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elvect)
        AssembleRHSElementVect(VectorBoundaryFluxLFIntegrator self, FiniteElement el, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(VectorBoundaryFluxLFIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elvect)
        """
        return _lininteg.VectorBoundaryFluxLFIntegrator_AssembleRHSElementVect(self, *args)
    AssembleRHSElementVect = _swig_new_instance_method(_lininteg.VectorBoundaryFluxLFIntegrator_AssembleRHSElementVect)
    __swig_destroy__ = _lininteg.delete_VectorBoundaryFluxLFIntegrator

# Register VectorBoundaryFluxLFIntegrator in _lininteg:
_lininteg.VectorBoundaryFluxLFIntegrator_swigregister(VectorBoundaryFluxLFIntegrator)
class VectorFEBoundaryFluxLFIntegrator(LinearFormIntegrator):
    r"""Proxy of C++ mfem::VectorFEBoundaryFluxLFIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(VectorFEBoundaryFluxLFIntegrator self, int a=1, int b=-1) -> VectorFEBoundaryFluxLFIntegrator
        __init__(VectorFEBoundaryFluxLFIntegrator self, Coefficient f, int a=2, int b=0) -> VectorFEBoundaryFluxLFIntegrator
        """
        _lininteg.VectorFEBoundaryFluxLFIntegrator_swiginit(self, _lininteg.new_VectorFEBoundaryFluxLFIntegrator(*args))

        self._coeff = args




    def AssembleRHSElementVect(self, *args):
        r"""
        AssembleRHSElementVect(VectorFEBoundaryFluxLFIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elvect)
        AssembleRHSElementVect(VectorFEBoundaryFluxLFIntegrator self, FiniteElement el, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(VectorFEBoundaryFluxLFIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elvect)
        """
        return _lininteg.VectorFEBoundaryFluxLFIntegrator_AssembleRHSElementVect(self, *args)
    AssembleRHSElementVect = _swig_new_instance_method(_lininteg.VectorFEBoundaryFluxLFIntegrator_AssembleRHSElementVect)

    def SupportsDevice(self):
        r"""SupportsDevice(VectorFEBoundaryFluxLFIntegrator self) -> bool"""
        return _lininteg.VectorFEBoundaryFluxLFIntegrator_SupportsDevice(self)
    SupportsDevice = _swig_new_instance_method(_lininteg.VectorFEBoundaryFluxLFIntegrator_SupportsDevice)

    def AssembleDevice(self, fes, markers, b):
        r"""AssembleDevice(VectorFEBoundaryFluxLFIntegrator self, FiniteElementSpace fes, intArray markers, Vector b)"""
        return _lininteg.VectorFEBoundaryFluxLFIntegrator_AssembleDevice(self, fes, markers, b)
    AssembleDevice = _swig_new_instance_method(_lininteg.VectorFEBoundaryFluxLFIntegrator_AssembleDevice)
    __swig_destroy__ = _lininteg.delete_VectorFEBoundaryFluxLFIntegrator

# Register VectorFEBoundaryFluxLFIntegrator in _lininteg:
_lininteg.VectorFEBoundaryFluxLFIntegrator_swigregister(VectorFEBoundaryFluxLFIntegrator)
class VectorFEBoundaryNormalLFIntegrator(LinearFormIntegrator):
    r"""Proxy of C++ mfem::VectorFEBoundaryNormalLFIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, f):
        r"""__init__(VectorFEBoundaryNormalLFIntegrator self, VectorCoefficient f) -> VectorFEBoundaryNormalLFIntegrator"""
        _lininteg.VectorFEBoundaryNormalLFIntegrator_swiginit(self, _lininteg.new_VectorFEBoundaryNormalLFIntegrator(f))

        self._coeff = f




    def AssembleRHSElementVect(self, *args):
        r"""
        AssembleRHSElementVect(VectorFEBoundaryNormalLFIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elvect)
        AssembleRHSElementVect(VectorFEBoundaryNormalLFIntegrator self, FiniteElement el, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(VectorFEBoundaryNormalLFIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elvect)
        """
        return _lininteg.VectorFEBoundaryNormalLFIntegrator_AssembleRHSElementVect(self, *args)
    AssembleRHSElementVect = _swig_new_instance_method(_lininteg.VectorFEBoundaryNormalLFIntegrator_AssembleRHSElementVect)
    __swig_destroy__ = _lininteg.delete_VectorFEBoundaryNormalLFIntegrator

# Register VectorFEBoundaryNormalLFIntegrator in _lininteg:
_lininteg.VectorFEBoundaryNormalLFIntegrator_swigregister(VectorFEBoundaryNormalLFIntegrator)
class VectorFEBoundaryTangentLFIntegrator(LinearFormIntegrator):
    r"""Proxy of C++ mfem::VectorFEBoundaryTangentLFIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, QG, a=2, b=0):
        r"""__init__(VectorFEBoundaryTangentLFIntegrator self, VectorCoefficient QG, int a=2, int b=0) -> VectorFEBoundaryTangentLFIntegrator"""
        _lininteg.VectorFEBoundaryTangentLFIntegrator_swiginit(self, _lininteg.new_VectorFEBoundaryTangentLFIntegrator(QG, a, b))

        self._coeff = QG




    def AssembleRHSElementVect(self, *args):
        r"""
        AssembleRHSElementVect(VectorFEBoundaryTangentLFIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elvect)
        AssembleRHSElementVect(VectorFEBoundaryTangentLFIntegrator self, FiniteElement el, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(VectorFEBoundaryTangentLFIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elvect)
        """
        return _lininteg.VectorFEBoundaryTangentLFIntegrator_AssembleRHSElementVect(self, *args)
    AssembleRHSElementVect = _swig_new_instance_method(_lininteg.VectorFEBoundaryTangentLFIntegrator_AssembleRHSElementVect)
    __swig_destroy__ = _lininteg.delete_VectorFEBoundaryTangentLFIntegrator

# Register VectorFEBoundaryTangentLFIntegrator in _lininteg:
_lininteg.VectorFEBoundaryTangentLFIntegrator_swigregister(VectorFEBoundaryTangentLFIntegrator)
class BoundaryFlowIntegrator(LinearFormIntegrator):
    r"""Proxy of C++ mfem::BoundaryFlowIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BoundaryFlowIntegrator self, Coefficient f_, VectorCoefficient u_, mfem::real_t a) -> BoundaryFlowIntegrator
        __init__(BoundaryFlowIntegrator self, Coefficient f_, VectorCoefficient u_, mfem::real_t a, mfem::real_t b) -> BoundaryFlowIntegrator
        """
        _lininteg.BoundaryFlowIntegrator_swiginit(self, _lininteg.new_BoundaryFlowIntegrator(*args))

        self._coeff = args




    def AssembleRHSElementVect(self, *args):
        r"""
        AssembleRHSElementVect(BoundaryFlowIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elvect)
        AssembleRHSElementVect(BoundaryFlowIntegrator self, FiniteElement el, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(BoundaryFlowIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elvect)
        """
        return _lininteg.BoundaryFlowIntegrator_AssembleRHSElementVect(self, *args)
    AssembleRHSElementVect = _swig_new_instance_method(_lininteg.BoundaryFlowIntegrator_AssembleRHSElementVect)
    __swig_destroy__ = _lininteg.delete_BoundaryFlowIntegrator

# Register BoundaryFlowIntegrator in _lininteg:
_lininteg.BoundaryFlowIntegrator_swigregister(BoundaryFlowIntegrator)
class DGDirichletLFIntegrator(LinearFormIntegrator):
    r"""Proxy of C++ mfem::DGDirichletLFIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DGDirichletLFIntegrator self, Coefficient u, mfem::real_t const s, mfem::real_t const k) -> DGDirichletLFIntegrator
        __init__(DGDirichletLFIntegrator self, Coefficient u, Coefficient q, mfem::real_t const s, mfem::real_t const k) -> DGDirichletLFIntegrator
        __init__(DGDirichletLFIntegrator self, Coefficient u, MatrixCoefficient q, mfem::real_t const s, mfem::real_t const k) -> DGDirichletLFIntegrator
        """
        _lininteg.DGDirichletLFIntegrator_swiginit(self, _lininteg.new_DGDirichletLFIntegrator(*args))

        self._coeff = args




    def AssembleRHSElementVect(self, *args):
        r"""
        AssembleRHSElementVect(DGDirichletLFIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elvect)
        AssembleRHSElementVect(DGDirichletLFIntegrator self, FiniteElement el, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(DGDirichletLFIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elvect)
        """
        return _lininteg.DGDirichletLFIntegrator_AssembleRHSElementVect(self, *args)
    AssembleRHSElementVect = _swig_new_instance_method(_lininteg.DGDirichletLFIntegrator_AssembleRHSElementVect)
    __swig_destroy__ = _lininteg.delete_DGDirichletLFIntegrator

# Register DGDirichletLFIntegrator in _lininteg:
_lininteg.DGDirichletLFIntegrator_swigregister(DGDirichletLFIntegrator)
class DGElasticityDirichletLFIntegrator(LinearFormIntegrator):
    r"""Proxy of C++ mfem::DGElasticityDirichletLFIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, uD_, lambda_, mu_, alpha_, kappa_):
        r"""__init__(DGElasticityDirichletLFIntegrator self, VectorCoefficient uD_, Coefficient lambda_, Coefficient mu_, mfem::real_t alpha_, mfem::real_t kappa_) -> DGElasticityDirichletLFIntegrator"""
        _lininteg.DGElasticityDirichletLFIntegrator_swiginit(self, _lininteg.new_DGElasticityDirichletLFIntegrator(uD_, lambda_, mu_, alpha_, kappa_))

        self._coeff = uD_




    def AssembleRHSElementVect(self, *args):
        r"""
        AssembleRHSElementVect(DGElasticityDirichletLFIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elvect)
        AssembleRHSElementVect(DGElasticityDirichletLFIntegrator self, FiniteElement el, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(DGElasticityDirichletLFIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elvect)
        """
        return _lininteg.DGElasticityDirichletLFIntegrator_AssembleRHSElementVect(self, *args)
    AssembleRHSElementVect = _swig_new_instance_method(_lininteg.DGElasticityDirichletLFIntegrator_AssembleRHSElementVect)
    __swig_destroy__ = _lininteg.delete_DGElasticityDirichletLFIntegrator

# Register DGElasticityDirichletLFIntegrator in _lininteg:
_lininteg.DGElasticityDirichletLFIntegrator_swigregister(DGElasticityDirichletLFIntegrator)
class WhiteGaussianNoiseDomainLFIntegrator(LinearFormIntegrator):
    r"""Proxy of C++ mfem::WhiteGaussianNoiseDomainLFIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed_=0):
        r"""__init__(WhiteGaussianNoiseDomainLFIntegrator self, int seed_=0) -> WhiteGaussianNoiseDomainLFIntegrator"""
        _lininteg.WhiteGaussianNoiseDomainLFIntegrator_swiginit(self, _lininteg.new_WhiteGaussianNoiseDomainLFIntegrator(seed_))

        self._coeff = QG




    def SetSeed(self, seed):
        r"""SetSeed(WhiteGaussianNoiseDomainLFIntegrator self, int seed)"""
        return _lininteg.WhiteGaussianNoiseDomainLFIntegrator_SetSeed(self, seed)
    SetSeed = _swig_new_instance_method(_lininteg.WhiteGaussianNoiseDomainLFIntegrator_SetSeed)

    def AssembleRHSElementVect(self, *args):
        r"""
        AssembleRHSElementVect(WhiteGaussianNoiseDomainLFIntegrator self, FiniteElement el, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(WhiteGaussianNoiseDomainLFIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(WhiteGaussianNoiseDomainLFIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elvect)
        """
        return _lininteg.WhiteGaussianNoiseDomainLFIntegrator_AssembleRHSElementVect(self, *args)
    AssembleRHSElementVect = _swig_new_instance_method(_lininteg.WhiteGaussianNoiseDomainLFIntegrator_AssembleRHSElementVect)

    def SaveFactors(self, NE):
        r"""SaveFactors(WhiteGaussianNoiseDomainLFIntegrator self, int NE)"""
        return _lininteg.WhiteGaussianNoiseDomainLFIntegrator_SaveFactors(self, NE)
    SaveFactors = _swig_new_instance_method(_lininteg.WhiteGaussianNoiseDomainLFIntegrator_SaveFactors)

    def ResetFactors(self, NE):
        r"""ResetFactors(WhiteGaussianNoiseDomainLFIntegrator self, int NE)"""
        return _lininteg.WhiteGaussianNoiseDomainLFIntegrator_ResetFactors(self, NE)
    ResetFactors = _swig_new_instance_method(_lininteg.WhiteGaussianNoiseDomainLFIntegrator_ResetFactors)
    __swig_destroy__ = _lininteg.delete_WhiteGaussianNoiseDomainLFIntegrator

# Register WhiteGaussianNoiseDomainLFIntegrator in _lininteg:
_lininteg.WhiteGaussianNoiseDomainLFIntegrator_swigregister(WhiteGaussianNoiseDomainLFIntegrator)
class VectorQuadratureLFIntegrator(LinearFormIntegrator):
    r"""Proxy of C++ mfem::VectorQuadratureLFIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, vqfc, ir=None):
        r"""__init__(VectorQuadratureLFIntegrator self, VectorQuadratureFunctionCoefficient vqfc, IntegrationRule ir=None) -> VectorQuadratureLFIntegrator"""
        _lininteg.VectorQuadratureLFIntegrator_swiginit(self, _lininteg.new_VectorQuadratureLFIntegrator(vqfc, ir))

        self._ir=ir
        self._coeff = vqfc




    def AssembleRHSElementVect(self, *args):
        r"""
        AssembleRHSElementVect(VectorQuadratureLFIntegrator self, FiniteElement el, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(VectorQuadratureLFIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(VectorQuadratureLFIntegrator self, FiniteElement fe, ElementTransformation Tr, Vector elvect)
        """
        return _lininteg.VectorQuadratureLFIntegrator_AssembleRHSElementVect(self, *args)
    AssembleRHSElementVect = _swig_new_instance_method(_lininteg.VectorQuadratureLFIntegrator_AssembleRHSElementVect)

    def SetIntRule(self, ir):
        r"""SetIntRule(VectorQuadratureLFIntegrator self, IntegrationRule ir)"""
        return _lininteg.VectorQuadratureLFIntegrator_SetIntRule(self, ir)
    SetIntRule = _swig_new_instance_method(_lininteg.VectorQuadratureLFIntegrator_SetIntRule)
    __swig_destroy__ = _lininteg.delete_VectorQuadratureLFIntegrator

# Register VectorQuadratureLFIntegrator in _lininteg:
_lininteg.VectorQuadratureLFIntegrator_swigregister(VectorQuadratureLFIntegrator)
class QuadratureLFIntegrator(LinearFormIntegrator):
    r"""Proxy of C++ mfem::QuadratureLFIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, qfc, ir=None):
        r"""__init__(QuadratureLFIntegrator self, QuadratureFunctionCoefficient qfc, IntegrationRule ir=None) -> QuadratureLFIntegrator"""
        _lininteg.QuadratureLFIntegrator_swiginit(self, _lininteg.new_QuadratureLFIntegrator(qfc, ir))

        self._ir=ir
        self._coeff = qfc




    def AssembleRHSElementVect(self, *args):
        r"""
        AssembleRHSElementVect(QuadratureLFIntegrator self, FiniteElement el, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(QuadratureLFIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elvect)
        AssembleRHSElementVect(QuadratureLFIntegrator self, FiniteElement fe, ElementTransformation Tr, Vector elvect)
        """
        return _lininteg.QuadratureLFIntegrator_AssembleRHSElementVect(self, *args)
    AssembleRHSElementVect = _swig_new_instance_method(_lininteg.QuadratureLFIntegrator_AssembleRHSElementVect)

    def SetIntRule(self, ir):
        r"""SetIntRule(QuadratureLFIntegrator self, IntegrationRule ir)"""
        return _lininteg.QuadratureLFIntegrator_SetIntRule(self, ir)
    SetIntRule = _swig_new_instance_method(_lininteg.QuadratureLFIntegrator_SetIntRule)
    __swig_destroy__ = _lininteg.delete_QuadratureLFIntegrator

# Register QuadratureLFIntegrator in _lininteg:
_lininteg.QuadratureLFIntegrator_swigregister(QuadratureLFIntegrator)
class PyLinearFormIntegrator(LinearFormIntegrator):
    r"""Proxy of C++ mfem::PyLinearFormIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ir=None):
        r"""__init__(PyLinearFormIntegrator self, IntegrationRule ir=None) -> PyLinearFormIntegrator"""
        if self.__class__ == PyLinearFormIntegrator:
            _self = None
        else:
            _self = self
        _lininteg.PyLinearFormIntegrator_swiginit(self, _lininteg.new_PyLinearFormIntegrator(_self, ir))

        self._ir=ir



    __swig_destroy__ = _lininteg.delete_PyLinearFormIntegrator
    def __disown__(self):
        self.this.disown()
        _lininteg.disown_PyLinearFormIntegrator(self)
        return weakref.proxy(self)

    def GetDefaultIntegrationRule(self, trial_fe, test_fe, trans):
        r"""GetDefaultIntegrationRule(PyLinearFormIntegrator self, FiniteElement trial_fe, FiniteElement test_fe, ElementTransformation trans) -> IntegrationRule"""
        return _lininteg.PyLinearFormIntegrator_GetDefaultIntegrationRule(self, trial_fe, test_fe, trans)
    GetDefaultIntegrationRule = _swig_new_instance_method(_lininteg.PyLinearFormIntegrator_GetDefaultIntegrationRule)

# Register PyLinearFormIntegrator in _lininteg:
_lininteg.PyLinearFormIntegrator_swigregister(PyLinearFormIntegrator)

