# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _submesh
else:
    import _submesh

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _submesh.SWIG_PyInstanceMethod_New
_swig_new_static_method = _submesh.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._ser.mesh
import mfem._ser.matrix
import mfem._ser.vector
import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.globals
import mfem._ser.operators
import mfem._ser.attribute_sets
import mfem._ser.arrays_by_name
import mfem._ser.sort_pairs
import mfem._ser.ncmesh
import mfem._ser.gridfunc
import mfem._ser.coefficient
import mfem._ser.symmat
import mfem._ser.intrules
import mfem._ser.sparsemat
import mfem._ser.densemat
import mfem._ser.eltrans
import mfem._ser.fe
import mfem._ser.geom
import mfem._ser.fe_base
import mfem._ser.doftrans
import mfem._ser.fe_fixed_order
import mfem._ser.element
import mfem._ser.table
import mfem._ser.hash
import mfem._ser.fe_h1
import mfem._ser.fe_nd
import mfem._ser.fe_rt
import mfem._ser.fe_l2
import mfem._ser.fe_nurbs
import mfem._ser.fe_pos
import mfem._ser.fe_ser
import mfem._ser.fespace
import mfem._ser.fe_coll
import mfem._ser.lininteg
import mfem._ser.handle
import mfem._ser.restriction
import mfem._ser.bilininteg
import mfem._ser.linearform
import mfem._ser.nonlininteg
import mfem._ser.integrator
import mfem._ser.bounds
import mfem._ser.vertex
import mfem._ser.vtk
import mfem._ser.std_vectors
import mfem._ser.transfermap
class SubMesh(mfem._ser.mesh.Mesh):
    r"""Proxy of C++ mfem::SubMesh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    From_Domain = _submesh.SubMesh_From_Domain
    
    From_Boundary = _submesh.SubMesh_From_Boundary
    

    def __init__(self, arg2):
        r"""__init__(SubMesh self, SubMesh arg2) -> SubMesh"""
        _submesh.SubMesh_swiginit(self, _submesh.new_SubMesh(arg2))

    @staticmethod
    def CreateFromDomain(parent, domain_attributes):
        r"""CreateFromDomain(Mesh parent, intArray domain_attributes) -> SubMesh"""
        return _submesh.SubMesh_CreateFromDomain(parent, domain_attributes)
    CreateFromDomain = _swig_new_static_method(_submesh.SubMesh_CreateFromDomain)

    @staticmethod
    def CreateFromBoundary(parent, boundary_attributes):
        r"""CreateFromBoundary(Mesh parent, intArray boundary_attributes) -> SubMesh"""
        return _submesh.SubMesh_CreateFromBoundary(parent, boundary_attributes)
    CreateFromBoundary = _swig_new_static_method(_submesh.SubMesh_CreateFromBoundary)

    def GetParent(self):
        r"""GetParent(SubMesh self) -> Mesh"""
        return _submesh.SubMesh_GetParent(self)
    GetParent = _swig_new_instance_method(_submesh.SubMesh_GetParent)

    def GetFrom(self):
        r"""GetFrom(SubMesh self) -> mfem::SubMesh::From"""
        return _submesh.SubMesh_GetFrom(self)
    GetFrom = _swig_new_instance_method(_submesh.SubMesh_GetFrom)

    def GetParentElementIDMap(self):
        r"""GetParentElementIDMap(SubMesh self) -> intArray"""
        return _submesh.SubMesh_GetParentElementIDMap(self)
    GetParentElementIDMap = _swig_new_instance_method(_submesh.SubMesh_GetParentElementIDMap)

    def GetParentFaceIDMap(self):
        r"""GetParentFaceIDMap(SubMesh self) -> intArray"""
        return _submesh.SubMesh_GetParentFaceIDMap(self)
    GetParentFaceIDMap = _swig_new_instance_method(_submesh.SubMesh_GetParentFaceIDMap)

    def GetParentEdgeIDMap(self):
        r"""GetParentEdgeIDMap(SubMesh self) -> intArray"""
        return _submesh.SubMesh_GetParentEdgeIDMap(self)
    GetParentEdgeIDMap = _swig_new_instance_method(_submesh.SubMesh_GetParentEdgeIDMap)

    def GetParentFaceOrientations(self):
        r"""GetParentFaceOrientations(SubMesh self) -> intArray"""
        return _submesh.SubMesh_GetParentFaceOrientations(self)
    GetParentFaceOrientations = _swig_new_instance_method(_submesh.SubMesh_GetParentFaceOrientations)

    def GetParentVertexIDMap(self):
        r"""GetParentVertexIDMap(SubMesh self) -> intArray"""
        return _submesh.SubMesh_GetParentVertexIDMap(self)
    GetParentVertexIDMap = _swig_new_instance_method(_submesh.SubMesh_GetParentVertexIDMap)

    def GetSubMeshElementFromParent(self, pe):
        r"""GetSubMeshElementFromParent(SubMesh self, int pe) -> int"""
        return _submesh.SubMesh_GetSubMeshElementFromParent(self, pe)
    GetSubMeshElementFromParent = _swig_new_instance_method(_submesh.SubMesh_GetSubMeshElementFromParent)

    def GetSubMeshVertexFromParent(self, pv):
        r"""GetSubMeshVertexFromParent(SubMesh self, int pv) -> int"""
        return _submesh.SubMesh_GetSubMeshVertexFromParent(self, pv)
    GetSubMeshVertexFromParent = _swig_new_instance_method(_submesh.SubMesh_GetSubMeshVertexFromParent)

    def GetSubMeshEdgeFromParent(self, pe):
        r"""GetSubMeshEdgeFromParent(SubMesh self, int pe) -> int"""
        return _submesh.SubMesh_GetSubMeshEdgeFromParent(self, pe)
    GetSubMeshEdgeFromParent = _swig_new_instance_method(_submesh.SubMesh_GetSubMeshEdgeFromParent)

    def GetSubMeshFaceFromParent(self, pf):
        r"""GetSubMeshFaceFromParent(SubMesh self, int pf) -> int"""
        return _submesh.SubMesh_GetSubMeshFaceFromParent(self, pf)
    GetSubMeshFaceFromParent = _swig_new_instance_method(_submesh.SubMesh_GetSubMeshFaceFromParent)

    @staticmethod
    def Transfer(src, dst):
        r"""Transfer(GridFunction src, GridFunction dst)"""
        return _submesh.SubMesh_Transfer(src, dst)
    Transfer = _swig_new_static_method(_submesh.SubMesh_Transfer)

    @staticmethod
    def CreateTransferMap(src, dst):
        r"""CreateTransferMap(GridFunction src, GridFunction dst) -> TransferMap"""
        return _submesh.SubMesh_CreateTransferMap(src, dst)
    CreateTransferMap = _swig_new_static_method(_submesh.SubMesh_CreateTransferMap)

    @staticmethod
    def IsSubMesh(m):
        r"""IsSubMesh(Mesh m) -> bool"""
        return _submesh.SubMesh_IsSubMesh(m)
    IsSubMesh = _swig_new_static_method(_submesh.SubMesh_IsSubMesh)
    __swig_destroy__ = _submesh.delete_SubMesh

# Register SubMesh in _submesh:
_submesh.SubMesh_swigregister(SubMesh)

