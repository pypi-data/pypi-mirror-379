# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ncmesh
else:
    import _ncmesh

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _ncmesh.SWIG_PyInstanceMethod_New
_swig_new_static_method = _ncmesh.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._ser.globals
import mfem._ser.mesh
import mfem._ser.matrix
import mfem._ser.vector
import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.operators
import mfem._ser.attribute_sets
import mfem._ser.arrays_by_name
import mfem._ser.sort_pairs
import mfem._ser.gridfunc
import mfem._ser.coefficient
import mfem._ser.symmat
import mfem._ser.intrules
import mfem._ser.sparsemat
import mfem._ser.densemat
import mfem._ser.eltrans
import mfem._ser.fe
import mfem._ser.geom
import mfem._ser.fe_base
import mfem._ser.doftrans
import mfem._ser.fe_fixed_order
import mfem._ser.element
import mfem._ser.table
import mfem._ser.hash
import mfem._ser.fe_h1
import mfem._ser.fe_nd
import mfem._ser.fe_rt
import mfem._ser.fe_l2
import mfem._ser.fe_nurbs
import mfem._ser.fe_pos
import mfem._ser.fe_ser
import mfem._ser.fespace
import mfem._ser.fe_coll
import mfem._ser.lininteg
import mfem._ser.handle
import mfem._ser.restriction
import mfem._ser.bilininteg
import mfem._ser.linearform
import mfem._ser.nonlininteg
import mfem._ser.integrator
import mfem._ser.bounds
import mfem._ser.vertex
import mfem._ser.vtk
import mfem._ser.std_vectors
class Refinement(object):
    r"""Proxy of C++ mfem::Refinement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    index = property(_ncmesh.Refinement_index_get, _ncmesh.Refinement_index_set, doc=r"""index : int""")
    X = _ncmesh.Refinement_X
    
    Y = _ncmesh.Refinement_Y
    
    Z = _ncmesh.Refinement_Z
    
    XY = _ncmesh.Refinement_XY
    
    XZ = _ncmesh.Refinement_XZ
    
    YZ = _ncmesh.Refinement_YZ
    
    XYZ = _ncmesh.Refinement_XYZ
    
    s = property(_ncmesh.Refinement_s_get, _ncmesh.Refinement_s_set, doc=r"""s : a(3).mfem::real_t""")

    def __init__(self, *args):
        r"""
        __init__(Refinement self) -> Refinement
        __init__(Refinement self, int index) -> Refinement
        __init__(Refinement self, int index, std::initializer_list< mfem::Refinement::ScaledType > const & refs) -> Refinement
        __init__(Refinement self, int index, char type, mfem::real_t scale=0.5) -> Refinement
        """
        _ncmesh.Refinement_swiginit(self, _ncmesh.new_Refinement(*args))

    def GetType(self):
        r"""GetType(Refinement self) -> char"""
        return _ncmesh.Refinement_GetType(self)
    GetType = _swig_new_instance_method(_ncmesh.Refinement_GetType)

    def Set(self, element, type, scale=0.5):
        r"""Set(Refinement self, int element, char type, mfem::real_t scale=0.5)"""
        return _ncmesh.Refinement_Set(self, element, type, scale)
    Set = _swig_new_instance_method(_ncmesh.Refinement_Set)

    def SetType(self, type, scale=0.5):
        r"""SetType(Refinement self, char type, mfem::real_t scale=0.5)"""
        return _ncmesh.Refinement_SetType(self, type, scale)
    SetType = _swig_new_instance_method(_ncmesh.Refinement_SetType)

    def SetScaleForType(self, scale):
        r"""SetScaleForType(Refinement self, mfem::real_t const * scale)"""
        return _ncmesh.Refinement_SetScaleForType(self, scale)
    SetScaleForType = _swig_new_instance_method(_ncmesh.Refinement_SetScaleForType)
    __swig_destroy__ = _ncmesh.delete_Refinement

# Register Refinement in _ncmesh:
_ncmesh.Refinement_swigregister(Refinement)
class Embedding(object):
    r"""Proxy of C++ mfem::Embedding class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    parent = property(_ncmesh.Embedding_parent_get, _ncmesh.Embedding_parent_set, doc=r"""parent : int""")
    geom = property(_ncmesh.Embedding_geom_get, _ncmesh.Embedding_geom_set, doc=r"""geom : unsigned int""")
    matrix = property(_ncmesh.Embedding_matrix_get, _ncmesh.Embedding_matrix_set, doc=r"""matrix : unsigned int""")
    ghost = property(_ncmesh.Embedding_ghost_get, _ncmesh.Embedding_ghost_set, doc=r"""ghost : unsigned int""")

    def __init__(self, *args):
        r"""
        __init__(Embedding self) -> Embedding
        __init__(Embedding self, int elem, mfem::Geometry::Type geom, int matrix=0, bool ghost=False) -> Embedding
        """
        _ncmesh.Embedding_swiginit(self, _ncmesh.new_Embedding(*args))
    __swig_destroy__ = _ncmesh.delete_Embedding

# Register Embedding in _ncmesh:
_ncmesh.Embedding_swigregister(Embedding)
class CoarseFineTransformations(object):
    r"""Proxy of C++ mfem::CoarseFineTransformations class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    embeddings = property(_ncmesh.CoarseFineTransformations_embeddings_get, doc=r"""embeddings : mfem::Array<(mfem::Embedding)>""")
    point_matrices = property(_ncmesh.CoarseFineTransformations_point_matrices_get, _ncmesh.CoarseFineTransformations_point_matrices_set, doc=r"""point_matrices : a(mfem::Geometry::NumGeom).mfem::DenseTensor""")

    def MakeCoarseToFineTable(self, coarse_to_fine, want_ghosts=False):
        r"""MakeCoarseToFineTable(CoarseFineTransformations self, Table coarse_to_fine, bool want_ghosts=False)"""
        return _ncmesh.CoarseFineTransformations_MakeCoarseToFineTable(self, coarse_to_fine, want_ghosts)
    MakeCoarseToFineTable = _swig_new_instance_method(_ncmesh.CoarseFineTransformations_MakeCoarseToFineTable)

    def Clear(self):
        r"""Clear(CoarseFineTransformations self)"""
        return _ncmesh.CoarseFineTransformations_Clear(self)
    Clear = _swig_new_instance_method(_ncmesh.CoarseFineTransformations_Clear)

    def IsInitialized(self):
        r"""IsInitialized(CoarseFineTransformations self) -> bool"""
        return _ncmesh.CoarseFineTransformations_IsInitialized(self)
    IsInitialized = _swig_new_instance_method(_ncmesh.CoarseFineTransformations_IsInitialized)

    def MemoryUsage(self):
        r"""MemoryUsage(CoarseFineTransformations self) -> long"""
        return _ncmesh.CoarseFineTransformations_MemoryUsage(self)
    MemoryUsage = _swig_new_instance_method(_ncmesh.CoarseFineTransformations_MemoryUsage)

    def GetCoarseToFineMap(self, fine_mesh, coarse_to_fine):
        r"""GetCoarseToFineMap(CoarseFineTransformations self, Mesh fine_mesh, Table coarse_to_fine)"""
        return _ncmesh.CoarseFineTransformations_GetCoarseToFineMap(self, fine_mesh, coarse_to_fine)
    GetCoarseToFineMap = _swig_new_instance_method(_ncmesh.CoarseFineTransformations_GetCoarseToFineMap)

    def __init__(self):
        r"""__init__(CoarseFineTransformations self) -> CoarseFineTransformations"""
        _ncmesh.CoarseFineTransformations_swiginit(self, _ncmesh.new_CoarseFineTransformations())
    __swig_destroy__ = _ncmesh.delete_CoarseFineTransformations

# Register CoarseFineTransformations in _ncmesh:
_ncmesh.CoarseFineTransformations_swigregister(CoarseFineTransformations)
class NCMesh(object):
    r"""Proxy of C++ mfem::NCMesh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(NCMesh self, Mesh mesh) -> NCMesh
        __init__(NCMesh self, std::istream & input, int version, int & curved, int & is_nc) -> NCMesh
        __init__(NCMesh self, NCMesh other) -> NCMesh
        """
        _ncmesh.NCMesh_swiginit(self, _ncmesh.new_NCMesh(*args))
    __swig_destroy__ = _ncmesh.delete_NCMesh

    def Dimension(self):
        r"""Dimension(NCMesh self) -> int"""
        return _ncmesh.NCMesh_Dimension(self)
    Dimension = _swig_new_instance_method(_ncmesh.NCMesh_Dimension)

    def SpaceDimension(self):
        r"""SpaceDimension(NCMesh self) -> int"""
        return _ncmesh.NCMesh_SpaceDimension(self)
    SpaceDimension = _swig_new_instance_method(_ncmesh.NCMesh_SpaceDimension)

    def GetNVertices(self):
        r"""GetNVertices(NCMesh self) -> int"""
        return _ncmesh.NCMesh_GetNVertices(self)
    GetNVertices = _swig_new_instance_method(_ncmesh.NCMesh_GetNVertices)

    def GetNEdges(self):
        r"""GetNEdges(NCMesh self) -> int"""
        return _ncmesh.NCMesh_GetNEdges(self)
    GetNEdges = _swig_new_instance_method(_ncmesh.NCMesh_GetNEdges)

    def GetNFaces(self):
        r"""GetNFaces(NCMesh self) -> int"""
        return _ncmesh.NCMesh_GetNFaces(self)
    GetNFaces = _swig_new_instance_method(_ncmesh.NCMesh_GetNFaces)

    def GetNGhostElements(self):
        r"""GetNGhostElements(NCMesh self) -> int"""
        return _ncmesh.NCMesh_GetNGhostElements(self)
    GetNGhostElements = _swig_new_instance_method(_ncmesh.NCMesh_GetNGhostElements)

    def Refine(self, refinements):
        r"""Refine(NCMesh self, RefinementArray refinements)"""
        return _ncmesh.NCMesh_Refine(self, refinements)
    Refine = _swig_new_instance_method(_ncmesh.NCMesh_Refine)

    def LimitNCLevel(self, max_nc_level):
        r"""LimitNCLevel(NCMesh self, int max_nc_level)"""
        return _ncmesh.NCMesh_LimitNCLevel(self, max_nc_level)
    LimitNCLevel = _swig_new_instance_method(_ncmesh.NCMesh_LimitNCLevel)

    def GetDerefinementTable(self):
        r"""GetDerefinementTable(NCMesh self) -> Table"""
        return _ncmesh.NCMesh_GetDerefinementTable(self)
    GetDerefinementTable = _swig_new_instance_method(_ncmesh.NCMesh_GetDerefinementTable)

    def CheckDerefinementNCLevel(self, deref_table, level_ok, max_nc_level):
        r"""CheckDerefinementNCLevel(NCMesh self, Table deref_table, intArray level_ok, int max_nc_level)"""
        return _ncmesh.NCMesh_CheckDerefinementNCLevel(self, deref_table, level_ok, max_nc_level)
    CheckDerefinementNCLevel = _swig_new_instance_method(_ncmesh.NCMesh_CheckDerefinementNCLevel)

    def Derefine(self, derefs):
        r"""Derefine(NCMesh self, intArray derefs)"""
        return _ncmesh.NCMesh_Derefine(self, derefs)
    Derefine = _swig_new_instance_method(_ncmesh.NCMesh_Derefine)

    def GetFaceList(self):
        r"""GetFaceList(NCMesh self) -> mfem::NCMesh::NCList const &"""
        return _ncmesh.NCMesh_GetFaceList(self)
    GetFaceList = _swig_new_instance_method(_ncmesh.NCMesh_GetFaceList)

    def GetEdgeList(self):
        r"""GetEdgeList(NCMesh self) -> mfem::NCMesh::NCList const &"""
        return _ncmesh.NCMesh_GetEdgeList(self)
    GetEdgeList = _swig_new_instance_method(_ncmesh.NCMesh_GetEdgeList)

    def GetVertexList(self):
        r"""GetVertexList(NCMesh self) -> mfem::NCMesh::NCList const &"""
        return _ncmesh.NCMesh_GetVertexList(self)
    GetVertexList = _swig_new_instance_method(_ncmesh.NCMesh_GetVertexList)

    def GetNCList(self, entity):
        r"""GetNCList(NCMesh self, int entity) -> mfem::NCMesh::NCList const &"""
        return _ncmesh.NCMesh_GetNCList(self, entity)
    GetNCList = _swig_new_instance_method(_ncmesh.NCMesh_GetNCList)

    def MarkCoarseLevel(self):
        r"""MarkCoarseLevel(NCMesh self)"""
        return _ncmesh.NCMesh_MarkCoarseLevel(self)
    MarkCoarseLevel = _swig_new_instance_method(_ncmesh.NCMesh_MarkCoarseLevel)

    def GetRefinementTransforms(self):
        r"""GetRefinementTransforms(NCMesh self) -> CoarseFineTransformations"""
        return _ncmesh.NCMesh_GetRefinementTransforms(self)
    GetRefinementTransforms = _swig_new_instance_method(_ncmesh.NCMesh_GetRefinementTransforms)

    def GetDerefinementTransforms(self):
        r"""GetDerefinementTransforms(NCMesh self) -> CoarseFineTransformations"""
        return _ncmesh.NCMesh_GetDerefinementTransforms(self)
    GetDerefinementTransforms = _swig_new_instance_method(_ncmesh.NCMesh_GetDerefinementTransforms)

    def ClearTransforms(self):
        r"""ClearTransforms(NCMesh self)"""
        return _ncmesh.NCMesh_ClearTransforms(self)
    ClearTransforms = _swig_new_instance_method(_ncmesh.NCMesh_ClearTransforms)

    @staticmethod
    def GridSfcOrdering2D(width, height, coords):
        r"""GridSfcOrdering2D(int width, int height, intArray coords)"""
        return _ncmesh.NCMesh_GridSfcOrdering2D(width, height, coords)
    GridSfcOrdering2D = _swig_new_static_method(_ncmesh.NCMesh_GridSfcOrdering2D)

    @staticmethod
    def GridSfcOrdering3D(width, height, depth, coords):
        r"""GridSfcOrdering3D(int width, int height, int depth, intArray coords)"""
        return _ncmesh.NCMesh_GridSfcOrdering3D(width, height, depth, coords)
    GridSfcOrdering3D = _swig_new_static_method(_ncmesh.NCMesh_GridSfcOrdering3D)

    def GetEdgeVertices(self, edge_id, vert_index, oriented=True):
        r"""GetEdgeVertices(NCMesh self, mfem::NCMesh::MeshId const & edge_id, int [2] vert_index, bool oriented=True)"""
        return _ncmesh.NCMesh_GetEdgeVertices(self, edge_id, vert_index, oriented)
    GetEdgeVertices = _swig_new_instance_method(_ncmesh.NCMesh_GetEdgeVertices)

    def GetEdgeNCOrientation(self, edge_id):
        r"""GetEdgeNCOrientation(NCMesh self, mfem::NCMesh::MeshId const & edge_id) -> int"""
        return _ncmesh.NCMesh_GetEdgeNCOrientation(self, edge_id)
    GetEdgeNCOrientation = _swig_new_instance_method(_ncmesh.NCMesh_GetEdgeNCOrientation)

    def GetFaceVerticesEdges(self, face_id, vert_index, edge_index, edge_orientation):
        r"""GetFaceVerticesEdges(NCMesh self, mfem::NCMesh::MeshId const & face_id, int [4] vert_index, int [4] edge_index, int [4] edge_orientation) -> int"""
        return _ncmesh.NCMesh_GetFaceVerticesEdges(self, face_id, vert_index, edge_index, edge_orientation)
    GetFaceVerticesEdges = _swig_new_instance_method(_ncmesh.NCMesh_GetFaceVerticesEdges)

    def GetEdgeMaster(self, v1, v2):
        r"""GetEdgeMaster(NCMesh self, int v1, int v2) -> int"""
        return _ncmesh.NCMesh_GetEdgeMaster(self, v1, v2)
    GetEdgeMaster = _swig_new_instance_method(_ncmesh.NCMesh_GetEdgeMaster)

    def GetBoundaryClosure(self, bdr_attr_is_ess, bdr_vertices, bdr_edges, bdr_faces):
        r"""GetBoundaryClosure(NCMesh self, intArray bdr_attr_is_ess, intArray bdr_vertices, intArray bdr_edges, intArray bdr_faces)"""
        return _ncmesh.NCMesh_GetBoundaryClosure(self, bdr_attr_is_ess, bdr_vertices, bdr_edges, bdr_faces)
    GetBoundaryClosure = _swig_new_instance_method(_ncmesh.NCMesh_GetBoundaryClosure)

    def GetElementGeometry(self, index):
        r"""GetElementGeometry(NCMesh self, int index) -> mfem::Geometry::Type"""
        return _ncmesh.NCMesh_GetElementGeometry(self, index)
    GetElementGeometry = _swig_new_instance_method(_ncmesh.NCMesh_GetElementGeometry)

    def GetFaceGeometry(self, index):
        r"""GetFaceGeometry(NCMesh self, int index) -> mfem::Geometry::Type"""
        return _ncmesh.NCMesh_GetFaceGeometry(self, index)
    GetFaceGeometry = _swig_new_instance_method(_ncmesh.NCMesh_GetFaceGeometry)

    def GetNumRootElements(self):
        r"""GetNumRootElements(NCMesh self) -> int"""
        return _ncmesh.NCMesh_GetNumRootElements(self)
    GetNumRootElements = _swig_new_instance_method(_ncmesh.NCMesh_GetNumRootElements)

    def GetElementDepth(self, i):
        r"""GetElementDepth(NCMesh self, int i) -> int"""
        return _ncmesh.NCMesh_GetElementDepth(self, i)
    GetElementDepth = _swig_new_instance_method(_ncmesh.NCMesh_GetElementDepth)

    def GetElementSizeReduction(self, i):
        r"""GetElementSizeReduction(NCMesh self, int i) -> int"""
        return _ncmesh.NCMesh_GetElementSizeReduction(self, i)
    GetElementSizeReduction = _swig_new_instance_method(_ncmesh.NCMesh_GetElementSizeReduction)

    def GetElementFacesAttributes(self, i, faces, fattr):
        r"""GetElementFacesAttributes(NCMesh self, int i, intArray faces, intArray fattr)"""
        return _ncmesh.NCMesh_GetElementFacesAttributes(self, i, faces, fattr)
    GetElementFacesAttributes = _swig_new_instance_method(_ncmesh.NCMesh_GetElementFacesAttributes)

    def SetAttribute(self, i, attr):
        r"""SetAttribute(NCMesh self, int i, int attr)"""
        return _ncmesh.NCMesh_SetAttribute(self, i, attr)
    SetAttribute = _swig_new_instance_method(_ncmesh.NCMesh_SetAttribute)

    def Print(self, *args, **kwargs):
        r"""Print(NCMesh self, std::ostream & out, std::string const & comments="")"""
        return _ncmesh.NCMesh_Print(self, *args, **kwargs)
    Print = _swig_new_instance_method(_ncmesh.NCMesh_Print)

    def IsLegacyLoaded(self):
        r"""IsLegacyLoaded(NCMesh self) -> bool"""
        return _ncmesh.NCMesh_IsLegacyLoaded(self)
    IsLegacyLoaded = _swig_new_instance_method(_ncmesh.NCMesh_IsLegacyLoaded)

    def LegacyToNewVertexOrdering(self, order):
        r"""LegacyToNewVertexOrdering(NCMesh self, intArray order)"""
        return _ncmesh.NCMesh_LegacyToNewVertexOrdering(self, order)
    LegacyToNewVertexOrdering = _swig_new_instance_method(_ncmesh.NCMesh_LegacyToNewVertexOrdering)

    def Trim(self):
        r"""Trim(NCMesh self)"""
        return _ncmesh.NCMesh_Trim(self)
    Trim = _swig_new_instance_method(_ncmesh.NCMesh_Trim)

    def MemoryUsage(self):
        r"""MemoryUsage(NCMesh self) -> long"""
        return _ncmesh.NCMesh_MemoryUsage(self)
    MemoryUsage = _swig_new_instance_method(_ncmesh.NCMesh_MemoryUsage)

    def PrintMemoryDetail(self):
        r"""PrintMemoryDetail(NCMesh self) -> int"""
        return _ncmesh.NCMesh_PrintMemoryDetail(self)
    PrintMemoryDetail = _swig_new_instance_method(_ncmesh.NCMesh_PrintMemoryDetail)
    MaxElemNodes = _ncmesh.NCMesh_MaxElemNodes
    
    MaxElemEdges = _ncmesh.NCMesh_MaxElemEdges
    
    MaxElemFaces = _ncmesh.NCMesh_MaxElemFaces
    
    MaxElemChildren = _ncmesh.NCMesh_MaxElemChildren
    
    MaxFaceNodes = _ncmesh.NCMesh_MaxFaceNodes
    

    def GetNodeVertex(self, node):
        r"""GetNodeVertex(NCMesh self, int node) -> int"""
        return _ncmesh.NCMesh_GetNodeVertex(self, node)
    GetNodeVertex = _swig_new_instance_method(_ncmesh.NCMesh_GetNodeVertex)

    def GetNumNodes(self):
        r"""GetNumNodes(NCMesh self) -> int"""
        return _ncmesh.NCMesh_GetNumNodes(self)
    GetNumNodes = _swig_new_instance_method(_ncmesh.NCMesh_GetNumNodes)

    def GetNumFaces(self):
        r"""GetNumFaces(NCMesh self) -> int"""
        return _ncmesh.NCMesh_GetNumFaces(self)
    GetNumFaces = _swig_new_instance_method(_ncmesh.NCMesh_GetNumFaces)

    def GetNumElements(self):
        r"""GetNumElements(NCMesh self) -> int"""
        return _ncmesh.NCMesh_GetNumElements(self)
    GetNumElements = _swig_new_instance_method(_ncmesh.NCMesh_GetNumElements)

    def ParentFaceNodes(self, nodes):
        r"""ParentFaceNodes(NCMesh self, std::array< int,4 > & nodes) -> int"""
        return _ncmesh.NCMesh_ParentFaceNodes(self, nodes)
    ParentFaceNodes = _swig_new_instance_method(_ncmesh.NCMesh_ParentFaceNodes)

    def FindFaceNodes(self, *args):
        r"""
        FindFaceNodes(NCMesh self, int face) -> std::array< int,4 >
        FindFaceNodes(NCMesh self, int face, int [4] node)
        """
        return _ncmesh.NCMesh_FindFaceNodes(self, *args)
    FindFaceNodes = _swig_new_instance_method(_ncmesh.NCMesh_FindFaceNodes)

# Register NCMesh in _ncmesh:
_ncmesh.NCMesh_swigregister(NCMesh)
class RefinementArray(object):
    r"""Proxy of C++ mfem::Array< mfem::Refinement > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ncmesh.delete_RefinementArray

    def GetData(self, *args):
        r"""
        GetData(RefinementArray self) -> Refinement
        GetData(RefinementArray self) -> Refinement
        """
        return _ncmesh.RefinementArray_GetData(self, *args)
    GetData = _swig_new_instance_method(_ncmesh.RefinementArray_GetData)

    def GetMemory(self, *args):
        r"""
        GetMemory(RefinementArray self) -> mfem::Memory< mfem::Refinement >
        GetMemory(RefinementArray self) -> mfem::Memory< mfem::Refinement > const &
        """
        return _ncmesh.RefinementArray_GetMemory(self, *args)
    GetMemory = _swig_new_instance_method(_ncmesh.RefinementArray_GetMemory)

    def UseDevice(self):
        r"""UseDevice(RefinementArray self) -> bool"""
        return _ncmesh.RefinementArray_UseDevice(self)
    UseDevice = _swig_new_instance_method(_ncmesh.RefinementArray_UseDevice)

    def OwnsData(self):
        r"""OwnsData(RefinementArray self) -> bool"""
        return _ncmesh.RefinementArray_OwnsData(self)
    OwnsData = _swig_new_instance_method(_ncmesh.RefinementArray_OwnsData)

    def StealData(self, p):
        r"""StealData(RefinementArray self, mfem::Refinement ** p)"""
        return _ncmesh.RefinementArray_StealData(self, p)
    StealData = _swig_new_instance_method(_ncmesh.RefinementArray_StealData)

    def LoseData(self):
        r"""LoseData(RefinementArray self)"""
        return _ncmesh.RefinementArray_LoseData(self)
    LoseData = _swig_new_instance_method(_ncmesh.RefinementArray_LoseData)

    def MakeDataOwner(self):
        r"""MakeDataOwner(RefinementArray self)"""
        return _ncmesh.RefinementArray_MakeDataOwner(self)
    MakeDataOwner = _swig_new_instance_method(_ncmesh.RefinementArray_MakeDataOwner)

    def Size(self):
        r"""Size(RefinementArray self) -> int"""
        return _ncmesh.RefinementArray_Size(self)
    Size = _swig_new_instance_method(_ncmesh.RefinementArray_Size)

    def SetSize(self, *args):
        r"""
        SetSize(RefinementArray self, int nsize)
        SetSize(RefinementArray self, int nsize, Refinement initval)
        SetSize(RefinementArray self, int nsize, mfem::MemoryType mt)
        """
        return _ncmesh.RefinementArray_SetSize(self, *args)
    SetSize = _swig_new_instance_method(_ncmesh.RefinementArray_SetSize)

    def Capacity(self):
        r"""Capacity(RefinementArray self) -> int"""
        return _ncmesh.RefinementArray_Capacity(self)
    Capacity = _swig_new_instance_method(_ncmesh.RefinementArray_Capacity)

    def Reserve(self, capacity):
        r"""Reserve(RefinementArray self, int capacity)"""
        return _ncmesh.RefinementArray_Reserve(self, capacity)
    Reserve = _swig_new_instance_method(_ncmesh.RefinementArray_Reserve)

    def Append(self, *args):
        r"""
        Append(RefinementArray self, Refinement el) -> int
        Append(RefinementArray self, Refinement els, int nels) -> int
        Append(RefinementArray self, RefinementArray els) -> int
        """

        if isinstance(args[0], list):
           return self.Append(self.__class__(args[0]))
        if isinstance(args[0], tuple):
           return self.Append(self.__class__(args[0]))


        return _ncmesh.RefinementArray_Append(self, *args)


    def Prepend(self, el):
        r"""Prepend(RefinementArray self, Refinement el) -> int"""
        return _ncmesh.RefinementArray_Prepend(self, el)
    Prepend = _swig_new_instance_method(_ncmesh.RefinementArray_Prepend)

    def Last(self, *args):
        r"""
        Last(RefinementArray self) -> Refinement
        Last(RefinementArray self) -> Refinement
        """
        return _ncmesh.RefinementArray_Last(self, *args)
    Last = _swig_new_instance_method(_ncmesh.RefinementArray_Last)

    def DeleteLast(self):
        r"""DeleteLast(RefinementArray self)"""
        return _ncmesh.RefinementArray_DeleteLast(self)
    DeleteLast = _swig_new_instance_method(_ncmesh.RefinementArray_DeleteLast)

    def DeleteAll(self):
        r"""DeleteAll(RefinementArray self)"""
        return _ncmesh.RefinementArray_DeleteAll(self)
    DeleteAll = _swig_new_instance_method(_ncmesh.RefinementArray_DeleteAll)

    def ShrinkToFit(self):
        r"""ShrinkToFit(RefinementArray self)"""
        return _ncmesh.RefinementArray_ShrinkToFit(self)
    ShrinkToFit = _swig_new_instance_method(_ncmesh.RefinementArray_ShrinkToFit)

    def Copy(self, copy):
        r"""Copy(RefinementArray self, RefinementArray copy)"""
        return _ncmesh.RefinementArray_Copy(self, copy)
    Copy = _swig_new_instance_method(_ncmesh.RefinementArray_Copy)

    def MakeRef(self, *args):
        r"""
        MakeRef(RefinementArray self, Refinement data_, int size_, bool own_data=False)
        MakeRef(RefinementArray self, Refinement data_, int size, mfem::MemoryType mt, bool own_data)
        MakeRef(RefinementArray self, RefinementArray master)
        """
        return _ncmesh.RefinementArray_MakeRef(self, *args)
    MakeRef = _swig_new_instance_method(_ncmesh.RefinementArray_MakeRef)

    def GetSubArray(self, offset, sa_size, sa):
        r"""GetSubArray(RefinementArray self, int offset, int sa_size, RefinementArray sa)"""
        return _ncmesh.RefinementArray_GetSubArray(self, offset, sa_size, sa)
    GetSubArray = _swig_new_instance_method(_ncmesh.RefinementArray_GetSubArray)

    def IsEmpty(self):
        r"""IsEmpty(RefinementArray self) -> bool"""
        return _ncmesh.RefinementArray_IsEmpty(self)
    IsEmpty = _swig_new_instance_method(_ncmesh.RefinementArray_IsEmpty)

    def begin(self, *args):
        r"""
        begin(RefinementArray self) -> Refinement
        begin(RefinementArray self) -> Refinement
        """
        return _ncmesh.RefinementArray_begin(self, *args)
    begin = _swig_new_instance_method(_ncmesh.RefinementArray_begin)

    def end(self, *args):
        r"""
        end(RefinementArray self) -> Refinement
        end(RefinementArray self) -> Refinement
        """
        return _ncmesh.RefinementArray_end(self, *args)
    end = _swig_new_instance_method(_ncmesh.RefinementArray_end)

    def MemoryUsage(self):
        r"""MemoryUsage(RefinementArray self) -> std::size_t"""
        return _ncmesh.RefinementArray_MemoryUsage(self)
    MemoryUsage = _swig_new_instance_method(_ncmesh.RefinementArray_MemoryUsage)

    def Read(self, on_dev=True):
        r"""Read(RefinementArray self, bool on_dev=True) -> Refinement"""
        return _ncmesh.RefinementArray_Read(self, on_dev)
    Read = _swig_new_instance_method(_ncmesh.RefinementArray_Read)

    def HostRead(self):
        r"""HostRead(RefinementArray self) -> Refinement"""
        return _ncmesh.RefinementArray_HostRead(self)
    HostRead = _swig_new_instance_method(_ncmesh.RefinementArray_HostRead)

    def Write(self, on_dev=True):
        r"""Write(RefinementArray self, bool on_dev=True) -> Refinement"""
        return _ncmesh.RefinementArray_Write(self, on_dev)
    Write = _swig_new_instance_method(_ncmesh.RefinementArray_Write)

    def HostWrite(self):
        r"""HostWrite(RefinementArray self) -> Refinement"""
        return _ncmesh.RefinementArray_HostWrite(self)
    HostWrite = _swig_new_instance_method(_ncmesh.RefinementArray_HostWrite)

    def ReadWrite(self, on_dev=True):
        r"""ReadWrite(RefinementArray self, bool on_dev=True) -> Refinement"""
        return _ncmesh.RefinementArray_ReadWrite(self, on_dev)
    ReadWrite = _swig_new_instance_method(_ncmesh.RefinementArray_ReadWrite)

    def HostReadWrite(self):
        r"""HostReadWrite(RefinementArray self) -> Refinement"""
        return _ncmesh.RefinementArray_HostReadWrite(self)
    HostReadWrite = _swig_new_instance_method(_ncmesh.RefinementArray_HostReadWrite)

    def __init__(self, *args):
        r"""
        __init__(RefinementArray self) -> RefinementArray
        __init__(RefinementArray self, mfem::MemoryType mt) -> RefinementArray
        __init__(RefinementArray self, int asize) -> RefinementArray
        __init__(RefinementArray self, int asize, mfem::MemoryType mt) -> RefinementArray
        __init__(RefinementArray self, Refinement data_, bool own_data=False) -> RefinementArray
        __init__(RefinementArray self, RefinementArray src) -> RefinementArray
        __init__(RefinementArray self, RefinementArray src) -> RefinementArray
        __init__(RefinementArray self, void * List_or_Tuple) -> RefinementArray
        """
        _ncmesh.RefinementArray_swiginit(self, _ncmesh.new_RefinementArray(*args))

    def __setitem__(self, i, v):
        r"""__setitem__(RefinementArray self, int i, Refinement v)"""

        i = int(i)
        if hasattr(v, "thisown"):
            v.thisown = False


        return _ncmesh.RefinementArray___setitem__(self, i, v)


    def Assign(self, *args):
        r"""
        Assign(RefinementArray self, Refinement arg2)
        Assign(RefinementArray self, Refinement a)
        """
        return _ncmesh.RefinementArray_Assign(self, *args)
    Assign = _swig_new_instance_method(_ncmesh.RefinementArray_Assign)

    def ToList(self):
        return [self[i] for i in range(self.Size())]



    def __iter__(self):
        class iter_array:
            def __init__(self, obj):
                self.obj = obj
                self.idx = 0
                self.size = obj.Size()
            def __iter__(self):
                self.idx = 0
            def __next__(self):
                if self.idx < self.size:
                    res = self.obj[self.idx]
                    self.idx += 1
                    return res
                else:
                    raise StopIteration
        return iter_array(self)



    def __getitem__(self, param):
        r"""__getitem__(RefinementArray self, PyObject * param) -> PyObject *"""
        return _ncmesh.RefinementArray___getitem__(self, param)
    __getitem__ = _swig_new_instance_method(_ncmesh.RefinementArray___getitem__)

# Register RefinementArray in _ncmesh:
_ncmesh.RefinementArray_swigregister(RefinementArray)

def Swap(*args):
    r"""
    Swap(intArray arg1, intArray arg2)
    Swap(doubleArray arg1, doubleArray arg2)
    Swap(int8Array arg1, int8Array arg2)
    Swap(int64Array arg1, int64Array arg2)
    Swap(boolArray arg1, boolArray arg2)
    Swap(uintArray arg1, uintArray arg2)
    Swap(intArrayArray arg1, intArrayArray arg2)
    Swap(intArray2D arg1, intArray2D arg2)
    Swap(doubleArray2D arg1, doubleArray2D arg2)
    Swap(DenseMatrixArray2D arg1, DenseMatrixArray2D arg2)
    Swap(SparseMatrixArray2D arg1, SparseMatrixArray2D arg2)
    Swap(VectorArray arg1, VectorArray arg2)
    Swap(OperatorArray arg1, OperatorArray arg2)
    Swap(SolverArray arg1, SolverArray arg2)
    Swap(IntegrationPointArray arg1, IntegrationPointArray arg2)
    Swap(IntegrationRuleArray arg1, IntegrationRuleArray arg2)
    Swap(GeometryTypeArray arg1, GeometryTypeArray arg2)
    Swap(CoefficientArray arg1, CoefficientArray arg2)
    Swap(VectorCoefficientArray arg1, VectorCoefficientArray arg2)
    Swap(MatrixCoefficientArray arg1, MatrixCoefficientArray arg2)
    Swap(FiniteElementSpaceArray arg1, FiniteElementSpaceArray arg2)
    Swap(CoarseFineTransformations a, CoarseFineTransformations b)
    Swap(RefinementArray arg1, RefinementArray arg2)
    """
    return _ncmesh.Swap(*args)
Swap = _ncmesh.Swap


