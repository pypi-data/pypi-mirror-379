# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _fe_h1
else:
    import _fe_h1

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _fe_h1.SWIG_PyInstanceMethod_New
_swig_new_static_method = _fe_h1.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._ser.fe_base
import mfem._ser.intrules
import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.globals
import mfem._ser.geom
import mfem._ser.densemat
import mfem._ser.vector
import mfem._ser.operators
import mfem._ser.matrix
import mfem._ser.doftrans
import mfem._ser.element
import mfem._ser.table
import mfem._ser.hash
class H1_SegmentElement(mfem._ser.fe_base.NodalTensorFiniteElement):
    r"""Proxy of C++ mfem::H1_SegmentElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(H1_SegmentElement self, int const p, int const btype=GaussLobatto) -> H1_SegmentElement"""
        _fe_h1.H1_SegmentElement_swiginit(self, _fe_h1.new_H1_SegmentElement(*args, **kwargs))

    def CalcShape(self, ip, shape):
        r"""CalcShape(H1_SegmentElement self, IntegrationPoint ip, Vector shape)"""
        return _fe_h1.H1_SegmentElement_CalcShape(self, ip, shape)
    CalcShape = _swig_new_instance_method(_fe_h1.H1_SegmentElement_CalcShape)

    def CalcDShape(self, ip, dshape):
        r"""CalcDShape(H1_SegmentElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe_h1.H1_SegmentElement_CalcDShape(self, ip, dshape)
    CalcDShape = _swig_new_instance_method(_fe_h1.H1_SegmentElement_CalcDShape)

    def CalcHessian(self, ip, Hessian):
        r"""CalcHessian(H1_SegmentElement self, IntegrationPoint ip, DenseMatrix Hessian)"""
        return _fe_h1.H1_SegmentElement_CalcHessian(self, ip, Hessian)
    CalcHessian = _swig_new_instance_method(_fe_h1.H1_SegmentElement_CalcHessian)

    def ProjectDelta(self, vertex, dofs):
        r"""ProjectDelta(H1_SegmentElement self, int vertex, Vector dofs)"""
        return _fe_h1.H1_SegmentElement_ProjectDelta(self, vertex, dofs)
    ProjectDelta = _swig_new_instance_method(_fe_h1.H1_SegmentElement_ProjectDelta)
    __swig_destroy__ = _fe_h1.delete_H1_SegmentElement

# Register H1_SegmentElement in _fe_h1:
_fe_h1.H1_SegmentElement_swigregister(H1_SegmentElement)
class H1_QuadrilateralElement(mfem._ser.fe_base.NodalTensorFiniteElement):
    r"""Proxy of C++ mfem::H1_QuadrilateralElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(H1_QuadrilateralElement self, int const p, int const btype=GaussLobatto) -> H1_QuadrilateralElement"""
        _fe_h1.H1_QuadrilateralElement_swiginit(self, _fe_h1.new_H1_QuadrilateralElement(*args, **kwargs))

    def CalcShape(self, ip, shape):
        r"""CalcShape(H1_QuadrilateralElement self, IntegrationPoint ip, Vector shape)"""
        return _fe_h1.H1_QuadrilateralElement_CalcShape(self, ip, shape)
    CalcShape = _swig_new_instance_method(_fe_h1.H1_QuadrilateralElement_CalcShape)

    def CalcDShape(self, ip, dshape):
        r"""CalcDShape(H1_QuadrilateralElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe_h1.H1_QuadrilateralElement_CalcDShape(self, ip, dshape)
    CalcDShape = _swig_new_instance_method(_fe_h1.H1_QuadrilateralElement_CalcDShape)

    def CalcHessian(self, ip, Hessian):
        r"""CalcHessian(H1_QuadrilateralElement self, IntegrationPoint ip, DenseMatrix Hessian)"""
        return _fe_h1.H1_QuadrilateralElement_CalcHessian(self, ip, Hessian)
    CalcHessian = _swig_new_instance_method(_fe_h1.H1_QuadrilateralElement_CalcHessian)

    def ProjectDelta(self, vertex, dofs):
        r"""ProjectDelta(H1_QuadrilateralElement self, int vertex, Vector dofs)"""
        return _fe_h1.H1_QuadrilateralElement_ProjectDelta(self, vertex, dofs)
    ProjectDelta = _swig_new_instance_method(_fe_h1.H1_QuadrilateralElement_ProjectDelta)
    __swig_destroy__ = _fe_h1.delete_H1_QuadrilateralElement

# Register H1_QuadrilateralElement in _fe_h1:
_fe_h1.H1_QuadrilateralElement_swigregister(H1_QuadrilateralElement)
class H1_HexahedronElement(mfem._ser.fe_base.NodalTensorFiniteElement):
    r"""Proxy of C++ mfem::H1_HexahedronElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(H1_HexahedronElement self, int const p, int const btype=GaussLobatto) -> H1_HexahedronElement"""
        _fe_h1.H1_HexahedronElement_swiginit(self, _fe_h1.new_H1_HexahedronElement(*args, **kwargs))

    def CalcShape(self, ip, shape):
        r"""CalcShape(H1_HexahedronElement self, IntegrationPoint ip, Vector shape)"""
        return _fe_h1.H1_HexahedronElement_CalcShape(self, ip, shape)
    CalcShape = _swig_new_instance_method(_fe_h1.H1_HexahedronElement_CalcShape)

    def CalcDShape(self, ip, dshape):
        r"""CalcDShape(H1_HexahedronElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe_h1.H1_HexahedronElement_CalcDShape(self, ip, dshape)
    CalcDShape = _swig_new_instance_method(_fe_h1.H1_HexahedronElement_CalcDShape)

    def CalcHessian(self, ip, Hessian):
        r"""CalcHessian(H1_HexahedronElement self, IntegrationPoint ip, DenseMatrix Hessian)"""
        return _fe_h1.H1_HexahedronElement_CalcHessian(self, ip, Hessian)
    CalcHessian = _swig_new_instance_method(_fe_h1.H1_HexahedronElement_CalcHessian)

    def ProjectDelta(self, vertex, dofs):
        r"""ProjectDelta(H1_HexahedronElement self, int vertex, Vector dofs)"""
        return _fe_h1.H1_HexahedronElement_ProjectDelta(self, vertex, dofs)
    ProjectDelta = _swig_new_instance_method(_fe_h1.H1_HexahedronElement_ProjectDelta)
    __swig_destroy__ = _fe_h1.delete_H1_HexahedronElement

# Register H1_HexahedronElement in _fe_h1:
_fe_h1.H1_HexahedronElement_swigregister(H1_HexahedronElement)
class H1_TriangleElement(mfem._ser.fe_base.NodalFiniteElement):
    r"""Proxy of C++ mfem::H1_TriangleElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(H1_TriangleElement self, int const p, int const btype=GaussLobatto) -> H1_TriangleElement"""
        _fe_h1.H1_TriangleElement_swiginit(self, _fe_h1.new_H1_TriangleElement(*args, **kwargs))

    def CalcShape(self, ip, shape):
        r"""CalcShape(H1_TriangleElement self, IntegrationPoint ip, Vector shape)"""
        return _fe_h1.H1_TriangleElement_CalcShape(self, ip, shape)
    CalcShape = _swig_new_instance_method(_fe_h1.H1_TriangleElement_CalcShape)

    def CalcDShape(self, ip, dshape):
        r"""CalcDShape(H1_TriangleElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe_h1.H1_TriangleElement_CalcDShape(self, ip, dshape)
    CalcDShape = _swig_new_instance_method(_fe_h1.H1_TriangleElement_CalcDShape)

    def CalcHessian(self, ip, ddshape):
        r"""CalcHessian(H1_TriangleElement self, IntegrationPoint ip, DenseMatrix ddshape)"""
        return _fe_h1.H1_TriangleElement_CalcHessian(self, ip, ddshape)
    CalcHessian = _swig_new_instance_method(_fe_h1.H1_TriangleElement_CalcHessian)
    __swig_destroy__ = _fe_h1.delete_H1_TriangleElement

# Register H1_TriangleElement in _fe_h1:
_fe_h1.H1_TriangleElement_swigregister(H1_TriangleElement)
class H1_TetrahedronElement(mfem._ser.fe_base.NodalFiniteElement):
    r"""Proxy of C++ mfem::H1_TetrahedronElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(H1_TetrahedronElement self, int const p, int const btype=GaussLobatto) -> H1_TetrahedronElement"""
        _fe_h1.H1_TetrahedronElement_swiginit(self, _fe_h1.new_H1_TetrahedronElement(*args, **kwargs))

    def CalcShape(self, ip, shape):
        r"""CalcShape(H1_TetrahedronElement self, IntegrationPoint ip, Vector shape)"""
        return _fe_h1.H1_TetrahedronElement_CalcShape(self, ip, shape)
    CalcShape = _swig_new_instance_method(_fe_h1.H1_TetrahedronElement_CalcShape)

    def CalcDShape(self, ip, dshape):
        r"""CalcDShape(H1_TetrahedronElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe_h1.H1_TetrahedronElement_CalcDShape(self, ip, dshape)
    CalcDShape = _swig_new_instance_method(_fe_h1.H1_TetrahedronElement_CalcDShape)

    def CalcHessian(self, ip, ddshape):
        r"""CalcHessian(H1_TetrahedronElement self, IntegrationPoint ip, DenseMatrix ddshape)"""
        return _fe_h1.H1_TetrahedronElement_CalcHessian(self, ip, ddshape)
    CalcHessian = _swig_new_instance_method(_fe_h1.H1_TetrahedronElement_CalcHessian)
    __swig_destroy__ = _fe_h1.delete_H1_TetrahedronElement

# Register H1_TetrahedronElement in _fe_h1:
_fe_h1.H1_TetrahedronElement_swigregister(H1_TetrahedronElement)
class H1_WedgeElement(mfem._ser.fe_base.NodalFiniteElement):
    r"""Proxy of C++ mfem::H1_WedgeElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(H1_WedgeElement self, int const p, int const btype=GaussLobatto) -> H1_WedgeElement"""
        _fe_h1.H1_WedgeElement_swiginit(self, _fe_h1.new_H1_WedgeElement(*args, **kwargs))

    def CalcShape(self, ip, shape):
        r"""CalcShape(H1_WedgeElement self, IntegrationPoint ip, Vector shape)"""
        return _fe_h1.H1_WedgeElement_CalcShape(self, ip, shape)
    CalcShape = _swig_new_instance_method(_fe_h1.H1_WedgeElement_CalcShape)

    def CalcDShape(self, ip, dshape):
        r"""CalcDShape(H1_WedgeElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe_h1.H1_WedgeElement_CalcDShape(self, ip, dshape)
    CalcDShape = _swig_new_instance_method(_fe_h1.H1_WedgeElement_CalcDShape)
    __swig_destroy__ = _fe_h1.delete_H1_WedgeElement

# Register H1_WedgeElement in _fe_h1:
_fe_h1.H1_WedgeElement_swigregister(H1_WedgeElement)
class H1_FuentesPyramidElement(mfem._ser.fe_base.NodalFiniteElement):
    r"""Proxy of C++ mfem::H1_FuentesPyramidElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(H1_FuentesPyramidElement self, int const p, int const btype=GaussLobatto) -> H1_FuentesPyramidElement"""
        _fe_h1.H1_FuentesPyramidElement_swiginit(self, _fe_h1.new_H1_FuentesPyramidElement(*args, **kwargs))

    def CalcShape(self, ip, shape):
        r"""CalcShape(H1_FuentesPyramidElement self, IntegrationPoint ip, Vector shape)"""
        return _fe_h1.H1_FuentesPyramidElement_CalcShape(self, ip, shape)
    CalcShape = _swig_new_instance_method(_fe_h1.H1_FuentesPyramidElement_CalcShape)

    def CalcDShape(self, ip, dshape):
        r"""CalcDShape(H1_FuentesPyramidElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe_h1.H1_FuentesPyramidElement_CalcDShape(self, ip, dshape)
    CalcDShape = _swig_new_instance_method(_fe_h1.H1_FuentesPyramidElement_CalcDShape)

    def CalcRawShape(self, ip, shape):
        r"""CalcRawShape(H1_FuentesPyramidElement self, IntegrationPoint ip, Vector shape)"""
        return _fe_h1.H1_FuentesPyramidElement_CalcRawShape(self, ip, shape)
    CalcRawShape = _swig_new_instance_method(_fe_h1.H1_FuentesPyramidElement_CalcRawShape)

    def CalcRawDShape(self, ip, dshape):
        r"""CalcRawDShape(H1_FuentesPyramidElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe_h1.H1_FuentesPyramidElement_CalcRawDShape(self, ip, dshape)
    CalcRawDShape = _swig_new_instance_method(_fe_h1.H1_FuentesPyramidElement_CalcRawDShape)

    def GetZetaMax(self):
        r"""GetZetaMax(H1_FuentesPyramidElement self) -> mfem::real_t"""
        return _fe_h1.H1_FuentesPyramidElement_GetZetaMax(self)
    GetZetaMax = _swig_new_instance_method(_fe_h1.H1_FuentesPyramidElement_GetZetaMax)
    __swig_destroy__ = _fe_h1.delete_H1_FuentesPyramidElement

# Register H1_FuentesPyramidElement in _fe_h1:
_fe_h1.H1_FuentesPyramidElement_swigregister(H1_FuentesPyramidElement)
class H1_BergotPyramidElement(mfem._ser.fe_base.NodalFiniteElement):
    r"""Proxy of C++ mfem::H1_BergotPyramidElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(H1_BergotPyramidElement self, int const p, int const btype=GaussLobatto) -> H1_BergotPyramidElement"""
        _fe_h1.H1_BergotPyramidElement_swiginit(self, _fe_h1.new_H1_BergotPyramidElement(*args, **kwargs))

    def CalcShape(self, ip, shape):
        r"""CalcShape(H1_BergotPyramidElement self, IntegrationPoint ip, Vector shape)"""
        return _fe_h1.H1_BergotPyramidElement_CalcShape(self, ip, shape)
    CalcShape = _swig_new_instance_method(_fe_h1.H1_BergotPyramidElement_CalcShape)

    def CalcDShape(self, ip, dshape):
        r"""CalcDShape(H1_BergotPyramidElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe_h1.H1_BergotPyramidElement_CalcDShape(self, ip, dshape)
    CalcDShape = _swig_new_instance_method(_fe_h1.H1_BergotPyramidElement_CalcDShape)
    __swig_destroy__ = _fe_h1.delete_H1_BergotPyramidElement

# Register H1_BergotPyramidElement in _fe_h1:
_fe_h1.H1_BergotPyramidElement_swigregister(H1_BergotPyramidElement)

