# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _staticcond
else:
    import _staticcond

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _staticcond.SWIG_PyInstanceMethod_New
_swig_new_static_method = _staticcond.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._ser.fespace
import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.globals
import mfem._ser.vector
import mfem._ser.coefficient
import mfem._ser.matrix
import mfem._ser.operators
import mfem._ser.symmat
import mfem._ser.intrules
import mfem._ser.sparsemat
import mfem._ser.densemat
import mfem._ser.eltrans
import mfem._ser.fe
import mfem._ser.geom
import mfem._ser.fe_base
import mfem._ser.doftrans
import mfem._ser.fe_fixed_order
import mfem._ser.element
import mfem._ser.table
import mfem._ser.hash
import mfem._ser.fe_h1
import mfem._ser.fe_nd
import mfem._ser.fe_rt
import mfem._ser.fe_l2
import mfem._ser.fe_nurbs
import mfem._ser.fe_pos
import mfem._ser.fe_ser
import mfem._ser.mesh
import mfem._ser.attribute_sets
import mfem._ser.arrays_by_name
import mfem._ser.sort_pairs
import mfem._ser.ncmesh
import mfem._ser.gridfunc
import mfem._ser.bilininteg
import mfem._ser.fe_coll
import mfem._ser.lininteg
import mfem._ser.linearform
import mfem._ser.nonlininteg
import mfem._ser.integrator
import mfem._ser.bounds
import mfem._ser.vertex
import mfem._ser.vtk
import mfem._ser.std_vectors
import mfem._ser.handle
import mfem._ser.restriction
class StaticCondensation(object):
    r"""Proxy of C++ mfem::StaticCondensation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fespace):
        r"""__init__(StaticCondensation self, FiniteElementSpace fespace) -> StaticCondensation"""
        _staticcond.StaticCondensation_swiginit(self, _staticcond.new_StaticCondensation(fespace))
    __swig_destroy__ = _staticcond.delete_StaticCondensation

    def GetNPrDofs(self):
        r"""GetNPrDofs(StaticCondensation self) -> int"""
        return _staticcond.StaticCondensation_GetNPrDofs(self)
    GetNPrDofs = _swig_new_instance_method(_staticcond.StaticCondensation_GetNPrDofs)

    def GetNExDofs(self):
        r"""GetNExDofs(StaticCondensation self) -> int"""
        return _staticcond.StaticCondensation_GetNExDofs(self)
    GetNExDofs = _swig_new_instance_method(_staticcond.StaticCondensation_GetNExDofs)

    def ReducesTrueVSize(self):
        r"""ReducesTrueVSize(StaticCondensation self) -> bool"""
        return _staticcond.StaticCondensation_ReducesTrueVSize(self)
    ReducesTrueVSize = _swig_new_instance_method(_staticcond.StaticCondensation_ReducesTrueVSize)

    def Init(self, symmetric, block_diagonal):
        r"""Init(StaticCondensation self, bool symmetric, bool block_diagonal)"""
        return _staticcond.StaticCondensation_Init(self, symmetric, block_diagonal)
    Init = _swig_new_instance_method(_staticcond.StaticCondensation_Init)

    def GetTraceFESpace(self):
        r"""GetTraceFESpace(StaticCondensation self) -> FiniteElementSpace"""
        return _staticcond.StaticCondensation_GetTraceFESpace(self)
    GetTraceFESpace = _swig_new_instance_method(_staticcond.StaticCondensation_GetTraceFESpace)

    def AssembleMatrix(self, el, elmat):
        r"""AssembleMatrix(StaticCondensation self, int el, DenseMatrix elmat)"""
        return _staticcond.StaticCondensation_AssembleMatrix(self, el, elmat)
    AssembleMatrix = _swig_new_instance_method(_staticcond.StaticCondensation_AssembleMatrix)

    def AssembleBdrMatrix(self, el, elmat):
        r"""AssembleBdrMatrix(StaticCondensation self, int el, DenseMatrix elmat)"""
        return _staticcond.StaticCondensation_AssembleBdrMatrix(self, el, elmat)
    AssembleBdrMatrix = _swig_new_instance_method(_staticcond.StaticCondensation_AssembleBdrMatrix)

    def Finalize(self):
        r"""Finalize(StaticCondensation self)"""
        return _staticcond.StaticCondensation_Finalize(self)
    Finalize = _swig_new_instance_method(_staticcond.StaticCondensation_Finalize)

    def SetEssentialTrueDofs(self, ess_tdof_list):
        r"""SetEssentialTrueDofs(StaticCondensation self, intArray ess_tdof_list)"""
        return _staticcond.StaticCondensation_SetEssentialTrueDofs(self, ess_tdof_list)
    SetEssentialTrueDofs = _swig_new_instance_method(_staticcond.StaticCondensation_SetEssentialTrueDofs)

    def EliminateReducedTrueDofs(self, *args):
        r"""
        EliminateReducedTrueDofs(StaticCondensation self, intArray ess_rtdof_list, mfem::Matrix::DiagonalPolicy dpolicy)
        EliminateReducedTrueDofs(StaticCondensation self, mfem::Matrix::DiagonalPolicy dpolicy)
        """
        return _staticcond.StaticCondensation_EliminateReducedTrueDofs(self, *args)
    EliminateReducedTrueDofs = _swig_new_instance_method(_staticcond.StaticCondensation_EliminateReducedTrueDofs)

    def HasEliminatedBC(self):
        r"""HasEliminatedBC(StaticCondensation self) -> bool"""
        return _staticcond.StaticCondensation_HasEliminatedBC(self)
    HasEliminatedBC = _swig_new_instance_method(_staticcond.StaticCondensation_HasEliminatedBC)

    def GetMatrix(self):
        r"""GetMatrix(StaticCondensation self) -> SparseMatrix"""
        return _staticcond.StaticCondensation_GetMatrix(self)
    GetMatrix = _swig_new_instance_method(_staticcond.StaticCondensation_GetMatrix)

    def GetMatrixElim(self):
        r"""GetMatrixElim(StaticCondensation self) -> SparseMatrix"""
        return _staticcond.StaticCondensation_GetMatrixElim(self)
    GetMatrixElim = _swig_new_instance_method(_staticcond.StaticCondensation_GetMatrixElim)

    def ReduceRHS(self, b, sc_b):
        r"""ReduceRHS(StaticCondensation self, Vector b, Vector sc_b)"""
        return _staticcond.StaticCondensation_ReduceRHS(self, b, sc_b)
    ReduceRHS = _swig_new_instance_method(_staticcond.StaticCondensation_ReduceRHS)

    def ReduceSolution(self, sol, sc_sol):
        r"""ReduceSolution(StaticCondensation self, Vector sol, Vector sc_sol)"""
        return _staticcond.StaticCondensation_ReduceSolution(self, sol, sc_sol)
    ReduceSolution = _swig_new_instance_method(_staticcond.StaticCondensation_ReduceSolution)

    def ReduceSystem(self, x, b, X, B, copy_interior=0):
        r"""ReduceSystem(StaticCondensation self, Vector x, Vector b, Vector X, Vector B, int copy_interior=0)"""
        return _staticcond.StaticCondensation_ReduceSystem(self, x, b, X, B, copy_interior)
    ReduceSystem = _swig_new_instance_method(_staticcond.StaticCondensation_ReduceSystem)

    def ConvertMarkerToReducedTrueDofs(self, ess_tdof_marker, ess_rtdof_marker):
        r"""ConvertMarkerToReducedTrueDofs(StaticCondensation self, intArray ess_tdof_marker, intArray ess_rtdof_marker)"""
        return _staticcond.StaticCondensation_ConvertMarkerToReducedTrueDofs(self, ess_tdof_marker, ess_rtdof_marker)
    ConvertMarkerToReducedTrueDofs = _swig_new_instance_method(_staticcond.StaticCondensation_ConvertMarkerToReducedTrueDofs)

    def ConvertListToReducedTrueDofs(self, ess_tdof_list_, ess_rtdof_list_):
        r"""ConvertListToReducedTrueDofs(StaticCondensation self, intArray ess_tdof_list_, intArray ess_rtdof_list_)"""
        return _staticcond.StaticCondensation_ConvertListToReducedTrueDofs(self, ess_tdof_list_, ess_rtdof_list_)
    ConvertListToReducedTrueDofs = _swig_new_instance_method(_staticcond.StaticCondensation_ConvertListToReducedTrueDofs)

    def ComputeSolution(self, b, sc_sol, sol):
        r"""ComputeSolution(StaticCondensation self, Vector b, Vector sc_sol, Vector sol)"""
        return _staticcond.StaticCondensation_ComputeSolution(self, b, sc_sol, sol)
    ComputeSolution = _swig_new_instance_method(_staticcond.StaticCondensation_ComputeSolution)

# Register StaticCondensation in _staticcond:
_staticcond.StaticCondensation_swigregister(StaticCondensation)

