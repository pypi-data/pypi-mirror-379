# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _complexweakform
else:
    import _complexweakform

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _complexweakform.SWIG_PyInstanceMethod_New
_swig_new_static_method = _complexweakform.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._ser.element
import mfem._ser.globals
import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.densemat
import mfem._ser.vector
import mfem._ser.operators
import mfem._ser.matrix
import mfem._ser.geom
import mfem._ser.intrules
import mfem._ser.table
import mfem._ser.hash
import mfem._ser.coefficient
import mfem._ser.symmat
import mfem._ser.sparsemat
import mfem._ser.eltrans
import mfem._ser.fe
import mfem._ser.fe_base
import mfem._ser.doftrans
import mfem._ser.fe_fixed_order
import mfem._ser.fe_h1
import mfem._ser.fe_nd
import mfem._ser.fe_rt
import mfem._ser.fe_l2
import mfem._ser.fe_nurbs
import mfem._ser.fe_pos
import mfem._ser.fe_ser
import mfem._ser.gridfunc
import mfem._ser.mesh
import mfem._ser.attribute_sets
import mfem._ser.arrays_by_name
import mfem._ser.sort_pairs
import mfem._ser.ncmesh
import mfem._ser.vertex
import mfem._ser.vtk
import mfem._ser.std_vectors
import mfem._ser.fespace
import mfem._ser.fe_coll
import mfem._ser.lininteg
import mfem._ser.handle
import mfem._ser.restriction
import mfem._ser.bilininteg
import mfem._ser.linearform
import mfem._ser.nonlininteg
import mfem._ser.integrator
import mfem._ser.bounds
import mfem._ser.solvers
import mfem._ser.blockmatrix
class ComplexDPGWeakForm(object):
    r"""Proxy of C++ mfem::ComplexDPGWeakForm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ComplexDPGWeakForm self) -> ComplexDPGWeakForm
        __init__(ComplexDPGWeakForm self, FiniteElementSpaceArray fes_, mfem::Array< mfem::FiniteElementCollection * > & fecol_) -> ComplexDPGWeakForm
        """
        _complexweakform.ComplexDPGWeakForm_swiginit(self, _complexweakform.new_ComplexDPGWeakForm(*args))

    def SetTestFECollVdim(self, test_fec, vdim):
        r"""SetTestFECollVdim(ComplexDPGWeakForm self, int test_fec, int vdim)"""
        return _complexweakform.ComplexDPGWeakForm_SetTestFECollVdim(self, test_fec, vdim)
    SetTestFECollVdim = _swig_new_instance_method(_complexweakform.ComplexDPGWeakForm_SetTestFECollVdim)

    def SetSpaces(self, fes_, fecol_):
        r"""SetSpaces(ComplexDPGWeakForm self, FiniteElementSpaceArray fes_, mfem::Array< mfem::FiniteElementCollection * > & fecol_)"""
        return _complexweakform.ComplexDPGWeakForm_SetSpaces(self, fes_, fecol_)
    SetSpaces = _swig_new_instance_method(_complexweakform.ComplexDPGWeakForm_SetSpaces)

    def Size(self):
        r"""Size(ComplexDPGWeakForm self) -> int"""
        return _complexweakform.ComplexDPGWeakForm_Size(self)
    Size = _swig_new_instance_method(_complexweakform.ComplexDPGWeakForm_Size)

    def AllocateMatrix(self):
        r"""AllocateMatrix(ComplexDPGWeakForm self)"""
        return _complexweakform.ComplexDPGWeakForm_AllocateMatrix(self)
    AllocateMatrix = _swig_new_instance_method(_complexweakform.ComplexDPGWeakForm_AllocateMatrix)

    def Finalize(self, skip_zeros=1):
        r"""Finalize(ComplexDPGWeakForm self, int skip_zeros=1)"""
        return _complexweakform.ComplexDPGWeakForm_Finalize(self, skip_zeros)
    Finalize = _swig_new_instance_method(_complexweakform.ComplexDPGWeakForm_Finalize)

    def BlockMat_r(self):
        r"""BlockMat_r(ComplexDPGWeakForm self) -> BlockMatrix"""
        return _complexweakform.ComplexDPGWeakForm_BlockMat_r(self)
    BlockMat_r = _swig_new_instance_method(_complexweakform.ComplexDPGWeakForm_BlockMat_r)

    def BlockMat_i(self):
        r"""BlockMat_i(ComplexDPGWeakForm self) -> BlockMatrix"""
        return _complexweakform.ComplexDPGWeakForm_BlockMat_i(self)
    BlockMat_i = _swig_new_instance_method(_complexweakform.ComplexDPGWeakForm_BlockMat_i)

    def BlockMatElim_r(self):
        r"""BlockMatElim_r(ComplexDPGWeakForm self) -> BlockMatrix"""
        return _complexweakform.ComplexDPGWeakForm_BlockMatElim_r(self)
    BlockMatElim_r = _swig_new_instance_method(_complexweakform.ComplexDPGWeakForm_BlockMatElim_r)

    def BlockMatElim_i(self):
        r"""BlockMatElim_i(ComplexDPGWeakForm self) -> BlockMatrix"""
        return _complexweakform.ComplexDPGWeakForm_BlockMatElim_i(self)
    BlockMatElim_i = _swig_new_instance_method(_complexweakform.ComplexDPGWeakForm_BlockMatElim_i)

    def AddTrialIntegrator(self, bfi_r, bfi_i, n, m):
        r"""AddTrialIntegrator(ComplexDPGWeakForm self, BilinearFormIntegrator bfi_r, BilinearFormIntegrator bfi_i, int n, int m)"""
        return _complexweakform.ComplexDPGWeakForm_AddTrialIntegrator(self, bfi_r, bfi_i, n, m)
    AddTrialIntegrator = _swig_new_instance_method(_complexweakform.ComplexDPGWeakForm_AddTrialIntegrator)

    def AddTestIntegrator(self, bfi_r, bfi_i, n, m):
        r"""AddTestIntegrator(ComplexDPGWeakForm self, BilinearFormIntegrator bfi_r, BilinearFormIntegrator bfi_i, int n, int m)"""
        return _complexweakform.ComplexDPGWeakForm_AddTestIntegrator(self, bfi_r, bfi_i, n, m)
    AddTestIntegrator = _swig_new_instance_method(_complexweakform.ComplexDPGWeakForm_AddTestIntegrator)

    def AddDomainLFIntegrator(self, lfi_r, lfi_i, n):
        r"""AddDomainLFIntegrator(ComplexDPGWeakForm self, LinearFormIntegrator lfi_r, LinearFormIntegrator lfi_i, int n)"""
        return _complexweakform.ComplexDPGWeakForm_AddDomainLFIntegrator(self, lfi_r, lfi_i, n)
    AddDomainLFIntegrator = _swig_new_instance_method(_complexweakform.ComplexDPGWeakForm_AddDomainLFIntegrator)

    def Assemble(self, skip_zeros=1):
        r"""Assemble(ComplexDPGWeakForm self, int skip_zeros=1)"""
        return _complexweakform.ComplexDPGWeakForm_Assemble(self, skip_zeros)
    Assemble = _swig_new_instance_method(_complexweakform.ComplexDPGWeakForm_Assemble)

    def FormLinearSystem(self, ess_tdof_list, x, A, X, B, copy_interior=0):
        r"""FormLinearSystem(ComplexDPGWeakForm self, intArray ess_tdof_list, Vector x, OperatorHandle A, Vector X, Vector B, int copy_interior=0)"""
        return _complexweakform.ComplexDPGWeakForm_FormLinearSystem(self, ess_tdof_list, x, A, X, B, copy_interior)
    FormLinearSystem = _swig_new_instance_method(_complexweakform.ComplexDPGWeakForm_FormLinearSystem)

    def FormSystemMatrix(self, ess_tdof_list, A):
        r"""FormSystemMatrix(ComplexDPGWeakForm self, intArray ess_tdof_list, OperatorHandle A)"""
        return _complexweakform.ComplexDPGWeakForm_FormSystemMatrix(self, ess_tdof_list, A)
    FormSystemMatrix = _swig_new_instance_method(_complexweakform.ComplexDPGWeakForm_FormSystemMatrix)

    def EliminateVDofs(self, *args, **kwargs):
        r"""EliminateVDofs(ComplexDPGWeakForm self, intArray vdofs, mfem::Operator::DiagonalPolicy dpolicy=DIAG_ONE)"""
        return _complexweakform.ComplexDPGWeakForm_EliminateVDofs(self, *args, **kwargs)
    EliminateVDofs = _swig_new_instance_method(_complexweakform.ComplexDPGWeakForm_EliminateVDofs)

    def EliminateVDofsInRHS(self, vdofs, x_r, x_i, b_r, b_i):
        r"""EliminateVDofsInRHS(ComplexDPGWeakForm self, intArray vdofs, Vector x_r, Vector x_i, Vector b_r, Vector b_i)"""
        return _complexweakform.ComplexDPGWeakForm_EliminateVDofsInRHS(self, vdofs, x_r, x_i, b_r, b_i)
    EliminateVDofsInRHS = _swig_new_instance_method(_complexweakform.ComplexDPGWeakForm_EliminateVDofsInRHS)

    def RecoverFEMSolution(self, X, x):
        r"""RecoverFEMSolution(ComplexDPGWeakForm self, Vector X, Vector x)"""
        return _complexweakform.ComplexDPGWeakForm_RecoverFEMSolution(self, X, x)
    RecoverFEMSolution = _swig_new_instance_method(_complexweakform.ComplexDPGWeakForm_RecoverFEMSolution)

    def SetDiagonalPolicy(self, policy):
        r"""SetDiagonalPolicy(ComplexDPGWeakForm self, mfem::Operator::DiagonalPolicy policy)"""
        return _complexweakform.ComplexDPGWeakForm_SetDiagonalPolicy(self, policy)
    SetDiagonalPolicy = _swig_new_instance_method(_complexweakform.ComplexDPGWeakForm_SetDiagonalPolicy)

    def Update(self):
        r"""Update(ComplexDPGWeakForm self)"""
        return _complexweakform.ComplexDPGWeakForm_Update(self)
    Update = _swig_new_instance_method(_complexweakform.ComplexDPGWeakForm_Update)

    def StoreMatrices(self, store_matrices_=True):
        r"""StoreMatrices(ComplexDPGWeakForm self, bool store_matrices_=True)"""
        return _complexweakform.ComplexDPGWeakForm_StoreMatrices(self, store_matrices_)
    StoreMatrices = _swig_new_instance_method(_complexweakform.ComplexDPGWeakForm_StoreMatrices)

    def EnableStaticCondensation(self):
        r"""EnableStaticCondensation(ComplexDPGWeakForm self)"""
        return _complexweakform.ComplexDPGWeakForm_EnableStaticCondensation(self)
    EnableStaticCondensation = _swig_new_instance_method(_complexweakform.ComplexDPGWeakForm_EnableStaticCondensation)

    def ComputeResidual(self, x):
        r"""ComputeResidual(ComplexDPGWeakForm self, Vector x) -> Vector"""
        return _complexweakform.ComplexDPGWeakForm_ComputeResidual(self, x)
    ComputeResidual = _swig_new_instance_method(_complexweakform.ComplexDPGWeakForm_ComputeResidual)
    __swig_destroy__ = _complexweakform.delete_ComplexDPGWeakForm

# Register ComplexDPGWeakForm in _complexweakform:
_complexweakform.ComplexDPGWeakForm_swigregister(ComplexDPGWeakForm)

