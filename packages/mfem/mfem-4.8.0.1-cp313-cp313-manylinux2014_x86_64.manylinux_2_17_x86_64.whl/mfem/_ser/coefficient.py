# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _coefficient
else:
    import _coefficient

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _coefficient.SWIG_PyInstanceMethod_New
_swig_new_static_method = _coefficient.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._ser.globals
import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.matrix
import mfem._ser.vector
import mfem._ser.operators
import mfem._ser.symmat
import mfem._ser.intrules
import mfem._ser.sparsemat
import mfem._ser.densemat
import mfem._ser.eltrans
import mfem._ser.fe
import mfem._ser.geom
import mfem._ser.fe_base
import mfem._ser.doftrans
import mfem._ser.fe_fixed_order
import mfem._ser.element
import mfem._ser.table
import mfem._ser.hash
import mfem._ser.fe_h1
import mfem._ser.fe_nd
import mfem._ser.fe_rt
import mfem._ser.fe_l2
import mfem._ser.fe_nurbs
import mfem._ser.fe_pos
import mfem._ser.fe_ser
class CoefficientArray(object):
    r"""Proxy of C++ mfem::Array< mfem::Coefficient * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _coefficient.delete_CoefficientArray

    def GetData(self, *args):
        r"""
        GetData(CoefficientArray self) -> Coefficient
        GetData(CoefficientArray self) -> mfem::Coefficient *const *
        """
        return _coefficient.CoefficientArray_GetData(self, *args)
    GetData = _swig_new_instance_method(_coefficient.CoefficientArray_GetData)

    def GetMemory(self, *args):
        r"""
        GetMemory(CoefficientArray self) -> mfem::Memory< mfem::Coefficient * >
        GetMemory(CoefficientArray self) -> mfem::Memory< mfem::Coefficient * > const &
        """
        return _coefficient.CoefficientArray_GetMemory(self, *args)
    GetMemory = _swig_new_instance_method(_coefficient.CoefficientArray_GetMemory)

    def UseDevice(self):
        r"""UseDevice(CoefficientArray self) -> bool"""
        return _coefficient.CoefficientArray_UseDevice(self)
    UseDevice = _swig_new_instance_method(_coefficient.CoefficientArray_UseDevice)

    def OwnsData(self):
        r"""OwnsData(CoefficientArray self) -> bool"""
        return _coefficient.CoefficientArray_OwnsData(self)
    OwnsData = _swig_new_instance_method(_coefficient.CoefficientArray_OwnsData)

    def StealData(self, p):
        r"""StealData(CoefficientArray self, mfem::Coefficient *** p)"""
        return _coefficient.CoefficientArray_StealData(self, p)
    StealData = _swig_new_instance_method(_coefficient.CoefficientArray_StealData)

    def LoseData(self):
        r"""LoseData(CoefficientArray self)"""
        return _coefficient.CoefficientArray_LoseData(self)
    LoseData = _swig_new_instance_method(_coefficient.CoefficientArray_LoseData)

    def MakeDataOwner(self):
        r"""MakeDataOwner(CoefficientArray self)"""
        return _coefficient.CoefficientArray_MakeDataOwner(self)
    MakeDataOwner = _swig_new_instance_method(_coefficient.CoefficientArray_MakeDataOwner)

    def Size(self):
        r"""Size(CoefficientArray self) -> int"""
        return _coefficient.CoefficientArray_Size(self)
    Size = _swig_new_instance_method(_coefficient.CoefficientArray_Size)

    def SetSize(self, *args):
        r"""
        SetSize(CoefficientArray self, int nsize)
        SetSize(CoefficientArray self, int nsize, Coefficient initval)
        SetSize(CoefficientArray self, int nsize, mfem::MemoryType mt)
        """
        return _coefficient.CoefficientArray_SetSize(self, *args)
    SetSize = _swig_new_instance_method(_coefficient.CoefficientArray_SetSize)

    def Capacity(self):
        r"""Capacity(CoefficientArray self) -> int"""
        return _coefficient.CoefficientArray_Capacity(self)
    Capacity = _swig_new_instance_method(_coefficient.CoefficientArray_Capacity)

    def Reserve(self, capacity):
        r"""Reserve(CoefficientArray self, int capacity)"""
        return _coefficient.CoefficientArray_Reserve(self, capacity)
    Reserve = _swig_new_instance_method(_coefficient.CoefficientArray_Reserve)

    def Append(self, *args):
        r"""
        Append(CoefficientArray self, Coefficient el) -> int
        Append(CoefficientArray self, mfem::Coefficient *const * els, int nels) -> int
        Append(CoefficientArray self, CoefficientArray els) -> int
        """

        if isinstance(args[0], list):
           return self.Append(self.__class__(args[0]))
        if isinstance(args[0], tuple):
           return self.Append(self.__class__(args[0]))


        return _coefficient.CoefficientArray_Append(self, *args)


    def Prepend(self, el):
        r"""Prepend(CoefficientArray self, Coefficient el) -> int"""
        return _coefficient.CoefficientArray_Prepend(self, el)
    Prepend = _swig_new_instance_method(_coefficient.CoefficientArray_Prepend)

    def Last(self, *args):
        r"""
        Last(CoefficientArray self) -> Coefficient
        Last(CoefficientArray self) -> Coefficient
        """
        return _coefficient.CoefficientArray_Last(self, *args)
    Last = _swig_new_instance_method(_coefficient.CoefficientArray_Last)

    def DeleteLast(self):
        r"""DeleteLast(CoefficientArray self)"""
        return _coefficient.CoefficientArray_DeleteLast(self)
    DeleteLast = _swig_new_instance_method(_coefficient.CoefficientArray_DeleteLast)

    def DeleteAll(self):
        r"""DeleteAll(CoefficientArray self)"""
        return _coefficient.CoefficientArray_DeleteAll(self)
    DeleteAll = _swig_new_instance_method(_coefficient.CoefficientArray_DeleteAll)

    def ShrinkToFit(self):
        r"""ShrinkToFit(CoefficientArray self)"""
        return _coefficient.CoefficientArray_ShrinkToFit(self)
    ShrinkToFit = _swig_new_instance_method(_coefficient.CoefficientArray_ShrinkToFit)

    def Copy(self, copy):
        r"""Copy(CoefficientArray self, CoefficientArray copy)"""
        return _coefficient.CoefficientArray_Copy(self, copy)
    Copy = _swig_new_instance_method(_coefficient.CoefficientArray_Copy)

    def MakeRef(self, *args):
        r"""
        MakeRef(CoefficientArray self, mfem::Coefficient ** data_, int size_, bool own_data=False)
        MakeRef(CoefficientArray self, mfem::Coefficient ** data_, int size, mfem::MemoryType mt, bool own_data)
        MakeRef(CoefficientArray self, CoefficientArray master)
        """
        return _coefficient.CoefficientArray_MakeRef(self, *args)
    MakeRef = _swig_new_instance_method(_coefficient.CoefficientArray_MakeRef)

    def GetSubArray(self, offset, sa_size, sa):
        r"""GetSubArray(CoefficientArray self, int offset, int sa_size, CoefficientArray sa)"""
        return _coefficient.CoefficientArray_GetSubArray(self, offset, sa_size, sa)
    GetSubArray = _swig_new_instance_method(_coefficient.CoefficientArray_GetSubArray)

    def IsEmpty(self):
        r"""IsEmpty(CoefficientArray self) -> bool"""
        return _coefficient.CoefficientArray_IsEmpty(self)
    IsEmpty = _swig_new_instance_method(_coefficient.CoefficientArray_IsEmpty)

    def begin(self, *args):
        r"""
        begin(CoefficientArray self) -> Coefficient
        begin(CoefficientArray self) -> mfem::Coefficient *const *
        """
        return _coefficient.CoefficientArray_begin(self, *args)
    begin = _swig_new_instance_method(_coefficient.CoefficientArray_begin)

    def end(self, *args):
        r"""
        end(CoefficientArray self) -> Coefficient
        end(CoefficientArray self) -> mfem::Coefficient *const *
        """
        return _coefficient.CoefficientArray_end(self, *args)
    end = _swig_new_instance_method(_coefficient.CoefficientArray_end)

    def MemoryUsage(self):
        r"""MemoryUsage(CoefficientArray self) -> std::size_t"""
        return _coefficient.CoefficientArray_MemoryUsage(self)
    MemoryUsage = _swig_new_instance_method(_coefficient.CoefficientArray_MemoryUsage)

    def Read(self, on_dev=True):
        r"""Read(CoefficientArray self, bool on_dev=True) -> mfem::Coefficient *const *"""
        return _coefficient.CoefficientArray_Read(self, on_dev)
    Read = _swig_new_instance_method(_coefficient.CoefficientArray_Read)

    def HostRead(self):
        r"""HostRead(CoefficientArray self) -> mfem::Coefficient *const *"""
        return _coefficient.CoefficientArray_HostRead(self)
    HostRead = _swig_new_instance_method(_coefficient.CoefficientArray_HostRead)

    def Write(self, on_dev=True):
        r"""Write(CoefficientArray self, bool on_dev=True) -> mfem::Coefficient **"""
        return _coefficient.CoefficientArray_Write(self, on_dev)
    Write = _swig_new_instance_method(_coefficient.CoefficientArray_Write)

    def HostWrite(self):
        r"""HostWrite(CoefficientArray self) -> mfem::Coefficient **"""
        return _coefficient.CoefficientArray_HostWrite(self)
    HostWrite = _swig_new_instance_method(_coefficient.CoefficientArray_HostWrite)

    def ReadWrite(self, on_dev=True):
        r"""ReadWrite(CoefficientArray self, bool on_dev=True) -> mfem::Coefficient **"""
        return _coefficient.CoefficientArray_ReadWrite(self, on_dev)
    ReadWrite = _swig_new_instance_method(_coefficient.CoefficientArray_ReadWrite)

    def HostReadWrite(self):
        r"""HostReadWrite(CoefficientArray self) -> mfem::Coefficient **"""
        return _coefficient.CoefficientArray_HostReadWrite(self)
    HostReadWrite = _swig_new_instance_method(_coefficient.CoefficientArray_HostReadWrite)

    def __init__(self, *args):
        r"""
        __init__(CoefficientArray self) -> CoefficientArray
        __init__(CoefficientArray self, mfem::MemoryType mt) -> CoefficientArray
        __init__(CoefficientArray self, int asize) -> CoefficientArray
        __init__(CoefficientArray self, int asize, mfem::MemoryType mt) -> CoefficientArray
        __init__(CoefficientArray self, mfem::Coefficient ** data_, int asize, bool own_data=False) -> CoefficientArray
        __init__(CoefficientArray self, CoefficientArray src) -> CoefficientArray
        __init__(CoefficientArray self, CoefficientArray src) -> CoefficientArray
        __init__(CoefficientArray self, void * List_or_Tuple) -> CoefficientArray
        """
        _coefficient.CoefficientArray_swiginit(self, _coefficient.new_CoefficientArray(*args))

    def __setitem__(self, i, v):
        r"""__setitem__(CoefficientArray self, int i, Coefficient v)"""

        i = int(i)
        if hasattr(v, "thisown"):
            v.thisown = False


        return _coefficient.CoefficientArray___setitem__(self, i, v)


    def Assign(self, *args):
        r"""
        Assign(CoefficientArray self, mfem::Coefficient *const * arg2)
        Assign(CoefficientArray self, Coefficient a)
        """
        return _coefficient.CoefficientArray_Assign(self, *args)
    Assign = _swig_new_instance_method(_coefficient.CoefficientArray_Assign)

    def ToList(self):
        return [self[i] for i in range(self.Size())]



    def __iter__(self):
        class iter_array:
            def __init__(self, obj):
                self.obj = obj
                self.idx = 0
                self.size = obj.Size()
            def __iter__(self):
                self.idx = 0
            def __next__(self):
                if self.idx < self.size:
                    res = self.obj[self.idx]
                    self.idx += 1
                    return res
                else:
                    raise StopIteration
        return iter_array(self)



    def __getitem__(self, param):
        r"""__getitem__(CoefficientArray self, PyObject * param) -> PyObject *"""
        return _coefficient.CoefficientArray___getitem__(self, param)
    __getitem__ = _swig_new_instance_method(_coefficient.CoefficientArray___getitem__)

# Register CoefficientArray in _coefficient:
_coefficient.CoefficientArray_swigregister(CoefficientArray)
class VectorCoefficientArray(object):
    r"""Proxy of C++ mfem::Array< mfem::VectorCoefficient * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _coefficient.delete_VectorCoefficientArray

    def GetData(self, *args):
        r"""
        GetData(VectorCoefficientArray self) -> VectorCoefficient
        GetData(VectorCoefficientArray self) -> mfem::VectorCoefficient *const *
        """
        return _coefficient.VectorCoefficientArray_GetData(self, *args)
    GetData = _swig_new_instance_method(_coefficient.VectorCoefficientArray_GetData)

    def GetMemory(self, *args):
        r"""
        GetMemory(VectorCoefficientArray self) -> mfem::Memory< mfem::VectorCoefficient * >
        GetMemory(VectorCoefficientArray self) -> mfem::Memory< mfem::VectorCoefficient * > const &
        """
        return _coefficient.VectorCoefficientArray_GetMemory(self, *args)
    GetMemory = _swig_new_instance_method(_coefficient.VectorCoefficientArray_GetMemory)

    def UseDevice(self):
        r"""UseDevice(VectorCoefficientArray self) -> bool"""
        return _coefficient.VectorCoefficientArray_UseDevice(self)
    UseDevice = _swig_new_instance_method(_coefficient.VectorCoefficientArray_UseDevice)

    def OwnsData(self):
        r"""OwnsData(VectorCoefficientArray self) -> bool"""
        return _coefficient.VectorCoefficientArray_OwnsData(self)
    OwnsData = _swig_new_instance_method(_coefficient.VectorCoefficientArray_OwnsData)

    def StealData(self, p):
        r"""StealData(VectorCoefficientArray self, mfem::VectorCoefficient *** p)"""
        return _coefficient.VectorCoefficientArray_StealData(self, p)
    StealData = _swig_new_instance_method(_coefficient.VectorCoefficientArray_StealData)

    def LoseData(self):
        r"""LoseData(VectorCoefficientArray self)"""
        return _coefficient.VectorCoefficientArray_LoseData(self)
    LoseData = _swig_new_instance_method(_coefficient.VectorCoefficientArray_LoseData)

    def MakeDataOwner(self):
        r"""MakeDataOwner(VectorCoefficientArray self)"""
        return _coefficient.VectorCoefficientArray_MakeDataOwner(self)
    MakeDataOwner = _swig_new_instance_method(_coefficient.VectorCoefficientArray_MakeDataOwner)

    def Size(self):
        r"""Size(VectorCoefficientArray self) -> int"""
        return _coefficient.VectorCoefficientArray_Size(self)
    Size = _swig_new_instance_method(_coefficient.VectorCoefficientArray_Size)

    def SetSize(self, *args):
        r"""
        SetSize(VectorCoefficientArray self, int nsize)
        SetSize(VectorCoefficientArray self, int nsize, VectorCoefficient initval)
        SetSize(VectorCoefficientArray self, int nsize, mfem::MemoryType mt)
        """
        return _coefficient.VectorCoefficientArray_SetSize(self, *args)
    SetSize = _swig_new_instance_method(_coefficient.VectorCoefficientArray_SetSize)

    def Capacity(self):
        r"""Capacity(VectorCoefficientArray self) -> int"""
        return _coefficient.VectorCoefficientArray_Capacity(self)
    Capacity = _swig_new_instance_method(_coefficient.VectorCoefficientArray_Capacity)

    def Reserve(self, capacity):
        r"""Reserve(VectorCoefficientArray self, int capacity)"""
        return _coefficient.VectorCoefficientArray_Reserve(self, capacity)
    Reserve = _swig_new_instance_method(_coefficient.VectorCoefficientArray_Reserve)

    def Append(self, *args):
        r"""
        Append(VectorCoefficientArray self, VectorCoefficient el) -> int
        Append(VectorCoefficientArray self, mfem::VectorCoefficient *const * els, int nels) -> int
        Append(VectorCoefficientArray self, VectorCoefficientArray els) -> int
        """

        if isinstance(args[0], list):
           return self.Append(self.__class__(args[0]))
        if isinstance(args[0], tuple):
           return self.Append(self.__class__(args[0]))


        return _coefficient.VectorCoefficientArray_Append(self, *args)


    def Prepend(self, el):
        r"""Prepend(VectorCoefficientArray self, VectorCoefficient el) -> int"""
        return _coefficient.VectorCoefficientArray_Prepend(self, el)
    Prepend = _swig_new_instance_method(_coefficient.VectorCoefficientArray_Prepend)

    def Last(self, *args):
        r"""
        Last(VectorCoefficientArray self) -> VectorCoefficient
        Last(VectorCoefficientArray self) -> VectorCoefficient
        """
        return _coefficient.VectorCoefficientArray_Last(self, *args)
    Last = _swig_new_instance_method(_coefficient.VectorCoefficientArray_Last)

    def DeleteLast(self):
        r"""DeleteLast(VectorCoefficientArray self)"""
        return _coefficient.VectorCoefficientArray_DeleteLast(self)
    DeleteLast = _swig_new_instance_method(_coefficient.VectorCoefficientArray_DeleteLast)

    def DeleteAll(self):
        r"""DeleteAll(VectorCoefficientArray self)"""
        return _coefficient.VectorCoefficientArray_DeleteAll(self)
    DeleteAll = _swig_new_instance_method(_coefficient.VectorCoefficientArray_DeleteAll)

    def ShrinkToFit(self):
        r"""ShrinkToFit(VectorCoefficientArray self)"""
        return _coefficient.VectorCoefficientArray_ShrinkToFit(self)
    ShrinkToFit = _swig_new_instance_method(_coefficient.VectorCoefficientArray_ShrinkToFit)

    def Copy(self, copy):
        r"""Copy(VectorCoefficientArray self, VectorCoefficientArray copy)"""
        return _coefficient.VectorCoefficientArray_Copy(self, copy)
    Copy = _swig_new_instance_method(_coefficient.VectorCoefficientArray_Copy)

    def MakeRef(self, *args):
        r"""
        MakeRef(VectorCoefficientArray self, mfem::VectorCoefficient ** data_, int size_, bool own_data=False)
        MakeRef(VectorCoefficientArray self, mfem::VectorCoefficient ** data_, int size, mfem::MemoryType mt, bool own_data)
        MakeRef(VectorCoefficientArray self, VectorCoefficientArray master)
        """
        return _coefficient.VectorCoefficientArray_MakeRef(self, *args)
    MakeRef = _swig_new_instance_method(_coefficient.VectorCoefficientArray_MakeRef)

    def GetSubArray(self, offset, sa_size, sa):
        r"""GetSubArray(VectorCoefficientArray self, int offset, int sa_size, VectorCoefficientArray sa)"""
        return _coefficient.VectorCoefficientArray_GetSubArray(self, offset, sa_size, sa)
    GetSubArray = _swig_new_instance_method(_coefficient.VectorCoefficientArray_GetSubArray)

    def IsEmpty(self):
        r"""IsEmpty(VectorCoefficientArray self) -> bool"""
        return _coefficient.VectorCoefficientArray_IsEmpty(self)
    IsEmpty = _swig_new_instance_method(_coefficient.VectorCoefficientArray_IsEmpty)

    def begin(self, *args):
        r"""
        begin(VectorCoefficientArray self) -> VectorCoefficient
        begin(VectorCoefficientArray self) -> mfem::VectorCoefficient *const *
        """
        return _coefficient.VectorCoefficientArray_begin(self, *args)
    begin = _swig_new_instance_method(_coefficient.VectorCoefficientArray_begin)

    def end(self, *args):
        r"""
        end(VectorCoefficientArray self) -> VectorCoefficient
        end(VectorCoefficientArray self) -> mfem::VectorCoefficient *const *
        """
        return _coefficient.VectorCoefficientArray_end(self, *args)
    end = _swig_new_instance_method(_coefficient.VectorCoefficientArray_end)

    def MemoryUsage(self):
        r"""MemoryUsage(VectorCoefficientArray self) -> std::size_t"""
        return _coefficient.VectorCoefficientArray_MemoryUsage(self)
    MemoryUsage = _swig_new_instance_method(_coefficient.VectorCoefficientArray_MemoryUsage)

    def Read(self, on_dev=True):
        r"""Read(VectorCoefficientArray self, bool on_dev=True) -> mfem::VectorCoefficient *const *"""
        return _coefficient.VectorCoefficientArray_Read(self, on_dev)
    Read = _swig_new_instance_method(_coefficient.VectorCoefficientArray_Read)

    def HostRead(self):
        r"""HostRead(VectorCoefficientArray self) -> mfem::VectorCoefficient *const *"""
        return _coefficient.VectorCoefficientArray_HostRead(self)
    HostRead = _swig_new_instance_method(_coefficient.VectorCoefficientArray_HostRead)

    def Write(self, on_dev=True):
        r"""Write(VectorCoefficientArray self, bool on_dev=True) -> mfem::VectorCoefficient **"""
        return _coefficient.VectorCoefficientArray_Write(self, on_dev)
    Write = _swig_new_instance_method(_coefficient.VectorCoefficientArray_Write)

    def HostWrite(self):
        r"""HostWrite(VectorCoefficientArray self) -> mfem::VectorCoefficient **"""
        return _coefficient.VectorCoefficientArray_HostWrite(self)
    HostWrite = _swig_new_instance_method(_coefficient.VectorCoefficientArray_HostWrite)

    def ReadWrite(self, on_dev=True):
        r"""ReadWrite(VectorCoefficientArray self, bool on_dev=True) -> mfem::VectorCoefficient **"""
        return _coefficient.VectorCoefficientArray_ReadWrite(self, on_dev)
    ReadWrite = _swig_new_instance_method(_coefficient.VectorCoefficientArray_ReadWrite)

    def HostReadWrite(self):
        r"""HostReadWrite(VectorCoefficientArray self) -> mfem::VectorCoefficient **"""
        return _coefficient.VectorCoefficientArray_HostReadWrite(self)
    HostReadWrite = _swig_new_instance_method(_coefficient.VectorCoefficientArray_HostReadWrite)

    def __init__(self, *args):
        r"""
        __init__(VectorCoefficientArray self) -> VectorCoefficientArray
        __init__(VectorCoefficientArray self, mfem::MemoryType mt) -> VectorCoefficientArray
        __init__(VectorCoefficientArray self, int asize) -> VectorCoefficientArray
        __init__(VectorCoefficientArray self, int asize, mfem::MemoryType mt) -> VectorCoefficientArray
        __init__(VectorCoefficientArray self, mfem::VectorCoefficient ** data_, int asize, bool own_data=False) -> VectorCoefficientArray
        __init__(VectorCoefficientArray self, VectorCoefficientArray src) -> VectorCoefficientArray
        __init__(VectorCoefficientArray self, VectorCoefficientArray src) -> VectorCoefficientArray
        __init__(VectorCoefficientArray self, void * List_or_Tuple) -> VectorCoefficientArray
        """
        _coefficient.VectorCoefficientArray_swiginit(self, _coefficient.new_VectorCoefficientArray(*args))

    def __setitem__(self, i, v):
        r"""__setitem__(VectorCoefficientArray self, int i, VectorCoefficient v)"""

        i = int(i)
        if hasattr(v, "thisown"):
            v.thisown = False


        return _coefficient.VectorCoefficientArray___setitem__(self, i, v)


    def Assign(self, *args):
        r"""
        Assign(VectorCoefficientArray self, mfem::VectorCoefficient *const * arg2)
        Assign(VectorCoefficientArray self, VectorCoefficient a)
        """
        return _coefficient.VectorCoefficientArray_Assign(self, *args)
    Assign = _swig_new_instance_method(_coefficient.VectorCoefficientArray_Assign)

    def ToList(self):
        return [self[i] for i in range(self.Size())]



    def __iter__(self):
        class iter_array:
            def __init__(self, obj):
                self.obj = obj
                self.idx = 0
                self.size = obj.Size()
            def __iter__(self):
                self.idx = 0
            def __next__(self):
                if self.idx < self.size:
                    res = self.obj[self.idx]
                    self.idx += 1
                    return res
                else:
                    raise StopIteration
        return iter_array(self)



    def __getitem__(self, param):
        r"""__getitem__(VectorCoefficientArray self, PyObject * param) -> PyObject *"""
        return _coefficient.VectorCoefficientArray___getitem__(self, param)
    __getitem__ = _swig_new_instance_method(_coefficient.VectorCoefficientArray___getitem__)

# Register VectorCoefficientArray in _coefficient:
_coefficient.VectorCoefficientArray_swigregister(VectorCoefficientArray)
class MatrixCoefficientArray(object):
    r"""Proxy of C++ mfem::Array< mfem::MatrixCoefficient * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _coefficient.delete_MatrixCoefficientArray

    def GetData(self, *args):
        r"""
        GetData(MatrixCoefficientArray self) -> MatrixCoefficient
        GetData(MatrixCoefficientArray self) -> mfem::MatrixCoefficient *const *
        """
        return _coefficient.MatrixCoefficientArray_GetData(self, *args)
    GetData = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_GetData)

    def GetMemory(self, *args):
        r"""
        GetMemory(MatrixCoefficientArray self) -> mfem::Memory< mfem::MatrixCoefficient * >
        GetMemory(MatrixCoefficientArray self) -> mfem::Memory< mfem::MatrixCoefficient * > const &
        """
        return _coefficient.MatrixCoefficientArray_GetMemory(self, *args)
    GetMemory = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_GetMemory)

    def UseDevice(self):
        r"""UseDevice(MatrixCoefficientArray self) -> bool"""
        return _coefficient.MatrixCoefficientArray_UseDevice(self)
    UseDevice = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_UseDevice)

    def OwnsData(self):
        r"""OwnsData(MatrixCoefficientArray self) -> bool"""
        return _coefficient.MatrixCoefficientArray_OwnsData(self)
    OwnsData = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_OwnsData)

    def StealData(self, p):
        r"""StealData(MatrixCoefficientArray self, mfem::MatrixCoefficient *** p)"""
        return _coefficient.MatrixCoefficientArray_StealData(self, p)
    StealData = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_StealData)

    def LoseData(self):
        r"""LoseData(MatrixCoefficientArray self)"""
        return _coefficient.MatrixCoefficientArray_LoseData(self)
    LoseData = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_LoseData)

    def MakeDataOwner(self):
        r"""MakeDataOwner(MatrixCoefficientArray self)"""
        return _coefficient.MatrixCoefficientArray_MakeDataOwner(self)
    MakeDataOwner = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_MakeDataOwner)

    def Size(self):
        r"""Size(MatrixCoefficientArray self) -> int"""
        return _coefficient.MatrixCoefficientArray_Size(self)
    Size = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_Size)

    def SetSize(self, *args):
        r"""
        SetSize(MatrixCoefficientArray self, int nsize)
        SetSize(MatrixCoefficientArray self, int nsize, MatrixCoefficient initval)
        SetSize(MatrixCoefficientArray self, int nsize, mfem::MemoryType mt)
        """
        return _coefficient.MatrixCoefficientArray_SetSize(self, *args)
    SetSize = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_SetSize)

    def Capacity(self):
        r"""Capacity(MatrixCoefficientArray self) -> int"""
        return _coefficient.MatrixCoefficientArray_Capacity(self)
    Capacity = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_Capacity)

    def Reserve(self, capacity):
        r"""Reserve(MatrixCoefficientArray self, int capacity)"""
        return _coefficient.MatrixCoefficientArray_Reserve(self, capacity)
    Reserve = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_Reserve)

    def Append(self, *args):
        r"""
        Append(MatrixCoefficientArray self, MatrixCoefficient el) -> int
        Append(MatrixCoefficientArray self, mfem::MatrixCoefficient *const * els, int nels) -> int
        Append(MatrixCoefficientArray self, MatrixCoefficientArray els) -> int
        """

        if isinstance(args[0], list):
           return self.Append(self.__class__(args[0]))
        if isinstance(args[0], tuple):
           return self.Append(self.__class__(args[0]))


        return _coefficient.MatrixCoefficientArray_Append(self, *args)


    def Prepend(self, el):
        r"""Prepend(MatrixCoefficientArray self, MatrixCoefficient el) -> int"""
        return _coefficient.MatrixCoefficientArray_Prepend(self, el)
    Prepend = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_Prepend)

    def Last(self, *args):
        r"""
        Last(MatrixCoefficientArray self) -> MatrixCoefficient
        Last(MatrixCoefficientArray self) -> MatrixCoefficient
        """
        return _coefficient.MatrixCoefficientArray_Last(self, *args)
    Last = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_Last)

    def DeleteLast(self):
        r"""DeleteLast(MatrixCoefficientArray self)"""
        return _coefficient.MatrixCoefficientArray_DeleteLast(self)
    DeleteLast = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_DeleteLast)

    def DeleteAll(self):
        r"""DeleteAll(MatrixCoefficientArray self)"""
        return _coefficient.MatrixCoefficientArray_DeleteAll(self)
    DeleteAll = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_DeleteAll)

    def ShrinkToFit(self):
        r"""ShrinkToFit(MatrixCoefficientArray self)"""
        return _coefficient.MatrixCoefficientArray_ShrinkToFit(self)
    ShrinkToFit = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_ShrinkToFit)

    def Copy(self, copy):
        r"""Copy(MatrixCoefficientArray self, MatrixCoefficientArray copy)"""
        return _coefficient.MatrixCoefficientArray_Copy(self, copy)
    Copy = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_Copy)

    def MakeRef(self, *args):
        r"""
        MakeRef(MatrixCoefficientArray self, mfem::MatrixCoefficient ** data_, int size_, bool own_data=False)
        MakeRef(MatrixCoefficientArray self, mfem::MatrixCoefficient ** data_, int size, mfem::MemoryType mt, bool own_data)
        MakeRef(MatrixCoefficientArray self, MatrixCoefficientArray master)
        """
        return _coefficient.MatrixCoefficientArray_MakeRef(self, *args)
    MakeRef = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_MakeRef)

    def GetSubArray(self, offset, sa_size, sa):
        r"""GetSubArray(MatrixCoefficientArray self, int offset, int sa_size, MatrixCoefficientArray sa)"""
        return _coefficient.MatrixCoefficientArray_GetSubArray(self, offset, sa_size, sa)
    GetSubArray = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_GetSubArray)

    def IsEmpty(self):
        r"""IsEmpty(MatrixCoefficientArray self) -> bool"""
        return _coefficient.MatrixCoefficientArray_IsEmpty(self)
    IsEmpty = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_IsEmpty)

    def begin(self, *args):
        r"""
        begin(MatrixCoefficientArray self) -> MatrixCoefficient
        begin(MatrixCoefficientArray self) -> mfem::MatrixCoefficient *const *
        """
        return _coefficient.MatrixCoefficientArray_begin(self, *args)
    begin = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_begin)

    def end(self, *args):
        r"""
        end(MatrixCoefficientArray self) -> MatrixCoefficient
        end(MatrixCoefficientArray self) -> mfem::MatrixCoefficient *const *
        """
        return _coefficient.MatrixCoefficientArray_end(self, *args)
    end = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_end)

    def MemoryUsage(self):
        r"""MemoryUsage(MatrixCoefficientArray self) -> std::size_t"""
        return _coefficient.MatrixCoefficientArray_MemoryUsage(self)
    MemoryUsage = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_MemoryUsage)

    def Read(self, on_dev=True):
        r"""Read(MatrixCoefficientArray self, bool on_dev=True) -> mfem::MatrixCoefficient *const *"""
        return _coefficient.MatrixCoefficientArray_Read(self, on_dev)
    Read = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_Read)

    def HostRead(self):
        r"""HostRead(MatrixCoefficientArray self) -> mfem::MatrixCoefficient *const *"""
        return _coefficient.MatrixCoefficientArray_HostRead(self)
    HostRead = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_HostRead)

    def Write(self, on_dev=True):
        r"""Write(MatrixCoefficientArray self, bool on_dev=True) -> mfem::MatrixCoefficient **"""
        return _coefficient.MatrixCoefficientArray_Write(self, on_dev)
    Write = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_Write)

    def HostWrite(self):
        r"""HostWrite(MatrixCoefficientArray self) -> mfem::MatrixCoefficient **"""
        return _coefficient.MatrixCoefficientArray_HostWrite(self)
    HostWrite = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_HostWrite)

    def ReadWrite(self, on_dev=True):
        r"""ReadWrite(MatrixCoefficientArray self, bool on_dev=True) -> mfem::MatrixCoefficient **"""
        return _coefficient.MatrixCoefficientArray_ReadWrite(self, on_dev)
    ReadWrite = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_ReadWrite)

    def HostReadWrite(self):
        r"""HostReadWrite(MatrixCoefficientArray self) -> mfem::MatrixCoefficient **"""
        return _coefficient.MatrixCoefficientArray_HostReadWrite(self)
    HostReadWrite = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_HostReadWrite)

    def __init__(self, *args):
        r"""
        __init__(MatrixCoefficientArray self) -> MatrixCoefficientArray
        __init__(MatrixCoefficientArray self, mfem::MemoryType mt) -> MatrixCoefficientArray
        __init__(MatrixCoefficientArray self, int asize) -> MatrixCoefficientArray
        __init__(MatrixCoefficientArray self, int asize, mfem::MemoryType mt) -> MatrixCoefficientArray
        __init__(MatrixCoefficientArray self, mfem::MatrixCoefficient ** data_, int asize, bool own_data=False) -> MatrixCoefficientArray
        __init__(MatrixCoefficientArray self, MatrixCoefficientArray src) -> MatrixCoefficientArray
        __init__(MatrixCoefficientArray self, MatrixCoefficientArray src) -> MatrixCoefficientArray
        __init__(MatrixCoefficientArray self, void * List_or_Tuple) -> MatrixCoefficientArray
        """
        _coefficient.MatrixCoefficientArray_swiginit(self, _coefficient.new_MatrixCoefficientArray(*args))

    def __setitem__(self, i, v):
        r"""__setitem__(MatrixCoefficientArray self, int i, MatrixCoefficient v)"""

        i = int(i)
        if hasattr(v, "thisown"):
            v.thisown = False


        return _coefficient.MatrixCoefficientArray___setitem__(self, i, v)


    def Assign(self, *args):
        r"""
        Assign(MatrixCoefficientArray self, mfem::MatrixCoefficient *const * arg2)
        Assign(MatrixCoefficientArray self, MatrixCoefficient a)
        """
        return _coefficient.MatrixCoefficientArray_Assign(self, *args)
    Assign = _swig_new_instance_method(_coefficient.MatrixCoefficientArray_Assign)

    def ToList(self):
        return [self[i] for i in range(self.Size())]



    def __iter__(self):
        class iter_array:
            def __init__(self, obj):
                self.obj = obj
                self.idx = 0
                self.size = obj.Size()
            def __iter__(self):
                self.idx = 0
            def __next__(self):
                if self.idx < self.size:
                    res = self.obj[self.idx]
                    self.idx += 1
                    return res
                else:
                    raise StopIteration
        return iter_array(self)



    def __getitem__(self, param):
        r"""__getitem__(MatrixCoefficientArray self, PyObject * param) -> PyObject *"""
        return _coefficient.MatrixCoefficientArray___getitem__(self, param)
    __getitem__ = _swig_new_instance_method(_coefficient.MatrixCoefficientArray___getitem__)

# Register MatrixCoefficientArray in _coefficient:
_coefficient.MatrixCoefficientArray_swigregister(MatrixCoefficientArray)

def Swap(*args):
    r"""
    Swap(intArray arg1, intArray arg2)
    Swap(doubleArray arg1, doubleArray arg2)
    Swap(int8Array arg1, int8Array arg2)
    Swap(int64Array arg1, int64Array arg2)
    Swap(boolArray arg1, boolArray arg2)
    Swap(uintArray arg1, uintArray arg2)
    Swap(intArrayArray arg1, intArrayArray arg2)
    Swap(intArray2D arg1, intArray2D arg2)
    Swap(doubleArray2D arg1, doubleArray2D arg2)
    Swap(DenseMatrixArray2D arg1, DenseMatrixArray2D arg2)
    Swap(SparseMatrixArray2D arg1, SparseMatrixArray2D arg2)
    Swap(VectorArray arg1, VectorArray arg2)
    Swap(OperatorArray arg1, OperatorArray arg2)
    Swap(SolverArray arg1, SolverArray arg2)
    Swap(IntegrationPointArray arg1, IntegrationPointArray arg2)
    Swap(IntegrationRuleArray arg1, IntegrationRuleArray arg2)
    Swap(GeometryTypeArray arg1, GeometryTypeArray arg2)
    Swap(CoefficientArray arg1, CoefficientArray arg2)
    Swap(VectorCoefficientArray arg1, VectorCoefficientArray arg2)
    Swap(MatrixCoefficientArray arg1, MatrixCoefficientArray arg2)
    """
    return _coefficient.Swap(*args)
Swap = _coefficient.Swap

class Coefficient(object):
    r"""Proxy of C++ mfem::Coefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetTime(self, t):
        r"""SetTime(Coefficient self, mfem::real_t t)"""
        return _coefficient.Coefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.Coefficient_SetTime)

    def GetTime(self):
        r"""GetTime(Coefficient self) -> mfem::real_t"""
        return _coefficient.Coefficient_GetTime(self)
    GetTime = _swig_new_instance_method(_coefficient.Coefficient_GetTime)

    def Eval(self, *args):
        r"""
        Eval(Coefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t
        Eval(Coefficient self, ElementTransformation T, IntegrationPoint ip, mfem::real_t t) -> mfem::real_t
        """
        return _coefficient.Coefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_coefficient.Coefficient_Eval)

    def Project(self, qf):
        r"""Project(Coefficient self, mfem::QuadratureFunction & qf)"""
        return _coefficient.Coefficient_Project(self, qf)
    Project = _swig_new_instance_method(_coefficient.Coefficient_Project)
    __swig_destroy__ = _coefficient.delete_Coefficient

# Register Coefficient in _coefficient:
_coefficient.Coefficient_swigregister(Coefficient)
class ConstantCoefficient(Coefficient):
    r"""Proxy of C++ mfem::ConstantCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    constant = property(_coefficient.ConstantCoefficient_constant_get, _coefficient.ConstantCoefficient_constant_set, doc=r"""constant : mfem::real_t""")

    def __init__(self, c=1.0):
        r"""__init__(ConstantCoefficient self, mfem::real_t c=1.0) -> ConstantCoefficient"""
        _coefficient.ConstantCoefficient_swiginit(self, _coefficient.new_ConstantCoefficient(c))

    def Eval(self, T, ip):
        r"""Eval(ConstantCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.ConstantCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.ConstantCoefficient_Eval)

    def Project(self, qf):
        r"""Project(ConstantCoefficient self, mfem::QuadratureFunction & qf)"""
        return _coefficient.ConstantCoefficient_Project(self, qf)
    Project = _swig_new_instance_method(_coefficient.ConstantCoefficient_Project)
    __swig_destroy__ = _coefficient.delete_ConstantCoefficient

# Register ConstantCoefficient in _coefficient:
_coefficient.ConstantCoefficient_swigregister(ConstantCoefficient)
class PWConstCoefficient(Coefficient):
    r"""Proxy of C++ mfem::PWConstCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PWConstCoefficient self, int NumOfSubD=0) -> PWConstCoefficient
        __init__(PWConstCoefficient self, Vector c) -> PWConstCoefficient
        """
        _coefficient.PWConstCoefficient_swiginit(self, _coefficient.new_PWConstCoefficient(*args))

    def UpdateConstants(self, c):
        r"""UpdateConstants(PWConstCoefficient self, Vector c)"""
        return _coefficient.PWConstCoefficient_UpdateConstants(self, c)
    UpdateConstants = _swig_new_instance_method(_coefficient.PWConstCoefficient_UpdateConstants)

    def __call__(self, i):
        r"""__call__(PWConstCoefficient self, int i) -> mfem::real_t &"""
        return _coefficient.PWConstCoefficient___call__(self, i)
    __call__ = _swig_new_instance_method(_coefficient.PWConstCoefficient___call__)

    def GetNConst(self):
        r"""GetNConst(PWConstCoefficient self) -> int"""
        return _coefficient.PWConstCoefficient_GetNConst(self)
    GetNConst = _swig_new_instance_method(_coefficient.PWConstCoefficient_GetNConst)

    def Eval(self, T, ip):
        r"""Eval(PWConstCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.PWConstCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.PWConstCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_PWConstCoefficient

# Register PWConstCoefficient in _coefficient:
_coefficient.PWConstCoefficient_swigregister(PWConstCoefficient)
class PWCoefficient(Coefficient):
    r"""Proxy of C++ mfem::PWCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PWCoefficient self) -> PWCoefficient
        __init__(PWCoefficient self, intArray attr, CoefficientArray coefs) -> PWCoefficient
        """
        _coefficient.PWCoefficient_swiginit(self, _coefficient.new_PWCoefficient(*args))

        if len(args) > 1:
           self._link = args[1]




    def SetTime(self, t):
        r"""SetTime(PWCoefficient self, mfem::real_t t)"""
        return _coefficient.PWCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.PWCoefficient_SetTime)

    def UpdateCoefficients(self, attr, coefs):
        r"""UpdateCoefficients(PWCoefficient self, intArray attr, CoefficientArray coefs)"""
        return _coefficient.PWCoefficient_UpdateCoefficients(self, attr, coefs)
    UpdateCoefficients = _swig_new_instance_method(_coefficient.PWCoefficient_UpdateCoefficients)

    def UpdateCoefficient(self, attr, coef):
        r"""UpdateCoefficient(PWCoefficient self, int attr, Coefficient coef)"""
        return _coefficient.PWCoefficient_UpdateCoefficient(self, attr, coef)
    UpdateCoefficient = _swig_new_instance_method(_coefficient.PWCoefficient_UpdateCoefficient)

    def ZeroCoefficient(self, attr):
        r"""ZeroCoefficient(PWCoefficient self, int attr)"""
        return _coefficient.PWCoefficient_ZeroCoefficient(self, attr)
    ZeroCoefficient = _swig_new_instance_method(_coefficient.PWCoefficient_ZeroCoefficient)

    def Eval(self, T, ip):
        r"""Eval(PWCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.PWCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.PWCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_PWCoefficient

# Register PWCoefficient in _coefficient:
_coefficient.PWCoefficient_swigregister(PWCoefficient)
class FunctionCoefficient(Coefficient):
    r"""Proxy of C++ mfem::FunctionCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FunctionCoefficient self, std::function< mfem::real_t (mfem::Vector const &) > F) -> FunctionCoefficient
        __init__(FunctionCoefficient self, std::function< mfem::real_t (mfem::Vector const &,mfem::real_t) > TDF) -> FunctionCoefficient
        __init__(FunctionCoefficient self, mfem::real_t (*)(mfem::Vector &) f) -> FunctionCoefficient
        __init__(FunctionCoefficient self, mfem::real_t (*)(mfem::Vector &,mfem::real_t) tdf) -> FunctionCoefficient
        """
        _coefficient.FunctionCoefficient_swiginit(self, _coefficient.new_FunctionCoefficient(*args))

    def Eval(self, T, ip):
        r"""Eval(FunctionCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.FunctionCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.FunctionCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_FunctionCoefficient

# Register FunctionCoefficient in _coefficient:
_coefficient.FunctionCoefficient_swigregister(FunctionCoefficient)
class CartesianCoefficient(Coefficient):
    r"""Proxy of C++ mfem::CartesianCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Eval(self, T, ip):
        r"""Eval(CartesianCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.CartesianCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.CartesianCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_CartesianCoefficient

# Register CartesianCoefficient in _coefficient:
_coefficient.CartesianCoefficient_swigregister(CartesianCoefficient)
class CartesianXCoefficient(CartesianCoefficient):
    r"""Proxy of C++ mfem::CartesianXCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CartesianXCoefficient self) -> CartesianXCoefficient"""
        _coefficient.CartesianXCoefficient_swiginit(self, _coefficient.new_CartesianXCoefficient())
    __swig_destroy__ = _coefficient.delete_CartesianXCoefficient

# Register CartesianXCoefficient in _coefficient:
_coefficient.CartesianXCoefficient_swigregister(CartesianXCoefficient)
class CartesianYCoefficient(CartesianCoefficient):
    r"""Proxy of C++ mfem::CartesianYCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CartesianYCoefficient self) -> CartesianYCoefficient"""
        _coefficient.CartesianYCoefficient_swiginit(self, _coefficient.new_CartesianYCoefficient())
    __swig_destroy__ = _coefficient.delete_CartesianYCoefficient

# Register CartesianYCoefficient in _coefficient:
_coefficient.CartesianYCoefficient_swigregister(CartesianYCoefficient)
class CartesianZCoefficient(CartesianCoefficient):
    r"""Proxy of C++ mfem::CartesianZCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CartesianZCoefficient self) -> CartesianZCoefficient"""
        _coefficient.CartesianZCoefficient_swiginit(self, _coefficient.new_CartesianZCoefficient())
    __swig_destroy__ = _coefficient.delete_CartesianZCoefficient

# Register CartesianZCoefficient in _coefficient:
_coefficient.CartesianZCoefficient_swigregister(CartesianZCoefficient)
class CylindricalRadialCoefficient(Coefficient):
    r"""Proxy of C++ mfem::CylindricalRadialCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CylindricalRadialCoefficient self) -> CylindricalRadialCoefficient"""
        _coefficient.CylindricalRadialCoefficient_swiginit(self, _coefficient.new_CylindricalRadialCoefficient())

    def Eval(self, T, ip):
        r"""Eval(CylindricalRadialCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.CylindricalRadialCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.CylindricalRadialCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_CylindricalRadialCoefficient

# Register CylindricalRadialCoefficient in _coefficient:
_coefficient.CylindricalRadialCoefficient_swigregister(CylindricalRadialCoefficient)
class CylindricalAzimuthalCoefficient(Coefficient):
    r"""Proxy of C++ mfem::CylindricalAzimuthalCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CylindricalAzimuthalCoefficient self) -> CylindricalAzimuthalCoefficient"""
        _coefficient.CylindricalAzimuthalCoefficient_swiginit(self, _coefficient.new_CylindricalAzimuthalCoefficient())

    def Eval(self, T, ip):
        r"""Eval(CylindricalAzimuthalCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.CylindricalAzimuthalCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.CylindricalAzimuthalCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_CylindricalAzimuthalCoefficient

# Register CylindricalAzimuthalCoefficient in _coefficient:
_coefficient.CylindricalAzimuthalCoefficient_swigregister(CylindricalAzimuthalCoefficient)
class SphericalRadialCoefficient(Coefficient):
    r"""Proxy of C++ mfem::SphericalRadialCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SphericalRadialCoefficient self) -> SphericalRadialCoefficient"""
        _coefficient.SphericalRadialCoefficient_swiginit(self, _coefficient.new_SphericalRadialCoefficient())

    def Eval(self, T, ip):
        r"""Eval(SphericalRadialCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.SphericalRadialCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.SphericalRadialCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_SphericalRadialCoefficient

# Register SphericalRadialCoefficient in _coefficient:
_coefficient.SphericalRadialCoefficient_swigregister(SphericalRadialCoefficient)
class SphericalAzimuthalCoefficient(Coefficient):
    r"""Proxy of C++ mfem::SphericalAzimuthalCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SphericalAzimuthalCoefficient self) -> SphericalAzimuthalCoefficient"""
        _coefficient.SphericalAzimuthalCoefficient_swiginit(self, _coefficient.new_SphericalAzimuthalCoefficient())

    def Eval(self, T, ip):
        r"""Eval(SphericalAzimuthalCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.SphericalAzimuthalCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.SphericalAzimuthalCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_SphericalAzimuthalCoefficient

# Register SphericalAzimuthalCoefficient in _coefficient:
_coefficient.SphericalAzimuthalCoefficient_swigregister(SphericalAzimuthalCoefficient)
class SphericalPolarCoefficient(Coefficient):
    r"""Proxy of C++ mfem::SphericalPolarCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SphericalPolarCoefficient self) -> SphericalPolarCoefficient"""
        _coefficient.SphericalPolarCoefficient_swiginit(self, _coefficient.new_SphericalPolarCoefficient())

    def Eval(self, T, ip):
        r"""Eval(SphericalPolarCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.SphericalPolarCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.SphericalPolarCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_SphericalPolarCoefficient

# Register SphericalPolarCoefficient in _coefficient:
_coefficient.SphericalPolarCoefficient_swigregister(SphericalPolarCoefficient)
class GridFunctionCoefficient(Coefficient):
    r"""Proxy of C++ mfem::GridFunctionCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GridFunctionCoefficient self) -> GridFunctionCoefficient
        __init__(GridFunctionCoefficient self, mfem::GridFunction const * gf, int comp=1) -> GridFunctionCoefficient
        """
        _coefficient.GridFunctionCoefficient_swiginit(self, _coefficient.new_GridFunctionCoefficient(*args))

        if len(args) > 0:
           self._link = args[0]




    def SetGridFunction(self, gf):
        r"""SetGridFunction(GridFunctionCoefficient self, mfem::GridFunction const * gf)"""

        self._link = gf


        return _coefficient.GridFunctionCoefficient_SetGridFunction(self, gf)


    def GetGridFunction(self):
        r"""GetGridFunction(GridFunctionCoefficient self) -> mfem::GridFunction const *"""
        return _coefficient.GridFunctionCoefficient_GetGridFunction(self)
    GetGridFunction = _swig_new_instance_method(_coefficient.GridFunctionCoefficient_GetGridFunction)

    def Eval(self, T, ip):
        r"""Eval(GridFunctionCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.GridFunctionCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.GridFunctionCoefficient_Eval)

    def Project(self, qf):
        r"""Project(GridFunctionCoefficient self, mfem::QuadratureFunction & qf)"""
        return _coefficient.GridFunctionCoefficient_Project(self, qf)
    Project = _swig_new_instance_method(_coefficient.GridFunctionCoefficient_Project)
    __swig_destroy__ = _coefficient.delete_GridFunctionCoefficient

# Register GridFunctionCoefficient in _coefficient:
_coefficient.GridFunctionCoefficient_swigregister(GridFunctionCoefficient)
class TransformedCoefficient(Coefficient):
    r"""Proxy of C++ mfem::TransformedCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TransformedCoefficient self, Coefficient q, std::function< mfem::real_t (mfem::real_t) > F) -> TransformedCoefficient
        __init__(TransformedCoefficient self, Coefficient q1, Coefficient q2, std::function< mfem::real_t (mfem::real_t,mfem::real_t) > F) -> TransformedCoefficient
        """
        _coefficient.TransformedCoefficient_swiginit(self, _coefficient.new_TransformedCoefficient(*args))

        self._link = [x for x in args if isinstance(x, Coefficient)]




    def SetTime(self, t):
        r"""SetTime(TransformedCoefficient self, mfem::real_t t)"""
        return _coefficient.TransformedCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.TransformedCoefficient_SetTime)

    def Eval(self, T, ip):
        r"""Eval(TransformedCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.TransformedCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.TransformedCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_TransformedCoefficient

# Register TransformedCoefficient in _coefficient:
_coefficient.TransformedCoefficient_swigregister(TransformedCoefficient)
class DeltaCoefficient(Coefficient):
    r"""Proxy of C++ mfem::DeltaCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DeltaCoefficient self) -> DeltaCoefficient
        __init__(DeltaCoefficient self, mfem::real_t x, mfem::real_t s) -> DeltaCoefficient
        __init__(DeltaCoefficient self, mfem::real_t x, mfem::real_t y, mfem::real_t s) -> DeltaCoefficient
        __init__(DeltaCoefficient self, mfem::real_t x, mfem::real_t y, mfem::real_t z, mfem::real_t s) -> DeltaCoefficient
        """
        _coefficient.DeltaCoefficient_swiginit(self, _coefficient.new_DeltaCoefficient(*args))

    def SetTime(self, t):
        r"""SetTime(DeltaCoefficient self, mfem::real_t t)"""
        return _coefficient.DeltaCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.DeltaCoefficient_SetTime)

    def SetDeltaCenter(self, center):
        r"""SetDeltaCenter(DeltaCoefficient self, Vector center)"""
        return _coefficient.DeltaCoefficient_SetDeltaCenter(self, center)
    SetDeltaCenter = _swig_new_instance_method(_coefficient.DeltaCoefficient_SetDeltaCenter)

    def SetScale(self, s_):
        r"""SetScale(DeltaCoefficient self, mfem::real_t s_)"""
        return _coefficient.DeltaCoefficient_SetScale(self, s_)
    SetScale = _swig_new_instance_method(_coefficient.DeltaCoefficient_SetScale)

    def SetFunction(self, f):
        r"""SetFunction(DeltaCoefficient self, mfem::real_t (*)(mfem::real_t) f)"""
        return _coefficient.DeltaCoefficient_SetFunction(self, f)
    SetFunction = _swig_new_instance_method(_coefficient.DeltaCoefficient_SetFunction)

    def SetTol(self, tol_):
        r"""SetTol(DeltaCoefficient self, mfem::real_t tol_)"""
        return _coefficient.DeltaCoefficient_SetTol(self, tol_)
    SetTol = _swig_new_instance_method(_coefficient.DeltaCoefficient_SetTol)

    def SetWeight(self, w):
        r"""SetWeight(DeltaCoefficient self, Coefficient w)"""

        self._linkw = w


        return _coefficient.DeltaCoefficient_SetWeight(self, w)


    def Center(self):
        r"""Center(DeltaCoefficient self) -> mfem::real_t const *"""
        return _coefficient.DeltaCoefficient_Center(self)
    Center = _swig_new_instance_method(_coefficient.DeltaCoefficient_Center)

    def Scale(self):
        r"""Scale(DeltaCoefficient self) -> mfem::real_t"""
        return _coefficient.DeltaCoefficient_Scale(self)
    Scale = _swig_new_instance_method(_coefficient.DeltaCoefficient_Scale)

    def Tol(self):
        r"""Tol(DeltaCoefficient self) -> mfem::real_t"""
        return _coefficient.DeltaCoefficient_Tol(self)
    Tol = _swig_new_instance_method(_coefficient.DeltaCoefficient_Tol)

    def Weight(self):
        r"""Weight(DeltaCoefficient self) -> Coefficient"""
        return _coefficient.DeltaCoefficient_Weight(self)
    Weight = _swig_new_instance_method(_coefficient.DeltaCoefficient_Weight)

    def GetDeltaCenter(self, center):
        r"""GetDeltaCenter(DeltaCoefficient self, Vector center)"""
        return _coefficient.DeltaCoefficient_GetDeltaCenter(self, center)
    GetDeltaCenter = _swig_new_instance_method(_coefficient.DeltaCoefficient_GetDeltaCenter)

    def EvalDelta(self, T, ip):
        r"""EvalDelta(DeltaCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.DeltaCoefficient_EvalDelta(self, T, ip)
    EvalDelta = _swig_new_instance_method(_coefficient.DeltaCoefficient_EvalDelta)

    def Eval(self, T, ip):
        r"""Eval(DeltaCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.DeltaCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.DeltaCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_DeltaCoefficient

# Register DeltaCoefficient in _coefficient:
_coefficient.DeltaCoefficient_swigregister(DeltaCoefficient)
class RestrictedCoefficient(Coefficient):
    r"""Proxy of C++ mfem::RestrictedCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, c_, attr):
        r"""__init__(RestrictedCoefficient self, Coefficient c_, intArray attr) -> RestrictedCoefficient"""
        _coefficient.RestrictedCoefficient_swiginit(self, _coefficient.new_RestrictedCoefficient(c_, attr))

        self._ref_to_c = c_




    def SetTime(self, t):
        r"""SetTime(RestrictedCoefficient self, mfem::real_t t)"""
        return _coefficient.RestrictedCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.RestrictedCoefficient_SetTime)

    def Eval(self, T, ip):
        r"""Eval(RestrictedCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.RestrictedCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.RestrictedCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_RestrictedCoefficient

# Register RestrictedCoefficient in _coefficient:
_coefficient.RestrictedCoefficient_swigregister(RestrictedCoefficient)
class VectorCoefficient(object):
    r"""Proxy of C++ mfem::VectorCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetTime(self, t):
        r"""SetTime(VectorCoefficient self, mfem::real_t t)"""
        return _coefficient.VectorCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.VectorCoefficient_SetTime)

    def GetTime(self):
        r"""GetTime(VectorCoefficient self) -> mfem::real_t"""
        return _coefficient.VectorCoefficient_GetTime(self)
    GetTime = _swig_new_instance_method(_coefficient.VectorCoefficient_GetTime)

    def GetVDim(self):
        r"""GetVDim(VectorCoefficient self) -> int"""
        return _coefficient.VectorCoefficient_GetVDim(self)
    GetVDim = _swig_new_instance_method(_coefficient.VectorCoefficient_GetVDim)

    def Eval(self, *args):
        r"""
        Eval(VectorCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(VectorCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        """
        return _coefficient.VectorCoefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_coefficient.VectorCoefficient_Eval)

    def Project(self, qf):
        r"""Project(VectorCoefficient self, mfem::QuadratureFunction & qf)"""
        return _coefficient.VectorCoefficient_Project(self, qf)
    Project = _swig_new_instance_method(_coefficient.VectorCoefficient_Project)
    __swig_destroy__ = _coefficient.delete_VectorCoefficient

# Register VectorCoefficient in _coefficient:
_coefficient.VectorCoefficient_swigregister(VectorCoefficient)
class VectorConstantCoefficient(VectorCoefficient):
    r"""Proxy of C++ mfem::VectorConstantCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, v):
        r"""__init__(VectorConstantCoefficient self, Vector v) -> VectorConstantCoefficient"""

        try:
           import numpy as np
           value = np.asarray(v, dtype=float).flatten()
           can_np_array = True
        except:
           can_np_array = False

        if can_np_array:
           v = mfem._ser.vector.Vector(value)
           self._value = v
        else:
           pass


        _coefficient.VectorConstantCoefficient_swiginit(self, _coefficient.new_VectorConstantCoefficient(v))

    def Eval(self, *args):
        r"""
        Eval(VectorConstantCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        Eval(VectorConstantCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        """
        return _coefficient.VectorConstantCoefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_coefficient.VectorConstantCoefficient_Eval)

    def GetVec(self):
        r"""GetVec(VectorConstantCoefficient self) -> Vector"""
        return _coefficient.VectorConstantCoefficient_GetVec(self)
    GetVec = _swig_new_instance_method(_coefficient.VectorConstantCoefficient_GetVec)
    __swig_destroy__ = _coefficient.delete_VectorConstantCoefficient

# Register VectorConstantCoefficient in _coefficient:
_coefficient.VectorConstantCoefficient_swigregister(VectorConstantCoefficient)
class PWVectorCoefficient(VectorCoefficient):
    r"""Proxy of C++ mfem::PWVectorCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PWVectorCoefficient self, int vd) -> PWVectorCoefficient
        __init__(PWVectorCoefficient self, int vd, intArray attr, VectorCoefficientArray coefs) -> PWVectorCoefficient
        """
        _coefficient.PWVectorCoefficient_swiginit(self, _coefficient.new_PWVectorCoefficient(*args))

        if len(args) > 2:
           self._link = args[2]      




    def SetTime(self, t):
        r"""SetTime(PWVectorCoefficient self, mfem::real_t t)"""
        return _coefficient.PWVectorCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.PWVectorCoefficient_SetTime)

    def UpdateCoefficients(self, attr, coefs):
        r"""UpdateCoefficients(PWVectorCoefficient self, intArray attr, VectorCoefficientArray coefs)"""
        return _coefficient.PWVectorCoefficient_UpdateCoefficients(self, attr, coefs)
    UpdateCoefficients = _swig_new_instance_method(_coefficient.PWVectorCoefficient_UpdateCoefficients)

    def UpdateCoefficient(self, attr, coef):
        r"""UpdateCoefficient(PWVectorCoefficient self, int attr, VectorCoefficient coef)"""
        return _coefficient.PWVectorCoefficient_UpdateCoefficient(self, attr, coef)
    UpdateCoefficient = _swig_new_instance_method(_coefficient.PWVectorCoefficient_UpdateCoefficient)

    def ZeroCoefficient(self, attr):
        r"""ZeroCoefficient(PWVectorCoefficient self, int attr)"""
        return _coefficient.PWVectorCoefficient_ZeroCoefficient(self, attr)
    ZeroCoefficient = _swig_new_instance_method(_coefficient.PWVectorCoefficient_ZeroCoefficient)

    def Eval(self, *args):
        r"""
        Eval(PWVectorCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(PWVectorCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        """
        return _coefficient.PWVectorCoefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_coefficient.PWVectorCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_PWVectorCoefficient

# Register PWVectorCoefficient in _coefficient:
_coefficient.PWVectorCoefficient_swigregister(PWVectorCoefficient)
class PositionVectorCoefficient(VectorCoefficient):
    r"""Proxy of C++ mfem::PositionVectorCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dim):
        r"""__init__(PositionVectorCoefficient self, int dim) -> PositionVectorCoefficient"""
        _coefficient.PositionVectorCoefficient_swiginit(self, _coefficient.new_PositionVectorCoefficient(dim))

    def Eval(self, *args):
        r"""
        Eval(PositionVectorCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        Eval(PositionVectorCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        """
        return _coefficient.PositionVectorCoefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_coefficient.PositionVectorCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_PositionVectorCoefficient

# Register PositionVectorCoefficient in _coefficient:
_coefficient.PositionVectorCoefficient_swigregister(PositionVectorCoefficient)
class VectorFunctionCoefficient(VectorCoefficient):
    r"""Proxy of C++ mfem::VectorFunctionCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(VectorFunctionCoefficient self, int dim, std::function< void (mfem::Vector const &,mfem::Vector &) > F, Coefficient q=None) -> VectorFunctionCoefficient
        __init__(VectorFunctionCoefficient self, int dim, std::function< void (mfem::Vector const &,mfem::real_t,mfem::Vector &) > TDF, Coefficient q=None) -> VectorFunctionCoefficient
        """
        _coefficient.VectorFunctionCoefficient_swiginit(self, _coefficient.new_VectorFunctionCoefficient(*args))

    def Eval(self, *args):
        r"""
        Eval(VectorFunctionCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        Eval(VectorFunctionCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        """
        return _coefficient.VectorFunctionCoefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_coefficient.VectorFunctionCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_VectorFunctionCoefficient

# Register VectorFunctionCoefficient in _coefficient:
_coefficient.VectorFunctionCoefficient_swigregister(VectorFunctionCoefficient)
class VectorArrayCoefficient(VectorCoefficient):
    r"""Proxy of C++ mfem::VectorArrayCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dim):
        r"""__init__(VectorArrayCoefficient self, int dim) -> VectorArrayCoefficient"""
        _coefficient.VectorArrayCoefficient_swiginit(self, _coefficient.new_VectorArrayCoefficient(dim))

    def SetTime(self, t):
        r"""SetTime(VectorArrayCoefficient self, mfem::real_t t)"""
        return _coefficient.VectorArrayCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.VectorArrayCoefficient_SetTime)

    def GetCoeff(self, i):
        r"""GetCoeff(VectorArrayCoefficient self, int i) -> Coefficient"""
        return _coefficient.VectorArrayCoefficient_GetCoeff(self, i)
    GetCoeff = _swig_new_instance_method(_coefficient.VectorArrayCoefficient_GetCoeff)

    def GetCoeffs(self):
        r"""GetCoeffs(VectorArrayCoefficient self) -> mfem::Coefficient **"""
        return _coefficient.VectorArrayCoefficient_GetCoeffs(self)
    GetCoeffs = _swig_new_instance_method(_coefficient.VectorArrayCoefficient_GetCoeffs)

    def Set(self, i, c, own=True):
        r"""Set(VectorArrayCoefficient self, int i, Coefficient c, bool own=True)"""

        c.thisown=0 


        return _coefficient.VectorArrayCoefficient_Set(self, i, c, own)


    def SetOwnership(self, i, own):
        r"""SetOwnership(VectorArrayCoefficient self, int i, bool own)"""
        return _coefficient.VectorArrayCoefficient_SetOwnership(self, i, own)
    SetOwnership = _swig_new_instance_method(_coefficient.VectorArrayCoefficient_SetOwnership)

    def GetOwnership(self, i):
        r"""GetOwnership(VectorArrayCoefficient self, int i) -> bool"""
        return _coefficient.VectorArrayCoefficient_GetOwnership(self, i)
    GetOwnership = _swig_new_instance_method(_coefficient.VectorArrayCoefficient_GetOwnership)

    def Eval(self, *args):
        r"""
        Eval(VectorArrayCoefficient self, int i, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t
        Eval(VectorArrayCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        Eval(VectorArrayCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        """
        return _coefficient.VectorArrayCoefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_coefficient.VectorArrayCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_VectorArrayCoefficient

# Register VectorArrayCoefficient in _coefficient:
_coefficient.VectorArrayCoefficient_swigregister(VectorArrayCoefficient)
class VectorGridFunctionCoefficient(VectorCoefficient):
    r"""Proxy of C++ mfem::VectorGridFunctionCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(VectorGridFunctionCoefficient self) -> VectorGridFunctionCoefficient
        __init__(VectorGridFunctionCoefficient self, mfem::GridFunction const * gf) -> VectorGridFunctionCoefficient
        """

        if len(args) > 0:
           self._link = args[0]


        _coefficient.VectorGridFunctionCoefficient_swiginit(self, _coefficient.new_VectorGridFunctionCoefficient(*args))

    def SetGridFunction(self, gf):
        r"""SetGridFunction(VectorGridFunctionCoefficient self, mfem::GridFunction const * gf)"""

        self._link = gf


        return _coefficient.VectorGridFunctionCoefficient_SetGridFunction(self, gf)


    def GetGridFunction(self):
        r"""GetGridFunction(VectorGridFunctionCoefficient self) -> mfem::GridFunction const *"""
        return _coefficient.VectorGridFunctionCoefficient_GetGridFunction(self)
    GetGridFunction = _swig_new_instance_method(_coefficient.VectorGridFunctionCoefficient_GetGridFunction)

    def Eval(self, *args):
        r"""
        Eval(VectorGridFunctionCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(VectorGridFunctionCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        """
        return _coefficient.VectorGridFunctionCoefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_coefficient.VectorGridFunctionCoefficient_Eval)

    def Project(self, qf):
        r"""Project(VectorGridFunctionCoefficient self, mfem::QuadratureFunction & qf)"""
        return _coefficient.VectorGridFunctionCoefficient_Project(self, qf)
    Project = _swig_new_instance_method(_coefficient.VectorGridFunctionCoefficient_Project)
    __swig_destroy__ = _coefficient.delete_VectorGridFunctionCoefficient

# Register VectorGridFunctionCoefficient in _coefficient:
_coefficient.VectorGridFunctionCoefficient_swigregister(VectorGridFunctionCoefficient)
class GradientGridFunctionCoefficient(VectorCoefficient):
    r"""Proxy of C++ mfem::GradientGridFunctionCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gf):
        r"""__init__(GradientGridFunctionCoefficient self, mfem::GridFunction const * gf) -> GradientGridFunctionCoefficient"""

        self._link = gf    


        _coefficient.GradientGridFunctionCoefficient_swiginit(self, _coefficient.new_GradientGridFunctionCoefficient(gf))

    def SetGridFunction(self, gf):
        r"""SetGridFunction(GradientGridFunctionCoefficient self, mfem::GridFunction const * gf)"""

        self._link = gf


        return _coefficient.GradientGridFunctionCoefficient_SetGridFunction(self, gf)


    def GetGridFunction(self):
        r"""GetGridFunction(GradientGridFunctionCoefficient self) -> mfem::GridFunction const *"""
        return _coefficient.GradientGridFunctionCoefficient_GetGridFunction(self)
    GetGridFunction = _swig_new_instance_method(_coefficient.GradientGridFunctionCoefficient_GetGridFunction)

    def Eval(self, *args):
        r"""
        Eval(GradientGridFunctionCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(GradientGridFunctionCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        """
        return _coefficient.GradientGridFunctionCoefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_coefficient.GradientGridFunctionCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_GradientGridFunctionCoefficient

# Register GradientGridFunctionCoefficient in _coefficient:
_coefficient.GradientGridFunctionCoefficient_swigregister(GradientGridFunctionCoefficient)
class CurlGridFunctionCoefficient(VectorCoefficient):
    r"""Proxy of C++ mfem::CurlGridFunctionCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gf):
        r"""__init__(CurlGridFunctionCoefficient self, mfem::GridFunction const * gf) -> CurlGridFunctionCoefficient"""

        self._link = gf        


        _coefficient.CurlGridFunctionCoefficient_swiginit(self, _coefficient.new_CurlGridFunctionCoefficient(gf))

    def SetGridFunction(self, gf):
        r"""SetGridFunction(CurlGridFunctionCoefficient self, mfem::GridFunction const * gf)"""

        self._link = gf


        return _coefficient.CurlGridFunctionCoefficient_SetGridFunction(self, gf)


    def GetGridFunction(self):
        r"""GetGridFunction(CurlGridFunctionCoefficient self) -> mfem::GridFunction const *"""
        return _coefficient.CurlGridFunctionCoefficient_GetGridFunction(self)
    GetGridFunction = _swig_new_instance_method(_coefficient.CurlGridFunctionCoefficient_GetGridFunction)

    def Eval(self, *args):
        r"""
        Eval(CurlGridFunctionCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        Eval(CurlGridFunctionCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        """
        return _coefficient.CurlGridFunctionCoefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_coefficient.CurlGridFunctionCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_CurlGridFunctionCoefficient

# Register CurlGridFunctionCoefficient in _coefficient:
_coefficient.CurlGridFunctionCoefficient_swigregister(CurlGridFunctionCoefficient)
class DivergenceGridFunctionCoefficient(Coefficient):
    r"""Proxy of C++ mfem::DivergenceGridFunctionCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gf):
        r"""__init__(DivergenceGridFunctionCoefficient self, mfem::GridFunction const * gf) -> DivergenceGridFunctionCoefficient"""

        self._link = gf    


        _coefficient.DivergenceGridFunctionCoefficient_swiginit(self, _coefficient.new_DivergenceGridFunctionCoefficient(gf))

    def SetGridFunction(self, gf):
        r"""SetGridFunction(DivergenceGridFunctionCoefficient self, mfem::GridFunction const * gf)"""

        self._link = gf


        return _coefficient.DivergenceGridFunctionCoefficient_SetGridFunction(self, gf)


    def GetGridFunction(self):
        r"""GetGridFunction(DivergenceGridFunctionCoefficient self) -> mfem::GridFunction const *"""
        return _coefficient.DivergenceGridFunctionCoefficient_GetGridFunction(self)
    GetGridFunction = _swig_new_instance_method(_coefficient.DivergenceGridFunctionCoefficient_GetGridFunction)

    def Eval(self, T, ip):
        r"""Eval(DivergenceGridFunctionCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.DivergenceGridFunctionCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.DivergenceGridFunctionCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_DivergenceGridFunctionCoefficient

# Register DivergenceGridFunctionCoefficient in _coefficient:
_coefficient.DivergenceGridFunctionCoefficient_swigregister(DivergenceGridFunctionCoefficient)
class VectorDeltaCoefficient(VectorCoefficient):
    r"""Proxy of C++ mfem::VectorDeltaCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(VectorDeltaCoefficient self, int vdim_) -> VectorDeltaCoefficient
        __init__(VectorDeltaCoefficient self, Vector dir_) -> VectorDeltaCoefficient
        __init__(VectorDeltaCoefficient self, Vector dir_, mfem::real_t x, mfem::real_t s) -> VectorDeltaCoefficient
        __init__(VectorDeltaCoefficient self, Vector dir_, mfem::real_t x, mfem::real_t y, mfem::real_t s) -> VectorDeltaCoefficient
        __init__(VectorDeltaCoefficient self, Vector dir_, mfem::real_t x, mfem::real_t y, mfem::real_t z, mfem::real_t s) -> VectorDeltaCoefficient
        """
        _coefficient.VectorDeltaCoefficient_swiginit(self, _coefficient.new_VectorDeltaCoefficient(*args))

    def SetTime(self, t):
        r"""SetTime(VectorDeltaCoefficient self, mfem::real_t t)"""
        return _coefficient.VectorDeltaCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.VectorDeltaCoefficient_SetTime)

    def SetDeltaCoefficient(self, d_):
        r"""SetDeltaCoefficient(VectorDeltaCoefficient self, DeltaCoefficient d_)"""
        return _coefficient.VectorDeltaCoefficient_SetDeltaCoefficient(self, d_)
    SetDeltaCoefficient = _swig_new_instance_method(_coefficient.VectorDeltaCoefficient_SetDeltaCoefficient)

    def GetDeltaCoefficient(self):
        r"""GetDeltaCoefficient(VectorDeltaCoefficient self) -> DeltaCoefficient"""
        return _coefficient.VectorDeltaCoefficient_GetDeltaCoefficient(self)
    GetDeltaCoefficient = _swig_new_instance_method(_coefficient.VectorDeltaCoefficient_GetDeltaCoefficient)

    def SetScale(self, s):
        r"""SetScale(VectorDeltaCoefficient self, mfem::real_t s)"""
        return _coefficient.VectorDeltaCoefficient_SetScale(self, s)
    SetScale = _swig_new_instance_method(_coefficient.VectorDeltaCoefficient_SetScale)

    def SetDirection(self, d_):
        r"""SetDirection(VectorDeltaCoefficient self, Vector d_)"""
        return _coefficient.VectorDeltaCoefficient_SetDirection(self, d_)
    SetDirection = _swig_new_instance_method(_coefficient.VectorDeltaCoefficient_SetDirection)

    def SetDeltaCenter(self, center):
        r"""SetDeltaCenter(VectorDeltaCoefficient self, Vector center)"""
        return _coefficient.VectorDeltaCoefficient_SetDeltaCenter(self, center)
    SetDeltaCenter = _swig_new_instance_method(_coefficient.VectorDeltaCoefficient_SetDeltaCenter)

    def GetDeltaCenter(self, center):
        r"""GetDeltaCenter(VectorDeltaCoefficient self, Vector center)"""
        return _coefficient.VectorDeltaCoefficient_GetDeltaCenter(self, center)
    GetDeltaCenter = _swig_new_instance_method(_coefficient.VectorDeltaCoefficient_GetDeltaCenter)

    def EvalDelta(self, V, T, ip):
        r"""EvalDelta(VectorDeltaCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.VectorDeltaCoefficient_EvalDelta(self, V, T, ip)
    EvalDelta = _swig_new_instance_method(_coefficient.VectorDeltaCoefficient_EvalDelta)

    def Eval(self, *args):
        r"""
        Eval(VectorDeltaCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        Eval(VectorDeltaCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        """
        return _coefficient.VectorDeltaCoefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_coefficient.VectorDeltaCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_VectorDeltaCoefficient

# Register VectorDeltaCoefficient in _coefficient:
_coefficient.VectorDeltaCoefficient_swigregister(VectorDeltaCoefficient)
class VectorRestrictedCoefficient(VectorCoefficient):
    r"""Proxy of C++ mfem::VectorRestrictedCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, vc, attr):
        r"""__init__(VectorRestrictedCoefficient self, VectorCoefficient vc, intArray attr) -> VectorRestrictedCoefficient"""
        _coefficient.VectorRestrictedCoefficient_swiginit(self, _coefficient.new_VectorRestrictedCoefficient(vc, attr))

        self._ref_to_vc = vc




    def SetTime(self, t):
        r"""SetTime(VectorRestrictedCoefficient self, mfem::real_t t)"""
        return _coefficient.VectorRestrictedCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.VectorRestrictedCoefficient_SetTime)

    def Eval(self, *args):
        r"""
        Eval(VectorRestrictedCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(VectorRestrictedCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        """
        return _coefficient.VectorRestrictedCoefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_coefficient.VectorRestrictedCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_VectorRestrictedCoefficient

# Register VectorRestrictedCoefficient in _coefficient:
_coefficient.VectorRestrictedCoefficient_swigregister(VectorRestrictedCoefficient)
class MatrixCoefficient(object):
    r"""Proxy of C++ mfem::MatrixCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetTime(self, t):
        r"""SetTime(MatrixCoefficient self, mfem::real_t t)"""
        return _coefficient.MatrixCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.MatrixCoefficient_SetTime)

    def GetTime(self):
        r"""GetTime(MatrixCoefficient self) -> mfem::real_t"""
        return _coefficient.MatrixCoefficient_GetTime(self)
    GetTime = _swig_new_instance_method(_coefficient.MatrixCoefficient_GetTime)

    def GetHeight(self):
        r"""GetHeight(MatrixCoefficient self) -> int"""
        return _coefficient.MatrixCoefficient_GetHeight(self)
    GetHeight = _swig_new_instance_method(_coefficient.MatrixCoefficient_GetHeight)

    def GetWidth(self):
        r"""GetWidth(MatrixCoefficient self) -> int"""
        return _coefficient.MatrixCoefficient_GetWidth(self)
    GetWidth = _swig_new_instance_method(_coefficient.MatrixCoefficient_GetWidth)

    def GetVDim(self):
        r"""GetVDim(MatrixCoefficient self) -> int"""
        return _coefficient.MatrixCoefficient_GetVDim(self)
    GetVDim = _swig_new_instance_method(_coefficient.MatrixCoefficient_GetVDim)

    def IsSymmetric(self):
        r"""IsSymmetric(MatrixCoefficient self) -> bool"""
        return _coefficient.MatrixCoefficient_IsSymmetric(self)
    IsSymmetric = _swig_new_instance_method(_coefficient.MatrixCoefficient_IsSymmetric)

    def Eval(self, K, T, ip):
        r"""Eval(MatrixCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.MatrixCoefficient_Eval(self, K, T, ip)
    Eval = _swig_new_instance_method(_coefficient.MatrixCoefficient_Eval)

    def Project(self, qf, transpose=False):
        r"""Project(MatrixCoefficient self, mfem::QuadratureFunction & qf, bool transpose=False)"""
        return _coefficient.MatrixCoefficient_Project(self, qf, transpose)
    Project = _swig_new_instance_method(_coefficient.MatrixCoefficient_Project)

    def EvalSymmetric(self, K, T, ip):
        r"""EvalSymmetric(MatrixCoefficient self, Vector K, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.MatrixCoefficient_EvalSymmetric(self, K, T, ip)
    EvalSymmetric = _swig_new_instance_method(_coefficient.MatrixCoefficient_EvalSymmetric)
    __swig_destroy__ = _coefficient.delete_MatrixCoefficient

# Register MatrixCoefficient in _coefficient:
_coefficient.MatrixCoefficient_swigregister(MatrixCoefficient)
class MatrixConstantCoefficient(MatrixCoefficient):
    r"""Proxy of C++ mfem::MatrixConstantCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, m):
        r"""__init__(MatrixConstantCoefficient self, DenseMatrix m) -> MatrixConstantCoefficient"""

        try:
           import numpy as np
           value = np.asarray(m, dtype=float)
           can_np_array = True
        except:
           can_np_array = False

        if can_np_array:
           v = mfem._ser.vector.Vector(np.transpose(value).flatten())
           m = mfem._ser.densemat.DenseMatrix(v.GetData(), value.shape[0], value.shape[1])
           self._value = (v,m)
        else:
           pass


        _coefficient.MatrixConstantCoefficient_swiginit(self, _coefficient.new_MatrixConstantCoefficient(m))

    def Eval(self, M, T, ip):
        r"""Eval(MatrixConstantCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.MatrixConstantCoefficient_Eval(self, M, T, ip)
    Eval = _swig_new_instance_method(_coefficient.MatrixConstantCoefficient_Eval)

    def GetMatrix(self):
        r"""GetMatrix(MatrixConstantCoefficient self) -> DenseMatrix"""
        return _coefficient.MatrixConstantCoefficient_GetMatrix(self)
    GetMatrix = _swig_new_instance_method(_coefficient.MatrixConstantCoefficient_GetMatrix)
    __swig_destroy__ = _coefficient.delete_MatrixConstantCoefficient

# Register MatrixConstantCoefficient in _coefficient:
_coefficient.MatrixConstantCoefficient_swigregister(MatrixConstantCoefficient)
class PWMatrixCoefficient(MatrixCoefficient):
    r"""Proxy of C++ mfem::PWMatrixCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PWMatrixCoefficient self, int dim, bool symm=False) -> PWMatrixCoefficient
        __init__(PWMatrixCoefficient self, int h, int w, bool symm=False) -> PWMatrixCoefficient
        __init__(PWMatrixCoefficient self, int dim, intArray attr, MatrixCoefficientArray coefs, bool symm=False) -> PWMatrixCoefficient
        __init__(PWMatrixCoefficient self, int h, int w, intArray attr, MatrixCoefficientArray coefs, bool symm=False) -> PWMatrixCoefficient
        """
        _coefficient.PWMatrixCoefficient_swiginit(self, _coefficient.new_PWMatrixCoefficient(*args))

    def SetTime(self, t):
        r"""SetTime(PWMatrixCoefficient self, mfem::real_t t)"""
        return _coefficient.PWMatrixCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.PWMatrixCoefficient_SetTime)

    def UpdateCoefficients(self, attr, coefs):
        r"""UpdateCoefficients(PWMatrixCoefficient self, intArray attr, MatrixCoefficientArray coefs)"""
        return _coefficient.PWMatrixCoefficient_UpdateCoefficients(self, attr, coefs)
    UpdateCoefficients = _swig_new_instance_method(_coefficient.PWMatrixCoefficient_UpdateCoefficients)

    def UpdateCoefficient(self, attr, coef):
        r"""UpdateCoefficient(PWMatrixCoefficient self, int attr, MatrixCoefficient coef)"""
        return _coefficient.PWMatrixCoefficient_UpdateCoefficient(self, attr, coef)
    UpdateCoefficient = _swig_new_instance_method(_coefficient.PWMatrixCoefficient_UpdateCoefficient)

    def ZeroCoefficient(self, attr):
        r"""ZeroCoefficient(PWMatrixCoefficient self, int attr)"""
        return _coefficient.PWMatrixCoefficient_ZeroCoefficient(self, attr)
    ZeroCoefficient = _swig_new_instance_method(_coefficient.PWMatrixCoefficient_ZeroCoefficient)

    def Eval(self, K, T, ip):
        r"""Eval(PWMatrixCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.PWMatrixCoefficient_Eval(self, K, T, ip)
    Eval = _swig_new_instance_method(_coefficient.PWMatrixCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_PWMatrixCoefficient

# Register PWMatrixCoefficient in _coefficient:
_coefficient.PWMatrixCoefficient_swigregister(PWMatrixCoefficient)
class MatrixFunctionCoefficient(MatrixCoefficient):
    r"""Proxy of C++ mfem::MatrixFunctionCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MatrixFunctionCoefficient self, int dim, std::function< void (mfem::Vector const &,mfem::DenseMatrix &) > F, Coefficient q=None) -> MatrixFunctionCoefficient
        __init__(MatrixFunctionCoefficient self, DenseMatrix m, Coefficient q) -> MatrixFunctionCoefficient
        __init__(MatrixFunctionCoefficient self, int dim, std::function< void (mfem::Vector const &,mfem::Vector &) > SymmF, Coefficient q=None) -> MatrixFunctionCoefficient
        __init__(MatrixFunctionCoefficient self, int dim, std::function< void (mfem::Vector const &,mfem::real_t,mfem::DenseMatrix &) > TDF, Coefficient q=None) -> MatrixFunctionCoefficient
        """
        _coefficient.MatrixFunctionCoefficient_swiginit(self, _coefficient.new_MatrixFunctionCoefficient(*args))

    def SetTime(self, t):
        r"""SetTime(MatrixFunctionCoefficient self, mfem::real_t t)"""
        return _coefficient.MatrixFunctionCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.MatrixFunctionCoefficient_SetTime)

    def Eval(self, K, T, ip):
        r"""Eval(MatrixFunctionCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.MatrixFunctionCoefficient_Eval(self, K, T, ip)
    Eval = _swig_new_instance_method(_coefficient.MatrixFunctionCoefficient_Eval)

    def EvalSymmetric(self, K, T, ip):
        r"""EvalSymmetric(MatrixFunctionCoefficient self, Vector K, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.MatrixFunctionCoefficient_EvalSymmetric(self, K, T, ip)
    EvalSymmetric = _swig_new_instance_method(_coefficient.MatrixFunctionCoefficient_EvalSymmetric)
    __swig_destroy__ = _coefficient.delete_MatrixFunctionCoefficient

# Register MatrixFunctionCoefficient in _coefficient:
_coefficient.MatrixFunctionCoefficient_swigregister(MatrixFunctionCoefficient)
class MatrixArrayCoefficient(MatrixCoefficient):
    r"""Proxy of C++ mfem::MatrixArrayCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dim):
        r"""__init__(MatrixArrayCoefficient self, int dim) -> MatrixArrayCoefficient"""
        _coefficient.MatrixArrayCoefficient_swiginit(self, _coefficient.new_MatrixArrayCoefficient(dim))

    def SetTime(self, t):
        r"""SetTime(MatrixArrayCoefficient self, mfem::real_t t)"""
        return _coefficient.MatrixArrayCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.MatrixArrayCoefficient_SetTime)

    def GetCoeff(self, i, j):
        r"""GetCoeff(MatrixArrayCoefficient self, int i, int j) -> Coefficient"""
        return _coefficient.MatrixArrayCoefficient_GetCoeff(self, i, j)
    GetCoeff = _swig_new_instance_method(_coefficient.MatrixArrayCoefficient_GetCoeff)

    def Set(self, i, j, c, own=True):
        r"""Set(MatrixArrayCoefficient self, int i, int j, Coefficient c, bool own=True)"""

        c.thisown=0 


        return _coefficient.MatrixArrayCoefficient_Set(self, i, j, c, own)


    def SetOwnership(self, i, j, own):
        r"""SetOwnership(MatrixArrayCoefficient self, int i, int j, bool own)"""
        return _coefficient.MatrixArrayCoefficient_SetOwnership(self, i, j, own)
    SetOwnership = _swig_new_instance_method(_coefficient.MatrixArrayCoefficient_SetOwnership)

    def GetOwnership(self, i, j):
        r"""GetOwnership(MatrixArrayCoefficient self, int i, int j) -> bool"""
        return _coefficient.MatrixArrayCoefficient_GetOwnership(self, i, j)
    GetOwnership = _swig_new_instance_method(_coefficient.MatrixArrayCoefficient_GetOwnership)

    def Eval(self, *args):
        r"""
        Eval(MatrixArrayCoefficient self, int i, int j, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t
        Eval(MatrixArrayCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)
        """
        return _coefficient.MatrixArrayCoefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_coefficient.MatrixArrayCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_MatrixArrayCoefficient

# Register MatrixArrayCoefficient in _coefficient:
_coefficient.MatrixArrayCoefficient_swigregister(MatrixArrayCoefficient)
class MatrixArrayVectorCoefficient(MatrixCoefficient):
    r"""Proxy of C++ mfem::MatrixArrayVectorCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dim):
        r"""__init__(MatrixArrayVectorCoefficient self, int dim) -> MatrixArrayVectorCoefficient"""
        _coefficient.MatrixArrayVectorCoefficient_swiginit(self, _coefficient.new_MatrixArrayVectorCoefficient(dim))

    def SetTime(self, t):
        r"""SetTime(MatrixArrayVectorCoefficient self, mfem::real_t t)"""
        return _coefficient.MatrixArrayVectorCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.MatrixArrayVectorCoefficient_SetTime)

    def GetCoeff(self, i):
        r"""GetCoeff(MatrixArrayVectorCoefficient self, int i) -> VectorCoefficient"""
        return _coefficient.MatrixArrayVectorCoefficient_GetCoeff(self, i)
    GetCoeff = _swig_new_instance_method(_coefficient.MatrixArrayVectorCoefficient_GetCoeff)

    def Set(self, i, c, own=True):
        r"""Set(MatrixArrayVectorCoefficient self, int i, VectorCoefficient c, bool own=True)"""
        return _coefficient.MatrixArrayVectorCoefficient_Set(self, i, c, own)
    Set = _swig_new_instance_method(_coefficient.MatrixArrayVectorCoefficient_Set)

    def SetOwnership(self, i, own):
        r"""SetOwnership(MatrixArrayVectorCoefficient self, int i, bool own)"""
        return _coefficient.MatrixArrayVectorCoefficient_SetOwnership(self, i, own)
    SetOwnership = _swig_new_instance_method(_coefficient.MatrixArrayVectorCoefficient_SetOwnership)

    def GetOwnership(self, i):
        r"""GetOwnership(MatrixArrayVectorCoefficient self, int i) -> bool"""
        return _coefficient.MatrixArrayVectorCoefficient_GetOwnership(self, i)
    GetOwnership = _swig_new_instance_method(_coefficient.MatrixArrayVectorCoefficient_GetOwnership)

    def Eval(self, *args):
        r"""
        Eval(MatrixArrayVectorCoefficient self, int i, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(MatrixArrayVectorCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)
        """
        return _coefficient.MatrixArrayVectorCoefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_coefficient.MatrixArrayVectorCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_MatrixArrayVectorCoefficient

# Register MatrixArrayVectorCoefficient in _coefficient:
_coefficient.MatrixArrayVectorCoefficient_swigregister(MatrixArrayVectorCoefficient)
class MatrixRestrictedCoefficient(MatrixCoefficient):
    r"""Proxy of C++ mfem::MatrixRestrictedCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mc, attr):
        r"""__init__(MatrixRestrictedCoefficient self, MatrixCoefficient mc, intArray attr) -> MatrixRestrictedCoefficient"""
        _coefficient.MatrixRestrictedCoefficient_swiginit(self, _coefficient.new_MatrixRestrictedCoefficient(mc, attr))

        self._ref_to_mc = mc




    def SetTime(self, t):
        r"""SetTime(MatrixRestrictedCoefficient self, mfem::real_t t)"""
        return _coefficient.MatrixRestrictedCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.MatrixRestrictedCoefficient_SetTime)

    def Eval(self, K, T, ip):
        r"""Eval(MatrixRestrictedCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.MatrixRestrictedCoefficient_Eval(self, K, T, ip)
    Eval = _swig_new_instance_method(_coefficient.MatrixRestrictedCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_MatrixRestrictedCoefficient

# Register MatrixRestrictedCoefficient in _coefficient:
_coefficient.MatrixRestrictedCoefficient_swigregister(MatrixRestrictedCoefficient)
class SumCoefficient(Coefficient):
    r"""Proxy of C++ mfem::SumCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SumCoefficient self, mfem::real_t A, Coefficient B, mfem::real_t alpha_=1.0, mfem::real_t beta_=1.0) -> SumCoefficient
        __init__(SumCoefficient self, Coefficient A, Coefficient B, mfem::real_t alpha_=1.0, mfem::real_t beta_=1.0) -> SumCoefficient
        """
        _coefficient.SumCoefficient_swiginit(self, _coefficient.new_SumCoefficient(*args))

        if len(args) > 0 and isinstance(args[0], Coefficient):
              self.linkA = args[0]
        if len(args) > 1 and isinstance(args[1], Coefficient):
              self.linkB = args[0]





    def SetTime(self, t):
        r"""SetTime(SumCoefficient self, mfem::real_t t)"""
        return _coefficient.SumCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.SumCoefficient_SetTime)

    def SetAConst(self, A):
        r"""SetAConst(SumCoefficient self, mfem::real_t A)"""
        return _coefficient.SumCoefficient_SetAConst(self, A)
    SetAConst = _swig_new_instance_method(_coefficient.SumCoefficient_SetAConst)

    def GetAConst(self):
        r"""GetAConst(SumCoefficient self) -> mfem::real_t"""
        return _coefficient.SumCoefficient_GetAConst(self)
    GetAConst = _swig_new_instance_method(_coefficient.SumCoefficient_GetAConst)

    def SetACoef(self, A):
        r"""SetACoef(SumCoefficient self, Coefficient A)"""
        val = _coefficient.SumCoefficient_SetACoef(self, A)

        self.linkA = A    


        return val


    def GetACoef(self):
        r"""GetACoef(SumCoefficient self) -> Coefficient"""
        return _coefficient.SumCoefficient_GetACoef(self)
    GetACoef = _swig_new_instance_method(_coefficient.SumCoefficient_GetACoef)

    def SetBCoef(self, B):
        r"""SetBCoef(SumCoefficient self, Coefficient B)"""
        val = _coefficient.SumCoefficient_SetBCoef(self, B)

        self.linkB = B    


        return val


    def GetBCoef(self):
        r"""GetBCoef(SumCoefficient self) -> Coefficient"""
        return _coefficient.SumCoefficient_GetBCoef(self)
    GetBCoef = _swig_new_instance_method(_coefficient.SumCoefficient_GetBCoef)

    def SetAlpha(self, alpha_):
        r"""SetAlpha(SumCoefficient self, mfem::real_t alpha_)"""
        return _coefficient.SumCoefficient_SetAlpha(self, alpha_)
    SetAlpha = _swig_new_instance_method(_coefficient.SumCoefficient_SetAlpha)

    def GetAlpha(self):
        r"""GetAlpha(SumCoefficient self) -> mfem::real_t"""
        return _coefficient.SumCoefficient_GetAlpha(self)
    GetAlpha = _swig_new_instance_method(_coefficient.SumCoefficient_GetAlpha)

    def SetBeta(self, beta_):
        r"""SetBeta(SumCoefficient self, mfem::real_t beta_)"""
        return _coefficient.SumCoefficient_SetBeta(self, beta_)
    SetBeta = _swig_new_instance_method(_coefficient.SumCoefficient_SetBeta)

    def GetBeta(self):
        r"""GetBeta(SumCoefficient self) -> mfem::real_t"""
        return _coefficient.SumCoefficient_GetBeta(self)
    GetBeta = _swig_new_instance_method(_coefficient.SumCoefficient_GetBeta)

    def Eval(self, T, ip):
        r"""Eval(SumCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.SumCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.SumCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_SumCoefficient

# Register SumCoefficient in _coefficient:
_coefficient.SumCoefficient_swigregister(SumCoefficient)
class SymmetricMatrixCoefficient(MatrixCoefficient):
    r"""Proxy of C++ mfem::SymmetricMatrixCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetSize(self):
        r"""GetSize(SymmetricMatrixCoefficient self) -> int"""
        return _coefficient.SymmetricMatrixCoefficient_GetSize(self)
    GetSize = _swig_new_instance_method(_coefficient.SymmetricMatrixCoefficient_GetSize)

    def ProjectSymmetric(self, qf):
        r"""ProjectSymmetric(SymmetricMatrixCoefficient self, mfem::QuadratureFunction & qf)"""
        return _coefficient.SymmetricMatrixCoefficient_ProjectSymmetric(self, qf)
    ProjectSymmetric = _swig_new_instance_method(_coefficient.SymmetricMatrixCoefficient_ProjectSymmetric)

    def Eval(self, *args):
        r"""
        Eval(SymmetricMatrixCoefficient self, DenseSymmetricMatrix K, ElementTransformation T, IntegrationPoint ip)
        Eval(SymmetricMatrixCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)
        """
        return _coefficient.SymmetricMatrixCoefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_coefficient.SymmetricMatrixCoefficient_Eval)

    def GetMatrix(self):
        r"""GetMatrix(SymmetricMatrixCoefficient self) -> DenseSymmetricMatrix"""
        return _coefficient.SymmetricMatrixCoefficient_GetMatrix(self)
    GetMatrix = _swig_new_instance_method(_coefficient.SymmetricMatrixCoefficient_GetMatrix)
    __swig_destroy__ = _coefficient.delete_SymmetricMatrixCoefficient

# Register SymmetricMatrixCoefficient in _coefficient:
_coefficient.SymmetricMatrixCoefficient_swigregister(SymmetricMatrixCoefficient)
class SymmetricMatrixConstantCoefficient(SymmetricMatrixCoefficient):
    r"""Proxy of C++ mfem::SymmetricMatrixConstantCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, m):
        r"""__init__(SymmetricMatrixConstantCoefficient self, DenseSymmetricMatrix m) -> SymmetricMatrixConstantCoefficient"""
        _coefficient.SymmetricMatrixConstantCoefficient_swiginit(self, _coefficient.new_SymmetricMatrixConstantCoefficient(m))

    def Eval(self, *args):
        r"""
        Eval(SymmetricMatrixConstantCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)
        Eval(SymmetricMatrixConstantCoefficient self, DenseSymmetricMatrix M, ElementTransformation T, IntegrationPoint ip)
        """
        return _coefficient.SymmetricMatrixConstantCoefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_coefficient.SymmetricMatrixConstantCoefficient_Eval)

    def GetMatrix(self):
        r"""GetMatrix(SymmetricMatrixConstantCoefficient self) -> DenseSymmetricMatrix"""
        return _coefficient.SymmetricMatrixConstantCoefficient_GetMatrix(self)
    GetMatrix = _swig_new_instance_method(_coefficient.SymmetricMatrixConstantCoefficient_GetMatrix)
    __swig_destroy__ = _coefficient.delete_SymmetricMatrixConstantCoefficient

# Register SymmetricMatrixConstantCoefficient in _coefficient:
_coefficient.SymmetricMatrixConstantCoefficient_swigregister(SymmetricMatrixConstantCoefficient)
class SymmetricMatrixFunctionCoefficient(SymmetricMatrixCoefficient):
    r"""Proxy of C++ mfem::SymmetricMatrixFunctionCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SymmetricMatrixFunctionCoefficient self, int dim, std::function< void (mfem::Vector const &,mfem::DenseSymmetricMatrix &) > F, Coefficient q=None) -> SymmetricMatrixFunctionCoefficient
        __init__(SymmetricMatrixFunctionCoefficient self, DenseSymmetricMatrix m, Coefficient q) -> SymmetricMatrixFunctionCoefficient
        __init__(SymmetricMatrixFunctionCoefficient self, int dim, std::function< void (mfem::Vector const &,mfem::real_t,mfem::DenseSymmetricMatrix &) > TDF, Coefficient q=None) -> SymmetricMatrixFunctionCoefficient
        """
        _coefficient.SymmetricMatrixFunctionCoefficient_swiginit(self, _coefficient.new_SymmetricMatrixFunctionCoefficient(*args))

    def SetTime(self, t):
        r"""SetTime(SymmetricMatrixFunctionCoefficient self, mfem::real_t t)"""
        return _coefficient.SymmetricMatrixFunctionCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.SymmetricMatrixFunctionCoefficient_SetTime)

    def Eval(self, *args):
        r"""
        Eval(SymmetricMatrixFunctionCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)
        Eval(SymmetricMatrixFunctionCoefficient self, DenseSymmetricMatrix K, ElementTransformation T, IntegrationPoint ip)
        """
        return _coefficient.SymmetricMatrixFunctionCoefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_coefficient.SymmetricMatrixFunctionCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_SymmetricMatrixFunctionCoefficient

# Register SymmetricMatrixFunctionCoefficient in _coefficient:
_coefficient.SymmetricMatrixFunctionCoefficient_swigregister(SymmetricMatrixFunctionCoefficient)
class ProductCoefficient(Coefficient):
    r"""Proxy of C++ mfem::ProductCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ProductCoefficient self, mfem::real_t A, Coefficient B) -> ProductCoefficient
        __init__(ProductCoefficient self, Coefficient A, Coefficient B) -> ProductCoefficient
        """
        _coefficient.ProductCoefficient_swiginit(self, _coefficient.new_ProductCoefficient(*args))

        if len(args) > 0 and isinstance(args[0], Coefficient):
           self._linkA = args[0]
        if len(args) > 1 and isinstance(args[1], Coefficient):
           self._linkB = args[1]




    def SetTime(self, t):
        r"""SetTime(ProductCoefficient self, mfem::real_t t)"""
        return _coefficient.ProductCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.ProductCoefficient_SetTime)

    def SetAConst(self, A):
        r"""SetAConst(ProductCoefficient self, mfem::real_t A)"""
        return _coefficient.ProductCoefficient_SetAConst(self, A)
    SetAConst = _swig_new_instance_method(_coefficient.ProductCoefficient_SetAConst)

    def GetAConst(self):
        r"""GetAConst(ProductCoefficient self) -> mfem::real_t"""
        return _coefficient.ProductCoefficient_GetAConst(self)
    GetAConst = _swig_new_instance_method(_coefficient.ProductCoefficient_GetAConst)

    def SetACoef(self, A):
        r"""SetACoef(ProductCoefficient self, Coefficient A)"""
        val = _coefficient.ProductCoefficient_SetACoef(self, A)

        self._linkA = A    


        return val


    def GetACoef(self):
        r"""GetACoef(ProductCoefficient self) -> Coefficient"""
        return _coefficient.ProductCoefficient_GetACoef(self)
    GetACoef = _swig_new_instance_method(_coefficient.ProductCoefficient_GetACoef)

    def SetBCoef(self, B):
        r"""SetBCoef(ProductCoefficient self, Coefficient B)"""
        val = _coefficient.ProductCoefficient_SetBCoef(self, B)

        self._linkB = B    


        return val


    def GetBCoef(self):
        r"""GetBCoef(ProductCoefficient self) -> Coefficient"""
        return _coefficient.ProductCoefficient_GetBCoef(self)
    GetBCoef = _swig_new_instance_method(_coefficient.ProductCoefficient_GetBCoef)

    def Eval(self, T, ip):
        r"""Eval(ProductCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.ProductCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.ProductCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_ProductCoefficient

# Register ProductCoefficient in _coefficient:
_coefficient.ProductCoefficient_swigregister(ProductCoefficient)
class RatioCoefficient(Coefficient):
    r"""Proxy of C++ mfem::RatioCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RatioCoefficient self, mfem::real_t A, Coefficient B) -> RatioCoefficient
        __init__(RatioCoefficient self, Coefficient A, Coefficient B) -> RatioCoefficient
        __init__(RatioCoefficient self, Coefficient A, mfem::real_t B) -> RatioCoefficient
        """
        _coefficient.RatioCoefficient_swiginit(self, _coefficient.new_RatioCoefficient(*args))

        if len(args) > 0 and isinstance(args[0], Coefficient):
           self._linkA = args[0]
        if len(args) > 1 and isinstance(args[1], Coefficient):
           self._linkB = args[1]




    def SetTime(self, t):
        r"""SetTime(RatioCoefficient self, mfem::real_t t)"""
        return _coefficient.RatioCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.RatioCoefficient_SetTime)

    def SetAConst(self, A):
        r"""SetAConst(RatioCoefficient self, mfem::real_t A)"""
        return _coefficient.RatioCoefficient_SetAConst(self, A)
    SetAConst = _swig_new_instance_method(_coefficient.RatioCoefficient_SetAConst)

    def GetAConst(self):
        r"""GetAConst(RatioCoefficient self) -> mfem::real_t"""
        return _coefficient.RatioCoefficient_GetAConst(self)
    GetAConst = _swig_new_instance_method(_coefficient.RatioCoefficient_GetAConst)

    def SetBConst(self, B):
        r"""SetBConst(RatioCoefficient self, mfem::real_t B)"""
        return _coefficient.RatioCoefficient_SetBConst(self, B)
    SetBConst = _swig_new_instance_method(_coefficient.RatioCoefficient_SetBConst)

    def GetBConst(self):
        r"""GetBConst(RatioCoefficient self) -> mfem::real_t"""
        return _coefficient.RatioCoefficient_GetBConst(self)
    GetBConst = _swig_new_instance_method(_coefficient.RatioCoefficient_GetBConst)

    def SetACoef(self, A):
        r"""SetACoef(RatioCoefficient self, Coefficient A)"""
        val = _coefficient.RatioCoefficient_SetACoef(self, A)

        self._linkA = A    


        return val


    def GetACoef(self):
        r"""GetACoef(RatioCoefficient self) -> Coefficient"""
        return _coefficient.RatioCoefficient_GetACoef(self)
    GetACoef = _swig_new_instance_method(_coefficient.RatioCoefficient_GetACoef)

    def SetBCoef(self, B):
        r"""SetBCoef(RatioCoefficient self, Coefficient B)"""
        val = _coefficient.RatioCoefficient_SetBCoef(self, B)

        self._linkB = B    


        return val


    def GetBCoef(self):
        r"""GetBCoef(RatioCoefficient self) -> Coefficient"""
        return _coefficient.RatioCoefficient_GetBCoef(self)
    GetBCoef = _swig_new_instance_method(_coefficient.RatioCoefficient_GetBCoef)

    def Eval(self, T, ip):
        r"""Eval(RatioCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.RatioCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.RatioCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_RatioCoefficient

# Register RatioCoefficient in _coefficient:
_coefficient.RatioCoefficient_swigregister(RatioCoefficient)
class PowerCoefficient(Coefficient):
    r"""Proxy of C++ mfem::PowerCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, A, p_):
        r"""__init__(PowerCoefficient self, Coefficient A, mfem::real_t p_) -> PowerCoefficient"""
        _coefficient.PowerCoefficient_swiginit(self, _coefficient.new_PowerCoefficient(A, p_))

        self._linkA = A




    def SetTime(self, t):
        r"""SetTime(PowerCoefficient self, mfem::real_t t)"""
        return _coefficient.PowerCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.PowerCoefficient_SetTime)

    def SetACoef(self, A):
        r"""SetACoef(PowerCoefficient self, Coefficient A)"""
        val = _coefficient.PowerCoefficient_SetACoef(self, A)

        self._linkA = A


        return val


    def GetACoef(self):
        r"""GetACoef(PowerCoefficient self) -> Coefficient"""
        return _coefficient.PowerCoefficient_GetACoef(self)
    GetACoef = _swig_new_instance_method(_coefficient.PowerCoefficient_GetACoef)

    def SetExponent(self, p_):
        r"""SetExponent(PowerCoefficient self, mfem::real_t p_)"""
        return _coefficient.PowerCoefficient_SetExponent(self, p_)
    SetExponent = _swig_new_instance_method(_coefficient.PowerCoefficient_SetExponent)

    def GetExponent(self):
        r"""GetExponent(PowerCoefficient self) -> mfem::real_t"""
        return _coefficient.PowerCoefficient_GetExponent(self)
    GetExponent = _swig_new_instance_method(_coefficient.PowerCoefficient_GetExponent)

    def Eval(self, T, ip):
        r"""Eval(PowerCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.PowerCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.PowerCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_PowerCoefficient

# Register PowerCoefficient in _coefficient:
_coefficient.PowerCoefficient_swigregister(PowerCoefficient)
class InnerProductCoefficient(Coefficient):
    r"""Proxy of C++ mfem::InnerProductCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, A, B):
        r"""__init__(InnerProductCoefficient self, VectorCoefficient A, VectorCoefficient B) -> InnerProductCoefficient"""
        _coefficient.InnerProductCoefficient_swiginit(self, _coefficient.new_InnerProductCoefficient(A, B))

        self._linkA = A
        self._linkB = B




    def SetTime(self, t):
        r"""SetTime(InnerProductCoefficient self, mfem::real_t t)"""
        return _coefficient.InnerProductCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.InnerProductCoefficient_SetTime)

    def SetACoef(self, A):
        r"""SetACoef(InnerProductCoefficient self, VectorCoefficient A)"""
        val = _coefficient.InnerProductCoefficient_SetACoef(self, A)

        self._linkA = A


        return val


    def GetACoef(self):
        r"""GetACoef(InnerProductCoefficient self) -> VectorCoefficient"""
        return _coefficient.InnerProductCoefficient_GetACoef(self)
    GetACoef = _swig_new_instance_method(_coefficient.InnerProductCoefficient_GetACoef)

    def SetBCoef(self, B):
        r"""SetBCoef(InnerProductCoefficient self, VectorCoefficient B)"""
        val = _coefficient.InnerProductCoefficient_SetBCoef(self, B)

        self._linkB = B


        return val


    def GetBCoef(self):
        r"""GetBCoef(InnerProductCoefficient self) -> VectorCoefficient"""
        return _coefficient.InnerProductCoefficient_GetBCoef(self)
    GetBCoef = _swig_new_instance_method(_coefficient.InnerProductCoefficient_GetBCoef)

    def Eval(self, T, ip):
        r"""Eval(InnerProductCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.InnerProductCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.InnerProductCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_InnerProductCoefficient

# Register InnerProductCoefficient in _coefficient:
_coefficient.InnerProductCoefficient_swigregister(InnerProductCoefficient)
class VectorRotProductCoefficient(Coefficient):
    r"""Proxy of C++ mfem::VectorRotProductCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, A, B):
        r"""__init__(VectorRotProductCoefficient self, VectorCoefficient A, VectorCoefficient B) -> VectorRotProductCoefficient"""
        _coefficient.VectorRotProductCoefficient_swiginit(self, _coefficient.new_VectorRotProductCoefficient(A, B))

        self._linkA = A
        self._linkB = B




    def SetTime(self, t):
        r"""SetTime(VectorRotProductCoefficient self, mfem::real_t t)"""
        return _coefficient.VectorRotProductCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.VectorRotProductCoefficient_SetTime)

    def SetACoef(self, A):
        r"""SetACoef(VectorRotProductCoefficient self, VectorCoefficient A)"""
        val = _coefficient.VectorRotProductCoefficient_SetACoef(self, A)

        self._linkA = A


        return val


    def GetACoef(self):
        r"""GetACoef(VectorRotProductCoefficient self) -> VectorCoefficient"""
        return _coefficient.VectorRotProductCoefficient_GetACoef(self)
    GetACoef = _swig_new_instance_method(_coefficient.VectorRotProductCoefficient_GetACoef)

    def SetBCoef(self, B):
        r"""SetBCoef(VectorRotProductCoefficient self, VectorCoefficient B)"""
        val = _coefficient.VectorRotProductCoefficient_SetBCoef(self, B)

        self._linkB = B


        return val


    def GetBCoef(self):
        r"""GetBCoef(VectorRotProductCoefficient self) -> VectorCoefficient"""
        return _coefficient.VectorRotProductCoefficient_GetBCoef(self)
    GetBCoef = _swig_new_instance_method(_coefficient.VectorRotProductCoefficient_GetBCoef)

    def Eval(self, T, ip):
        r"""Eval(VectorRotProductCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.VectorRotProductCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.VectorRotProductCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_VectorRotProductCoefficient

# Register VectorRotProductCoefficient in _coefficient:
_coefficient.VectorRotProductCoefficient_swigregister(VectorRotProductCoefficient)
class DeterminantCoefficient(Coefficient):
    r"""Proxy of C++ mfem::DeterminantCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, A):
        r"""__init__(DeterminantCoefficient self, MatrixCoefficient A) -> DeterminantCoefficient"""
        _coefficient.DeterminantCoefficient_swiginit(self, _coefficient.new_DeterminantCoefficient(A))

        self.linkA = A




    def SetTime(self, t):
        r"""SetTime(DeterminantCoefficient self, mfem::real_t t)"""
        return _coefficient.DeterminantCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.DeterminantCoefficient_SetTime)

    def SetACoef(self, A):
        r"""SetACoef(DeterminantCoefficient self, MatrixCoefficient A)"""
        val = _coefficient.DeterminantCoefficient_SetACoef(self, A)

        self.linkA = A


        return val


    def GetACoef(self):
        r"""GetACoef(DeterminantCoefficient self) -> MatrixCoefficient"""
        return _coefficient.DeterminantCoefficient_GetACoef(self)
    GetACoef = _swig_new_instance_method(_coefficient.DeterminantCoefficient_GetACoef)

    def Eval(self, T, ip):
        r"""Eval(DeterminantCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.DeterminantCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.DeterminantCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_DeterminantCoefficient

# Register DeterminantCoefficient in _coefficient:
_coefficient.DeterminantCoefficient_swigregister(DeterminantCoefficient)
class TraceCoefficient(Coefficient):
    r"""Proxy of C++ mfem::TraceCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, A):
        r"""__init__(TraceCoefficient self, MatrixCoefficient A) -> TraceCoefficient"""
        _coefficient.TraceCoefficient_swiginit(self, _coefficient.new_TraceCoefficient(A))

    def SetTime(self, t):
        r"""SetTime(TraceCoefficient self, mfem::real_t t)"""
        return _coefficient.TraceCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.TraceCoefficient_SetTime)

    def SetACoef(self, A):
        r"""SetACoef(TraceCoefficient self, MatrixCoefficient A)"""
        return _coefficient.TraceCoefficient_SetACoef(self, A)
    SetACoef = _swig_new_instance_method(_coefficient.TraceCoefficient_SetACoef)

    def GetACoef(self):
        r"""GetACoef(TraceCoefficient self) -> MatrixCoefficient"""
        return _coefficient.TraceCoefficient_GetACoef(self)
    GetACoef = _swig_new_instance_method(_coefficient.TraceCoefficient_GetACoef)

    def Eval(self, T, ip):
        r"""Eval(TraceCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.TraceCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.TraceCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_TraceCoefficient

# Register TraceCoefficient in _coefficient:
_coefficient.TraceCoefficient_swigregister(TraceCoefficient)
class VectorSumCoefficient(VectorCoefficient):
    r"""Proxy of C++ mfem::VectorSumCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(VectorSumCoefficient self, int dim) -> VectorSumCoefficient
        __init__(VectorSumCoefficient self, VectorCoefficient A, VectorCoefficient B, mfem::real_t alpha_=1.0, mfem::real_t beta_=1.0) -> VectorSumCoefficient
        __init__(VectorSumCoefficient self, VectorCoefficient A_, VectorCoefficient B_, Coefficient alpha_, Coefficient beta_) -> VectorSumCoefficient
        """
        _coefficient.VectorSumCoefficient_swiginit(self, _coefficient.new_VectorSumCoefficient(*args))

        if len(args) > 1:
            self.linkA = args[0]
            self.linkB = args[1]
        if len(args) > 2:
           if isinstance(agrs[2], Coefficient):
              self.linkAlphaCoef = args[2]
        if len(args) > 3:	    
           if isinstance(agrs[3], Coefficient):
              self.linkBetaCoef = args[3]	




    def SetTime(self, t):
        r"""SetTime(VectorSumCoefficient self, mfem::real_t t)"""
        return _coefficient.VectorSumCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.VectorSumCoefficient_SetTime)

    def SetACoef(self, A_):
        r"""SetACoef(VectorSumCoefficient self, VectorCoefficient A_)"""
        val = _coefficient.VectorSumCoefficient_SetACoef(self, A_)

        self.linkA = A_    


        return val


    def GetACoef(self):
        r"""GetACoef(VectorSumCoefficient self) -> VectorCoefficient"""
        return _coefficient.VectorSumCoefficient_GetACoef(self)
    GetACoef = _swig_new_instance_method(_coefficient.VectorSumCoefficient_GetACoef)

    def SetBCoef(self, B_):
        r"""SetBCoef(VectorSumCoefficient self, VectorCoefficient B_)"""
        val = _coefficient.VectorSumCoefficient_SetBCoef(self, B_)

        self.linkB = B_    


        return val


    def GetBCoef(self):
        r"""GetBCoef(VectorSumCoefficient self) -> VectorCoefficient"""
        return _coefficient.VectorSumCoefficient_GetBCoef(self)
    GetBCoef = _swig_new_instance_method(_coefficient.VectorSumCoefficient_GetBCoef)

    def SetAlphaCoef(self, A_):
        r"""SetAlphaCoef(VectorSumCoefficient self, Coefficient A_)"""
        val = _coefficient.VectorSumCoefficient_SetAlphaCoef(self, A_)

        self.linkAlpha = A_    


        return val


    def GetAlphaCoef(self):
        r"""GetAlphaCoef(VectorSumCoefficient self) -> Coefficient"""
        return _coefficient.VectorSumCoefficient_GetAlphaCoef(self)
    GetAlphaCoef = _swig_new_instance_method(_coefficient.VectorSumCoefficient_GetAlphaCoef)

    def SetBetaCoef(self, B_):
        r"""SetBetaCoef(VectorSumCoefficient self, Coefficient B_)"""
        val = _coefficient.VectorSumCoefficient_SetBetaCoef(self, B_)

        self.linkBeta = B_    


        return val


    def GetBetaCoef(self):
        r"""GetBetaCoef(VectorSumCoefficient self) -> Coefficient"""
        return _coefficient.VectorSumCoefficient_GetBetaCoef(self)
    GetBetaCoef = _swig_new_instance_method(_coefficient.VectorSumCoefficient_GetBetaCoef)

    def SetA(self, A_):
        r"""SetA(VectorSumCoefficient self, Vector A_)"""
        return _coefficient.VectorSumCoefficient_SetA(self, A_)
    SetA = _swig_new_instance_method(_coefficient.VectorSumCoefficient_SetA)

    def GetA(self):
        r"""GetA(VectorSumCoefficient self) -> Vector"""
        return _coefficient.VectorSumCoefficient_GetA(self)
    GetA = _swig_new_instance_method(_coefficient.VectorSumCoefficient_GetA)

    def SetB(self, B_):
        r"""SetB(VectorSumCoefficient self, Vector B_)"""
        return _coefficient.VectorSumCoefficient_SetB(self, B_)
    SetB = _swig_new_instance_method(_coefficient.VectorSumCoefficient_SetB)

    def GetB(self):
        r"""GetB(VectorSumCoefficient self) -> Vector"""
        return _coefficient.VectorSumCoefficient_GetB(self)
    GetB = _swig_new_instance_method(_coefficient.VectorSumCoefficient_GetB)

    def SetAlpha(self, alpha_):
        r"""SetAlpha(VectorSumCoefficient self, mfem::real_t alpha_)"""
        return _coefficient.VectorSumCoefficient_SetAlpha(self, alpha_)
    SetAlpha = _swig_new_instance_method(_coefficient.VectorSumCoefficient_SetAlpha)

    def GetAlpha(self):
        r"""GetAlpha(VectorSumCoefficient self) -> mfem::real_t"""
        return _coefficient.VectorSumCoefficient_GetAlpha(self)
    GetAlpha = _swig_new_instance_method(_coefficient.VectorSumCoefficient_GetAlpha)

    def SetBeta(self, beta_):
        r"""SetBeta(VectorSumCoefficient self, mfem::real_t beta_)"""
        return _coefficient.VectorSumCoefficient_SetBeta(self, beta_)
    SetBeta = _swig_new_instance_method(_coefficient.VectorSumCoefficient_SetBeta)

    def GetBeta(self):
        r"""GetBeta(VectorSumCoefficient self) -> mfem::real_t"""
        return _coefficient.VectorSumCoefficient_GetBeta(self)
    GetBeta = _swig_new_instance_method(_coefficient.VectorSumCoefficient_GetBeta)

    def Eval(self, *args):
        r"""
        Eval(VectorSumCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(VectorSumCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        """
        return _coefficient.VectorSumCoefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_coefficient.VectorSumCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_VectorSumCoefficient

# Register VectorSumCoefficient in _coefficient:
_coefficient.VectorSumCoefficient_swigregister(VectorSumCoefficient)
class ScalarVectorProductCoefficient(VectorCoefficient):
    r"""Proxy of C++ mfem::ScalarVectorProductCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ScalarVectorProductCoefficient self, mfem::real_t A, VectorCoefficient B) -> ScalarVectorProductCoefficient
        __init__(ScalarVectorProductCoefficient self, Coefficient A, VectorCoefficient B) -> ScalarVectorProductCoefficient
        """
        _coefficient.ScalarVectorProductCoefficient_swiginit(self, _coefficient.new_ScalarVectorProductCoefficient(*args))

        if isinstance(args[0], Coefficient):
            self._linkA = args[0]
        if isinstance(args[1], VectorCoefficient):    
            self._linkB = args[1]




    def SetTime(self, t):
        r"""SetTime(ScalarVectorProductCoefficient self, mfem::real_t t)"""
        return _coefficient.ScalarVectorProductCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.ScalarVectorProductCoefficient_SetTime)

    def SetAConst(self, A):
        r"""SetAConst(ScalarVectorProductCoefficient self, mfem::real_t A)"""
        return _coefficient.ScalarVectorProductCoefficient_SetAConst(self, A)
    SetAConst = _swig_new_instance_method(_coefficient.ScalarVectorProductCoefficient_SetAConst)

    def GetAConst(self):
        r"""GetAConst(ScalarVectorProductCoefficient self) -> mfem::real_t"""
        return _coefficient.ScalarVectorProductCoefficient_GetAConst(self)
    GetAConst = _swig_new_instance_method(_coefficient.ScalarVectorProductCoefficient_GetAConst)

    def SetACoef(self, A):
        r"""SetACoef(ScalarVectorProductCoefficient self, Coefficient A)"""
        val = _coefficient.ScalarVectorProductCoefficient_SetACoef(self, A)

        self._linkA = A


        return val


    def GetACoef(self):
        r"""GetACoef(ScalarVectorProductCoefficient self) -> Coefficient"""
        return _coefficient.ScalarVectorProductCoefficient_GetACoef(self)
    GetACoef = _swig_new_instance_method(_coefficient.ScalarVectorProductCoefficient_GetACoef)

    def SetBCoef(self, B):
        r"""SetBCoef(ScalarVectorProductCoefficient self, VectorCoefficient B)"""
        val = _coefficient.ScalarVectorProductCoefficient_SetBCoef(self, B)

        self._linkB = B


        return val


    def GetBCoef(self):
        r"""GetBCoef(ScalarVectorProductCoefficient self) -> VectorCoefficient"""
        return _coefficient.ScalarVectorProductCoefficient_GetBCoef(self)
    GetBCoef = _swig_new_instance_method(_coefficient.ScalarVectorProductCoefficient_GetBCoef)

    def Eval(self, *args):
        r"""
        Eval(ScalarVectorProductCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(ScalarVectorProductCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        """
        return _coefficient.ScalarVectorProductCoefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_coefficient.ScalarVectorProductCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_ScalarVectorProductCoefficient

# Register ScalarVectorProductCoefficient in _coefficient:
_coefficient.ScalarVectorProductCoefficient_swigregister(ScalarVectorProductCoefficient)
class NormalizedVectorCoefficient(VectorCoefficient):
    r"""Proxy of C++ mfem::NormalizedVectorCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, A, tol=1e-6):
        r"""__init__(NormalizedVectorCoefficient self, VectorCoefficient A, mfem::real_t tol=1e-6) -> NormalizedVectorCoefficient"""
        _coefficient.NormalizedVectorCoefficient_swiginit(self, _coefficient.new_NormalizedVectorCoefficient(A, tol))

        self._linkA = A




    def SetTime(self, t):
        r"""SetTime(NormalizedVectorCoefficient self, mfem::real_t t)"""
        return _coefficient.NormalizedVectorCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.NormalizedVectorCoefficient_SetTime)

    def SetACoef(self, A):
        r"""SetACoef(NormalizedVectorCoefficient self, VectorCoefficient A)"""
        val = _coefficient.NormalizedVectorCoefficient_SetACoef(self, A)

        self._linkA = A


        return val


    def GetACoef(self):
        r"""GetACoef(NormalizedVectorCoefficient self) -> VectorCoefficient"""
        return _coefficient.NormalizedVectorCoefficient_GetACoef(self)
    GetACoef = _swig_new_instance_method(_coefficient.NormalizedVectorCoefficient_GetACoef)

    def Eval(self, *args):
        r"""
        Eval(NormalizedVectorCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(NormalizedVectorCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        """
        return _coefficient.NormalizedVectorCoefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_coefficient.NormalizedVectorCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_NormalizedVectorCoefficient

# Register NormalizedVectorCoefficient in _coefficient:
_coefficient.NormalizedVectorCoefficient_swigregister(NormalizedVectorCoefficient)
class VectorCrossProductCoefficient(VectorCoefficient):
    r"""Proxy of C++ mfem::VectorCrossProductCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, A, B):
        r"""__init__(VectorCrossProductCoefficient self, VectorCoefficient A, VectorCoefficient B) -> VectorCrossProductCoefficient"""
        _coefficient.VectorCrossProductCoefficient_swiginit(self, _coefficient.new_VectorCrossProductCoefficient(A, B))

        self._linkA = A
        self._linkB = B




    def SetTime(self, t):
        r"""SetTime(VectorCrossProductCoefficient self, mfem::real_t t)"""
        return _coefficient.VectorCrossProductCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.VectorCrossProductCoefficient_SetTime)

    def SetACoef(self, A):
        r"""SetACoef(VectorCrossProductCoefficient self, VectorCoefficient A)"""
        val = _coefficient.VectorCrossProductCoefficient_SetACoef(self, A)

        self._linkA = A


        return val


    def GetACoef(self):
        r"""GetACoef(VectorCrossProductCoefficient self) -> VectorCoefficient"""
        return _coefficient.VectorCrossProductCoefficient_GetACoef(self)
    GetACoef = _swig_new_instance_method(_coefficient.VectorCrossProductCoefficient_GetACoef)

    def SetBCoef(self, B):
        r"""SetBCoef(VectorCrossProductCoefficient self, VectorCoefficient B)"""
        val = _coefficient.VectorCrossProductCoefficient_SetBCoef(self, B)

        self._linkB = B


        return val


    def GetBCoef(self):
        r"""GetBCoef(VectorCrossProductCoefficient self) -> VectorCoefficient"""
        return _coefficient.VectorCrossProductCoefficient_GetBCoef(self)
    GetBCoef = _swig_new_instance_method(_coefficient.VectorCrossProductCoefficient_GetBCoef)

    def Eval(self, *args):
        r"""
        Eval(VectorCrossProductCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(VectorCrossProductCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        """
        return _coefficient.VectorCrossProductCoefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_coefficient.VectorCrossProductCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_VectorCrossProductCoefficient

# Register VectorCrossProductCoefficient in _coefficient:
_coefficient.VectorCrossProductCoefficient_swigregister(VectorCrossProductCoefficient)
class MatrixVectorProductCoefficient(VectorCoefficient):
    r"""Proxy of C++ mfem::MatrixVectorProductCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, A, B):
        r"""__init__(MatrixVectorProductCoefficient self, MatrixCoefficient A, VectorCoefficient B) -> MatrixVectorProductCoefficient"""
        _coefficient.MatrixVectorProductCoefficient_swiginit(self, _coefficient.new_MatrixVectorProductCoefficient(A, B))

        self._linkA = A
        self._linkB = B




    def SetTime(self, t):
        r"""SetTime(MatrixVectorProductCoefficient self, mfem::real_t t)"""
        return _coefficient.MatrixVectorProductCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.MatrixVectorProductCoefficient_SetTime)

    def SetACoef(self, A):
        r"""SetACoef(MatrixVectorProductCoefficient self, MatrixCoefficient A)"""
        val = _coefficient.MatrixVectorProductCoefficient_SetACoef(self, A)

        self._linkA = A


        return val


    def GetACoef(self):
        r"""GetACoef(MatrixVectorProductCoefficient self) -> MatrixCoefficient"""
        return _coefficient.MatrixVectorProductCoefficient_GetACoef(self)
    GetACoef = _swig_new_instance_method(_coefficient.MatrixVectorProductCoefficient_GetACoef)

    def SetBCoef(self, B):
        r"""SetBCoef(MatrixVectorProductCoefficient self, VectorCoefficient B)"""
        val = _coefficient.MatrixVectorProductCoefficient_SetBCoef(self, B)

        self._linkB = B


        return val


    def GetBCoef(self):
        r"""GetBCoef(MatrixVectorProductCoefficient self) -> VectorCoefficient"""
        return _coefficient.MatrixVectorProductCoefficient_GetBCoef(self)
    GetBCoef = _swig_new_instance_method(_coefficient.MatrixVectorProductCoefficient_GetBCoef)

    def Eval(self, *args):
        r"""
        Eval(MatrixVectorProductCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(MatrixVectorProductCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        """
        return _coefficient.MatrixVectorProductCoefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_coefficient.MatrixVectorProductCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_MatrixVectorProductCoefficient

# Register MatrixVectorProductCoefficient in _coefficient:
_coefficient.MatrixVectorProductCoefficient_swigregister(MatrixVectorProductCoefficient)
class IdentityMatrixCoefficient(MatrixCoefficient):
    r"""Proxy of C++ mfem::IdentityMatrixCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d):
        r"""__init__(IdentityMatrixCoefficient self, int d) -> IdentityMatrixCoefficient"""
        _coefficient.IdentityMatrixCoefficient_swiginit(self, _coefficient.new_IdentityMatrixCoefficient(d))

    def Eval(self, M, T, ip):
        r"""Eval(IdentityMatrixCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.IdentityMatrixCoefficient_Eval(self, M, T, ip)
    Eval = _swig_new_instance_method(_coefficient.IdentityMatrixCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_IdentityMatrixCoefficient

# Register IdentityMatrixCoefficient in _coefficient:
_coefficient.IdentityMatrixCoefficient_swigregister(IdentityMatrixCoefficient)
class MatrixSumCoefficient(MatrixCoefficient):
    r"""Proxy of C++ mfem::MatrixSumCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, A, B, alpha_=1.0, beta_=1.0):
        r"""__init__(MatrixSumCoefficient self, MatrixCoefficient A, MatrixCoefficient B, mfem::real_t alpha_=1.0, mfem::real_t beta_=1.0) -> MatrixSumCoefficient"""
        _coefficient.MatrixSumCoefficient_swiginit(self, _coefficient.new_MatrixSumCoefficient(A, B, alpha_, beta_))

        self._linkA = A
        self._linkB = B




    def SetTime(self, t):
        r"""SetTime(MatrixSumCoefficient self, mfem::real_t t)"""
        return _coefficient.MatrixSumCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.MatrixSumCoefficient_SetTime)

    def SetACoef(self, A):
        r"""SetACoef(MatrixSumCoefficient self, MatrixCoefficient A)"""
        val = _coefficient.MatrixSumCoefficient_SetACoef(self, A)

        self._linkA = A


        return val


    def GetACoef(self):
        r"""GetACoef(MatrixSumCoefficient self) -> MatrixCoefficient"""
        return _coefficient.MatrixSumCoefficient_GetACoef(self)
    GetACoef = _swig_new_instance_method(_coefficient.MatrixSumCoefficient_GetACoef)

    def SetBCoef(self, B):
        r"""SetBCoef(MatrixSumCoefficient self, MatrixCoefficient B)"""
        val = _coefficient.MatrixSumCoefficient_SetBCoef(self, B)

        self._linkB = B


        return val


    def GetBCoef(self):
        r"""GetBCoef(MatrixSumCoefficient self) -> MatrixCoefficient"""
        return _coefficient.MatrixSumCoefficient_GetBCoef(self)
    GetBCoef = _swig_new_instance_method(_coefficient.MatrixSumCoefficient_GetBCoef)

    def SetAlpha(self, alpha_):
        r"""SetAlpha(MatrixSumCoefficient self, mfem::real_t alpha_)"""
        return _coefficient.MatrixSumCoefficient_SetAlpha(self, alpha_)
    SetAlpha = _swig_new_instance_method(_coefficient.MatrixSumCoefficient_SetAlpha)

    def GetAlpha(self):
        r"""GetAlpha(MatrixSumCoefficient self) -> mfem::real_t"""
        return _coefficient.MatrixSumCoefficient_GetAlpha(self)
    GetAlpha = _swig_new_instance_method(_coefficient.MatrixSumCoefficient_GetAlpha)

    def SetBeta(self, beta_):
        r"""SetBeta(MatrixSumCoefficient self, mfem::real_t beta_)"""
        return _coefficient.MatrixSumCoefficient_SetBeta(self, beta_)
    SetBeta = _swig_new_instance_method(_coefficient.MatrixSumCoefficient_SetBeta)

    def GetBeta(self):
        r"""GetBeta(MatrixSumCoefficient self) -> mfem::real_t"""
        return _coefficient.MatrixSumCoefficient_GetBeta(self)
    GetBeta = _swig_new_instance_method(_coefficient.MatrixSumCoefficient_GetBeta)

    def Eval(self, M, T, ip):
        r"""Eval(MatrixSumCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.MatrixSumCoefficient_Eval(self, M, T, ip)
    Eval = _swig_new_instance_method(_coefficient.MatrixSumCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_MatrixSumCoefficient

# Register MatrixSumCoefficient in _coefficient:
_coefficient.MatrixSumCoefficient_swigregister(MatrixSumCoefficient)
class MatrixProductCoefficient(MatrixCoefficient):
    r"""Proxy of C++ mfem::MatrixProductCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, A, B):
        r"""__init__(MatrixProductCoefficient self, MatrixCoefficient A, MatrixCoefficient B) -> MatrixProductCoefficient"""
        _coefficient.MatrixProductCoefficient_swiginit(self, _coefficient.new_MatrixProductCoefficient(A, B))

        self._linkA = A
        self._linkB = B




    def SetACoef(self, A):
        r"""SetACoef(MatrixProductCoefficient self, MatrixCoefficient A)"""
        val = _coefficient.MatrixProductCoefficient_SetACoef(self, A)

        self._linkA = A


        return val


    def GetACoef(self):
        r"""GetACoef(MatrixProductCoefficient self) -> MatrixCoefficient"""
        return _coefficient.MatrixProductCoefficient_GetACoef(self)
    GetACoef = _swig_new_instance_method(_coefficient.MatrixProductCoefficient_GetACoef)

    def SetBCoef(self, B):
        r"""SetBCoef(MatrixProductCoefficient self, MatrixCoefficient B)"""
        val = _coefficient.MatrixProductCoefficient_SetBCoef(self, B)

        self._linkB = B


        return val


    def GetBCoef(self):
        r"""GetBCoef(MatrixProductCoefficient self) -> MatrixCoefficient"""
        return _coefficient.MatrixProductCoefficient_GetBCoef(self)
    GetBCoef = _swig_new_instance_method(_coefficient.MatrixProductCoefficient_GetBCoef)

    def Eval(self, M, T, ip):
        r"""Eval(MatrixProductCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.MatrixProductCoefficient_Eval(self, M, T, ip)
    Eval = _swig_new_instance_method(_coefficient.MatrixProductCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_MatrixProductCoefficient

# Register MatrixProductCoefficient in _coefficient:
_coefficient.MatrixProductCoefficient_swigregister(MatrixProductCoefficient)
class ScalarMatrixProductCoefficient(MatrixCoefficient):
    r"""Proxy of C++ mfem::ScalarMatrixProductCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ScalarMatrixProductCoefficient self, mfem::real_t A, MatrixCoefficient B) -> ScalarMatrixProductCoefficient
        __init__(ScalarMatrixProductCoefficient self, Coefficient A, MatrixCoefficient B) -> ScalarMatrixProductCoefficient
        """
        _coefficient.ScalarMatrixProductCoefficient_swiginit(self, _coefficient.new_ScalarMatrixProductCoefficient(*args))

        if isinstance(args[0], Coefficient):
            self._linkA = args[0]
        if isinstance(args[1], MatrixCoefficient):    
            self._linkB = args[1]




    def SetTime(self, t):
        r"""SetTime(ScalarMatrixProductCoefficient self, mfem::real_t t)"""
        return _coefficient.ScalarMatrixProductCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.ScalarMatrixProductCoefficient_SetTime)

    def SetAConst(self, A):
        r"""SetAConst(ScalarMatrixProductCoefficient self, mfem::real_t A)"""
        return _coefficient.ScalarMatrixProductCoefficient_SetAConst(self, A)
    SetAConst = _swig_new_instance_method(_coefficient.ScalarMatrixProductCoefficient_SetAConst)

    def GetAConst(self):
        r"""GetAConst(ScalarMatrixProductCoefficient self) -> mfem::real_t"""
        return _coefficient.ScalarMatrixProductCoefficient_GetAConst(self)
    GetAConst = _swig_new_instance_method(_coefficient.ScalarMatrixProductCoefficient_GetAConst)

    def SetACoef(self, A):
        r"""SetACoef(ScalarMatrixProductCoefficient self, Coefficient A)"""
        val = _coefficient.ScalarMatrixProductCoefficient_SetACoef(self, A)

        self._linkA = A


        return val


    def GetACoef(self):
        r"""GetACoef(ScalarMatrixProductCoefficient self) -> Coefficient"""
        return _coefficient.ScalarMatrixProductCoefficient_GetACoef(self)
    GetACoef = _swig_new_instance_method(_coefficient.ScalarMatrixProductCoefficient_GetACoef)

    def SetBCoef(self, B):
        r"""SetBCoef(ScalarMatrixProductCoefficient self, MatrixCoefficient B)"""
        val = _coefficient.ScalarMatrixProductCoefficient_SetBCoef(self, B)

        self._linkB = B


        return val


    def GetBCoef(self):
        r"""GetBCoef(ScalarMatrixProductCoefficient self) -> MatrixCoefficient"""
        return _coefficient.ScalarMatrixProductCoefficient_GetBCoef(self)
    GetBCoef = _swig_new_instance_method(_coefficient.ScalarMatrixProductCoefficient_GetBCoef)

    def Eval(self, M, T, ip):
        r"""Eval(ScalarMatrixProductCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.ScalarMatrixProductCoefficient_Eval(self, M, T, ip)
    Eval = _swig_new_instance_method(_coefficient.ScalarMatrixProductCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_ScalarMatrixProductCoefficient

# Register ScalarMatrixProductCoefficient in _coefficient:
_coefficient.ScalarMatrixProductCoefficient_swigregister(ScalarMatrixProductCoefficient)
class TransposeMatrixCoefficient(MatrixCoefficient):
    r"""Proxy of C++ mfem::TransposeMatrixCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, A):
        r"""__init__(TransposeMatrixCoefficient self, MatrixCoefficient A) -> TransposeMatrixCoefficient"""
        _coefficient.TransposeMatrixCoefficient_swiginit(self, _coefficient.new_TransposeMatrixCoefficient(A))

        self._link = A




    def SetTime(self, t):
        r"""SetTime(TransposeMatrixCoefficient self, mfem::real_t t)"""
        return _coefficient.TransposeMatrixCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.TransposeMatrixCoefficient_SetTime)

    def SetACoef(self, A):
        r"""SetACoef(TransposeMatrixCoefficient self, MatrixCoefficient A)"""
        val = _coefficient.TransposeMatrixCoefficient_SetACoef(self, A)

        self._link = A  


        return val


    def GetACoef(self):
        r"""GetACoef(TransposeMatrixCoefficient self) -> MatrixCoefficient"""
        return _coefficient.TransposeMatrixCoefficient_GetACoef(self)
    GetACoef = _swig_new_instance_method(_coefficient.TransposeMatrixCoefficient_GetACoef)

    def Eval(self, M, T, ip):
        r"""Eval(TransposeMatrixCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.TransposeMatrixCoefficient_Eval(self, M, T, ip)
    Eval = _swig_new_instance_method(_coefficient.TransposeMatrixCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_TransposeMatrixCoefficient

# Register TransposeMatrixCoefficient in _coefficient:
_coefficient.TransposeMatrixCoefficient_swigregister(TransposeMatrixCoefficient)
class InverseMatrixCoefficient(MatrixCoefficient):
    r"""Proxy of C++ mfem::InverseMatrixCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, A):
        r"""__init__(InverseMatrixCoefficient self, MatrixCoefficient A) -> InverseMatrixCoefficient"""
        _coefficient.InverseMatrixCoefficient_swiginit(self, _coefficient.new_InverseMatrixCoefficient(A))

        self._link = A




    def SetTime(self, t):
        r"""SetTime(InverseMatrixCoefficient self, mfem::real_t t)"""
        return _coefficient.InverseMatrixCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.InverseMatrixCoefficient_SetTime)

    def SetACoef(self, A):
        r"""SetACoef(InverseMatrixCoefficient self, MatrixCoefficient A)"""
        val = _coefficient.InverseMatrixCoefficient_SetACoef(self, A)

        self._link = A


        return val


    def GetACoef(self):
        r"""GetACoef(InverseMatrixCoefficient self) -> MatrixCoefficient"""
        return _coefficient.InverseMatrixCoefficient_GetACoef(self)
    GetACoef = _swig_new_instance_method(_coefficient.InverseMatrixCoefficient_GetACoef)

    def Eval(self, M, T, ip):
        r"""Eval(InverseMatrixCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.InverseMatrixCoefficient_Eval(self, M, T, ip)
    Eval = _swig_new_instance_method(_coefficient.InverseMatrixCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_InverseMatrixCoefficient

# Register InverseMatrixCoefficient in _coefficient:
_coefficient.InverseMatrixCoefficient_swigregister(InverseMatrixCoefficient)
class ExponentialMatrixCoefficient(MatrixCoefficient):
    r"""Proxy of C++ mfem::ExponentialMatrixCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, A):
        r"""__init__(ExponentialMatrixCoefficient self, MatrixCoefficient A) -> ExponentialMatrixCoefficient"""
        _coefficient.ExponentialMatrixCoefficient_swiginit(self, _coefficient.new_ExponentialMatrixCoefficient(A))

    def SetTime(self, t):
        r"""SetTime(ExponentialMatrixCoefficient self, mfem::real_t t)"""
        return _coefficient.ExponentialMatrixCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.ExponentialMatrixCoefficient_SetTime)

    def SetACoef(self, A):
        r"""SetACoef(ExponentialMatrixCoefficient self, MatrixCoefficient A)"""
        return _coefficient.ExponentialMatrixCoefficient_SetACoef(self, A)
    SetACoef = _swig_new_instance_method(_coefficient.ExponentialMatrixCoefficient_SetACoef)

    def GetACoef(self):
        r"""GetACoef(ExponentialMatrixCoefficient self) -> MatrixCoefficient"""
        return _coefficient.ExponentialMatrixCoefficient_GetACoef(self)
    GetACoef = _swig_new_instance_method(_coefficient.ExponentialMatrixCoefficient_GetACoef)

    def Eval(self, M, T, ip):
        r"""Eval(ExponentialMatrixCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.ExponentialMatrixCoefficient_Eval(self, M, T, ip)
    Eval = _swig_new_instance_method(_coefficient.ExponentialMatrixCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_ExponentialMatrixCoefficient

# Register ExponentialMatrixCoefficient in _coefficient:
_coefficient.ExponentialMatrixCoefficient_swigregister(ExponentialMatrixCoefficient)
class OuterProductCoefficient(MatrixCoefficient):
    r"""Proxy of C++ mfem::OuterProductCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, A, B):
        r"""__init__(OuterProductCoefficient self, VectorCoefficient A, VectorCoefficient B) -> OuterProductCoefficient"""
        _coefficient.OuterProductCoefficient_swiginit(self, _coefficient.new_OuterProductCoefficient(A, B))

        self._linkA = A
        self._linkB = B




    def SetTime(self, t):
        r"""SetTime(OuterProductCoefficient self, mfem::real_t t)"""
        return _coefficient.OuterProductCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.OuterProductCoefficient_SetTime)

    def SetACoef(self, A):
        r"""SetACoef(OuterProductCoefficient self, VectorCoefficient A)"""
        val = _coefficient.OuterProductCoefficient_SetACoef(self, A)

        self._linkA = A


        return val


    def GetACoef(self):
        r"""GetACoef(OuterProductCoefficient self) -> VectorCoefficient"""
        return _coefficient.OuterProductCoefficient_GetACoef(self)
    GetACoef = _swig_new_instance_method(_coefficient.OuterProductCoefficient_GetACoef)

    def SetBCoef(self, B):
        r"""SetBCoef(OuterProductCoefficient self, VectorCoefficient B)"""
        val = _coefficient.OuterProductCoefficient_SetBCoef(self, B)

        self._linkB = B


        return val


    def GetBCoef(self):
        r"""GetBCoef(OuterProductCoefficient self) -> VectorCoefficient"""
        return _coefficient.OuterProductCoefficient_GetBCoef(self)
    GetBCoef = _swig_new_instance_method(_coefficient.OuterProductCoefficient_GetBCoef)

    def Eval(self, M, T, ip):
        r"""Eval(OuterProductCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.OuterProductCoefficient_Eval(self, M, T, ip)
    Eval = _swig_new_instance_method(_coefficient.OuterProductCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_OuterProductCoefficient

# Register OuterProductCoefficient in _coefficient:
_coefficient.OuterProductCoefficient_swigregister(OuterProductCoefficient)
class CrossCrossCoefficient(MatrixCoefficient):
    r"""Proxy of C++ mfem::CrossCrossCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CrossCrossCoefficient self, mfem::real_t A, VectorCoefficient K) -> CrossCrossCoefficient
        __init__(CrossCrossCoefficient self, Coefficient A, VectorCoefficient K) -> CrossCrossCoefficient
        """
        _coefficient.CrossCrossCoefficient_swiginit(self, _coefficient.new_CrossCrossCoefficient(*args))

        if isinstance(args[0], Coefficient):
            self._linkA = args[0]
        if isinstance(args[1], VectorCoefficient):    
            self._linkK = args[1]




    def SetTime(self, t):
        r"""SetTime(CrossCrossCoefficient self, mfem::real_t t)"""
        return _coefficient.CrossCrossCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.CrossCrossCoefficient_SetTime)

    def SetAConst(self, A):
        r"""SetAConst(CrossCrossCoefficient self, mfem::real_t A)"""
        return _coefficient.CrossCrossCoefficient_SetAConst(self, A)
    SetAConst = _swig_new_instance_method(_coefficient.CrossCrossCoefficient_SetAConst)

    def GetAConst(self):
        r"""GetAConst(CrossCrossCoefficient self) -> mfem::real_t"""
        return _coefficient.CrossCrossCoefficient_GetAConst(self)
    GetAConst = _swig_new_instance_method(_coefficient.CrossCrossCoefficient_GetAConst)

    def SetACoef(self, A):
        r"""SetACoef(CrossCrossCoefficient self, Coefficient A)"""
        val = _coefficient.CrossCrossCoefficient_SetACoef(self, A)

        self._linkA = A


        return val


    def GetACoef(self):
        r"""GetACoef(CrossCrossCoefficient self) -> Coefficient"""
        return _coefficient.CrossCrossCoefficient_GetACoef(self)
    GetACoef = _swig_new_instance_method(_coefficient.CrossCrossCoefficient_GetACoef)

    def SetKCoef(self, K):
        r"""SetKCoef(CrossCrossCoefficient self, VectorCoefficient K)"""
        val = _coefficient.CrossCrossCoefficient_SetKCoef(self, K)

        self._linkK = K


        return val


    def GetKCoef(self):
        r"""GetKCoef(CrossCrossCoefficient self) -> VectorCoefficient"""
        return _coefficient.CrossCrossCoefficient_GetKCoef(self)
    GetKCoef = _swig_new_instance_method(_coefficient.CrossCrossCoefficient_GetKCoef)

    def Eval(self, M, T, ip):
        r"""Eval(CrossCrossCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.CrossCrossCoefficient_Eval(self, M, T, ip)
    Eval = _swig_new_instance_method(_coefficient.CrossCrossCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_CrossCrossCoefficient

# Register CrossCrossCoefficient in _coefficient:
_coefficient.CrossCrossCoefficient_swigregister(CrossCrossCoefficient)
class VectorQuadratureFunctionCoefficient(VectorCoefficient):
    r"""Proxy of C++ mfem::VectorQuadratureFunctionCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, qf):
        r"""__init__(VectorQuadratureFunctionCoefficient self, mfem::QuadratureFunction const & qf) -> VectorQuadratureFunctionCoefficient"""
        _coefficient.VectorQuadratureFunctionCoefficient_swiginit(self, _coefficient.new_VectorQuadratureFunctionCoefficient(qf))

        self._linkQF = qf




    def SetComponent(self, index_, length_):
        r"""SetComponent(VectorQuadratureFunctionCoefficient self, int index_, int length_)"""
        return _coefficient.VectorQuadratureFunctionCoefficient_SetComponent(self, index_, length_)
    SetComponent = _swig_new_instance_method(_coefficient.VectorQuadratureFunctionCoefficient_SetComponent)

    def GetQuadFunction(self):
        r"""GetQuadFunction(VectorQuadratureFunctionCoefficient self) -> mfem::QuadratureFunction const &"""
        return _coefficient.VectorQuadratureFunctionCoefficient_GetQuadFunction(self)
    GetQuadFunction = _swig_new_instance_method(_coefficient.VectorQuadratureFunctionCoefficient_GetQuadFunction)

    def Eval(self, *args):
        r"""
        Eval(VectorQuadratureFunctionCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        Eval(VectorQuadratureFunctionCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        """
        return _coefficient.VectorQuadratureFunctionCoefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_coefficient.VectorQuadratureFunctionCoefficient_Eval)

    def Project(self, qf):
        r"""Project(VectorQuadratureFunctionCoefficient self, mfem::QuadratureFunction & qf)"""
        return _coefficient.VectorQuadratureFunctionCoefficient_Project(self, qf)
    Project = _swig_new_instance_method(_coefficient.VectorQuadratureFunctionCoefficient_Project)
    __swig_destroy__ = _coefficient.delete_VectorQuadratureFunctionCoefficient

# Register VectorQuadratureFunctionCoefficient in _coefficient:
_coefficient.VectorQuadratureFunctionCoefficient_swigregister(VectorQuadratureFunctionCoefficient)
class QuadratureFunctionCoefficient(Coefficient):
    r"""Proxy of C++ mfem::QuadratureFunctionCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, qf):
        r"""__init__(QuadratureFunctionCoefficient self, mfem::QuadratureFunction const & qf) -> QuadratureFunctionCoefficient"""
        _coefficient.QuadratureFunctionCoefficient_swiginit(self, _coefficient.new_QuadratureFunctionCoefficient(qf))

        self._linkQF = qf




    def GetQuadFunction(self):
        r"""GetQuadFunction(QuadratureFunctionCoefficient self) -> mfem::QuadratureFunction const &"""
        return _coefficient.QuadratureFunctionCoefficient_GetQuadFunction(self)
    GetQuadFunction = _swig_new_instance_method(_coefficient.QuadratureFunctionCoefficient_GetQuadFunction)

    def Eval(self, T, ip):
        r"""Eval(QuadratureFunctionCoefficient self, ElementTransformation T, IntegrationPoint ip) -> mfem::real_t"""
        return _coefficient.QuadratureFunctionCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.QuadratureFunctionCoefficient_Eval)

    def Project(self, qf):
        r"""Project(QuadratureFunctionCoefficient self, mfem::QuadratureFunction & qf)"""
        return _coefficient.QuadratureFunctionCoefficient_Project(self, qf)
    Project = _swig_new_instance_method(_coefficient.QuadratureFunctionCoefficient_Project)
    __swig_destroy__ = _coefficient.delete_QuadratureFunctionCoefficient

# Register QuadratureFunctionCoefficient in _coefficient:
_coefficient.QuadratureFunctionCoefficient_swigregister(QuadratureFunctionCoefficient)
CoefficientStorage_FULL = _coefficient.CoefficientStorage_FULL

CoefficientStorage_CONSTANTS = _coefficient.CoefficientStorage_CONSTANTS

CoefficientStorage_SYMMETRIC = _coefficient.CoefficientStorage_SYMMETRIC

CoefficientStorage_COMPRESSED = _coefficient.CoefficientStorage_COMPRESSED


def __or__(a, b):
    r"""__or__(mfem::CoefficientStorage a, mfem::CoefficientStorage b) -> mfem::CoefficientStorage"""
    return _coefficient.__or__(a, b)
__or__ = _coefficient.__or__

def __and__(a, b):
    r"""__and__(mfem::CoefficientStorage a, mfem::CoefficientStorage b) -> int"""
    return _coefficient.__and__(a, b)
__and__ = _coefficient.__and__
class CoefficientVector(mfem._ser.vector.Vector):
    r"""Proxy of C++ mfem::CoefficientVector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CoefficientVector self, mfem::QuadratureSpaceBase & qs_, mfem::CoefficientStorage storage_=FULL) -> CoefficientVector
        __init__(CoefficientVector self, Coefficient coeff, mfem::QuadratureSpaceBase & qs, mfem::CoefficientStorage storage_=FULL) -> CoefficientVector
        __init__(CoefficientVector self, Coefficient coeff, mfem::QuadratureSpaceBase & qs, mfem::CoefficientStorage storage_=FULL) -> CoefficientVector
        __init__(CoefficientVector self, VectorCoefficient coeff, mfem::QuadratureSpaceBase & qs, mfem::CoefficientStorage storage_=FULL) -> CoefficientVector
        __init__(CoefficientVector self, MatrixCoefficient coeff, mfem::QuadratureSpaceBase & qs, mfem::CoefficientStorage storage_=FULL) -> CoefficientVector
        """
        _coefficient.CoefficientVector_swiginit(self, _coefficient.new_CoefficientVector(*args))

    def Project(self, *args):
        r"""
        Project(CoefficientVector self, Coefficient coeff)
        Project(CoefficientVector self, VectorCoefficient coeff)
        Project(CoefficientVector self, MatrixCoefficient coeff, bool transpose=False)
        """
        return _coefficient.CoefficientVector_Project(self, *args)
    Project = _swig_new_instance_method(_coefficient.CoefficientVector_Project)

    def ProjectTranspose(self, coeff):
        r"""ProjectTranspose(CoefficientVector self, MatrixCoefficient coeff)"""
        return _coefficient.CoefficientVector_ProjectTranspose(self, coeff)
    ProjectTranspose = _swig_new_instance_method(_coefficient.CoefficientVector_ProjectTranspose)

    def MakeRef(self, qf_):
        r"""MakeRef(CoefficientVector self, mfem::QuadratureFunction const & qf_)"""
        return _coefficient.CoefficientVector_MakeRef(self, qf_)
    MakeRef = _swig_new_instance_method(_coefficient.CoefficientVector_MakeRef)

    def SetConstant(self, *args):
        r"""
        SetConstant(CoefficientVector self, mfem::real_t constant)
        SetConstant(CoefficientVector self, Vector constant)
        SetConstant(CoefficientVector self, DenseMatrix constant)
        SetConstant(CoefficientVector self, DenseSymmetricMatrix constant)
        """
        return _coefficient.CoefficientVector_SetConstant(self, *args)
    SetConstant = _swig_new_instance_method(_coefficient.CoefficientVector_SetConstant)

    def GetVDim(self):
        r"""GetVDim(CoefficientVector self) -> int"""
        return _coefficient.CoefficientVector_GetVDim(self)
    GetVDim = _swig_new_instance_method(_coefficient.CoefficientVector_GetVDim)
    __swig_destroy__ = _coefficient.delete_CoefficientVector

# Register CoefficientVector in _coefficient:
_coefficient.CoefficientVector_swigregister(CoefficientVector)

def ComputeLpNorm(*args):
    r"""
    ComputeLpNorm(mfem::real_t p, Coefficient coeff, mfem::Mesh & mesh, mfem::IntegrationRule const *[] irs) -> mfem::real_t
    ComputeLpNorm(mfem::real_t p, VectorCoefficient coeff, mfem::Mesh & mesh, mfem::IntegrationRule const *[] irs) -> mfem::real_t
    """
    return _coefficient.ComputeLpNorm(*args)
ComputeLpNorm = _coefficient.ComputeLpNorm
class NumbaFunction(object):
    r"""Proxy of C++ NumbaFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(NumbaFunction self, PyObject * input, int sdim) -> NumbaFunction
        __init__(NumbaFunction self, PyObject * input, int sdim, bool td) -> NumbaFunction
        """
        _coefficient.NumbaFunction_swiginit(self, _coefficient.new_NumbaFunction(*args))

    def call0(self, x):
        r"""call0(NumbaFunction self, Vector x) -> double"""
        return _coefficient.NumbaFunction_call0(self, x)
    call0 = _swig_new_instance_method(_coefficient.NumbaFunction_call0)

    def call(self, x):
        r"""call(NumbaFunction self, Vector x) -> double"""
        return _coefficient.NumbaFunction_call(self, x)
    call = _swig_new_instance_method(_coefficient.NumbaFunction_call)

    def call0t(self, x, t):
        r"""call0t(NumbaFunction self, Vector x, double t) -> double"""
        return _coefficient.NumbaFunction_call0t(self, x, t)
    call0t = _swig_new_instance_method(_coefficient.NumbaFunction_call0t)

    def callt(self, x, t):
        r"""callt(NumbaFunction self, Vector x, double t) -> double"""
        return _coefficient.NumbaFunction_callt(self, x, t)
    callt = _swig_new_instance_method(_coefficient.NumbaFunction_callt)

    def GenerateCoefficient(self, use_0=0):
        r"""GenerateCoefficient(NumbaFunction self, int use_0=0) -> FunctionCoefficient"""
        val = _coefficient.NumbaFunction_GenerateCoefficient(self, use_0)

        val._link = self


        return val

    __swig_destroy__ = _coefficient.delete_NumbaFunction

# Register NumbaFunction in _coefficient:
_coefficient.NumbaFunction_swigregister(NumbaFunction)
class VectorNumbaFunction(object):
    r"""Proxy of C++ VectorNumbaFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(VectorNumbaFunction self, PyObject * input, int sdim, int vdim) -> VectorNumbaFunction
        __init__(VectorNumbaFunction self, PyObject * input, int sdim, int vdim, bool td) -> VectorNumbaFunction
        """
        _coefficient.VectorNumbaFunction_swiginit(self, _coefficient.new_VectorNumbaFunction(*args))

    def call(self, x, out):
        r"""call(VectorNumbaFunction self, Vector x, Vector out)"""
        return _coefficient.VectorNumbaFunction_call(self, x, out)
    call = _swig_new_instance_method(_coefficient.VectorNumbaFunction_call)

    def callt(self, x, t, out):
        r"""callt(VectorNumbaFunction self, Vector x, double t, Vector out)"""
        return _coefficient.VectorNumbaFunction_callt(self, x, t, out)
    callt = _swig_new_instance_method(_coefficient.VectorNumbaFunction_callt)

    def call0(self, x, out):
        r"""call0(VectorNumbaFunction self, Vector x, Vector out)"""
        return _coefficient.VectorNumbaFunction_call0(self, x, out)
    call0 = _swig_new_instance_method(_coefficient.VectorNumbaFunction_call0)

    def call0t(self, x, t, out):
        r"""call0t(VectorNumbaFunction self, Vector x, double t, Vector out)"""
        return _coefficient.VectorNumbaFunction_call0t(self, x, t, out)
    call0t = _swig_new_instance_method(_coefficient.VectorNumbaFunction_call0t)

    def GenerateCoefficient(self, use_0=0):
        r"""GenerateCoefficient(VectorNumbaFunction self, int use_0=0) -> VectorFunctionCoefficient"""
        val = _coefficient.VectorNumbaFunction_GenerateCoefficient(self, use_0)

        val._link = self


        return val

    __swig_destroy__ = _coefficient.delete_VectorNumbaFunction

# Register VectorNumbaFunction in _coefficient:
_coefficient.VectorNumbaFunction_swigregister(VectorNumbaFunction)
class MatrixNumbaFunction(object):
    r"""Proxy of C++ MatrixNumbaFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MatrixNumbaFunction self, PyObject * input, int sdim, int vdim) -> MatrixNumbaFunction
        __init__(MatrixNumbaFunction self, PyObject * input, int sdim, int vdim, bool td) -> MatrixNumbaFunction
        """
        _coefficient.MatrixNumbaFunction_swiginit(self, _coefficient.new_MatrixNumbaFunction(*args))

    def call(self, x, out):
        r"""call(MatrixNumbaFunction self, Vector x, DenseMatrix out)"""
        return _coefficient.MatrixNumbaFunction_call(self, x, out)
    call = _swig_new_instance_method(_coefficient.MatrixNumbaFunction_call)

    def callt(self, x, t, out):
        r"""callt(MatrixNumbaFunction self, Vector x, double t, DenseMatrix out)"""
        return _coefficient.MatrixNumbaFunction_callt(self, x, t, out)
    callt = _swig_new_instance_method(_coefficient.MatrixNumbaFunction_callt)

    def call0(self, x, out):
        r"""call0(MatrixNumbaFunction self, Vector x, DenseMatrix out)"""
        return _coefficient.MatrixNumbaFunction_call0(self, x, out)
    call0 = _swig_new_instance_method(_coefficient.MatrixNumbaFunction_call0)

    def call0t(self, x, t, out):
        r"""call0t(MatrixNumbaFunction self, Vector x, double t, DenseMatrix out)"""
        return _coefficient.MatrixNumbaFunction_call0t(self, x, t, out)
    call0t = _swig_new_instance_method(_coefficient.MatrixNumbaFunction_call0t)

    def GenerateCoefficient(self, use_0=0):
        r"""GenerateCoefficient(MatrixNumbaFunction self, int use_0=0) -> MatrixFunctionCoefficient"""
        val = _coefficient.MatrixNumbaFunction_GenerateCoefficient(self, use_0)

        val._link = self


        return val

    __swig_destroy__ = _coefficient.delete_MatrixNumbaFunction

# Register MatrixNumbaFunction in _coefficient:
_coefficient.MatrixNumbaFunction_swigregister(MatrixNumbaFunction)
class ScalarNumbaFunction2(object):
    r"""Proxy of C++ ScalarNumbaFunction2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ScalarNumbaFunction2 self, PyObject * input) -> ScalarNumbaFunction2
        __init__(ScalarNumbaFunction2 self, PyObject * input, bool td) -> ScalarNumbaFunction2
        """
        _coefficient.ScalarNumbaFunction2_swiginit(self, _coefficient.new_ScalarNumbaFunction2(*args))
    __swig_destroy__ = _coefficient.delete_ScalarNumbaFunction2

    def call(self, x):
        r"""call(ScalarNumbaFunction2 self, Vector x) -> double"""
        return _coefficient.ScalarNumbaFunction2_call(self, x)
    call = _swig_new_instance_method(_coefficient.ScalarNumbaFunction2_call)

    def callt(self, x, t):
        r"""callt(ScalarNumbaFunction2 self, Vector x, double t) -> double"""
        return _coefficient.ScalarNumbaFunction2_callt(self, x, t)
    callt = _swig_new_instance_method(_coefficient.ScalarNumbaFunction2_callt)

    def callr(self, x):
        r"""callr(ScalarNumbaFunction2 self, Vector x) -> double"""
        return _coefficient.ScalarNumbaFunction2_callr(self, x)
    callr = _swig_new_instance_method(_coefficient.ScalarNumbaFunction2_callr)

    def calltr(self, x, t):
        r"""calltr(ScalarNumbaFunction2 self, Vector x, double t) -> double"""
        return _coefficient.ScalarNumbaFunction2_calltr(self, x, t)
    calltr = _swig_new_instance_method(_coefficient.ScalarNumbaFunction2_calltr)

    def calli(self, x):
        r"""calli(ScalarNumbaFunction2 self, Vector x) -> double"""
        return _coefficient.ScalarNumbaFunction2_calli(self, x)
    calli = _swig_new_instance_method(_coefficient.ScalarNumbaFunction2_calli)

    def callti(self, x, t):
        r"""callti(ScalarNumbaFunction2 self, Vector x, double t) -> double"""
        return _coefficient.ScalarNumbaFunction2_callti(self, x, t)
    callti = _swig_new_instance_method(_coefficient.ScalarNumbaFunction2_callti)

    def GetScalarImaginary(self):
        r"""GetScalarImaginary(ScalarNumbaFunction2 self) -> double"""
        return _coefficient.ScalarNumbaFunction2_GetScalarImaginary(self)
    GetScalarImaginary = _swig_new_instance_method(_coefficient.ScalarNumbaFunction2_GetScalarImaginary)

    def set_obj1(self, obj1_):
        r"""set_obj1(ScalarNumbaFunction2 self, std::function< double (mfem::Vector const &) > obj1_)"""
        return _coefficient.ScalarNumbaFunction2_set_obj1(self, obj1_)
    set_obj1 = _swig_new_instance_method(_coefficient.ScalarNumbaFunction2_set_obj1)

    def set_obj2(self, obj2_):
        r"""set_obj2(ScalarNumbaFunction2 self, std::function< double (mfem::Vector const &,double) > obj2_)"""
        return _coefficient.ScalarNumbaFunction2_set_obj2(self, obj2_)
    set_obj2 = _swig_new_instance_method(_coefficient.ScalarNumbaFunction2_set_obj2)

    def get_obj1(self):
        r"""get_obj1(ScalarNumbaFunction2 self) -> std::function< double (mfem::Vector const &) >"""
        return _coefficient.ScalarNumbaFunction2_get_obj1(self)
    get_obj1 = _swig_new_instance_method(_coefficient.ScalarNumbaFunction2_get_obj1)

    def get_obj2(self):
        r"""get_obj2(ScalarNumbaFunction2 self) -> std::function< double (mfem::Vector const &,double) >"""
        return _coefficient.ScalarNumbaFunction2_get_obj2(self)
    get_obj2 = _swig_new_instance_method(_coefficient.ScalarNumbaFunction2_get_obj2)

# Register ScalarNumbaFunction2 in _coefficient:
_coefficient.ScalarNumbaFunction2_swigregister(ScalarNumbaFunction2)

def GenerateScalarNumbaCoefficient(numba_func, td, mode):
    r"""GenerateScalarNumbaCoefficient(PyObject * numba_func, bool td, int mode) -> ScalarNumbaCoefficient"""
    return _coefficient.GenerateScalarNumbaCoefficient(numba_func, td, mode)
GenerateScalarNumbaCoefficient = _coefficient.GenerateScalarNumbaCoefficient
class VectorNumbaFunction2(object):
    r"""Proxy of C++ VectorNumbaFunction2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(VectorNumbaFunction2 self, PyObject * input, int vdim) -> VectorNumbaFunction2
        __init__(VectorNumbaFunction2 self, PyObject * input, int vdim, bool td) -> VectorNumbaFunction2
        """
        _coefficient.VectorNumbaFunction2_swiginit(self, _coefficient.new_VectorNumbaFunction2(*args))
    __swig_destroy__ = _coefficient.delete_VectorNumbaFunction2

    def call(self, x, out):
        r"""call(VectorNumbaFunction2 self, Vector x, Vector out)"""
        return _coefficient.VectorNumbaFunction2_call(self, x, out)
    call = _swig_new_instance_method(_coefficient.VectorNumbaFunction2_call)

    def callt(self, x, t, out):
        r"""callt(VectorNumbaFunction2 self, Vector x, double t, Vector out)"""
        return _coefficient.VectorNumbaFunction2_callt(self, x, t, out)
    callt = _swig_new_instance_method(_coefficient.VectorNumbaFunction2_callt)

    def callr(self, x, out):
        r"""callr(VectorNumbaFunction2 self, Vector x, Vector out)"""
        return _coefficient.VectorNumbaFunction2_callr(self, x, out)
    callr = _swig_new_instance_method(_coefficient.VectorNumbaFunction2_callr)

    def calltr(self, x, t, out):
        r"""calltr(VectorNumbaFunction2 self, Vector x, double t, Vector out)"""
        return _coefficient.VectorNumbaFunction2_calltr(self, x, t, out)
    calltr = _swig_new_instance_method(_coefficient.VectorNumbaFunction2_calltr)

    def calli(self, x, out):
        r"""calli(VectorNumbaFunction2 self, Vector x, Vector out)"""
        return _coefficient.VectorNumbaFunction2_calli(self, x, out)
    calli = _swig_new_instance_method(_coefficient.VectorNumbaFunction2_calli)

    def callti(self, x, t, out):
        r"""callti(VectorNumbaFunction2 self, Vector x, double t, Vector out)"""
        return _coefficient.VectorNumbaFunction2_callti(self, x, t, out)
    callti = _swig_new_instance_method(_coefficient.VectorNumbaFunction2_callti)

    def GetArrayImaginary(self, out):
        r"""GetArrayImaginary(VectorNumbaFunction2 self, Vector out)"""
        return _coefficient.VectorNumbaFunction2_GetArrayImaginary(self, out)
    GetArrayImaginary = _swig_new_instance_method(_coefficient.VectorNumbaFunction2_GetArrayImaginary)

    def create_outc(self):
        r"""create_outc(VectorNumbaFunction2 self)"""
        return _coefficient.VectorNumbaFunction2_create_outc(self)
    create_outc = _swig_new_instance_method(_coefficient.VectorNumbaFunction2_create_outc)

    def set_obj1(self, obj1_):
        r"""set_obj1(VectorNumbaFunction2 self, std::function< void (mfem::Vector const &,mfem::Vector &) > obj1_)"""
        return _coefficient.VectorNumbaFunction2_set_obj1(self, obj1_)
    set_obj1 = _swig_new_instance_method(_coefficient.VectorNumbaFunction2_set_obj1)

    def set_obj2(self, obj2_):
        r"""set_obj2(VectorNumbaFunction2 self, std::function< void (mfem::Vector const &,double,mfem::Vector &) > obj2_)"""
        return _coefficient.VectorNumbaFunction2_set_obj2(self, obj2_)
    set_obj2 = _swig_new_instance_method(_coefficient.VectorNumbaFunction2_set_obj2)

    def get_obj1(self):
        r"""get_obj1(VectorNumbaFunction2 self) -> std::function< void (mfem::Vector const &,mfem::Vector &) >"""
        return _coefficient.VectorNumbaFunction2_get_obj1(self)
    get_obj1 = _swig_new_instance_method(_coefficient.VectorNumbaFunction2_get_obj1)

    def get_obj2(self):
        r"""get_obj2(VectorNumbaFunction2 self) -> std::function< void (mfem::Vector const &,double,mfem::Vector &) >"""
        return _coefficient.VectorNumbaFunction2_get_obj2(self)
    get_obj2 = _swig_new_instance_method(_coefficient.VectorNumbaFunction2_get_obj2)

# Register VectorNumbaFunction2 in _coefficient:
_coefficient.VectorNumbaFunction2_swigregister(VectorNumbaFunction2)

def GenerateVectorNumbaCoefficient(numba_func, vdim, td, mode):
    r"""GenerateVectorNumbaCoefficient(PyObject * numba_func, int vdim, bool td, int mode) -> VectorNumbaCoefficient"""
    return _coefficient.GenerateVectorNumbaCoefficient(numba_func, vdim, td, mode)
GenerateVectorNumbaCoefficient = _coefficient.GenerateVectorNumbaCoefficient
class MatrixNumbaFunction2(object):
    r"""Proxy of C++ MatrixNumbaFunction2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MatrixNumbaFunction2 self, PyObject * input, int vdim) -> MatrixNumbaFunction2
        __init__(MatrixNumbaFunction2 self, PyObject * input, int vdim, bool td) -> MatrixNumbaFunction2
        """
        _coefficient.MatrixNumbaFunction2_swiginit(self, _coefficient.new_MatrixNumbaFunction2(*args))
    __swig_destroy__ = _coefficient.delete_MatrixNumbaFunction2

    def call(self, x, out):
        r"""call(MatrixNumbaFunction2 self, Vector x, DenseMatrix out)"""
        return _coefficient.MatrixNumbaFunction2_call(self, x, out)
    call = _swig_new_instance_method(_coefficient.MatrixNumbaFunction2_call)

    def callt(self, x, t, out):
        r"""callt(MatrixNumbaFunction2 self, Vector x, double t, DenseMatrix out)"""
        return _coefficient.MatrixNumbaFunction2_callt(self, x, t, out)
    callt = _swig_new_instance_method(_coefficient.MatrixNumbaFunction2_callt)

    def callr(self, x, out):
        r"""callr(MatrixNumbaFunction2 self, Vector x, DenseMatrix out)"""
        return _coefficient.MatrixNumbaFunction2_callr(self, x, out)
    callr = _swig_new_instance_method(_coefficient.MatrixNumbaFunction2_callr)

    def calltr(self, x, t, out):
        r"""calltr(MatrixNumbaFunction2 self, Vector x, double t, DenseMatrix out)"""
        return _coefficient.MatrixNumbaFunction2_calltr(self, x, t, out)
    calltr = _swig_new_instance_method(_coefficient.MatrixNumbaFunction2_calltr)

    def calli(self, x, out):
        r"""calli(MatrixNumbaFunction2 self, Vector x, DenseMatrix out)"""
        return _coefficient.MatrixNumbaFunction2_calli(self, x, out)
    calli = _swig_new_instance_method(_coefficient.MatrixNumbaFunction2_calli)

    def callti(self, x, t, out):
        r"""callti(MatrixNumbaFunction2 self, Vector x, double t, DenseMatrix out)"""
        return _coefficient.MatrixNumbaFunction2_callti(self, x, t, out)
    callti = _swig_new_instance_method(_coefficient.MatrixNumbaFunction2_callti)

    def GetArrayImaginary(self, out):
        r"""GetArrayImaginary(MatrixNumbaFunction2 self, DenseMatrix out)"""
        return _coefficient.MatrixNumbaFunction2_GetArrayImaginary(self, out)
    GetArrayImaginary = _swig_new_instance_method(_coefficient.MatrixNumbaFunction2_GetArrayImaginary)

    def create_outc(self):
        r"""create_outc(MatrixNumbaFunction2 self)"""
        return _coefficient.MatrixNumbaFunction2_create_outc(self)
    create_outc = _swig_new_instance_method(_coefficient.MatrixNumbaFunction2_create_outc)

    def set_obj1(self, obj1_):
        r"""set_obj1(MatrixNumbaFunction2 self, std::function< void (mfem::Vector const &,mfem::DenseMatrix &) > obj1_)"""
        return _coefficient.MatrixNumbaFunction2_set_obj1(self, obj1_)
    set_obj1 = _swig_new_instance_method(_coefficient.MatrixNumbaFunction2_set_obj1)

    def set_obj2(self, obj2_):
        r"""set_obj2(MatrixNumbaFunction2 self, std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) > obj2_)"""
        return _coefficient.MatrixNumbaFunction2_set_obj2(self, obj2_)
    set_obj2 = _swig_new_instance_method(_coefficient.MatrixNumbaFunction2_set_obj2)

    def get_obj1(self):
        r"""get_obj1(MatrixNumbaFunction2 self) -> std::function< void (mfem::Vector const &,mfem::DenseMatrix &) >"""
        return _coefficient.MatrixNumbaFunction2_get_obj1(self)
    get_obj1 = _swig_new_instance_method(_coefficient.MatrixNumbaFunction2_get_obj1)

    def get_obj2(self):
        r"""get_obj2(MatrixNumbaFunction2 self) -> std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) >"""
        return _coefficient.MatrixNumbaFunction2_get_obj2(self)
    get_obj2 = _swig_new_instance_method(_coefficient.MatrixNumbaFunction2_get_obj2)

# Register MatrixNumbaFunction2 in _coefficient:
_coefficient.MatrixNumbaFunction2_swigregister(MatrixNumbaFunction2)

def GenerateMatrixNumbaCoefficient(numba_func, height, width, td, mode):
    r"""GenerateMatrixNumbaCoefficient(PyObject * numba_func, int height, int width, bool td, int mode) -> MatrixNumbaCoefficient"""
    return _coefficient.GenerateMatrixNumbaCoefficient(numba_func, height, width, td, mode)
GenerateMatrixNumbaCoefficient = _coefficient.GenerateMatrixNumbaCoefficient

def SetNumbaCoefficientDependency(obj, a1, a2, a3, a4, a5, a6):
    r"""SetNumbaCoefficientDependency(NumbaCoefficientBase obj, CoefficientArray a1, VectorCoefficientArray a2, MatrixCoefficientArray a3, mfem::Array< ScalarNumbaCoefficient * > const & a4, mfem::Array< VectorNumbaCoefficient * > const & a5, mfem::Array< MatrixNumbaCoefficient * > const & a6)"""
    return _coefficient.SetNumbaCoefficientDependency(obj, a1, a2, a3, a4, a5, a6)
SetNumbaCoefficientDependency = _coefficient.SetNumbaCoefficientDependency


from mfem.common.numba_coefficient_utils import (generate_caller_scalar,
                                                 generate_caller_array,
                                                 generate_caller_array_oldstyle,
                                                 generate_signature_scalar,
                                                 generate_signature_array,
                                                 generate_signature_array_oldstyle,
                                                 get_setting)


try:
    import numpy as np
    from numba import cfunc, types, carray, farray
    scalar_sig = types.double(types.CPointer(types.double),
                              types.intc,)
    scalar_sig_t = types.double(types.CPointer(types.double),
                                types.double,
                                types.intc,)
    vector_sig = types.void(types.CPointer(types.double),
                        types.CPointer(types.double),
                        types.intc,
                        types.intc)
    vector_sig_t = types.void(types.CPointer(types.double),
                          types.double,
                          types.CPointer(types.double),
                          types.intc,
                          types.intc)

    matrix_sig = vector_sig
    matrix_sig_t = vector_sig_t



    from inspect import signature

    def IsNumbaCoefficient(obj):
        return (isinstance(obj, ScalarNumbaCoefficient) or
                isinstance(obj, VectorNumbaCoefficient) or
                isinstance(obj, MatrixNumbaCoefficient))

    def _copy_func_and_apply_params(f, params):
        import copy
        import types
        import functools

        """Based on https://stackoverflow.com/a/13503277/2988730 (@unutbu)"""
        globals = f.__globals__.copy()
        for k in params:
            globals[k] = params[k]
        g = types.FunctionType(f.__code__, globals, name=f.__name__,
                               argdefs=f.__defaults__, closure=f.__closure__)
        g = functools.update_wrapper(g, f)
        g.__module__ = f.__module__
        g.__kwdefaults__ = copy.copy(f.__kwdefaults__)
        return g

    class _JIT(object):
        def func(self, sig, params=None):
            params = {} if params is None else params
            def dec(func):
                from numba import jit
                gfunc=_copy_func_and_apply_params(func, params)
                ff = jit(sig)(gfunc)
                return ff
            return dec

        @staticmethod
        def scalar(func=None, **kwargs):
            def wrapper(func):
                def dec(*args, **kwargs):
                    return _scalar(*args, **kwargs)
                return dec(func, **kwargs)
            if func:
                return wrapper(func)
            else:
                return wrapper

        @staticmethod
        def vector(func=None, **kwargs):
            def wrapper(func):
                def dec(*args, **kwargs):
                    return _vector(*args, **kwargs)
                return dec(func, **kwargs)
            if func:
                return wrapper(func)
            else:
                return wrapper

        @staticmethod
        def matrix(func=None, **kwargs):
            def wrapper(func):
                def dec(*args, **kwargs):
                    return _matrix(*args, **kwargs)
                return dec(func, **kwargs)
            if func:
                return wrapper(func)
            else:
                return wrapper

    jit = _JIT()
except ImportError:
    pass
except BaseException:
    assert False, "Failed setting Numba signatures by an error other than ImportError"

def _scalar(func, td=False, params=None, complex=False, dependency=None,
            interface="simple", sdim=None, debug=False):
    if dependency is None:
        dependency = []
    if params is None:
        params = {}
    params["sdim"] = sdim

    from numba import cfunc, njit

    setting = get_setting(1, complex, dependency, td)

    if interface=="c++":
        sig = generate_signature_scalar(setting)
    elif interface=="simple":
        sig = generate_signature_scalar(setting)
    else:
        sig = interface[1](setting)

    if debug:
        print("(DEBUG) signature for function:", sig)

    gfunc=_copy_func_and_apply_params(func, params)
    ff = njit(sig)(gfunc)

    if complex:
        outtype = types.complex128
    else:
        outtype = types.double

    if td:
        caller_sig = outtype(types.CPointer(types.double),
                             types.int32,
                             types.double,
                             types.CPointer(types.voidptr))
    else:
        caller_sig = outtype(types.CPointer(types.double),
                             types.int32,
                            types.CPointer(types.voidptr))

    if interface=="c++":
         caller_txt = generate_caller_scalar(setting)
    elif interface=="simple":
         caller_txt = generate_caller_scalar(setting)
    else:
      caller_txt = interface[0](setting)

    if debug:
         print("(DEBUG) generated caller sig:\n", caller_sig)
         print("(DEBUG) generated caller function:\n", caller_txt)

    ll = {}
    exec(caller_txt, globals(), ll)
    caller_params = {"inner_func": ff, "carray":carray, "farray":farray}
    caller_func = _copy_func_and_apply_params(ll["_caller"], caller_params)
    ff = cfunc(caller_sig)(caller_func)

    if complex:
         coeff = GenerateScalarNumbaCoefficient(ff, td, 1)
         coeff.SetOutComplex(setting["output"])

         coeff.real = GenerateScalarNumbaCoefficient(ff, td, 1)
         coeff.imag = GenerateScalarNumbaCoefficient(ff, td, 2)
         coeffs = (coeff, coeff.real, coeff.imag)
    else:
         coeff = GenerateScalarNumbaCoefficient(ff, td, 0)
         coeff.SetOutComplex(setting["output"])
         coeffs = (coeff, )

    for c in coeffs:
         c.SetIsDepComplex(setting["isdepcomplex"])
         c.SetKinds(setting["kinds"])
         SetNumbaCoefficientDependency(c,
                                       setting["s_coeffs"],
                                       setting["v_coeffs"],
                                       setting["m_coeffs"],
                                       setting["ns_coeffs"],
                                       setting["nv_coeffs"],
                                       setting["nm_coeffs"])
         c._dependency_link = dependency
    return coeff


def _vector(func, vdim=None, shape=None, td=False, params=None,
            complex=False, dependency=None, interface="simple", sdim=None, debug=False):

    assert (vdim is not None or shape is not None), "vdim or shape must be given"

    if vdim is not None and shape is None:
        shape = (vdim, )
    if vdim is None and shape is not None:
        vdim = shape[0]

    assert vdim == shape[0], "vdim and shape are not consistent"

    if dependency is None:
       dependency = []
    if params is None:
       params = {}
    params["shape"] = shape
    params["vdim"] = vdim

    if sdim is not None:
# optional parameter to use sdim in a user function
       params["sdim"] = sdim

    from numba import cfunc, njit

    setting = get_setting(shape, complex, dependency, td)

    if interface == "simple":
        sig = generate_signature_array(setting)
    elif interface == "c++":
        sig = generate_signature_array_oldstyle(setting)
    else:
        sig = interface[1](setting)

    if debug:
        print("(DEBUG) signature for function:", sig)

    gfunc=_copy_func_and_apply_params(func, params)
    ff = njit(sig)(gfunc)

    if complex:
        outtype = types.complex128
    else:
        outtype = types.double

    if td:
        caller_sig = types.void(types.CPointer(types.double),
                                types.int32,
                                types.double,
                                types.CPointer(types.voidptr),
                                types.CPointer(outtype))
    else:
        caller_sig = types.void(types.CPointer(types.double),
                                types.int32,
                                types.CPointer(types.voidptr),
                                types.CPointer(outtype))

    if interface == "simple":
        caller_txt = generate_caller_array(setting)
    elif interface == "c++":
        caller_txt = generate_caller_array_oldstyle(setting)
    else:
        caller_txt = interface[0](setting)

    if debug:
         print("(DEBUG) generated caller sig:\n", caller_sig)
         print("(DEBUG) generated caller function:\n", caller_txt)

    ll = {}
    exec(caller_txt, globals(), ll)

    caller_params = {"inner_func": ff, "np":np, "shape":shape,
                     "carray":carray, "farray":farray}

    if vdim is not None:
        caller_params["vdim"] = vdim

    caller_func = _copy_func_and_apply_params(ll["_caller"], caller_params)
    ff = cfunc(caller_sig)(caller_func)

    if complex:
         coeff = GenerateVectorNumbaCoefficient(ff, shape[0], td, 1)
         coeff.SetOutComplex(setting["output"])

         coeff.real = GenerateVectorNumbaCoefficient(ff, shape[0], td, 1)
         coeff.imag = GenerateVectorNumbaCoefficient(ff, shape[0], td, 2)
         coeffs = (coeff, coeff.real, coeff.imag)
    else:
         coeff =  GenerateVectorNumbaCoefficient(ff, shape[0], td, 0)
         coeff.SetOutComplex(setting["output"])
         coeffs = (coeff, )

    for c in coeffs:
         c.SetIsDepComplex(setting["isdepcomplex"])
         c.SetKinds(setting["kinds"])
         SetNumbaCoefficientDependency(c,
                                       setting["s_coeffs"],
                                       setting["v_coeffs"],
                                       setting["m_coeffs"],
                                       setting["ns_coeffs"],
                                       setting["nv_coeffs"],
                                       setting["nm_coeffs"])
         c._dependency_link = dependency
    return coeff


def _matrix(func, height=None, width=None, shape=None, td=False, params=None,
            complex=False, dependency=None, interface="simple", sdim=None, debug=False):

    if (width is None and height is not None or
        width is not None and height is None) :
        assert False, "height and width must be used together"

    assert (width is not None or shape is not None), "w/h or shape must be given"

    if width is not None and shape is None:
        shape = (width, height)
    if height is None and width is None and shape is not None:
        width = shape[0]
        height = shape[1]
    assert height == shape[0], "height and shape[0] are not consistent"
    assert width == shape[1], "width and shape[1] are not consistent"

    if shape[0] != shape[1]:
        import warnings
        warning.warn("Rectangular matrix coefficient is experimental", UserWarning)

    if dependency is None:
        dependency = []
    if params is None:
        params = {}
    params["sdim"] = sdim
    params["shape"] = shape
    params["width"] = width
    params["height"] = height

    from numba import cfunc, njit

    setting = get_setting(shape, complex, dependency, td)

    if interface == "simple":
        sig = generate_signature_array(setting)
    elif interface == "c++":
        sig = generate_signature_array_oldstyle(setting)
    else:
        sig = interface[1](setting)

    if debug:
        print("(DEBUG) signature for function:", sig)

    gfunc = _copy_func_and_apply_params(func, params)
    ff = njit(sig)(gfunc)

    if complex:
        outtype = types.complex128
    else:
        outtype = types.double
    if td:
        caller_sig = types.void(types.CPointer(types.double),
                                types.int32,
                                types.double,
                                types.CPointer(types.voidptr),
                                types.CPointer(outtype))
    else:
        caller_sig = types.void(types.CPointer(types.double),
                                types.int32,
                                types.CPointer(types.voidptr),
                                types.CPointer(outtype))

    if interface == "simple":
        caller_txt = generate_caller_array(setting)
    elif interface == "c++":
        caller_txt = generate_caller_array_oldstyle(setting)
    else:
        caller_txt = interface[0](setting)

    if debug:
         print("(DEBUG) generated caller sig:\n", caller_sig)
         print("(DEBUG) generated caller function:\n", caller_txt)

    ll = {}
    exec(caller_txt, globals(), ll)

    caller_params = {"inner_func": ff, "np":np, "shape":shape,
                     "carray":carray, "farray":farray}
    caller_func = _copy_func_and_apply_params(ll["_caller"], caller_params)
    ff = cfunc(caller_sig)(caller_func)

    if complex:
         coeff = GenerateMatrixNumbaCoefficient(ff, shape[0], shape[1], td, 1)
         coeff.SetOutComplex(setting["output"])

         coeff.real = GenerateMatrixNumbaCoefficient(ff, shape[0], shape[1], td, 1)
         coeff.imag = GenerateMatrixNumbaCoefficient(ff, shape[0], shape[1], td, 2)
         coeffs = (coeff, coeff.real, coeff.imag)

    else:
         coeff = GenerateMatrixNumbaCoefficient(ff, shape[0], shape[1], td, 0)
         coeff.SetOutComplex(setting["output"])
         coeffs = (coeff, )

    for c in coeffs:
         c.SetIsDepComplex(setting["isdepcomplex"])
         c.SetKinds(setting["kinds"])
         SetNumbaCoefficientDependency(c,
                                       setting["s_coeffs"],
                                       setting["v_coeffs"],
                                       setting["m_coeffs"],
                                       setting["ns_coeffs"],
                                       setting["nv_coeffs"],
                                       setting["nm_coeffs"])
         c._dependency_link = dependency
    return coeff



def fake_func(x):
    r"""fake_func(Vector x) -> double"""
    return _coefficient.fake_func(x)
fake_func = _coefficient.fake_func

def fake_func_vec(x, Ht):
    r"""fake_func_vec(Vector x, Vector Ht)"""
    return _coefficient.fake_func_vec(x, Ht)
fake_func_vec = _coefficient.fake_func_vec

def fake_func_mat(x, Kt):
    r"""fake_func_mat(Vector x, DenseMatrix Kt)"""
    return _coefficient.fake_func_mat(x, Kt)
fake_func_mat = _coefficient.fake_func_mat
class PyCoefficientBase(FunctionCoefficient):
    r"""Proxy of C++ mfem::PyCoefficientBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, tdep):
        r"""__init__(PyCoefficientBase self, int tdep) -> PyCoefficientBase"""
        if self.__class__ == PyCoefficientBase:
            _self = None
        else:
            _self = self
        _coefficient.PyCoefficientBase_swiginit(self, _coefficient.new_PyCoefficientBase(_self, tdep))

    def SetTime(self, t):
        r"""SetTime(PyCoefficientBase self, double t)"""
        return _coefficient.PyCoefficientBase_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.PyCoefficientBase_SetTime)

    def Eval(self, T, ip):
        r"""Eval(PyCoefficientBase self, ElementTransformation T, IntegrationPoint ip) -> double"""
        return _coefficient.PyCoefficientBase_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.PyCoefficientBase_Eval)

    def _EvalPy(self, arg0):
        r"""_EvalPy(PyCoefficientBase self, Vector arg0) -> double"""
        return _coefficient.PyCoefficientBase__EvalPy(self, arg0)
    _EvalPy = _swig_new_instance_method(_coefficient.PyCoefficientBase__EvalPy)

    def _EvalPyT(self, arg0, arg1):
        r"""_EvalPyT(PyCoefficientBase self, Vector arg0, double arg1) -> double"""
        return _coefficient.PyCoefficientBase__EvalPyT(self, arg0, arg1)
    _EvalPyT = _swig_new_instance_method(_coefficient.PyCoefficientBase__EvalPyT)
    __swig_destroy__ = _coefficient.delete_PyCoefficientBase
    def __disown__(self):
        self.this.disown()
        _coefficient.disown_PyCoefficientBase(self)
        return weakref.proxy(self)

# Register PyCoefficientBase in _coefficient:
_coefficient.PyCoefficientBase_swigregister(PyCoefficientBase)
class VectorPyCoefficientBase(VectorFunctionCoefficient):
    r"""Proxy of C++ mfem::VectorPyCoefficientBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dim, tdep, q=None):
        r"""__init__(VectorPyCoefficientBase self, int dim, int tdep, Coefficient q=None) -> VectorPyCoefficientBase"""
        if self.__class__ == VectorPyCoefficientBase:
            _self = None
        else:
            _self = self
        _coefficient.VectorPyCoefficientBase_swiginit(self, _coefficient.new_VectorPyCoefficientBase(_self, dim, tdep, q))

    def SetTime(self, t):
        r"""SetTime(VectorPyCoefficientBase self, double t)"""
        return _coefficient.VectorPyCoefficientBase_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.VectorPyCoefficientBase_SetTime)

    def Eval(self, *args):
        r"""
        Eval(VectorPyCoefficientBase self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        Eval(VectorPyCoefficientBase self, Vector V, ElementTransformation T, IntegrationPoint ip)
        """
        return _coefficient.VectorPyCoefficientBase_Eval(self, *args)
    Eval = _swig_new_instance_method(_coefficient.VectorPyCoefficientBase_Eval)

    def _EvalPy(self, arg0, arg1):
        r"""_EvalPy(VectorPyCoefficientBase self, Vector arg0, Vector arg1)"""
        return _coefficient.VectorPyCoefficientBase__EvalPy(self, arg0, arg1)
    _EvalPy = _swig_new_instance_method(_coefficient.VectorPyCoefficientBase__EvalPy)

    def _EvalPyT(self, arg0, arg1, arg2):
        r"""_EvalPyT(VectorPyCoefficientBase self, Vector arg0, double arg1, Vector arg2)"""
        return _coefficient.VectorPyCoefficientBase__EvalPyT(self, arg0, arg1, arg2)
    _EvalPyT = _swig_new_instance_method(_coefficient.VectorPyCoefficientBase__EvalPyT)
    __swig_destroy__ = _coefficient.delete_VectorPyCoefficientBase
    def __disown__(self):
        self.this.disown()
        _coefficient.disown_VectorPyCoefficientBase(self)
        return weakref.proxy(self)

# Register VectorPyCoefficientBase in _coefficient:
_coefficient.VectorPyCoefficientBase_swigregister(VectorPyCoefficientBase)
class MatrixPyCoefficientBase(MatrixFunctionCoefficient):
    r"""Proxy of C++ mfem::MatrixPyCoefficientBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dim, tdep):
        r"""__init__(MatrixPyCoefficientBase self, int dim, int tdep) -> MatrixPyCoefficientBase"""
        if self.__class__ == MatrixPyCoefficientBase:
            _self = None
        else:
            _self = self
        _coefficient.MatrixPyCoefficientBase_swiginit(self, _coefficient.new_MatrixPyCoefficientBase(_self, dim, tdep))

    def SetTime(self, t):
        r"""SetTime(MatrixPyCoefficientBase self, double t)"""
        return _coefficient.MatrixPyCoefficientBase_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.MatrixPyCoefficientBase_SetTime)

    def Eval(self, K, T, ip):
        r"""Eval(MatrixPyCoefficientBase self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.MatrixPyCoefficientBase_Eval(self, K, T, ip)
    Eval = _swig_new_instance_method(_coefficient.MatrixPyCoefficientBase_Eval)

    def _EvalPy(self, arg0, arg1):
        r"""_EvalPy(MatrixPyCoefficientBase self, Vector arg0, DenseMatrix arg1)"""
        return _coefficient.MatrixPyCoefficientBase__EvalPy(self, arg0, arg1)
    _EvalPy = _swig_new_instance_method(_coefficient.MatrixPyCoefficientBase__EvalPy)

    def _EvalPyT(self, arg0, arg1, arg2):
        r"""_EvalPyT(MatrixPyCoefficientBase self, Vector arg0, double arg1, DenseMatrix arg2)"""
        return _coefficient.MatrixPyCoefficientBase__EvalPyT(self, arg0, arg1, arg2)
    _EvalPyT = _swig_new_instance_method(_coefficient.MatrixPyCoefficientBase__EvalPyT)
    __swig_destroy__ = _coefficient.delete_MatrixPyCoefficientBase
    def __disown__(self):
        self.this.disown()
        _coefficient.disown_MatrixPyCoefficientBase(self)
        return weakref.proxy(self)

# Register MatrixPyCoefficientBase in _coefficient:
_coefficient.MatrixPyCoefficientBase_swigregister(MatrixPyCoefficientBase)
class NumbaFunctionBase(object):
    r"""Proxy of C++ NumbaFunctionBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, input, sdim, td):
        r"""__init__(NumbaFunctionBase self, PyObject * input, int sdim, bool td) -> NumbaFunctionBase"""
        _coefficient.NumbaFunctionBase_swiginit(self, _coefficient.new_NumbaFunctionBase(input, sdim, td))

    def print_add(self):
        r"""print_add(NumbaFunctionBase self)"""
        return _coefficient.NumbaFunctionBase_print_add(self)
    print_add = _swig_new_instance_method(_coefficient.NumbaFunctionBase_print_add)

    def SetUserFunction(self, input):
        r"""SetUserFunction(NumbaFunctionBase self, PyObject * input)"""
        return _coefficient.NumbaFunctionBase_SetUserFunction(self, input)
    SetUserFunction = _swig_new_instance_method(_coefficient.NumbaFunctionBase_SetUserFunction)

    def GetData(self):
        r"""GetData(NumbaFunctionBase self) -> double *"""
        return _coefficient.NumbaFunctionBase_GetData(self)
    GetData = _swig_new_instance_method(_coefficient.NumbaFunctionBase_GetData)

    def GetPointer(self):
        r"""GetPointer(NumbaFunctionBase self) -> double **"""
        return _coefficient.NumbaFunctionBase_GetPointer(self)
    GetPointer = _swig_new_instance_method(_coefficient.NumbaFunctionBase_GetPointer)

    def SetDataCount(self, x):
        r"""SetDataCount(NumbaFunctionBase self, int x)"""
        return _coefficient.NumbaFunctionBase_SetDataCount(self, x)
    SetDataCount = _swig_new_instance_method(_coefficient.NumbaFunctionBase_SetDataCount)

    def GetScalarImaginary(self):
        r"""GetScalarImaginary(NumbaFunctionBase self) -> double"""
        return _coefficient.NumbaFunctionBase_GetScalarImaginary(self)
    GetScalarImaginary = _swig_new_instance_method(_coefficient.NumbaFunctionBase_GetScalarImaginary)

    def GetArrayImaginary(self, *args):
        r"""
        GetArrayImaginary(NumbaFunctionBase self, Vector arg2)
        GetArrayImaginary(NumbaFunctionBase self, DenseMatrix arg2)
        """
        return _coefficient.NumbaFunctionBase_GetArrayImaginary(self, *args)
    GetArrayImaginary = _swig_new_instance_method(_coefficient.NumbaFunctionBase_GetArrayImaginary)
    __swig_destroy__ = _coefficient.delete_NumbaFunctionBase

# Register NumbaFunctionBase in _coefficient:
_coefficient.NumbaFunctionBase_swigregister(NumbaFunctionBase)
class NumbaCoefficientBase(object):
    r"""Proxy of C++ NumbaCoefficientBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, in_obj):
        r"""__init__(NumbaCoefficientBase self, NumbaFunctionBase in_obj) -> NumbaCoefficientBase"""
        _coefficient.NumbaCoefficientBase_swiginit(self, _coefficient.new_NumbaCoefficientBase(in_obj))

    def PrepParams(self, T, ip):
        r"""PrepParams(NumbaCoefficientBase self, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.NumbaCoefficientBase_PrepParams(self, T, ip)
    PrepParams = _swig_new_instance_method(_coefficient.NumbaCoefficientBase_PrepParams)

    def SetKinds(self, kinds_):
        r"""SetKinds(NumbaCoefficientBase self, PyObject * kinds_)"""
        return _coefficient.NumbaCoefficientBase_SetKinds(self, kinds_)
    SetKinds = _swig_new_instance_method(_coefficient.NumbaCoefficientBase_SetKinds)

    def SetIsDepComplex(self, isComplex_):
        r"""SetIsDepComplex(NumbaCoefficientBase self, PyObject * isComplex_)"""
        return _coefficient.NumbaCoefficientBase_SetIsDepComplex(self, isComplex_)
    SetIsDepComplex = _swig_new_instance_method(_coefficient.NumbaCoefficientBase_SetIsDepComplex)

    def SetOutComplex(self, in_):
        r"""SetOutComplex(NumbaCoefficientBase self, bool in_)"""
        return _coefficient.NumbaCoefficientBase_SetOutComplex(self, in_)
    SetOutComplex = _swig_new_instance_method(_coefficient.NumbaCoefficientBase_SetOutComplex)

    def IsOutComplex(self):
        r"""IsOutComplex(NumbaCoefficientBase self) -> bool"""
        return _coefficient.NumbaCoefficientBase_IsOutComplex(self)
    IsOutComplex = _swig_new_instance_method(_coefficient.NumbaCoefficientBase_IsOutComplex)

    def SetTimeInDependency(self, t):
        r"""SetTimeInDependency(NumbaCoefficientBase self, double t)"""
        return _coefficient.NumbaCoefficientBase_SetTimeInDependency(self, t)
    SetTimeInDependency = _swig_new_instance_method(_coefficient.NumbaCoefficientBase_SetTimeInDependency)
    __swig_destroy__ = _coefficient.delete_NumbaCoefficientBase

# Register NumbaCoefficientBase in _coefficient:
_coefficient.NumbaCoefficientBase_swigregister(NumbaCoefficientBase)
class ScalarNumbaCoefficient(FunctionCoefficient, NumbaCoefficientBase):
    r"""Proxy of C++ ScalarNumbaCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetNDim(self):
        r"""GetNDim(ScalarNumbaCoefficient self) -> int"""
        return _coefficient.ScalarNumbaCoefficient_GetNDim(self)
    GetNDim = _swig_new_instance_method(_coefficient.ScalarNumbaCoefficient_GetNDim)

    def __init__(self, *args):
        r"""
        __init__(ScalarNumbaCoefficient self, std::function< double (mfem::Vector const &) > F, NumbaFunctionBase in_obj) -> ScalarNumbaCoefficient
        __init__(ScalarNumbaCoefficient self, std::function< double (mfem::Vector const &,double) > TDF, NumbaFunctionBase in_obj) -> ScalarNumbaCoefficient
        """
        _coefficient.ScalarNumbaCoefficient_swiginit(self, _coefficient.new_ScalarNumbaCoefficient(*args))

    def SetTime(self, t):
        r"""SetTime(ScalarNumbaCoefficient self, double t)"""
        return _coefficient.ScalarNumbaCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.ScalarNumbaCoefficient_SetTime)

    def Eval(self, T, ip):
        r"""Eval(ScalarNumbaCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"""
        return _coefficient.ScalarNumbaCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_coefficient.ScalarNumbaCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_ScalarNumbaCoefficient

# Register ScalarNumbaCoefficient in _coefficient:
_coefficient.ScalarNumbaCoefficient_swigregister(ScalarNumbaCoefficient)
class VectorNumbaCoefficient(VectorFunctionCoefficient, NumbaCoefficientBase):
    r"""Proxy of C++ VectorNumbaCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetNDim(self):
        r"""GetNDim(VectorNumbaCoefficient self) -> int"""
        return _coefficient.VectorNumbaCoefficient_GetNDim(self)
    GetNDim = _swig_new_instance_method(_coefficient.VectorNumbaCoefficient_GetNDim)

    def __init__(self, *args):
        r"""
        __init__(VectorNumbaCoefficient self, int dim, std::function< void (mfem::Vector const &,mfem::Vector &) > F, NumbaFunctionBase in_obj) -> VectorNumbaCoefficient
        __init__(VectorNumbaCoefficient self, int dim, std::function< void (mfem::Vector const &,double,mfem::Vector &) > TDF, NumbaFunctionBase in_obj) -> VectorNumbaCoefficient
        """
        _coefficient.VectorNumbaCoefficient_swiginit(self, _coefficient.new_VectorNumbaCoefficient(*args))

    def SetTime(self, t):
        r"""SetTime(VectorNumbaCoefficient self, double t)"""
        return _coefficient.VectorNumbaCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.VectorNumbaCoefficient_SetTime)

    def Eval(self, V, T, ip):
        r"""Eval(VectorNumbaCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.VectorNumbaCoefficient_Eval(self, V, T, ip)
    Eval = _swig_new_instance_method(_coefficient.VectorNumbaCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_VectorNumbaCoefficient

# Register VectorNumbaCoefficient in _coefficient:
_coefficient.VectorNumbaCoefficient_swigregister(VectorNumbaCoefficient)
class MatrixNumbaCoefficient(MatrixFunctionCoefficient, NumbaCoefficientBase):
    r"""Proxy of C++ MatrixNumbaCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetNDim(self):
        r"""GetNDim(MatrixNumbaCoefficient self) -> int"""
        return _coefficient.MatrixNumbaCoefficient_GetNDim(self)
    GetNDim = _swig_new_instance_method(_coefficient.MatrixNumbaCoefficient_GetNDim)

    def __init__(self, *args):
        r"""
        __init__(MatrixNumbaCoefficient self, int h, int w, std::function< void (mfem::Vector const &,mfem::DenseMatrix &) > F, NumbaFunctionBase in_obj) -> MatrixNumbaCoefficient
        __init__(MatrixNumbaCoefficient self, int h, int w, std::function< void (mfem::Vector const &,double,mfem::DenseMatrix &) > TDF, NumbaFunctionBase in_obj) -> MatrixNumbaCoefficient
        """
        _coefficient.MatrixNumbaCoefficient_swiginit(self, _coefficient.new_MatrixNumbaCoefficient(*args))

    def SetTime(self, t):
        r"""SetTime(MatrixNumbaCoefficient self, double t)"""
        return _coefficient.MatrixNumbaCoefficient_SetTime(self, t)
    SetTime = _swig_new_instance_method(_coefficient.MatrixNumbaCoefficient_SetTime)

    def Eval(self, K, T, ip):
        r"""Eval(MatrixNumbaCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.MatrixNumbaCoefficient_Eval(self, K, T, ip)
    Eval = _swig_new_instance_method(_coefficient.MatrixNumbaCoefficient_Eval)
    __swig_destroy__ = _coefficient.delete_MatrixNumbaCoefficient

# Register MatrixNumbaCoefficient in _coefficient:
_coefficient.MatrixNumbaCoefficient_swigregister(MatrixNumbaCoefficient)

class PyCoefficient(PyCoefficientBase):
   def __init__(self):
       PyCoefficientBase.__init__(self, 0)
   def _EvalPy(self, x):
       return self.EvalValue(x.GetDataArray())
   def EvalValue(self, x):
       return 0.0

class PyCoefficientT(PyCoefficientBase):
   def __init__(self):
       PyCoefficientBase.__init__(self, 1)
   def _EvalPyT(self, x, t):
       return self.EvalValue(x.GetDataArray(), t)
   def EvalValue(self, x, t):
       return 0.0

class VectorPyCoefficient(VectorPyCoefficientBase):
   def __init__(self, dim):
       self.vdim = dim
       VectorPyCoefficientBase.__init__(self, dim, 0)
   def _EvalPy(self, x, V):
       v = self.EvalValue(x.GetDataArray())
       V.Assign(v)

   def _EvalPyT(self, x, t, V):
       v = self.EvalValue(x.GetDataArray())
       V.Assign(v)

   def EvalValue(self, x):
       return [0,0,0]

class VectorPyCoefficientT(VectorPyCoefficientBase):
   def __init__(self, dim):
       self.vdim = dim
       VectorPyCoefficientBase.__init__(self, dim, 1)
   def _EvalPy(self, x, V):
       v = self.EvalValue(x.GetDataArray(), 0)
       V.Assign(v)

   def _EvalPyT(self, x, t, V):
       v = self.EvalValue(x.GetDataArray(), t)
       V.Assign(v)

   def EvalValue(self, x, t):
       return [0,0,0]

class MatrixPyCoefficient(MatrixPyCoefficientBase):
   def __init__(self, dim):
       self.vdim = dim
       MatrixPyCoefficientBase.__init__(self, dim, 0)
   def _EvalPy(self, x, K):
       k = self.EvalValue(x.GetDataArray())
       K.Assign(k)

   def EvalValue(self, x):
       return np.array([[0,0,0], [0,0,0], [0,0,0]])

class MatrixPyCoefficientT(MatrixPyCoefficientBase):
   def __init__(self, dim):
       self.vdim = dim
       MatrixPyCoefficientBase.__init__(self, dim, 1)
   def _EvalPyT(self, x, t, K):
       k = self.EvalValue(x.GetDataArray(), t)
       K.Assign(k)

   def EvalValue(self, x, t):
       return np.array([[0,0,0], [0,0,0], [0,0,0]])



