# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _intrules_cut
else:
    import _intrules_cut

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _intrules_cut.SWIG_PyInstanceMethod_New
_swig_new_static_method = _intrules_cut.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.globals
import mfem._ser.coefficient
import mfem._ser.matrix
import mfem._ser.vector
import mfem._ser.operators
import mfem._ser.symmat
import mfem._ser.intrules
import mfem._ser.sparsemat
import mfem._ser.densemat
import mfem._ser.eltrans
import mfem._ser.fe
import mfem._ser.geom
import mfem._ser.fe_base
import mfem._ser.doftrans
import mfem._ser.fe_fixed_order
import mfem._ser.element
import mfem._ser.table
import mfem._ser.hash
import mfem._ser.fe_h1
import mfem._ser.fe_nd
import mfem._ser.fe_rt
import mfem._ser.fe_l2
import mfem._ser.fe_nurbs
import mfem._ser.fe_pos
import mfem._ser.fe_ser
class CutIntegrationRules(object):
    r"""Proxy of C++ mfem::CutIntegrationRules class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetOrder(self, order):
        r"""SetOrder(CutIntegrationRules self, int order)"""
        return _intrules_cut.CutIntegrationRules_SetOrder(self, order)
    SetOrder = _swig_new_instance_method(_intrules_cut.CutIntegrationRules_SetOrder)

    def SetLevelSetCoefficient(self, ls):
        r"""SetLevelSetCoefficient(CutIntegrationRules self, Coefficient ls)"""
        return _intrules_cut.CutIntegrationRules_SetLevelSetCoefficient(self, ls)
    SetLevelSetCoefficient = _swig_new_instance_method(_intrules_cut.CutIntegrationRules_SetLevelSetCoefficient)

    def SetLevelSetProjectionOrder(self, order):
        r"""SetLevelSetProjectionOrder(CutIntegrationRules self, int order)"""
        return _intrules_cut.CutIntegrationRules_SetLevelSetProjectionOrder(self, order)
    SetLevelSetProjectionOrder = _swig_new_instance_method(_intrules_cut.CutIntegrationRules_SetLevelSetProjectionOrder)

    def GetSurfaceIntegrationRule(self, Tr, result):
        r"""GetSurfaceIntegrationRule(CutIntegrationRules self, ElementTransformation Tr, IntegrationRule result)"""
        return _intrules_cut.CutIntegrationRules_GetSurfaceIntegrationRule(self, Tr, result)
    GetSurfaceIntegrationRule = _swig_new_instance_method(_intrules_cut.CutIntegrationRules_GetSurfaceIntegrationRule)

    def GetVolumeIntegrationRule(self, Tr, result, sir=None):
        r"""GetVolumeIntegrationRule(CutIntegrationRules self, ElementTransformation Tr, IntegrationRule result, IntegrationRule sir=None)"""
        return _intrules_cut.CutIntegrationRules_GetVolumeIntegrationRule(self, Tr, result, sir)
    GetVolumeIntegrationRule = _swig_new_instance_method(_intrules_cut.CutIntegrationRules_GetVolumeIntegrationRule)

    def GetSurfaceWeights(self, Tr, sir, weights):
        r"""GetSurfaceWeights(CutIntegrationRules self, ElementTransformation Tr, IntegrationRule sir, Vector weights)"""
        return _intrules_cut.CutIntegrationRules_GetSurfaceWeights(self, Tr, sir, weights)
    GetSurfaceWeights = _swig_new_instance_method(_intrules_cut.CutIntegrationRules_GetSurfaceWeights)
    __swig_destroy__ = _intrules_cut.delete_CutIntegrationRules

# Register CutIntegrationRules in _intrules_cut:
_intrules_cut.CutIntegrationRules_swigregister(CutIntegrationRules)

def GetDivFree3DBasis(X, shape, Order):
    r"""GetDivFree3DBasis(Vector X, DenseMatrix shape, int Order)"""
    return _intrules_cut.GetDivFree3DBasis(X, shape, Order)
GetDivFree3DBasis = _intrules_cut.GetDivFree3DBasis

