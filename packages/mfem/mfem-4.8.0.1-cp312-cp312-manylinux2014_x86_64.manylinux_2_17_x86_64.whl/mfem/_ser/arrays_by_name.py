# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _arrays_by_name
else:
    import _arrays_by_name

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _arrays_by_name.SWIG_PyInstanceMethod_New
_swig_new_static_method = _arrays_by_name.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.globals
class intArraysByName(object):
    r"""Proxy of C++ mfem::ArraysByName< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(intArraysByName self) -> intArraysByName
        __init__(intArraysByName self, intArraysByName src) -> intArraysByName
        __init__(intArraysByName self, intArraysByName src) -> intArraysByName
        """
        _arrays_by_name.intArraysByName_swiginit(self, _arrays_by_name.new_intArraysByName(*args))

    def Size(self):
        r"""Size(intArraysByName self) -> int"""
        return _arrays_by_name.intArraysByName_Size(self)
    Size = _swig_new_instance_method(_arrays_by_name.intArraysByName_Size)

    def GetNames(self):
        r"""GetNames(intArraysByName self) -> std::set< std::string >"""
        return _arrays_by_name.intArraysByName_GetNames(self)
    GetNames = _swig_new_instance_method(_arrays_by_name.intArraysByName_GetNames)

    def EntryExists(self, name):
        r"""EntryExists(intArraysByName self, std::string const & name) -> bool"""
        return _arrays_by_name.intArraysByName_EntryExists(self, name)
    EntryExists = _swig_new_instance_method(_arrays_by_name.intArraysByName_EntryExists)

    def CreateArray(self, name):
        r"""CreateArray(intArraysByName self, std::string const & name) -> intArray"""
        return _arrays_by_name.intArraysByName_CreateArray(self, name)
    CreateArray = _swig_new_instance_method(_arrays_by_name.intArraysByName_CreateArray)

    def DeleteAll(self):
        r"""DeleteAll(intArraysByName self)"""
        return _arrays_by_name.intArraysByName_DeleteAll(self)
    DeleteAll = _swig_new_instance_method(_arrays_by_name.intArraysByName_DeleteAll)

    def DeleteArray(self, name):
        r"""DeleteArray(intArraysByName self, std::string const & name)"""
        return _arrays_by_name.intArraysByName_DeleteArray(self, name)
    DeleteArray = _swig_new_instance_method(_arrays_by_name.intArraysByName_DeleteArray)

    def Print(self, *args, **kwargs):
        r"""Print(intArraysByName self, std::ostream & out=out, int width=-1)"""
        return _arrays_by_name.intArraysByName_Print(self, *args, **kwargs)
    Print = _swig_new_instance_method(_arrays_by_name.intArraysByName_Print)

    def Load(self, _in):
        r"""Load(intArraysByName self, std::istream & _in)"""
        return _arrays_by_name.intArraysByName_Load(self, _in)
    Load = _swig_new_instance_method(_arrays_by_name.intArraysByName_Load)

    def SortAll(self):
        r"""SortAll(intArraysByName self)"""
        return _arrays_by_name.intArraysByName_SortAll(self)
    SortAll = _swig_new_instance_method(_arrays_by_name.intArraysByName_SortAll)

    def UniqueAll(self):
        r"""UniqueAll(intArraysByName self)"""
        return _arrays_by_name.intArraysByName_UniqueAll(self)
    UniqueAll = _swig_new_instance_method(_arrays_by_name.intArraysByName_UniqueAll)
    __swig_destroy__ = _arrays_by_name.delete_intArraysByName

# Register intArraysByName in _arrays_by_name:
_arrays_by_name.intArraysByName_swigregister(intArraysByName)

