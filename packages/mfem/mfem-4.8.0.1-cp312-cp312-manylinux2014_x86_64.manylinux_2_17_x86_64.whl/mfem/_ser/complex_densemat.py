# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _complex_densemat
else:
    import _complex_densemat

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _complex_densemat.SWIG_PyInstanceMethod_New
_swig_new_static_method = _complex_densemat.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._ser.element
import mfem._ser.globals
import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.densemat
import mfem._ser.vector
import mfem._ser.operators
import mfem._ser.matrix
import mfem._ser.geom
import mfem._ser.intrules
import mfem._ser.table
import mfem._ser.hash
import mfem._ser.complex_operator
import mfem._ser.sparsemat
class ComplexDenseMatrix(mfem._ser.complex_operator.ComplexOperator):
    r"""Proxy of C++ mfem::ComplexDenseMatrix class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(ComplexDenseMatrix self, DenseMatrix A_Real, DenseMatrix A_Imag, bool ownReal, bool ownImag, mfem::ComplexOperator::Convention convention=HERMITIAN) -> ComplexDenseMatrix"""
        _complex_densemat.ComplexDenseMatrix_swiginit(self, _complex_densemat.new_ComplexDenseMatrix(*args, **kwargs))

    def real(self, *args):
        r"""
        real(ComplexDenseMatrix self) -> DenseMatrix
        real(ComplexDenseMatrix self) -> DenseMatrix
        """
        return _complex_densemat.ComplexDenseMatrix_real(self, *args)
    real = _swig_new_instance_method(_complex_densemat.ComplexDenseMatrix_real)

    def imag(self, *args):
        r"""
        imag(ComplexDenseMatrix self) -> DenseMatrix
        imag(ComplexDenseMatrix self) -> DenseMatrix
        """
        return _complex_densemat.ComplexDenseMatrix_imag(self, *args)
    imag = _swig_new_instance_method(_complex_densemat.ComplexDenseMatrix_imag)

    def GetSystemMatrix(self):
        r"""GetSystemMatrix(ComplexDenseMatrix self) -> DenseMatrix"""
        return _complex_densemat.ComplexDenseMatrix_GetSystemMatrix(self)
    GetSystemMatrix = _swig_new_instance_method(_complex_densemat.ComplexDenseMatrix_GetSystemMatrix)

    def GetType(self):
        r"""GetType(ComplexDenseMatrix self) -> mfem::Operator::Type"""
        return _complex_densemat.ComplexDenseMatrix_GetType(self)
    GetType = _swig_new_instance_method(_complex_densemat.ComplexDenseMatrix_GetType)

    def ComputeInverse(self):
        r"""ComputeInverse(ComplexDenseMatrix self) -> ComplexDenseMatrix"""
        return _complex_densemat.ComplexDenseMatrix_ComputeInverse(self)
    ComputeInverse = _swig_new_instance_method(_complex_densemat.ComplexDenseMatrix_ComputeInverse)
    __swig_destroy__ = _complex_densemat.delete_ComplexDenseMatrix

# Register ComplexDenseMatrix in _complex_densemat:
_complex_densemat.ComplexDenseMatrix_swigregister(ComplexDenseMatrix)

def MultAtB(*args):
    r"""
    MultAtB(DenseMatrix A, DenseMatrix B, DenseMatrix AtB)
    MultAtB(ComplexDenseMatrix A, ComplexDenseMatrix B) -> ComplexDenseMatrix
    """
    return _complex_densemat.MultAtB(*args)
MultAtB = _complex_densemat.MultAtB
class ComplexFactors(object):
    r"""Proxy of C++ mfem::ComplexFactors class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data_r = property(_complex_densemat.ComplexFactors_data_r_get, _complex_densemat.ComplexFactors_data_r_set, doc=r"""data_r : p.mfem::real_t""")
    data_i = property(_complex_densemat.ComplexFactors_data_i_get, _complex_densemat.ComplexFactors_data_i_set, doc=r"""data_i : p.mfem::real_t""")
    data = property(_complex_densemat.ComplexFactors_data_get, _complex_densemat.ComplexFactors_data_set, doc=r"""data : p.std::complex<(mfem::real_t)>""")

    def __init__(self, *args):
        r"""
        __init__(ComplexFactors self) -> ComplexFactors
        __init__(ComplexFactors self, mfem::real_t * data_r_, mfem::real_t * data_i_) -> ComplexFactors
        """
        _complex_densemat.ComplexFactors_swiginit(self, _complex_densemat.new_ComplexFactors(*args))

    def SetComplexData(self, m):
        r"""SetComplexData(ComplexFactors self, int m)"""
        return _complex_densemat.ComplexFactors_SetComplexData(self, m)
    SetComplexData = _swig_new_instance_method(_complex_densemat.ComplexFactors_SetComplexData)

    def ResetComplexData(self, m):
        r"""ResetComplexData(ComplexFactors self, int m)"""
        return _complex_densemat.ComplexFactors_ResetComplexData(self, m)
    ResetComplexData = _swig_new_instance_method(_complex_densemat.ComplexFactors_ResetComplexData)

    def Factor(self, m, TOL=0.0):
        r"""Factor(ComplexFactors self, int m, mfem::real_t TOL=0.0) -> bool"""
        return _complex_densemat.ComplexFactors_Factor(self, m, TOL)
    Factor = _swig_new_instance_method(_complex_densemat.ComplexFactors_Factor)

    def Det(self, m):
        r"""Det(ComplexFactors self, int m) -> std::complex< mfem::real_t >"""
        return _complex_densemat.ComplexFactors_Det(self, m)
    Det = _swig_new_instance_method(_complex_densemat.ComplexFactors_Det)

    def Solve(self, m, n, X_r, X_i):
        r"""Solve(ComplexFactors self, int m, int n, mfem::real_t * X_r, mfem::real_t * X_i)"""
        return _complex_densemat.ComplexFactors_Solve(self, m, n, X_r, X_i)
    Solve = _swig_new_instance_method(_complex_densemat.ComplexFactors_Solve)

    def GetInverseMatrix(self, m, X_r, X_i):
        r"""GetInverseMatrix(ComplexFactors self, int m, mfem::real_t * X_r, mfem::real_t * X_i)"""
        return _complex_densemat.ComplexFactors_GetInverseMatrix(self, m, X_r, X_i)
    GetInverseMatrix = _swig_new_instance_method(_complex_densemat.ComplexFactors_GetInverseMatrix)
    __swig_destroy__ = _complex_densemat.delete_ComplexFactors

# Register ComplexFactors in _complex_densemat:
_complex_densemat.ComplexFactors_swigregister(ComplexFactors)
class ComplexLUFactors(ComplexFactors):
    r"""Proxy of C++ mfem::ComplexLUFactors class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ipiv = property(_complex_densemat.ComplexLUFactors_ipiv_get, _complex_densemat.ComplexLUFactors_ipiv_set, doc=r"""ipiv : p.int""")
    ipiv_base = _complex_densemat.ComplexLUFactors_ipiv_base
    

    def __init__(self, *args):
        r"""
        __init__(ComplexLUFactors self) -> ComplexLUFactors
        __init__(ComplexLUFactors self, mfem::real_t * data_r_, mfem::real_t * data_i, int * ipiv_) -> ComplexLUFactors
        """
        _complex_densemat.ComplexLUFactors_swiginit(self, _complex_densemat.new_ComplexLUFactors(*args))

    def Factor(self, m, TOL=0.0):
        r"""Factor(ComplexLUFactors self, int m, mfem::real_t TOL=0.0) -> bool"""
        return _complex_densemat.ComplexLUFactors_Factor(self, m, TOL)
    Factor = _swig_new_instance_method(_complex_densemat.ComplexLUFactors_Factor)

    def Det(self, m):
        r"""Det(ComplexLUFactors self, int m) -> std::complex< mfem::real_t >"""
        return _complex_densemat.ComplexLUFactors_Det(self, m)
    Det = _swig_new_instance_method(_complex_densemat.ComplexLUFactors_Det)

    def Mult(self, *args):
        r"""
        Mult(ComplexLUFactors self, int m, int n, mfem::real_t * X_r, mfem::real_t * X_i)
        Mult(ComplexLUFactors self, int m, int n, std::complex< mfem::real_t > * X)
        """
        return _complex_densemat.ComplexLUFactors_Mult(self, *args)
    Mult = _swig_new_instance_method(_complex_densemat.ComplexLUFactors_Mult)

    def LSolve(self, m, n, X_r, X_i):
        r"""LSolve(ComplexLUFactors self, int m, int n, mfem::real_t * X_r, mfem::real_t * X_i)"""
        return _complex_densemat.ComplexLUFactors_LSolve(self, m, n, X_r, X_i)
    LSolve = _swig_new_instance_method(_complex_densemat.ComplexLUFactors_LSolve)

    def USolve(self, m, n, X_r, X_i):
        r"""USolve(ComplexLUFactors self, int m, int n, mfem::real_t * X_r, mfem::real_t * X_i)"""
        return _complex_densemat.ComplexLUFactors_USolve(self, m, n, X_r, X_i)
    USolve = _swig_new_instance_method(_complex_densemat.ComplexLUFactors_USolve)

    def Solve(self, m, n, X_r, X_i):
        r"""Solve(ComplexLUFactors self, int m, int n, mfem::real_t * X_r, mfem::real_t * X_i)"""
        return _complex_densemat.ComplexLUFactors_Solve(self, m, n, X_r, X_i)
    Solve = _swig_new_instance_method(_complex_densemat.ComplexLUFactors_Solve)

    def RightSolve(self, m, n, X_r, X_i):
        r"""RightSolve(ComplexLUFactors self, int m, int n, mfem::real_t * X_r, mfem::real_t * X_i)"""
        return _complex_densemat.ComplexLUFactors_RightSolve(self, m, n, X_r, X_i)
    RightSolve = _swig_new_instance_method(_complex_densemat.ComplexLUFactors_RightSolve)

    def GetInverseMatrix(self, m, X_r, X_i):
        r"""GetInverseMatrix(ComplexLUFactors self, int m, mfem::real_t * X_r, mfem::real_t * X_i)"""
        return _complex_densemat.ComplexLUFactors_GetInverseMatrix(self, m, X_r, X_i)
    GetInverseMatrix = _swig_new_instance_method(_complex_densemat.ComplexLUFactors_GetInverseMatrix)
    __swig_destroy__ = _complex_densemat.delete_ComplexLUFactors

# Register ComplexLUFactors in _complex_densemat:
_complex_densemat.ComplexLUFactors_swigregister(ComplexLUFactors)
class ComplexCholeskyFactors(ComplexFactors):
    r"""Proxy of C++ mfem::ComplexCholeskyFactors class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ComplexCholeskyFactors self) -> ComplexCholeskyFactors
        __init__(ComplexCholeskyFactors self, mfem::real_t * data_r_, mfem::real_t * data_i_) -> ComplexCholeskyFactors
        """
        _complex_densemat.ComplexCholeskyFactors_swiginit(self, _complex_densemat.new_ComplexCholeskyFactors(*args))

    def Factor(self, m, TOL=0.0):
        r"""Factor(ComplexCholeskyFactors self, int m, mfem::real_t TOL=0.0) -> bool"""
        return _complex_densemat.ComplexCholeskyFactors_Factor(self, m, TOL)
    Factor = _swig_new_instance_method(_complex_densemat.ComplexCholeskyFactors_Factor)

    def Det(self, m):
        r"""Det(ComplexCholeskyFactors self, int m) -> std::complex< mfem::real_t >"""
        return _complex_densemat.ComplexCholeskyFactors_Det(self, m)
    Det = _swig_new_instance_method(_complex_densemat.ComplexCholeskyFactors_Det)

    def LMult(self, m, n, X_r, X_i):
        r"""LMult(ComplexCholeskyFactors self, int m, int n, mfem::real_t * X_r, mfem::real_t * X_i)"""
        return _complex_densemat.ComplexCholeskyFactors_LMult(self, m, n, X_r, X_i)
    LMult = _swig_new_instance_method(_complex_densemat.ComplexCholeskyFactors_LMult)

    def UMult(self, m, n, X_r, X_i):
        r"""UMult(ComplexCholeskyFactors self, int m, int n, mfem::real_t * X_r, mfem::real_t * X_i)"""
        return _complex_densemat.ComplexCholeskyFactors_UMult(self, m, n, X_r, X_i)
    UMult = _swig_new_instance_method(_complex_densemat.ComplexCholeskyFactors_UMult)

    def LSolve(self, m, n, X_r, X_i):
        r"""LSolve(ComplexCholeskyFactors self, int m, int n, mfem::real_t * X_r, mfem::real_t * X_i)"""
        return _complex_densemat.ComplexCholeskyFactors_LSolve(self, m, n, X_r, X_i)
    LSolve = _swig_new_instance_method(_complex_densemat.ComplexCholeskyFactors_LSolve)

    def USolve(self, m, n, X_r, X_i):
        r"""USolve(ComplexCholeskyFactors self, int m, int n, mfem::real_t * X_r, mfem::real_t * X_i)"""
        return _complex_densemat.ComplexCholeskyFactors_USolve(self, m, n, X_r, X_i)
    USolve = _swig_new_instance_method(_complex_densemat.ComplexCholeskyFactors_USolve)

    def Solve(self, m, n, X_r, X_i):
        r"""Solve(ComplexCholeskyFactors self, int m, int n, mfem::real_t * X_r, mfem::real_t * X_i)"""
        return _complex_densemat.ComplexCholeskyFactors_Solve(self, m, n, X_r, X_i)
    Solve = _swig_new_instance_method(_complex_densemat.ComplexCholeskyFactors_Solve)

    def RightSolve(self, m, n, X_r, X_i):
        r"""RightSolve(ComplexCholeskyFactors self, int m, int n, mfem::real_t * X_r, mfem::real_t * X_i)"""
        return _complex_densemat.ComplexCholeskyFactors_RightSolve(self, m, n, X_r, X_i)
    RightSolve = _swig_new_instance_method(_complex_densemat.ComplexCholeskyFactors_RightSolve)

    def GetInverseMatrix(self, m, X_r, X_i):
        r"""GetInverseMatrix(ComplexCholeskyFactors self, int m, mfem::real_t * X_r, mfem::real_t * X_i)"""
        return _complex_densemat.ComplexCholeskyFactors_GetInverseMatrix(self, m, X_r, X_i)
    GetInverseMatrix = _swig_new_instance_method(_complex_densemat.ComplexCholeskyFactors_GetInverseMatrix)
    __swig_destroy__ = _complex_densemat.delete_ComplexCholeskyFactors

# Register ComplexCholeskyFactors in _complex_densemat:
_complex_densemat.ComplexCholeskyFactors_swigregister(ComplexCholeskyFactors)

