# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _fespace
else:
    import _fespace

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _fespace.SWIG_PyInstanceMethod_New
_swig_new_static_method = _fespace.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.globals
import mfem._ser.vector
import mfem._ser.coefficient
import mfem._ser.matrix
import mfem._ser.operators
import mfem._ser.symmat
import mfem._ser.intrules
import mfem._ser.sparsemat
import mfem._ser.densemat
import mfem._ser.eltrans
import mfem._ser.fe
import mfem._ser.geom
import mfem._ser.fe_base
import mfem._ser.doftrans
import mfem._ser.fe_fixed_order
import mfem._ser.element
import mfem._ser.table
import mfem._ser.hash
import mfem._ser.fe_h1
import mfem._ser.fe_nd
import mfem._ser.fe_rt
import mfem._ser.fe_l2
import mfem._ser.fe_nurbs
import mfem._ser.fe_pos
import mfem._ser.fe_ser
import mfem._ser.mesh
import mfem._ser.attribute_sets
import mfem._ser.arrays_by_name
import mfem._ser.sort_pairs
import mfem._ser.ncmesh
import mfem._ser.gridfunc
import mfem._ser.bilininteg
import mfem._ser.fe_coll
import mfem._ser.lininteg
import mfem._ser.linearform
import mfem._ser.nonlininteg
import mfem._ser.integrator
import mfem._ser.bounds
import mfem._ser.vertex
import mfem._ser.vtk
import mfem._ser.std_vectors
import mfem._ser.handle
import mfem._ser.restriction
class FiniteElementSpaceArray(object):
    r"""Proxy of C++ mfem::Array< mfem::FiniteElementSpace * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _fespace.delete_FiniteElementSpaceArray

    def GetData(self, *args):
        r"""
        GetData(FiniteElementSpaceArray self) -> FiniteElementSpace
        GetData(FiniteElementSpaceArray self) -> mfem::FiniteElementSpace *const *
        """
        return _fespace.FiniteElementSpaceArray_GetData(self, *args)
    GetData = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_GetData)

    def GetMemory(self, *args):
        r"""
        GetMemory(FiniteElementSpaceArray self) -> mfem::Memory< mfem::FiniteElementSpace * >
        GetMemory(FiniteElementSpaceArray self) -> mfem::Memory< mfem::FiniteElementSpace * > const &
        """
        return _fespace.FiniteElementSpaceArray_GetMemory(self, *args)
    GetMemory = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_GetMemory)

    def UseDevice(self):
        r"""UseDevice(FiniteElementSpaceArray self) -> bool"""
        return _fespace.FiniteElementSpaceArray_UseDevice(self)
    UseDevice = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_UseDevice)

    def OwnsData(self):
        r"""OwnsData(FiniteElementSpaceArray self) -> bool"""
        return _fespace.FiniteElementSpaceArray_OwnsData(self)
    OwnsData = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_OwnsData)

    def StealData(self, p):
        r"""StealData(FiniteElementSpaceArray self, mfem::FiniteElementSpace *** p)"""
        return _fespace.FiniteElementSpaceArray_StealData(self, p)
    StealData = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_StealData)

    def LoseData(self):
        r"""LoseData(FiniteElementSpaceArray self)"""
        return _fespace.FiniteElementSpaceArray_LoseData(self)
    LoseData = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_LoseData)

    def MakeDataOwner(self):
        r"""MakeDataOwner(FiniteElementSpaceArray self)"""
        return _fespace.FiniteElementSpaceArray_MakeDataOwner(self)
    MakeDataOwner = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_MakeDataOwner)

    def Size(self):
        r"""Size(FiniteElementSpaceArray self) -> int"""
        return _fespace.FiniteElementSpaceArray_Size(self)
    Size = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_Size)

    def SetSize(self, *args):
        r"""
        SetSize(FiniteElementSpaceArray self, int nsize)
        SetSize(FiniteElementSpaceArray self, int nsize, FiniteElementSpace initval)
        SetSize(FiniteElementSpaceArray self, int nsize, mfem::MemoryType mt)
        """
        return _fespace.FiniteElementSpaceArray_SetSize(self, *args)
    SetSize = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_SetSize)

    def Capacity(self):
        r"""Capacity(FiniteElementSpaceArray self) -> int"""
        return _fespace.FiniteElementSpaceArray_Capacity(self)
    Capacity = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_Capacity)

    def Reserve(self, capacity):
        r"""Reserve(FiniteElementSpaceArray self, int capacity)"""
        return _fespace.FiniteElementSpaceArray_Reserve(self, capacity)
    Reserve = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_Reserve)

    def Append(self, *args):
        r"""
        Append(FiniteElementSpaceArray self, FiniteElementSpace el) -> int
        Append(FiniteElementSpaceArray self, mfem::FiniteElementSpace *const * els, int nels) -> int
        Append(FiniteElementSpaceArray self, FiniteElementSpaceArray els) -> int
        """

        if isinstance(args[0], list):
           return self.Append(self.__class__(args[0]))
        if isinstance(args[0], tuple):
           return self.Append(self.__class__(args[0]))


        return _fespace.FiniteElementSpaceArray_Append(self, *args)


    def Prepend(self, el):
        r"""Prepend(FiniteElementSpaceArray self, FiniteElementSpace el) -> int"""
        return _fespace.FiniteElementSpaceArray_Prepend(self, el)
    Prepend = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_Prepend)

    def Last(self, *args):
        r"""
        Last(FiniteElementSpaceArray self) -> FiniteElementSpace
        Last(FiniteElementSpaceArray self) -> FiniteElementSpace
        """
        return _fespace.FiniteElementSpaceArray_Last(self, *args)
    Last = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_Last)

    def DeleteLast(self):
        r"""DeleteLast(FiniteElementSpaceArray self)"""
        return _fespace.FiniteElementSpaceArray_DeleteLast(self)
    DeleteLast = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_DeleteLast)

    def DeleteAll(self):
        r"""DeleteAll(FiniteElementSpaceArray self)"""
        return _fespace.FiniteElementSpaceArray_DeleteAll(self)
    DeleteAll = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_DeleteAll)

    def ShrinkToFit(self):
        r"""ShrinkToFit(FiniteElementSpaceArray self)"""
        return _fespace.FiniteElementSpaceArray_ShrinkToFit(self)
    ShrinkToFit = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_ShrinkToFit)

    def Copy(self, copy):
        r"""Copy(FiniteElementSpaceArray self, FiniteElementSpaceArray copy)"""
        return _fespace.FiniteElementSpaceArray_Copy(self, copy)
    Copy = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_Copy)

    def MakeRef(self, *args):
        r"""
        MakeRef(FiniteElementSpaceArray self, mfem::FiniteElementSpace ** data_, int size_, bool own_data=False)
        MakeRef(FiniteElementSpaceArray self, mfem::FiniteElementSpace ** data_, int size, mfem::MemoryType mt, bool own_data)
        MakeRef(FiniteElementSpaceArray self, FiniteElementSpaceArray master)
        """
        return _fespace.FiniteElementSpaceArray_MakeRef(self, *args)
    MakeRef = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_MakeRef)

    def GetSubArray(self, offset, sa_size, sa):
        r"""GetSubArray(FiniteElementSpaceArray self, int offset, int sa_size, FiniteElementSpaceArray sa)"""
        return _fespace.FiniteElementSpaceArray_GetSubArray(self, offset, sa_size, sa)
    GetSubArray = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_GetSubArray)

    def IsEmpty(self):
        r"""IsEmpty(FiniteElementSpaceArray self) -> bool"""
        return _fespace.FiniteElementSpaceArray_IsEmpty(self)
    IsEmpty = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_IsEmpty)

    def begin(self, *args):
        r"""
        begin(FiniteElementSpaceArray self) -> FiniteElementSpace
        begin(FiniteElementSpaceArray self) -> mfem::FiniteElementSpace *const *
        """
        return _fespace.FiniteElementSpaceArray_begin(self, *args)
    begin = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_begin)

    def end(self, *args):
        r"""
        end(FiniteElementSpaceArray self) -> FiniteElementSpace
        end(FiniteElementSpaceArray self) -> mfem::FiniteElementSpace *const *
        """
        return _fespace.FiniteElementSpaceArray_end(self, *args)
    end = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_end)

    def MemoryUsage(self):
        r"""MemoryUsage(FiniteElementSpaceArray self) -> std::size_t"""
        return _fespace.FiniteElementSpaceArray_MemoryUsage(self)
    MemoryUsage = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_MemoryUsage)

    def Read(self, on_dev=True):
        r"""Read(FiniteElementSpaceArray self, bool on_dev=True) -> mfem::FiniteElementSpace *const *"""
        return _fespace.FiniteElementSpaceArray_Read(self, on_dev)
    Read = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_Read)

    def HostRead(self):
        r"""HostRead(FiniteElementSpaceArray self) -> mfem::FiniteElementSpace *const *"""
        return _fespace.FiniteElementSpaceArray_HostRead(self)
    HostRead = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_HostRead)

    def Write(self, on_dev=True):
        r"""Write(FiniteElementSpaceArray self, bool on_dev=True) -> mfem::FiniteElementSpace **"""
        return _fespace.FiniteElementSpaceArray_Write(self, on_dev)
    Write = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_Write)

    def HostWrite(self):
        r"""HostWrite(FiniteElementSpaceArray self) -> mfem::FiniteElementSpace **"""
        return _fespace.FiniteElementSpaceArray_HostWrite(self)
    HostWrite = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_HostWrite)

    def ReadWrite(self, on_dev=True):
        r"""ReadWrite(FiniteElementSpaceArray self, bool on_dev=True) -> mfem::FiniteElementSpace **"""
        return _fespace.FiniteElementSpaceArray_ReadWrite(self, on_dev)
    ReadWrite = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_ReadWrite)

    def HostReadWrite(self):
        r"""HostReadWrite(FiniteElementSpaceArray self) -> mfem::FiniteElementSpace **"""
        return _fespace.FiniteElementSpaceArray_HostReadWrite(self)
    HostReadWrite = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_HostReadWrite)

    def __init__(self, *args):
        r"""
        __init__(FiniteElementSpaceArray self) -> FiniteElementSpaceArray
        __init__(FiniteElementSpaceArray self, mfem::MemoryType mt) -> FiniteElementSpaceArray
        __init__(FiniteElementSpaceArray self, int asize) -> FiniteElementSpaceArray
        __init__(FiniteElementSpaceArray self, int asize, mfem::MemoryType mt) -> FiniteElementSpaceArray
        __init__(FiniteElementSpaceArray self, mfem::FiniteElementSpace ** data_, bool own_data=False) -> FiniteElementSpaceArray
        __init__(FiniteElementSpaceArray self, FiniteElementSpaceArray src) -> FiniteElementSpaceArray
        __init__(FiniteElementSpaceArray self, FiniteElementSpaceArray src) -> FiniteElementSpaceArray
        __init__(FiniteElementSpaceArray self, void * List_or_Tuple) -> FiniteElementSpaceArray
        """
        _fespace.FiniteElementSpaceArray_swiginit(self, _fespace.new_FiniteElementSpaceArray(*args))

    def __setitem__(self, i, v):
        r"""__setitem__(FiniteElementSpaceArray self, int i, FiniteElementSpace v)"""

        i = int(i)
        if hasattr(v, "thisown"):
            v.thisown = False


        return _fespace.FiniteElementSpaceArray___setitem__(self, i, v)


    def Assign(self, *args):
        r"""
        Assign(FiniteElementSpaceArray self, mfem::FiniteElementSpace *const * arg2)
        Assign(FiniteElementSpaceArray self, FiniteElementSpace a)
        """
        return _fespace.FiniteElementSpaceArray_Assign(self, *args)
    Assign = _swig_new_instance_method(_fespace.FiniteElementSpaceArray_Assign)

    def ToList(self):
        return [self[i] for i in range(self.Size())]



    def __iter__(self):
        class iter_array:
            def __init__(self, obj):
                self.obj = obj
                self.idx = 0
                self.size = obj.Size()
            def __iter__(self):
                self.idx = 0
            def __next__(self):
                if self.idx < self.size:
                    res = self.obj[self.idx]
                    self.idx += 1
                    return res
                else:
                    raise StopIteration
        return iter_array(self)



    def __getitem__(self, param):
        r"""__getitem__(FiniteElementSpaceArray self, PyObject * param) -> PyObject *"""
        return _fespace.FiniteElementSpaceArray___getitem__(self, param)
    __getitem__ = _swig_new_instance_method(_fespace.FiniteElementSpaceArray___getitem__)

# Register FiniteElementSpaceArray in _fespace:
_fespace.FiniteElementSpaceArray_swigregister(FiniteElementSpaceArray)

def Swap(*args):
    r"""
    Swap(intArray arg1, intArray arg2)
    Swap(doubleArray arg1, doubleArray arg2)
    Swap(int8Array arg1, int8Array arg2)
    Swap(int64Array arg1, int64Array arg2)
    Swap(boolArray arg1, boolArray arg2)
    Swap(uintArray arg1, uintArray arg2)
    Swap(intArrayArray arg1, intArrayArray arg2)
    Swap(intArray2D arg1, intArray2D arg2)
    Swap(doubleArray2D arg1, doubleArray2D arg2)
    Swap(DenseMatrixArray2D arg1, DenseMatrixArray2D arg2)
    Swap(SparseMatrixArray2D arg1, SparseMatrixArray2D arg2)
    Swap(VectorArray arg1, VectorArray arg2)
    Swap(OperatorArray arg1, OperatorArray arg2)
    Swap(SolverArray arg1, SolverArray arg2)
    Swap(IntegrationPointArray arg1, IntegrationPointArray arg2)
    Swap(IntegrationRuleArray arg1, IntegrationRuleArray arg2)
    Swap(GeometryTypeArray arg1, GeometryTypeArray arg2)
    Swap(CoefficientArray arg1, CoefficientArray arg2)
    Swap(VectorCoefficientArray arg1, VectorCoefficientArray arg2)
    Swap(MatrixCoefficientArray arg1, MatrixCoefficientArray arg2)
    Swap(CoarseFineTransformations a, CoarseFineTransformations b)
    Swap(RefinementArray arg1, RefinementArray arg2)
    Swap(FiniteElementSpaceArray arg1, FiniteElementSpaceArray arg2)
    """
    return _fespace.Swap(*args)
Swap = _fespace.Swap

class Ordering(object):
    r"""Proxy of C++ mfem::Ordering class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byNODES = _fespace.Ordering_byNODES
    
    byVDIM = _fespace.Ordering_byVDIM
    

    def __init__(self):
        r"""__init__(Ordering self) -> Ordering"""
        _fespace.Ordering_swiginit(self, _fespace.new_Ordering())
    __swig_destroy__ = _fespace.delete_Ordering

# Register Ordering in _fespace:
_fespace.Ordering_swigregister(Ordering)
QVectorLayout_byNODES = _fespace.QVectorLayout_byNODES

QVectorLayout_byVDIM = _fespace.QVectorLayout_byVDIM

ElementDofOrdering_NATIVE = _fespace.ElementDofOrdering_NATIVE

ElementDofOrdering_LEXICOGRAPHIC = _fespace.ElementDofOrdering_LEXICOGRAPHIC

class pRefinement(object):
    r"""Proxy of C++ mfem::pRefinement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    index = property(_fespace.pRefinement_index_get, _fespace.pRefinement_index_set, doc=r"""index : int""")
    delta = property(_fespace.pRefinement_delta_get, _fespace.pRefinement_delta_set, doc=r"""delta : int""")

    def __init__(self, *args):
        r"""
        __init__(pRefinement self) -> pRefinement
        __init__(pRefinement self, int element, int change) -> pRefinement
        """
        _fespace.pRefinement_swiginit(self, _fespace.new_pRefinement(*args))
    __swig_destroy__ = _fespace.delete_pRefinement

# Register pRefinement in _fespace:
_fespace.pRefinement_swigregister(pRefinement)
class FiniteElementSpace(object):
    r"""Proxy of C++ mfem::FiniteElementSpace class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FiniteElementSpace self) -> FiniteElementSpace
        __init__(FiniteElementSpace self, FiniteElementSpace orig, Mesh mesh=None, FiniteElementCollection fec=None) -> FiniteElementSpace
        __init__(FiniteElementSpace self, Mesh mesh, FiniteElementCollection fec, int vdim=1, int ordering=byNODES) -> FiniteElementSpace
        __init__(FiniteElementSpace self, Mesh mesh, mfem::NURBSExtension * ext, FiniteElementCollection fec, int vdim=1, int ordering=byNODES) -> FiniteElementSpace
        """
        _fespace.FiniteElementSpace_swiginit(self, _fespace.new_FiniteElementSpace(*args))


        '''
            FiniteElementSpace(Mesh *m, const FiniteElementCollection *f,
                          int vdim = 1, int ordering = Ordering::byNODES);
            keep reference to mesh and fec to prevent it from
            freeed from pytho garbage collector
        '''
        if hasattr(self, 'this'):
            self.mesh = args[0]
            self.fec = args[1]





    def GetMesh(self):
        r"""GetMesh(FiniteElementSpace self) -> Mesh"""
        return _fespace.FiniteElementSpace_GetMesh(self)
    GetMesh = _swig_new_instance_method(_fespace.FiniteElementSpace_GetMesh)

    def GetNURBSext(self, *args):
        r"""
        GetNURBSext(FiniteElementSpace self) -> mfem::NURBSExtension const
        GetNURBSext(FiniteElementSpace self) -> mfem::NURBSExtension *
        """
        return _fespace.FiniteElementSpace_GetNURBSext(self, *args)
    GetNURBSext = _swig_new_instance_method(_fespace.FiniteElementSpace_GetNURBSext)

    def StealNURBSext(self):
        r"""StealNURBSext(FiniteElementSpace self) -> mfem::NURBSExtension *"""
        return _fespace.FiniteElementSpace_StealNURBSext(self)
    StealNURBSext = _swig_new_instance_method(_fespace.FiniteElementSpace_StealNURBSext)

    def Conforming(self):
        r"""Conforming(FiniteElementSpace self) -> bool"""
        return _fespace.FiniteElementSpace_Conforming(self)
    Conforming = _swig_new_instance_method(_fespace.FiniteElementSpace_Conforming)

    def Nonconforming(self):
        r"""Nonconforming(FiniteElementSpace self) -> bool"""
        return _fespace.FiniteElementSpace_Nonconforming(self)
    Nonconforming = _swig_new_instance_method(_fespace.FiniteElementSpace_Nonconforming)

    def SetProlongation(self, p):
        r"""SetProlongation(FiniteElementSpace self, SparseMatrix p)"""
        return _fespace.FiniteElementSpace_SetProlongation(self, p)
    SetProlongation = _swig_new_instance_method(_fespace.FiniteElementSpace_SetProlongation)

    def SetRestriction(self, r):
        r"""SetRestriction(FiniteElementSpace self, SparseMatrix r)"""
        return _fespace.FiniteElementSpace_SetRestriction(self, r)
    SetRestriction = _swig_new_instance_method(_fespace.FiniteElementSpace_SetRestriction)

    def SetElementOrder(self, i, p):
        r"""SetElementOrder(FiniteElementSpace self, int i, int p)"""
        return _fespace.FiniteElementSpace_SetElementOrder(self, i, p)
    SetElementOrder = _swig_new_instance_method(_fespace.FiniteElementSpace_SetElementOrder)

    def GetElementOrder(self, i):
        r"""GetElementOrder(FiniteElementSpace self, int i) -> int"""
        return _fespace.FiniteElementSpace_GetElementOrder(self, i)
    GetElementOrder = _swig_new_instance_method(_fespace.FiniteElementSpace_GetElementOrder)

    def GetMaxElementOrder(self):
        r"""GetMaxElementOrder(FiniteElementSpace self) -> int"""
        return _fespace.FiniteElementSpace_GetMaxElementOrder(self)
    GetMaxElementOrder = _swig_new_instance_method(_fespace.FiniteElementSpace_GetMaxElementOrder)

    def IsVariableOrder(self):
        r"""IsVariableOrder(FiniteElementSpace self) -> bool"""
        return _fespace.FiniteElementSpace_IsVariableOrder(self)
    IsVariableOrder = _swig_new_instance_method(_fespace.FiniteElementSpace_IsVariableOrder)

    def GetConformingProlongation(self):
        r"""GetConformingProlongation(FiniteElementSpace self) -> SparseMatrix"""
        return _fespace.FiniteElementSpace_GetConformingProlongation(self)
    GetConformingProlongation = _swig_new_instance_method(_fespace.FiniteElementSpace_GetConformingProlongation)

    def GetConformingRestriction(self):
        r"""GetConformingRestriction(FiniteElementSpace self) -> SparseMatrix"""
        return _fespace.FiniteElementSpace_GetConformingRestriction(self)
    GetConformingRestriction = _swig_new_instance_method(_fespace.FiniteElementSpace_GetConformingRestriction)

    def GetHpConformingRestriction(self):
        r"""GetHpConformingRestriction(FiniteElementSpace self) -> SparseMatrix"""
        return _fespace.FiniteElementSpace_GetHpConformingRestriction(self)
    GetHpConformingRestriction = _swig_new_instance_method(_fespace.FiniteElementSpace_GetHpConformingRestriction)

    def GetProlongationMatrix(self):
        r"""GetProlongationMatrix(FiniteElementSpace self) -> Operator"""
        return _fespace.FiniteElementSpace_GetProlongationMatrix(self)
    GetProlongationMatrix = _swig_new_instance_method(_fespace.FiniteElementSpace_GetProlongationMatrix)

    def GetRestrictionTransposeOperator(self):
        r"""GetRestrictionTransposeOperator(FiniteElementSpace self) -> Operator"""
        return _fespace.FiniteElementSpace_GetRestrictionTransposeOperator(self)
    GetRestrictionTransposeOperator = _swig_new_instance_method(_fespace.FiniteElementSpace_GetRestrictionTransposeOperator)

    def GetRestrictionOperator(self):
        r"""GetRestrictionOperator(FiniteElementSpace self) -> Operator"""
        return _fespace.FiniteElementSpace_GetRestrictionOperator(self)
    GetRestrictionOperator = _swig_new_instance_method(_fespace.FiniteElementSpace_GetRestrictionOperator)

    def GetRestrictionMatrix(self):
        r"""GetRestrictionMatrix(FiniteElementSpace self) -> SparseMatrix"""
        return _fespace.FiniteElementSpace_GetRestrictionMatrix(self)
    GetRestrictionMatrix = _swig_new_instance_method(_fespace.FiniteElementSpace_GetRestrictionMatrix)

    def GetHpRestrictionMatrix(self):
        r"""GetHpRestrictionMatrix(FiniteElementSpace self) -> SparseMatrix"""
        return _fespace.FiniteElementSpace_GetHpRestrictionMatrix(self)
    GetHpRestrictionMatrix = _swig_new_instance_method(_fespace.FiniteElementSpace_GetHpRestrictionMatrix)

    def GetElementRestriction(self, e_ordering):
        r"""GetElementRestriction(FiniteElementSpace self, mfem::ElementDofOrdering e_ordering) -> ElementRestrictionOperator"""
        return _fespace.FiniteElementSpace_GetElementRestriction(self, e_ordering)
    GetElementRestriction = _swig_new_instance_method(_fespace.FiniteElementSpace_GetElementRestriction)

    def GetFaceRestriction(self, *args, **kwargs):
        r"""GetFaceRestriction(FiniteElementSpace self, mfem::ElementDofOrdering f_ordering, mfem::FaceType arg3, mfem::L2FaceValues mul=DoubleValued) -> FaceRestriction"""
        return _fespace.FiniteElementSpace_GetFaceRestriction(self, *args, **kwargs)
    GetFaceRestriction = _swig_new_instance_method(_fespace.FiniteElementSpace_GetFaceRestriction)

    def GetQuadratureInterpolator(self, *args):
        r"""
        GetQuadratureInterpolator(FiniteElementSpace self, IntegrationRule ir) -> mfem::QuadratureInterpolator const
        GetQuadratureInterpolator(FiniteElementSpace self, mfem::QuadratureSpace const & qs) -> mfem::QuadratureInterpolator const *
        """
        return _fespace.FiniteElementSpace_GetQuadratureInterpolator(self, *args)
    GetQuadratureInterpolator = _swig_new_instance_method(_fespace.FiniteElementSpace_GetQuadratureInterpolator)

    def GetFaceQuadratureInterpolator(self, ir, type):
        r"""GetFaceQuadratureInterpolator(FiniteElementSpace self, IntegrationRule ir, mfem::FaceType type) -> mfem::FaceQuadratureInterpolator const *"""
        return _fespace.FiniteElementSpace_GetFaceQuadratureInterpolator(self, ir, type)
    GetFaceQuadratureInterpolator = _swig_new_instance_method(_fespace.FiniteElementSpace_GetFaceQuadratureInterpolator)

    def GetOrder(self, i):
        r"""GetOrder(FiniteElementSpace self, int i) -> int"""
        return _fespace.FiniteElementSpace_GetOrder(self, i)
    GetOrder = _swig_new_instance_method(_fespace.FiniteElementSpace_GetOrder)

    def GetEdgeOrder(self, edge, variant=0):
        r"""GetEdgeOrder(FiniteElementSpace self, int edge, int variant=0) -> int"""
        return _fespace.FiniteElementSpace_GetEdgeOrder(self, edge, variant)
    GetEdgeOrder = _swig_new_instance_method(_fespace.FiniteElementSpace_GetEdgeOrder)

    def GetFaceOrder(self, face, variant=0):
        r"""GetFaceOrder(FiniteElementSpace self, int face, int variant=0) -> int"""
        return _fespace.FiniteElementSpace_GetFaceOrder(self, face, variant)
    GetFaceOrder = _swig_new_instance_method(_fespace.FiniteElementSpace_GetFaceOrder)

    def GetVDim(self):
        r"""GetVDim(FiniteElementSpace self) -> int"""
        return _fespace.FiniteElementSpace_GetVDim(self)
    GetVDim = _swig_new_instance_method(_fespace.FiniteElementSpace_GetVDim)

    def GetNDofs(self):
        r"""GetNDofs(FiniteElementSpace self) -> int"""
        return _fespace.FiniteElementSpace_GetNDofs(self)
    GetNDofs = _swig_new_instance_method(_fespace.FiniteElementSpace_GetNDofs)

    def GetVSize(self):
        r"""GetVSize(FiniteElementSpace self) -> int"""
        return _fespace.FiniteElementSpace_GetVSize(self)
    GetVSize = _swig_new_instance_method(_fespace.FiniteElementSpace_GetVSize)

    def GetTrueVSize(self):
        r"""GetTrueVSize(FiniteElementSpace self) -> int"""
        return _fespace.FiniteElementSpace_GetTrueVSize(self)
    GetTrueVSize = _swig_new_instance_method(_fespace.FiniteElementSpace_GetTrueVSize)

    def GetNConformingDofs(self):
        r"""GetNConformingDofs(FiniteElementSpace self) -> int"""
        return _fespace.FiniteElementSpace_GetNConformingDofs(self)
    GetNConformingDofs = _swig_new_instance_method(_fespace.FiniteElementSpace_GetNConformingDofs)

    def GetConformingVSize(self):
        r"""GetConformingVSize(FiniteElementSpace self) -> int"""
        return _fespace.FiniteElementSpace_GetConformingVSize(self)
    GetConformingVSize = _swig_new_instance_method(_fespace.FiniteElementSpace_GetConformingVSize)

    def GetVectorDim(self):
        r"""GetVectorDim(FiniteElementSpace self) -> int"""
        return _fespace.FiniteElementSpace_GetVectorDim(self)
    GetVectorDim = _swig_new_instance_method(_fespace.FiniteElementSpace_GetVectorDim)

    def GetCurlDim(self):
        r"""GetCurlDim(FiniteElementSpace self) -> int"""
        return _fespace.FiniteElementSpace_GetCurlDim(self)
    GetCurlDim = _swig_new_instance_method(_fespace.FiniteElementSpace_GetCurlDim)

    def GetOrdering(self):
        r"""GetOrdering(FiniteElementSpace self) -> mfem::Ordering::Type"""
        return _fespace.FiniteElementSpace_GetOrdering(self)
    GetOrdering = _swig_new_instance_method(_fespace.FiniteElementSpace_GetOrdering)

    def FEColl(self):
        r"""FEColl(FiniteElementSpace self) -> FiniteElementCollection"""
        return _fespace.FiniteElementSpace_FEColl(self)
    FEColl = _swig_new_instance_method(_fespace.FiniteElementSpace_FEColl)

    def GetNVDofs(self):
        r"""GetNVDofs(FiniteElementSpace self) -> int"""
        return _fespace.FiniteElementSpace_GetNVDofs(self)
    GetNVDofs = _swig_new_instance_method(_fespace.FiniteElementSpace_GetNVDofs)

    def GetNEDofs(self):
        r"""GetNEDofs(FiniteElementSpace self) -> int"""
        return _fespace.FiniteElementSpace_GetNEDofs(self)
    GetNEDofs = _swig_new_instance_method(_fespace.FiniteElementSpace_GetNEDofs)

    def GetNFDofs(self):
        r"""GetNFDofs(FiniteElementSpace self) -> int"""
        return _fespace.FiniteElementSpace_GetNFDofs(self)
    GetNFDofs = _swig_new_instance_method(_fespace.FiniteElementSpace_GetNFDofs)

    def GetNV(self):
        r"""GetNV(FiniteElementSpace self) -> int"""
        return _fespace.FiniteElementSpace_GetNV(self)
    GetNV = _swig_new_instance_method(_fespace.FiniteElementSpace_GetNV)

    def GetNE(self):
        r"""GetNE(FiniteElementSpace self) -> int"""
        return _fespace.FiniteElementSpace_GetNE(self)
    GetNE = _swig_new_instance_method(_fespace.FiniteElementSpace_GetNE)

    def GetNF(self):
        r"""GetNF(FiniteElementSpace self) -> int"""
        return _fespace.FiniteElementSpace_GetNF(self)
    GetNF = _swig_new_instance_method(_fespace.FiniteElementSpace_GetNF)

    def GetNBE(self):
        r"""GetNBE(FiniteElementSpace self) -> int"""
        return _fespace.FiniteElementSpace_GetNBE(self)
    GetNBE = _swig_new_instance_method(_fespace.FiniteElementSpace_GetNBE)

    def GetNFbyType(self, type):
        r"""GetNFbyType(FiniteElementSpace self, mfem::FaceType type) -> int"""
        return _fespace.FiniteElementSpace_GetNFbyType(self, type)
    GetNFbyType = _swig_new_instance_method(_fespace.FiniteElementSpace_GetNFbyType)

    def GetElementType(self, i):
        r"""GetElementType(FiniteElementSpace self, int i) -> int"""
        return _fespace.FiniteElementSpace_GetElementType(self, i)
    GetElementType = _swig_new_instance_method(_fespace.FiniteElementSpace_GetElementType)

    def GetElementVertices(self, i, vertices):
        r"""GetElementVertices(FiniteElementSpace self, int i, intArray vertices)"""
        return _fespace.FiniteElementSpace_GetElementVertices(self, i, vertices)
    GetElementVertices = _swig_new_instance_method(_fespace.FiniteElementSpace_GetElementVertices)

    def GetBdrElementType(self, i):
        r"""GetBdrElementType(FiniteElementSpace self, int i) -> int"""
        return _fespace.FiniteElementSpace_GetBdrElementType(self, i)
    GetBdrElementType = _swig_new_instance_method(_fespace.FiniteElementSpace_GetBdrElementType)

    def GetElementTransformation(self, *args):
        r"""
        GetElementTransformation(FiniteElementSpace self, int i) -> ElementTransformation
        GetElementTransformation(FiniteElementSpace self, int i, IsoparametricTransformation ElTr)
        """
        return _fespace.FiniteElementSpace_GetElementTransformation(self, *args)
    GetElementTransformation = _swig_new_instance_method(_fespace.FiniteElementSpace_GetElementTransformation)

    def GetBdrElementTransformation(self, i):
        r"""GetBdrElementTransformation(FiniteElementSpace self, int i) -> ElementTransformation"""
        return _fespace.FiniteElementSpace_GetBdrElementTransformation(self, i)
    GetBdrElementTransformation = _swig_new_instance_method(_fespace.FiniteElementSpace_GetBdrElementTransformation)

    def GetAttribute(self, i):
        r"""GetAttribute(FiniteElementSpace self, int i) -> int"""
        return _fespace.FiniteElementSpace_GetAttribute(self, i)
    GetAttribute = _swig_new_instance_method(_fespace.FiniteElementSpace_GetAttribute)

    def GetBdrAttribute(self, i):
        r"""GetBdrAttribute(FiniteElementSpace self, int i) -> int"""
        return _fespace.FiniteElementSpace_GetBdrAttribute(self, i)
    GetBdrAttribute = _swig_new_instance_method(_fespace.FiniteElementSpace_GetBdrAttribute)

    def GetElementDofs(self, i):
        from  .array import intArray
        vdofs = intArray()
        _fespace.FiniteElementSpace_GetElementDofs(self, i, vdofs)
        return vdofs.ToList()



    def GetBdrElementDofs(self, i):
        from  .array import intArray
        vdofs = intArray()
        _fespace.FiniteElementSpace_GetBdrElementDofs(self, i, vdofs)
        return vdofs.ToList()



    def GetFaceDofs(self, i):
        from  .array import intArray
        vdofs = intArray()
        _fespace.FiniteElementSpace_GetFaceDofs(self, i, vdofs)
        return vdofs.ToList()



    def GetEdgeDofs(self, i):
        from  .array import intArray
        vdofs = intArray()
        _fespace.FiniteElementSpace_GetEdgeDofs(self, i, vdofs)
        return vdofs.ToList()



    def GetVertexDofs(self, i):
        from  .array import intArray
        vdofs = intArray()
        _fespace.FiniteElementSpace_GetVertexDofs(self, i, vdofs)
        return vdofs.ToList()



    def GetElementInteriorDofs(self, i):
        from  .array import intArray
        vdofs = intArray()
        _fespace.FiniteElementSpace_GetElementInteriorDofs(self, i, vdofs)
        return vdofs.ToList()



    def GetNumElementInteriorDofs(self, i):
        r"""GetNumElementInteriorDofs(FiniteElementSpace self, int i) -> int"""
        return _fespace.FiniteElementSpace_GetNumElementInteriorDofs(self, i)
    GetNumElementInteriorDofs = _swig_new_instance_method(_fespace.FiniteElementSpace_GetNumElementInteriorDofs)

    def GetFaceInteriorDofs(self, i, dofs):
        r"""GetFaceInteriorDofs(FiniteElementSpace self, int i, intArray dofs)"""
        return _fespace.FiniteElementSpace_GetFaceInteriorDofs(self, i, dofs)
    GetFaceInteriorDofs = _swig_new_instance_method(_fespace.FiniteElementSpace_GetFaceInteriorDofs)

    def GetEdgeInteriorDofs(self, i):
        from  .array import intArray
        vdofs = intArray()
        _fespace.FiniteElementSpace_GetEdgeInteriorDofs(self, i, vdofs)
        return vdofs.ToList()



    def GetPatchDofs(self, patch, dofs):
        r"""GetPatchDofs(FiniteElementSpace self, int patch, intArray dofs)"""
        return _fespace.FiniteElementSpace_GetPatchDofs(self, patch, dofs)
    GetPatchDofs = _swig_new_instance_method(_fespace.FiniteElementSpace_GetPatchDofs)

    def GetVDofs(self, vd, dofs, ndofs=-1):
        r"""GetVDofs(FiniteElementSpace self, int vd, intArray dofs, int ndofs=-1)"""
        return _fespace.FiniteElementSpace_GetVDofs(self, vd, dofs, ndofs)
    GetVDofs = _swig_new_instance_method(_fespace.FiniteElementSpace_GetVDofs)

    def DofsToVDofs(self, *args):
        r"""
        DofsToVDofs(FiniteElementSpace self, intArray dofs, int ndofs=-1)
        DofsToVDofs(FiniteElementSpace self, int vd, intArray dofs, int ndofs=-1)
        """
        return _fespace.FiniteElementSpace_DofsToVDofs(self, *args)
    DofsToVDofs = _swig_new_instance_method(_fespace.FiniteElementSpace_DofsToVDofs)

    def DofToVDof(self, dof, vd, ndofs=-1):
        r"""DofToVDof(FiniteElementSpace self, int dof, int vd, int ndofs=-1) -> int"""
        return _fespace.FiniteElementSpace_DofToVDof(self, dof, vd, ndofs)
    DofToVDof = _swig_new_instance_method(_fespace.FiniteElementSpace_DofToVDof)

    def VDofToDof(self, vdof):
        r"""VDofToDof(FiniteElementSpace self, int vdof) -> int"""
        return _fespace.FiniteElementSpace_VDofToDof(self, vdof)
    VDofToDof = _swig_new_instance_method(_fespace.FiniteElementSpace_VDofToDof)

    @staticmethod
    def AdjustVDofs(vdofs):
        r"""AdjustVDofs(intArray vdofs)"""
        return _fespace.FiniteElementSpace_AdjustVDofs(vdofs)
    AdjustVDofs = _swig_new_static_method(_fespace.FiniteElementSpace_AdjustVDofs)

    @staticmethod
    def EncodeDof(entity_base, idx):
        r"""EncodeDof(int entity_base, int idx) -> int"""
        return _fespace.FiniteElementSpace_EncodeDof(entity_base, idx)
    EncodeDof = _swig_new_static_method(_fespace.FiniteElementSpace_EncodeDof)

    @staticmethod
    def DecodeDof(*args):
        r"""
        DecodeDof(int dof) -> int
        DecodeDof(int dof, mfem::real_t & sign) -> int
        """
        return _fespace.FiniteElementSpace_DecodeDof(*args)
    DecodeDof = _swig_new_static_method(_fespace.FiniteElementSpace_DecodeDof)

    def GetElementVDofs(self, i):
        from  .array import intArray
        vdofs = intArray()
        _fespace.FiniteElementSpace_GetElementVDofs(self, i, vdofs)
        return vdofs.ToList()



    def GetBdrElementVDofs(self, i):
        from  .array import intArray
        vdofs = intArray()
        _fespace.FiniteElementSpace_GetBdrElementVDofs(self, i, vdofs)
        return vdofs.ToList()



    def GetPatchVDofs(self, i, vdofs):
        r"""GetPatchVDofs(FiniteElementSpace self, int i, intArray vdofs)"""
        return _fespace.FiniteElementSpace_GetPatchVDofs(self, i, vdofs)
    GetPatchVDofs = _swig_new_instance_method(_fespace.FiniteElementSpace_GetPatchVDofs)

    def GetFaceVDofs(self, i):
        from  .array import intArray
        vdofs = intArray()
        _fespace.FiniteElementSpace_GetFaceVDofs(self, i, vdofs)
        return vdofs.ToList()



    def GetEdgeVDofs(self, i):
        from  .array import intArray
        vdofs = intArray()
        _fespace.FiniteElementSpace_GetEdgeVDofs(self, i, vdofs)
        return vdofs.ToList()



    def GetVertexVDofs(self, i):
        from  .array import intArray
        vdofs = intArray()
        _fespace.FiniteElementSpace_GetVertexVDofs(self, i, vdofs)
        return vdofs.ToList()



    def GetElementInteriorVDofs(self, i):
        from  .array import intArray
        vdofs = intArray()
        _fespace.FiniteElementSpace_GetElementInteriorVDofs(self, i, vdofs)
        return vdofs.ToList()



    def GetEdgeInteriorVDofs(self, i):
        from  .array import intArray
        vdofs = intArray()
        _fespace.FiniteElementSpace_GetEdgeInteriorVDofs(self, i, vdofs)
        return vdofs.ToList()



    def RebuildElementToDofTable(self):
        r"""RebuildElementToDofTable(FiniteElementSpace self)"""
        return _fespace.FiniteElementSpace_RebuildElementToDofTable(self)
    RebuildElementToDofTable = _swig_new_instance_method(_fespace.FiniteElementSpace_RebuildElementToDofTable)

    def ReorderElementToDofTable(self):
        r"""ReorderElementToDofTable(FiniteElementSpace self)"""
        return _fespace.FiniteElementSpace_ReorderElementToDofTable(self)
    ReorderElementToDofTable = _swig_new_instance_method(_fespace.FiniteElementSpace_ReorderElementToDofTable)

    def GetElementToFaceOrientationTable(self):
        r"""GetElementToFaceOrientationTable(FiniteElementSpace self) -> Table"""
        return _fespace.FiniteElementSpace_GetElementToFaceOrientationTable(self)
    GetElementToFaceOrientationTable = _swig_new_instance_method(_fespace.FiniteElementSpace_GetElementToFaceOrientationTable)

    def GetElementToDofTable(self):
        r"""GetElementToDofTable(FiniteElementSpace self) -> Table"""
        return _fespace.FiniteElementSpace_GetElementToDofTable(self)
    GetElementToDofTable = _swig_new_instance_method(_fespace.FiniteElementSpace_GetElementToDofTable)

    def GetBdrElementToDofTable(self):
        r"""GetBdrElementToDofTable(FiniteElementSpace self) -> Table"""
        return _fespace.FiniteElementSpace_GetBdrElementToDofTable(self)
    GetBdrElementToDofTable = _swig_new_instance_method(_fespace.FiniteElementSpace_GetBdrElementToDofTable)

    def GetFaceToDofTable(self):
        r"""GetFaceToDofTable(FiniteElementSpace self) -> Table"""
        return _fespace.FiniteElementSpace_GetFaceToDofTable(self)
    GetFaceToDofTable = _swig_new_instance_method(_fespace.FiniteElementSpace_GetFaceToDofTable)

    def BuildDofToArrays(self):
        r"""BuildDofToArrays(FiniteElementSpace self)"""
        return _fespace.FiniteElementSpace_BuildDofToArrays(self)
    BuildDofToArrays = _swig_new_instance_method(_fespace.FiniteElementSpace_BuildDofToArrays)

    def GetElementForDof(self, i):
        r"""GetElementForDof(FiniteElementSpace self, int i) -> int"""
        return _fespace.FiniteElementSpace_GetElementForDof(self, i)
    GetElementForDof = _swig_new_instance_method(_fespace.FiniteElementSpace_GetElementForDof)

    def GetLocalDofForDof(self, i):
        r"""GetLocalDofForDof(FiniteElementSpace self, int i) -> int"""
        return _fespace.FiniteElementSpace_GetLocalDofForDof(self, i)
    GetLocalDofForDof = _swig_new_instance_method(_fespace.FiniteElementSpace_GetLocalDofForDof)

    def GetBdrElementForDof(self, i):
        r"""GetBdrElementForDof(FiniteElementSpace self, int i) -> int"""
        return _fespace.FiniteElementSpace_GetBdrElementForDof(self, i)
    GetBdrElementForDof = _swig_new_instance_method(_fespace.FiniteElementSpace_GetBdrElementForDof)

    def GetBdrLocalDofForDof(self, i):
        r"""GetBdrLocalDofForDof(FiniteElementSpace self, int i) -> int"""
        return _fespace.FiniteElementSpace_GetBdrLocalDofForDof(self, i)
    GetBdrLocalDofForDof = _swig_new_instance_method(_fespace.FiniteElementSpace_GetBdrLocalDofForDof)

    def GetFE(self, i):
        r"""GetFE(FiniteElementSpace self, int i) -> FiniteElement"""
        return _fespace.FiniteElementSpace_GetFE(self, i)
    GetFE = _swig_new_instance_method(_fespace.FiniteElementSpace_GetFE)

    def GetTypicalFE(self):
        r"""GetTypicalFE(FiniteElementSpace self) -> FiniteElement"""
        return _fespace.FiniteElementSpace_GetTypicalFE(self)
    GetTypicalFE = _swig_new_instance_method(_fespace.FiniteElementSpace_GetTypicalFE)

    def GetBE(self, i):
        r"""GetBE(FiniteElementSpace self, int i) -> FiniteElement"""
        return _fespace.FiniteElementSpace_GetBE(self, i)
    GetBE = _swig_new_instance_method(_fespace.FiniteElementSpace_GetBE)

    def GetFaceElement(self, i):
        r"""GetFaceElement(FiniteElementSpace self, int i) -> FiniteElement"""
        return _fespace.FiniteElementSpace_GetFaceElement(self, i)
    GetFaceElement = _swig_new_instance_method(_fespace.FiniteElementSpace_GetFaceElement)

    def GetEdgeElement(self, i, variant=0):
        r"""GetEdgeElement(FiniteElementSpace self, int i, int variant=0) -> FiniteElement"""
        return _fespace.FiniteElementSpace_GetEdgeElement(self, i, variant)
    GetEdgeElement = _swig_new_instance_method(_fespace.FiniteElementSpace_GetEdgeElement)

    def GetTraceElement(self, i, geom_type):
        r"""GetTraceElement(FiniteElementSpace self, int i, mfem::Geometry::Type geom_type) -> FiniteElement"""
        return _fespace.FiniteElementSpace_GetTraceElement(self, i, geom_type)
    GetTraceElement = _swig_new_instance_method(_fespace.FiniteElementSpace_GetTraceElement)

    def GetTypicalTraceElement(self):
        r"""GetTypicalTraceElement(FiniteElementSpace self) -> FiniteElement"""
        return _fespace.FiniteElementSpace_GetTypicalTraceElement(self)
    GetTypicalTraceElement = _swig_new_instance_method(_fespace.FiniteElementSpace_GetTypicalTraceElement)

    def GetEssentialVDofs(self, bdr_attr_is_ess, ess_vdofs, component=-1):
        r"""GetEssentialVDofs(FiniteElementSpace self, intArray bdr_attr_is_ess, intArray ess_vdofs, int component=-1)"""
        return _fespace.FiniteElementSpace_GetEssentialVDofs(self, bdr_attr_is_ess, ess_vdofs, component)
    GetEssentialVDofs = _swig_new_instance_method(_fespace.FiniteElementSpace_GetEssentialVDofs)

    def GetEssentialTrueDofs(self, bdr_attr_is_ess, ess_tdof_list, component=-1):
        r"""GetEssentialTrueDofs(FiniteElementSpace self, intArray bdr_attr_is_ess, intArray ess_tdof_list, int component=-1)"""
        return _fespace.FiniteElementSpace_GetEssentialTrueDofs(self, bdr_attr_is_ess, ess_tdof_list, component)
    GetEssentialTrueDofs = _swig_new_instance_method(_fespace.FiniteElementSpace_GetEssentialTrueDofs)

    def GetBoundaryTrueDofs(self, boundary_dofs, component=-1):
        r"""GetBoundaryTrueDofs(FiniteElementSpace self, intArray boundary_dofs, int component=-1)"""
        return _fespace.FiniteElementSpace_GetBoundaryTrueDofs(self, boundary_dofs, component)
    GetBoundaryTrueDofs = _swig_new_instance_method(_fespace.FiniteElementSpace_GetBoundaryTrueDofs)

    def GetExteriorVDofs(self, exterior_vdofs, component=-1):
        r"""GetExteriorVDofs(FiniteElementSpace self, intArray exterior_vdofs, int component=-1)"""
        return _fespace.FiniteElementSpace_GetExteriorVDofs(self, exterior_vdofs, component)
    GetExteriorVDofs = _swig_new_instance_method(_fespace.FiniteElementSpace_GetExteriorVDofs)

    def GetExteriorTrueDofs(self, exterior_dofs, component=-1):
        r"""GetExteriorTrueDofs(FiniteElementSpace self, intArray exterior_dofs, int component=-1)"""
        return _fespace.FiniteElementSpace_GetExteriorTrueDofs(self, exterior_dofs, component)
    GetExteriorTrueDofs = _swig_new_instance_method(_fespace.FiniteElementSpace_GetExteriorTrueDofs)

    @staticmethod
    def MarkerToList(marker, list):
        r"""MarkerToList(intArray marker, intArray list)"""
        return _fespace.FiniteElementSpace_MarkerToList(marker, list)
    MarkerToList = _swig_new_static_method(_fespace.FiniteElementSpace_MarkerToList)

    @staticmethod
    def ListToMarker(list, marker_size, marker, mark_val=-1):
        r"""ListToMarker(intArray list, int marker_size, intArray marker, int mark_val=-1)"""
        return _fespace.FiniteElementSpace_ListToMarker(list, marker_size, marker, mark_val)
    ListToMarker = _swig_new_static_method(_fespace.FiniteElementSpace_ListToMarker)

    def ConvertToConformingVDofs(self, dofs, cdofs):
        r"""ConvertToConformingVDofs(FiniteElementSpace self, intArray dofs, intArray cdofs)"""
        return _fespace.FiniteElementSpace_ConvertToConformingVDofs(self, dofs, cdofs)
    ConvertToConformingVDofs = _swig_new_instance_method(_fespace.FiniteElementSpace_ConvertToConformingVDofs)

    def ConvertFromConformingVDofs(self, cdofs, dofs):
        r"""ConvertFromConformingVDofs(FiniteElementSpace self, intArray cdofs, intArray dofs)"""
        return _fespace.FiniteElementSpace_ConvertFromConformingVDofs(self, cdofs, dofs)
    ConvertFromConformingVDofs = _swig_new_instance_method(_fespace.FiniteElementSpace_ConvertFromConformingVDofs)

    def D2C_GlobalRestrictionMatrix(self, cfes):
        r"""D2C_GlobalRestrictionMatrix(FiniteElementSpace self, FiniteElementSpace cfes) -> SparseMatrix"""
        return _fespace.FiniteElementSpace_D2C_GlobalRestrictionMatrix(self, cfes)
    D2C_GlobalRestrictionMatrix = _swig_new_instance_method(_fespace.FiniteElementSpace_D2C_GlobalRestrictionMatrix)

    def D2Const_GlobalRestrictionMatrix(self, cfes):
        r"""D2Const_GlobalRestrictionMatrix(FiniteElementSpace self, FiniteElementSpace cfes) -> SparseMatrix"""
        return _fespace.FiniteElementSpace_D2Const_GlobalRestrictionMatrix(self, cfes)
    D2Const_GlobalRestrictionMatrix = _swig_new_instance_method(_fespace.FiniteElementSpace_D2Const_GlobalRestrictionMatrix)

    def H2L_GlobalRestrictionMatrix(self, lfes):
        r"""H2L_GlobalRestrictionMatrix(FiniteElementSpace self, FiniteElementSpace lfes) -> SparseMatrix"""
        return _fespace.FiniteElementSpace_H2L_GlobalRestrictionMatrix(self, lfes)
    H2L_GlobalRestrictionMatrix = _swig_new_instance_method(_fespace.FiniteElementSpace_H2L_GlobalRestrictionMatrix)

    def GetTransferOperator(self, coarse_fes, T):
        r"""GetTransferOperator(FiniteElementSpace self, FiniteElementSpace coarse_fes, OperatorHandle T)"""
        return _fespace.FiniteElementSpace_GetTransferOperator(self, coarse_fes, T)
    GetTransferOperator = _swig_new_instance_method(_fespace.FiniteElementSpace_GetTransferOperator)

    def GetTrueTransferOperator(self, coarse_fes, T):
        r"""GetTrueTransferOperator(FiniteElementSpace self, FiniteElementSpace coarse_fes, OperatorHandle T)"""
        return _fespace.FiniteElementSpace_GetTrueTransferOperator(self, coarse_fes, T)
    GetTrueTransferOperator = _swig_new_instance_method(_fespace.FiniteElementSpace_GetTrueTransferOperator)

    def Update(self, want_transform=True):
        r"""Update(FiniteElementSpace self, bool want_transform=True)"""
        return _fespace.FiniteElementSpace_Update(self, want_transform)
    Update = _swig_new_instance_method(_fespace.FiniteElementSpace_Update)

    def PRefineAndUpdate(self, refs, want_transfer=True):
        r"""PRefineAndUpdate(FiniteElementSpace self, mfem::Array< mfem::pRefinement > const & refs, bool want_transfer=True)"""
        return _fespace.FiniteElementSpace_PRefineAndUpdate(self, refs, want_transfer)
    PRefineAndUpdate = _swig_new_instance_method(_fespace.FiniteElementSpace_PRefineAndUpdate)

    def PRefinementSupported(self):
        r"""PRefinementSupported(FiniteElementSpace self) -> bool"""
        return _fespace.FiniteElementSpace_PRefinementSupported(self)
    PRefinementSupported = _swig_new_instance_method(_fespace.FiniteElementSpace_PRefinementSupported)

    def GetUpdateOperator(self, *args):
        r"""
        GetUpdateOperator(FiniteElementSpace self) -> Operator
        GetUpdateOperator(FiniteElementSpace self, OperatorHandle T)
        """
        return _fespace.FiniteElementSpace_GetUpdateOperator(self, *args)
    GetUpdateOperator = _swig_new_instance_method(_fespace.FiniteElementSpace_GetUpdateOperator)

    def GetPrefUpdateOperator(self):
        r"""GetPrefUpdateOperator(FiniteElementSpace self) -> std::shared_ptr< mfem::PRefinementTransferOperator const >"""
        return _fespace.FiniteElementSpace_GetPrefUpdateOperator(self)
    GetPrefUpdateOperator = _swig_new_instance_method(_fespace.FiniteElementSpace_GetPrefUpdateOperator)

    def SetUpdateOperatorOwner(self, own):
        r"""SetUpdateOperatorOwner(FiniteElementSpace self, bool own)"""
        return _fespace.FiniteElementSpace_SetUpdateOperatorOwner(self, own)
    SetUpdateOperatorOwner = _swig_new_instance_method(_fespace.FiniteElementSpace_SetUpdateOperatorOwner)

    def SetUpdateOperatorType(self, tid):
        r"""SetUpdateOperatorType(FiniteElementSpace self, mfem::Operator::Type tid)"""
        return _fespace.FiniteElementSpace_SetUpdateOperatorType(self, tid)
    SetUpdateOperatorType = _swig_new_instance_method(_fespace.FiniteElementSpace_SetUpdateOperatorType)

    def UpdatesFinished(self):
        r"""UpdatesFinished(FiniteElementSpace self)"""
        return _fespace.FiniteElementSpace_UpdatesFinished(self)
    UpdatesFinished = _swig_new_instance_method(_fespace.FiniteElementSpace_UpdatesFinished)

    def GetSequence(self):
        r"""GetSequence(FiniteElementSpace self) -> long"""
        return _fespace.FiniteElementSpace_GetSequence(self)
    GetSequence = _swig_new_instance_method(_fespace.FiniteElementSpace_GetSequence)

    def LastUpdatePRef(self):
        r"""LastUpdatePRef(FiniteElementSpace self) -> bool"""
        return _fespace.FiniteElementSpace_LastUpdatePRef(self)
    LastUpdatePRef = _swig_new_instance_method(_fespace.FiniteElementSpace_LastUpdatePRef)

    def IsDGSpace(self):
        r"""IsDGSpace(FiniteElementSpace self) -> bool"""
        return _fespace.FiniteElementSpace_IsDGSpace(self)
    IsDGSpace = _swig_new_instance_method(_fespace.FiniteElementSpace_IsDGSpace)

    def SetRelaxedHpConformity(self, relaxed=True):
        r"""SetRelaxedHpConformity(FiniteElementSpace self, bool relaxed=True)"""
        return _fespace.FiniteElementSpace_SetRelaxedHpConformity(self, relaxed)
    SetRelaxedHpConformity = _swig_new_instance_method(_fespace.FiniteElementSpace_SetRelaxedHpConformity)

    def GetNodePositions(self, *args, **kwargs):
        r"""GetNodePositions(FiniteElementSpace self, Vector mesh_nodes, Vector fes_node_pos, int fes_nodes_ordering=byNODES)"""
        return _fespace.FiniteElementSpace_GetNodePositions(self, *args, **kwargs)
    GetNodePositions = _swig_new_instance_method(_fespace.FiniteElementSpace_GetNodePositions)

    def Load(self, m, input):
        r"""Load(FiniteElementSpace self, Mesh m, std::istream & input) -> FiniteElementCollection"""
        return _fespace.FiniteElementSpace_Load(self, m, input)
    Load = _swig_new_instance_method(_fespace.FiniteElementSpace_Load)
    __swig_destroy__ = _fespace.delete_FiniteElementSpace

    def SaveGZ(self, file, precision=16):
        r"""SaveGZ(FiniteElementSpace self, char const * file, int precision=16)"""
        return _fespace.FiniteElementSpace_SaveGZ(self, file, precision)
    SaveGZ = _swig_new_instance_method(_fespace.FiniteElementSpace_SaveGZ)

    def Save(self, *args):
        r"""
        Save(FiniteElementSpace self, std::ostream & out)
        Save(FiniteElementSpace self, char const * file, int precision=16)
        Save(FiniteElementSpace self)
        """
        return _fespace.FiniteElementSpace_Save(self, *args)
    Save = _swig_new_instance_method(_fespace.FiniteElementSpace_Save)

    def GetElementDofTransformation(self, elem):
        r"""GetElementDofTransformation(FiniteElementSpace self, int elem) -> DofTransformation"""
        return _fespace.FiniteElementSpace_GetElementDofTransformation(self, elem)
    GetElementDofTransformation = _swig_new_instance_method(_fespace.FiniteElementSpace_GetElementDofTransformation)

    def GetBdrElementDofTransformation(self, bel):
        r"""GetBdrElementDofTransformation(FiniteElementSpace self, int bel) -> DofTransformation"""
        return _fespace.FiniteElementSpace_GetBdrElementDofTransformation(self, bel)
    GetBdrElementDofTransformation = _swig_new_instance_method(_fespace.FiniteElementSpace_GetBdrElementDofTransformation)

    def GetElementVDofTransformation(self, elem):
        r"""GetElementVDofTransformation(FiniteElementSpace self, int elem) -> DofTransformation"""
        return _fespace.FiniteElementSpace_GetElementVDofTransformation(self, elem)
    GetElementVDofTransformation = _swig_new_instance_method(_fespace.FiniteElementSpace_GetElementVDofTransformation)

    def GetBdrElementVDofTransformation(self, bel):
        r"""GetBdrElementVDofTransformation(FiniteElementSpace self, int bel) -> DofTransformation"""
        return _fespace.FiniteElementSpace_GetBdrElementVDofTransformation(self, bel)
    GetBdrElementVDofTransformation = _swig_new_instance_method(_fespace.FiniteElementSpace_GetBdrElementVDofTransformation)

# Register FiniteElementSpace in _fespace:
_fespace.FiniteElementSpace_swigregister(FiniteElementSpace)

def UsesTensorBasis(fes):
    r"""UsesTensorBasis(FiniteElementSpace fes) -> bool"""
    return _fespace.UsesTensorBasis(fes)
UsesTensorBasis = _fespace.UsesTensorBasis

def GetEVectorOrdering(fes):
    r"""GetEVectorOrdering(FiniteElementSpace fes) -> mfem::ElementDofOrdering"""
    return _fespace.GetEVectorOrdering(fes)
GetEVectorOrdering = _fespace.GetEVectorOrdering

