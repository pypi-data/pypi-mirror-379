# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tmop
else:
    import _tmop

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _tmop.SWIG_PyInstanceMethod_New
_swig_new_static_method = _tmop.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

MFEM_VERSION = _tmop.MFEM_VERSION
MFEM_VERSION_STRING = _tmop.MFEM_VERSION_STRING
MFEM_VERSION_TYPE = _tmop.MFEM_VERSION_TYPE
MFEM_VERSION_TYPE_RELEASE = _tmop.MFEM_VERSION_TYPE_RELEASE
MFEM_VERSION_TYPE_DEVELOPMENT = _tmop.MFEM_VERSION_TYPE_DEVELOPMENT
MFEM_VERSION_MAJOR = _tmop.MFEM_VERSION_MAJOR
MFEM_VERSION_MINOR = _tmop.MFEM_VERSION_MINOR
MFEM_VERSION_PATCH = _tmop.MFEM_VERSION_PATCH
MFEM_SKIP_RETURN_VALUE = _tmop.MFEM_SKIP_RETURN_VALUE
import mfem._ser.intrules
import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.globals
import mfem._ser.gridfunc
import mfem._ser.vector
import mfem._ser.coefficient
import mfem._ser.matrix
import mfem._ser.operators
import mfem._ser.symmat
import mfem._ser.sparsemat
import mfem._ser.densemat
import mfem._ser.eltrans
import mfem._ser.fe
import mfem._ser.geom
import mfem._ser.fe_base
import mfem._ser.doftrans
import mfem._ser.fe_fixed_order
import mfem._ser.element
import mfem._ser.table
import mfem._ser.hash
import mfem._ser.fe_h1
import mfem._ser.fe_nd
import mfem._ser.fe_rt
import mfem._ser.fe_l2
import mfem._ser.fe_nurbs
import mfem._ser.fe_pos
import mfem._ser.fe_ser
import mfem._ser.mesh
import mfem._ser.attribute_sets
import mfem._ser.arrays_by_name
import mfem._ser.sort_pairs
import mfem._ser.ncmesh
import mfem._ser.vertex
import mfem._ser.vtk
import mfem._ser.std_vectors
import mfem._ser.fespace
import mfem._ser.fe_coll
import mfem._ser.lininteg
import mfem._ser.handle
import mfem._ser.restriction
import mfem._ser.bilininteg
import mfem._ser.linearform
import mfem._ser.nonlininteg
import mfem._ser.integrator
import mfem._ser.bounds
class TMOP_IntegratorArray(object):
    r"""Proxy of C++ mfem::Array< mfem::TMOP_Integrator * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _tmop.delete_TMOP_IntegratorArray

    def GetData(self, *args):
        r"""
        GetData(TMOP_IntegratorArray self) -> TMOP_Integrator
        GetData(TMOP_IntegratorArray self) -> mfem::TMOP_Integrator *const *
        """
        return _tmop.TMOP_IntegratorArray_GetData(self, *args)
    GetData = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_GetData)

    def GetMemory(self, *args):
        r"""
        GetMemory(TMOP_IntegratorArray self) -> mfem::Memory< mfem::TMOP_Integrator * >
        GetMemory(TMOP_IntegratorArray self) -> mfem::Memory< mfem::TMOP_Integrator * > const &
        """
        return _tmop.TMOP_IntegratorArray_GetMemory(self, *args)
    GetMemory = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_GetMemory)

    def UseDevice(self):
        r"""UseDevice(TMOP_IntegratorArray self) -> bool"""
        return _tmop.TMOP_IntegratorArray_UseDevice(self)
    UseDevice = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_UseDevice)

    def OwnsData(self):
        r"""OwnsData(TMOP_IntegratorArray self) -> bool"""
        return _tmop.TMOP_IntegratorArray_OwnsData(self)
    OwnsData = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_OwnsData)

    def StealData(self, p):
        r"""StealData(TMOP_IntegratorArray self, mfem::TMOP_Integrator *** p)"""
        return _tmop.TMOP_IntegratorArray_StealData(self, p)
    StealData = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_StealData)

    def LoseData(self):
        r"""LoseData(TMOP_IntegratorArray self)"""
        return _tmop.TMOP_IntegratorArray_LoseData(self)
    LoseData = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_LoseData)

    def MakeDataOwner(self):
        r"""MakeDataOwner(TMOP_IntegratorArray self)"""
        return _tmop.TMOP_IntegratorArray_MakeDataOwner(self)
    MakeDataOwner = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_MakeDataOwner)

    def Size(self):
        r"""Size(TMOP_IntegratorArray self) -> int"""
        return _tmop.TMOP_IntegratorArray_Size(self)
    Size = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_Size)

    def SetSize(self, *args):
        r"""
        SetSize(TMOP_IntegratorArray self, int nsize)
        SetSize(TMOP_IntegratorArray self, int nsize, TMOP_Integrator initval)
        SetSize(TMOP_IntegratorArray self, int nsize, mfem::MemoryType mt)
        """
        return _tmop.TMOP_IntegratorArray_SetSize(self, *args)
    SetSize = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_SetSize)

    def Capacity(self):
        r"""Capacity(TMOP_IntegratorArray self) -> int"""
        return _tmop.TMOP_IntegratorArray_Capacity(self)
    Capacity = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_Capacity)

    def Reserve(self, capacity):
        r"""Reserve(TMOP_IntegratorArray self, int capacity)"""
        return _tmop.TMOP_IntegratorArray_Reserve(self, capacity)
    Reserve = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_Reserve)

    def Append(self, *args):
        r"""
        Append(TMOP_IntegratorArray self, TMOP_Integrator el) -> int
        Append(TMOP_IntegratorArray self, mfem::TMOP_Integrator *const * els, int nels) -> int
        Append(TMOP_IntegratorArray self, TMOP_IntegratorArray els) -> int
        """

        if isinstance(args[0], list):
           return self.Append(self.__class__(args[0]))
        if isinstance(args[0], tuple):
           return self.Append(self.__class__(args[0]))


        return _tmop.TMOP_IntegratorArray_Append(self, *args)


    def Prepend(self, el):
        r"""Prepend(TMOP_IntegratorArray self, TMOP_Integrator el) -> int"""
        return _tmop.TMOP_IntegratorArray_Prepend(self, el)
    Prepend = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_Prepend)

    def Last(self, *args):
        r"""
        Last(TMOP_IntegratorArray self) -> TMOP_Integrator
        Last(TMOP_IntegratorArray self) -> TMOP_Integrator
        """
        return _tmop.TMOP_IntegratorArray_Last(self, *args)
    Last = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_Last)

    def DeleteLast(self):
        r"""DeleteLast(TMOP_IntegratorArray self)"""
        return _tmop.TMOP_IntegratorArray_DeleteLast(self)
    DeleteLast = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_DeleteLast)

    def DeleteAll(self):
        r"""DeleteAll(TMOP_IntegratorArray self)"""
        return _tmop.TMOP_IntegratorArray_DeleteAll(self)
    DeleteAll = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_DeleteAll)

    def ShrinkToFit(self):
        r"""ShrinkToFit(TMOP_IntegratorArray self)"""
        return _tmop.TMOP_IntegratorArray_ShrinkToFit(self)
    ShrinkToFit = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_ShrinkToFit)

    def Copy(self, copy):
        r"""Copy(TMOP_IntegratorArray self, TMOP_IntegratorArray copy)"""
        return _tmop.TMOP_IntegratorArray_Copy(self, copy)
    Copy = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_Copy)

    def MakeRef(self, *args):
        r"""
        MakeRef(TMOP_IntegratorArray self, mfem::TMOP_Integrator ** data_, int size_, bool own_data=False)
        MakeRef(TMOP_IntegratorArray self, mfem::TMOP_Integrator ** data_, int size, mfem::MemoryType mt, bool own_data)
        MakeRef(TMOP_IntegratorArray self, TMOP_IntegratorArray master)
        """
        return _tmop.TMOP_IntegratorArray_MakeRef(self, *args)
    MakeRef = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_MakeRef)

    def GetSubArray(self, offset, sa_size, sa):
        r"""GetSubArray(TMOP_IntegratorArray self, int offset, int sa_size, TMOP_IntegratorArray sa)"""
        return _tmop.TMOP_IntegratorArray_GetSubArray(self, offset, sa_size, sa)
    GetSubArray = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_GetSubArray)

    def IsEmpty(self):
        r"""IsEmpty(TMOP_IntegratorArray self) -> bool"""
        return _tmop.TMOP_IntegratorArray_IsEmpty(self)
    IsEmpty = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_IsEmpty)

    def begin(self, *args):
        r"""
        begin(TMOP_IntegratorArray self) -> TMOP_Integrator
        begin(TMOP_IntegratorArray self) -> mfem::TMOP_Integrator *const *
        """
        return _tmop.TMOP_IntegratorArray_begin(self, *args)
    begin = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_begin)

    def end(self, *args):
        r"""
        end(TMOP_IntegratorArray self) -> TMOP_Integrator
        end(TMOP_IntegratorArray self) -> mfem::TMOP_Integrator *const *
        """
        return _tmop.TMOP_IntegratorArray_end(self, *args)
    end = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_end)

    def MemoryUsage(self):
        r"""MemoryUsage(TMOP_IntegratorArray self) -> std::size_t"""
        return _tmop.TMOP_IntegratorArray_MemoryUsage(self)
    MemoryUsage = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_MemoryUsage)

    def Read(self, on_dev=True):
        r"""Read(TMOP_IntegratorArray self, bool on_dev=True) -> mfem::TMOP_Integrator *const *"""
        return _tmop.TMOP_IntegratorArray_Read(self, on_dev)
    Read = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_Read)

    def HostRead(self):
        r"""HostRead(TMOP_IntegratorArray self) -> mfem::TMOP_Integrator *const *"""
        return _tmop.TMOP_IntegratorArray_HostRead(self)
    HostRead = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_HostRead)

    def Write(self, on_dev=True):
        r"""Write(TMOP_IntegratorArray self, bool on_dev=True) -> mfem::TMOP_Integrator **"""
        return _tmop.TMOP_IntegratorArray_Write(self, on_dev)
    Write = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_Write)

    def HostWrite(self):
        r"""HostWrite(TMOP_IntegratorArray self) -> mfem::TMOP_Integrator **"""
        return _tmop.TMOP_IntegratorArray_HostWrite(self)
    HostWrite = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_HostWrite)

    def ReadWrite(self, on_dev=True):
        r"""ReadWrite(TMOP_IntegratorArray self, bool on_dev=True) -> mfem::TMOP_Integrator **"""
        return _tmop.TMOP_IntegratorArray_ReadWrite(self, on_dev)
    ReadWrite = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_ReadWrite)

    def HostReadWrite(self):
        r"""HostReadWrite(TMOP_IntegratorArray self) -> mfem::TMOP_Integrator **"""
        return _tmop.TMOP_IntegratorArray_HostReadWrite(self)
    HostReadWrite = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_HostReadWrite)

    def __init__(self, *args):
        r"""
        __init__(TMOP_IntegratorArray self) -> TMOP_IntegratorArray
        __init__(TMOP_IntegratorArray self, mfem::MemoryType mt) -> TMOP_IntegratorArray
        __init__(TMOP_IntegratorArray self, int asize) -> TMOP_IntegratorArray
        __init__(TMOP_IntegratorArray self, int asize, mfem::MemoryType mt) -> TMOP_IntegratorArray
        __init__(TMOP_IntegratorArray self, mfem::TMOP_Integrator ** data_, int asize, bool own_data=False) -> TMOP_IntegratorArray
        __init__(TMOP_IntegratorArray self, TMOP_IntegratorArray src) -> TMOP_IntegratorArray
        __init__(TMOP_IntegratorArray self, TMOP_IntegratorArray src) -> TMOP_IntegratorArray
        __init__(TMOP_IntegratorArray self, void * List_or_Tuple, mfem::TMOP_Integrator ** _unused) -> TMOP_IntegratorArray
        """
        _tmop.TMOP_IntegratorArray_swiginit(self, _tmop.new_TMOP_IntegratorArray(*args))

    def __setitem__(self, i, v):
        r"""__setitem__(TMOP_IntegratorArray self, int i, TMOP_Integrator v)"""

        i = int(i)
        if hasattr(v, "thisown"):
            v.thisown = False


        return _tmop.TMOP_IntegratorArray___setitem__(self, i, v)


    def Assign(self, *args):
        r"""
        Assign(TMOP_IntegratorArray self, mfem::TMOP_Integrator *const * arg2)
        Assign(TMOP_IntegratorArray self, TMOP_Integrator a)
        """
        return _tmop.TMOP_IntegratorArray_Assign(self, *args)
    Assign = _swig_new_instance_method(_tmop.TMOP_IntegratorArray_Assign)

    def ToList(self):
        return [self[i] for i in range(self.Size())]



    def __iter__(self):
        class iter_array:
            def __init__(self, obj):
                self.obj = obj
                self.idx = 0
                self.size = obj.Size()
            def __iter__(self):
                self.idx = 0
            def __next__(self):
                if self.idx < self.size:
                    res = self.obj[self.idx]
                    self.idx += 1
                    return res
                else:
                    raise StopIteration
        return iter_array(self)



    def __getitem__(self, param):
        r"""__getitem__(TMOP_IntegratorArray self, PyObject * param) -> PyObject *"""
        return _tmop.TMOP_IntegratorArray___getitem__(self, param)
    __getitem__ = _swig_new_instance_method(_tmop.TMOP_IntegratorArray___getitem__)

# Register TMOP_IntegratorArray in _tmop:
_tmop.TMOP_IntegratorArray_swigregister(TMOP_IntegratorArray)

def Swap(*args):
    r"""
    Swap(intArray arg1, intArray arg2)
    Swap(doubleArray arg1, doubleArray arg2)
    Swap(int8Array arg1, int8Array arg2)
    Swap(int64Array arg1, int64Array arg2)
    Swap(boolArray arg1, boolArray arg2)
    Swap(uintArray arg1, uintArray arg2)
    Swap(intArrayArray arg1, intArrayArray arg2)
    Swap(intArray2D arg1, intArray2D arg2)
    Swap(doubleArray2D arg1, doubleArray2D arg2)
    Swap(DenseMatrixArray2D arg1, DenseMatrixArray2D arg2)
    Swap(SparseMatrixArray2D arg1, SparseMatrixArray2D arg2)
    Swap(IntegrationPointArray arg1, IntegrationPointArray arg2)
    Swap(IntegrationRuleArray arg1, IntegrationRuleArray arg2)
    Swap(VectorArray arg1, VectorArray arg2)
    Swap(OperatorArray arg1, OperatorArray arg2)
    Swap(SolverArray arg1, SolverArray arg2)
    Swap(GeometryTypeArray arg1, GeometryTypeArray arg2)
    Swap(CoefficientArray arg1, CoefficientArray arg2)
    Swap(VectorCoefficientArray arg1, VectorCoefficientArray arg2)
    Swap(MatrixCoefficientArray arg1, MatrixCoefficientArray arg2)
    Swap(CoarseFineTransformations a, CoarseFineTransformations b)
    Swap(RefinementArray arg1, RefinementArray arg2)
    Swap(FiniteElementSpaceArray arg1, FiniteElementSpaceArray arg2)
    Swap(TMOP_IntegratorArray arg1, TMOP_IntegratorArray arg2)
    """
    return _tmop.Swap(*args)
Swap = _tmop.Swap

class TMOP_QualityMetric(mfem._ser.nonlininteg.HyperelasticModel):
    r"""Proxy of C++ mfem::TMOP_QualityMetric class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tmop.delete_TMOP_QualityMetric

    def SetTargetJacobian(self, Jtr_):
        r"""SetTargetJacobian(TMOP_QualityMetric self, DenseMatrix Jtr_)"""
        return _tmop.TMOP_QualityMetric_SetTargetJacobian(self, Jtr_)
    SetTargetJacobian = _swig_new_instance_method(_tmop.TMOP_QualityMetric_SetTargetJacobian)

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_QualityMetric self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_QualityMetric_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_QualityMetric_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_QualityMetric self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_QualityMetric_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_QualityMetric_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_QualityMetric self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_QualityMetric_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_QualityMetric_EvalP)

    def EvalPW(self, Jpt, PW):
        r"""EvalPW(TMOP_QualityMetric self, DenseMatrix Jpt, DenseMatrix PW)"""
        return _tmop.TMOP_QualityMetric_EvalPW(self, Jpt, PW)
    EvalPW = _swig_new_instance_method(_tmop.TMOP_QualityMetric_EvalPW)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_QualityMetric self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_QualityMetric_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_QualityMetric_AssembleH)

    def Id(self):
        r"""Id(TMOP_QualityMetric self) -> int"""
        return _tmop.TMOP_QualityMetric_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_QualityMetric_Id)

# Register TMOP_QualityMetric in _tmop:
_tmop.TMOP_QualityMetric_swigregister(TMOP_QualityMetric)
class TMOP_Combo_QualityMetric(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Combo_QualityMetric class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def AddQualityMetric(self, tq, wt=1.0):
        r"""AddQualityMetric(TMOP_Combo_QualityMetric self, TMOP_QualityMetric tq, mfem::real_t wt=1.0)"""
        return _tmop.TMOP_Combo_QualityMetric_AddQualityMetric(self, tq, wt)
    AddQualityMetric = _swig_new_instance_method(_tmop.TMOP_Combo_QualityMetric_AddQualityMetric)

    def SetTargetJacobian(self, Jtr_):
        r"""SetTargetJacobian(TMOP_Combo_QualityMetric self, DenseMatrix Jtr_)"""
        return _tmop.TMOP_Combo_QualityMetric_SetTargetJacobian(self, Jtr_)
    SetTargetJacobian = _swig_new_instance_method(_tmop.TMOP_Combo_QualityMetric_SetTargetJacobian)

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_Combo_QualityMetric self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Combo_QualityMetric_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_Combo_QualityMetric_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Combo_QualityMetric self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Combo_QualityMetric_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Combo_QualityMetric_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Combo_QualityMetric self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Combo_QualityMetric_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Combo_QualityMetric_EvalP)

    def EvalPW(self, Jpt, P):
        r"""EvalPW(TMOP_Combo_QualityMetric self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Combo_QualityMetric_EvalPW(self, Jpt, P)
    EvalPW = _swig_new_instance_method(_tmop.TMOP_Combo_QualityMetric_EvalPW)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Combo_QualityMetric self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Combo_QualityMetric_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Combo_QualityMetric_AssembleH)

    def ComputeAvgMetrics(self, nodes, tc, averages):
        r"""ComputeAvgMetrics(TMOP_Combo_QualityMetric self, GridFunction nodes, TargetConstructor tc, Vector averages)"""
        return _tmop.TMOP_Combo_QualityMetric_ComputeAvgMetrics(self, nodes, tc, averages)
    ComputeAvgMetrics = _swig_new_instance_method(_tmop.TMOP_Combo_QualityMetric_ComputeAvgMetrics)

    def ComputeBalancedWeights(self, nodes, tc, weights):
        r"""ComputeBalancedWeights(TMOP_Combo_QualityMetric self, GridFunction nodes, TargetConstructor tc, Vector weights)"""
        return _tmop.TMOP_Combo_QualityMetric_ComputeBalancedWeights(self, nodes, tc, weights)
    ComputeBalancedWeights = _swig_new_instance_method(_tmop.TMOP_Combo_QualityMetric_ComputeBalancedWeights)

    def GetWeights(self, weights):
        r"""GetWeights(TMOP_Combo_QualityMetric self, doubleArray weights)"""
        return _tmop.TMOP_Combo_QualityMetric_GetWeights(self, weights)
    GetWeights = _swig_new_instance_method(_tmop.TMOP_Combo_QualityMetric_GetWeights)

    def SetWeights(self, weights):
        r"""SetWeights(TMOP_Combo_QualityMetric self, Vector weights)"""
        return _tmop.TMOP_Combo_QualityMetric_SetWeights(self, weights)
    SetWeights = _swig_new_instance_method(_tmop.TMOP_Combo_QualityMetric_SetWeights)

    def __init__(self):
        r"""__init__(TMOP_Combo_QualityMetric self) -> TMOP_Combo_QualityMetric"""
        _tmop.TMOP_Combo_QualityMetric_swiginit(self, _tmop.new_TMOP_Combo_QualityMetric())
    __swig_destroy__ = _tmop.delete_TMOP_Combo_QualityMetric

# Register TMOP_Combo_QualityMetric in _tmop:
_tmop.TMOP_Combo_QualityMetric_swigregister(TMOP_Combo_QualityMetric)
class TMOP_WorstCaseUntangleOptimizer_Metric(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_WorstCaseUntangleOptimizer_Metric class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BarrierType__None = _tmop.TMOP_WorstCaseUntangleOptimizer_Metric_BarrierType__None
    
    BarrierType_Shifted = _tmop.TMOP_WorstCaseUntangleOptimizer_Metric_BarrierType_Shifted
    
    BarrierType_Pseudo = _tmop.TMOP_WorstCaseUntangleOptimizer_Metric_BarrierType_Pseudo
    
    WorstCaseType__None = _tmop.TMOP_WorstCaseUntangleOptimizer_Metric_WorstCaseType__None
    
    WorstCaseType_Beta = _tmop.TMOP_WorstCaseUntangleOptimizer_Metric_WorstCaseType_Beta
    
    WorstCaseType_PMean = _tmop.TMOP_WorstCaseUntangleOptimizer_Metric_WorstCaseType_PMean
    

    def __init__(self, *args, **kwargs):
        r"""__init__(TMOP_WorstCaseUntangleOptimizer_Metric self, TMOP_QualityMetric tmop_metric_, int exponent_=1, mfem::real_t alpha_=1.5, mfem::real_t detT_ep_=0.0001, mfem::real_t muT_ep_=0.0001, mfem::TMOP_WorstCaseUntangleOptimizer_Metric::BarrierType btype_=_None, mfem::TMOP_WorstCaseUntangleOptimizer_Metric::WorstCaseType wctype_=_None) -> TMOP_WorstCaseUntangleOptimizer_Metric"""
        _tmop.TMOP_WorstCaseUntangleOptimizer_Metric_swiginit(self, _tmop.new_TMOP_WorstCaseUntangleOptimizer_Metric(*args, **kwargs))

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_WorstCaseUntangleOptimizer_Metric self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_WorstCaseUntangleOptimizer_Metric_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_WorstCaseUntangleOptimizer_Metric_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_WorstCaseUntangleOptimizer_Metric self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_WorstCaseUntangleOptimizer_Metric_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_WorstCaseUntangleOptimizer_Metric_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_WorstCaseUntangleOptimizer_Metric self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_WorstCaseUntangleOptimizer_Metric_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_WorstCaseUntangleOptimizer_Metric_AssembleH)

    def EvalWBarrier(self, Jpt):
        r"""EvalWBarrier(TMOP_WorstCaseUntangleOptimizer_Metric self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_WorstCaseUntangleOptimizer_Metric_EvalWBarrier(self, Jpt)
    EvalWBarrier = _swig_new_instance_method(_tmop.TMOP_WorstCaseUntangleOptimizer_Metric_EvalWBarrier)

    def SetMinDetT(self, min_detT_):
        r"""SetMinDetT(TMOP_WorstCaseUntangleOptimizer_Metric self, mfem::real_t min_detT_)"""
        return _tmop.TMOP_WorstCaseUntangleOptimizer_Metric_SetMinDetT(self, min_detT_)
    SetMinDetT = _swig_new_instance_method(_tmop.TMOP_WorstCaseUntangleOptimizer_Metric_SetMinDetT)

    def SetMaxMuT(self, max_muT_):
        r"""SetMaxMuT(TMOP_WorstCaseUntangleOptimizer_Metric self, mfem::real_t max_muT_)"""
        return _tmop.TMOP_WorstCaseUntangleOptimizer_Metric_SetMaxMuT(self, max_muT_)
    SetMaxMuT = _swig_new_instance_method(_tmop.TMOP_WorstCaseUntangleOptimizer_Metric_SetMaxMuT)

    def GetBarrierType(self):
        r"""GetBarrierType(TMOP_WorstCaseUntangleOptimizer_Metric self) -> mfem::TMOP_WorstCaseUntangleOptimizer_Metric::BarrierType"""
        return _tmop.TMOP_WorstCaseUntangleOptimizer_Metric_GetBarrierType(self)
    GetBarrierType = _swig_new_instance_method(_tmop.TMOP_WorstCaseUntangleOptimizer_Metric_GetBarrierType)

    def GetWorstCaseType(self):
        r"""GetWorstCaseType(TMOP_WorstCaseUntangleOptimizer_Metric self) -> mfem::TMOP_WorstCaseUntangleOptimizer_Metric::WorstCaseType"""
        return _tmop.TMOP_WorstCaseUntangleOptimizer_Metric_GetWorstCaseType(self)
    GetWorstCaseType = _swig_new_instance_method(_tmop.TMOP_WorstCaseUntangleOptimizer_Metric_GetWorstCaseType)
    __swig_destroy__ = _tmop.delete_TMOP_WorstCaseUntangleOptimizer_Metric

# Register TMOP_WorstCaseUntangleOptimizer_Metric in _tmop:
_tmop.TMOP_WorstCaseUntangleOptimizer_Metric_swigregister(TMOP_WorstCaseUntangleOptimizer_Metric)
class TMOP_Metric_000(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_000 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_000 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_000_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_000_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_000 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_000_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_000_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_000 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_000_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_000_AssembleH)

    def Id(self):
        r"""Id(TMOP_Metric_000 self) -> int"""
        return _tmop.TMOP_Metric_000_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_000_Id)

    def __init__(self):
        r"""__init__(TMOP_Metric_000 self) -> TMOP_Metric_000"""
        _tmop.TMOP_Metric_000_swiginit(self, _tmop.new_TMOP_Metric_000())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_000

# Register TMOP_Metric_000 in _tmop:
_tmop.TMOP_Metric_000_swigregister(TMOP_Metric_000)
class TMOP_Metric_001(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_001 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_001 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_001_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_001_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_001 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_001_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_001_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_001 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_001_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_001_AssembleH)

    def Id(self):
        r"""Id(TMOP_Metric_001 self) -> int"""
        return _tmop.TMOP_Metric_001_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_001_Id)

    def __init__(self):
        r"""__init__(TMOP_Metric_001 self) -> TMOP_Metric_001"""
        _tmop.TMOP_Metric_001_swiginit(self, _tmop.new_TMOP_Metric_001())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_001

# Register TMOP_Metric_001 in _tmop:
_tmop.TMOP_Metric_001_swigregister(TMOP_Metric_001)
class TMOP_Metric_skew2D(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_skew2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_Metric_skew2D self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_skew2D_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_Metric_skew2D_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_skew2D self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_skew2D_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_skew2D_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_skew2D self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_skew2D_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_skew2D_EvalP)

    def EvalPW(self, Jpt, PW):
        r"""EvalPW(TMOP_Metric_skew2D self, DenseMatrix Jpt, DenseMatrix PW)"""
        return _tmop.TMOP_Metric_skew2D_EvalPW(self, Jpt, PW)
    EvalPW = _swig_new_instance_method(_tmop.TMOP_Metric_skew2D_EvalPW)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_skew2D self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_skew2D_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_skew2D_AssembleH)

    def __init__(self):
        r"""__init__(TMOP_Metric_skew2D self) -> TMOP_Metric_skew2D"""
        _tmop.TMOP_Metric_skew2D_swiginit(self, _tmop.new_TMOP_Metric_skew2D())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_skew2D

# Register TMOP_Metric_skew2D in _tmop:
_tmop.TMOP_Metric_skew2D_swigregister(TMOP_Metric_skew2D)
class TMOP_Metric_skew3D(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_skew3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_skew3D self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_skew3D_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_skew3D_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_skew3D self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_skew3D_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_skew3D_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_skew3D self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_skew3D_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_skew3D_AssembleH)

    def __init__(self):
        r"""__init__(TMOP_Metric_skew3D self) -> TMOP_Metric_skew3D"""
        _tmop.TMOP_Metric_skew3D_swiginit(self, _tmop.new_TMOP_Metric_skew3D())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_skew3D

# Register TMOP_Metric_skew3D in _tmop:
_tmop.TMOP_Metric_skew3D_swigregister(TMOP_Metric_skew3D)
class TMOP_Metric_aspratio2D(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_aspratio2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_aspratio2D self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_aspratio2D_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_aspratio2D_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_aspratio2D self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_aspratio2D_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_aspratio2D_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_aspratio2D self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_aspratio2D_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_aspratio2D_AssembleH)

    def __init__(self):
        r"""__init__(TMOP_Metric_aspratio2D self) -> TMOP_Metric_aspratio2D"""
        _tmop.TMOP_Metric_aspratio2D_swiginit(self, _tmop.new_TMOP_Metric_aspratio2D())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_aspratio2D

# Register TMOP_Metric_aspratio2D in _tmop:
_tmop.TMOP_Metric_aspratio2D_swigregister(TMOP_Metric_aspratio2D)
class TMOP_Metric_aspratio3D(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_aspratio3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_aspratio3D self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_aspratio3D_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_aspratio3D_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_aspratio3D self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_aspratio3D_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_aspratio3D_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_aspratio3D self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_aspratio3D_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_aspratio3D_AssembleH)

    def __init__(self):
        r"""__init__(TMOP_Metric_aspratio3D self) -> TMOP_Metric_aspratio3D"""
        _tmop.TMOP_Metric_aspratio3D_swiginit(self, _tmop.new_TMOP_Metric_aspratio3D())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_aspratio3D

# Register TMOP_Metric_aspratio3D in _tmop:
_tmop.TMOP_Metric_aspratio3D_swigregister(TMOP_Metric_aspratio3D)
class TMOP_Metric_002(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_002 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_Metric_002 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_002_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_Metric_002_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_002 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_002_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_002_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_002 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_002_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_002_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_002 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_002_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_002_AssembleH)

    def Id(self):
        r"""Id(TMOP_Metric_002 self) -> int"""
        return _tmop.TMOP_Metric_002_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_002_Id)

    def __init__(self):
        r"""__init__(TMOP_Metric_002 self) -> TMOP_Metric_002"""
        _tmop.TMOP_Metric_002_swiginit(self, _tmop.new_TMOP_Metric_002())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_002

# Register TMOP_Metric_002 in _tmop:
_tmop.TMOP_Metric_002_swigregister(TMOP_Metric_002)
class TMOP_Metric_004(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_004 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_004 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_004_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_004_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_004 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_004_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_004_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_004 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_004_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_004_AssembleH)

    def Id(self):
        r"""Id(TMOP_Metric_004 self) -> int"""
        return _tmop.TMOP_Metric_004_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_004_Id)

    def __init__(self):
        r"""__init__(TMOP_Metric_004 self) -> TMOP_Metric_004"""
        _tmop.TMOP_Metric_004_swiginit(self, _tmop.new_TMOP_Metric_004())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_004

# Register TMOP_Metric_004 in _tmop:
_tmop.TMOP_Metric_004_swigregister(TMOP_Metric_004)
class TMOP_Metric_007(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_007 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_007 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_007_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_007_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_007 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_007_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_007_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_007 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_007_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_007_AssembleH)

    def Id(self):
        r"""Id(TMOP_Metric_007 self) -> int"""
        return _tmop.TMOP_Metric_007_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_007_Id)

    def __init__(self):
        r"""__init__(TMOP_Metric_007 self) -> TMOP_Metric_007"""
        _tmop.TMOP_Metric_007_swiginit(self, _tmop.new_TMOP_Metric_007())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_007

# Register TMOP_Metric_007 in _tmop:
_tmop.TMOP_Metric_007_swigregister(TMOP_Metric_007)
class TMOP_Metric_009(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_009 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_009 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_009_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_009_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_009 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_009_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_009_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_009 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_009_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_009_AssembleH)

    def __init__(self):
        r"""__init__(TMOP_Metric_009 self) -> TMOP_Metric_009"""
        _tmop.TMOP_Metric_009_swiginit(self, _tmop.new_TMOP_Metric_009())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_009

# Register TMOP_Metric_009 in _tmop:
_tmop.TMOP_Metric_009_swigregister(TMOP_Metric_009)
class TMOP_Metric_014(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_014 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_Metric_014 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_014_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_Metric_014_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_014 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_014_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_014_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_014 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_014_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_014_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_014 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_014_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_014_AssembleH)

    def __init__(self):
        r"""__init__(TMOP_Metric_014 self) -> TMOP_Metric_014"""
        _tmop.TMOP_Metric_014_swiginit(self, _tmop.new_TMOP_Metric_014())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_014

# Register TMOP_Metric_014 in _tmop:
_tmop.TMOP_Metric_014_swigregister(TMOP_Metric_014)
class TMOP_Metric_022(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_022 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, t0):
        r"""__init__(TMOP_Metric_022 self, mfem::real_t & t0) -> TMOP_Metric_022"""
        _tmop.TMOP_Metric_022_swiginit(self, _tmop.new_TMOP_Metric_022(t0))

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_022 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_022_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_022_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_022 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_022_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_022_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_022 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_022_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_022_AssembleH)
    __swig_destroy__ = _tmop.delete_TMOP_Metric_022

# Register TMOP_Metric_022 in _tmop:
_tmop.TMOP_Metric_022_swigregister(TMOP_Metric_022)
class TMOP_Metric_050(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_050 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_Metric_050 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_050_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_Metric_050_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_050 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_050_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_050_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_050 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_050_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_050_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_050 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_050_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_050_AssembleH)

    def __init__(self):
        r"""__init__(TMOP_Metric_050 self) -> TMOP_Metric_050"""
        _tmop.TMOP_Metric_050_swiginit(self, _tmop.new_TMOP_Metric_050())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_050

# Register TMOP_Metric_050 in _tmop:
_tmop.TMOP_Metric_050_swigregister(TMOP_Metric_050)
class TMOP_Metric_055(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_055 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_055 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_055_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_055_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_055 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_055_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_055_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_055 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_055_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_055_AssembleH)

    def __init__(self):
        r"""__init__(TMOP_Metric_055 self) -> TMOP_Metric_055"""
        _tmop.TMOP_Metric_055_swiginit(self, _tmop.new_TMOP_Metric_055())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_055

# Register TMOP_Metric_055 in _tmop:
_tmop.TMOP_Metric_055_swigregister(TMOP_Metric_055)
class TMOP_Metric_056(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_056 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_Metric_056 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_056_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_Metric_056_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_056 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_056_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_056_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_056 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_056_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_056_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_056 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_056_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_056_AssembleH)

    def __init__(self):
        r"""__init__(TMOP_Metric_056 self) -> TMOP_Metric_056"""
        _tmop.TMOP_Metric_056_swiginit(self, _tmop.new_TMOP_Metric_056())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_056

# Register TMOP_Metric_056 in _tmop:
_tmop.TMOP_Metric_056_swigregister(TMOP_Metric_056)
class TMOP_Metric_058(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_058 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_Metric_058 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_058_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_Metric_058_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_058 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_058_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_058_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_058 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_058_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_058_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_058 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_058_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_058_AssembleH)

    def __init__(self):
        r"""__init__(TMOP_Metric_058 self) -> TMOP_Metric_058"""
        _tmop.TMOP_Metric_058_swiginit(self, _tmop.new_TMOP_Metric_058())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_058

# Register TMOP_Metric_058 in _tmop:
_tmop.TMOP_Metric_058_swigregister(TMOP_Metric_058)
class TMOP_Metric_066(TMOP_Combo_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_066 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gamma):
        r"""__init__(TMOP_Metric_066 self, mfem::real_t gamma) -> TMOP_Metric_066"""
        _tmop.TMOP_Metric_066_swiginit(self, _tmop.new_TMOP_Metric_066(gamma))

    def Id(self):
        r"""Id(TMOP_Metric_066 self) -> int"""
        return _tmop.TMOP_Metric_066_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_066_Id)

    def GetGamma(self):
        r"""GetGamma(TMOP_Metric_066 self) -> mfem::real_t"""
        return _tmop.TMOP_Metric_066_GetGamma(self)
    GetGamma = _swig_new_instance_method(_tmop.TMOP_Metric_066_GetGamma)
    __swig_destroy__ = _tmop.delete_TMOP_Metric_066

# Register TMOP_Metric_066 in _tmop:
_tmop.TMOP_Metric_066_swigregister(TMOP_Metric_066)
class TMOP_Metric_077(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_077 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_Metric_077 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_077_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_Metric_077_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_077 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_077_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_077_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_077 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_077_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_077_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_077 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_077_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_077_AssembleH)

    def Id(self):
        r"""Id(TMOP_Metric_077 self) -> int"""
        return _tmop.TMOP_Metric_077_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_077_Id)

    def __init__(self):
        r"""__init__(TMOP_Metric_077 self) -> TMOP_Metric_077"""
        _tmop.TMOP_Metric_077_swiginit(self, _tmop.new_TMOP_Metric_077())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_077

# Register TMOP_Metric_077 in _tmop:
_tmop.TMOP_Metric_077_swigregister(TMOP_Metric_077)
class TMOP_Metric_080(TMOP_Combo_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_080 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gamma):
        r"""__init__(TMOP_Metric_080 self, mfem::real_t gamma) -> TMOP_Metric_080"""
        _tmop.TMOP_Metric_080_swiginit(self, _tmop.new_TMOP_Metric_080(gamma))

    def Id(self):
        r"""Id(TMOP_Metric_080 self) -> int"""
        return _tmop.TMOP_Metric_080_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_080_Id)

    def GetGamma(self):
        r"""GetGamma(TMOP_Metric_080 self) -> mfem::real_t"""
        return _tmop.TMOP_Metric_080_GetGamma(self)
    GetGamma = _swig_new_instance_method(_tmop.TMOP_Metric_080_GetGamma)
    __swig_destroy__ = _tmop.delete_TMOP_Metric_080

# Register TMOP_Metric_080 in _tmop:
_tmop.TMOP_Metric_080_swigregister(TMOP_Metric_080)
class TMOP_Metric_085(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_085 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_Metric_085 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_085_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_Metric_085_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_085 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_085_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_085_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_085 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_085_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_085_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_085 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_085_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_085_AssembleH)

    def __init__(self):
        r"""__init__(TMOP_Metric_085 self) -> TMOP_Metric_085"""
        _tmop.TMOP_Metric_085_swiginit(self, _tmop.new_TMOP_Metric_085())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_085

# Register TMOP_Metric_085 in _tmop:
_tmop.TMOP_Metric_085_swigregister(TMOP_Metric_085)
class TMOP_Metric_090(TMOP_Combo_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_090 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TMOP_Metric_090 self) -> TMOP_Metric_090"""
        _tmop.TMOP_Metric_090_swiginit(self, _tmop.new_TMOP_Metric_090())

    def Id(self):
        r"""Id(TMOP_Metric_090 self) -> int"""
        return _tmop.TMOP_Metric_090_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_090_Id)
    __swig_destroy__ = _tmop.delete_TMOP_Metric_090

# Register TMOP_Metric_090 in _tmop:
_tmop.TMOP_Metric_090_swigregister(TMOP_Metric_090)
class TMOP_Metric_094(TMOP_Combo_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_094 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TMOP_Metric_094 self) -> TMOP_Metric_094"""
        _tmop.TMOP_Metric_094_swiginit(self, _tmop.new_TMOP_Metric_094())

    def Id(self):
        r"""Id(TMOP_Metric_094 self) -> int"""
        return _tmop.TMOP_Metric_094_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_094_Id)
    __swig_destroy__ = _tmop.delete_TMOP_Metric_094

# Register TMOP_Metric_094 in _tmop:
_tmop.TMOP_Metric_094_swigregister(TMOP_Metric_094)
class TMOP_Metric_098(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_098 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_Metric_098 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_098_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_Metric_098_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_098 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_098_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_098_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_098 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_098_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_098_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_098 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_098_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_098_AssembleH)

    def __init__(self):
        r"""__init__(TMOP_Metric_098 self) -> TMOP_Metric_098"""
        _tmop.TMOP_Metric_098_swiginit(self, _tmop.new_TMOP_Metric_098())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_098

# Register TMOP_Metric_098 in _tmop:
_tmop.TMOP_Metric_098_swigregister(TMOP_Metric_098)
class TMOP_Metric_211(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_211 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, epsilon=1e-4):
        r"""__init__(TMOP_Metric_211 self, mfem::real_t epsilon=1e-4) -> TMOP_Metric_211"""
        _tmop.TMOP_Metric_211_swiginit(self, _tmop.new_TMOP_Metric_211(epsilon))

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_211 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_211_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_211_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_211 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_211_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_211_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_211 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_211_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_211_AssembleH)
    __swig_destroy__ = _tmop.delete_TMOP_Metric_211

# Register TMOP_Metric_211 in _tmop:
_tmop.TMOP_Metric_211_swigregister(TMOP_Metric_211)
class TMOP_Metric_252(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_252 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, t0):
        r"""__init__(TMOP_Metric_252 self, mfem::real_t & t0) -> TMOP_Metric_252"""
        _tmop.TMOP_Metric_252_swiginit(self, _tmop.new_TMOP_Metric_252(t0))

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_252 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_252_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_252_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_252 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_252_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_252_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_252 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_252_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_252_AssembleH)
    __swig_destroy__ = _tmop.delete_TMOP_Metric_252

# Register TMOP_Metric_252 in _tmop:
_tmop.TMOP_Metric_252_swigregister(TMOP_Metric_252)
class TMOP_Metric_301(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_301 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_Metric_301 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_301_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_Metric_301_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_301 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_301_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_301_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_301 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_301_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_301_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_301 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_301_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_301_AssembleH)

    def __init__(self):
        r"""__init__(TMOP_Metric_301 self) -> TMOP_Metric_301"""
        _tmop.TMOP_Metric_301_swiginit(self, _tmop.new_TMOP_Metric_301())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_301

# Register TMOP_Metric_301 in _tmop:
_tmop.TMOP_Metric_301_swigregister(TMOP_Metric_301)
class TMOP_Metric_302(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_302 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_Metric_302 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_302_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_Metric_302_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_302 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_302_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_302_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_302 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_302_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_302_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_302 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_302_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_302_AssembleH)

    def Id(self):
        r"""Id(TMOP_Metric_302 self) -> int"""
        return _tmop.TMOP_Metric_302_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_302_Id)

    def __init__(self):
        r"""__init__(TMOP_Metric_302 self) -> TMOP_Metric_302"""
        _tmop.TMOP_Metric_302_swiginit(self, _tmop.new_TMOP_Metric_302())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_302

# Register TMOP_Metric_302 in _tmop:
_tmop.TMOP_Metric_302_swigregister(TMOP_Metric_302)
class TMOP_Metric_303(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_303 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_Metric_303 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_303_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_Metric_303_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_303 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_303_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_303_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_303 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_303_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_303_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_303 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_303_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_303_AssembleH)

    def Id(self):
        r"""Id(TMOP_Metric_303 self) -> int"""
        return _tmop.TMOP_Metric_303_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_303_Id)

    def __init__(self):
        r"""__init__(TMOP_Metric_303 self) -> TMOP_Metric_303"""
        _tmop.TMOP_Metric_303_swiginit(self, _tmop.new_TMOP_Metric_303())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_303

# Register TMOP_Metric_303 in _tmop:
_tmop.TMOP_Metric_303_swigregister(TMOP_Metric_303)
class TMOP_Metric_304(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_304 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_Metric_304 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_304_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_Metric_304_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_304 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_304_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_304_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_304 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_304_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_304_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_304 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_304_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_304_AssembleH)

    def Id(self):
        r"""Id(TMOP_Metric_304 self) -> int"""
        return _tmop.TMOP_Metric_304_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_304_Id)

    def __init__(self):
        r"""__init__(TMOP_Metric_304 self) -> TMOP_Metric_304"""
        _tmop.TMOP_Metric_304_swiginit(self, _tmop.new_TMOP_Metric_304())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_304

# Register TMOP_Metric_304 in _tmop:
_tmop.TMOP_Metric_304_swigregister(TMOP_Metric_304)
class TMOP_Metric_311(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_311 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, epsilon=1e-4):
        r"""__init__(TMOP_Metric_311 self, mfem::real_t epsilon=1e-4) -> TMOP_Metric_311"""
        _tmop.TMOP_Metric_311_swiginit(self, _tmop.new_TMOP_Metric_311(epsilon))

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_311 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_311_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_311_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_311 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_311_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_311_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_311 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_311_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_311_AssembleH)
    __swig_destroy__ = _tmop.delete_TMOP_Metric_311

# Register TMOP_Metric_311 in _tmop:
_tmop.TMOP_Metric_311_swigregister(TMOP_Metric_311)
class TMOP_Metric_313(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_313 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mindet):
        r"""__init__(TMOP_Metric_313 self, mfem::real_t & mindet) -> TMOP_Metric_313"""
        _tmop.TMOP_Metric_313_swiginit(self, _tmop.new_TMOP_Metric_313(mindet))

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_313 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_313_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_313_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_313 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_313_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_313_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_313 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_313_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_313_AssembleH)

    def Id(self):
        r"""Id(TMOP_Metric_313 self) -> int"""
        return _tmop.TMOP_Metric_313_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_313_Id)
    __swig_destroy__ = _tmop.delete_TMOP_Metric_313

# Register TMOP_Metric_313 in _tmop:
_tmop.TMOP_Metric_313_swigregister(TMOP_Metric_313)
class TMOP_Metric_315(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_315 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_315 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_315_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_315_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_315 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_315_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_315_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_315 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_315_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_315_AssembleH)

    def Id(self):
        r"""Id(TMOP_Metric_315 self) -> int"""
        return _tmop.TMOP_Metric_315_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_315_Id)

    def __init__(self):
        r"""__init__(TMOP_Metric_315 self) -> TMOP_Metric_315"""
        _tmop.TMOP_Metric_315_swiginit(self, _tmop.new_TMOP_Metric_315())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_315

# Register TMOP_Metric_315 in _tmop:
_tmop.TMOP_Metric_315_swigregister(TMOP_Metric_315)
class TMOP_Metric_316(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_316 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_Metric_316 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_316_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_Metric_316_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_316 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_316_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_316_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_316 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_316_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_316_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_316 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_316_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_316_AssembleH)

    def __init__(self):
        r"""__init__(TMOP_Metric_316 self) -> TMOP_Metric_316"""
        _tmop.TMOP_Metric_316_swiginit(self, _tmop.new_TMOP_Metric_316())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_316

# Register TMOP_Metric_316 in _tmop:
_tmop.TMOP_Metric_316_swigregister(TMOP_Metric_316)
class TMOP_Metric_318(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_318 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_Metric_318 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_318_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_Metric_318_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_318 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_318_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_318_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_318 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_318_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_318_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_318 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_318_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_318_AssembleH)

    def Id(self):
        r"""Id(TMOP_Metric_318 self) -> int"""
        return _tmop.TMOP_Metric_318_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_318_Id)

    def __init__(self):
        r"""__init__(TMOP_Metric_318 self) -> TMOP_Metric_318"""
        _tmop.TMOP_Metric_318_swiginit(self, _tmop.new_TMOP_Metric_318())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_318

# Register TMOP_Metric_318 in _tmop:
_tmop.TMOP_Metric_318_swigregister(TMOP_Metric_318)
class TMOP_Metric_321(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_321 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_Metric_321 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_321_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_Metric_321_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_321 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_321_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_321_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_321 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_321_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_321_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_321 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_321_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_321_AssembleH)

    def Id(self):
        r"""Id(TMOP_Metric_321 self) -> int"""
        return _tmop.TMOP_Metric_321_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_321_Id)

    def __init__(self):
        r"""__init__(TMOP_Metric_321 self) -> TMOP_Metric_321"""
        _tmop.TMOP_Metric_321_swiginit(self, _tmop.new_TMOP_Metric_321())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_321

# Register TMOP_Metric_321 in _tmop:
_tmop.TMOP_Metric_321_swigregister(TMOP_Metric_321)
class TMOP_Metric_322(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_322 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_Metric_322 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_322_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_Metric_322_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_322 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_322_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_322_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_322 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_322_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_322_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_322 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_322_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_322_AssembleH)

    def Id(self):
        r"""Id(TMOP_Metric_322 self) -> int"""
        return _tmop.TMOP_Metric_322_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_322_Id)

    def __init__(self):
        r"""__init__(TMOP_Metric_322 self) -> TMOP_Metric_322"""
        _tmop.TMOP_Metric_322_swiginit(self, _tmop.new_TMOP_Metric_322())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_322

# Register TMOP_Metric_322 in _tmop:
_tmop.TMOP_Metric_322_swigregister(TMOP_Metric_322)
class TMOP_Metric_323(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_323 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_Metric_323 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_323_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_Metric_323_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_323 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_323_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_323_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_323 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_323_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_323_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_323 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_323_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_323_AssembleH)

    def Id(self):
        r"""Id(TMOP_Metric_323 self) -> int"""
        return _tmop.TMOP_Metric_323_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_323_Id)

    def __init__(self):
        r"""__init__(TMOP_Metric_323 self) -> TMOP_Metric_323"""
        _tmop.TMOP_Metric_323_swiginit(self, _tmop.new_TMOP_Metric_323())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_323

# Register TMOP_Metric_323 in _tmop:
_tmop.TMOP_Metric_323_swigregister(TMOP_Metric_323)
class TMOP_Metric_328(TMOP_Combo_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_328 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TMOP_Metric_328 self) -> TMOP_Metric_328"""
        _tmop.TMOP_Metric_328_swiginit(self, _tmop.new_TMOP_Metric_328())

    def Id(self):
        r"""Id(TMOP_Metric_328 self) -> int"""
        return _tmop.TMOP_Metric_328_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_328_Id)
    __swig_destroy__ = _tmop.delete_TMOP_Metric_328

# Register TMOP_Metric_328 in _tmop:
_tmop.TMOP_Metric_328_swigregister(TMOP_Metric_328)
class TMOP_Metric_332(TMOP_Combo_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_332 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gamma):
        r"""__init__(TMOP_Metric_332 self, mfem::real_t gamma) -> TMOP_Metric_332"""
        _tmop.TMOP_Metric_332_swiginit(self, _tmop.new_TMOP_Metric_332(gamma))

    def Id(self):
        r"""Id(TMOP_Metric_332 self) -> int"""
        return _tmop.TMOP_Metric_332_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_332_Id)

    def GetGamma(self):
        r"""GetGamma(TMOP_Metric_332 self) -> mfem::real_t"""
        return _tmop.TMOP_Metric_332_GetGamma(self)
    GetGamma = _swig_new_instance_method(_tmop.TMOP_Metric_332_GetGamma)
    __swig_destroy__ = _tmop.delete_TMOP_Metric_332

# Register TMOP_Metric_332 in _tmop:
_tmop.TMOP_Metric_332_swigregister(TMOP_Metric_332)
class TMOP_Metric_333(TMOP_Combo_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_333 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gamma):
        r"""__init__(TMOP_Metric_333 self, mfem::real_t gamma) -> TMOP_Metric_333"""
        _tmop.TMOP_Metric_333_swiginit(self, _tmop.new_TMOP_Metric_333(gamma))
    __swig_destroy__ = _tmop.delete_TMOP_Metric_333

# Register TMOP_Metric_333 in _tmop:
_tmop.TMOP_Metric_333_swigregister(TMOP_Metric_333)
class TMOP_Metric_334(TMOP_Combo_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_334 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gamma):
        r"""__init__(TMOP_Metric_334 self, mfem::real_t gamma) -> TMOP_Metric_334"""
        _tmop.TMOP_Metric_334_swiginit(self, _tmop.new_TMOP_Metric_334(gamma))

    def Id(self):
        r"""Id(TMOP_Metric_334 self) -> int"""
        return _tmop.TMOP_Metric_334_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_334_Id)

    def GetGamma(self):
        r"""GetGamma(TMOP_Metric_334 self) -> mfem::real_t"""
        return _tmop.TMOP_Metric_334_GetGamma(self)
    GetGamma = _swig_new_instance_method(_tmop.TMOP_Metric_334_GetGamma)
    __swig_destroy__ = _tmop.delete_TMOP_Metric_334

# Register TMOP_Metric_334 in _tmop:
_tmop.TMOP_Metric_334_swigregister(TMOP_Metric_334)
class TMOP_Metric_338(TMOP_Combo_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_338 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TMOP_Metric_338 self) -> TMOP_Metric_338"""
        _tmop.TMOP_Metric_338_swiginit(self, _tmop.new_TMOP_Metric_338())

    def Id(self):
        r"""Id(TMOP_Metric_338 self) -> int"""
        return _tmop.TMOP_Metric_338_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_338_Id)
    __swig_destroy__ = _tmop.delete_TMOP_Metric_338

# Register TMOP_Metric_338 in _tmop:
_tmop.TMOP_Metric_338_swigregister(TMOP_Metric_338)
class TMOP_Metric_342(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_342 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_Metric_342 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_342_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_Metric_342_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_342 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_342_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_342_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_342 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_342_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_342_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_342 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_342_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_342_AssembleH)

    def __init__(self):
        r"""__init__(TMOP_Metric_342 self) -> TMOP_Metric_342"""
        _tmop.TMOP_Metric_342_swiginit(self, _tmop.new_TMOP_Metric_342())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_342

# Register TMOP_Metric_342 in _tmop:
_tmop.TMOP_Metric_342_swigregister(TMOP_Metric_342)
class TMOP_Metric_347(TMOP_Combo_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_347 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gamma):
        r"""__init__(TMOP_Metric_347 self, mfem::real_t gamma) -> TMOP_Metric_347"""
        _tmop.TMOP_Metric_347_swiginit(self, _tmop.new_TMOP_Metric_347(gamma))

    def Id(self):
        r"""Id(TMOP_Metric_347 self) -> int"""
        return _tmop.TMOP_Metric_347_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_347_Id)

    def GetGamma(self):
        r"""GetGamma(TMOP_Metric_347 self) -> mfem::real_t"""
        return _tmop.TMOP_Metric_347_GetGamma(self)
    GetGamma = _swig_new_instance_method(_tmop.TMOP_Metric_347_GetGamma)
    __swig_destroy__ = _tmop.delete_TMOP_Metric_347

# Register TMOP_Metric_347 in _tmop:
_tmop.TMOP_Metric_347_swigregister(TMOP_Metric_347)
class TMOP_Metric_352(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_352 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, t0):
        r"""__init__(TMOP_Metric_352 self, mfem::real_t & t0) -> TMOP_Metric_352"""
        _tmop.TMOP_Metric_352_swiginit(self, _tmop.new_TMOP_Metric_352(t0))

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_352 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_352_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_352_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_352 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_352_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_352_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_352 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_352_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_352_AssembleH)
    __swig_destroy__ = _tmop.delete_TMOP_Metric_352

# Register TMOP_Metric_352 in _tmop:
_tmop.TMOP_Metric_352_swigregister(TMOP_Metric_352)
class TMOP_Metric_360(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_Metric_360 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_Metric_360 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_360_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_Metric_360_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_Metric_360 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_Metric_360_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_Metric_360_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_Metric_360 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_Metric_360_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_Metric_360_EvalP)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_Metric_360 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_Metric_360_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_Metric_360_AssembleH)

    def Id(self):
        r"""Id(TMOP_Metric_360 self) -> int"""
        return _tmop.TMOP_Metric_360_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_Metric_360_Id)

    def __init__(self):
        r"""__init__(TMOP_Metric_360 self) -> TMOP_Metric_360"""
        _tmop.TMOP_Metric_360_swiginit(self, _tmop.new_TMOP_Metric_360())
    __swig_destroy__ = _tmop.delete_TMOP_Metric_360

# Register TMOP_Metric_360 in _tmop:
_tmop.TMOP_Metric_360_swigregister(TMOP_Metric_360)
class TMOP_AMetric_011(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_AMetric_011 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_AMetric_011 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_AMetric_011_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_AMetric_011_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_AMetric_011 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_AMetric_011_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_AMetric_011_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_AMetric_011 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_AMetric_011_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_AMetric_011_EvalP)

    def EvalPW(self, Jpt, PW):
        r"""EvalPW(TMOP_AMetric_011 self, DenseMatrix Jpt, DenseMatrix PW)"""
        return _tmop.TMOP_AMetric_011_EvalPW(self, Jpt, PW)
    EvalPW = _swig_new_instance_method(_tmop.TMOP_AMetric_011_EvalPW)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_AMetric_011 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_AMetric_011_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_AMetric_011_AssembleH)

    def __init__(self):
        r"""__init__(TMOP_AMetric_011 self) -> TMOP_AMetric_011"""
        _tmop.TMOP_AMetric_011_swiginit(self, _tmop.new_TMOP_AMetric_011())
    __swig_destroy__ = _tmop.delete_TMOP_AMetric_011

# Register TMOP_AMetric_011 in _tmop:
_tmop.TMOP_AMetric_011_swigregister(TMOP_AMetric_011)
class TMOP_AMetric_014(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_AMetric_014 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_AMetric_014 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_AMetric_014_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_AMetric_014_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_AMetric_014 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_AMetric_014_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_AMetric_014_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_AMetric_014 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_AMetric_014_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_AMetric_014_EvalP)

    def EvalPW(self, Jpt, PW):
        r"""EvalPW(TMOP_AMetric_014 self, DenseMatrix Jpt, DenseMatrix PW)"""
        return _tmop.TMOP_AMetric_014_EvalPW(self, Jpt, PW)
    EvalPW = _swig_new_instance_method(_tmop.TMOP_AMetric_014_EvalPW)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_AMetric_014 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_AMetric_014_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_AMetric_014_AssembleH)

    def __init__(self):
        r"""__init__(TMOP_AMetric_014 self) -> TMOP_AMetric_014"""
        _tmop.TMOP_AMetric_014_swiginit(self, _tmop.new_TMOP_AMetric_014())
    __swig_destroy__ = _tmop.delete_TMOP_AMetric_014

# Register TMOP_AMetric_014 in _tmop:
_tmop.TMOP_AMetric_014_swigregister(TMOP_AMetric_014)
class TMOP_AMetric_036(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_AMetric_036 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_AMetric_036 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_AMetric_036_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_AMetric_036_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_AMetric_036 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_AMetric_036_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_AMetric_036_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_AMetric_036 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_AMetric_036_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_AMetric_036_EvalP)

    def EvalPW(self, Jpt, PW):
        r"""EvalPW(TMOP_AMetric_036 self, DenseMatrix Jpt, DenseMatrix PW)"""
        return _tmop.TMOP_AMetric_036_EvalPW(self, Jpt, PW)
    EvalPW = _swig_new_instance_method(_tmop.TMOP_AMetric_036_EvalPW)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_AMetric_036 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_AMetric_036_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_AMetric_036_AssembleH)

    def __init__(self):
        r"""__init__(TMOP_AMetric_036 self) -> TMOP_AMetric_036"""
        _tmop.TMOP_AMetric_036_swiginit(self, _tmop.new_TMOP_AMetric_036())
    __swig_destroy__ = _tmop.delete_TMOP_AMetric_036

# Register TMOP_AMetric_036 in _tmop:
_tmop.TMOP_AMetric_036_swigregister(TMOP_AMetric_036)
class TMOP_AMetric_050(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_AMetric_050 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_AMetric_050 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_AMetric_050_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_AMetric_050_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_AMetric_050 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_AMetric_050_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_AMetric_050_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_AMetric_050 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_AMetric_050_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_AMetric_050_EvalP)

    def EvalPW(self, Jpt, PW):
        r"""EvalPW(TMOP_AMetric_050 self, DenseMatrix Jpt, DenseMatrix PW)"""
        return _tmop.TMOP_AMetric_050_EvalPW(self, Jpt, PW)
    EvalPW = _swig_new_instance_method(_tmop.TMOP_AMetric_050_EvalPW)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_AMetric_050 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_AMetric_050_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_AMetric_050_AssembleH)

    def __init__(self):
        r"""__init__(TMOP_AMetric_050 self) -> TMOP_AMetric_050"""
        _tmop.TMOP_AMetric_050_swiginit(self, _tmop.new_TMOP_AMetric_050())
    __swig_destroy__ = _tmop.delete_TMOP_AMetric_050

# Register TMOP_AMetric_050 in _tmop:
_tmop.TMOP_AMetric_050_swigregister(TMOP_AMetric_050)
class TMOP_AMetric_051(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_AMetric_051 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_AMetric_051 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_AMetric_051_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_AMetric_051_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_AMetric_051 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_AMetric_051_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_AMetric_051_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_AMetric_051 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_AMetric_051_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_AMetric_051_EvalP)

    def EvalPW(self, Jpt, PW):
        r"""EvalPW(TMOP_AMetric_051 self, DenseMatrix Jpt, DenseMatrix PW)"""
        return _tmop.TMOP_AMetric_051_EvalPW(self, Jpt, PW)
    EvalPW = _swig_new_instance_method(_tmop.TMOP_AMetric_051_EvalPW)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_AMetric_051 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_AMetric_051_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_AMetric_051_AssembleH)

    def __init__(self):
        r"""__init__(TMOP_AMetric_051 self) -> TMOP_AMetric_051"""
        _tmop.TMOP_AMetric_051_swiginit(self, _tmop.new_TMOP_AMetric_051())
    __swig_destroy__ = _tmop.delete_TMOP_AMetric_051

# Register TMOP_AMetric_051 in _tmop:
_tmop.TMOP_AMetric_051_swigregister(TMOP_AMetric_051)
class TMOP_AMetric_107(TMOP_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_AMetric_107 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def EvalWMatrixForm(self, Jpt):
        r"""EvalWMatrixForm(TMOP_AMetric_107 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_AMetric_107_EvalWMatrixForm(self, Jpt)
    EvalWMatrixForm = _swig_new_instance_method(_tmop.TMOP_AMetric_107_EvalWMatrixForm)

    def EvalW(self, Jpt):
        r"""EvalW(TMOP_AMetric_107 self, DenseMatrix Jpt) -> mfem::real_t"""
        return _tmop.TMOP_AMetric_107_EvalW(self, Jpt)
    EvalW = _swig_new_instance_method(_tmop.TMOP_AMetric_107_EvalW)

    def EvalP(self, Jpt, P):
        r"""EvalP(TMOP_AMetric_107 self, DenseMatrix Jpt, DenseMatrix P)"""
        return _tmop.TMOP_AMetric_107_EvalP(self, Jpt, P)
    EvalP = _swig_new_instance_method(_tmop.TMOP_AMetric_107_EvalP)

    def EvalPW(self, Jpt, PW):
        r"""EvalPW(TMOP_AMetric_107 self, DenseMatrix Jpt, DenseMatrix PW)"""
        return _tmop.TMOP_AMetric_107_EvalPW(self, Jpt, PW)
    EvalPW = _swig_new_instance_method(_tmop.TMOP_AMetric_107_EvalPW)

    def AssembleH(self, Jpt, DS, weight, A):
        r"""AssembleH(TMOP_AMetric_107 self, DenseMatrix Jpt, DenseMatrix DS, mfem::real_t const weight, DenseMatrix A)"""
        return _tmop.TMOP_AMetric_107_AssembleH(self, Jpt, DS, weight, A)
    AssembleH = _swig_new_instance_method(_tmop.TMOP_AMetric_107_AssembleH)

    def __init__(self):
        r"""__init__(TMOP_AMetric_107 self) -> TMOP_AMetric_107"""
        _tmop.TMOP_AMetric_107_swiginit(self, _tmop.new_TMOP_AMetric_107())
    __swig_destroy__ = _tmop.delete_TMOP_AMetric_107

# Register TMOP_AMetric_107 in _tmop:
_tmop.TMOP_AMetric_107_swigregister(TMOP_AMetric_107)
class TMOP_AMetric_126(TMOP_Combo_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_AMetric_126 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gamma):
        r"""__init__(TMOP_AMetric_126 self, mfem::real_t gamma) -> TMOP_AMetric_126"""
        _tmop.TMOP_AMetric_126_swiginit(self, _tmop.new_TMOP_AMetric_126(gamma))
    __swig_destroy__ = _tmop.delete_TMOP_AMetric_126

# Register TMOP_AMetric_126 in _tmop:
_tmop.TMOP_AMetric_126_swigregister(TMOP_AMetric_126)
class TMOP_AMetric_049(TMOP_Combo_QualityMetric):
    r"""Proxy of C++ mfem::TMOP_AMetric_049 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gamma):
        r"""__init__(TMOP_AMetric_049 self, mfem::real_t gamma) -> TMOP_AMetric_049"""
        _tmop.TMOP_AMetric_049_swiginit(self, _tmop.new_TMOP_AMetric_049(gamma))

    def Id(self):
        r"""Id(TMOP_AMetric_049 self) -> int"""
        return _tmop.TMOP_AMetric_049_Id(self)
    Id = _swig_new_instance_method(_tmop.TMOP_AMetric_049_Id)

    def GetGamma(self):
        r"""GetGamma(TMOP_AMetric_049 self) -> mfem::real_t"""
        return _tmop.TMOP_AMetric_049_GetGamma(self)
    GetGamma = _swig_new_instance_method(_tmop.TMOP_AMetric_049_GetGamma)
    __swig_destroy__ = _tmop.delete_TMOP_AMetric_049

# Register TMOP_AMetric_049 in _tmop:
_tmop.TMOP_AMetric_049_swigregister(TMOP_AMetric_049)
class TMOP_LimiterFunction(object):
    r"""Proxy of C++ mfem::TMOP_LimiterFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Eval(self, x, x0, d):
        r"""Eval(TMOP_LimiterFunction self, Vector x, Vector x0, mfem::real_t d) -> mfem::real_t"""
        return _tmop.TMOP_LimiterFunction_Eval(self, x, x0, d)
    Eval = _swig_new_instance_method(_tmop.TMOP_LimiterFunction_Eval)

    def Eval_d1(self, x, x0, dist, d1):
        r"""Eval_d1(TMOP_LimiterFunction self, Vector x, Vector x0, mfem::real_t dist, Vector d1)"""
        return _tmop.TMOP_LimiterFunction_Eval_d1(self, x, x0, dist, d1)
    Eval_d1 = _swig_new_instance_method(_tmop.TMOP_LimiterFunction_Eval_d1)

    def Eval_d2(self, x, x0, dist, d2):
        r"""Eval_d2(TMOP_LimiterFunction self, Vector x, Vector x0, mfem::real_t dist, DenseMatrix d2)"""
        return _tmop.TMOP_LimiterFunction_Eval_d2(self, x, x0, dist, d2)
    Eval_d2 = _swig_new_instance_method(_tmop.TMOP_LimiterFunction_Eval_d2)
    __swig_destroy__ = _tmop.delete_TMOP_LimiterFunction

# Register TMOP_LimiterFunction in _tmop:
_tmop.TMOP_LimiterFunction_swigregister(TMOP_LimiterFunction)
class TMOP_QuadraticLimiter(TMOP_LimiterFunction):
    r"""Proxy of C++ mfem::TMOP_QuadraticLimiter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Eval(self, x, x0, dist):
        r"""Eval(TMOP_QuadraticLimiter self, Vector x, Vector x0, mfem::real_t dist) -> mfem::real_t"""
        return _tmop.TMOP_QuadraticLimiter_Eval(self, x, x0, dist)
    Eval = _swig_new_instance_method(_tmop.TMOP_QuadraticLimiter_Eval)

    def Eval_d1(self, x, x0, dist, d1):
        r"""Eval_d1(TMOP_QuadraticLimiter self, Vector x, Vector x0, mfem::real_t dist, Vector d1)"""
        return _tmop.TMOP_QuadraticLimiter_Eval_d1(self, x, x0, dist, d1)
    Eval_d1 = _swig_new_instance_method(_tmop.TMOP_QuadraticLimiter_Eval_d1)

    def Eval_d2(self, x, x0, dist, d2):
        r"""Eval_d2(TMOP_QuadraticLimiter self, Vector x, Vector x0, mfem::real_t dist, DenseMatrix d2)"""
        return _tmop.TMOP_QuadraticLimiter_Eval_d2(self, x, x0, dist, d2)
    Eval_d2 = _swig_new_instance_method(_tmop.TMOP_QuadraticLimiter_Eval_d2)
    __swig_destroy__ = _tmop.delete_TMOP_QuadraticLimiter

    def __init__(self):
        r"""__init__(TMOP_QuadraticLimiter self) -> TMOP_QuadraticLimiter"""
        _tmop.TMOP_QuadraticLimiter_swiginit(self, _tmop.new_TMOP_QuadraticLimiter())

# Register TMOP_QuadraticLimiter in _tmop:
_tmop.TMOP_QuadraticLimiter_swigregister(TMOP_QuadraticLimiter)
class TMOP_ExponentialLimiter(TMOP_LimiterFunction):
    r"""Proxy of C++ mfem::TMOP_ExponentialLimiter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Eval(self, x, x0, dist):
        r"""Eval(TMOP_ExponentialLimiter self, Vector x, Vector x0, mfem::real_t dist) -> mfem::real_t"""
        return _tmop.TMOP_ExponentialLimiter_Eval(self, x, x0, dist)
    Eval = _swig_new_instance_method(_tmop.TMOP_ExponentialLimiter_Eval)

    def Eval_d1(self, x, x0, dist, d1):
        r"""Eval_d1(TMOP_ExponentialLimiter self, Vector x, Vector x0, mfem::real_t dist, Vector d1)"""
        return _tmop.TMOP_ExponentialLimiter_Eval_d1(self, x, x0, dist, d1)
    Eval_d1 = _swig_new_instance_method(_tmop.TMOP_ExponentialLimiter_Eval_d1)

    def Eval_d2(self, x, x0, dist, d2):
        r"""Eval_d2(TMOP_ExponentialLimiter self, Vector x, Vector x0, mfem::real_t dist, DenseMatrix d2)"""
        return _tmop.TMOP_ExponentialLimiter_Eval_d2(self, x, x0, dist, d2)
    Eval_d2 = _swig_new_instance_method(_tmop.TMOP_ExponentialLimiter_Eval_d2)
    __swig_destroy__ = _tmop.delete_TMOP_ExponentialLimiter

    def __init__(self):
        r"""__init__(TMOP_ExponentialLimiter self) -> TMOP_ExponentialLimiter"""
        _tmop.TMOP_ExponentialLimiter_swiginit(self, _tmop.new_TMOP_ExponentialLimiter())

# Register TMOP_ExponentialLimiter in _tmop:
_tmop.TMOP_ExponentialLimiter_swigregister(TMOP_ExponentialLimiter)
class AdaptivityEvaluator(object):
    r"""Proxy of C++ mfem::AdaptivityEvaluator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tmop.delete_AdaptivityEvaluator

    def SetSerialMetaInfo(self, m, f):
        r"""SetSerialMetaInfo(AdaptivityEvaluator self, Mesh m, FiniteElementSpace f)"""
        return _tmop.AdaptivityEvaluator_SetSerialMetaInfo(self, m, f)
    SetSerialMetaInfo = _swig_new_instance_method(_tmop.AdaptivityEvaluator_SetSerialMetaInfo)

    def SetInitialField(self, init_nodes, init_field):
        r"""SetInitialField(AdaptivityEvaluator self, Vector init_nodes, Vector init_field)"""
        return _tmop.AdaptivityEvaluator_SetInitialField(self, init_nodes, init_field)
    SetInitialField = _swig_new_instance_method(_tmop.AdaptivityEvaluator_SetInitialField)

    def SetNewFieldFESpace(self, fes):
        r"""SetNewFieldFESpace(AdaptivityEvaluator self, FiniteElementSpace fes)"""
        return _tmop.AdaptivityEvaluator_SetNewFieldFESpace(self, fes)
    SetNewFieldFESpace = _swig_new_instance_method(_tmop.AdaptivityEvaluator_SetNewFieldFESpace)

    def ComputeAtNewPosition(self, *args, **kwargs):
        r"""ComputeAtNewPosition(AdaptivityEvaluator self, Vector new_mesh_nodes, Vector new_field, int nodes_ordering=byNODES)"""
        return _tmop.AdaptivityEvaluator_ComputeAtNewPosition(self, *args, **kwargs)
    ComputeAtNewPosition = _swig_new_instance_method(_tmop.AdaptivityEvaluator_ComputeAtNewPosition)

    def ComputeAtGivenPositions(self, *args, **kwargs):
        r"""ComputeAtGivenPositions(AdaptivityEvaluator self, Vector positions, Vector values, int p_ordering=byNODES)"""
        return _tmop.AdaptivityEvaluator_ComputeAtGivenPositions(self, *args, **kwargs)
    ComputeAtGivenPositions = _swig_new_instance_method(_tmop.AdaptivityEvaluator_ComputeAtGivenPositions)

    def ClearGeometricFactors(self):
        r"""ClearGeometricFactors(AdaptivityEvaluator self)"""
        return _tmop.AdaptivityEvaluator_ClearGeometricFactors(self)
    ClearGeometricFactors = _swig_new_instance_method(_tmop.AdaptivityEvaluator_ClearGeometricFactors)

# Register AdaptivityEvaluator in _tmop:
_tmop.AdaptivityEvaluator_swigregister(AdaptivityEvaluator)
class TargetConstructor(object):
    r"""Proxy of C++ mfem::TargetConstructor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IDEAL_SHAPE_UNIT_SIZE = _tmop.TargetConstructor_IDEAL_SHAPE_UNIT_SIZE
    
    IDEAL_SHAPE_EQUAL_SIZE = _tmop.TargetConstructor_IDEAL_SHAPE_EQUAL_SIZE
    
    IDEAL_SHAPE_GIVEN_SIZE = _tmop.TargetConstructor_IDEAL_SHAPE_GIVEN_SIZE
    
    GIVEN_SHAPE_AND_SIZE = _tmop.TargetConstructor_GIVEN_SHAPE_AND_SIZE
    
    GIVEN_FULL = _tmop.TargetConstructor_GIVEN_FULL
    

    def __init__(self, ttype):
        r"""__init__(TargetConstructor self, mfem::TargetConstructor::TargetType ttype) -> TargetConstructor"""
        _tmop.TargetConstructor_swiginit(self, _tmop.new_TargetConstructor(ttype))
    __swig_destroy__ = _tmop.delete_TargetConstructor

    def Parallel(self):
        r"""Parallel(TargetConstructor self) -> bool"""
        return _tmop.TargetConstructor_Parallel(self)
    Parallel = _swig_new_instance_method(_tmop.TargetConstructor_Parallel)

    def SetNodes(self, n):
        r"""SetNodes(TargetConstructor self, GridFunction n)"""
        return _tmop.TargetConstructor_SetNodes(self, n)
    SetNodes = _swig_new_instance_method(_tmop.TargetConstructor_SetNodes)

    def GetNodes(self):
        r"""GetNodes(TargetConstructor self) -> GridFunction"""
        return _tmop.TargetConstructor_GetNodes(self)
    GetNodes = _swig_new_instance_method(_tmop.TargetConstructor_GetNodes)

    def SetVolumeScale(self, vol_scale):
        r"""SetVolumeScale(TargetConstructor self, mfem::real_t vol_scale)"""
        return _tmop.TargetConstructor_SetVolumeScale(self, vol_scale)
    SetVolumeScale = _swig_new_instance_method(_tmop.TargetConstructor_SetVolumeScale)

    def GetTargetType(self):
        r"""GetTargetType(TargetConstructor self) -> mfem::TargetConstructor::TargetType"""
        return _tmop.TargetConstructor_GetTargetType(self)
    GetTargetType = _swig_new_instance_method(_tmop.TargetConstructor_GetTargetType)

    def UsesPhysicalCoordinates(self):
        r"""UsesPhysicalCoordinates(TargetConstructor self) -> bool"""
        return _tmop.TargetConstructor_UsesPhysicalCoordinates(self)
    UsesPhysicalCoordinates = _swig_new_instance_method(_tmop.TargetConstructor_UsesPhysicalCoordinates)

    def ContainsVolumeInfo(self):
        r"""ContainsVolumeInfo(TargetConstructor self) -> bool"""
        return _tmop.TargetConstructor_ContainsVolumeInfo(self)
    ContainsVolumeInfo = _swig_new_instance_method(_tmop.TargetConstructor_ContainsVolumeInfo)

    def ComputeElementTargets(self, e_id, fe, ir, elfun, Jtr):
        r"""ComputeElementTargets(TargetConstructor self, int e_id, FiniteElement fe, IntegrationRule ir, Vector elfun, DenseTensor Jtr)"""
        return _tmop.TargetConstructor_ComputeElementTargets(self, e_id, fe, ir, elfun, Jtr)
    ComputeElementTargets = _swig_new_instance_method(_tmop.TargetConstructor_ComputeElementTargets)

    def ComputeAllElementTargets(self, fes, ir, xe, Jtr):
        r"""ComputeAllElementTargets(TargetConstructor self, FiniteElementSpace fes, IntegrationRule ir, Vector xe, DenseTensor Jtr)"""
        return _tmop.TargetConstructor_ComputeAllElementTargets(self, fes, ir, xe, Jtr)
    ComputeAllElementTargets = _swig_new_instance_method(_tmop.TargetConstructor_ComputeAllElementTargets)

    def ComputeElementTargetsGradient(self, ir, elfun, Tpr, dJtr):
        r"""ComputeElementTargetsGradient(TargetConstructor self, IntegrationRule ir, Vector elfun, IsoparametricTransformation Tpr, DenseTensor dJtr)"""
        return _tmop.TargetConstructor_ComputeElementTargetsGradient(self, ir, elfun, Tpr, dJtr)
    ComputeElementTargetsGradient = _swig_new_instance_method(_tmop.TargetConstructor_ComputeElementTargetsGradient)

# Register TargetConstructor in _tmop:
_tmop.TargetConstructor_swigregister(TargetConstructor)
class TMOPMatrixCoefficient(mfem._ser.coefficient.MatrixCoefficient):
    r"""Proxy of C++ mfem::TMOPMatrixCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def EvalGrad(self, K, T, ip, comp):
        r"""EvalGrad(TMOPMatrixCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip, int comp)"""
        return _tmop.TMOPMatrixCoefficient_EvalGrad(self, K, T, ip, comp)
    EvalGrad = _swig_new_instance_method(_tmop.TMOPMatrixCoefficient_EvalGrad)
    __swig_destroy__ = _tmop.delete_TMOPMatrixCoefficient

# Register TMOPMatrixCoefficient in _tmop:
_tmop.TMOPMatrixCoefficient_swigregister(TMOPMatrixCoefficient)
class AnalyticAdaptTC(TargetConstructor):
    r"""Proxy of C++ mfem::AnalyticAdaptTC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ttype):
        r"""__init__(AnalyticAdaptTC self, mfem::TargetConstructor::TargetType ttype) -> AnalyticAdaptTC"""
        _tmop.AnalyticAdaptTC_swiginit(self, _tmop.new_AnalyticAdaptTC(ttype))

    def SetAnalyticTargetSpec(self, sspec, vspec, mspec):
        r"""SetAnalyticTargetSpec(AnalyticAdaptTC self, Coefficient sspec, VectorCoefficient vspec, TMOPMatrixCoefficient mspec)"""
        return _tmop.AnalyticAdaptTC_SetAnalyticTargetSpec(self, sspec, vspec, mspec)
    SetAnalyticTargetSpec = _swig_new_instance_method(_tmop.AnalyticAdaptTC_SetAnalyticTargetSpec)

    def ComputeElementTargets(self, e_id, fe, ir, elfun, Jtr):
        r"""ComputeElementTargets(AnalyticAdaptTC self, int e_id, FiniteElement fe, IntegrationRule ir, Vector elfun, DenseTensor Jtr)"""
        return _tmop.AnalyticAdaptTC_ComputeElementTargets(self, e_id, fe, ir, elfun, Jtr)
    ComputeElementTargets = _swig_new_instance_method(_tmop.AnalyticAdaptTC_ComputeElementTargets)

    def ComputeAllElementTargets(self, fes, ir, xe, Jtr):
        r"""ComputeAllElementTargets(AnalyticAdaptTC self, FiniteElementSpace fes, IntegrationRule ir, Vector xe, DenseTensor Jtr)"""
        return _tmop.AnalyticAdaptTC_ComputeAllElementTargets(self, fes, ir, xe, Jtr)
    ComputeAllElementTargets = _swig_new_instance_method(_tmop.AnalyticAdaptTC_ComputeAllElementTargets)

    def ComputeElementTargetsGradient(self, ir, elfun, Tpr, dJtr):
        r"""ComputeElementTargetsGradient(AnalyticAdaptTC self, IntegrationRule ir, Vector elfun, IsoparametricTransformation Tpr, DenseTensor dJtr)"""
        return _tmop.AnalyticAdaptTC_ComputeElementTargetsGradient(self, ir, elfun, Tpr, dJtr)
    ComputeElementTargetsGradient = _swig_new_instance_method(_tmop.AnalyticAdaptTC_ComputeElementTargetsGradient)
    __swig_destroy__ = _tmop.delete_AnalyticAdaptTC

# Register AnalyticAdaptTC in _tmop:
_tmop.AnalyticAdaptTC_swigregister(AnalyticAdaptTC)
class DiscreteAdaptTC(TargetConstructor):
    r"""Proxy of C++ mfem::DiscreteAdaptTC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ttype):
        r"""__init__(DiscreteAdaptTC self, mfem::TargetConstructor::TargetType ttype) -> DiscreteAdaptTC"""
        _tmop.DiscreteAdaptTC_swiginit(self, _tmop.new_DiscreteAdaptTC(ttype))
    __swig_destroy__ = _tmop.delete_DiscreteAdaptTC

    def SetSerialDiscreteTargetSpec(self, tspec_):
        r"""SetSerialDiscreteTargetSpec(DiscreteAdaptTC self, GridFunction tspec_)"""
        return _tmop.DiscreteAdaptTC_SetSerialDiscreteTargetSpec(self, tspec_)
    SetSerialDiscreteTargetSpec = _swig_new_instance_method(_tmop.DiscreteAdaptTC_SetSerialDiscreteTargetSpec)

    def SetSerialDiscreteTargetSize(self, tspec_):
        r"""SetSerialDiscreteTargetSize(DiscreteAdaptTC self, GridFunction tspec_)"""
        return _tmop.DiscreteAdaptTC_SetSerialDiscreteTargetSize(self, tspec_)
    SetSerialDiscreteTargetSize = _swig_new_instance_method(_tmop.DiscreteAdaptTC_SetSerialDiscreteTargetSize)

    def SetSerialDiscreteTargetSkew(self, tspec_):
        r"""SetSerialDiscreteTargetSkew(DiscreteAdaptTC self, GridFunction tspec_)"""
        return _tmop.DiscreteAdaptTC_SetSerialDiscreteTargetSkew(self, tspec_)
    SetSerialDiscreteTargetSkew = _swig_new_instance_method(_tmop.DiscreteAdaptTC_SetSerialDiscreteTargetSkew)

    def SetSerialDiscreteTargetAspectRatio(self, tspec_):
        r"""SetSerialDiscreteTargetAspectRatio(DiscreteAdaptTC self, GridFunction tspec_)"""
        return _tmop.DiscreteAdaptTC_SetSerialDiscreteTargetAspectRatio(self, tspec_)
    SetSerialDiscreteTargetAspectRatio = _swig_new_instance_method(_tmop.DiscreteAdaptTC_SetSerialDiscreteTargetAspectRatio)

    def SetSerialDiscreteTargetOrientation(self, tspec_):
        r"""SetSerialDiscreteTargetOrientation(DiscreteAdaptTC self, GridFunction tspec_)"""
        return _tmop.DiscreteAdaptTC_SetSerialDiscreteTargetOrientation(self, tspec_)
    SetSerialDiscreteTargetOrientation = _swig_new_instance_method(_tmop.DiscreteAdaptTC_SetSerialDiscreteTargetOrientation)

    def ResetUpdateFlags(self):
        r"""ResetUpdateFlags(DiscreteAdaptTC self)"""
        return _tmop.DiscreteAdaptTC_ResetUpdateFlags(self)
    ResetUpdateFlags = _swig_new_instance_method(_tmop.DiscreteAdaptTC_ResetUpdateFlags)

    def GetDiscreteTargetSpec(self, tspec_, idx):
        r"""GetDiscreteTargetSpec(DiscreteAdaptTC self, GridFunction tspec_, int idx)"""
        return _tmop.DiscreteAdaptTC_GetDiscreteTargetSpec(self, tspec_, idx)
    GetDiscreteTargetSpec = _swig_new_instance_method(_tmop.DiscreteAdaptTC_GetDiscreteTargetSpec)

    def GetTSpecFESpace(self):
        r"""GetTSpecFESpace(DiscreteAdaptTC self) -> FiniteElementSpace"""
        return _tmop.DiscreteAdaptTC_GetTSpecFESpace(self)
    GetTSpecFESpace = _swig_new_instance_method(_tmop.DiscreteAdaptTC_GetTSpecFESpace)

    def GetTSpecData(self):
        r"""GetTSpecData(DiscreteAdaptTC self) -> GridFunction"""
        return _tmop.DiscreteAdaptTC_GetTSpecData(self)
    GetTSpecData = _swig_new_instance_method(_tmop.DiscreteAdaptTC_GetTSpecData)

    def UpdateAfterMeshTopologyChange(self):
        r"""UpdateAfterMeshTopologyChange(DiscreteAdaptTC self)"""
        return _tmop.DiscreteAdaptTC_UpdateAfterMeshTopologyChange(self)
    UpdateAfterMeshTopologyChange = _swig_new_instance_method(_tmop.DiscreteAdaptTC_UpdateAfterMeshTopologyChange)

    def UpdateTargetSpecification(self, *args):
        r"""
        UpdateTargetSpecification(DiscreteAdaptTC self, Vector new_x, bool reuse_flag=False, int new_x_ordering=byNODES)
        UpdateTargetSpecification(DiscreteAdaptTC self, Vector new_x, Vector IntData, int new_x_ordering=byNODES)
        """
        return _tmop.DiscreteAdaptTC_UpdateTargetSpecification(self, *args)
    UpdateTargetSpecification = _swig_new_instance_method(_tmop.DiscreteAdaptTC_UpdateTargetSpecification)

    def UpdateTargetSpecificationAtNode(self, el, T, nodenum, idir, IntData):
        r"""UpdateTargetSpecificationAtNode(DiscreteAdaptTC self, FiniteElement el, ElementTransformation T, int nodenum, int idir, Vector IntData)"""
        return _tmop.DiscreteAdaptTC_UpdateTargetSpecificationAtNode(self, el, T, nodenum, idir, IntData)
    UpdateTargetSpecificationAtNode = _swig_new_instance_method(_tmop.DiscreteAdaptTC_UpdateTargetSpecificationAtNode)

    def RestoreTargetSpecificationAtNode(self, T, nodenum):
        r"""RestoreTargetSpecificationAtNode(DiscreteAdaptTC self, ElementTransformation T, int nodenum)"""
        return _tmop.DiscreteAdaptTC_RestoreTargetSpecificationAtNode(self, T, nodenum)
    RestoreTargetSpecificationAtNode = _swig_new_instance_method(_tmop.DiscreteAdaptTC_RestoreTargetSpecificationAtNode)

    def UpdateGradientTargetSpecification(self, *args, **kwargs):
        r"""UpdateGradientTargetSpecification(DiscreteAdaptTC self, Vector x, mfem::real_t dx, bool reuse_flag=False, int x_ordering=byNODES)"""
        return _tmop.DiscreteAdaptTC_UpdateGradientTargetSpecification(self, *args, **kwargs)
    UpdateGradientTargetSpecification = _swig_new_instance_method(_tmop.DiscreteAdaptTC_UpdateGradientTargetSpecification)

    def UpdateHessianTargetSpecification(self, *args, **kwargs):
        r"""UpdateHessianTargetSpecification(DiscreteAdaptTC self, Vector x, mfem::real_t dx, bool reuse_flag=False, int x_ordering=byNODES)"""
        return _tmop.DiscreteAdaptTC_UpdateHessianTargetSpecification(self, *args, **kwargs)
    UpdateHessianTargetSpecification = _swig_new_instance_method(_tmop.DiscreteAdaptTC_UpdateHessianTargetSpecification)

    def SetAdaptivityEvaluator(self, ae):
        r"""SetAdaptivityEvaluator(DiscreteAdaptTC self, AdaptivityEvaluator ae)"""
        val = _tmop.DiscreteAdaptTC_SetAdaptivityEvaluator(self, ae)

        ae.thisown = 0


        return val


    def GetAdaptivityEvaluator(self):
        r"""GetAdaptivityEvaluator(DiscreteAdaptTC self) -> AdaptivityEvaluator"""
        return _tmop.DiscreteAdaptTC_GetAdaptivityEvaluator(self)
    GetAdaptivityEvaluator = _swig_new_instance_method(_tmop.DiscreteAdaptTC_GetAdaptivityEvaluator)

    def GetTspecPert1H(self):
        r"""GetTspecPert1H(DiscreteAdaptTC self) -> Vector"""
        return _tmop.DiscreteAdaptTC_GetTspecPert1H(self)
    GetTspecPert1H = _swig_new_instance_method(_tmop.DiscreteAdaptTC_GetTspecPert1H)

    def GetTspecPert2H(self):
        r"""GetTspecPert2H(DiscreteAdaptTC self) -> Vector"""
        return _tmop.DiscreteAdaptTC_GetTspecPert2H(self)
    GetTspecPert2H = _swig_new_instance_method(_tmop.DiscreteAdaptTC_GetTspecPert2H)

    def GetTspecPertMixH(self):
        r"""GetTspecPertMixH(DiscreteAdaptTC self) -> Vector"""
        return _tmop.DiscreteAdaptTC_GetTspecPertMixH(self)
    GetTspecPertMixH = _swig_new_instance_method(_tmop.DiscreteAdaptTC_GetTspecPertMixH)

    def ComputeElementTargets(self, e_id, fe, ir, elfun, Jtr):
        r"""ComputeElementTargets(DiscreteAdaptTC self, int e_id, FiniteElement fe, IntegrationRule ir, Vector elfun, DenseTensor Jtr)"""
        return _tmop.DiscreteAdaptTC_ComputeElementTargets(self, e_id, fe, ir, elfun, Jtr)
    ComputeElementTargets = _swig_new_instance_method(_tmop.DiscreteAdaptTC_ComputeElementTargets)

    def ComputeAllElementTargets(self, fes, ir, xe, Jtr):
        r"""ComputeAllElementTargets(DiscreteAdaptTC self, FiniteElementSpace fes, IntegrationRule ir, Vector xe, DenseTensor Jtr)"""
        return _tmop.DiscreteAdaptTC_ComputeAllElementTargets(self, fes, ir, xe, Jtr)
    ComputeAllElementTargets = _swig_new_instance_method(_tmop.DiscreteAdaptTC_ComputeAllElementTargets)

    def ComputeElementTargetsGradient(self, ir, elfun, Tpr, dJtr):
        r"""ComputeElementTargetsGradient(DiscreteAdaptTC self, IntegrationRule ir, Vector elfun, IsoparametricTransformation Tpr, DenseTensor dJtr)"""
        return _tmop.DiscreteAdaptTC_ComputeElementTargetsGradient(self, ir, elfun, Tpr, dJtr)
    ComputeElementTargetsGradient = _swig_new_instance_method(_tmop.DiscreteAdaptTC_ComputeElementTargetsGradient)

    def SetTspecFromIntRule(self, e_id, intrule):
        r"""SetTspecFromIntRule(DiscreteAdaptTC self, int e_id, IntegrationRule intrule)"""
        return _tmop.DiscreteAdaptTC_SetTspecFromIntRule(self, e_id, intrule)
    SetTspecFromIntRule = _swig_new_instance_method(_tmop.DiscreteAdaptTC_SetTspecFromIntRule)

    def SetMinSizeForTargets(self, min_size_):
        r"""SetMinSizeForTargets(DiscreteAdaptTC self, mfem::real_t min_size_)"""
        return _tmop.DiscreteAdaptTC_SetMinSizeForTargets(self, min_size_)
    SetMinSizeForTargets = _swig_new_instance_method(_tmop.DiscreteAdaptTC_SetMinSizeForTargets)

    def SetTspecDataForDerefinement(self, fes):
        r"""SetTspecDataForDerefinement(DiscreteAdaptTC self, FiniteElementSpace fes)"""
        return _tmop.DiscreteAdaptTC_SetTspecDataForDerefinement(self, fes)
    SetTspecDataForDerefinement = _swig_new_instance_method(_tmop.DiscreteAdaptTC_SetTspecDataForDerefinement)

    def ResetRefinementTspecData(self):
        r"""ResetRefinementTspecData(DiscreteAdaptTC self)"""
        return _tmop.DiscreteAdaptTC_ResetRefinementTspecData(self)
    ResetRefinementTspecData = _swig_new_instance_method(_tmop.DiscreteAdaptTC_ResetRefinementTspecData)

    def ResetDerefinementTspecData(self):
        r"""ResetDerefinementTspecData(DiscreteAdaptTC self)"""
        return _tmop.DiscreteAdaptTC_ResetDerefinementTspecData(self)
    ResetDerefinementTspecData = _swig_new_instance_method(_tmop.DiscreteAdaptTC_ResetDerefinementTspecData)

    def SetRefinementSubElement(self, amr_el_):
        r"""SetRefinementSubElement(DiscreteAdaptTC self, int amr_el_)"""
        return _tmop.DiscreteAdaptTC_SetRefinementSubElement(self, amr_el_)
    SetRefinementSubElement = _swig_new_instance_method(_tmop.DiscreteAdaptTC_SetRefinementSubElement)

# Register DiscreteAdaptTC in _tmop:
_tmop.DiscreteAdaptTC_swigregister(DiscreteAdaptTC)
class TMOP_Integrator(mfem._ser.nonlininteg.NonlinearFormIntegrator):
    r"""Proxy of C++ mfem::TMOP_Integrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TMOP_Integrator self, TMOP_QualityMetric m, TargetConstructor tc, TMOP_QualityMetric hm) -> TMOP_Integrator
        __init__(TMOP_Integrator self, TMOP_QualityMetric m, TargetConstructor tc) -> TMOP_Integrator
        """
        _tmop.TMOP_Integrator_swiginit(self, _tmop.new_TMOP_Integrator(*args))
    __swig_destroy__ = _tmop.delete_TMOP_Integrator

    def ReleasePADeviceMemory(self, copy_to_host=True):
        r"""ReleasePADeviceMemory(TMOP_Integrator self, bool copy_to_host=True)"""
        return _tmop.TMOP_Integrator_ReleasePADeviceMemory(self, copy_to_host)
    ReleasePADeviceMemory = _swig_new_instance_method(_tmop.TMOP_Integrator_ReleasePADeviceMemory)

    def SetIntegrationRules(self, irules, order):
        r"""SetIntegrationRules(TMOP_Integrator self, IntegrationRules irules, int order)"""
        return _tmop.TMOP_Integrator_SetIntegrationRules(self, irules, order)
    SetIntegrationRules = _swig_new_instance_method(_tmop.TMOP_Integrator_SetIntegrationRules)

    def SetInitialMeshPos(self, x0):
        r"""SetInitialMeshPos(TMOP_Integrator self, GridFunction x0)"""
        return _tmop.TMOP_Integrator_SetInitialMeshPos(self, x0)
    SetInitialMeshPos = _swig_new_instance_method(_tmop.TMOP_Integrator_SetInitialMeshPos)

    def IntegrateOverTarget(self, integ_over_target_):
        r"""IntegrateOverTarget(TMOP_Integrator self, bool integ_over_target_)"""
        return _tmop.TMOP_Integrator_IntegrateOverTarget(self, integ_over_target_)
    IntegrateOverTarget = _swig_new_instance_method(_tmop.TMOP_Integrator_IntegrateOverTarget)

    def SetCoefficient(self, w1):
        r"""SetCoefficient(TMOP_Integrator self, Coefficient w1)"""
        return _tmop.TMOP_Integrator_SetCoefficient(self, w1)
    SetCoefficient = _swig_new_instance_method(_tmop.TMOP_Integrator_SetCoefficient)

    def EnableLimiting(self, *args):
        r"""
        EnableLimiting(TMOP_Integrator self, GridFunction n0, GridFunction dist, Coefficient w0, TMOP_LimiterFunction lfunc=None)
        EnableLimiting(TMOP_Integrator self, GridFunction n0, Coefficient w0, TMOP_LimiterFunction lfunc=None)
        """
        return _tmop.TMOP_Integrator_EnableLimiting(self, *args)
    EnableLimiting = _swig_new_instance_method(_tmop.TMOP_Integrator_EnableLimiting)

    def EnableAdaptiveLimiting(self, z0, coeff, ae):
        r"""EnableAdaptiveLimiting(TMOP_Integrator self, GridFunction z0, Coefficient coeff, AdaptivityEvaluator ae)"""
        return _tmop.TMOP_Integrator_EnableAdaptiveLimiting(self, z0, coeff, ae)
    EnableAdaptiveLimiting = _swig_new_instance_method(_tmop.TMOP_Integrator_EnableAdaptiveLimiting)

    def EnableSurfaceFitting(self, *args):
        r"""
        EnableSurfaceFitting(TMOP_Integrator self, GridFunction s0, boolArray smarker, Coefficient coeff, AdaptivityEvaluator ae)
        EnableSurfaceFitting(TMOP_Integrator self, GridFunction pos, boolArray smarker, Coefficient coeff)
        """
        return _tmop.TMOP_Integrator_EnableSurfaceFitting(self, *args)
    EnableSurfaceFitting = _swig_new_instance_method(_tmop.TMOP_Integrator_EnableSurfaceFitting)

    def GetSurfaceFittingErrors(self, d_loc, err_avg, err_max):
        r"""GetSurfaceFittingErrors(TMOP_Integrator self, Vector d_loc, mfem::real_t & err_avg, mfem::real_t & err_max)"""
        return _tmop.TMOP_Integrator_GetSurfaceFittingErrors(self, d_loc, err_avg, err_max)
    GetSurfaceFittingErrors = _swig_new_instance_method(_tmop.TMOP_Integrator_GetSurfaceFittingErrors)

    def IsSurfaceFittingEnabled(self):
        r"""IsSurfaceFittingEnabled(TMOP_Integrator self) -> bool"""
        return _tmop.TMOP_Integrator_IsSurfaceFittingEnabled(self)
    IsSurfaceFittingEnabled = _swig_new_instance_method(_tmop.TMOP_Integrator_IsSurfaceFittingEnabled)

    def SetLimitingNodes(self, n0):
        r"""SetLimitingNodes(TMOP_Integrator self, GridFunction n0)"""
        return _tmop.TMOP_Integrator_SetLimitingNodes(self, n0)
    SetLimitingNodes = _swig_new_instance_method(_tmop.TMOP_Integrator_SetLimitingNodes)

    def GetElementEnergy(self, el, T, d_el):
        r"""GetElementEnergy(TMOP_Integrator self, FiniteElement el, ElementTransformation T, Vector d_el) -> mfem::real_t"""
        return _tmop.TMOP_Integrator_GetElementEnergy(self, el, T, d_el)
    GetElementEnergy = _swig_new_instance_method(_tmop.TMOP_Integrator_GetElementEnergy)

    def GetRefinementElementEnergy(self, el, T, elfun, irule):
        r"""GetRefinementElementEnergy(TMOP_Integrator self, FiniteElement el, ElementTransformation T, Vector elfun, IntegrationRule irule) -> mfem::real_t"""
        return _tmop.TMOP_Integrator_GetRefinementElementEnergy(self, el, T, elfun, irule)
    GetRefinementElementEnergy = _swig_new_instance_method(_tmop.TMOP_Integrator_GetRefinementElementEnergy)

    def GetDerefinementElementEnergy(self, el, T, elfun):
        r"""GetDerefinementElementEnergy(TMOP_Integrator self, FiniteElement el, ElementTransformation T, Vector elfun) -> mfem::real_t"""
        return _tmop.TMOP_Integrator_GetDerefinementElementEnergy(self, el, T, elfun)
    GetDerefinementElementEnergy = _swig_new_instance_method(_tmop.TMOP_Integrator_GetDerefinementElementEnergy)

    def AssembleElementVector(self, el, T, d_el, elvect):
        r"""AssembleElementVector(TMOP_Integrator self, FiniteElement el, ElementTransformation T, Vector d_el, Vector elvect)"""
        return _tmop.TMOP_Integrator_AssembleElementVector(self, el, T, d_el, elvect)
    AssembleElementVector = _swig_new_instance_method(_tmop.TMOP_Integrator_AssembleElementVector)

    def AssembleElementGrad(self, el, T, d_el, elmat):
        r"""AssembleElementGrad(TMOP_Integrator self, FiniteElement el, ElementTransformation T, Vector d_el, DenseMatrix elmat)"""
        return _tmop.TMOP_Integrator_AssembleElementGrad(self, el, T, d_el, elmat)
    AssembleElementGrad = _swig_new_instance_method(_tmop.TMOP_Integrator_AssembleElementGrad)

    def GetAMRQualityMetric(self):
        r"""GetAMRQualityMetric(TMOP_Integrator self) -> TMOP_QualityMetric"""
        return _tmop.TMOP_Integrator_GetAMRQualityMetric(self)
    GetAMRQualityMetric = _swig_new_instance_method(_tmop.TMOP_Integrator_GetAMRQualityMetric)

    def UpdateAfterMeshTopologyChange(self):
        r"""UpdateAfterMeshTopologyChange(TMOP_Integrator self)"""
        return _tmop.TMOP_Integrator_UpdateAfterMeshTopologyChange(self)
    UpdateAfterMeshTopologyChange = _swig_new_instance_method(_tmop.TMOP_Integrator_UpdateAfterMeshTopologyChange)

    def AssemblePA(self, *args):
        r"""
        AssemblePA(TMOP_Integrator self, FiniteElementSpace trial_fes, FiniteElementSpace test_fes)
        AssemblePA(TMOP_Integrator self, FiniteElementSpace arg2)
        """
        return _tmop.TMOP_Integrator_AssemblePA(self, *args)
    AssemblePA = _swig_new_instance_method(_tmop.TMOP_Integrator_AssemblePA)

    def AssembleGradPA(self, arg2, arg3):
        r"""AssembleGradPA(TMOP_Integrator self, Vector arg2, FiniteElementSpace arg3)"""
        return _tmop.TMOP_Integrator_AssembleGradPA(self, arg2, arg3)
    AssembleGradPA = _swig_new_instance_method(_tmop.TMOP_Integrator_AssembleGradPA)

    def GetLocalStateEnergyPA(self, arg2):
        r"""GetLocalStateEnergyPA(TMOP_Integrator self, Vector arg2) -> mfem::real_t"""
        return _tmop.TMOP_Integrator_GetLocalStateEnergyPA(self, arg2)
    GetLocalStateEnergyPA = _swig_new_instance_method(_tmop.TMOP_Integrator_GetLocalStateEnergyPA)

    def AddMultPA(self, arg2, arg3):
        r"""AddMultPA(TMOP_Integrator self, Vector arg2, Vector arg3)"""
        return _tmop.TMOP_Integrator_AddMultPA(self, arg2, arg3)
    AddMultPA = _swig_new_instance_method(_tmop.TMOP_Integrator_AddMultPA)

    def AddMultGradPA(self, arg2, arg3):
        r"""AddMultGradPA(TMOP_Integrator self, Vector arg2, Vector arg3)"""
        return _tmop.TMOP_Integrator_AddMultGradPA(self, arg2, arg3)
    AddMultGradPA = _swig_new_instance_method(_tmop.TMOP_Integrator_AddMultGradPA)

    def AssembleGradDiagonalPA(self, arg2):
        r"""AssembleGradDiagonalPA(TMOP_Integrator self, Vector arg2)"""
        return _tmop.TMOP_Integrator_AssembleGradDiagonalPA(self, arg2)
    AssembleGradDiagonalPA = _swig_new_instance_method(_tmop.TMOP_Integrator_AssembleGradDiagonalPA)

    def GetDiscreteAdaptTC(self):
        r"""GetDiscreteAdaptTC(TMOP_Integrator self) -> DiscreteAdaptTC"""
        return _tmop.TMOP_Integrator_GetDiscreteAdaptTC(self)
    GetDiscreteAdaptTC = _swig_new_instance_method(_tmop.TMOP_Integrator_GetDiscreteAdaptTC)

    def EnableNormalization(self, x):
        r"""EnableNormalization(TMOP_Integrator self, GridFunction x)"""
        return _tmop.TMOP_Integrator_EnableNormalization(self, x)
    EnableNormalization = _swig_new_instance_method(_tmop.TMOP_Integrator_EnableNormalization)

    def EnableFiniteDifferences(self, x):
        r"""EnableFiniteDifferences(TMOP_Integrator self, GridFunction x)"""
        return _tmop.TMOP_Integrator_EnableFiniteDifferences(self, x)
    EnableFiniteDifferences = _swig_new_instance_method(_tmop.TMOP_Integrator_EnableFiniteDifferences)

    def SetFDhScale(self, scale):
        r"""SetFDhScale(TMOP_Integrator self, mfem::real_t scale)"""
        return _tmop.TMOP_Integrator_SetFDhScale(self, scale)
    SetFDhScale = _swig_new_instance_method(_tmop.TMOP_Integrator_SetFDhScale)

    def GetFDFlag(self):
        r"""GetFDFlag(TMOP_Integrator self) -> bool"""
        return _tmop.TMOP_Integrator_GetFDFlag(self)
    GetFDFlag = _swig_new_instance_method(_tmop.TMOP_Integrator_GetFDFlag)

    def GetFDh(self):
        r"""GetFDh(TMOP_Integrator self) -> mfem::real_t"""
        return _tmop.TMOP_Integrator_GetFDh(self)
    GetFDh = _swig_new_instance_method(_tmop.TMOP_Integrator_GetFDh)

    def SetExactActionFlag(self, flag_):
        r"""SetExactActionFlag(TMOP_Integrator self, bool flag_)"""
        return _tmop.TMOP_Integrator_SetExactActionFlag(self, flag_)
    SetExactActionFlag = _swig_new_instance_method(_tmop.TMOP_Integrator_SetExactActionFlag)

    def UpdateSurfaceFittingWeight(self, factor):
        r"""UpdateSurfaceFittingWeight(TMOP_Integrator self, mfem::real_t factor)"""
        return _tmop.TMOP_Integrator_UpdateSurfaceFittingWeight(self, factor)
    UpdateSurfaceFittingWeight = _swig_new_instance_method(_tmop.TMOP_Integrator_UpdateSurfaceFittingWeight)

    def GetSurfaceFittingWeight(self):
        r"""GetSurfaceFittingWeight(TMOP_Integrator self) -> mfem::real_t"""
        return _tmop.TMOP_Integrator_GetSurfaceFittingWeight(self)
    GetSurfaceFittingWeight = _swig_new_instance_method(_tmop.TMOP_Integrator_GetSurfaceFittingWeight)

    def ComputeUntangleMetricQuantiles(self, d, fes):
        r"""ComputeUntangleMetricQuantiles(TMOP_Integrator self, Vector d, FiniteElementSpace fes)"""
        return _tmop.TMOP_Integrator_ComputeUntangleMetricQuantiles(self, d, fes)
    ComputeUntangleMetricQuantiles = _swig_new_instance_method(_tmop.TMOP_Integrator_ComputeUntangleMetricQuantiles)

# Register TMOP_Integrator in _tmop:
_tmop.TMOP_Integrator_swigregister(TMOP_Integrator)
class TMOPComboIntegrator(mfem._ser.nonlininteg.NonlinearFormIntegrator):
    r"""Proxy of C++ mfem::TMOPComboIntegrator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TMOPComboIntegrator self) -> TMOPComboIntegrator"""
        _tmop.TMOPComboIntegrator_swiginit(self, _tmop.new_TMOPComboIntegrator())
    __swig_destroy__ = _tmop.delete_TMOPComboIntegrator

    def AddTMOPIntegrator(self, ti):
        r"""AddTMOPIntegrator(TMOPComboIntegrator self, TMOP_Integrator ti)"""
        return _tmop.TMOPComboIntegrator_AddTMOPIntegrator(self, ti)
    AddTMOPIntegrator = _swig_new_instance_method(_tmop.TMOPComboIntegrator_AddTMOPIntegrator)

    def GetTMOPIntegrators(self):
        r"""GetTMOPIntegrators(TMOPComboIntegrator self) -> TMOP_IntegratorArray"""
        return _tmop.TMOPComboIntegrator_GetTMOPIntegrators(self)
    GetTMOPIntegrators = _swig_new_instance_method(_tmop.TMOPComboIntegrator_GetTMOPIntegrators)

    def EnableLimiting(self, *args):
        r"""
        EnableLimiting(TMOPComboIntegrator self, GridFunction n0, GridFunction dist, Coefficient w0, TMOP_LimiterFunction lfunc=None)
        EnableLimiting(TMOPComboIntegrator self, GridFunction n0, Coefficient w0, TMOP_LimiterFunction lfunc=None)
        """
        return _tmop.TMOPComboIntegrator_EnableLimiting(self, *args)
    EnableLimiting = _swig_new_instance_method(_tmop.TMOPComboIntegrator_EnableLimiting)

    def SetLimitingNodes(self, n0):
        r"""SetLimitingNodes(TMOPComboIntegrator self, GridFunction n0)"""
        return _tmop.TMOPComboIntegrator_SetLimitingNodes(self, n0)
    SetLimitingNodes = _swig_new_instance_method(_tmop.TMOPComboIntegrator_SetLimitingNodes)

    def GetElementEnergy(self, el, T, elfun):
        r"""GetElementEnergy(TMOPComboIntegrator self, FiniteElement el, ElementTransformation T, Vector elfun) -> mfem::real_t"""
        return _tmop.TMOPComboIntegrator_GetElementEnergy(self, el, T, elfun)
    GetElementEnergy = _swig_new_instance_method(_tmop.TMOPComboIntegrator_GetElementEnergy)

    def AssembleElementVector(self, el, T, elfun, elvect):
        r"""AssembleElementVector(TMOPComboIntegrator self, FiniteElement el, ElementTransformation T, Vector elfun, Vector elvect)"""
        return _tmop.TMOPComboIntegrator_AssembleElementVector(self, el, T, elfun, elvect)
    AssembleElementVector = _swig_new_instance_method(_tmop.TMOPComboIntegrator_AssembleElementVector)

    def AssembleElementGrad(self, el, T, elfun, elmat):
        r"""AssembleElementGrad(TMOPComboIntegrator self, FiniteElement el, ElementTransformation T, Vector elfun, DenseMatrix elmat)"""
        return _tmop.TMOPComboIntegrator_AssembleElementGrad(self, el, T, elfun, elmat)
    AssembleElementGrad = _swig_new_instance_method(_tmop.TMOPComboIntegrator_AssembleElementGrad)

    def GetRefinementElementEnergy(self, el, T, elfun, irule):
        r"""GetRefinementElementEnergy(TMOPComboIntegrator self, FiniteElement el, ElementTransformation T, Vector elfun, IntegrationRule irule) -> mfem::real_t"""
        return _tmop.TMOPComboIntegrator_GetRefinementElementEnergy(self, el, T, elfun, irule)
    GetRefinementElementEnergy = _swig_new_instance_method(_tmop.TMOPComboIntegrator_GetRefinementElementEnergy)

    def GetDerefinementElementEnergy(self, el, T, elfun):
        r"""GetDerefinementElementEnergy(TMOPComboIntegrator self, FiniteElement el, ElementTransformation T, Vector elfun) -> mfem::real_t"""
        return _tmop.TMOPComboIntegrator_GetDerefinementElementEnergy(self, el, T, elfun)
    GetDerefinementElementEnergy = _swig_new_instance_method(_tmop.TMOPComboIntegrator_GetDerefinementElementEnergy)

    def EnableNormalization(self, x):
        r"""EnableNormalization(TMOPComboIntegrator self, GridFunction x)"""
        return _tmop.TMOPComboIntegrator_EnableNormalization(self, x)
    EnableNormalization = _swig_new_instance_method(_tmop.TMOPComboIntegrator_EnableNormalization)

    def AssemblePA(self, *args):
        r"""
        AssemblePA(TMOPComboIntegrator self, FiniteElementSpace trial_fes, FiniteElementSpace test_fes)
        AssemblePA(TMOPComboIntegrator self, FiniteElementSpace arg2)
        """
        return _tmop.TMOPComboIntegrator_AssemblePA(self, *args)
    AssemblePA = _swig_new_instance_method(_tmop.TMOPComboIntegrator_AssemblePA)

    def AssembleGradPA(self, arg2, arg3):
        r"""AssembleGradPA(TMOPComboIntegrator self, Vector arg2, FiniteElementSpace arg3)"""
        return _tmop.TMOPComboIntegrator_AssembleGradPA(self, arg2, arg3)
    AssembleGradPA = _swig_new_instance_method(_tmop.TMOPComboIntegrator_AssembleGradPA)

    def GetLocalStateEnergyPA(self, arg2):
        r"""GetLocalStateEnergyPA(TMOPComboIntegrator self, Vector arg2) -> mfem::real_t"""
        return _tmop.TMOPComboIntegrator_GetLocalStateEnergyPA(self, arg2)
    GetLocalStateEnergyPA = _swig_new_instance_method(_tmop.TMOPComboIntegrator_GetLocalStateEnergyPA)

    def AddMultPA(self, arg2, arg3):
        r"""AddMultPA(TMOPComboIntegrator self, Vector arg2, Vector arg3)"""
        return _tmop.TMOPComboIntegrator_AddMultPA(self, arg2, arg3)
    AddMultPA = _swig_new_instance_method(_tmop.TMOPComboIntegrator_AddMultPA)

    def AddMultGradPA(self, arg2, arg3):
        r"""AddMultGradPA(TMOPComboIntegrator self, Vector arg2, Vector arg3)"""
        return _tmop.TMOPComboIntegrator_AddMultGradPA(self, arg2, arg3)
    AddMultGradPA = _swig_new_instance_method(_tmop.TMOPComboIntegrator_AddMultGradPA)

    def AssembleGradDiagonalPA(self, arg2):
        r"""AssembleGradDiagonalPA(TMOPComboIntegrator self, Vector arg2)"""
        return _tmop.TMOPComboIntegrator_AssembleGradDiagonalPA(self, arg2)
    AssembleGradDiagonalPA = _swig_new_instance_method(_tmop.TMOPComboIntegrator_AssembleGradDiagonalPA)

# Register TMOPComboIntegrator in _tmop:
_tmop.TMOPComboIntegrator_swigregister(TMOPComboIntegrator)

def InterpolateTMOP_QualityMetric(metric, tc, mesh, metric_gf):
    r"""InterpolateTMOP_QualityMetric(TMOP_QualityMetric metric, TargetConstructor tc, Mesh mesh, GridFunction metric_gf)"""
    return _tmop.InterpolateTMOP_QualityMetric(metric, tc, mesh, metric_gf)
InterpolateTMOP_QualityMetric = _tmop.InterpolateTMOP_QualityMetric

