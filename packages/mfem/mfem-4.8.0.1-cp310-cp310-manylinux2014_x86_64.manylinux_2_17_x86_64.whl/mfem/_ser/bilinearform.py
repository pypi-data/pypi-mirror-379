# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _bilinearform
else:
    import _bilinearform

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _bilinearform.SWIG_PyInstanceMethod_New
_swig_new_static_method = _bilinearform.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._ser.globals
import mfem._ser.mem_manager
import mfem._ser.array
import mfem._ser.fespace
import mfem._ser.vector
import mfem._ser.coefficient
import mfem._ser.matrix
import mfem._ser.operators
import mfem._ser.symmat
import mfem._ser.intrules
import mfem._ser.sparsemat
import mfem._ser.densemat
import mfem._ser.eltrans
import mfem._ser.fe
import mfem._ser.geom
import mfem._ser.fe_base
import mfem._ser.doftrans
import mfem._ser.fe_fixed_order
import mfem._ser.element
import mfem._ser.table
import mfem._ser.hash
import mfem._ser.fe_h1
import mfem._ser.fe_nd
import mfem._ser.fe_rt
import mfem._ser.fe_l2
import mfem._ser.fe_nurbs
import mfem._ser.fe_pos
import mfem._ser.fe_ser
import mfem._ser.mesh
import mfem._ser.attribute_sets
import mfem._ser.arrays_by_name
import mfem._ser.sort_pairs
import mfem._ser.ncmesh
import mfem._ser.gridfunc
import mfem._ser.bilininteg
import mfem._ser.fe_coll
import mfem._ser.lininteg
import mfem._ser.linearform
import mfem._ser.nonlininteg
import mfem._ser.integrator
import mfem._ser.bounds
import mfem._ser.vertex
import mfem._ser.vtk
import mfem._ser.std_vectors
import mfem._ser.handle
import mfem._ser.restriction
import mfem._ser.hybridization
import mfem._ser.staticcond
class BilinearFormArray(object):
    r"""Proxy of C++ mfem::Array< mfem::BilinearForm * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _bilinearform.delete_BilinearFormArray

    def GetData(self, *args):
        r"""
        GetData(BilinearFormArray self) -> BilinearForm
        GetData(BilinearFormArray self) -> mfem::BilinearForm *const *
        """
        return _bilinearform.BilinearFormArray_GetData(self, *args)
    GetData = _swig_new_instance_method(_bilinearform.BilinearFormArray_GetData)

    def GetMemory(self, *args):
        r"""
        GetMemory(BilinearFormArray self) -> mfem::Memory< mfem::BilinearForm * >
        GetMemory(BilinearFormArray self) -> mfem::Memory< mfem::BilinearForm * > const &
        """
        return _bilinearform.BilinearFormArray_GetMemory(self, *args)
    GetMemory = _swig_new_instance_method(_bilinearform.BilinearFormArray_GetMemory)

    def UseDevice(self):
        r"""UseDevice(BilinearFormArray self) -> bool"""
        return _bilinearform.BilinearFormArray_UseDevice(self)
    UseDevice = _swig_new_instance_method(_bilinearform.BilinearFormArray_UseDevice)

    def OwnsData(self):
        r"""OwnsData(BilinearFormArray self) -> bool"""
        return _bilinearform.BilinearFormArray_OwnsData(self)
    OwnsData = _swig_new_instance_method(_bilinearform.BilinearFormArray_OwnsData)

    def StealData(self, p):
        r"""StealData(BilinearFormArray self, mfem::BilinearForm *** p)"""
        return _bilinearform.BilinearFormArray_StealData(self, p)
    StealData = _swig_new_instance_method(_bilinearform.BilinearFormArray_StealData)

    def LoseData(self):
        r"""LoseData(BilinearFormArray self)"""
        return _bilinearform.BilinearFormArray_LoseData(self)
    LoseData = _swig_new_instance_method(_bilinearform.BilinearFormArray_LoseData)

    def MakeDataOwner(self):
        r"""MakeDataOwner(BilinearFormArray self)"""
        return _bilinearform.BilinearFormArray_MakeDataOwner(self)
    MakeDataOwner = _swig_new_instance_method(_bilinearform.BilinearFormArray_MakeDataOwner)

    def Size(self):
        r"""Size(BilinearFormArray self) -> int"""
        return _bilinearform.BilinearFormArray_Size(self)
    Size = _swig_new_instance_method(_bilinearform.BilinearFormArray_Size)

    def SetSize(self, *args):
        r"""
        SetSize(BilinearFormArray self, int nsize)
        SetSize(BilinearFormArray self, int nsize, BilinearForm initval)
        SetSize(BilinearFormArray self, int nsize, mfem::MemoryType mt)
        """
        return _bilinearform.BilinearFormArray_SetSize(self, *args)
    SetSize = _swig_new_instance_method(_bilinearform.BilinearFormArray_SetSize)

    def Capacity(self):
        r"""Capacity(BilinearFormArray self) -> int"""
        return _bilinearform.BilinearFormArray_Capacity(self)
    Capacity = _swig_new_instance_method(_bilinearform.BilinearFormArray_Capacity)

    def Reserve(self, capacity):
        r"""Reserve(BilinearFormArray self, int capacity)"""
        return _bilinearform.BilinearFormArray_Reserve(self, capacity)
    Reserve = _swig_new_instance_method(_bilinearform.BilinearFormArray_Reserve)

    def Append(self, *args):
        r"""
        Append(BilinearFormArray self, BilinearForm el) -> int
        Append(BilinearFormArray self, mfem::BilinearForm *const * els, int nels) -> int
        Append(BilinearFormArray self, BilinearFormArray els) -> int
        """

        if isinstance(args[0], list):
           return self.Append(self.__class__(args[0]))
        if isinstance(args[0], tuple):
           return self.Append(self.__class__(args[0]))


        return _bilinearform.BilinearFormArray_Append(self, *args)


    def Prepend(self, el):
        r"""Prepend(BilinearFormArray self, BilinearForm el) -> int"""
        return _bilinearform.BilinearFormArray_Prepend(self, el)
    Prepend = _swig_new_instance_method(_bilinearform.BilinearFormArray_Prepend)

    def Last(self, *args):
        r"""
        Last(BilinearFormArray self) -> BilinearForm
        Last(BilinearFormArray self) -> BilinearForm
        """
        return _bilinearform.BilinearFormArray_Last(self, *args)
    Last = _swig_new_instance_method(_bilinearform.BilinearFormArray_Last)

    def DeleteLast(self):
        r"""DeleteLast(BilinearFormArray self)"""
        return _bilinearform.BilinearFormArray_DeleteLast(self)
    DeleteLast = _swig_new_instance_method(_bilinearform.BilinearFormArray_DeleteLast)

    def DeleteAll(self):
        r"""DeleteAll(BilinearFormArray self)"""
        return _bilinearform.BilinearFormArray_DeleteAll(self)
    DeleteAll = _swig_new_instance_method(_bilinearform.BilinearFormArray_DeleteAll)

    def ShrinkToFit(self):
        r"""ShrinkToFit(BilinearFormArray self)"""
        return _bilinearform.BilinearFormArray_ShrinkToFit(self)
    ShrinkToFit = _swig_new_instance_method(_bilinearform.BilinearFormArray_ShrinkToFit)

    def Copy(self, copy):
        r"""Copy(BilinearFormArray self, BilinearFormArray copy)"""
        return _bilinearform.BilinearFormArray_Copy(self, copy)
    Copy = _swig_new_instance_method(_bilinearform.BilinearFormArray_Copy)

    def MakeRef(self, *args):
        r"""
        MakeRef(BilinearFormArray self, mfem::BilinearForm ** data_, int size_, bool own_data=False)
        MakeRef(BilinearFormArray self, mfem::BilinearForm ** data_, int size, mfem::MemoryType mt, bool own_data)
        MakeRef(BilinearFormArray self, BilinearFormArray master)
        """
        return _bilinearform.BilinearFormArray_MakeRef(self, *args)
    MakeRef = _swig_new_instance_method(_bilinearform.BilinearFormArray_MakeRef)

    def GetSubArray(self, offset, sa_size, sa):
        r"""GetSubArray(BilinearFormArray self, int offset, int sa_size, BilinearFormArray sa)"""
        return _bilinearform.BilinearFormArray_GetSubArray(self, offset, sa_size, sa)
    GetSubArray = _swig_new_instance_method(_bilinearform.BilinearFormArray_GetSubArray)

    def IsEmpty(self):
        r"""IsEmpty(BilinearFormArray self) -> bool"""
        return _bilinearform.BilinearFormArray_IsEmpty(self)
    IsEmpty = _swig_new_instance_method(_bilinearform.BilinearFormArray_IsEmpty)

    def begin(self, *args):
        r"""
        begin(BilinearFormArray self) -> BilinearForm
        begin(BilinearFormArray self) -> mfem::BilinearForm *const *
        """
        return _bilinearform.BilinearFormArray_begin(self, *args)
    begin = _swig_new_instance_method(_bilinearform.BilinearFormArray_begin)

    def end(self, *args):
        r"""
        end(BilinearFormArray self) -> BilinearForm
        end(BilinearFormArray self) -> mfem::BilinearForm *const *
        """
        return _bilinearform.BilinearFormArray_end(self, *args)
    end = _swig_new_instance_method(_bilinearform.BilinearFormArray_end)

    def MemoryUsage(self):
        r"""MemoryUsage(BilinearFormArray self) -> std::size_t"""
        return _bilinearform.BilinearFormArray_MemoryUsage(self)
    MemoryUsage = _swig_new_instance_method(_bilinearform.BilinearFormArray_MemoryUsage)

    def Read(self, on_dev=True):
        r"""Read(BilinearFormArray self, bool on_dev=True) -> mfem::BilinearForm *const *"""
        return _bilinearform.BilinearFormArray_Read(self, on_dev)
    Read = _swig_new_instance_method(_bilinearform.BilinearFormArray_Read)

    def HostRead(self):
        r"""HostRead(BilinearFormArray self) -> mfem::BilinearForm *const *"""
        return _bilinearform.BilinearFormArray_HostRead(self)
    HostRead = _swig_new_instance_method(_bilinearform.BilinearFormArray_HostRead)

    def Write(self, on_dev=True):
        r"""Write(BilinearFormArray self, bool on_dev=True) -> mfem::BilinearForm **"""
        return _bilinearform.BilinearFormArray_Write(self, on_dev)
    Write = _swig_new_instance_method(_bilinearform.BilinearFormArray_Write)

    def HostWrite(self):
        r"""HostWrite(BilinearFormArray self) -> mfem::BilinearForm **"""
        return _bilinearform.BilinearFormArray_HostWrite(self)
    HostWrite = _swig_new_instance_method(_bilinearform.BilinearFormArray_HostWrite)

    def ReadWrite(self, on_dev=True):
        r"""ReadWrite(BilinearFormArray self, bool on_dev=True) -> mfem::BilinearForm **"""
        return _bilinearform.BilinearFormArray_ReadWrite(self, on_dev)
    ReadWrite = _swig_new_instance_method(_bilinearform.BilinearFormArray_ReadWrite)

    def HostReadWrite(self):
        r"""HostReadWrite(BilinearFormArray self) -> mfem::BilinearForm **"""
        return _bilinearform.BilinearFormArray_HostReadWrite(self)
    HostReadWrite = _swig_new_instance_method(_bilinearform.BilinearFormArray_HostReadWrite)

    def __init__(self, *args):
        r"""
        __init__(BilinearFormArray self) -> BilinearFormArray
        __init__(BilinearFormArray self, mfem::MemoryType mt) -> BilinearFormArray
        __init__(BilinearFormArray self, int asize) -> BilinearFormArray
        __init__(BilinearFormArray self, int asize, mfem::MemoryType mt) -> BilinearFormArray
        __init__(BilinearFormArray self, mfem::BilinearForm ** data_, bool own_data=False) -> BilinearFormArray
        __init__(BilinearFormArray self, BilinearFormArray src) -> BilinearFormArray
        __init__(BilinearFormArray self, BilinearFormArray src) -> BilinearFormArray
        __init__(BilinearFormArray self, void * List_or_Tuple) -> BilinearFormArray
        """
        _bilinearform.BilinearFormArray_swiginit(self, _bilinearform.new_BilinearFormArray(*args))

    def __setitem__(self, i, v):
        r"""__setitem__(BilinearFormArray self, int i, BilinearForm v)"""

        i = int(i)
        if hasattr(v, "thisown"):
            v.thisown = False


        return _bilinearform.BilinearFormArray___setitem__(self, i, v)


    def Assign(self, *args):
        r"""
        Assign(BilinearFormArray self, mfem::BilinearForm *const * arg2)
        Assign(BilinearFormArray self, BilinearForm a)
        """
        return _bilinearform.BilinearFormArray_Assign(self, *args)
    Assign = _swig_new_instance_method(_bilinearform.BilinearFormArray_Assign)

    def ToList(self):
        return [self[i] for i in range(self.Size())]



    def __iter__(self):
        class iter_array:
            def __init__(self, obj):
                self.obj = obj
                self.idx = 0
                self.size = obj.Size()
            def __iter__(self):
                self.idx = 0
            def __next__(self):
                if self.idx < self.size:
                    res = self.obj[self.idx]
                    self.idx += 1
                    return res
                else:
                    raise StopIteration
        return iter_array(self)



    def __getitem__(self, param):
        r"""__getitem__(BilinearFormArray self, PyObject * param) -> PyObject *"""
        return _bilinearform.BilinearFormArray___getitem__(self, param)
    __getitem__ = _swig_new_instance_method(_bilinearform.BilinearFormArray___getitem__)

# Register BilinearFormArray in _bilinearform:
_bilinearform.BilinearFormArray_swigregister(BilinearFormArray)

def Swap(*args):
    r"""
    Swap(intArray arg1, intArray arg2)
    Swap(doubleArray arg1, doubleArray arg2)
    Swap(int8Array arg1, int8Array arg2)
    Swap(int64Array arg1, int64Array arg2)
    Swap(boolArray arg1, boolArray arg2)
    Swap(uintArray arg1, uintArray arg2)
    Swap(intArrayArray arg1, intArrayArray arg2)
    Swap(intArray2D arg1, intArray2D arg2)
    Swap(doubleArray2D arg1, doubleArray2D arg2)
    Swap(DenseMatrixArray2D arg1, DenseMatrixArray2D arg2)
    Swap(SparseMatrixArray2D arg1, SparseMatrixArray2D arg2)
    Swap(VectorArray arg1, VectorArray arg2)
    Swap(OperatorArray arg1, OperatorArray arg2)
    Swap(SolverArray arg1, SolverArray arg2)
    Swap(IntegrationPointArray arg1, IntegrationPointArray arg2)
    Swap(IntegrationRuleArray arg1, IntegrationRuleArray arg2)
    Swap(GeometryTypeArray arg1, GeometryTypeArray arg2)
    Swap(CoefficientArray arg1, CoefficientArray arg2)
    Swap(VectorCoefficientArray arg1, VectorCoefficientArray arg2)
    Swap(MatrixCoefficientArray arg1, MatrixCoefficientArray arg2)
    Swap(CoarseFineTransformations a, CoarseFineTransformations b)
    Swap(RefinementArray arg1, RefinementArray arg2)
    Swap(FiniteElementSpaceArray arg1, FiniteElementSpaceArray arg2)
    Swap(BilinearFormArray arg1, BilinearFormArray arg2)
    """
    return _bilinearform.Swap(*args)
Swap = _bilinearform.Swap

AssemblyLevel_LEGACY = _bilinearform.AssemblyLevel_LEGACY

AssemblyLevel_LEGACYFULL = _bilinearform.AssemblyLevel_LEGACYFULL

AssemblyLevel_FULL = _bilinearform.AssemblyLevel_FULL

AssemblyLevel_ELEMENT = _bilinearform.AssemblyLevel_ELEMENT

AssemblyLevel_PARTIAL = _bilinearform.AssemblyLevel_PARTIAL

AssemblyLevel_NONE = _bilinearform.AssemblyLevel_NONE

class BilinearForm(mfem._ser.matrix.Matrix):
    r"""Proxy of C++ mfem::BilinearForm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BilinearForm self, FiniteElementSpace f) -> BilinearForm
        __init__(BilinearForm self, FiniteElementSpace f, BilinearForm bf, int ps=0) -> BilinearForm
        """
        _bilinearform.BilinearForm_swiginit(self, _bilinearform.new_BilinearForm(*args))

    def Size(self):
        r"""Size(BilinearForm self) -> int"""
        return _bilinearform.BilinearForm_Size(self)
    Size = _swig_new_instance_method(_bilinearform.BilinearForm_Size)

    def SetAssemblyLevel(self, assembly_level):
        r"""SetAssemblyLevel(BilinearForm self, mfem::AssemblyLevel assembly_level)"""
        return _bilinearform.BilinearForm_SetAssemblyLevel(self, assembly_level)
    SetAssemblyLevel = _swig_new_instance_method(_bilinearform.BilinearForm_SetAssemblyLevel)

    def EnableSparseMatrixSorting(self, enable_it):
        r"""EnableSparseMatrixSorting(BilinearForm self, bool enable_it)"""
        return _bilinearform.BilinearForm_EnableSparseMatrixSorting(self, enable_it)
    EnableSparseMatrixSorting = _swig_new_instance_method(_bilinearform.BilinearForm_EnableSparseMatrixSorting)

    def GetAssemblyLevel(self):
        r"""GetAssemblyLevel(BilinearForm self) -> mfem::AssemblyLevel"""
        return _bilinearform.BilinearForm_GetAssemblyLevel(self)
    GetAssemblyLevel = _swig_new_instance_method(_bilinearform.BilinearForm_GetAssemblyLevel)

    def GetHybridization(self):
        r"""GetHybridization(BilinearForm self) -> Hybridization"""
        return _bilinearform.BilinearForm_GetHybridization(self)
    GetHybridization = _swig_new_instance_method(_bilinearform.BilinearForm_GetHybridization)

    def EnableStaticCondensation(self):
        r"""EnableStaticCondensation(BilinearForm self)"""
        return _bilinearform.BilinearForm_EnableStaticCondensation(self)
    EnableStaticCondensation = _swig_new_instance_method(_bilinearform.BilinearForm_EnableStaticCondensation)

    def StaticCondensationIsEnabled(self):
        r"""StaticCondensationIsEnabled(BilinearForm self) -> bool"""
        return _bilinearform.BilinearForm_StaticCondensationIsEnabled(self)
    StaticCondensationIsEnabled = _swig_new_instance_method(_bilinearform.BilinearForm_StaticCondensationIsEnabled)

    def SCFESpace(self):
        r"""SCFESpace(BilinearForm self) -> FiniteElementSpace"""
        return _bilinearform.BilinearForm_SCFESpace(self)
    SCFESpace = _swig_new_instance_method(_bilinearform.BilinearForm_SCFESpace)

    def EnableHybridization(self, constr_space, constr_integ, ess_tdof_list):
        r"""EnableHybridization(BilinearForm self, FiniteElementSpace constr_space, BilinearFormIntegrator constr_integ, intArray ess_tdof_list)"""
        val = _bilinearform.BilinearForm_EnableHybridization(self, constr_space, constr_integ, ess_tdof_list)

        if not hasattr(self, "_integrators"): self._integrators = []
        self._integrators.append(constr_integ)
        # constr_integ is deleted by Hybridization destructor
        constr_integ.thisown = 0


        return val


    def UsePrecomputedSparsity(self, ps=1):
        r"""UsePrecomputedSparsity(BilinearForm self, int ps=1)"""
        return _bilinearform.BilinearForm_UsePrecomputedSparsity(self, ps)
    UsePrecomputedSparsity = _swig_new_instance_method(_bilinearform.BilinearForm_UsePrecomputedSparsity)

    def UseSparsity(self, *args):
        r"""
        UseSparsity(BilinearForm self, int * I, int * J, bool isSorted)
        UseSparsity(BilinearForm self, SparseMatrix A)
        """
        return _bilinearform.BilinearForm_UseSparsity(self, *args)
    UseSparsity = _swig_new_instance_method(_bilinearform.BilinearForm_UseSparsity)

    def AllocateMatrix(self):
        r"""AllocateMatrix(BilinearForm self)"""
        return _bilinearform.BilinearForm_AllocateMatrix(self)
    AllocateMatrix = _swig_new_instance_method(_bilinearform.BilinearForm_AllocateMatrix)

    def GetDBFI(self):
        r"""GetDBFI(BilinearForm self) -> mfem::Array< mfem::BilinearFormIntegrator * > *"""
        return _bilinearform.BilinearForm_GetDBFI(self)
    GetDBFI = _swig_new_instance_method(_bilinearform.BilinearForm_GetDBFI)

    def GetDBFI_Marker(self):
        r"""GetDBFI_Marker(BilinearForm self) -> intArrayArray"""
        return _bilinearform.BilinearForm_GetDBFI_Marker(self)
    GetDBFI_Marker = _swig_new_instance_method(_bilinearform.BilinearForm_GetDBFI_Marker)

    def GetBBFI(self):
        r"""GetBBFI(BilinearForm self) -> mfem::Array< mfem::BilinearFormIntegrator * > *"""
        return _bilinearform.BilinearForm_GetBBFI(self)
    GetBBFI = _swig_new_instance_method(_bilinearform.BilinearForm_GetBBFI)

    def GetBBFI_Marker(self):
        r"""GetBBFI_Marker(BilinearForm self) -> intArrayArray"""
        return _bilinearform.BilinearForm_GetBBFI_Marker(self)
    GetBBFI_Marker = _swig_new_instance_method(_bilinearform.BilinearForm_GetBBFI_Marker)

    def GetFBFI(self):
        r"""GetFBFI(BilinearForm self) -> mfem::Array< mfem::BilinearFormIntegrator * > *"""
        return _bilinearform.BilinearForm_GetFBFI(self)
    GetFBFI = _swig_new_instance_method(_bilinearform.BilinearForm_GetFBFI)

    def GetBFBFI(self):
        r"""GetBFBFI(BilinearForm self) -> mfem::Array< mfem::BilinearFormIntegrator * > *"""
        return _bilinearform.BilinearForm_GetBFBFI(self)
    GetBFBFI = _swig_new_instance_method(_bilinearform.BilinearForm_GetBFBFI)

    def GetBFBFI_Marker(self):
        r"""GetBFBFI_Marker(BilinearForm self) -> intArrayArray"""
        return _bilinearform.BilinearForm_GetBFBFI_Marker(self)
    GetBFBFI_Marker = _swig_new_instance_method(_bilinearform.BilinearForm_GetBFBFI_Marker)

    def __call__(self, i, j):
        r"""__call__(BilinearForm self, int i, int j) -> mfem::real_t const &"""
        return _bilinearform.BilinearForm___call__(self, i, j)
    __call__ = _swig_new_instance_method(_bilinearform.BilinearForm___call__)

    def Elem(self, *args):
        r"""
        Elem(BilinearForm self, int i, int j) -> mfem::real_t
        Elem(BilinearForm self, int i, int j) -> mfem::real_t const &
        """
        return _bilinearform.BilinearForm_Elem(self, *args)
    Elem = _swig_new_instance_method(_bilinearform.BilinearForm_Elem)

    def Mult(self, x, y):
        r"""Mult(BilinearForm self, Vector x, Vector y)"""
        return _bilinearform.BilinearForm_Mult(self, x, y)
    Mult = _swig_new_instance_method(_bilinearform.BilinearForm_Mult)

    def FullMult(self, x, y):
        r"""FullMult(BilinearForm self, Vector x, Vector y)"""
        return _bilinearform.BilinearForm_FullMult(self, x, y)
    FullMult = _swig_new_instance_method(_bilinearform.BilinearForm_FullMult)

    def AddMult(self, x, y, a=1.0):
        r"""AddMult(BilinearForm self, Vector x, Vector y, mfem::real_t const a=1.0)"""
        return _bilinearform.BilinearForm_AddMult(self, x, y, a)
    AddMult = _swig_new_instance_method(_bilinearform.BilinearForm_AddMult)

    def FullAddMult(self, x, y):
        r"""FullAddMult(BilinearForm self, Vector x, Vector y)"""
        return _bilinearform.BilinearForm_FullAddMult(self, x, y)
    FullAddMult = _swig_new_instance_method(_bilinearform.BilinearForm_FullAddMult)

    def AddMultTranspose(self, x, y, a=1.0):
        r"""AddMultTranspose(BilinearForm self, Vector x, Vector y, mfem::real_t const a=1.0)"""
        return _bilinearform.BilinearForm_AddMultTranspose(self, x, y, a)
    AddMultTranspose = _swig_new_instance_method(_bilinearform.BilinearForm_AddMultTranspose)

    def FullAddMultTranspose(self, x, y):
        r"""FullAddMultTranspose(BilinearForm self, Vector x, Vector y)"""
        return _bilinearform.BilinearForm_FullAddMultTranspose(self, x, y)
    FullAddMultTranspose = _swig_new_instance_method(_bilinearform.BilinearForm_FullAddMultTranspose)

    def MultTranspose(self, x, y):
        r"""MultTranspose(BilinearForm self, Vector x, Vector y)"""
        return _bilinearform.BilinearForm_MultTranspose(self, x, y)
    MultTranspose = _swig_new_instance_method(_bilinearform.BilinearForm_MultTranspose)

    def InnerProduct(self, x, y):
        r"""InnerProduct(BilinearForm self, Vector x, Vector y) -> mfem::real_t"""
        return _bilinearform.BilinearForm_InnerProduct(self, x, y)
    InnerProduct = _swig_new_instance_method(_bilinearform.BilinearForm_InnerProduct)

    def Inverse(self):
        r"""Inverse(BilinearForm self) -> MatrixInverse"""
        return _bilinearform.BilinearForm_Inverse(self)
    Inverse = _swig_new_instance_method(_bilinearform.BilinearForm_Inverse)

    def Finalize(self, skip_zeros=1):
        r"""Finalize(BilinearForm self, int skip_zeros=1)"""
        return _bilinearform.BilinearForm_Finalize(self, skip_zeros)
    Finalize = _swig_new_instance_method(_bilinearform.BilinearForm_Finalize)

    def SpMat(self, *args):
        r"""
        SpMat(BilinearForm self) -> SparseMatrix
        SpMat(BilinearForm self) -> SparseMatrix
        """
        val = _bilinearform.BilinearForm_SpMat(self, *args)

        if not hasattr(self, "_spmat"): self._spmat = []
        self._spmat.append(val)
        val.thisown=0


        return val


    def HasSpMat(self):
        r"""HasSpMat(BilinearForm self) -> bool"""
        return _bilinearform.BilinearForm_HasSpMat(self)
    HasSpMat = _swig_new_instance_method(_bilinearform.BilinearForm_HasSpMat)

    def LoseMat(self):
        r"""LoseMat(BilinearForm self) -> SparseMatrix"""
        return _bilinearform.BilinearForm_LoseMat(self)
    LoseMat = _swig_new_instance_method(_bilinearform.BilinearForm_LoseMat)

    def SpMatElim(self, *args):
        r"""
        SpMatElim(BilinearForm self) -> SparseMatrix
        SpMatElim(BilinearForm self) -> SparseMatrix
        """
        return _bilinearform.BilinearForm_SpMatElim(self, *args)
    SpMatElim = _swig_new_instance_method(_bilinearform.BilinearForm_SpMatElim)

    def HasSpMatElim(self):
        r"""HasSpMatElim(BilinearForm self) -> bool"""
        return _bilinearform.BilinearForm_HasSpMatElim(self)
    HasSpMatElim = _swig_new_instance_method(_bilinearform.BilinearForm_HasSpMatElim)

    def AddDomainIntegrator(self, *args):
        r"""
        AddDomainIntegrator(BilinearForm self, BilinearFormIntegrator bfi)
        AddDomainIntegrator(BilinearForm self, BilinearFormIntegrator bfi, intArray elem_marker)
        """

        if not hasattr(self, "_integrators"): self._integrators = []
        bfi = args[0]
        self._integrators.append(bfi)
        self.UseExternalIntegrators()
        #bfi.thisown=0


        return _bilinearform.BilinearForm_AddDomainIntegrator(self, *args)


    def AddBoundaryIntegrator(self, *args):
        r"""
        AddBoundaryIntegrator(BilinearForm self, BilinearFormIntegrator bfi)
        AddBoundaryIntegrator(BilinearForm self, BilinearFormIntegrator bfi, intArray bdr_marker)
        """

        if not hasattr(self, "_integrators"): self._integrators = []
        bfi = args[0]
        self._integrators.append(bfi)
        self.UseExternalIntegrators()
        #bfi.thisown=0


        return _bilinearform.BilinearForm_AddBoundaryIntegrator(self, *args)


    def AddInteriorFaceIntegrator(self, bfi):
        r"""AddInteriorFaceIntegrator(BilinearForm self, BilinearFormIntegrator bfi)"""

        if not hasattr(self, "_integrators"): self._integrators = []
        self._integrators.append(bfi)
        self.UseExternalIntegrators()
        #bfi.thisown=0


        return _bilinearform.BilinearForm_AddInteriorFaceIntegrator(self, bfi)


    def AddBdrFaceIntegrator(self, *args):
        r"""
        AddBdrFaceIntegrator(BilinearForm self, BilinearFormIntegrator bfi)
        AddBdrFaceIntegrator(BilinearForm self, BilinearFormIntegrator bfi, intArray bdr_marker)
        """

        if not hasattr(self, "_integrators"): self._integrators = []
        bfi = args[0]
        self._integrators.append(bfi)
        self.UseExternalIntegrators()
        #bfi.thisown=0


        return _bilinearform.BilinearForm_AddBdrFaceIntegrator(self, *args)


    def Assemble(self, skip_zeros=1):
        r"""Assemble(BilinearForm self, int skip_zeros=1)"""
        return _bilinearform.BilinearForm_Assemble(self, skip_zeros)
    Assemble = _swig_new_instance_method(_bilinearform.BilinearForm_Assemble)

    def AssembleDiagonal(self, diag):
        r"""AssembleDiagonal(BilinearForm self, Vector diag)"""
        return _bilinearform.BilinearForm_AssembleDiagonal(self, diag)
    AssembleDiagonal = _swig_new_instance_method(_bilinearform.BilinearForm_AssembleDiagonal)

    def GetProlongation(self):
        r"""GetProlongation(BilinearForm self) -> Operator"""
        return _bilinearform.BilinearForm_GetProlongation(self)
    GetProlongation = _swig_new_instance_method(_bilinearform.BilinearForm_GetProlongation)

    def GetRestriction(self):
        r"""GetRestriction(BilinearForm self) -> Operator"""
        return _bilinearform.BilinearForm_GetRestriction(self)
    GetRestriction = _swig_new_instance_method(_bilinearform.BilinearForm_GetRestriction)

    def GetOutputProlongation(self):
        r"""GetOutputProlongation(BilinearForm self) -> Operator"""
        return _bilinearform.BilinearForm_GetOutputProlongation(self)
    GetOutputProlongation = _swig_new_instance_method(_bilinearform.BilinearForm_GetOutputProlongation)

    def GetOutputRestrictionTranspose(self):
        r"""GetOutputRestrictionTranspose(BilinearForm self) -> Operator"""
        return _bilinearform.BilinearForm_GetOutputRestrictionTranspose(self)
    GetOutputRestrictionTranspose = _swig_new_instance_method(_bilinearform.BilinearForm_GetOutputRestrictionTranspose)

    def GetOutputRestriction(self):
        r"""GetOutputRestriction(BilinearForm self) -> Operator"""
        return _bilinearform.BilinearForm_GetOutputRestriction(self)
    GetOutputRestriction = _swig_new_instance_method(_bilinearform.BilinearForm_GetOutputRestriction)

    def SerialRAP(self, A):
        r"""SerialRAP(BilinearForm self, OperatorHandle A)"""
        return _bilinearform.BilinearForm_SerialRAP(self, A)
    SerialRAP = _swig_new_instance_method(_bilinearform.BilinearForm_SerialRAP)

    def RecoverFEMSolution(self, X, b, x):
        r"""RecoverFEMSolution(BilinearForm self, Vector X, Vector b, Vector x)"""
        return _bilinearform.BilinearForm_RecoverFEMSolution(self, X, b, x)
    RecoverFEMSolution = _swig_new_instance_method(_bilinearform.BilinearForm_RecoverFEMSolution)

    def ComputeElementMatrices(self):
        r"""ComputeElementMatrices(BilinearForm self)"""
        return _bilinearform.BilinearForm_ComputeElementMatrices(self)
    ComputeElementMatrices = _swig_new_instance_method(_bilinearform.BilinearForm_ComputeElementMatrices)

    def FreeElementMatrices(self):
        r"""FreeElementMatrices(BilinearForm self)"""
        return _bilinearform.BilinearForm_FreeElementMatrices(self)
    FreeElementMatrices = _swig_new_instance_method(_bilinearform.BilinearForm_FreeElementMatrices)

    def GetElementMatrices(self):
        r"""GetElementMatrices(BilinearForm self) -> DenseTensor"""
        return _bilinearform.BilinearForm_GetElementMatrices(self)
    GetElementMatrices = _swig_new_instance_method(_bilinearform.BilinearForm_GetElementMatrices)

    def ComputeElementMatrix(self, i, elmat):
        r"""ComputeElementMatrix(BilinearForm self, int i, DenseMatrix elmat)"""
        return _bilinearform.BilinearForm_ComputeElementMatrix(self, i, elmat)
    ComputeElementMatrix = _swig_new_instance_method(_bilinearform.BilinearForm_ComputeElementMatrix)

    def ComputeBdrElementMatrix(self, i, elmat):
        r"""ComputeBdrElementMatrix(BilinearForm self, int i, DenseMatrix elmat)"""
        return _bilinearform.BilinearForm_ComputeBdrElementMatrix(self, i, elmat)
    ComputeBdrElementMatrix = _swig_new_instance_method(_bilinearform.BilinearForm_ComputeBdrElementMatrix)

    def ComputeFaceMatrix(self, i, elmat):
        r"""ComputeFaceMatrix(BilinearForm self, int i, DenseMatrix elmat)"""
        return _bilinearform.BilinearForm_ComputeFaceMatrix(self, i, elmat)
    ComputeFaceMatrix = _swig_new_instance_method(_bilinearform.BilinearForm_ComputeFaceMatrix)

    def ComputeBdrFaceMatrix(self, i, elmat):
        r"""ComputeBdrFaceMatrix(BilinearForm self, int i, DenseMatrix elmat)"""
        return _bilinearform.BilinearForm_ComputeBdrFaceMatrix(self, i, elmat)
    ComputeBdrFaceMatrix = _swig_new_instance_method(_bilinearform.BilinearForm_ComputeBdrFaceMatrix)

    def AssembleElementMatrix(self, *args):
        r"""
        AssembleElementMatrix(BilinearForm self, int i, DenseMatrix elmat, int skip_zeros=1)
        AssembleElementMatrix(BilinearForm self, int i, DenseMatrix elmat, intArray vdofs, int skip_zeros=1)
        """
        return _bilinearform.BilinearForm_AssembleElementMatrix(self, *args)
    AssembleElementMatrix = _swig_new_instance_method(_bilinearform.BilinearForm_AssembleElementMatrix)

    def AssembleBdrElementMatrix(self, *args):
        r"""
        AssembleBdrElementMatrix(BilinearForm self, int i, DenseMatrix elmat, int skip_zeros=1)
        AssembleBdrElementMatrix(BilinearForm self, int i, DenseMatrix elmat, intArray vdofs, int skip_zeros=1)
        """
        return _bilinearform.BilinearForm_AssembleBdrElementMatrix(self, *args)
    AssembleBdrElementMatrix = _swig_new_instance_method(_bilinearform.BilinearForm_AssembleBdrElementMatrix)

    def EliminateEssentialBC(self, *args):
        r"""
        EliminateEssentialBC(BilinearForm self, intArray bdr_attr_is_ess, Vector sol, Vector rhs, mfem::Operator::DiagonalPolicy dpolicy=DIAG_ONE)
        EliminateEssentialBC(BilinearForm self, intArray bdr_attr_is_ess, mfem::Operator::DiagonalPolicy dpolicy=DIAG_ONE)
        """
        return _bilinearform.BilinearForm_EliminateEssentialBC(self, *args)
    EliminateEssentialBC = _swig_new_instance_method(_bilinearform.BilinearForm_EliminateEssentialBC)

    def EliminateEssentialBCDiag(self, bdr_attr_is_ess, value):
        r"""EliminateEssentialBCDiag(BilinearForm self, intArray bdr_attr_is_ess, mfem::real_t value)"""
        return _bilinearform.BilinearForm_EliminateEssentialBCDiag(self, bdr_attr_is_ess, value)
    EliminateEssentialBCDiag = _swig_new_instance_method(_bilinearform.BilinearForm_EliminateEssentialBCDiag)

    def EliminateVDofs(self, *args):
        r"""
        EliminateVDofs(BilinearForm self, intArray vdofs, Vector sol, Vector rhs, mfem::Operator::DiagonalPolicy dpolicy=DIAG_ONE)
        EliminateVDofs(BilinearForm self, intArray vdofs, mfem::Operator::DiagonalPolicy dpolicy=DIAG_ONE)
        """
        return _bilinearform.BilinearForm_EliminateVDofs(self, *args)
    EliminateVDofs = _swig_new_instance_method(_bilinearform.BilinearForm_EliminateVDofs)

    def EliminateEssentialBCFromDofs(self, *args):
        r"""
        EliminateEssentialBCFromDofs(BilinearForm self, intArray ess_dofs, Vector sol, Vector rhs, mfem::Operator::DiagonalPolicy dpolicy=DIAG_ONE)
        EliminateEssentialBCFromDofs(BilinearForm self, intArray ess_dofs, mfem::Operator::DiagonalPolicy dpolicy=DIAG_ONE)
        """
        return _bilinearform.BilinearForm_EliminateEssentialBCFromDofs(self, *args)
    EliminateEssentialBCFromDofs = _swig_new_instance_method(_bilinearform.BilinearForm_EliminateEssentialBCFromDofs)

    def EliminateEssentialBCFromDofsDiag(self, ess_dofs, value):
        r"""EliminateEssentialBCFromDofsDiag(BilinearForm self, intArray ess_dofs, mfem::real_t value)"""
        return _bilinearform.BilinearForm_EliminateEssentialBCFromDofsDiag(self, ess_dofs, value)
    EliminateEssentialBCFromDofsDiag = _swig_new_instance_method(_bilinearform.BilinearForm_EliminateEssentialBCFromDofsDiag)

    def EliminateVDofsInRHS(self, vdofs, x, b):
        r"""EliminateVDofsInRHS(BilinearForm self, intArray vdofs, Vector x, Vector b)"""
        return _bilinearform.BilinearForm_EliminateVDofsInRHS(self, vdofs, x, b)
    EliminateVDofsInRHS = _swig_new_instance_method(_bilinearform.BilinearForm_EliminateVDofsInRHS)

    def FullInnerProduct(self, x, y):
        r"""FullInnerProduct(BilinearForm self, Vector x, Vector y) -> mfem::real_t"""
        return _bilinearform.BilinearForm_FullInnerProduct(self, x, y)
    FullInnerProduct = _swig_new_instance_method(_bilinearform.BilinearForm_FullInnerProduct)

    def Update(self, nfes=None):
        r"""Update(BilinearForm self, FiniteElementSpace nfes=None)"""
        return _bilinearform.BilinearForm_Update(self, nfes)
    Update = _swig_new_instance_method(_bilinearform.BilinearForm_Update)

    def GetFES(self):
        r"""GetFES(BilinearForm self) -> FiniteElementSpace"""

        import warnings
        warnings.warn("mfem::BilinearForm::GetFES() is deprecated",
                      DeprecationWarning,)


        return _bilinearform.BilinearForm_GetFES(self)


    def FESpace(self, *args):
        r"""
        FESpace(BilinearForm self) -> FiniteElementSpace
        FESpace(BilinearForm self) -> FiniteElementSpace
        """
        return _bilinearform.BilinearForm_FESpace(self, *args)
    FESpace = _swig_new_instance_method(_bilinearform.BilinearForm_FESpace)

    def Print(self, *args, **kwargs):
        r"""Print(BilinearForm self, std::ostream & os=out, int width_=4)"""
        return _bilinearform.BilinearForm_Print(self, *args, **kwargs)
    Print = _swig_new_instance_method(_bilinearform.BilinearForm_Print)

    def SetDiagonalPolicy(self, policy):
        r"""SetDiagonalPolicy(BilinearForm self, mfem::Operator::DiagonalPolicy policy)"""
        return _bilinearform.BilinearForm_SetDiagonalPolicy(self, policy)
    SetDiagonalPolicy = _swig_new_instance_method(_bilinearform.BilinearForm_SetDiagonalPolicy)

    def UseExternalIntegrators(self):
        r"""UseExternalIntegrators(BilinearForm self)"""
        return _bilinearform.BilinearForm_UseExternalIntegrators(self)
    UseExternalIntegrators = _swig_new_instance_method(_bilinearform.BilinearForm_UseExternalIntegrators)
    __swig_destroy__ = _bilinearform.delete_BilinearForm

    def FormLinearSystem(self, *args):
        r"""
        FormLinearSystem(BilinearForm self, intArray ess_tdof_list, Vector x, Vector b, OperatorHandle A, Vector X, Vector B, int copy_interior=0)
        FormLinearSystem(BilinearForm self, intArray ess_tdof_list, Vector x, Vector b, SparseMatrix A, Vector X, Vector B, int copy_interior=0)
        """
        return _bilinearform.BilinearForm_FormLinearSystem(self, *args)
    FormLinearSystem = _swig_new_instance_method(_bilinearform.BilinearForm_FormLinearSystem)

    def FormSystemMatrix(self, *args):
        r"""
        FormSystemMatrix(BilinearForm self, intArray ess_tdof_list, OperatorHandle A)
        FormSystemMatrix(BilinearForm self, intArray ess_tdof_list, SparseMatrix A)
        """
        return _bilinearform.BilinearForm_FormSystemMatrix(self, *args)
    FormSystemMatrix = _swig_new_instance_method(_bilinearform.BilinearForm_FormSystemMatrix)

# Register BilinearForm in _bilinearform:
_bilinearform.BilinearForm_swigregister(BilinearForm)
class MixedBilinearForm(mfem._ser.matrix.Matrix):
    r"""Proxy of C++ mfem::MixedBilinearForm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MixedBilinearForm self, FiniteElementSpace tr_fes, FiniteElementSpace te_fes) -> MixedBilinearForm
        __init__(MixedBilinearForm self, FiniteElementSpace tr_fes, FiniteElementSpace te_fes, MixedBilinearForm mbf) -> MixedBilinearForm
        """
        _bilinearform.MixedBilinearForm_swiginit(self, _bilinearform.new_MixedBilinearForm(*args))

    def Elem(self, *args):
        r"""
        Elem(MixedBilinearForm self, int i, int j) -> mfem::real_t
        Elem(MixedBilinearForm self, int i, int j) -> mfem::real_t const &
        """
        return _bilinearform.MixedBilinearForm_Elem(self, *args)
    Elem = _swig_new_instance_method(_bilinearform.MixedBilinearForm_Elem)

    def Mult(self, x, y):
        r"""Mult(MixedBilinearForm self, Vector x, Vector y)"""
        return _bilinearform.MixedBilinearForm_Mult(self, x, y)
    Mult = _swig_new_instance_method(_bilinearform.MixedBilinearForm_Mult)

    def AddMult(self, x, y, a=1.0):
        r"""AddMult(MixedBilinearForm self, Vector x, Vector y, mfem::real_t const a=1.0)"""
        return _bilinearform.MixedBilinearForm_AddMult(self, x, y, a)
    AddMult = _swig_new_instance_method(_bilinearform.MixedBilinearForm_AddMult)

    def MultTranspose(self, x, y):
        r"""MultTranspose(MixedBilinearForm self, Vector x, Vector y)"""
        return _bilinearform.MixedBilinearForm_MultTranspose(self, x, y)
    MultTranspose = _swig_new_instance_method(_bilinearform.MixedBilinearForm_MultTranspose)

    def AddMultTranspose(self, x, y, a=1.0):
        r"""AddMultTranspose(MixedBilinearForm self, Vector x, Vector y, mfem::real_t const a=1.0)"""
        return _bilinearform.MixedBilinearForm_AddMultTranspose(self, x, y, a)
    AddMultTranspose = _swig_new_instance_method(_bilinearform.MixedBilinearForm_AddMultTranspose)

    def Inverse(self):
        r"""Inverse(MixedBilinearForm self) -> MatrixInverse"""
        return _bilinearform.MixedBilinearForm_Inverse(self)
    Inverse = _swig_new_instance_method(_bilinearform.MixedBilinearForm_Inverse)

    def Finalize(self, skip_zeros=1):
        r"""Finalize(MixedBilinearForm self, int skip_zeros=1)"""
        return _bilinearform.MixedBilinearForm_Finalize(self, skip_zeros)
    Finalize = _swig_new_instance_method(_bilinearform.MixedBilinearForm_Finalize)

    def GetBlocks(self, blocks):
        r"""GetBlocks(MixedBilinearForm self, SparseMatrixArray2D blocks)"""
        return _bilinearform.MixedBilinearForm_GetBlocks(self, blocks)
    GetBlocks = _swig_new_instance_method(_bilinearform.MixedBilinearForm_GetBlocks)

    def SpMat(self, *args):
        r"""
        SpMat(MixedBilinearForm self) -> SparseMatrix
        SpMat(MixedBilinearForm self) -> SparseMatrix
        """
        val = _bilinearform.MixedBilinearForm_SpMat(self, *args)

        if not hasattr(self, "_spmat"): self._spmat = []
        self._spmat.append(val)
        val.thisown=0


        return val


    def LoseMat(self):
        r"""LoseMat(MixedBilinearForm self) -> SparseMatrix"""
        return _bilinearform.MixedBilinearForm_LoseMat(self)
    LoseMat = _swig_new_instance_method(_bilinearform.MixedBilinearForm_LoseMat)

    def SpMatElim(self, *args):
        r"""
        SpMatElim(MixedBilinearForm self) -> SparseMatrix
        SpMatElim(MixedBilinearForm self) -> SparseMatrix
        """
        return _bilinearform.MixedBilinearForm_SpMatElim(self, *args)
    SpMatElim = _swig_new_instance_method(_bilinearform.MixedBilinearForm_SpMatElim)

    def AddDomainIntegrator(self, *args):
        r"""
        AddDomainIntegrator(MixedBilinearForm self, BilinearFormIntegrator bfi)
        AddDomainIntegrator(MixedBilinearForm self, BilinearFormIntegrator bfi, intArray elem_marker)
        """

        if not hasattr(self, "_integrators"): self._integrators = []
        bfi = args[0]
        self._integrators.append(bfi)
        bfi.thisown=0


        return _bilinearform.MixedBilinearForm_AddDomainIntegrator(self, *args)


    def AddBoundaryIntegrator(self, *args):
        r"""
        AddBoundaryIntegrator(MixedBilinearForm self, BilinearFormIntegrator bfi)
        AddBoundaryIntegrator(MixedBilinearForm self, BilinearFormIntegrator bfi, intArray bdr_marker)
        """

        if not hasattr(self, "_integrators"): self._integrators = []
        bfi = args[0]
        self._integrators.append(bfi)
        bfi.thisown=0


        return _bilinearform.MixedBilinearForm_AddBoundaryIntegrator(self, *args)


    def AddInteriorFaceIntegrator(self, bfi):
        r"""AddInteriorFaceIntegrator(MixedBilinearForm self, BilinearFormIntegrator bfi)"""
        return _bilinearform.MixedBilinearForm_AddInteriorFaceIntegrator(self, bfi)
    AddInteriorFaceIntegrator = _swig_new_instance_method(_bilinearform.MixedBilinearForm_AddInteriorFaceIntegrator)

    def AddBdrFaceIntegrator(self, *args):
        r"""
        AddBdrFaceIntegrator(MixedBilinearForm self, BilinearFormIntegrator bfi)
        AddBdrFaceIntegrator(MixedBilinearForm self, BilinearFormIntegrator bfi, intArray bdr_marker)
        """
        return _bilinearform.MixedBilinearForm_AddBdrFaceIntegrator(self, *args)
    AddBdrFaceIntegrator = _swig_new_instance_method(_bilinearform.MixedBilinearForm_AddBdrFaceIntegrator)

    def AddTraceFaceIntegrator(self, bfi):
        r"""AddTraceFaceIntegrator(MixedBilinearForm self, BilinearFormIntegrator bfi)"""

        if not hasattr(self, "_integrators"): self._integrators = []
        self._integrators.append(bfi)
        bfi.thisown=0


        return _bilinearform.MixedBilinearForm_AddTraceFaceIntegrator(self, bfi)


    def AddBdrTraceFaceIntegrator(self, *args):
        r"""
        AddBdrTraceFaceIntegrator(MixedBilinearForm self, BilinearFormIntegrator bfi)
        AddBdrTraceFaceIntegrator(MixedBilinearForm self, BilinearFormIntegrator bfi, intArray bdr_marker)
        """

        if not hasattr(self, "_integrators"): self._integrators = []
        bfi = args[0]
        self._integrators.append(bfi)
        self.UseExternalIntegrators()
        #bfi.thisown=0


        return _bilinearform.MixedBilinearForm_AddBdrTraceFaceIntegrator(self, *args)


    def GetDBFI(self):
        r"""GetDBFI(MixedBilinearForm self) -> mfem::Array< mfem::BilinearFormIntegrator * > *"""
        return _bilinearform.MixedBilinearForm_GetDBFI(self)
    GetDBFI = _swig_new_instance_method(_bilinearform.MixedBilinearForm_GetDBFI)

    def GetDBFI_Marker(self):
        r"""GetDBFI_Marker(MixedBilinearForm self) -> intArrayArray"""
        return _bilinearform.MixedBilinearForm_GetDBFI_Marker(self)
    GetDBFI_Marker = _swig_new_instance_method(_bilinearform.MixedBilinearForm_GetDBFI_Marker)

    def GetBBFI(self):
        r"""GetBBFI(MixedBilinearForm self) -> mfem::Array< mfem::BilinearFormIntegrator * > *"""
        return _bilinearform.MixedBilinearForm_GetBBFI(self)
    GetBBFI = _swig_new_instance_method(_bilinearform.MixedBilinearForm_GetBBFI)

    def GetBBFI_Marker(self):
        r"""GetBBFI_Marker(MixedBilinearForm self) -> intArrayArray"""
        return _bilinearform.MixedBilinearForm_GetBBFI_Marker(self)
    GetBBFI_Marker = _swig_new_instance_method(_bilinearform.MixedBilinearForm_GetBBFI_Marker)

    def GetFBFI(self):
        r"""GetFBFI(MixedBilinearForm self) -> mfem::Array< mfem::BilinearFormIntegrator * > *"""
        return _bilinearform.MixedBilinearForm_GetFBFI(self)
    GetFBFI = _swig_new_instance_method(_bilinearform.MixedBilinearForm_GetFBFI)

    def GetBFBFI(self):
        r"""GetBFBFI(MixedBilinearForm self) -> mfem::Array< mfem::BilinearFormIntegrator * > *"""
        return _bilinearform.MixedBilinearForm_GetBFBFI(self)
    GetBFBFI = _swig_new_instance_method(_bilinearform.MixedBilinearForm_GetBFBFI)

    def GetBFBFI_Marker(self):
        r"""GetBFBFI_Marker(MixedBilinearForm self) -> intArrayArray"""
        return _bilinearform.MixedBilinearForm_GetBFBFI_Marker(self)
    GetBFBFI_Marker = _swig_new_instance_method(_bilinearform.MixedBilinearForm_GetBFBFI_Marker)

    def GetTFBFI(self):
        r"""GetTFBFI(MixedBilinearForm self) -> mfem::Array< mfem::BilinearFormIntegrator * > *"""
        return _bilinearform.MixedBilinearForm_GetTFBFI(self)
    GetTFBFI = _swig_new_instance_method(_bilinearform.MixedBilinearForm_GetTFBFI)

    def GetBTFBFI(self):
        r"""GetBTFBFI(MixedBilinearForm self) -> mfem::Array< mfem::BilinearFormIntegrator * > *"""
        return _bilinearform.MixedBilinearForm_GetBTFBFI(self)
    GetBTFBFI = _swig_new_instance_method(_bilinearform.MixedBilinearForm_GetBTFBFI)

    def GetBTFBFI_Marker(self):
        r"""GetBTFBFI_Marker(MixedBilinearForm self) -> intArrayArray"""
        return _bilinearform.MixedBilinearForm_GetBTFBFI_Marker(self)
    GetBTFBFI_Marker = _swig_new_instance_method(_bilinearform.MixedBilinearForm_GetBTFBFI_Marker)

    def SetAssemblyLevel(self, assembly_level):
        r"""SetAssemblyLevel(MixedBilinearForm self, mfem::AssemblyLevel assembly_level)"""
        return _bilinearform.MixedBilinearForm_SetAssemblyLevel(self, assembly_level)
    SetAssemblyLevel = _swig_new_instance_method(_bilinearform.MixedBilinearForm_SetAssemblyLevel)

    def Assemble(self, skip_zeros=1):
        r"""Assemble(MixedBilinearForm self, int skip_zeros=1)"""
        return _bilinearform.MixedBilinearForm_Assemble(self, skip_zeros)
    Assemble = _swig_new_instance_method(_bilinearform.MixedBilinearForm_Assemble)

    def AssembleDiagonal_ADAt(self, D, diag):
        r"""AssembleDiagonal_ADAt(MixedBilinearForm self, Vector D, Vector diag)"""
        return _bilinearform.MixedBilinearForm_AssembleDiagonal_ADAt(self, D, diag)
    AssembleDiagonal_ADAt = _swig_new_instance_method(_bilinearform.MixedBilinearForm_AssembleDiagonal_ADAt)

    def GetProlongation(self):
        r"""GetProlongation(MixedBilinearForm self) -> Operator"""
        return _bilinearform.MixedBilinearForm_GetProlongation(self)
    GetProlongation = _swig_new_instance_method(_bilinearform.MixedBilinearForm_GetProlongation)

    def GetRestriction(self):
        r"""GetRestriction(MixedBilinearForm self) -> Operator"""
        return _bilinearform.MixedBilinearForm_GetRestriction(self)
    GetRestriction = _swig_new_instance_method(_bilinearform.MixedBilinearForm_GetRestriction)

    def GetOutputProlongation(self):
        r"""GetOutputProlongation(MixedBilinearForm self) -> Operator"""
        return _bilinearform.MixedBilinearForm_GetOutputProlongation(self)
    GetOutputProlongation = _swig_new_instance_method(_bilinearform.MixedBilinearForm_GetOutputProlongation)

    def GetOutputRestriction(self):
        r"""GetOutputRestriction(MixedBilinearForm self) -> Operator"""
        return _bilinearform.MixedBilinearForm_GetOutputRestriction(self)
    GetOutputRestriction = _swig_new_instance_method(_bilinearform.MixedBilinearForm_GetOutputRestriction)

    def ConformingAssemble(self):
        r"""ConformingAssemble(MixedBilinearForm self)"""
        return _bilinearform.MixedBilinearForm_ConformingAssemble(self)
    ConformingAssemble = _swig_new_instance_method(_bilinearform.MixedBilinearForm_ConformingAssemble)

    def ComputeElementMatrix(self, i, elmat):
        r"""ComputeElementMatrix(MixedBilinearForm self, int i, DenseMatrix elmat)"""
        return _bilinearform.MixedBilinearForm_ComputeElementMatrix(self, i, elmat)
    ComputeElementMatrix = _swig_new_instance_method(_bilinearform.MixedBilinearForm_ComputeElementMatrix)

    def ComputeBdrElementMatrix(self, i, elmat):
        r"""ComputeBdrElementMatrix(MixedBilinearForm self, int i, DenseMatrix elmat)"""
        return _bilinearform.MixedBilinearForm_ComputeBdrElementMatrix(self, i, elmat)
    ComputeBdrElementMatrix = _swig_new_instance_method(_bilinearform.MixedBilinearForm_ComputeBdrElementMatrix)

    def ComputeTraceFaceMatrix(self, i, elmat):
        r"""ComputeTraceFaceMatrix(MixedBilinearForm self, int i, DenseMatrix elmat)"""
        return _bilinearform.MixedBilinearForm_ComputeTraceFaceMatrix(self, i, elmat)
    ComputeTraceFaceMatrix = _swig_new_instance_method(_bilinearform.MixedBilinearForm_ComputeTraceFaceMatrix)

    def ComputeBdrTraceFaceMatrix(self, i, elmat):
        r"""ComputeBdrTraceFaceMatrix(MixedBilinearForm self, int i, DenseMatrix elmat)"""
        return _bilinearform.MixedBilinearForm_ComputeBdrTraceFaceMatrix(self, i, elmat)
    ComputeBdrTraceFaceMatrix = _swig_new_instance_method(_bilinearform.MixedBilinearForm_ComputeBdrTraceFaceMatrix)

    def ComputeFaceMatrix(self, i, elmat):
        r"""ComputeFaceMatrix(MixedBilinearForm self, int i, DenseMatrix elmat)"""
        return _bilinearform.MixedBilinearForm_ComputeFaceMatrix(self, i, elmat)
    ComputeFaceMatrix = _swig_new_instance_method(_bilinearform.MixedBilinearForm_ComputeFaceMatrix)

    def ComputeBdrFaceMatrix(self, i, elmat):
        r"""ComputeBdrFaceMatrix(MixedBilinearForm self, int i, DenseMatrix elmat)"""
        return _bilinearform.MixedBilinearForm_ComputeBdrFaceMatrix(self, i, elmat)
    ComputeBdrFaceMatrix = _swig_new_instance_method(_bilinearform.MixedBilinearForm_ComputeBdrFaceMatrix)

    def AssembleElementMatrix(self, *args):
        r"""
        AssembleElementMatrix(MixedBilinearForm self, int i, DenseMatrix elmat, int skip_zeros=1)
        AssembleElementMatrix(MixedBilinearForm self, int i, DenseMatrix elmat, intArray trial_vdofs, intArray test_vdofs, int skip_zeros=1)
        """
        return _bilinearform.MixedBilinearForm_AssembleElementMatrix(self, *args)
    AssembleElementMatrix = _swig_new_instance_method(_bilinearform.MixedBilinearForm_AssembleElementMatrix)

    def AssembleBdrElementMatrix(self, *args):
        r"""
        AssembleBdrElementMatrix(MixedBilinearForm self, int i, DenseMatrix elmat, int skip_zeros=1)
        AssembleBdrElementMatrix(MixedBilinearForm self, int i, DenseMatrix elmat, intArray trial_vdofs, intArray test_vdofs, int skip_zeros=1)
        """
        return _bilinearform.MixedBilinearForm_AssembleBdrElementMatrix(self, *args)
    AssembleBdrElementMatrix = _swig_new_instance_method(_bilinearform.MixedBilinearForm_AssembleBdrElementMatrix)

    def EliminateTrialEssentialBC(self, *args):
        r"""
        EliminateTrialEssentialBC(MixedBilinearForm self, intArray bdr_attr_is_ess, Vector sol, Vector rhs)
        EliminateTrialEssentialBC(MixedBilinearForm self, intArray bdr_attr_is_ess)
        """
        return _bilinearform.MixedBilinearForm_EliminateTrialEssentialBC(self, *args)
    EliminateTrialEssentialBC = _swig_new_instance_method(_bilinearform.MixedBilinearForm_EliminateTrialEssentialBC)

    def EliminateTrialDofs(self, bdr_attr_is_ess, sol, rhs):
        r"""EliminateTrialDofs(MixedBilinearForm self, intArray bdr_attr_is_ess, Vector sol, Vector rhs)"""
        return _bilinearform.MixedBilinearForm_EliminateTrialDofs(self, bdr_attr_is_ess, sol, rhs)
    EliminateTrialDofs = _swig_new_instance_method(_bilinearform.MixedBilinearForm_EliminateTrialDofs)

    def EliminateTrialVDofs(self, *args):
        r"""
        EliminateTrialVDofs(MixedBilinearForm self, intArray vdofs, Vector sol, Vector rhs)
        EliminateTrialVDofs(MixedBilinearForm self, intArray vdofs)
        """
        return _bilinearform.MixedBilinearForm_EliminateTrialVDofs(self, *args)
    EliminateTrialVDofs = _swig_new_instance_method(_bilinearform.MixedBilinearForm_EliminateTrialVDofs)

    def EliminateTrialVDofsInRHS(self, vdofs, x, b):
        r"""EliminateTrialVDofsInRHS(MixedBilinearForm self, intArray vdofs, Vector x, Vector b)"""
        return _bilinearform.MixedBilinearForm_EliminateTrialVDofsInRHS(self, vdofs, x, b)
    EliminateTrialVDofsInRHS = _swig_new_instance_method(_bilinearform.MixedBilinearForm_EliminateTrialVDofsInRHS)

    def EliminateEssentialBCFromTrialDofs(self, marked_vdofs, sol, rhs):
        r"""EliminateEssentialBCFromTrialDofs(MixedBilinearForm self, intArray marked_vdofs, Vector sol, Vector rhs)"""
        return _bilinearform.MixedBilinearForm_EliminateEssentialBCFromTrialDofs(self, marked_vdofs, sol, rhs)
    EliminateEssentialBCFromTrialDofs = _swig_new_instance_method(_bilinearform.MixedBilinearForm_EliminateEssentialBCFromTrialDofs)

    def EliminateTestEssentialBC(self, bdr_attr_is_ess):
        r"""EliminateTestEssentialBC(MixedBilinearForm self, intArray bdr_attr_is_ess)"""
        return _bilinearform.MixedBilinearForm_EliminateTestEssentialBC(self, bdr_attr_is_ess)
    EliminateTestEssentialBC = _swig_new_instance_method(_bilinearform.MixedBilinearForm_EliminateTestEssentialBC)

    def EliminateTestDofs(self, bdr_attr_is_ess):
        r"""EliminateTestDofs(MixedBilinearForm self, intArray bdr_attr_is_ess)"""
        return _bilinearform.MixedBilinearForm_EliminateTestDofs(self, bdr_attr_is_ess)
    EliminateTestDofs = _swig_new_instance_method(_bilinearform.MixedBilinearForm_EliminateTestDofs)

    def EliminateTestVDofs(self, vdofs):
        r"""EliminateTestVDofs(MixedBilinearForm self, intArray vdofs)"""
        return _bilinearform.MixedBilinearForm_EliminateTestVDofs(self, vdofs)
    EliminateTestVDofs = _swig_new_instance_method(_bilinearform.MixedBilinearForm_EliminateTestVDofs)

    def Update(self):
        r"""Update(MixedBilinearForm self)"""
        return _bilinearform.MixedBilinearForm_Update(self)
    Update = _swig_new_instance_method(_bilinearform.MixedBilinearForm_Update)

    def TrialFESpace(self, *args):
        r"""
        TrialFESpace(MixedBilinearForm self) -> FiniteElementSpace
        TrialFESpace(MixedBilinearForm self) -> FiniteElementSpace
        """
        return _bilinearform.MixedBilinearForm_TrialFESpace(self, *args)
    TrialFESpace = _swig_new_instance_method(_bilinearform.MixedBilinearForm_TrialFESpace)

    def TestFESpace(self, *args):
        r"""
        TestFESpace(MixedBilinearForm self) -> FiniteElementSpace
        TestFESpace(MixedBilinearForm self) -> FiniteElementSpace
        """
        return _bilinearform.MixedBilinearForm_TestFESpace(self, *args)
    TestFESpace = _swig_new_instance_method(_bilinearform.MixedBilinearForm_TestFESpace)

    def Print(self, *args, **kwargs):
        r"""Print(MixedBilinearForm self, std::ostream & os=out, int width_=4)"""
        return _bilinearform.MixedBilinearForm_Print(self, *args, **kwargs)
    Print = _swig_new_instance_method(_bilinearform.MixedBilinearForm_Print)
    __swig_destroy__ = _bilinearform.delete_MixedBilinearForm

    def FormRectangularLinearSystem(self, *args):
        r"""
        FormRectangularLinearSystem(MixedBilinearForm self, intArray trial_tdof_list, intArray test_tdof_list, Vector x, Vector b, OperatorHandle A, Vector X, Vector B)
        FormRectangularLinearSystem(MixedBilinearForm self, intArray trial_tdof_list, intArray test_tdof_list, Vector x, Vector b, SparseMatrix A, Vector X, Vector B)
        """
        return _bilinearform.MixedBilinearForm_FormRectangularLinearSystem(self, *args)
    FormRectangularLinearSystem = _swig_new_instance_method(_bilinearform.MixedBilinearForm_FormRectangularLinearSystem)

    def FormRectangularSystemMatrix(self, *args):
        r"""
        FormRectangularSystemMatrix(MixedBilinearForm self, intArray trial_tdof_list, intArray test_tdof_list, OperatorHandle A)
        FormRectangularSystemMatrix(MixedBilinearForm self, intArray trial_tdof_list, intArray test_tdof_list, SparseMatrix A)
        """
        return _bilinearform.MixedBilinearForm_FormRectangularSystemMatrix(self, *args)
    FormRectangularSystemMatrix = _swig_new_instance_method(_bilinearform.MixedBilinearForm_FormRectangularSystemMatrix)

# Register MixedBilinearForm in _bilinearform:
_bilinearform.MixedBilinearForm_swigregister(MixedBilinearForm)
class DiscreteLinearOperator(MixedBilinearForm):
    r"""Proxy of C++ mfem::DiscreteLinearOperator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, domain_fes, range_fes):
        r"""__init__(DiscreteLinearOperator self, FiniteElementSpace domain_fes, FiniteElementSpace range_fes) -> DiscreteLinearOperator"""
        _bilinearform.DiscreteLinearOperator_swiginit(self, _bilinearform.new_DiscreteLinearOperator(domain_fes, range_fes))

    def AddDomainInterpolator(self, *args):
        r"""
        AddDomainInterpolator(DiscreteLinearOperator self, DiscreteInterpolator di)
        AddDomainInterpolator(DiscreteLinearOperator self, DiscreteInterpolator di, intArray elem_marker)
        """

        if not hasattr(self, "_integrators"): self._integrators = []
        di = args[0]
        self._integrators.append(di)
        di.thisown=0


        return _bilinearform.DiscreteLinearOperator_AddDomainInterpolator(self, *args)


    def AddTraceFaceInterpolator(self, di):
        r"""AddTraceFaceInterpolator(DiscreteLinearOperator self, DiscreteInterpolator di)"""

        if not hasattr(self, "_integrators"): self._integrators = []
        di = args[0]
        self._integrators.append(di)
        di.thisown=0


        return _bilinearform.DiscreteLinearOperator_AddTraceFaceInterpolator(self, di)


    def GetDI(self):
        r"""GetDI(DiscreteLinearOperator self) -> mfem::Array< mfem::BilinearFormIntegrator * > *"""
        return _bilinearform.DiscreteLinearOperator_GetDI(self)
    GetDI = _swig_new_instance_method(_bilinearform.DiscreteLinearOperator_GetDI)

    def GetDI_Marker(self):
        r"""GetDI_Marker(DiscreteLinearOperator self) -> intArrayArray"""
        return _bilinearform.DiscreteLinearOperator_GetDI_Marker(self)
    GetDI_Marker = _swig_new_instance_method(_bilinearform.DiscreteLinearOperator_GetDI_Marker)

    def SetAssemblyLevel(self, assembly_level):
        r"""SetAssemblyLevel(DiscreteLinearOperator self, mfem::AssemblyLevel assembly_level)"""
        return _bilinearform.DiscreteLinearOperator_SetAssemblyLevel(self, assembly_level)
    SetAssemblyLevel = _swig_new_instance_method(_bilinearform.DiscreteLinearOperator_SetAssemblyLevel)

    def Assemble(self, skip_zeros=1):
        r"""Assemble(DiscreteLinearOperator self, int skip_zeros=1)"""
        return _bilinearform.DiscreteLinearOperator_Assemble(self, skip_zeros)
    Assemble = _swig_new_instance_method(_bilinearform.DiscreteLinearOperator_Assemble)

    def GetOutputRestrictionTranspose(self):
        r"""GetOutputRestrictionTranspose(DiscreteLinearOperator self) -> Operator"""
        return _bilinearform.DiscreteLinearOperator_GetOutputRestrictionTranspose(self)
    GetOutputRestrictionTranspose = _swig_new_instance_method(_bilinearform.DiscreteLinearOperator_GetOutputRestrictionTranspose)
    __swig_destroy__ = _bilinearform.delete_DiscreteLinearOperator

# Register DiscreteLinearOperator in _bilinearform:
_bilinearform.DiscreteLinearOperator_swigregister(DiscreteLinearOperator)

