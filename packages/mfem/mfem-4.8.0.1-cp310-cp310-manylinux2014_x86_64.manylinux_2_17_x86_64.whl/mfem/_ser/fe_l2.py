# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _fe_l2
else:
    import _fe_l2

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _fe_l2.SWIG_PyInstanceMethod_New
_swig_new_static_method = _fe_l2.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._ser.fe_h1
import mfem._ser.fe_base
import mfem._ser.intrules
import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.globals
import mfem._ser.geom
import mfem._ser.densemat
import mfem._ser.vector
import mfem._ser.operators
import mfem._ser.matrix
import mfem._ser.doftrans
import mfem._ser.element
import mfem._ser.table
import mfem._ser.hash
class L2_SegmentElement(mfem._ser.fe_base.NodalTensorFiniteElement):
    r"""Proxy of C++ mfem::L2_SegmentElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(L2_SegmentElement self, int const p, int const btype=GaussLegendre) -> L2_SegmentElement"""
        _fe_l2.L2_SegmentElement_swiginit(self, _fe_l2.new_L2_SegmentElement(*args, **kwargs))

    def CalcShape(self, ip, shape):
        r"""CalcShape(L2_SegmentElement self, IntegrationPoint ip, Vector shape)"""
        return _fe_l2.L2_SegmentElement_CalcShape(self, ip, shape)
    CalcShape = _swig_new_instance_method(_fe_l2.L2_SegmentElement_CalcShape)

    def CalcDShape(self, ip, dshape):
        r"""CalcDShape(L2_SegmentElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe_l2.L2_SegmentElement_CalcDShape(self, ip, dshape)
    CalcDShape = _swig_new_instance_method(_fe_l2.L2_SegmentElement_CalcDShape)

    def ProjectDelta(self, vertex, dofs):
        r"""ProjectDelta(L2_SegmentElement self, int vertex, Vector dofs)"""
        return _fe_l2.L2_SegmentElement_ProjectDelta(self, vertex, dofs)
    ProjectDelta = _swig_new_instance_method(_fe_l2.L2_SegmentElement_ProjectDelta)

    def GetLocalRestriction(self, Trans, R):
        r"""GetLocalRestriction(L2_SegmentElement self, mfem::ElementTransformation & Trans, DenseMatrix R)"""
        return _fe_l2.L2_SegmentElement_GetLocalRestriction(self, Trans, R)
    GetLocalRestriction = _swig_new_instance_method(_fe_l2.L2_SegmentElement_GetLocalRestriction)
    __swig_destroy__ = _fe_l2.delete_L2_SegmentElement

# Register L2_SegmentElement in _fe_l2:
_fe_l2.L2_SegmentElement_swigregister(L2_SegmentElement)
class L2_QuadrilateralElement(mfem._ser.fe_base.NodalTensorFiniteElement):
    r"""Proxy of C++ mfem::L2_QuadrilateralElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(L2_QuadrilateralElement self, int const p, int const btype=GaussLegendre) -> L2_QuadrilateralElement"""
        _fe_l2.L2_QuadrilateralElement_swiginit(self, _fe_l2.new_L2_QuadrilateralElement(*args, **kwargs))

    def CalcShape(self, ip, shape):
        r"""CalcShape(L2_QuadrilateralElement self, IntegrationPoint ip, Vector shape)"""
        return _fe_l2.L2_QuadrilateralElement_CalcShape(self, ip, shape)
    CalcShape = _swig_new_instance_method(_fe_l2.L2_QuadrilateralElement_CalcShape)

    def CalcDShape(self, ip, dshape):
        r"""CalcDShape(L2_QuadrilateralElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe_l2.L2_QuadrilateralElement_CalcDShape(self, ip, dshape)
    CalcDShape = _swig_new_instance_method(_fe_l2.L2_QuadrilateralElement_CalcDShape)

    def ProjectDelta(self, vertex, dofs):
        r"""ProjectDelta(L2_QuadrilateralElement self, int vertex, Vector dofs)"""
        return _fe_l2.L2_QuadrilateralElement_ProjectDelta(self, vertex, dofs)
    ProjectDelta = _swig_new_instance_method(_fe_l2.L2_QuadrilateralElement_ProjectDelta)

    def ProjectCurl(self, fe, Trans, curl):
        r"""ProjectCurl(L2_QuadrilateralElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix curl)"""
        return _fe_l2.L2_QuadrilateralElement_ProjectCurl(self, fe, Trans, curl)
    ProjectCurl = _swig_new_instance_method(_fe_l2.L2_QuadrilateralElement_ProjectCurl)

    def GetLocalRestriction(self, Trans, R):
        r"""GetLocalRestriction(L2_QuadrilateralElement self, mfem::ElementTransformation & Trans, DenseMatrix R)"""
        return _fe_l2.L2_QuadrilateralElement_GetLocalRestriction(self, Trans, R)
    GetLocalRestriction = _swig_new_instance_method(_fe_l2.L2_QuadrilateralElement_GetLocalRestriction)

    def ProjectDiv(self, fe, Trans, div):
        r"""ProjectDiv(L2_QuadrilateralElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix div)"""
        return _fe_l2.L2_QuadrilateralElement_ProjectDiv(self, fe, Trans, div)
    ProjectDiv = _swig_new_instance_method(_fe_l2.L2_QuadrilateralElement_ProjectDiv)

    def Project(self, *args):
        r"""
        Project(L2_QuadrilateralElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(L2_QuadrilateralElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(L2_QuadrilateralElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        """
        return _fe_l2.L2_QuadrilateralElement_Project(self, *args)
    Project = _swig_new_instance_method(_fe_l2.L2_QuadrilateralElement_Project)
    __swig_destroy__ = _fe_l2.delete_L2_QuadrilateralElement

# Register L2_QuadrilateralElement in _fe_l2:
_fe_l2.L2_QuadrilateralElement_swigregister(L2_QuadrilateralElement)
class L2_HexahedronElement(mfem._ser.fe_base.NodalTensorFiniteElement):
    r"""Proxy of C++ mfem::L2_HexahedronElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(L2_HexahedronElement self, int const p, int const btype=GaussLegendre) -> L2_HexahedronElement"""
        _fe_l2.L2_HexahedronElement_swiginit(self, _fe_l2.new_L2_HexahedronElement(*args, **kwargs))

    def CalcShape(self, ip, shape):
        r"""CalcShape(L2_HexahedronElement self, IntegrationPoint ip, Vector shape)"""
        return _fe_l2.L2_HexahedronElement_CalcShape(self, ip, shape)
    CalcShape = _swig_new_instance_method(_fe_l2.L2_HexahedronElement_CalcShape)

    def CalcDShape(self, ip, dshape):
        r"""CalcDShape(L2_HexahedronElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe_l2.L2_HexahedronElement_CalcDShape(self, ip, dshape)
    CalcDShape = _swig_new_instance_method(_fe_l2.L2_HexahedronElement_CalcDShape)

    def ProjectDelta(self, vertex, dofs):
        r"""ProjectDelta(L2_HexahedronElement self, int vertex, Vector dofs)"""
        return _fe_l2.L2_HexahedronElement_ProjectDelta(self, vertex, dofs)
    ProjectDelta = _swig_new_instance_method(_fe_l2.L2_HexahedronElement_ProjectDelta)

    def GetLocalRestriction(self, Trans, R):
        r"""GetLocalRestriction(L2_HexahedronElement self, mfem::ElementTransformation & Trans, DenseMatrix R)"""
        return _fe_l2.L2_HexahedronElement_GetLocalRestriction(self, Trans, R)
    GetLocalRestriction = _swig_new_instance_method(_fe_l2.L2_HexahedronElement_GetLocalRestriction)

    def ProjectDiv(self, fe, Trans, div):
        r"""ProjectDiv(L2_HexahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix div)"""
        return _fe_l2.L2_HexahedronElement_ProjectDiv(self, fe, Trans, div)
    ProjectDiv = _swig_new_instance_method(_fe_l2.L2_HexahedronElement_ProjectDiv)

    def Project(self, *args):
        r"""
        Project(L2_HexahedronElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(L2_HexahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(L2_HexahedronElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        """
        return _fe_l2.L2_HexahedronElement_Project(self, *args)
    Project = _swig_new_instance_method(_fe_l2.L2_HexahedronElement_Project)
    __swig_destroy__ = _fe_l2.delete_L2_HexahedronElement

# Register L2_HexahedronElement in _fe_l2:
_fe_l2.L2_HexahedronElement_swigregister(L2_HexahedronElement)
class L2_TriangleElement(mfem._ser.fe_base.NodalFiniteElement):
    r"""Proxy of C++ mfem::L2_TriangleElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(L2_TriangleElement self, int const p, int const btype=GaussLegendre) -> L2_TriangleElement"""
        _fe_l2.L2_TriangleElement_swiginit(self, _fe_l2.new_L2_TriangleElement(*args, **kwargs))

    def CalcShape(self, ip, shape):
        r"""CalcShape(L2_TriangleElement self, IntegrationPoint ip, Vector shape)"""
        return _fe_l2.L2_TriangleElement_CalcShape(self, ip, shape)
    CalcShape = _swig_new_instance_method(_fe_l2.L2_TriangleElement_CalcShape)

    def CalcDShape(self, ip, dshape):
        r"""CalcDShape(L2_TriangleElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe_l2.L2_TriangleElement_CalcDShape(self, ip, dshape)
    CalcDShape = _swig_new_instance_method(_fe_l2.L2_TriangleElement_CalcDShape)

    def ProjectDelta(self, vertex, dofs):
        r"""ProjectDelta(L2_TriangleElement self, int vertex, Vector dofs)"""
        return _fe_l2.L2_TriangleElement_ProjectDelta(self, vertex, dofs)
    ProjectDelta = _swig_new_instance_method(_fe_l2.L2_TriangleElement_ProjectDelta)

    def ProjectCurl(self, fe, Trans, curl):
        r"""ProjectCurl(L2_TriangleElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix curl)"""
        return _fe_l2.L2_TriangleElement_ProjectCurl(self, fe, Trans, curl)
    ProjectCurl = _swig_new_instance_method(_fe_l2.L2_TriangleElement_ProjectCurl)

    def GetLocalRestriction(self, Trans, R):
        r"""GetLocalRestriction(L2_TriangleElement self, mfem::ElementTransformation & Trans, DenseMatrix R)"""
        return _fe_l2.L2_TriangleElement_GetLocalRestriction(self, Trans, R)
    GetLocalRestriction = _swig_new_instance_method(_fe_l2.L2_TriangleElement_GetLocalRestriction)
    __swig_destroy__ = _fe_l2.delete_L2_TriangleElement

# Register L2_TriangleElement in _fe_l2:
_fe_l2.L2_TriangleElement_swigregister(L2_TriangleElement)
class L2_TetrahedronElement(mfem._ser.fe_base.NodalFiniteElement):
    r"""Proxy of C++ mfem::L2_TetrahedronElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(L2_TetrahedronElement self, int const p, int const btype=GaussLegendre) -> L2_TetrahedronElement"""
        _fe_l2.L2_TetrahedronElement_swiginit(self, _fe_l2.new_L2_TetrahedronElement(*args, **kwargs))

    def CalcShape(self, ip, shape):
        r"""CalcShape(L2_TetrahedronElement self, IntegrationPoint ip, Vector shape)"""
        return _fe_l2.L2_TetrahedronElement_CalcShape(self, ip, shape)
    CalcShape = _swig_new_instance_method(_fe_l2.L2_TetrahedronElement_CalcShape)

    def CalcDShape(self, ip, dshape):
        r"""CalcDShape(L2_TetrahedronElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe_l2.L2_TetrahedronElement_CalcDShape(self, ip, dshape)
    CalcDShape = _swig_new_instance_method(_fe_l2.L2_TetrahedronElement_CalcDShape)

    def ProjectDelta(self, vertex, dofs):
        r"""ProjectDelta(L2_TetrahedronElement self, int vertex, Vector dofs)"""
        return _fe_l2.L2_TetrahedronElement_ProjectDelta(self, vertex, dofs)
    ProjectDelta = _swig_new_instance_method(_fe_l2.L2_TetrahedronElement_ProjectDelta)

    def GetLocalRestriction(self, Trans, R):
        r"""GetLocalRestriction(L2_TetrahedronElement self, mfem::ElementTransformation & Trans, DenseMatrix R)"""
        return _fe_l2.L2_TetrahedronElement_GetLocalRestriction(self, Trans, R)
    GetLocalRestriction = _swig_new_instance_method(_fe_l2.L2_TetrahedronElement_GetLocalRestriction)
    __swig_destroy__ = _fe_l2.delete_L2_TetrahedronElement

# Register L2_TetrahedronElement in _fe_l2:
_fe_l2.L2_TetrahedronElement_swigregister(L2_TetrahedronElement)
class L2_WedgeElement(mfem._ser.fe_base.NodalFiniteElement):
    r"""Proxy of C++ mfem::L2_WedgeElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(L2_WedgeElement self, int const p, int const btype=GaussLegendre) -> L2_WedgeElement"""
        _fe_l2.L2_WedgeElement_swiginit(self, _fe_l2.new_L2_WedgeElement(*args, **kwargs))

    def CalcShape(self, ip, shape):
        r"""CalcShape(L2_WedgeElement self, IntegrationPoint ip, Vector shape)"""
        return _fe_l2.L2_WedgeElement_CalcShape(self, ip, shape)
    CalcShape = _swig_new_instance_method(_fe_l2.L2_WedgeElement_CalcShape)

    def CalcDShape(self, ip, dshape):
        r"""CalcDShape(L2_WedgeElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe_l2.L2_WedgeElement_CalcDShape(self, ip, dshape)
    CalcDShape = _swig_new_instance_method(_fe_l2.L2_WedgeElement_CalcDShape)
    __swig_destroy__ = _fe_l2.delete_L2_WedgeElement

# Register L2_WedgeElement in _fe_l2:
_fe_l2.L2_WedgeElement_swigregister(L2_WedgeElement)
class L2_FuentesPyramidElement(mfem._ser.fe_base.NodalFiniteElement):
    r"""Proxy of C++ mfem::L2_FuentesPyramidElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(L2_FuentesPyramidElement self, int const p, int const btype=GaussLegendre) -> L2_FuentesPyramidElement"""
        _fe_l2.L2_FuentesPyramidElement_swiginit(self, _fe_l2.new_L2_FuentesPyramidElement(*args, **kwargs))

    def CalcShape(self, ip, shape):
        r"""CalcShape(L2_FuentesPyramidElement self, IntegrationPoint ip, Vector shape)"""
        return _fe_l2.L2_FuentesPyramidElement_CalcShape(self, ip, shape)
    CalcShape = _swig_new_instance_method(_fe_l2.L2_FuentesPyramidElement_CalcShape)

    def CalcDShape(self, ip, dshape):
        r"""CalcDShape(L2_FuentesPyramidElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe_l2.L2_FuentesPyramidElement_CalcDShape(self, ip, dshape)
    CalcDShape = _swig_new_instance_method(_fe_l2.L2_FuentesPyramidElement_CalcDShape)
    __swig_destroy__ = _fe_l2.delete_L2_FuentesPyramidElement

# Register L2_FuentesPyramidElement in _fe_l2:
_fe_l2.L2_FuentesPyramidElement_swigregister(L2_FuentesPyramidElement)
class L2_BergotPyramidElement(mfem._ser.fe_base.NodalFiniteElement):
    r"""Proxy of C++ mfem::L2_BergotPyramidElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(L2_BergotPyramidElement self, int const p, int const btype=GaussLegendre) -> L2_BergotPyramidElement"""
        _fe_l2.L2_BergotPyramidElement_swiginit(self, _fe_l2.new_L2_BergotPyramidElement(*args, **kwargs))

    def CalcShape(self, ip, shape):
        r"""CalcShape(L2_BergotPyramidElement self, IntegrationPoint ip, Vector shape)"""
        return _fe_l2.L2_BergotPyramidElement_CalcShape(self, ip, shape)
    CalcShape = _swig_new_instance_method(_fe_l2.L2_BergotPyramidElement_CalcShape)

    def CalcDShape(self, ip, dshape):
        r"""CalcDShape(L2_BergotPyramidElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe_l2.L2_BergotPyramidElement_CalcDShape(self, ip, dshape)
    CalcDShape = _swig_new_instance_method(_fe_l2.L2_BergotPyramidElement_CalcDShape)
    __swig_destroy__ = _fe_l2.delete_L2_BergotPyramidElement

# Register L2_BergotPyramidElement in _fe_l2:
_fe_l2.L2_BergotPyramidElement_swigregister(L2_BergotPyramidElement)

