"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .ingest_job import IngestJob, IngestJobTypedDict
from .ingest_job_config import IngestJobConfig, IngestJobConfigTypedDict
from .ingest_job_payload import IngestJobPayload, IngestJobPayloadTypedDict
from agentset.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from agentset.utils import (
    FieldMetadata,
    HeaderMetadata,
    PathParamMetadata,
    validate_const,
)
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from typing import Literal, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CreateIngestJobGlobalsTypedDict(TypedDict):
    namespace_id: NotRequired[str]
    x_tenant_id: NotRequired[str]
    r"""The tenant id to use for the request. If not provided, the default tenant will be used."""


class CreateIngestJobGlobals(BaseModel):
    namespace_id: Annotated[
        Optional[str],
        pydantic.Field(alias="namespaceId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ] = None

    x_tenant_id: Annotated[
        Optional[str],
        pydantic.Field(alias="x-tenant-id"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The tenant id to use for the request. If not provided, the default tenant will be used."""


class CreateIngestJobRequestTypedDict(TypedDict):
    payload: IngestJobPayloadTypedDict
    r"""The ingest job payload."""
    name: NotRequired[Nullable[str]]
    r"""The name of the ingest job."""
    config: NotRequired[IngestJobConfigTypedDict]
    r"""The ingest job config."""


class CreateIngestJobRequest(BaseModel):
    payload: IngestJobPayload
    r"""The ingest job payload."""

    name: OptionalNullable[str] = UNSET
    r"""The name of the ingest job."""

    config: Optional[IngestJobConfig] = None
    r"""The ingest job config."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["name", "config"]
        nullable_fields = ["name"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class CreateIngestJobResponseTypedDict(TypedDict):
    r"""The created ingest job"""

    data: IngestJobTypedDict
    success: Literal[True]


class CreateIngestJobResponse(BaseModel):
    r"""The created ingest job"""

    data: IngestJob

    SUCCESS: Annotated[
        Annotated[Literal[True], AfterValidator(validate_const(True))],
        pydantic.Field(alias="success"),
    ] = True
