"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .document import Document, DocumentTypedDict
from agentset.types import BaseModel
from agentset.utils import (
    FieldMetadata,
    HeaderMetadata,
    PathParamMetadata,
    validate_const,
)
import pydantic
from pydantic.functional_validators import AfterValidator
from typing import Literal, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class DeleteDocumentGlobalsTypedDict(TypedDict):
    namespace_id: NotRequired[str]
    x_tenant_id: NotRequired[str]
    r"""The tenant id to use for the request. If not provided, the default tenant will be used."""


class DeleteDocumentGlobals(BaseModel):
    namespace_id: Annotated[
        Optional[str],
        pydantic.Field(alias="namespaceId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ] = None

    x_tenant_id: Annotated[
        Optional[str],
        pydantic.Field(alias="x-tenant-id"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The tenant id to use for the request. If not provided, the default tenant will be used."""


class DeleteDocumentRequestTypedDict(TypedDict):
    document_id: str


class DeleteDocumentRequest(BaseModel):
    document_id: Annotated[
        str,
        pydantic.Field(alias="documentId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]


class DeleteDocumentResponseTypedDict(TypedDict):
    r"""The deleted document"""

    data: DocumentTypedDict
    success: Literal[True]


class DeleteDocumentResponse(BaseModel):
    r"""The deleted document"""

    data: Document

    SUCCESS: Annotated[
        Annotated[Literal[True], AfterValidator(validate_const(True))],
        pydantic.Field(alias="success"),
    ] = True
