"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from agentset.types import BaseModel
from agentset.utils import (
    FieldMetadata,
    HeaderMetadata,
    PathParamMetadata,
    validate_const,
)
import pydantic
from pydantic.functional_validators import AfterValidator
from typing import Literal, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ReIngestJobGlobalsTypedDict(TypedDict):
    namespace_id: NotRequired[str]
    x_tenant_id: NotRequired[str]
    r"""The tenant id to use for the request. If not provided, the default tenant will be used."""


class ReIngestJobGlobals(BaseModel):
    namespace_id: Annotated[
        Optional[str],
        pydantic.Field(alias="namespaceId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ] = None

    x_tenant_id: Annotated[
        Optional[str],
        pydantic.Field(alias="x-tenant-id"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The tenant id to use for the request. If not provided, the default tenant will be used."""


class ReIngestJobRequestTypedDict(TypedDict):
    job_id: str


class ReIngestJobRequest(BaseModel):
    job_id: Annotated[
        str,
        pydantic.Field(alias="jobId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]


class ReIngestJobDataTypedDict(TypedDict):
    id: str
    r"""The unique ID of the ingest job."""


class ReIngestJobData(BaseModel):
    id: str
    r"""The unique ID of the ingest job."""


class ReIngestJobResponseTypedDict(TypedDict):
    r"""The re-ingested job"""

    data: ReIngestJobDataTypedDict
    success: Literal[True]


class ReIngestJobResponse(BaseModel):
    r"""The re-ingested job"""

    data: ReIngestJobData

    SUCCESS: Annotated[
        Annotated[Literal[True], AfterValidator(validate_const(True))],
        pydantic.Field(alias="success"),
    ] = True
