# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKIOTransformBasePython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkTransformIOBaseTemplatePython
else:
    import _itkTransformIOBaseTemplatePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkTransformBasePython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkVariableLengthVectorPython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkArray2DPython
class itkTransformIOBaseTemplateD(itk.ITKCommonBasePython.itkLightProcessObject):
    r"""Proxy of C++ itkTransformIOBaseTemplateD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFileName(self, *args):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: char const *

        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string const &

        """
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateD_SetFileName(self, *args)

    def GetFileName(self):
        r"""GetFileName(self) -> char const *"""
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateD_GetFileName(self)

    def Read(self):
        r"""Read(self)"""
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateD_Read(self)

    def Write(self):
        r"""Write(self)"""
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateD_Write(self)

    def CanReadFile(self, arg0):
        r"""
        CanReadFile(self, arg0) -> bool

        Parameters
        ----------
        arg0: char const *

        """
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateD_CanReadFile(self, arg0)

    def CanWriteFile(self, arg0):
        r"""
        CanWriteFile(self, arg0) -> bool

        Parameters
        ----------
        arg0: char const *

        """
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateD_CanWriteFile(self, arg0)

    def GetTransformList(self):
        r"""GetTransformList(self) -> listitkTransformBaseTemplateD_Pointer"""
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateD_GetTransformList(self)

    def GetReadTransformList(self):
        r"""GetReadTransformList(self) -> listitkTransformBaseTemplateD_Pointer"""
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateD_GetReadTransformList(self)

    def GetWriteTransformList(self):
        r"""GetWriteTransformList(self) -> std::list< itkTransformBaseTemplateD_ConstPointer,std::allocator< itkTransformBaseTemplateD_ConstPointer > > &"""
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateD_GetWriteTransformList(self)

    def SetTransformList(self, transformList):
        r"""
        SetTransformList(self, transformList)

        Parameters
        ----------
        transformList: std::list< itkTransformBaseTemplateD_ConstPointer,std::allocator< itkTransformBaseTemplateD_ConstPointer > > &

        """
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateD_SetTransformList(self, transformList)

    def SetAppendMode(self, _arg):
        r"""
        SetAppendMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateD_SetAppendMode(self, _arg)

    def GetAppendMode(self):
        r"""GetAppendMode(self) -> bool"""
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateD_GetAppendMode(self)

    def AppendModeOn(self):
        r"""AppendModeOn(self)"""
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateD_AppendModeOn(self)

    def AppendModeOff(self):
        r"""AppendModeOff(self)"""
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateD_AppendModeOff(self)

    def SetUseCompression(self, _arg):
        r"""
        SetUseCompression(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateD_SetUseCompression(self, _arg)

    def GetUseCompression(self):
        r"""GetUseCompression(self) -> bool"""
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateD_GetUseCompression(self)

    def UseCompressionOn(self):
        r"""UseCompressionOn(self)"""
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateD_UseCompressionOn(self)

    def UseCompressionOff(self):
        r"""UseCompressionOff(self)"""
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateD_UseCompressionOff(self)

    @staticmethod
    def CorrectTransformPrecisionType(arg0):
        r"""
        CorrectTransformPrecisionType(arg0)

        Parameters
        ----------
        arg0: std::string &

        """
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateD_CorrectTransformPrecisionType(arg0)
    __swig_destroy__ = _itkTransformIOBaseTemplatePython.delete_itkTransformIOBaseTemplateD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformIOBaseTemplateD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateD_cast(obj)

# Register itkTransformIOBaseTemplateD in _itkTransformIOBaseTemplatePython:
_itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateD_swigregister(itkTransformIOBaseTemplateD)
class itkTransformIOBaseTemplateF(itk.ITKCommonBasePython.itkLightProcessObject):
    r"""Proxy of C++ itkTransformIOBaseTemplateF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFileName(self, *args):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: char const *

        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string const &

        """
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateF_SetFileName(self, *args)

    def GetFileName(self):
        r"""GetFileName(self) -> char const *"""
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateF_GetFileName(self)

    def Read(self):
        r"""Read(self)"""
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateF_Read(self)

    def Write(self):
        r"""Write(self)"""
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateF_Write(self)

    def CanReadFile(self, arg0):
        r"""
        CanReadFile(self, arg0) -> bool

        Parameters
        ----------
        arg0: char const *

        """
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateF_CanReadFile(self, arg0)

    def CanWriteFile(self, arg0):
        r"""
        CanWriteFile(self, arg0) -> bool

        Parameters
        ----------
        arg0: char const *

        """
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateF_CanWriteFile(self, arg0)

    def GetTransformList(self):
        r"""GetTransformList(self) -> listitkTransformBaseTemplateF_Pointer"""
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateF_GetTransformList(self)

    def GetReadTransformList(self):
        r"""GetReadTransformList(self) -> listitkTransformBaseTemplateF_Pointer"""
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateF_GetReadTransformList(self)

    def GetWriteTransformList(self):
        r"""GetWriteTransformList(self) -> std::list< itkTransformBaseTemplateF_ConstPointer,std::allocator< itkTransformBaseTemplateF_ConstPointer > > &"""
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateF_GetWriteTransformList(self)

    def SetTransformList(self, transformList):
        r"""
        SetTransformList(self, transformList)

        Parameters
        ----------
        transformList: std::list< itkTransformBaseTemplateF_ConstPointer,std::allocator< itkTransformBaseTemplateF_ConstPointer > > &

        """
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateF_SetTransformList(self, transformList)

    def SetAppendMode(self, _arg):
        r"""
        SetAppendMode(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateF_SetAppendMode(self, _arg)

    def GetAppendMode(self):
        r"""GetAppendMode(self) -> bool"""
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateF_GetAppendMode(self)

    def AppendModeOn(self):
        r"""AppendModeOn(self)"""
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateF_AppendModeOn(self)

    def AppendModeOff(self):
        r"""AppendModeOff(self)"""
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateF_AppendModeOff(self)

    def SetUseCompression(self, _arg):
        r"""
        SetUseCompression(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateF_SetUseCompression(self, _arg)

    def GetUseCompression(self):
        r"""GetUseCompression(self) -> bool"""
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateF_GetUseCompression(self)

    def UseCompressionOn(self):
        r"""UseCompressionOn(self)"""
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateF_UseCompressionOn(self)

    def UseCompressionOff(self):
        r"""UseCompressionOff(self)"""
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateF_UseCompressionOff(self)

    @staticmethod
    def CorrectTransformPrecisionType(arg0):
        r"""
        CorrectTransformPrecisionType(arg0)

        Parameters
        ----------
        arg0: std::string &

        """
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateF_CorrectTransformPrecisionType(arg0)
    __swig_destroy__ = _itkTransformIOBaseTemplatePython.delete_itkTransformIOBaseTemplateF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTransformIOBaseTemplateF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateF_cast(obj)

# Register itkTransformIOBaseTemplateF in _itkTransformIOBaseTemplatePython:
_itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateF_swigregister(itkTransformIOBaseTemplateF)

