# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.user import User
from ..types.user_auth_response import UserAuthResponse
from .raw_client import AsyncRawUserClient, RawUserClient


class UserClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawUserClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawUserClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawUserClient
        """
        return self._raw_client

    def login_user(
        self,
        *,
        username: typing.Optional[str] = None,
        password: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserAuthResponse:
        """
        Parameters
        ----------
        username : typing.Optional[str]
            The username for login

        password : typing.Optional[str]
            The password for login

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserAuthResponse
            Successful login

        Examples
        --------
        from alexandernikitin import AlexandernikitinApi

        client = AlexandernikitinApi()
        client.user.login_user()
        """
        _response = self._raw_client.login_user(username=username, password=password, request_options=request_options)
        return _response.data

    def logout_user(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from alexandernikitin import AlexandernikitinApi

        client = AlexandernikitinApi()
        client.user.logout_user()
        """
        _response = self._raw_client.logout_user(request_options=request_options)
        return _response.data

    def get_user_by_name(self, username: str, *, request_options: typing.Optional[RequestOptions] = None) -> User:
        """
        Retrieve user details using their username.

        Parameters
        ----------
        username : str
            Username of the user to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User
            User details retrieved successfully

        Examples
        --------
        from alexandernikitin import AlexandernikitinApi

        client = AlexandernikitinApi()
        client.user.get_user_by_name(
            username="username",
        )
        """
        _response = self._raw_client.get_user_by_name(username, request_options=request_options)
        return _response.data


class AsyncUserClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawUserClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawUserClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawUserClient
        """
        return self._raw_client

    async def login_user(
        self,
        *,
        username: typing.Optional[str] = None,
        password: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserAuthResponse:
        """
        Parameters
        ----------
        username : typing.Optional[str]
            The username for login

        password : typing.Optional[str]
            The password for login

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserAuthResponse
            Successful login

        Examples
        --------
        import asyncio

        from alexandernikitin import AsyncAlexandernikitinApi

        client = AsyncAlexandernikitinApi()


        async def main() -> None:
            await client.user.login_user()


        asyncio.run(main())
        """
        _response = await self._raw_client.login_user(
            username=username, password=password, request_options=request_options
        )
        return _response.data

    async def logout_user(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from alexandernikitin import AsyncAlexandernikitinApi

        client = AsyncAlexandernikitinApi()


        async def main() -> None:
            await client.user.logout_user()


        asyncio.run(main())
        """
        _response = await self._raw_client.logout_user(request_options=request_options)
        return _response.data

    async def get_user_by_name(self, username: str, *, request_options: typing.Optional[RequestOptions] = None) -> User:
        """
        Retrieve user details using their username.

        Parameters
        ----------
        username : str
            Username of the user to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User
            User details retrieved successfully

        Examples
        --------
        import asyncio

        from alexandernikitin import AsyncAlexandernikitinApi

        client = AsyncAlexandernikitinApi()


        async def main() -> None:
            await client.user.get_user_by_name(
                username="username",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_user_by_name(username, request_options=request_options)
        return _response.data
