# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.plant_response import PlantResponse
from ..types.plant_status import PlantStatus
from .raw_client import AsyncRawPlantClient, RawPlantClient
from .types.search_plants_by_status_request_status import SearchPlantsByStatusRequestStatus

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PlantClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawPlantClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawPlantClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawPlantClient
        """
        return self._raw_client

    def add_plant(
        self,
        *,
        name: typing.Optional[str] = OMIT,
        category: typing.Optional[str] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        status: typing.Optional[PlantStatus] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PlantResponse:
        """
        Parameters
        ----------
        name : typing.Optional[str]

        category : typing.Optional[str]

        tags : typing.Optional[typing.Sequence[str]]

        status : typing.Optional[PlantStatus]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PlantResponse
            Plant successfully added

        Examples
        --------
        from alexandernikitin import AlexandernikitinApi

        client = AlexandernikitinApi()
        client.plant.add_plant(
            name="Fern",
            category="Indoor",
            tags=["green", "leafy"],
            status="available",
        )
        """
        _response = self._raw_client.add_plant(
            name=name, category=category, tags=tags, status=status, request_options=request_options
        )
        return _response.data

    def update_plant(
        self,
        *,
        name: typing.Optional[str] = OMIT,
        category: typing.Optional[str] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        status: typing.Optional[PlantStatus] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PlantResponse:
        """
        Parameters
        ----------
        name : typing.Optional[str]

        category : typing.Optional[str]

        tags : typing.Optional[typing.Sequence[str]]

        status : typing.Optional[PlantStatus]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PlantResponse
            Plant successfully updated

        Examples
        --------
        from alexandernikitin import AlexandernikitinApi

        client = AlexandernikitinApi()
        client.plant.update_plant(
            name="Fern",
            category="Indoor",
            tags=["green", "leafy"],
            status="sold",
        )
        """
        _response = self._raw_client.update_plant(
            name=name, category=category, tags=tags, status=status, request_options=request_options
        )
        return _response.data

    def search_plants_by_status(
        self,
        *,
        status: typing.Optional[SearchPlantsByStatusRequestStatus] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[PlantResponse]:
        """
        Filter plants based on their current status.

        Parameters
        ----------
        status : typing.Optional[SearchPlantsByStatusRequestStatus]
            The status of plants to search for.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PlantResponse]
            List of plants matching the status filter

        Examples
        --------
        from alexandernikitin import AlexandernikitinApi

        client = AlexandernikitinApi()
        client.plant.search_plants_by_status()
        """
        _response = self._raw_client.search_plants_by_status(status=status, request_options=request_options)
        return _response.data

    def search_plants_by_tags(
        self,
        *,
        tags: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[PlantResponse]:
        """
        Filter plants based on associated tags.

        Parameters
        ----------
        tags : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Tags to filter plants (comma-separated).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PlantResponse]
            List of plants matching the tags filter

        Examples
        --------
        from alexandernikitin import AlexandernikitinApi

        client = AlexandernikitinApi()
        client.plant.search_plants_by_tags()
        """
        _response = self._raw_client.search_plants_by_tags(tags=tags, request_options=request_options)
        return _response.data

    def get_plant_by_id(
        self, plant_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PlantResponse:
        """
        Retrieve a plant's details by its ID.

        Parameters
        ----------
        plant_id : int
            ID of the plant to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PlantResponse
            Details of the requested plant

        Examples
        --------
        from alexandernikitin import AlexandernikitinApi

        client = AlexandernikitinApi()
        client.plant.get_plant_by_id(
            plant_id=1,
        )
        """
        _response = self._raw_client.get_plant_by_id(plant_id, request_options=request_options)
        return _response.data


class AsyncPlantClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawPlantClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawPlantClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawPlantClient
        """
        return self._raw_client

    async def add_plant(
        self,
        *,
        name: typing.Optional[str] = OMIT,
        category: typing.Optional[str] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        status: typing.Optional[PlantStatus] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PlantResponse:
        """
        Parameters
        ----------
        name : typing.Optional[str]

        category : typing.Optional[str]

        tags : typing.Optional[typing.Sequence[str]]

        status : typing.Optional[PlantStatus]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PlantResponse
            Plant successfully added

        Examples
        --------
        import asyncio

        from alexandernikitin import AsyncAlexandernikitinApi

        client = AsyncAlexandernikitinApi()


        async def main() -> None:
            await client.plant.add_plant(
                name="Fern",
                category="Indoor",
                tags=["green", "leafy"],
                status="available",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.add_plant(
            name=name, category=category, tags=tags, status=status, request_options=request_options
        )
        return _response.data

    async def update_plant(
        self,
        *,
        name: typing.Optional[str] = OMIT,
        category: typing.Optional[str] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        status: typing.Optional[PlantStatus] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PlantResponse:
        """
        Parameters
        ----------
        name : typing.Optional[str]

        category : typing.Optional[str]

        tags : typing.Optional[typing.Sequence[str]]

        status : typing.Optional[PlantStatus]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PlantResponse
            Plant successfully updated

        Examples
        --------
        import asyncio

        from alexandernikitin import AsyncAlexandernikitinApi

        client = AsyncAlexandernikitinApi()


        async def main() -> None:
            await client.plant.update_plant(
                name="Fern",
                category="Indoor",
                tags=["green", "leafy"],
                status="sold",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_plant(
            name=name, category=category, tags=tags, status=status, request_options=request_options
        )
        return _response.data

    async def search_plants_by_status(
        self,
        *,
        status: typing.Optional[SearchPlantsByStatusRequestStatus] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[PlantResponse]:
        """
        Filter plants based on their current status.

        Parameters
        ----------
        status : typing.Optional[SearchPlantsByStatusRequestStatus]
            The status of plants to search for.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PlantResponse]
            List of plants matching the status filter

        Examples
        --------
        import asyncio

        from alexandernikitin import AsyncAlexandernikitinApi

        client = AsyncAlexandernikitinApi()


        async def main() -> None:
            await client.plant.search_plants_by_status()


        asyncio.run(main())
        """
        _response = await self._raw_client.search_plants_by_status(status=status, request_options=request_options)
        return _response.data

    async def search_plants_by_tags(
        self,
        *,
        tags: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[PlantResponse]:
        """
        Filter plants based on associated tags.

        Parameters
        ----------
        tags : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Tags to filter plants (comma-separated).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PlantResponse]
            List of plants matching the tags filter

        Examples
        --------
        import asyncio

        from alexandernikitin import AsyncAlexandernikitinApi

        client = AsyncAlexandernikitinApi()


        async def main() -> None:
            await client.plant.search_plants_by_tags()


        asyncio.run(main())
        """
        _response = await self._raw_client.search_plants_by_tags(tags=tags, request_options=request_options)
        return _response.data

    async def get_plant_by_id(
        self, plant_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PlantResponse:
        """
        Retrieve a plant's details by its ID.

        Parameters
        ----------
        plant_id : int
            ID of the plant to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PlantResponse
            Details of the requested plant

        Examples
        --------
        import asyncio

        from alexandernikitin import AsyncAlexandernikitinApi

        client = AsyncAlexandernikitinApi()


        async def main() -> None:
            await client.plant.get_plant_by_id(
                plant_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_plant_by_id(plant_id, request_options=request_options)
        return _response.data
