/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "main.go"




// 定义结构体用于返回多个值
typedef struct {
    int pass;           // bool类型转为int
    char* addr;         // 字符串地址
    char* currentUsed;  // JSON格式的map，key为qps或conc，value为int，表示当前已使用的并发和qps量
    char* err;          // 错误信息
} Result;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


/* Return type for Calc */
struct Calc_return {
	int r0;
	char* r1;
};
extern __declspec(dllexport) struct Calc_return Calc(char* appid, char* channel, char* funcs, long long int c);
extern __declspec(dllexport) char* Calc_Init(char* url, char* pro, char* gro, char* service, char* version, int mode, char* sname);
extern __declspec(dllexport) void Calc_Fini();

/* Return type for Check */
struct Check_return {
	char* r0;
	char* r1;
	char* r2;
};
extern __declspec(dllexport) struct Check_return Check(char* appid, char* uid, char* channel, char** funcs, int funcCount, char* tag);

/* Return type for CheckV2 */
struct CheckV2_return {
	char* r0;
	char* r1;
	char* r2;
};
extern __declspec(dllexport) struct CheckV2_return CheckV2(char* appid, char* uid, char* channel, char** funcs, int funcCount, char* tag);
extern __declspec(dllexport) char* Check_Init(char* url, char* pro, char* gro, char* service, char* version, int mode, char** channel, int channelCount, char* sname);
extern __declspec(dllexport) void Check_Fini();
extern __declspec(dllexport) char* Report_Init(char* url, char* pro, char* gro, char* service, char* version, int mode, char* addr, char* sname);
extern __declspec(dllexport) char* Report(char* channel, char** concInfoKeys, int concInfoKeysCount, unsigned int* concInfoValues);
extern __declspec(dllexport) void Report_Fini();
extern __declspec(dllexport) char* Conc_Init(char* url, char* pro, char* gro, char* service, char* version, int mode, char* addr, char* sname);
extern __declspec(dllexport) Result AcquireConc(char* sid, char* appid, char* channel, char* function);
extern __declspec(dllexport) char* ReleaseConc(char* sid, char* appid, char* channel, char* function);

#ifdef __cplusplus
}
#endif
