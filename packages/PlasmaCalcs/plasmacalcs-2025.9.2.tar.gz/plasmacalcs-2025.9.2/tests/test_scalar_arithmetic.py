"""
File Purpose: test scalar arithmetic patterns from quantity loader.
"""
import numpy as np  # for floating point comparisons.

import PlasmaCalcs as pc

def test_basic_arithmetic():
    '''tests basic arithmetic. These are single operations.'''
    p = pc.PlasmaCalculator()  # plasma calculator object not associated with any files.
    # provide math strings; should get p(s) == pc.ast_math_eval(s).
    # only testing unary & binary operations here.
    TESTS = [
        # numbers
        '0', '1', '7', '732', '1.23', '-7', '8.1e3', '9e2', '-1.2e-3', '0.001',
        # addition
        '0+0', '0+1', '1+0', '1+1',  # 1 & 0
        '0+5', '5+0', '1+5', '5+1',  # 1 & 0 with other numbers
        '7+5', '5+7', '1234+56', '12+3456',  # other numbers
        # subtraction
        '0-0', '0-1', '1-0', '1-1',  # 1 & 0
        '0-5', '5-0', '1-5', '5-1',  # 1 & 0 with other numbers
        '7-5', '5-7', '1234-56', '12-3456',  # other numbers
        # multiplication
        '0*0', '0*1', '1*0', '1*1',  # 1 & 0
        '0*5', '5*0', '1+5', '5*1',  # 1 & 0 with other numbers
        '7*5', '5*7', '1234*56', '12*3456',  # other numbers
        # division (but, don't divide by 0, of course!)
        '0/1', '1/1',                # 1 & 0
        '0/5', '1/5', '5/1',         # 1 & 0 with other numbers
        '7/5', '5/7', '1234/56', '12/3456',  # other numbers
        # power
        '0**1', '1**0', '1**1',      # 1 & 0
        '0**5', '5**0', '1**5', '5**1', # 1 & 0 with other numbers
        '7**5', '5**7',              # other numbers (don't include very big numbers for power.)
        # negation
        '-0', '-1', '-5', '-7', '-1234',
        # negation, followed by another operation
        '-7+2', '-7-2', '-7*2', '-7/2', '-7**2',
        # parenthesis
        '(5-7)/2', '5-(7/2)',
        # roots of negative numbers
        '(-1)**(1/2)', '(-1)**(1/3)', '(-1)**(1/4)',
        '(-5)**(1/2)', '(-7)**(1/3)', '(-2)**(1/4)',
    ]
    for test in TESTS:
        assert np.allclose(p(test), pc.ast_math_eval(test)), f'failed test: {test!r}'
    
def test_basic_pemdas():
    '''tests pemdas order of operations, by doing arithmetic involving multiple operations.'''
    p = pc.PlasmaCalculator()  # plasma calculator object not associated with any files.
    # lots of tests with different operations.
    # probably redundant to have so many, but it should be very quick to run all these, anyway.
    # (generated with ChatGPT. thanks ChatGPT!)
    TESTS = [
        # variety of somewhat-complicated expressions
        '1+3/4*56', '-432**5', '2-7/3+8/(9+2-123)', '10*2-5/3', '(-27)**3', '4*(39-2)/8',
        '6/2+87*5', '(-7)*(4-23)**3', '9/(3/2)+45', '(-23)**2+3*567', '12/3*56-2',
        '2**4-3*(51-1)', '1/3+24/3', '(47+59)/(23-1)', '((-238)**3)+45*(234/4)',
        '32/8+2', '(-15)**2+3*8', '150/5-4', '(-89)*(7-2)**3', '18/(3/2)+4',
        '(-42)**2+3*5', '18/3*5-2', '2**2-3*(15-1)', '1/3+2/3', '(16+17)/(8-1)',
        '((-25)**3)+4*(2/4)', '13*7-9/3', '(-64)**2+3*5', '27/3*5-2', '2**3-3*(15-1)',
        '1/2+1/3', '(9+8)/(6-1)', '((-23)**3)+4*(2/4)', '15*2/3+1', '(-17)**2+3*7',
        '-10/2+6*5', '(-7)*(4-2)**3', '4/(3/2)+8', '(-12)**2+3*5', '-11/3*5-2',
        '2**4-3*(5-1)', '1/3+2/3', '-(14+15)/(7-1)', '((-22)**3)+4*(2/4)', '23*7-9/3',
        '(-34)**2+3*5', '30/3*5-2', '2**3-3*(15-1)', '1/4+1/3', '(10+11)/(5-1)',
        '((-23)**3)+4*(2/4)', '16*2/3+1', '(-18)**2+3*7', '19/2+6*5', '(-7)*(4-2)**3',
        '(-8)/(3/2)+4', '(-22)**2+3*5', '13/3*5-2', '2**4-3*(5-1)', '1/3+2/3',
        '(14+15)/(7-1)', '((-22)**3)+4*(2/4)', '-23*7-9/3', '(-34)**2+3*5', '30/3*5-2',
        '-2**3-3*(15-1)', '1/4+1/3', '(10+11)/(5-1)', '((-23)**3)+4*(2/4)', '16*2/3+1',
        '(-18)**2+3*7', '19/2+6*5', '(-7)*(4-2)**3', '(-8)/(3/2)+4', '(-22)**2+3*5',
        '13/3*5-2', '2**4-3*(5-1)', '1/3+2/3', '(14+15)/(7-1)', '((-22)**3)+4*(2/4)',
        '23*7-9/3', '(-34)**2+3*5', '30/3*5-2', '2**3-3*(15-1)', '1/4+1/3', '(10+11)/(5-1)',
        '((-23)**3)+4*(2/4)', '16*2/3+1', '(-18)**2+3*7', '19/2+6*5', '(-7)*(4-2)**3',
        # variety of very complicated expressions without parenthesis
        '2+5*13-8/2+7/4+62-9/3*4+1',
        '-3/2*3+5-7*22+8/4-6**2+19/3-1',
        '4*12-7/3+16+5-8/2-29/3+1',
        '3*14-8/2+7/5+6**2-15+19/3-1',
        '1+36-7/6+4*15-8/2-39/4',
        # variety of very complicated expressions with parenthesis
        '(2+5)*13-8/2+(7/(4+2*(62-9)/3)*4)+(1-5*6/3+(2**3-7)/(4*5+6)-8)-3*2+9',
        '(10/2)*(3+(5-7)*22+(8/4-6)**2+(19/3)-1)+(2*4/3-5+(6-7**2)/(8*9)-10)',
        '4*(12-7/3)+(16+(5-8)/2)-29/3+1-(3+2*(4-1)+8/2+(9*7-6)/5-11)',
        '((3*14-8)/2)+(7/(5+6**3)-(15+19)/3-1)+(4-5+(6-7**2)/(8*9)-10)-2*3+11',
        '1+((36-7/6)*(4*15-(8/2))-39)/(4+2)+((3-1)*(5/2-4)+6)/(7+(8*9/3)**2)-10',
        # including fractional exponents
        '2+5*13-8/2+(7/(4+2*(62-9)/3)*4)**(1/3)+1',
        '(10/2)*(3+(5-7)*22+(8/4-6)**(4/2)+(19/3)-1)',
        '4*(12-7/3)+(16+(5-8)/2)**(2/3)-(29/3)**(1/2)+1',
        '((3*14-8)/2)**(1/4)+(7/(5+6**2)-(15+19)/3-1)+(4-5+(6-7**2)/(8*9)-10)-2*3+11',
        '1+((36-7/6)*(4*15-(8/2))-39)**(1/5)/(4+2)+((3-1)*(5/2-4)+6)/(7+(8*9/3)**(3/5))**(1/2)-10',
        '-(2+5*13-8/2+(7/(4+2*(62-9)/3)*4)+1)**(1/4)',
        '((10/2)*(3+(5-7)*22+(8/4-6)**(4/2)+(19/3)-1))**(1/3)',
        '(4*(12-7/3)+(16+(5-8)/2)**(2/3)-(29/3)**(1/2)+1)**(1/5)',
        '(((3*14-8)/2)+(7/(5+6**2)-(15+19)/3-1)+(4-5+(6-7**2)/(8*9)-10)-2*3+11)**(1/4)',
        '((1+((36-7/6)*(4*15-(8/2))-39)**(1/5)/(4+2)+((3-1)*(5/2-4)+6)/(7+(8*9/3)**(3/5))**(1/2)-10))**(1/2)',
        '2+5*13-8/2+(7/(4+2*(62-9)/3)*4)**(1/3)+1-(10/2)*(3+(5-7)*22+(8/4-6)**(4/2)+(19/3)-1)',
        '4*(12-7/3)+(16+(5-8)/2)**(2/3)-(29/3)**(1/2)+1/2+((3*14-8)/2)**(1/4)',
        '((3*14-8)/2)**(1/4)+(7/(5+6**2)-(15+19)/3-1)+(4-5+(6-7**2)/(8*9)-10)-2*3+11+1',
        '-1/2+((36-7/6)*(4*15-(8/2))-39)**(1/5)/(4+2)+((3-1)*(5/2-4)+6)/(7+(8*9/3)**(3/5))**(1/2)-10',
        '(2+5*13-8/2+(7/(4+2*(62-9)/3)*4)+1)**(1/4)+(10/2)*(3+(5-7)*22+(8/4-6)**(4/2)+(19/3)-1)',
        '((4*(12-7/3)+(16+(5-8)/2)**(2/3)-(29/3)**(1/2)+1)**(1/5))/2',
        '-(((3*14-8)/2)+(7/(5+6**2)-(15+19)/3-1)+(4-5+(6-7**2)/(8*9)-10)-2*3+11)**(1/4)/3',
        '1+((36-7/6)*(4*15-(8/2))-39)**(1/5)/(4+2)+((3-1)*(5/2-4)+6)/(7+(8*9/3)**(3/5))**(1/2)-10+2',
        '(2+5*13-8/2+(7/(4+2*(62-9)/3)*4)+1)**(1/4)-(10/2)*(3+(5-7)*22+(8/4-6)**(4/2)+(19/3)-1)+1',
        '((3*14-8)/2)**(1/4)+(7/(5+6**2)-(15+19)/3-1)+(4-5+(6-7**2)/(8*9)-10)-2*3+11+1/2',
        '1/2+((36-7/6)*(4*15-(8/2))-39)**(1/5)/(4+2)+((3-1)*(5/2-4)+6)/(7+(8*9/3)**(3/5))**(1/2)-10-3',
        # [TODO] including floats & scientific notation?
    ]
    for test in TESTS:
        assert np.allclose(p(test), pc.ast_math_eval(test)), f'failed test: {test!r}'

def test_arithmetic_ops():
    '''test operations with arithmetic patterns too.
    operations include: abs, log10, ln, exp, sqrt
    '''
    p = pc.PlasmaCalculator()  # plasma calculator object not associated with any files.
    TESTS = [
        # simple tests
        ('abs_0', 0), ('abs_1', 1), ('abs_(-1)', 1), ('abs_5', 5), ('abs_(-5)', 5), ('abs_1234', 1234), ('abs_(-1234)', 1234),
        ('log10_1', 0), ('log10_10', 1), ('log10_100', 2), ('log10_1000', 3), ('log10_10000', 4),
        ('loge_1', 0), ('loge_exp_1', 1), ('loge_10', np.log(10)), ('loge_100', np.log(100)), ('loge_1000', np.log(1000)),
        ('exp_0', 1), ('exp_1', np.exp(1)), ('exp_(-1)', np.exp(-1)), ('exp_5', np.exp(5)), ('exp_(-5)', np.exp(-5)),
        ('sqrt_0', 0), ('sqrt_1', 1), ('sqrt_4', 2), ('sqrt_9', 3), ('sqrt_17', np.sqrt(17)), ('sqrt_1234', np.sqrt(1234)),
        # [TODO] tests which combine multiple operations?
    ]
    for test, expected in TESTS:
        assert np.allclose(p(test), expected), f'failed test: {test!r}'
