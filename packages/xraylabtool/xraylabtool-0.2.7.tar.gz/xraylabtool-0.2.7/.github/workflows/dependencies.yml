name: Dependency Management

on:
  schedule:
    # Check for updates weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of dependency update'
        required: true
        default: 'minor'
        type: choice
        options:
          - patch
          - minor
          - major
          - all
      create_pr:
        description: 'Create pull request for updates'
        required: false
        default: true
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1

jobs:
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 1

    - name: Set up Python 3.12
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: pyproject.toml

    - name: Cache audit tools
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: audit-deps-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          audit-deps-${{ runner.os }}-

    - name: Install audit tools with retry
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 8
        max_attempts: 3
        retry_on: error
        command: |
          python -m pip install --upgrade pip
          pip install safety pip-audit

    - name: Generate dependency list
      run: |
        pip install -e .
        pip freeze > current_dependencies.txt

    - name: Run safety check
      run: |
        safety check --json --output safety-audit.json || true
        safety check --short-report
      continue-on-error: true

    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit.json || true
        pip-audit --desc
      continue-on-error: true

    - name: Upload audit reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-audit-${{ github.run_id }}
        path: |
          current_dependencies.txt
          safety-audit.json
          pip-audit.json

  check-updates:
    name: Check for Updates
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      has_updates: ${{ steps.check.outputs.has_updates }}
      updates_summary: ${{ steps.check.outputs.updates_summary }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 1

    - name: Set up Python 3.12
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: pyproject.toml

    - name: Cache dependency management tools
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: update-deps-${{ runner.os }}-pip-tools-outdated
        restore-keys: |
          update-deps-${{ runner.os }}-

    - name: Install dependency management tools with retry
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 8
        max_attempts: 3
        retry_on: error
        command: |
          python -m pip install --upgrade pip
          pip install pip-tools outdated

    - name: Check for outdated packages
      id: check
      run: |
        # Install current dependencies
        pip install -e .

        # Check for updates using pip list --outdated
        echo "=== Checking for outdated packages ===" | tee updates_report.txt
        pip list --outdated --format=json > pip_outdated.json || echo "[]" > pip_outdated.json

        # Parse results and create summary
        python3 -c "
        import json
        import os
        import sys

        try:
            with open('pip_outdated.json', 'r') as f:
                outdated_packages = json.load(f)

            has_updates = len(outdated_packages) > 0

            if has_updates:
                summary = f'Found {len(outdated_packages)} outdated packages:'
                for pkg in outdated_packages[:5]:
                    name = pkg.get('name', 'unknown')
                    current = pkg.get('version', 'unknown')
                    latest = pkg.get('latest_version', 'unknown')
                    summary += f'\\n- {name}: {current} -> {latest}'
                if len(outdated_packages) > 5:
                    summary += f'\\n... and {len(outdated_packages) - 5} more'
            else:
                summary = 'All dependencies are up to date'

            # Write to GitHub outputs
            github_output = os.environ.get('GITHUB_OUTPUT', '')
            if github_output:
                with open(github_output, 'a') as f:
                    f.write(f'has_updates={str(has_updates).lower()}\\n')
                    f.write('updates_summary<<EOF\\n')
                    f.write(summary)
                    f.write('\\nEOF\\n')
            else:
                print(f'has_updates={str(has_updates).lower()}')
                print(f'updates_summary={summary}')

        except Exception as e:
            print(f'Error processing updates: {e}', file=sys.stderr)
            github_output = os.environ.get('GITHUB_OUTPUT', '')
            if github_output:
                with open(github_output, 'a') as f:
                    f.write('has_updates=false\\n')
                    f.write('updates_summary=Error checking for updates\\n')
            sys.exit(1)
        "

    - name: Upload update reports
      uses: actions/upload-artifact@v4
      with:
        name: update-reports-${{ github.run_id }}
        path: |
          updates_report.txt
          pip_outdated.json

  create-update-pr:
    name: Create Update PR
    needs: [dependency-audit, check-updates]
    if: needs.check-updates.outputs.has_updates == 'true' && github.event.inputs.create_pr != 'false'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 1

    - name: Create pull request
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: |
          ⬆️ Update dependencies (${{ github.event.inputs.update_type || 'minor' }})

          Automated dependency update detected:
          ${{ needs.check-updates.outputs.updates_summary }}
        title: "⬆️ Automated Dependency Updates (${{ github.event.inputs.update_type || 'minor' }})"
        body: |
          ## Automated Dependency Updates

          This PR proposes dependency updates based on the `${{ github.event.inputs.update_type || 'minor' }}` update strategy.

          ### Changes Detected:
          ${{ needs.check-updates.outputs.updates_summary }}

          ### Security Audit
          - Security scan results are available in the workflow artifacts
          - Please review dependency-audit artifacts for vulnerability reports

          ### Manual Steps Required
          1. Review the proposed changes carefully
          2. Update pyproject.toml with desired dependency versions
          3. Test the updated dependencies locally
          4. Run the full test suite to verify compatibility

          ### Review Checklist
          - [ ] Review dependency changes for breaking changes
          - [ ] Update pyproject.toml with selected updates
          - [ ] Run full test suite locally
          - [ ] Check for API compatibility issues
          - [ ] Update documentation if needed

          ---

          This PR was automatically created by the dependency management workflow.
          The actual dependency updates need to be applied manually after review.
        branch: dependency-updates-${{ github.run_id }}
        delete-branch: true
        draft: false
        labels: |
          dependencies
          automated-pr

  dependency-graph:
    name: Update Dependency Graph
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 1

    - name: Set up Python 3.12
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: pyproject.toml

    - name: Cache dependency analysis tools
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: graph-deps-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          graph-deps-${{ runner.os }}-

    - name: Install dependency analysis tools with retry
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 8
        max_attempts: 3
        retry_on: error
        command: |
          python -m pip install --upgrade pip
          pip install pipdeptree

    - name: Generate dependency tree
      run: |
        pip install -e .

        # Generate dependency tree information
        pipdeptree --json > dependency-tree.json
        pipdeptree > dependency-tree.txt

    - name: Upload dependency analysis
      uses: actions/upload-artifact@v4
      with:
        name: dependency-analysis-${{ github.run_id }}
        path: |
          dependency-tree.json
          dependency-tree.txt
