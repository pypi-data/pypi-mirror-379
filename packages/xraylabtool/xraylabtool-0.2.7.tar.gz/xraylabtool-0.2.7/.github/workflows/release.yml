name: Release Automation

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.9, 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - rc
          - beta
      skip_tests:
        description: 'Skip test suite (emergency release only)'
        required: false
        default: false
        type: boolean
      draft:
        description: 'Create draft release'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel release workflows

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Validate and parse version
      id: version
      run: |
        VERSION="${{ github.event.inputs.version }}"

        # Validate version format
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+([a-zA-Z0-9\-\.]*)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          exit 1
        fi

        # Check if prerelease
        IS_PRERELEASE="false"
        if [[ "$VERSION" == *"rc"* ]] || [[ "$VERSION" == *"beta"* ]] || [[ "$VERSION" == *"alpha"* ]]; then
          IS_PRERELEASE="true"
        fi

        TAG="v$VERSION"

        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT

        echo "✅ Version: $VERSION (prerelease: $IS_PRERELEASE)"

  pre-release-tests:
    name: Pre-Release Testing
    needs: validate-version
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  update-version:
    name: Update Version Files
    needs: [validate-version, pre-release-tests]
    if: always() && (needs.pre-release-tests.result == 'success' || github.event.inputs.skip_tests == 'true')
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python 3.12
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'

    - name: Update version in pyproject.toml
      run: |
        sed -i 's/^version = ".*"/version = "${{ needs.validate-version.outputs.version }}"/' pyproject.toml

    - name: Update version in __init__.py
      run: |
        if [ -f "xraylabtool/__init__.py" ]; then
          sed -i 's/__version__ = ".*"/__version__ = "${{ needs.validate-version.outputs.version }}"/' xraylabtool/__init__.py
        fi

    - name: Generate changelog entry
      run: |
        VERSION="${{ needs.validate-version.outputs.version }}"
        DATE=$(date +%Y-%m-%d)

        # Create changelog entry
        cat << EOF > changelog_entry.md
        ## [$VERSION] - $DATE

        ### Added
        - Release $VERSION

        ### Changed
        - Version bump to $VERSION

        ### Fixed
        - Various improvements and bug fixes

        EOF

        # Prepend to CHANGELOG.md if it exists
        if [ -f "CHANGELOG.md" ]; then
          cat changelog_entry.md CHANGELOG.md > temp_changelog.md
          mv temp_changelog.md CHANGELOG.md
        else
          mv changelog_entry.md CHANGELOG.md
        fi

    - name: Commit version changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml xraylabtool/__init__.py CHANGELOG.md
        git commit -m "🚀 Release v${{ needs.validate-version.outputs.version }}" || exit 0
        git tag -a ${{ needs.validate-version.outputs.tag }} -m "Release ${{ needs.validate-version.outputs.version }}"
        git push origin main
        git push origin ${{ needs.validate-version.outputs.tag }}

  build-release:
    name: Build Release Assets
    needs: [validate-version, update-version]
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        ref: ${{ needs.validate-version.outputs.tag }}

    - name: Set up Python 3.12
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel

    - name: Build distributions
      run: |
        python -m build

    - name: Verify distributions
      run: |
        python -m twine check dist/*

    - name: Generate build info
      run: |
        cat << EOF > build_info.txt
        Build Information
        =================
        Version: ${{ needs.validate-version.outputs.version }}
        Tag: ${{ needs.validate-version.outputs.tag }}
        Commit: ${{ github.sha }}
        Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        Python Version: $(python --version)
        Platform: $(uname -a)

        Files:
        $(ls -la dist/)

        Checksums:
        $(cd dist && sha256sum *)
        EOF

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-distributions
        path: |
          dist/
          build_info.txt

  create-github-release:
    name: Create GitHub Release
    needs: [validate-version, build-release]
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        ref: ${{ needs.validate-version.outputs.tag }}

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-distributions

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ needs.validate-version.outputs.version }}"

        cat << EOF > release_notes.md
        # Release $VERSION

        ## What's New

        This release includes various improvements and bug fixes for the xraylabtool package.

        ## Installation

        \`\`\`bash
        pip install xraylabtool==$VERSION
        \`\`\`

        ## Package Files

        This release includes the following distribution files:

        EOF

        # Add checksums
        echo "## Checksums" >> release_notes.md
        echo "" >> release_notes.md
        echo '```' >> release_notes.md
        cd dist && sha256sum * >> ../release_notes.md
        cd ..
        echo '```' >> release_notes.md

        # Set output
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate-version.outputs.tag }}
        name: Release ${{ needs.validate-version.outputs.version }}
        body: ${{ steps.release_notes.outputs.notes }}
        draft: ${{ github.event.inputs.draft == 'true' }}
        prerelease: ${{ needs.validate-version.outputs.is_prerelease == 'true' }}
        files: |
          dist/*
          build_info.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    needs: [validate-version, create-github-release]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: pypi
      url: https://pypi.org/p/xraylabtool
    permissions:
      id-token: write  # For trusted publishing

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-distributions

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/
        verbose: true
        print-hash: true

  post-release:
    name: Post-Release Tasks
    needs: [validate-version, publish-pypi]
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Create post-release issue
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ needs.validate-version.outputs.version }}';
          const issueBody = `
          ## Post-Release Checklist for v${version}

          - [ ] Verify package is available on PyPI
          - [ ] Update documentation if needed
          - [ ] Announce release on social media/forums
          - [ ] Monitor for any issues or bug reports
          - [ ] Update any dependent projects

          **Release Details:**
          - Version: ${version}
          - Tag: ${{ needs.validate-version.outputs.tag }}
          - PyPI: https://pypi.org/project/xraylabtool/${version}/
          `;

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Post-release tasks for v${version}`,
            body: issueBody,
            labels: ['release', 'task']
          });

    - name: Send release notification
      uses: actions/github-script@v7
      with:
        script: |
          console.log('🎉 Release ${{ needs.validate-version.outputs.version }} completed successfully!');
          console.log('📦 Available at: https://pypi.org/project/xraylabtool/${{ needs.validate-version.outputs.version }}/');
