[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[project]
name = "umrx-app-v3"
description = "Communication with COINES firmware for humans"
authors = [
    { name = "Konstantin Selyunin", email = "selyunin.k.v@gmail.com" }
]
readme = "README.md"
repository = "https://github.com/umrx-sw/umrx-v3-py"

dependencies = [
    "pyusb>=1.3.1",
    "pyserial==3.5",
]
requires-python = ">=3.12,<4.0"
dynamic = []
version = "1.8.0"

[tool.poetry]

[tool.poetry.group.dev.dependencies]
authlib = ">=1.6.4"
coverage = { extras = ["toml"], version = ">=7.10.6" }
ipdb = "^0.13.13"
ipython = ">=9.5.0"
poethepoet = ">=0.37.0"
pre-commit = ">=4.3.0"
pudb = "^2025.1"
pytest = ">=8.4.1"
pytest-icdiff = "^0.9"
pytest-mock = ">=3.14.1"
pytest-order = "^1.2.0"
pytest-randomly = "^3.16.0"
pytest-watcher = "^0.4.3"
pytest-xdist = ">=3.8.0"
safety = ">=3.6.1"
unittest-parametrize = "^1.7.0"

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version = ">=1.0.0,<2.0.0", extras = ["plugin"] }

[tool.poetry-dynamic-versioning]
enable = false

[tool.coverage.report]
fail_under = 50
precision = 1
show_missing = true
skip_covered = true

[tool.coverage.run]
branch = true
command_line = "--module pytest"
data_file = "reports/.coverage"
source = ["src"]

[tool.coverage.xml]
output = "reports/coverage.xml"

[tool.mypy]
junit_xml = "reports/mypy.xml"
strict = true
disallow_subclassing_any = false
disallow_untyped_decorators = false
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_unreachable = true
exclude = [
    "test.*\\.py$",  # TOML's double-quoted strings require escaping backslashes
    "src.*\\.py$",
]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]
addopts = "--color=yes --doctest-modules --exitfirst --failed-first --strict-config --strict-markers --verbosity=2 --junitxml=reports/pytest.xml --log-cli-level=DEBUG"
filterwarnings = [
  "error",
  "ignore::DeprecationWarning",
  "ignore::pytest.PytestUnraisableExceptionWarning",
]
testpaths = ["src", "tests"]
xfail_strict = true
markers =[
  "usb_comm: mark tests related to low-level USB config",
  "bst_protocol: mark tests for Bosch SensorTec protocol on top of USB data transfer",
  "app_board: mark tests for application Board 3.0 test",
  "bmi08x: mart test for bmi088 board",
  "commands: mark communication commands"
]

[tool.pytest-watcher]
now = true

[tool.ruff]
fix = true
line-length = 120
lint.select = ["ALL"]
lint.ignore = [
  "ANN101",
  "ANN102",
  "ANN401",
  "ARG001",
  "COM812",
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D106",
  "D107",
  "FIX002",
  "S101",
  "S603",
  "S607",
  "TD002",
  "TD003",
  "PLR2004",
  "ERA001",
  "G004",
  "EM101"
]
lint.unfixable = ["ERA001", "F841", "T201", "T203"]
src = ["integration_tests", "src", "tests"]
target-version = "py310"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pycodestyle]
max-doc-length = 120

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
combine-as-imports = true
order-by-type = false
known-first-party = ["tests"]

[tool.poe.tasks]


[tool.poe.tasks.lint]
help = "Lint this package with pre-commit"

[[tool.poe.tasks.lint.sequence]]
cmd = "pre-commit run --all-files --color always"

[[tool.poe.tasks.lint.sequence]]
shell = "safety check --continue-on-error --full-report"

[tool.poe.tasks.test]
help = "Test this package"

[[tool.poe.tasks.test.sequence]]
cmd = "coverage run"

[[tool.poe.tasks.test.sequence]]
cmd = "coverage report"

[[tool.poe.tasks.test.sequence]]
cmd = "coverage xml"

[tool.poe.tasks.integration-test]
help = "Run the integration tests"
cmd = "pytest --failed-first --color=yes --log-cli-level=DEBUG integration_tests/*"
