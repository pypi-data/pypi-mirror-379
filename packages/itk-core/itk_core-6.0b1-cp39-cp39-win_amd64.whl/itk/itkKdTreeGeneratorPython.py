# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKStatisticsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkKdTreeGeneratorPython
else:
    import _itkKdTreeGeneratorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkListSamplePython
import itk.itkSamplePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkArrayPython
import itk.itkKdTreePython
import itk.itkEuclideanDistanceMetricPython
import itk.itkDistanceMetricPython
import itk.itkFunctionBasePython
import itk.itkImagePython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkContinuousIndexPython

def itkKdTreeGeneratorLSVF2_New():
    return itkKdTreeGeneratorLSVF2.New()

class itkKdTreeGeneratorLSVF2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkKdTreeGeneratorLSVF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkKdTreeGeneratorLSVF2_Pointer"""
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkKdTreeGeneratorLSVF2_Pointer"""
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF2_Clone(self)

    def SetSample(self, sample):
        r"""
        SetSample(self, sample)

        Parameters
        ----------
        sample: itkListSampleVF2 *

        """
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF2_SetSample(self, sample)

    def GetSourceSample(self):
        r"""GetSourceSample(self) -> itkListSampleVF2"""
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF2_GetSourceSample(self)

    def SetBucketSize(self, size):
        r"""
        SetBucketSize(self, size)

        Parameters
        ----------
        size: unsigned int

        """
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF2_SetBucketSize(self, size)

    def GetBucketSize(self):
        r"""GetBucketSize(self) -> unsigned int"""
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF2_GetBucketSize(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkKdTreeLSVF2_Pointer"""
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF2_GetOutput(self)

    def Update(self):
        r"""Update(self)"""
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF2_Update(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF2_GenerateData(self)

    def GetMeasurementVectorSize(self):
        r"""GetMeasurementVectorSize(self) -> unsigned int"""
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF2_GetMeasurementVectorSize(self)
    __swig_destroy__ = _itkKdTreeGeneratorPython.delete_itkKdTreeGeneratorLSVF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkKdTreeGeneratorLSVF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkKdTreeGeneratorLSVF2

        Create a new object of the class itkKdTreeGeneratorLSVF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKdTreeGeneratorLSVF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKdTreeGeneratorLSVF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKdTreeGeneratorLSVF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKdTreeGeneratorLSVF2 in _itkKdTreeGeneratorPython:
_itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF2_swigregister(itkKdTreeGeneratorLSVF2)

def itkKdTreeGeneratorLSVF3_New():
    return itkKdTreeGeneratorLSVF3.New()

class itkKdTreeGeneratorLSVF3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkKdTreeGeneratorLSVF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkKdTreeGeneratorLSVF3_Pointer"""
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkKdTreeGeneratorLSVF3_Pointer"""
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF3_Clone(self)

    def SetSample(self, sample):
        r"""
        SetSample(self, sample)

        Parameters
        ----------
        sample: itkListSampleVF3 *

        """
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF3_SetSample(self, sample)

    def GetSourceSample(self):
        r"""GetSourceSample(self) -> itkListSampleVF3"""
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF3_GetSourceSample(self)

    def SetBucketSize(self, size):
        r"""
        SetBucketSize(self, size)

        Parameters
        ----------
        size: unsigned int

        """
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF3_SetBucketSize(self, size)

    def GetBucketSize(self):
        r"""GetBucketSize(self) -> unsigned int"""
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF3_GetBucketSize(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkKdTreeLSVF3_Pointer"""
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF3_GetOutput(self)

    def Update(self):
        r"""Update(self)"""
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF3_Update(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF3_GenerateData(self)

    def GetMeasurementVectorSize(self):
        r"""GetMeasurementVectorSize(self) -> unsigned int"""
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF3_GetMeasurementVectorSize(self)
    __swig_destroy__ = _itkKdTreeGeneratorPython.delete_itkKdTreeGeneratorLSVF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkKdTreeGeneratorLSVF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkKdTreeGeneratorLSVF3

        Create a new object of the class itkKdTreeGeneratorLSVF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKdTreeGeneratorLSVF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKdTreeGeneratorLSVF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKdTreeGeneratorLSVF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKdTreeGeneratorLSVF3 in _itkKdTreeGeneratorPython:
_itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF3_swigregister(itkKdTreeGeneratorLSVF3)

def itkKdTreeGeneratorLSVF4_New():
    return itkKdTreeGeneratorLSVF4.New()

class itkKdTreeGeneratorLSVF4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkKdTreeGeneratorLSVF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkKdTreeGeneratorLSVF4_Pointer"""
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkKdTreeGeneratorLSVF4_Pointer"""
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF4_Clone(self)

    def SetSample(self, sample):
        r"""
        SetSample(self, sample)

        Parameters
        ----------
        sample: itkListSampleVF4 *

        """
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF4_SetSample(self, sample)

    def GetSourceSample(self):
        r"""GetSourceSample(self) -> itkListSampleVF4"""
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF4_GetSourceSample(self)

    def SetBucketSize(self, size):
        r"""
        SetBucketSize(self, size)

        Parameters
        ----------
        size: unsigned int

        """
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF4_SetBucketSize(self, size)

    def GetBucketSize(self):
        r"""GetBucketSize(self) -> unsigned int"""
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF4_GetBucketSize(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkKdTreeLSVF4_Pointer"""
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF4_GetOutput(self)

    def Update(self):
        r"""Update(self)"""
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF4_Update(self)

    def GenerateData(self):
        r"""GenerateData(self)"""
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF4_GenerateData(self)

    def GetMeasurementVectorSize(self):
        r"""GetMeasurementVectorSize(self) -> unsigned int"""
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF4_GetMeasurementVectorSize(self)
    __swig_destroy__ = _itkKdTreeGeneratorPython.delete_itkKdTreeGeneratorLSVF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkKdTreeGeneratorLSVF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkKdTreeGeneratorLSVF4

        Create a new object of the class itkKdTreeGeneratorLSVF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKdTreeGeneratorLSVF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkKdTreeGeneratorLSVF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkKdTreeGeneratorLSVF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKdTreeGeneratorLSVF4 in _itkKdTreeGeneratorPython:
_itkKdTreeGeneratorPython.itkKdTreeGeneratorLSVF4_swigregister(itkKdTreeGeneratorLSVF4)

