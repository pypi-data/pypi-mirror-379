# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVectorPython
else:
    import _itkVectorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
class itkVectorD1(itk.itkFixedArrayPython.itkFixedArrayD1):
    r"""Proxy of C++ itkVectorD1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorD1_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorD const &

        """
        return _itkVectorPython.itkVectorD1_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refD
        GetVnlVector(self) -> vnl_vectorD
        """
        return _itkVectorPython.itkVectorD1_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorD1

        Parameters
        ----------
        vec: itkVectorD1 const &

        """
        return _itkVectorPython.itkVectorD1___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorD1

        Parameters
        ----------
        vec: itkVectorD1 const &

        """
        return _itkVectorPython.itkVectorD1___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorD1"""
        return _itkVectorPython.itkVectorD1___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorD1

        Parameters
        ----------
        vec: itkVectorD1 const &

        """
        return _itkVectorPython.itkVectorD1___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorD1

        Parameters
        ----------
        vec: itkVectorD1 const &

        """
        return _itkVectorPython.itkVectorD1___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> double

        Parameters
        ----------
        other: itkVectorD1 const &

        __mul__(self, value) -> itkVectorD1

        Parameters
        ----------
        value: double const &

        """
        return _itkVectorPython.itkVectorD1___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorD1 const &

        """
        return _itkVectorPython.itkVectorD1___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorD1 const &

        """
        return _itkVectorPython.itkVectorD1___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorD1_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorD1_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorD1_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorD1_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: double const &

        """
        return _itkVectorPython.itkVectorD1_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorD1
        __init__(self, r) -> itkVectorD1

        Parameters
        ----------
        r: double const &

        __init__(self, r) -> itkVectorD1

        Parameters
        ----------
        r: double const *

        __init__(self, stdArray) -> itkVectorD1

        Parameters
        ----------
        stdArray: std::array< double,1 > const &

        __init__(self, arg0) -> itkVectorD1

        Parameters
        ----------
        arg0: itkVectorD1 const &

        """
        _itkVectorPython.itkVectorD1_swiginit(self, _itkVectorPython.new_itkVectorD1(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorD1

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> double

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorD1___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: double

        """
        return _itkVectorPython.itkVectorD1___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorD1___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorD1___repr__(self)

# Register itkVectorD1 in _itkVectorPython:
_itkVectorPython.itkVectorD1_swigregister(itkVectorD1)
class itkVectorD2(itk.itkFixedArrayPython.itkFixedArrayD2):
    r"""Proxy of C++ itkVectorD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorD2_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorD const &

        """
        return _itkVectorPython.itkVectorD2_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refD
        GetVnlVector(self) -> vnl_vectorD
        """
        return _itkVectorPython.itkVectorD2_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorD2

        Parameters
        ----------
        vec: itkVectorD2 const &

        """
        return _itkVectorPython.itkVectorD2___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorD2

        Parameters
        ----------
        vec: itkVectorD2 const &

        """
        return _itkVectorPython.itkVectorD2___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorD2"""
        return _itkVectorPython.itkVectorD2___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorD2

        Parameters
        ----------
        vec: itkVectorD2 const &

        """
        return _itkVectorPython.itkVectorD2___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorD2

        Parameters
        ----------
        vec: itkVectorD2 const &

        """
        return _itkVectorPython.itkVectorD2___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> double

        Parameters
        ----------
        other: itkVectorD2 const &

        __mul__(self, value) -> itkVectorD2

        Parameters
        ----------
        value: double const &

        """
        return _itkVectorPython.itkVectorD2___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorD2 const &

        """
        return _itkVectorPython.itkVectorD2___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorD2 const &

        """
        return _itkVectorPython.itkVectorD2___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorD2_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorD2_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorD2_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorD2_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: double const &

        """
        return _itkVectorPython.itkVectorD2_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorD2
        __init__(self, r) -> itkVectorD2

        Parameters
        ----------
        r: double const &

        __init__(self, r) -> itkVectorD2

        Parameters
        ----------
        r: double const *

        __init__(self, stdArray) -> itkVectorD2

        Parameters
        ----------
        stdArray: std::array< double,2 > const &

        __init__(self, arg0) -> itkVectorD2

        Parameters
        ----------
        arg0: itkVectorD2 const &

        """
        _itkVectorPython.itkVectorD2_swiginit(self, _itkVectorPython.new_itkVectorD2(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorD2

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> double

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorD2___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: double

        """
        return _itkVectorPython.itkVectorD2___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorD2___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorD2___repr__(self)

# Register itkVectorD2 in _itkVectorPython:
_itkVectorPython.itkVectorD2_swigregister(itkVectorD2)
class itkVectorD3(itk.itkFixedArrayPython.itkFixedArrayD3):
    r"""Proxy of C++ itkVectorD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorD3_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorD const &

        """
        return _itkVectorPython.itkVectorD3_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refD
        GetVnlVector(self) -> vnl_vectorD
        """
        return _itkVectorPython.itkVectorD3_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorD3

        Parameters
        ----------
        vec: itkVectorD3 const &

        """
        return _itkVectorPython.itkVectorD3___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorD3

        Parameters
        ----------
        vec: itkVectorD3 const &

        """
        return _itkVectorPython.itkVectorD3___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorD3"""
        return _itkVectorPython.itkVectorD3___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorD3

        Parameters
        ----------
        vec: itkVectorD3 const &

        """
        return _itkVectorPython.itkVectorD3___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorD3

        Parameters
        ----------
        vec: itkVectorD3 const &

        """
        return _itkVectorPython.itkVectorD3___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> double

        Parameters
        ----------
        other: itkVectorD3 const &

        __mul__(self, value) -> itkVectorD3

        Parameters
        ----------
        value: double const &

        """
        return _itkVectorPython.itkVectorD3___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorD3 const &

        """
        return _itkVectorPython.itkVectorD3___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorD3 const &

        """
        return _itkVectorPython.itkVectorD3___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorD3_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorD3_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorD3_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorD3_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: double const &

        """
        return _itkVectorPython.itkVectorD3_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorD3
        __init__(self, r) -> itkVectorD3

        Parameters
        ----------
        r: double const &

        __init__(self, r) -> itkVectorD3

        Parameters
        ----------
        r: double const *

        __init__(self, stdArray) -> itkVectorD3

        Parameters
        ----------
        stdArray: std::array< double,3 > const &

        __init__(self, arg0) -> itkVectorD3

        Parameters
        ----------
        arg0: itkVectorD3 const &

        """
        _itkVectorPython.itkVectorD3_swiginit(self, _itkVectorPython.new_itkVectorD3(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorD3

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> double

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorD3___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: double

        """
        return _itkVectorPython.itkVectorD3___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorD3___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorD3___repr__(self)

# Register itkVectorD3 in _itkVectorPython:
_itkVectorPython.itkVectorD3_swigregister(itkVectorD3)
class itkVectorD4(itk.itkFixedArrayPython.itkFixedArrayD4):
    r"""Proxy of C++ itkVectorD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorD4_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorD const &

        """
        return _itkVectorPython.itkVectorD4_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refD
        GetVnlVector(self) -> vnl_vectorD
        """
        return _itkVectorPython.itkVectorD4_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorD4

        Parameters
        ----------
        vec: itkVectorD4 const &

        """
        return _itkVectorPython.itkVectorD4___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorD4

        Parameters
        ----------
        vec: itkVectorD4 const &

        """
        return _itkVectorPython.itkVectorD4___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorD4"""
        return _itkVectorPython.itkVectorD4___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorD4

        Parameters
        ----------
        vec: itkVectorD4 const &

        """
        return _itkVectorPython.itkVectorD4___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorD4

        Parameters
        ----------
        vec: itkVectorD4 const &

        """
        return _itkVectorPython.itkVectorD4___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> double

        Parameters
        ----------
        other: itkVectorD4 const &

        __mul__(self, value) -> itkVectorD4

        Parameters
        ----------
        value: double const &

        """
        return _itkVectorPython.itkVectorD4___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorD4 const &

        """
        return _itkVectorPython.itkVectorD4___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorD4 const &

        """
        return _itkVectorPython.itkVectorD4___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorD4_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorD4_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorD4_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorD4_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: double const &

        """
        return _itkVectorPython.itkVectorD4_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorD4
        __init__(self, r) -> itkVectorD4

        Parameters
        ----------
        r: double const &

        __init__(self, r) -> itkVectorD4

        Parameters
        ----------
        r: double const *

        __init__(self, stdArray) -> itkVectorD4

        Parameters
        ----------
        stdArray: std::array< double,4 > const &

        __init__(self, arg0) -> itkVectorD4

        Parameters
        ----------
        arg0: itkVectorD4 const &

        """
        _itkVectorPython.itkVectorD4_swiginit(self, _itkVectorPython.new_itkVectorD4(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorD4

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> double

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorD4___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: double

        """
        return _itkVectorPython.itkVectorD4___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorD4___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorD4___repr__(self)

# Register itkVectorD4 in _itkVectorPython:
_itkVectorPython.itkVectorD4_swigregister(itkVectorD4)
class itkVectorD5(itk.itkFixedArrayPython.itkFixedArrayD5):
    r"""Proxy of C++ itkVectorD5 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorD5_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorD const &

        """
        return _itkVectorPython.itkVectorD5_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refD
        GetVnlVector(self) -> vnl_vectorD
        """
        return _itkVectorPython.itkVectorD5_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorD5

        Parameters
        ----------
        vec: itkVectorD5 const &

        """
        return _itkVectorPython.itkVectorD5___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorD5

        Parameters
        ----------
        vec: itkVectorD5 const &

        """
        return _itkVectorPython.itkVectorD5___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorD5"""
        return _itkVectorPython.itkVectorD5___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorD5

        Parameters
        ----------
        vec: itkVectorD5 const &

        """
        return _itkVectorPython.itkVectorD5___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorD5

        Parameters
        ----------
        vec: itkVectorD5 const &

        """
        return _itkVectorPython.itkVectorD5___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> double

        Parameters
        ----------
        other: itkVectorD5 const &

        __mul__(self, value) -> itkVectorD5

        Parameters
        ----------
        value: double const &

        """
        return _itkVectorPython.itkVectorD5___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorD5 const &

        """
        return _itkVectorPython.itkVectorD5___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorD5 const &

        """
        return _itkVectorPython.itkVectorD5___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorD5_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorD5_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorD5_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorD5_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: double const &

        """
        return _itkVectorPython.itkVectorD5_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorD5
        __init__(self, r) -> itkVectorD5

        Parameters
        ----------
        r: double const &

        __init__(self, r) -> itkVectorD5

        Parameters
        ----------
        r: double const *

        __init__(self, stdArray) -> itkVectorD5

        Parameters
        ----------
        stdArray: std::array< double,5 > const &

        __init__(self, arg0) -> itkVectorD5

        Parameters
        ----------
        arg0: itkVectorD5 const &

        """
        _itkVectorPython.itkVectorD5_swiginit(self, _itkVectorPython.new_itkVectorD5(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorD5

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> double

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorD5___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: double

        """
        return _itkVectorPython.itkVectorD5___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorD5___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorD5___repr__(self)

# Register itkVectorD5 in _itkVectorPython:
_itkVectorPython.itkVectorD5_swigregister(itkVectorD5)
class itkVectorD6(itk.itkFixedArrayPython.itkFixedArrayD6):
    r"""Proxy of C++ itkVectorD6 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorD6_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorD const &

        """
        return _itkVectorPython.itkVectorD6_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refD
        GetVnlVector(self) -> vnl_vectorD
        """
        return _itkVectorPython.itkVectorD6_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorD6

        Parameters
        ----------
        vec: itkVectorD6 const &

        """
        return _itkVectorPython.itkVectorD6___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorD6

        Parameters
        ----------
        vec: itkVectorD6 const &

        """
        return _itkVectorPython.itkVectorD6___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorD6"""
        return _itkVectorPython.itkVectorD6___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorD6

        Parameters
        ----------
        vec: itkVectorD6 const &

        """
        return _itkVectorPython.itkVectorD6___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorD6

        Parameters
        ----------
        vec: itkVectorD6 const &

        """
        return _itkVectorPython.itkVectorD6___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> double

        Parameters
        ----------
        other: itkVectorD6 const &

        __mul__(self, value) -> itkVectorD6

        Parameters
        ----------
        value: double const &

        """
        return _itkVectorPython.itkVectorD6___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorD6 const &

        """
        return _itkVectorPython.itkVectorD6___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorD6 const &

        """
        return _itkVectorPython.itkVectorD6___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorD6_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorD6_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorD6_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorD6_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: double const &

        """
        return _itkVectorPython.itkVectorD6_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorD6
        __init__(self, r) -> itkVectorD6

        Parameters
        ----------
        r: double const &

        __init__(self, r) -> itkVectorD6

        Parameters
        ----------
        r: double const *

        __init__(self, stdArray) -> itkVectorD6

        Parameters
        ----------
        stdArray: std::array< double,6 > const &

        __init__(self, arg0) -> itkVectorD6

        Parameters
        ----------
        arg0: itkVectorD6 const &

        """
        _itkVectorPython.itkVectorD6_swiginit(self, _itkVectorPython.new_itkVectorD6(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorD6

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> double

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorD6___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: double

        """
        return _itkVectorPython.itkVectorD6___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorD6___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorD6___repr__(self)

# Register itkVectorD6 in _itkVectorPython:
_itkVectorPython.itkVectorD6_swigregister(itkVectorD6)
class itkVectorF1(itk.itkFixedArrayPython.itkFixedArrayF1):
    r"""Proxy of C++ itkVectorF1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorF1_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorF const &

        """
        return _itkVectorPython.itkVectorF1_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refF
        GetVnlVector(self) -> vnl_vectorF
        """
        return _itkVectorPython.itkVectorF1_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorF1

        Parameters
        ----------
        vec: itkVectorF1 const &

        """
        return _itkVectorPython.itkVectorF1___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorF1

        Parameters
        ----------
        vec: itkVectorF1 const &

        """
        return _itkVectorPython.itkVectorF1___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorF1"""
        return _itkVectorPython.itkVectorF1___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorF1

        Parameters
        ----------
        vec: itkVectorF1 const &

        """
        return _itkVectorPython.itkVectorF1___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorF1

        Parameters
        ----------
        vec: itkVectorF1 const &

        """
        return _itkVectorPython.itkVectorF1___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> float

        Parameters
        ----------
        other: itkVectorF1 const &

        __mul__(self, value) -> itkVectorF1

        Parameters
        ----------
        value: float const &

        """
        return _itkVectorPython.itkVectorF1___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorF1 const &

        """
        return _itkVectorPython.itkVectorF1___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorF1 const &

        """
        return _itkVectorPython.itkVectorF1___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorF1_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorF1_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorF1_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorF1_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: float const &

        """
        return _itkVectorPython.itkVectorF1_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorF1
        __init__(self, r) -> itkVectorF1

        Parameters
        ----------
        r: float const &

        __init__(self, r) -> itkVectorF1

        Parameters
        ----------
        r: float const *

        __init__(self, stdArray) -> itkVectorF1

        Parameters
        ----------
        stdArray: std::array< float,1 > const &

        __init__(self, arg0) -> itkVectorF1

        Parameters
        ----------
        arg0: itkVectorF1 const &

        """
        _itkVectorPython.itkVectorF1_swiginit(self, _itkVectorPython.new_itkVectorF1(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorF1

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> float

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorF1___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: float

        """
        return _itkVectorPython.itkVectorF1___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorF1___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorF1___repr__(self)

# Register itkVectorF1 in _itkVectorPython:
_itkVectorPython.itkVectorF1_swigregister(itkVectorF1)
class itkVectorF2(itk.itkFixedArrayPython.itkFixedArrayF2):
    r"""Proxy of C++ itkVectorF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorF2_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorF const &

        """
        return _itkVectorPython.itkVectorF2_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refF
        GetVnlVector(self) -> vnl_vectorF
        """
        return _itkVectorPython.itkVectorF2_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorF2

        Parameters
        ----------
        vec: itkVectorF2 const &

        """
        return _itkVectorPython.itkVectorF2___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorF2

        Parameters
        ----------
        vec: itkVectorF2 const &

        """
        return _itkVectorPython.itkVectorF2___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorF2"""
        return _itkVectorPython.itkVectorF2___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorF2

        Parameters
        ----------
        vec: itkVectorF2 const &

        """
        return _itkVectorPython.itkVectorF2___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorF2

        Parameters
        ----------
        vec: itkVectorF2 const &

        """
        return _itkVectorPython.itkVectorF2___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> float

        Parameters
        ----------
        other: itkVectorF2 const &

        __mul__(self, value) -> itkVectorF2

        Parameters
        ----------
        value: float const &

        """
        return _itkVectorPython.itkVectorF2___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorF2 const &

        """
        return _itkVectorPython.itkVectorF2___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorF2 const &

        """
        return _itkVectorPython.itkVectorF2___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorF2_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorF2_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorF2_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorF2_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: float const &

        """
        return _itkVectorPython.itkVectorF2_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorF2
        __init__(self, r) -> itkVectorF2

        Parameters
        ----------
        r: float const &

        __init__(self, r) -> itkVectorF2

        Parameters
        ----------
        r: float const *

        __init__(self, stdArray) -> itkVectorF2

        Parameters
        ----------
        stdArray: std::array< float,2 > const &

        __init__(self, arg0) -> itkVectorF2

        Parameters
        ----------
        arg0: itkVectorF2 const &

        """
        _itkVectorPython.itkVectorF2_swiginit(self, _itkVectorPython.new_itkVectorF2(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorF2

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> float

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorF2___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: float

        """
        return _itkVectorPython.itkVectorF2___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorF2___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorF2___repr__(self)

# Register itkVectorF2 in _itkVectorPython:
_itkVectorPython.itkVectorF2_swigregister(itkVectorF2)
class itkVectorF3(itk.itkFixedArrayPython.itkFixedArrayF3):
    r"""Proxy of C++ itkVectorF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorF3_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorF const &

        """
        return _itkVectorPython.itkVectorF3_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refF
        GetVnlVector(self) -> vnl_vectorF
        """
        return _itkVectorPython.itkVectorF3_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorF3

        Parameters
        ----------
        vec: itkVectorF3 const &

        """
        return _itkVectorPython.itkVectorF3___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorF3

        Parameters
        ----------
        vec: itkVectorF3 const &

        """
        return _itkVectorPython.itkVectorF3___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorF3"""
        return _itkVectorPython.itkVectorF3___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorF3

        Parameters
        ----------
        vec: itkVectorF3 const &

        """
        return _itkVectorPython.itkVectorF3___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorF3

        Parameters
        ----------
        vec: itkVectorF3 const &

        """
        return _itkVectorPython.itkVectorF3___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> float

        Parameters
        ----------
        other: itkVectorF3 const &

        __mul__(self, value) -> itkVectorF3

        Parameters
        ----------
        value: float const &

        """
        return _itkVectorPython.itkVectorF3___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorF3 const &

        """
        return _itkVectorPython.itkVectorF3___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorF3 const &

        """
        return _itkVectorPython.itkVectorF3___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorF3_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorF3_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorF3_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorF3_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: float const &

        """
        return _itkVectorPython.itkVectorF3_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorF3
        __init__(self, r) -> itkVectorF3

        Parameters
        ----------
        r: float const &

        __init__(self, r) -> itkVectorF3

        Parameters
        ----------
        r: float const *

        __init__(self, stdArray) -> itkVectorF3

        Parameters
        ----------
        stdArray: std::array< float,3 > const &

        __init__(self, arg0) -> itkVectorF3

        Parameters
        ----------
        arg0: itkVectorF3 const &

        """
        _itkVectorPython.itkVectorF3_swiginit(self, _itkVectorPython.new_itkVectorF3(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorF3

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> float

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorF3___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: float

        """
        return _itkVectorPython.itkVectorF3___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorF3___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorF3___repr__(self)

# Register itkVectorF3 in _itkVectorPython:
_itkVectorPython.itkVectorF3_swigregister(itkVectorF3)
class itkVectorF4(itk.itkFixedArrayPython.itkFixedArrayF4):
    r"""Proxy of C++ itkVectorF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorF4_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorF const &

        """
        return _itkVectorPython.itkVectorF4_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refF
        GetVnlVector(self) -> vnl_vectorF
        """
        return _itkVectorPython.itkVectorF4_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorF4

        Parameters
        ----------
        vec: itkVectorF4 const &

        """
        return _itkVectorPython.itkVectorF4___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorF4

        Parameters
        ----------
        vec: itkVectorF4 const &

        """
        return _itkVectorPython.itkVectorF4___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorF4"""
        return _itkVectorPython.itkVectorF4___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorF4

        Parameters
        ----------
        vec: itkVectorF4 const &

        """
        return _itkVectorPython.itkVectorF4___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorF4

        Parameters
        ----------
        vec: itkVectorF4 const &

        """
        return _itkVectorPython.itkVectorF4___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> float

        Parameters
        ----------
        other: itkVectorF4 const &

        __mul__(self, value) -> itkVectorF4

        Parameters
        ----------
        value: float const &

        """
        return _itkVectorPython.itkVectorF4___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorF4 const &

        """
        return _itkVectorPython.itkVectorF4___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorF4 const &

        """
        return _itkVectorPython.itkVectorF4___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorF4_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorF4_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorF4_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorF4_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: float const &

        """
        return _itkVectorPython.itkVectorF4_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorF4
        __init__(self, r) -> itkVectorF4

        Parameters
        ----------
        r: float const &

        __init__(self, r) -> itkVectorF4

        Parameters
        ----------
        r: float const *

        __init__(self, stdArray) -> itkVectorF4

        Parameters
        ----------
        stdArray: std::array< float,4 > const &

        __init__(self, arg0) -> itkVectorF4

        Parameters
        ----------
        arg0: itkVectorF4 const &

        """
        _itkVectorPython.itkVectorF4_swiginit(self, _itkVectorPython.new_itkVectorF4(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorF4

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> float

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorF4___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: float

        """
        return _itkVectorPython.itkVectorF4___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorF4___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorF4___repr__(self)

# Register itkVectorF4 in _itkVectorPython:
_itkVectorPython.itkVectorF4_swigregister(itkVectorF4)
class itkVectorF5(itk.itkFixedArrayPython.itkFixedArrayF5):
    r"""Proxy of C++ itkVectorF5 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorF5_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorF const &

        """
        return _itkVectorPython.itkVectorF5_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refF
        GetVnlVector(self) -> vnl_vectorF
        """
        return _itkVectorPython.itkVectorF5_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorF5

        Parameters
        ----------
        vec: itkVectorF5 const &

        """
        return _itkVectorPython.itkVectorF5___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorF5

        Parameters
        ----------
        vec: itkVectorF5 const &

        """
        return _itkVectorPython.itkVectorF5___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorF5"""
        return _itkVectorPython.itkVectorF5___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorF5

        Parameters
        ----------
        vec: itkVectorF5 const &

        """
        return _itkVectorPython.itkVectorF5___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorF5

        Parameters
        ----------
        vec: itkVectorF5 const &

        """
        return _itkVectorPython.itkVectorF5___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> float

        Parameters
        ----------
        other: itkVectorF5 const &

        __mul__(self, value) -> itkVectorF5

        Parameters
        ----------
        value: float const &

        """
        return _itkVectorPython.itkVectorF5___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorF5 const &

        """
        return _itkVectorPython.itkVectorF5___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorF5 const &

        """
        return _itkVectorPython.itkVectorF5___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorF5_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorF5_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorF5_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorF5_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: float const &

        """
        return _itkVectorPython.itkVectorF5_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorF5
        __init__(self, r) -> itkVectorF5

        Parameters
        ----------
        r: float const &

        __init__(self, r) -> itkVectorF5

        Parameters
        ----------
        r: float const *

        __init__(self, stdArray) -> itkVectorF5

        Parameters
        ----------
        stdArray: std::array< float,5 > const &

        __init__(self, arg0) -> itkVectorF5

        Parameters
        ----------
        arg0: itkVectorF5 const &

        """
        _itkVectorPython.itkVectorF5_swiginit(self, _itkVectorPython.new_itkVectorF5(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorF5

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> float

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorF5___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: float

        """
        return _itkVectorPython.itkVectorF5___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorF5___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorF5___repr__(self)

# Register itkVectorF5 in _itkVectorPython:
_itkVectorPython.itkVectorF5_swigregister(itkVectorF5)
class itkVectorF6(itk.itkFixedArrayPython.itkFixedArrayF6):
    r"""Proxy of C++ itkVectorF6 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorF6_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorF const &

        """
        return _itkVectorPython.itkVectorF6_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refF
        GetVnlVector(self) -> vnl_vectorF
        """
        return _itkVectorPython.itkVectorF6_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorF6

        Parameters
        ----------
        vec: itkVectorF6 const &

        """
        return _itkVectorPython.itkVectorF6___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorF6

        Parameters
        ----------
        vec: itkVectorF6 const &

        """
        return _itkVectorPython.itkVectorF6___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorF6"""
        return _itkVectorPython.itkVectorF6___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorF6

        Parameters
        ----------
        vec: itkVectorF6 const &

        """
        return _itkVectorPython.itkVectorF6___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorF6

        Parameters
        ----------
        vec: itkVectorF6 const &

        """
        return _itkVectorPython.itkVectorF6___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> float

        Parameters
        ----------
        other: itkVectorF6 const &

        __mul__(self, value) -> itkVectorF6

        Parameters
        ----------
        value: float const &

        """
        return _itkVectorPython.itkVectorF6___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorF6 const &

        """
        return _itkVectorPython.itkVectorF6___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorF6 const &

        """
        return _itkVectorPython.itkVectorF6___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorF6_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorF6_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorF6_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorF6_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: float const &

        """
        return _itkVectorPython.itkVectorF6_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorF6
        __init__(self, r) -> itkVectorF6

        Parameters
        ----------
        r: float const &

        __init__(self, r) -> itkVectorF6

        Parameters
        ----------
        r: float const *

        __init__(self, stdArray) -> itkVectorF6

        Parameters
        ----------
        stdArray: std::array< float,6 > const &

        __init__(self, arg0) -> itkVectorF6

        Parameters
        ----------
        arg0: itkVectorF6 const &

        """
        _itkVectorPython.itkVectorF6_swiginit(self, _itkVectorPython.new_itkVectorF6(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorF6

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> float

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorF6___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: float

        """
        return _itkVectorPython.itkVectorF6___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorF6___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorF6___repr__(self)

# Register itkVectorF6 in _itkVectorPython:
_itkVectorPython.itkVectorF6_swigregister(itkVectorF6)
class itkVectorSS1(itk.itkFixedArrayPython.itkFixedArraySS1):
    r"""Proxy of C++ itkVectorSS1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorSS1_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorSS const &

        """
        return _itkVectorPython.itkVectorSS1_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refSS
        GetVnlVector(self) -> vnl_vectorSS
        """
        return _itkVectorPython.itkVectorSS1_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorSS1

        Parameters
        ----------
        vec: itkVectorSS1 const &

        """
        return _itkVectorPython.itkVectorSS1___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorSS1

        Parameters
        ----------
        vec: itkVectorSS1 const &

        """
        return _itkVectorPython.itkVectorSS1___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorSS1"""
        return _itkVectorPython.itkVectorSS1___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorSS1

        Parameters
        ----------
        vec: itkVectorSS1 const &

        """
        return _itkVectorPython.itkVectorSS1___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorSS1

        Parameters
        ----------
        vec: itkVectorSS1 const &

        """
        return _itkVectorPython.itkVectorSS1___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> short

        Parameters
        ----------
        other: itkVectorSS1 const &

        __mul__(self, value) -> itkVectorSS1

        Parameters
        ----------
        value: short const &

        """
        return _itkVectorPython.itkVectorSS1___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorSS1 const &

        """
        return _itkVectorPython.itkVectorSS1___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorSS1 const &

        """
        return _itkVectorPython.itkVectorSS1___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorSS1_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorSS1_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorSS1_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorSS1_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: short const &

        """
        return _itkVectorPython.itkVectorSS1_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorSS1
        __init__(self, r) -> itkVectorSS1

        Parameters
        ----------
        r: short const &

        __init__(self, r) -> itkVectorSS1

        Parameters
        ----------
        r: short const *

        __init__(self, stdArray) -> itkVectorSS1

        Parameters
        ----------
        stdArray: std::array< short,1 > const &

        __init__(self, arg0) -> itkVectorSS1

        Parameters
        ----------
        arg0: itkVectorSS1 const &

        """
        _itkVectorPython.itkVectorSS1_swiginit(self, _itkVectorPython.new_itkVectorSS1(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorSS1

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> short

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorSS1___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: short

        """
        return _itkVectorPython.itkVectorSS1___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorSS1___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorSS1___repr__(self)

# Register itkVectorSS1 in _itkVectorPython:
_itkVectorPython.itkVectorSS1_swigregister(itkVectorSS1)
class itkVectorSS2(itk.itkFixedArrayPython.itkFixedArraySS2):
    r"""Proxy of C++ itkVectorSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorSS2_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorSS const &

        """
        return _itkVectorPython.itkVectorSS2_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refSS
        GetVnlVector(self) -> vnl_vectorSS
        """
        return _itkVectorPython.itkVectorSS2_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorSS2

        Parameters
        ----------
        vec: itkVectorSS2 const &

        """
        return _itkVectorPython.itkVectorSS2___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorSS2

        Parameters
        ----------
        vec: itkVectorSS2 const &

        """
        return _itkVectorPython.itkVectorSS2___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorSS2"""
        return _itkVectorPython.itkVectorSS2___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorSS2

        Parameters
        ----------
        vec: itkVectorSS2 const &

        """
        return _itkVectorPython.itkVectorSS2___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorSS2

        Parameters
        ----------
        vec: itkVectorSS2 const &

        """
        return _itkVectorPython.itkVectorSS2___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> short

        Parameters
        ----------
        other: itkVectorSS2 const &

        __mul__(self, value) -> itkVectorSS2

        Parameters
        ----------
        value: short const &

        """
        return _itkVectorPython.itkVectorSS2___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorSS2 const &

        """
        return _itkVectorPython.itkVectorSS2___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorSS2 const &

        """
        return _itkVectorPython.itkVectorSS2___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorSS2_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorSS2_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorSS2_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorSS2_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: short const &

        """
        return _itkVectorPython.itkVectorSS2_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorSS2
        __init__(self, r) -> itkVectorSS2

        Parameters
        ----------
        r: short const &

        __init__(self, r) -> itkVectorSS2

        Parameters
        ----------
        r: short const *

        __init__(self, stdArray) -> itkVectorSS2

        Parameters
        ----------
        stdArray: std::array< short,2 > const &

        __init__(self, arg0) -> itkVectorSS2

        Parameters
        ----------
        arg0: itkVectorSS2 const &

        """
        _itkVectorPython.itkVectorSS2_swiginit(self, _itkVectorPython.new_itkVectorSS2(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorSS2

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> short

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorSS2___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: short

        """
        return _itkVectorPython.itkVectorSS2___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorSS2___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorSS2___repr__(self)

# Register itkVectorSS2 in _itkVectorPython:
_itkVectorPython.itkVectorSS2_swigregister(itkVectorSS2)
class itkVectorSS3(itk.itkFixedArrayPython.itkFixedArraySS3):
    r"""Proxy of C++ itkVectorSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorSS3_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorSS const &

        """
        return _itkVectorPython.itkVectorSS3_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refSS
        GetVnlVector(self) -> vnl_vectorSS
        """
        return _itkVectorPython.itkVectorSS3_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorSS3

        Parameters
        ----------
        vec: itkVectorSS3 const &

        """
        return _itkVectorPython.itkVectorSS3___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorSS3

        Parameters
        ----------
        vec: itkVectorSS3 const &

        """
        return _itkVectorPython.itkVectorSS3___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorSS3"""
        return _itkVectorPython.itkVectorSS3___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorSS3

        Parameters
        ----------
        vec: itkVectorSS3 const &

        """
        return _itkVectorPython.itkVectorSS3___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorSS3

        Parameters
        ----------
        vec: itkVectorSS3 const &

        """
        return _itkVectorPython.itkVectorSS3___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> short

        Parameters
        ----------
        other: itkVectorSS3 const &

        __mul__(self, value) -> itkVectorSS3

        Parameters
        ----------
        value: short const &

        """
        return _itkVectorPython.itkVectorSS3___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorSS3 const &

        """
        return _itkVectorPython.itkVectorSS3___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorSS3 const &

        """
        return _itkVectorPython.itkVectorSS3___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorSS3_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorSS3_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorSS3_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorSS3_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: short const &

        """
        return _itkVectorPython.itkVectorSS3_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorSS3
        __init__(self, r) -> itkVectorSS3

        Parameters
        ----------
        r: short const &

        __init__(self, r) -> itkVectorSS3

        Parameters
        ----------
        r: short const *

        __init__(self, stdArray) -> itkVectorSS3

        Parameters
        ----------
        stdArray: std::array< short,3 > const &

        __init__(self, arg0) -> itkVectorSS3

        Parameters
        ----------
        arg0: itkVectorSS3 const &

        """
        _itkVectorPython.itkVectorSS3_swiginit(self, _itkVectorPython.new_itkVectorSS3(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorSS3

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> short

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorSS3___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: short

        """
        return _itkVectorPython.itkVectorSS3___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorSS3___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorSS3___repr__(self)

# Register itkVectorSS3 in _itkVectorPython:
_itkVectorPython.itkVectorSS3_swigregister(itkVectorSS3)
class itkVectorSS4(itk.itkFixedArrayPython.itkFixedArraySS4):
    r"""Proxy of C++ itkVectorSS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorSS4_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorSS const &

        """
        return _itkVectorPython.itkVectorSS4_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refSS
        GetVnlVector(self) -> vnl_vectorSS
        """
        return _itkVectorPython.itkVectorSS4_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorSS4

        Parameters
        ----------
        vec: itkVectorSS4 const &

        """
        return _itkVectorPython.itkVectorSS4___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorSS4

        Parameters
        ----------
        vec: itkVectorSS4 const &

        """
        return _itkVectorPython.itkVectorSS4___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorSS4"""
        return _itkVectorPython.itkVectorSS4___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorSS4

        Parameters
        ----------
        vec: itkVectorSS4 const &

        """
        return _itkVectorPython.itkVectorSS4___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorSS4

        Parameters
        ----------
        vec: itkVectorSS4 const &

        """
        return _itkVectorPython.itkVectorSS4___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> short

        Parameters
        ----------
        other: itkVectorSS4 const &

        __mul__(self, value) -> itkVectorSS4

        Parameters
        ----------
        value: short const &

        """
        return _itkVectorPython.itkVectorSS4___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorSS4 const &

        """
        return _itkVectorPython.itkVectorSS4___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorSS4 const &

        """
        return _itkVectorPython.itkVectorSS4___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorSS4_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorSS4_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorSS4_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorSS4_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: short const &

        """
        return _itkVectorPython.itkVectorSS4_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorSS4
        __init__(self, r) -> itkVectorSS4

        Parameters
        ----------
        r: short const &

        __init__(self, r) -> itkVectorSS4

        Parameters
        ----------
        r: short const *

        __init__(self, stdArray) -> itkVectorSS4

        Parameters
        ----------
        stdArray: std::array< short,4 > const &

        __init__(self, arg0) -> itkVectorSS4

        Parameters
        ----------
        arg0: itkVectorSS4 const &

        """
        _itkVectorPython.itkVectorSS4_swiginit(self, _itkVectorPython.new_itkVectorSS4(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorSS4

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> short

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorSS4___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: short

        """
        return _itkVectorPython.itkVectorSS4___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorSS4___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorSS4___repr__(self)

# Register itkVectorSS4 in _itkVectorPython:
_itkVectorPython.itkVectorSS4_swigregister(itkVectorSS4)
class itkVectorSS5(itk.itkFixedArrayPython.itkFixedArraySS5):
    r"""Proxy of C++ itkVectorSS5 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorSS5_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorSS const &

        """
        return _itkVectorPython.itkVectorSS5_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refSS
        GetVnlVector(self) -> vnl_vectorSS
        """
        return _itkVectorPython.itkVectorSS5_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorSS5

        Parameters
        ----------
        vec: itkVectorSS5 const &

        """
        return _itkVectorPython.itkVectorSS5___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorSS5

        Parameters
        ----------
        vec: itkVectorSS5 const &

        """
        return _itkVectorPython.itkVectorSS5___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorSS5"""
        return _itkVectorPython.itkVectorSS5___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorSS5

        Parameters
        ----------
        vec: itkVectorSS5 const &

        """
        return _itkVectorPython.itkVectorSS5___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorSS5

        Parameters
        ----------
        vec: itkVectorSS5 const &

        """
        return _itkVectorPython.itkVectorSS5___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> short

        Parameters
        ----------
        other: itkVectorSS5 const &

        __mul__(self, value) -> itkVectorSS5

        Parameters
        ----------
        value: short const &

        """
        return _itkVectorPython.itkVectorSS5___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorSS5 const &

        """
        return _itkVectorPython.itkVectorSS5___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorSS5 const &

        """
        return _itkVectorPython.itkVectorSS5___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorSS5_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorSS5_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorSS5_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorSS5_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: short const &

        """
        return _itkVectorPython.itkVectorSS5_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorSS5
        __init__(self, r) -> itkVectorSS5

        Parameters
        ----------
        r: short const &

        __init__(self, r) -> itkVectorSS5

        Parameters
        ----------
        r: short const *

        __init__(self, stdArray) -> itkVectorSS5

        Parameters
        ----------
        stdArray: std::array< short,5 > const &

        __init__(self, arg0) -> itkVectorSS5

        Parameters
        ----------
        arg0: itkVectorSS5 const &

        """
        _itkVectorPython.itkVectorSS5_swiginit(self, _itkVectorPython.new_itkVectorSS5(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorSS5

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> short

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorSS5___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: short

        """
        return _itkVectorPython.itkVectorSS5___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorSS5___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorSS5___repr__(self)

# Register itkVectorSS5 in _itkVectorPython:
_itkVectorPython.itkVectorSS5_swigregister(itkVectorSS5)
class itkVectorSS6(itk.itkFixedArrayPython.itkFixedArraySS6):
    r"""Proxy of C++ itkVectorSS6 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorSS6_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorSS const &

        """
        return _itkVectorPython.itkVectorSS6_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refSS
        GetVnlVector(self) -> vnl_vectorSS
        """
        return _itkVectorPython.itkVectorSS6_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorSS6

        Parameters
        ----------
        vec: itkVectorSS6 const &

        """
        return _itkVectorPython.itkVectorSS6___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorSS6

        Parameters
        ----------
        vec: itkVectorSS6 const &

        """
        return _itkVectorPython.itkVectorSS6___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorSS6"""
        return _itkVectorPython.itkVectorSS6___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorSS6

        Parameters
        ----------
        vec: itkVectorSS6 const &

        """
        return _itkVectorPython.itkVectorSS6___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorSS6

        Parameters
        ----------
        vec: itkVectorSS6 const &

        """
        return _itkVectorPython.itkVectorSS6___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> short

        Parameters
        ----------
        other: itkVectorSS6 const &

        __mul__(self, value) -> itkVectorSS6

        Parameters
        ----------
        value: short const &

        """
        return _itkVectorPython.itkVectorSS6___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorSS6 const &

        """
        return _itkVectorPython.itkVectorSS6___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorSS6 const &

        """
        return _itkVectorPython.itkVectorSS6___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorSS6_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorSS6_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorSS6_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorSS6_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: short const &

        """
        return _itkVectorPython.itkVectorSS6_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorSS6
        __init__(self, r) -> itkVectorSS6

        Parameters
        ----------
        r: short const &

        __init__(self, r) -> itkVectorSS6

        Parameters
        ----------
        r: short const *

        __init__(self, stdArray) -> itkVectorSS6

        Parameters
        ----------
        stdArray: std::array< short,6 > const &

        __init__(self, arg0) -> itkVectorSS6

        Parameters
        ----------
        arg0: itkVectorSS6 const &

        """
        _itkVectorPython.itkVectorSS6_swiginit(self, _itkVectorPython.new_itkVectorSS6(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorSS6

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> short

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorSS6___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: short

        """
        return _itkVectorPython.itkVectorSS6___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorSS6___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorSS6___repr__(self)

# Register itkVectorSS6 in _itkVectorPython:
_itkVectorPython.itkVectorSS6_swigregister(itkVectorSS6)
class itkVectorUC1(itk.itkFixedArrayPython.itkFixedArrayUC1):
    r"""Proxy of C++ itkVectorUC1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorUC1_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorUC const &

        """
        return _itkVectorPython.itkVectorUC1_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refUC
        GetVnlVector(self) -> vnl_vectorUC
        """
        return _itkVectorPython.itkVectorUC1_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorUC1

        Parameters
        ----------
        vec: itkVectorUC1 const &

        """
        return _itkVectorPython.itkVectorUC1___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorUC1

        Parameters
        ----------
        vec: itkVectorUC1 const &

        """
        return _itkVectorPython.itkVectorUC1___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorUC1"""
        return _itkVectorPython.itkVectorUC1___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorUC1

        Parameters
        ----------
        vec: itkVectorUC1 const &

        """
        return _itkVectorPython.itkVectorUC1___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorUC1

        Parameters
        ----------
        vec: itkVectorUC1 const &

        """
        return _itkVectorPython.itkVectorUC1___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> unsigned char

        Parameters
        ----------
        other: itkVectorUC1 const &

        __mul__(self, value) -> itkVectorUC1

        Parameters
        ----------
        value: unsigned char const &

        """
        return _itkVectorPython.itkVectorUC1___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorUC1 const &

        """
        return _itkVectorPython.itkVectorUC1___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorUC1 const &

        """
        return _itkVectorPython.itkVectorUC1___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorUC1_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorUC1_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorUC1_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorUC1_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: unsigned char const &

        """
        return _itkVectorPython.itkVectorUC1_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorUC1
        __init__(self, r) -> itkVectorUC1

        Parameters
        ----------
        r: unsigned char const &

        __init__(self, r) -> itkVectorUC1

        Parameters
        ----------
        r: unsigned char const *

        __init__(self, stdArray) -> itkVectorUC1

        Parameters
        ----------
        stdArray: std::array< unsigned char,1 > const &

        __init__(self, arg0) -> itkVectorUC1

        Parameters
        ----------
        arg0: itkVectorUC1 const &

        """
        _itkVectorPython.itkVectorUC1_swiginit(self, _itkVectorPython.new_itkVectorUC1(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorUC1

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> unsigned char

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorUC1___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: unsigned char

        """
        return _itkVectorPython.itkVectorUC1___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorUC1___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorUC1___repr__(self)

# Register itkVectorUC1 in _itkVectorPython:
_itkVectorPython.itkVectorUC1_swigregister(itkVectorUC1)
class itkVectorUC2(itk.itkFixedArrayPython.itkFixedArrayUC2):
    r"""Proxy of C++ itkVectorUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorUC2_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorUC const &

        """
        return _itkVectorPython.itkVectorUC2_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refUC
        GetVnlVector(self) -> vnl_vectorUC
        """
        return _itkVectorPython.itkVectorUC2_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorUC2

        Parameters
        ----------
        vec: itkVectorUC2 const &

        """
        return _itkVectorPython.itkVectorUC2___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorUC2

        Parameters
        ----------
        vec: itkVectorUC2 const &

        """
        return _itkVectorPython.itkVectorUC2___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorUC2"""
        return _itkVectorPython.itkVectorUC2___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorUC2

        Parameters
        ----------
        vec: itkVectorUC2 const &

        """
        return _itkVectorPython.itkVectorUC2___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorUC2

        Parameters
        ----------
        vec: itkVectorUC2 const &

        """
        return _itkVectorPython.itkVectorUC2___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> unsigned char

        Parameters
        ----------
        other: itkVectorUC2 const &

        __mul__(self, value) -> itkVectorUC2

        Parameters
        ----------
        value: unsigned char const &

        """
        return _itkVectorPython.itkVectorUC2___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorUC2 const &

        """
        return _itkVectorPython.itkVectorUC2___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorUC2 const &

        """
        return _itkVectorPython.itkVectorUC2___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorUC2_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorUC2_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorUC2_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorUC2_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: unsigned char const &

        """
        return _itkVectorPython.itkVectorUC2_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorUC2
        __init__(self, r) -> itkVectorUC2

        Parameters
        ----------
        r: unsigned char const &

        __init__(self, r) -> itkVectorUC2

        Parameters
        ----------
        r: unsigned char const *

        __init__(self, stdArray) -> itkVectorUC2

        Parameters
        ----------
        stdArray: std::array< unsigned char,2 > const &

        __init__(self, arg0) -> itkVectorUC2

        Parameters
        ----------
        arg0: itkVectorUC2 const &

        """
        _itkVectorPython.itkVectorUC2_swiginit(self, _itkVectorPython.new_itkVectorUC2(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorUC2

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> unsigned char

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorUC2___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: unsigned char

        """
        return _itkVectorPython.itkVectorUC2___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorUC2___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorUC2___repr__(self)

# Register itkVectorUC2 in _itkVectorPython:
_itkVectorPython.itkVectorUC2_swigregister(itkVectorUC2)
class itkVectorUC3(itk.itkFixedArrayPython.itkFixedArrayUC3):
    r"""Proxy of C++ itkVectorUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorUC3_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorUC const &

        """
        return _itkVectorPython.itkVectorUC3_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refUC
        GetVnlVector(self) -> vnl_vectorUC
        """
        return _itkVectorPython.itkVectorUC3_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorUC3

        Parameters
        ----------
        vec: itkVectorUC3 const &

        """
        return _itkVectorPython.itkVectorUC3___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorUC3

        Parameters
        ----------
        vec: itkVectorUC3 const &

        """
        return _itkVectorPython.itkVectorUC3___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorUC3"""
        return _itkVectorPython.itkVectorUC3___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorUC3

        Parameters
        ----------
        vec: itkVectorUC3 const &

        """
        return _itkVectorPython.itkVectorUC3___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorUC3

        Parameters
        ----------
        vec: itkVectorUC3 const &

        """
        return _itkVectorPython.itkVectorUC3___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> unsigned char

        Parameters
        ----------
        other: itkVectorUC3 const &

        __mul__(self, value) -> itkVectorUC3

        Parameters
        ----------
        value: unsigned char const &

        """
        return _itkVectorPython.itkVectorUC3___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorUC3 const &

        """
        return _itkVectorPython.itkVectorUC3___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorUC3 const &

        """
        return _itkVectorPython.itkVectorUC3___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorUC3_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorUC3_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorUC3_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorUC3_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: unsigned char const &

        """
        return _itkVectorPython.itkVectorUC3_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorUC3
        __init__(self, r) -> itkVectorUC3

        Parameters
        ----------
        r: unsigned char const &

        __init__(self, r) -> itkVectorUC3

        Parameters
        ----------
        r: unsigned char const *

        __init__(self, stdArray) -> itkVectorUC3

        Parameters
        ----------
        stdArray: std::array< unsigned char,3 > const &

        __init__(self, arg0) -> itkVectorUC3

        Parameters
        ----------
        arg0: itkVectorUC3 const &

        """
        _itkVectorPython.itkVectorUC3_swiginit(self, _itkVectorPython.new_itkVectorUC3(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorUC3

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> unsigned char

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorUC3___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: unsigned char

        """
        return _itkVectorPython.itkVectorUC3___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorUC3___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorUC3___repr__(self)

# Register itkVectorUC3 in _itkVectorPython:
_itkVectorPython.itkVectorUC3_swigregister(itkVectorUC3)
class itkVectorUC4(itk.itkFixedArrayPython.itkFixedArrayUC4):
    r"""Proxy of C++ itkVectorUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorUC4_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorUC const &

        """
        return _itkVectorPython.itkVectorUC4_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refUC
        GetVnlVector(self) -> vnl_vectorUC
        """
        return _itkVectorPython.itkVectorUC4_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorUC4

        Parameters
        ----------
        vec: itkVectorUC4 const &

        """
        return _itkVectorPython.itkVectorUC4___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorUC4

        Parameters
        ----------
        vec: itkVectorUC4 const &

        """
        return _itkVectorPython.itkVectorUC4___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorUC4"""
        return _itkVectorPython.itkVectorUC4___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorUC4

        Parameters
        ----------
        vec: itkVectorUC4 const &

        """
        return _itkVectorPython.itkVectorUC4___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorUC4

        Parameters
        ----------
        vec: itkVectorUC4 const &

        """
        return _itkVectorPython.itkVectorUC4___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> unsigned char

        Parameters
        ----------
        other: itkVectorUC4 const &

        __mul__(self, value) -> itkVectorUC4

        Parameters
        ----------
        value: unsigned char const &

        """
        return _itkVectorPython.itkVectorUC4___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorUC4 const &

        """
        return _itkVectorPython.itkVectorUC4___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorUC4 const &

        """
        return _itkVectorPython.itkVectorUC4___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorUC4_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorUC4_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorUC4_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorUC4_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: unsigned char const &

        """
        return _itkVectorPython.itkVectorUC4_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorUC4
        __init__(self, r) -> itkVectorUC4

        Parameters
        ----------
        r: unsigned char const &

        __init__(self, r) -> itkVectorUC4

        Parameters
        ----------
        r: unsigned char const *

        __init__(self, stdArray) -> itkVectorUC4

        Parameters
        ----------
        stdArray: std::array< unsigned char,4 > const &

        __init__(self, arg0) -> itkVectorUC4

        Parameters
        ----------
        arg0: itkVectorUC4 const &

        """
        _itkVectorPython.itkVectorUC4_swiginit(self, _itkVectorPython.new_itkVectorUC4(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorUC4

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> unsigned char

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorUC4___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: unsigned char

        """
        return _itkVectorPython.itkVectorUC4___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorUC4___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorUC4___repr__(self)

# Register itkVectorUC4 in _itkVectorPython:
_itkVectorPython.itkVectorUC4_swigregister(itkVectorUC4)
class itkVectorUC5(itk.itkFixedArrayPython.itkFixedArrayUC5):
    r"""Proxy of C++ itkVectorUC5 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorUC5_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorUC const &

        """
        return _itkVectorPython.itkVectorUC5_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refUC
        GetVnlVector(self) -> vnl_vectorUC
        """
        return _itkVectorPython.itkVectorUC5_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorUC5

        Parameters
        ----------
        vec: itkVectorUC5 const &

        """
        return _itkVectorPython.itkVectorUC5___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorUC5

        Parameters
        ----------
        vec: itkVectorUC5 const &

        """
        return _itkVectorPython.itkVectorUC5___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorUC5"""
        return _itkVectorPython.itkVectorUC5___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorUC5

        Parameters
        ----------
        vec: itkVectorUC5 const &

        """
        return _itkVectorPython.itkVectorUC5___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorUC5

        Parameters
        ----------
        vec: itkVectorUC5 const &

        """
        return _itkVectorPython.itkVectorUC5___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> unsigned char

        Parameters
        ----------
        other: itkVectorUC5 const &

        __mul__(self, value) -> itkVectorUC5

        Parameters
        ----------
        value: unsigned char const &

        """
        return _itkVectorPython.itkVectorUC5___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorUC5 const &

        """
        return _itkVectorPython.itkVectorUC5___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorUC5 const &

        """
        return _itkVectorPython.itkVectorUC5___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorUC5_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorUC5_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorUC5_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorUC5_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: unsigned char const &

        """
        return _itkVectorPython.itkVectorUC5_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorUC5
        __init__(self, r) -> itkVectorUC5

        Parameters
        ----------
        r: unsigned char const &

        __init__(self, r) -> itkVectorUC5

        Parameters
        ----------
        r: unsigned char const *

        __init__(self, stdArray) -> itkVectorUC5

        Parameters
        ----------
        stdArray: std::array< unsigned char,5 > const &

        __init__(self, arg0) -> itkVectorUC5

        Parameters
        ----------
        arg0: itkVectorUC5 const &

        """
        _itkVectorPython.itkVectorUC5_swiginit(self, _itkVectorPython.new_itkVectorUC5(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorUC5

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> unsigned char

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorUC5___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: unsigned char

        """
        return _itkVectorPython.itkVectorUC5___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorUC5___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorUC5___repr__(self)

# Register itkVectorUC5 in _itkVectorPython:
_itkVectorPython.itkVectorUC5_swigregister(itkVectorUC5)
class itkVectorUC6(itk.itkFixedArrayPython.itkFixedArrayUC6):
    r"""Proxy of C++ itkVectorUC6 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorUC6_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorUC const &

        """
        return _itkVectorPython.itkVectorUC6_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refUC
        GetVnlVector(self) -> vnl_vectorUC
        """
        return _itkVectorPython.itkVectorUC6_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorUC6

        Parameters
        ----------
        vec: itkVectorUC6 const &

        """
        return _itkVectorPython.itkVectorUC6___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorUC6

        Parameters
        ----------
        vec: itkVectorUC6 const &

        """
        return _itkVectorPython.itkVectorUC6___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorUC6"""
        return _itkVectorPython.itkVectorUC6___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorUC6

        Parameters
        ----------
        vec: itkVectorUC6 const &

        """
        return _itkVectorPython.itkVectorUC6___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorUC6

        Parameters
        ----------
        vec: itkVectorUC6 const &

        """
        return _itkVectorPython.itkVectorUC6___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> unsigned char

        Parameters
        ----------
        other: itkVectorUC6 const &

        __mul__(self, value) -> itkVectorUC6

        Parameters
        ----------
        value: unsigned char const &

        """
        return _itkVectorPython.itkVectorUC6___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorUC6 const &

        """
        return _itkVectorPython.itkVectorUC6___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorUC6 const &

        """
        return _itkVectorPython.itkVectorUC6___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorUC6_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorUC6_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorUC6_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorUC6_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: unsigned char const &

        """
        return _itkVectorPython.itkVectorUC6_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorUC6
        __init__(self, r) -> itkVectorUC6

        Parameters
        ----------
        r: unsigned char const &

        __init__(self, r) -> itkVectorUC6

        Parameters
        ----------
        r: unsigned char const *

        __init__(self, stdArray) -> itkVectorUC6

        Parameters
        ----------
        stdArray: std::array< unsigned char,6 > const &

        __init__(self, arg0) -> itkVectorUC6

        Parameters
        ----------
        arg0: itkVectorUC6 const &

        """
        _itkVectorPython.itkVectorUC6_swiginit(self, _itkVectorPython.new_itkVectorUC6(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorUC6

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> unsigned char

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorUC6___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: unsigned char

        """
        return _itkVectorPython.itkVectorUC6___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorUC6___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorUC6___repr__(self)

# Register itkVectorUC6 in _itkVectorPython:
_itkVectorPython.itkVectorUC6_swigregister(itkVectorUC6)
class itkVectorUS1(itk.itkFixedArrayPython.itkFixedArrayUS1):
    r"""Proxy of C++ itkVectorUS1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorUS1_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorUS const &

        """
        return _itkVectorPython.itkVectorUS1_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refUS
        GetVnlVector(self) -> vnl_vectorUS
        """
        return _itkVectorPython.itkVectorUS1_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorUS1

        Parameters
        ----------
        vec: itkVectorUS1 const &

        """
        return _itkVectorPython.itkVectorUS1___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorUS1

        Parameters
        ----------
        vec: itkVectorUS1 const &

        """
        return _itkVectorPython.itkVectorUS1___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorUS1"""
        return _itkVectorPython.itkVectorUS1___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorUS1

        Parameters
        ----------
        vec: itkVectorUS1 const &

        """
        return _itkVectorPython.itkVectorUS1___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorUS1

        Parameters
        ----------
        vec: itkVectorUS1 const &

        """
        return _itkVectorPython.itkVectorUS1___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> unsigned short

        Parameters
        ----------
        other: itkVectorUS1 const &

        __mul__(self, value) -> itkVectorUS1

        Parameters
        ----------
        value: unsigned short const &

        """
        return _itkVectorPython.itkVectorUS1___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorUS1 const &

        """
        return _itkVectorPython.itkVectorUS1___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorUS1 const &

        """
        return _itkVectorPython.itkVectorUS1___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorUS1_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorUS1_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorUS1_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorUS1_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: unsigned short const &

        """
        return _itkVectorPython.itkVectorUS1_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorUS1
        __init__(self, r) -> itkVectorUS1

        Parameters
        ----------
        r: unsigned short const &

        __init__(self, r) -> itkVectorUS1

        Parameters
        ----------
        r: unsigned short const *

        __init__(self, stdArray) -> itkVectorUS1

        Parameters
        ----------
        stdArray: std::array< unsigned short,1 > const &

        __init__(self, arg0) -> itkVectorUS1

        Parameters
        ----------
        arg0: itkVectorUS1 const &

        """
        _itkVectorPython.itkVectorUS1_swiginit(self, _itkVectorPython.new_itkVectorUS1(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorUS1

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> unsigned short

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorUS1___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: unsigned short

        """
        return _itkVectorPython.itkVectorUS1___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorUS1___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorUS1___repr__(self)

# Register itkVectorUS1 in _itkVectorPython:
_itkVectorPython.itkVectorUS1_swigregister(itkVectorUS1)
class itkVectorUS2(itk.itkFixedArrayPython.itkFixedArrayUS2):
    r"""Proxy of C++ itkVectorUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorUS2_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorUS const &

        """
        return _itkVectorPython.itkVectorUS2_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refUS
        GetVnlVector(self) -> vnl_vectorUS
        """
        return _itkVectorPython.itkVectorUS2_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorUS2

        Parameters
        ----------
        vec: itkVectorUS2 const &

        """
        return _itkVectorPython.itkVectorUS2___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorUS2

        Parameters
        ----------
        vec: itkVectorUS2 const &

        """
        return _itkVectorPython.itkVectorUS2___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorUS2"""
        return _itkVectorPython.itkVectorUS2___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorUS2

        Parameters
        ----------
        vec: itkVectorUS2 const &

        """
        return _itkVectorPython.itkVectorUS2___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorUS2

        Parameters
        ----------
        vec: itkVectorUS2 const &

        """
        return _itkVectorPython.itkVectorUS2___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> unsigned short

        Parameters
        ----------
        other: itkVectorUS2 const &

        __mul__(self, value) -> itkVectorUS2

        Parameters
        ----------
        value: unsigned short const &

        """
        return _itkVectorPython.itkVectorUS2___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorUS2 const &

        """
        return _itkVectorPython.itkVectorUS2___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorUS2 const &

        """
        return _itkVectorPython.itkVectorUS2___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorUS2_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorUS2_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorUS2_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorUS2_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: unsigned short const &

        """
        return _itkVectorPython.itkVectorUS2_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorUS2
        __init__(self, r) -> itkVectorUS2

        Parameters
        ----------
        r: unsigned short const &

        __init__(self, r) -> itkVectorUS2

        Parameters
        ----------
        r: unsigned short const *

        __init__(self, stdArray) -> itkVectorUS2

        Parameters
        ----------
        stdArray: std::array< unsigned short,2 > const &

        __init__(self, arg0) -> itkVectorUS2

        Parameters
        ----------
        arg0: itkVectorUS2 const &

        """
        _itkVectorPython.itkVectorUS2_swiginit(self, _itkVectorPython.new_itkVectorUS2(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorUS2

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> unsigned short

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorUS2___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: unsigned short

        """
        return _itkVectorPython.itkVectorUS2___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorUS2___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorUS2___repr__(self)

# Register itkVectorUS2 in _itkVectorPython:
_itkVectorPython.itkVectorUS2_swigregister(itkVectorUS2)
class itkVectorUS3(itk.itkFixedArrayPython.itkFixedArrayUS3):
    r"""Proxy of C++ itkVectorUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorUS3_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorUS const &

        """
        return _itkVectorPython.itkVectorUS3_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refUS
        GetVnlVector(self) -> vnl_vectorUS
        """
        return _itkVectorPython.itkVectorUS3_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorUS3

        Parameters
        ----------
        vec: itkVectorUS3 const &

        """
        return _itkVectorPython.itkVectorUS3___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorUS3

        Parameters
        ----------
        vec: itkVectorUS3 const &

        """
        return _itkVectorPython.itkVectorUS3___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorUS3"""
        return _itkVectorPython.itkVectorUS3___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorUS3

        Parameters
        ----------
        vec: itkVectorUS3 const &

        """
        return _itkVectorPython.itkVectorUS3___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorUS3

        Parameters
        ----------
        vec: itkVectorUS3 const &

        """
        return _itkVectorPython.itkVectorUS3___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> unsigned short

        Parameters
        ----------
        other: itkVectorUS3 const &

        __mul__(self, value) -> itkVectorUS3

        Parameters
        ----------
        value: unsigned short const &

        """
        return _itkVectorPython.itkVectorUS3___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorUS3 const &

        """
        return _itkVectorPython.itkVectorUS3___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorUS3 const &

        """
        return _itkVectorPython.itkVectorUS3___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorUS3_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorUS3_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorUS3_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorUS3_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: unsigned short const &

        """
        return _itkVectorPython.itkVectorUS3_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorUS3
        __init__(self, r) -> itkVectorUS3

        Parameters
        ----------
        r: unsigned short const &

        __init__(self, r) -> itkVectorUS3

        Parameters
        ----------
        r: unsigned short const *

        __init__(self, stdArray) -> itkVectorUS3

        Parameters
        ----------
        stdArray: std::array< unsigned short,3 > const &

        __init__(self, arg0) -> itkVectorUS3

        Parameters
        ----------
        arg0: itkVectorUS3 const &

        """
        _itkVectorPython.itkVectorUS3_swiginit(self, _itkVectorPython.new_itkVectorUS3(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorUS3

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> unsigned short

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorUS3___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: unsigned short

        """
        return _itkVectorPython.itkVectorUS3___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorUS3___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorUS3___repr__(self)

# Register itkVectorUS3 in _itkVectorPython:
_itkVectorPython.itkVectorUS3_swigregister(itkVectorUS3)
class itkVectorUS4(itk.itkFixedArrayPython.itkFixedArrayUS4):
    r"""Proxy of C++ itkVectorUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorUS4_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorUS const &

        """
        return _itkVectorPython.itkVectorUS4_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refUS
        GetVnlVector(self) -> vnl_vectorUS
        """
        return _itkVectorPython.itkVectorUS4_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorUS4

        Parameters
        ----------
        vec: itkVectorUS4 const &

        """
        return _itkVectorPython.itkVectorUS4___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorUS4

        Parameters
        ----------
        vec: itkVectorUS4 const &

        """
        return _itkVectorPython.itkVectorUS4___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorUS4"""
        return _itkVectorPython.itkVectorUS4___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorUS4

        Parameters
        ----------
        vec: itkVectorUS4 const &

        """
        return _itkVectorPython.itkVectorUS4___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorUS4

        Parameters
        ----------
        vec: itkVectorUS4 const &

        """
        return _itkVectorPython.itkVectorUS4___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> unsigned short

        Parameters
        ----------
        other: itkVectorUS4 const &

        __mul__(self, value) -> itkVectorUS4

        Parameters
        ----------
        value: unsigned short const &

        """
        return _itkVectorPython.itkVectorUS4___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorUS4 const &

        """
        return _itkVectorPython.itkVectorUS4___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorUS4 const &

        """
        return _itkVectorPython.itkVectorUS4___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorUS4_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorUS4_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorUS4_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorUS4_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: unsigned short const &

        """
        return _itkVectorPython.itkVectorUS4_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorUS4
        __init__(self, r) -> itkVectorUS4

        Parameters
        ----------
        r: unsigned short const &

        __init__(self, r) -> itkVectorUS4

        Parameters
        ----------
        r: unsigned short const *

        __init__(self, stdArray) -> itkVectorUS4

        Parameters
        ----------
        stdArray: std::array< unsigned short,4 > const &

        __init__(self, arg0) -> itkVectorUS4

        Parameters
        ----------
        arg0: itkVectorUS4 const &

        """
        _itkVectorPython.itkVectorUS4_swiginit(self, _itkVectorPython.new_itkVectorUS4(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorUS4

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> unsigned short

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorUS4___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: unsigned short

        """
        return _itkVectorPython.itkVectorUS4___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorUS4___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorUS4___repr__(self)

# Register itkVectorUS4 in _itkVectorPython:
_itkVectorPython.itkVectorUS4_swigregister(itkVectorUS4)
class itkVectorUS5(itk.itkFixedArrayPython.itkFixedArrayUS5):
    r"""Proxy of C++ itkVectorUS5 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorUS5_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorUS const &

        """
        return _itkVectorPython.itkVectorUS5_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refUS
        GetVnlVector(self) -> vnl_vectorUS
        """
        return _itkVectorPython.itkVectorUS5_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorUS5

        Parameters
        ----------
        vec: itkVectorUS5 const &

        """
        return _itkVectorPython.itkVectorUS5___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorUS5

        Parameters
        ----------
        vec: itkVectorUS5 const &

        """
        return _itkVectorPython.itkVectorUS5___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorUS5"""
        return _itkVectorPython.itkVectorUS5___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorUS5

        Parameters
        ----------
        vec: itkVectorUS5 const &

        """
        return _itkVectorPython.itkVectorUS5___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorUS5

        Parameters
        ----------
        vec: itkVectorUS5 const &

        """
        return _itkVectorPython.itkVectorUS5___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> unsigned short

        Parameters
        ----------
        other: itkVectorUS5 const &

        __mul__(self, value) -> itkVectorUS5

        Parameters
        ----------
        value: unsigned short const &

        """
        return _itkVectorPython.itkVectorUS5___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorUS5 const &

        """
        return _itkVectorPython.itkVectorUS5___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorUS5 const &

        """
        return _itkVectorPython.itkVectorUS5___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorUS5_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorUS5_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorUS5_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorUS5_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: unsigned short const &

        """
        return _itkVectorPython.itkVectorUS5_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorUS5
        __init__(self, r) -> itkVectorUS5

        Parameters
        ----------
        r: unsigned short const &

        __init__(self, r) -> itkVectorUS5

        Parameters
        ----------
        r: unsigned short const *

        __init__(self, stdArray) -> itkVectorUS5

        Parameters
        ----------
        stdArray: std::array< unsigned short,5 > const &

        __init__(self, arg0) -> itkVectorUS5

        Parameters
        ----------
        arg0: itkVectorUS5 const &

        """
        _itkVectorPython.itkVectorUS5_swiginit(self, _itkVectorPython.new_itkVectorUS5(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorUS5

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> unsigned short

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorUS5___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: unsigned short

        """
        return _itkVectorPython.itkVectorUS5___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorUS5___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorUS5___repr__(self)

# Register itkVectorUS5 in _itkVectorPython:
_itkVectorPython.itkVectorUS5_swigregister(itkVectorUS5)
class itkVectorUS6(itk.itkFixedArrayPython.itkFixedArrayUS6):
    r"""Proxy of C++ itkVectorUS6 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorPython.itkVectorUS6_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorUS const &

        """
        return _itkVectorPython.itkVectorUS6_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refUS
        GetVnlVector(self) -> vnl_vectorUS
        """
        return _itkVectorPython.itkVectorUS6_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectorUS6

        Parameters
        ----------
        vec: itkVectorUS6 const &

        """
        return _itkVectorPython.itkVectorUS6___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectorUS6

        Parameters
        ----------
        vec: itkVectorUS6 const &

        """
        return _itkVectorPython.itkVectorUS6___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectorUS6"""
        return _itkVectorPython.itkVectorUS6___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectorUS6

        Parameters
        ----------
        vec: itkVectorUS6 const &

        """
        return _itkVectorPython.itkVectorUS6___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectorUS6

        Parameters
        ----------
        vec: itkVectorUS6 const &

        """
        return _itkVectorPython.itkVectorUS6___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> unsigned short

        Parameters
        ----------
        other: itkVectorUS6 const &

        __mul__(self, value) -> itkVectorUS6

        Parameters
        ----------
        value: unsigned short const &

        """
        return _itkVectorPython.itkVectorUS6___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectorUS6 const &

        """
        return _itkVectorPython.itkVectorUS6___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectorUS6 const &

        """
        return _itkVectorPython.itkVectorUS6___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorPython.itkVectorUS6_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorPython.itkVectorUS6_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorPython.itkVectorUS6_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorPython.itkVectorUS6_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: unsigned short const &

        """
        return _itkVectorPython.itkVectorUS6_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectorUS6
        __init__(self, r) -> itkVectorUS6

        Parameters
        ----------
        r: unsigned short const &

        __init__(self, r) -> itkVectorUS6

        Parameters
        ----------
        r: unsigned short const *

        __init__(self, stdArray) -> itkVectorUS6

        Parameters
        ----------
        stdArray: std::array< unsigned short,6 > const &

        __init__(self, arg0) -> itkVectorUS6

        Parameters
        ----------
        arg0: itkVectorUS6 const &

        """
        _itkVectorPython.itkVectorUS6_swiginit(self, _itkVectorPython.new_itkVectorUS6(*args))
    __swig_destroy__ = _itkVectorPython.delete_itkVectorUS6

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> unsigned short

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorPython.itkVectorUS6___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: unsigned short

        """
        return _itkVectorPython.itkVectorUS6___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorPython.itkVectorUS6___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorPython.itkVectorUS6___repr__(self)

# Register itkVectorUS6 in _itkVectorPython:
_itkVectorPython.itkVectorUS6_swigregister(itkVectorUS6)

