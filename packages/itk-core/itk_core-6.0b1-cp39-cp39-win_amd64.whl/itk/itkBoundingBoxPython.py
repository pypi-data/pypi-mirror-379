# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBoundingBoxPython
else:
    import _itkBoundingBoxPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkMapContainerPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkPointPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkVectorContainerPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkArrayPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython

def itkBoundingBoxULL2DMCULLPD2_New():
    return itkBoundingBoxULL2DMCULLPD2.New()

class itkBoundingBoxULL2DMCULLPD2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBoundingBoxULL2DMCULLPD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundingBoxULL2DMCULLPD2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2DMCULLPD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundingBoxULL2DMCULLPD2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2DMCULLPD2_Clone(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULLPD2 const *

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL2DMCULLPD2_SetPoints(self, arg0)

    def GetPoints(self):
        r"""GetPoints(self) -> itkMapContainerULLPD2"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2DMCULLPD2_GetPoints(self)

    def ComputeCorners(self):
        r"""ComputeCorners(self) -> std::array< itkPointD2,4 >"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2DMCULLPD2_ComputeCorners(self)

    def ComputeBoundingBox(self):
        r"""ComputeBoundingBox(self) -> bool"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2DMCULLPD2_ComputeBoundingBox(self)

    def GetBounds(self):
        r"""GetBounds(self) -> itkFixedArrayD4"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2DMCULLPD2_GetBounds(self)

    def GetCenter(self):
        r"""GetCenter(self) -> itkPointD2"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2DMCULLPD2_GetCenter(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> itkPointD2"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2DMCULLPD2_GetMinimum(self)

    def SetMinimum(self, arg0):
        r"""
        SetMinimum(self, arg0)

        Parameters
        ----------
        arg0: itkPointD2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL2DMCULLPD2_SetMinimum(self, arg0)

    def GetMaximum(self):
        r"""GetMaximum(self) -> itkPointD2"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2DMCULLPD2_GetMaximum(self)

    def SetMaximum(self, arg0):
        r"""
        SetMaximum(self, arg0)

        Parameters
        ----------
        arg0: itkPointD2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL2DMCULLPD2_SetMaximum(self, arg0)

    def ConsiderPoint(self, arg0):
        r"""
        ConsiderPoint(self, arg0)

        Parameters
        ----------
        arg0: itkPointD2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL2DMCULLPD2_ConsiderPoint(self, arg0)

    def GetDiagonalLength2(self):
        r"""GetDiagonalLength2(self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2DMCULLPD2_GetDiagonalLength2(self)

    def IsInside(self, arg0):
        r"""
        IsInside(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointD2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL2DMCULLPD2_IsInside(self, arg0)

    def DeepCopy(self):
        r"""DeepCopy(self) -> itkBoundingBoxULL2DMCULLPD2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2DMCULLPD2_DeepCopy(self)
    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxULL2DMCULLPD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundingBoxULL2DMCULLPD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL2DMCULLPD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxULL2DMCULLPD2

        Create a new object of the class itkBoundingBoxULL2DMCULLPD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxULL2DMCULLPD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxULL2DMCULLPD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxULL2DMCULLPD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxULL2DMCULLPD2 in _itkBoundingBoxPython:
_itkBoundingBoxPython.itkBoundingBoxULL2DMCULLPD2_swigregister(itkBoundingBoxULL2DMCULLPD2)

def itkBoundingBoxULL2DVCULLPD2_New():
    return itkBoundingBoxULL2DVCULLPD2.New()

class itkBoundingBoxULL2DVCULLPD2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBoundingBoxULL2DVCULLPD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundingBoxULL2DVCULLPD2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2DVCULLPD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundingBoxULL2DVCULLPD2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2DVCULLPD2_Clone(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULLPD2 const *

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL2DVCULLPD2_SetPoints(self, arg0)

    def GetPoints(self):
        r"""GetPoints(self) -> itkVectorContainerULLPD2"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2DVCULLPD2_GetPoints(self)

    def ComputeCorners(self):
        r"""ComputeCorners(self) -> std::array< itkPointD2,4 >"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2DVCULLPD2_ComputeCorners(self)

    def ComputeBoundingBox(self):
        r"""ComputeBoundingBox(self) -> bool"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2DVCULLPD2_ComputeBoundingBox(self)

    def GetBounds(self):
        r"""GetBounds(self) -> itkFixedArrayD4"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2DVCULLPD2_GetBounds(self)

    def GetCenter(self):
        r"""GetCenter(self) -> itkPointD2"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2DVCULLPD2_GetCenter(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> itkPointD2"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2DVCULLPD2_GetMinimum(self)

    def SetMinimum(self, arg0):
        r"""
        SetMinimum(self, arg0)

        Parameters
        ----------
        arg0: itkPointD2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL2DVCULLPD2_SetMinimum(self, arg0)

    def GetMaximum(self):
        r"""GetMaximum(self) -> itkPointD2"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2DVCULLPD2_GetMaximum(self)

    def SetMaximum(self, arg0):
        r"""
        SetMaximum(self, arg0)

        Parameters
        ----------
        arg0: itkPointD2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL2DVCULLPD2_SetMaximum(self, arg0)

    def ConsiderPoint(self, arg0):
        r"""
        ConsiderPoint(self, arg0)

        Parameters
        ----------
        arg0: itkPointD2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL2DVCULLPD2_ConsiderPoint(self, arg0)

    def GetDiagonalLength2(self):
        r"""GetDiagonalLength2(self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2DVCULLPD2_GetDiagonalLength2(self)

    def IsInside(self, arg0):
        r"""
        IsInside(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointD2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL2DVCULLPD2_IsInside(self, arg0)

    def DeepCopy(self):
        r"""DeepCopy(self) -> itkBoundingBoxULL2DVCULLPD2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2DVCULLPD2_DeepCopy(self)
    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxULL2DVCULLPD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundingBoxULL2DVCULLPD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL2DVCULLPD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxULL2DVCULLPD2

        Create a new object of the class itkBoundingBoxULL2DVCULLPD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxULL2DVCULLPD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxULL2DVCULLPD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxULL2DVCULLPD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxULL2DVCULLPD2 in _itkBoundingBoxPython:
_itkBoundingBoxPython.itkBoundingBoxULL2DVCULLPD2_swigregister(itkBoundingBoxULL2DVCULLPD2)

def itkBoundingBoxULL2FMCULLPF2_New():
    return itkBoundingBoxULL2FMCULLPF2.New()

class itkBoundingBoxULL2FMCULLPF2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBoundingBoxULL2FMCULLPF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundingBoxULL2FMCULLPF2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2FMCULLPF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundingBoxULL2FMCULLPF2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2FMCULLPF2_Clone(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULLPF2 const *

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL2FMCULLPF2_SetPoints(self, arg0)

    def GetPoints(self):
        r"""GetPoints(self) -> itkMapContainerULLPF2"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2FMCULLPF2_GetPoints(self)

    def ComputeCorners(self):
        r"""ComputeCorners(self) -> std::array< itkPointF2,4 >"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2FMCULLPF2_ComputeCorners(self)

    def ComputeBoundingBox(self):
        r"""ComputeBoundingBox(self) -> bool"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2FMCULLPF2_ComputeBoundingBox(self)

    def GetBounds(self):
        r"""GetBounds(self) -> itkFixedArrayF4"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2FMCULLPF2_GetBounds(self)

    def GetCenter(self):
        r"""GetCenter(self) -> itkPointF2"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2FMCULLPF2_GetCenter(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> itkPointF2"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2FMCULLPF2_GetMinimum(self)

    def SetMinimum(self, arg0):
        r"""
        SetMinimum(self, arg0)

        Parameters
        ----------
        arg0: itkPointF2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL2FMCULLPF2_SetMinimum(self, arg0)

    def GetMaximum(self):
        r"""GetMaximum(self) -> itkPointF2"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2FMCULLPF2_GetMaximum(self)

    def SetMaximum(self, arg0):
        r"""
        SetMaximum(self, arg0)

        Parameters
        ----------
        arg0: itkPointF2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL2FMCULLPF2_SetMaximum(self, arg0)

    def ConsiderPoint(self, arg0):
        r"""
        ConsiderPoint(self, arg0)

        Parameters
        ----------
        arg0: itkPointF2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL2FMCULLPF2_ConsiderPoint(self, arg0)

    def GetDiagonalLength2(self):
        r"""GetDiagonalLength2(self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2FMCULLPF2_GetDiagonalLength2(self)

    def IsInside(self, arg0):
        r"""
        IsInside(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointF2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL2FMCULLPF2_IsInside(self, arg0)

    def DeepCopy(self):
        r"""DeepCopy(self) -> itkBoundingBoxULL2FMCULLPF2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2FMCULLPF2_DeepCopy(self)
    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxULL2FMCULLPF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundingBoxULL2FMCULLPF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL2FMCULLPF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxULL2FMCULLPF2

        Create a new object of the class itkBoundingBoxULL2FMCULLPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxULL2FMCULLPF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxULL2FMCULLPF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxULL2FMCULLPF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxULL2FMCULLPF2 in _itkBoundingBoxPython:
_itkBoundingBoxPython.itkBoundingBoxULL2FMCULLPF2_swigregister(itkBoundingBoxULL2FMCULLPF2)

def itkBoundingBoxULL2FVCULLPF2_New():
    return itkBoundingBoxULL2FVCULLPF2.New()

class itkBoundingBoxULL2FVCULLPF2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBoundingBoxULL2FVCULLPF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundingBoxULL2FVCULLPF2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2FVCULLPF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundingBoxULL2FVCULLPF2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2FVCULLPF2_Clone(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULLPF2 const *

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL2FVCULLPF2_SetPoints(self, arg0)

    def GetPoints(self):
        r"""GetPoints(self) -> itkVectorContainerULLPF2"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2FVCULLPF2_GetPoints(self)

    def ComputeCorners(self):
        r"""ComputeCorners(self) -> std::array< itkPointF2,4 >"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2FVCULLPF2_ComputeCorners(self)

    def ComputeBoundingBox(self):
        r"""ComputeBoundingBox(self) -> bool"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2FVCULLPF2_ComputeBoundingBox(self)

    def GetBounds(self):
        r"""GetBounds(self) -> itkFixedArrayF4"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2FVCULLPF2_GetBounds(self)

    def GetCenter(self):
        r"""GetCenter(self) -> itkPointF2"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2FVCULLPF2_GetCenter(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> itkPointF2"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2FVCULLPF2_GetMinimum(self)

    def SetMinimum(self, arg0):
        r"""
        SetMinimum(self, arg0)

        Parameters
        ----------
        arg0: itkPointF2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL2FVCULLPF2_SetMinimum(self, arg0)

    def GetMaximum(self):
        r"""GetMaximum(self) -> itkPointF2"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2FVCULLPF2_GetMaximum(self)

    def SetMaximum(self, arg0):
        r"""
        SetMaximum(self, arg0)

        Parameters
        ----------
        arg0: itkPointF2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL2FVCULLPF2_SetMaximum(self, arg0)

    def ConsiderPoint(self, arg0):
        r"""
        ConsiderPoint(self, arg0)

        Parameters
        ----------
        arg0: itkPointF2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL2FVCULLPF2_ConsiderPoint(self, arg0)

    def GetDiagonalLength2(self):
        r"""GetDiagonalLength2(self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2FVCULLPF2_GetDiagonalLength2(self)

    def IsInside(self, arg0):
        r"""
        IsInside(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointF2 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL2FVCULLPF2_IsInside(self, arg0)

    def DeepCopy(self):
        r"""DeepCopy(self) -> itkBoundingBoxULL2FVCULLPF2_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL2FVCULLPF2_DeepCopy(self)
    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxULL2FVCULLPF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundingBoxULL2FVCULLPF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL2FVCULLPF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxULL2FVCULLPF2

        Create a new object of the class itkBoundingBoxULL2FVCULLPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxULL2FVCULLPF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxULL2FVCULLPF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxULL2FVCULLPF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxULL2FVCULLPF2 in _itkBoundingBoxPython:
_itkBoundingBoxPython.itkBoundingBoxULL2FVCULLPF2_swigregister(itkBoundingBoxULL2FVCULLPF2)

def itkBoundingBoxULL3DMCULLPD3_New():
    return itkBoundingBoxULL3DMCULLPD3.New()

class itkBoundingBoxULL3DMCULLPD3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBoundingBoxULL3DMCULLPD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundingBoxULL3DMCULLPD3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3DMCULLPD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundingBoxULL3DMCULLPD3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3DMCULLPD3_Clone(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULLPD3 const *

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL3DMCULLPD3_SetPoints(self, arg0)

    def GetPoints(self):
        r"""GetPoints(self) -> itkMapContainerULLPD3"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3DMCULLPD3_GetPoints(self)

    def ComputeCorners(self):
        r"""ComputeCorners(self) -> std::array< itkPointD3,8 >"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3DMCULLPD3_ComputeCorners(self)

    def ComputeBoundingBox(self):
        r"""ComputeBoundingBox(self) -> bool"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3DMCULLPD3_ComputeBoundingBox(self)

    def GetBounds(self):
        r"""GetBounds(self) -> itkFixedArrayD6"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3DMCULLPD3_GetBounds(self)

    def GetCenter(self):
        r"""GetCenter(self) -> itkPointD3"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3DMCULLPD3_GetCenter(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> itkPointD3"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3DMCULLPD3_GetMinimum(self)

    def SetMinimum(self, arg0):
        r"""
        SetMinimum(self, arg0)

        Parameters
        ----------
        arg0: itkPointD3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL3DMCULLPD3_SetMinimum(self, arg0)

    def GetMaximum(self):
        r"""GetMaximum(self) -> itkPointD3"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3DMCULLPD3_GetMaximum(self)

    def SetMaximum(self, arg0):
        r"""
        SetMaximum(self, arg0)

        Parameters
        ----------
        arg0: itkPointD3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL3DMCULLPD3_SetMaximum(self, arg0)

    def ConsiderPoint(self, arg0):
        r"""
        ConsiderPoint(self, arg0)

        Parameters
        ----------
        arg0: itkPointD3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL3DMCULLPD3_ConsiderPoint(self, arg0)

    def GetDiagonalLength2(self):
        r"""GetDiagonalLength2(self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3DMCULLPD3_GetDiagonalLength2(self)

    def IsInside(self, arg0):
        r"""
        IsInside(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointD3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL3DMCULLPD3_IsInside(self, arg0)

    def DeepCopy(self):
        r"""DeepCopy(self) -> itkBoundingBoxULL3DMCULLPD3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3DMCULLPD3_DeepCopy(self)
    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxULL3DMCULLPD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundingBoxULL3DMCULLPD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL3DMCULLPD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxULL3DMCULLPD3

        Create a new object of the class itkBoundingBoxULL3DMCULLPD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxULL3DMCULLPD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxULL3DMCULLPD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxULL3DMCULLPD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxULL3DMCULLPD3 in _itkBoundingBoxPython:
_itkBoundingBoxPython.itkBoundingBoxULL3DMCULLPD3_swigregister(itkBoundingBoxULL3DMCULLPD3)

def itkBoundingBoxULL3DVCULLPD3_New():
    return itkBoundingBoxULL3DVCULLPD3.New()

class itkBoundingBoxULL3DVCULLPD3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBoundingBoxULL3DVCULLPD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundingBoxULL3DVCULLPD3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3DVCULLPD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundingBoxULL3DVCULLPD3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3DVCULLPD3_Clone(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULLPD3 const *

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL3DVCULLPD3_SetPoints(self, arg0)

    def GetPoints(self):
        r"""GetPoints(self) -> itkVectorContainerULLPD3"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3DVCULLPD3_GetPoints(self)

    def ComputeCorners(self):
        r"""ComputeCorners(self) -> std::array< itkPointD3,8 >"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3DVCULLPD3_ComputeCorners(self)

    def ComputeBoundingBox(self):
        r"""ComputeBoundingBox(self) -> bool"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3DVCULLPD3_ComputeBoundingBox(self)

    def GetBounds(self):
        r"""GetBounds(self) -> itkFixedArrayD6"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3DVCULLPD3_GetBounds(self)

    def GetCenter(self):
        r"""GetCenter(self) -> itkPointD3"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3DVCULLPD3_GetCenter(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> itkPointD3"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3DVCULLPD3_GetMinimum(self)

    def SetMinimum(self, arg0):
        r"""
        SetMinimum(self, arg0)

        Parameters
        ----------
        arg0: itkPointD3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL3DVCULLPD3_SetMinimum(self, arg0)

    def GetMaximum(self):
        r"""GetMaximum(self) -> itkPointD3"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3DVCULLPD3_GetMaximum(self)

    def SetMaximum(self, arg0):
        r"""
        SetMaximum(self, arg0)

        Parameters
        ----------
        arg0: itkPointD3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL3DVCULLPD3_SetMaximum(self, arg0)

    def ConsiderPoint(self, arg0):
        r"""
        ConsiderPoint(self, arg0)

        Parameters
        ----------
        arg0: itkPointD3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL3DVCULLPD3_ConsiderPoint(self, arg0)

    def GetDiagonalLength2(self):
        r"""GetDiagonalLength2(self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3DVCULLPD3_GetDiagonalLength2(self)

    def IsInside(self, arg0):
        r"""
        IsInside(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointD3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL3DVCULLPD3_IsInside(self, arg0)

    def DeepCopy(self):
        r"""DeepCopy(self) -> itkBoundingBoxULL3DVCULLPD3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3DVCULLPD3_DeepCopy(self)
    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxULL3DVCULLPD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundingBoxULL3DVCULLPD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL3DVCULLPD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxULL3DVCULLPD3

        Create a new object of the class itkBoundingBoxULL3DVCULLPD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxULL3DVCULLPD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxULL3DVCULLPD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxULL3DVCULLPD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxULL3DVCULLPD3 in _itkBoundingBoxPython:
_itkBoundingBoxPython.itkBoundingBoxULL3DVCULLPD3_swigregister(itkBoundingBoxULL3DVCULLPD3)

def itkBoundingBoxULL3FMCULLPF3_New():
    return itkBoundingBoxULL3FMCULLPF3.New()

class itkBoundingBoxULL3FMCULLPF3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBoundingBoxULL3FMCULLPF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundingBoxULL3FMCULLPF3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3FMCULLPF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundingBoxULL3FMCULLPF3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3FMCULLPF3_Clone(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULLPF3 const *

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL3FMCULLPF3_SetPoints(self, arg0)

    def GetPoints(self):
        r"""GetPoints(self) -> itkMapContainerULLPF3"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3FMCULLPF3_GetPoints(self)

    def ComputeCorners(self):
        r"""ComputeCorners(self) -> std::array< itkPointF3,8 >"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3FMCULLPF3_ComputeCorners(self)

    def ComputeBoundingBox(self):
        r"""ComputeBoundingBox(self) -> bool"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3FMCULLPF3_ComputeBoundingBox(self)

    def GetBounds(self):
        r"""GetBounds(self) -> itkFixedArrayF6"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3FMCULLPF3_GetBounds(self)

    def GetCenter(self):
        r"""GetCenter(self) -> itkPointF3"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3FMCULLPF3_GetCenter(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> itkPointF3"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3FMCULLPF3_GetMinimum(self)

    def SetMinimum(self, arg0):
        r"""
        SetMinimum(self, arg0)

        Parameters
        ----------
        arg0: itkPointF3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL3FMCULLPF3_SetMinimum(self, arg0)

    def GetMaximum(self):
        r"""GetMaximum(self) -> itkPointF3"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3FMCULLPF3_GetMaximum(self)

    def SetMaximum(self, arg0):
        r"""
        SetMaximum(self, arg0)

        Parameters
        ----------
        arg0: itkPointF3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL3FMCULLPF3_SetMaximum(self, arg0)

    def ConsiderPoint(self, arg0):
        r"""
        ConsiderPoint(self, arg0)

        Parameters
        ----------
        arg0: itkPointF3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL3FMCULLPF3_ConsiderPoint(self, arg0)

    def GetDiagonalLength2(self):
        r"""GetDiagonalLength2(self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3FMCULLPF3_GetDiagonalLength2(self)

    def IsInside(self, arg0):
        r"""
        IsInside(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointF3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL3FMCULLPF3_IsInside(self, arg0)

    def DeepCopy(self):
        r"""DeepCopy(self) -> itkBoundingBoxULL3FMCULLPF3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3FMCULLPF3_DeepCopy(self)
    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxULL3FMCULLPF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundingBoxULL3FMCULLPF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL3FMCULLPF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxULL3FMCULLPF3

        Create a new object of the class itkBoundingBoxULL3FMCULLPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxULL3FMCULLPF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxULL3FMCULLPF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxULL3FMCULLPF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxULL3FMCULLPF3 in _itkBoundingBoxPython:
_itkBoundingBoxPython.itkBoundingBoxULL3FMCULLPF3_swigregister(itkBoundingBoxULL3FMCULLPF3)

def itkBoundingBoxULL3FVCULLPF3_New():
    return itkBoundingBoxULL3FVCULLPF3.New()

class itkBoundingBoxULL3FVCULLPF3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBoundingBoxULL3FVCULLPF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundingBoxULL3FVCULLPF3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3FVCULLPF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundingBoxULL3FVCULLPF3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3FVCULLPF3_Clone(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULLPF3 const *

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL3FVCULLPF3_SetPoints(self, arg0)

    def GetPoints(self):
        r"""GetPoints(self) -> itkVectorContainerULLPF3"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3FVCULLPF3_GetPoints(self)

    def ComputeCorners(self):
        r"""ComputeCorners(self) -> std::array< itkPointF3,8 >"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3FVCULLPF3_ComputeCorners(self)

    def ComputeBoundingBox(self):
        r"""ComputeBoundingBox(self) -> bool"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3FVCULLPF3_ComputeBoundingBox(self)

    def GetBounds(self):
        r"""GetBounds(self) -> itkFixedArrayF6"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3FVCULLPF3_GetBounds(self)

    def GetCenter(self):
        r"""GetCenter(self) -> itkPointF3"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3FVCULLPF3_GetCenter(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> itkPointF3"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3FVCULLPF3_GetMinimum(self)

    def SetMinimum(self, arg0):
        r"""
        SetMinimum(self, arg0)

        Parameters
        ----------
        arg0: itkPointF3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL3FVCULLPF3_SetMinimum(self, arg0)

    def GetMaximum(self):
        r"""GetMaximum(self) -> itkPointF3"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3FVCULLPF3_GetMaximum(self)

    def SetMaximum(self, arg0):
        r"""
        SetMaximum(self, arg0)

        Parameters
        ----------
        arg0: itkPointF3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL3FVCULLPF3_SetMaximum(self, arg0)

    def ConsiderPoint(self, arg0):
        r"""
        ConsiderPoint(self, arg0)

        Parameters
        ----------
        arg0: itkPointF3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL3FVCULLPF3_ConsiderPoint(self, arg0)

    def GetDiagonalLength2(self):
        r"""GetDiagonalLength2(self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3FVCULLPF3_GetDiagonalLength2(self)

    def IsInside(self, arg0):
        r"""
        IsInside(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointF3 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL3FVCULLPF3_IsInside(self, arg0)

    def DeepCopy(self):
        r"""DeepCopy(self) -> itkBoundingBoxULL3FVCULLPF3_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL3FVCULLPF3_DeepCopy(self)
    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxULL3FVCULLPF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundingBoxULL3FVCULLPF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL3FVCULLPF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxULL3FVCULLPF3

        Create a new object of the class itkBoundingBoxULL3FVCULLPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxULL3FVCULLPF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxULL3FVCULLPF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxULL3FVCULLPF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxULL3FVCULLPF3 in _itkBoundingBoxPython:
_itkBoundingBoxPython.itkBoundingBoxULL3FVCULLPF3_swigregister(itkBoundingBoxULL3FVCULLPF3)

def itkBoundingBoxULL4DMCULLPD4_New():
    return itkBoundingBoxULL4DMCULLPD4.New()

class itkBoundingBoxULL4DMCULLPD4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBoundingBoxULL4DMCULLPD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundingBoxULL4DMCULLPD4_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4DMCULLPD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundingBoxULL4DMCULLPD4_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4DMCULLPD4_Clone(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULLPD4 const *

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL4DMCULLPD4_SetPoints(self, arg0)

    def GetPoints(self):
        r"""GetPoints(self) -> itkMapContainerULLPD4"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4DMCULLPD4_GetPoints(self)

    def ComputeCorners(self):
        r"""ComputeCorners(self) -> std::array< itkPointD4,16 >"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4DMCULLPD4_ComputeCorners(self)

    def ComputeBoundingBox(self):
        r"""ComputeBoundingBox(self) -> bool"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4DMCULLPD4_ComputeBoundingBox(self)

    def GetBounds(self):
        r"""GetBounds(self) -> itkFixedArrayD8"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4DMCULLPD4_GetBounds(self)

    def GetCenter(self):
        r"""GetCenter(self) -> itkPointD4"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4DMCULLPD4_GetCenter(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> itkPointD4"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4DMCULLPD4_GetMinimum(self)

    def SetMinimum(self, arg0):
        r"""
        SetMinimum(self, arg0)

        Parameters
        ----------
        arg0: itkPointD4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL4DMCULLPD4_SetMinimum(self, arg0)

    def GetMaximum(self):
        r"""GetMaximum(self) -> itkPointD4"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4DMCULLPD4_GetMaximum(self)

    def SetMaximum(self, arg0):
        r"""
        SetMaximum(self, arg0)

        Parameters
        ----------
        arg0: itkPointD4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL4DMCULLPD4_SetMaximum(self, arg0)

    def ConsiderPoint(self, arg0):
        r"""
        ConsiderPoint(self, arg0)

        Parameters
        ----------
        arg0: itkPointD4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL4DMCULLPD4_ConsiderPoint(self, arg0)

    def GetDiagonalLength2(self):
        r"""GetDiagonalLength2(self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4DMCULLPD4_GetDiagonalLength2(self)

    def IsInside(self, arg0):
        r"""
        IsInside(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointD4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL4DMCULLPD4_IsInside(self, arg0)

    def DeepCopy(self):
        r"""DeepCopy(self) -> itkBoundingBoxULL4DMCULLPD4_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4DMCULLPD4_DeepCopy(self)
    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxULL4DMCULLPD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundingBoxULL4DMCULLPD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL4DMCULLPD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxULL4DMCULLPD4

        Create a new object of the class itkBoundingBoxULL4DMCULLPD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxULL4DMCULLPD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxULL4DMCULLPD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxULL4DMCULLPD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxULL4DMCULLPD4 in _itkBoundingBoxPython:
_itkBoundingBoxPython.itkBoundingBoxULL4DMCULLPD4_swigregister(itkBoundingBoxULL4DMCULLPD4)

def itkBoundingBoxULL4DVCULLPD4_New():
    return itkBoundingBoxULL4DVCULLPD4.New()

class itkBoundingBoxULL4DVCULLPD4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBoundingBoxULL4DVCULLPD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundingBoxULL4DVCULLPD4_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4DVCULLPD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundingBoxULL4DVCULLPD4_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4DVCULLPD4_Clone(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULLPD4 const *

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL4DVCULLPD4_SetPoints(self, arg0)

    def GetPoints(self):
        r"""GetPoints(self) -> itkVectorContainerULLPD4"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4DVCULLPD4_GetPoints(self)

    def ComputeCorners(self):
        r"""ComputeCorners(self) -> std::array< itkPointD4,16 >"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4DVCULLPD4_ComputeCorners(self)

    def ComputeBoundingBox(self):
        r"""ComputeBoundingBox(self) -> bool"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4DVCULLPD4_ComputeBoundingBox(self)

    def GetBounds(self):
        r"""GetBounds(self) -> itkFixedArrayD8"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4DVCULLPD4_GetBounds(self)

    def GetCenter(self):
        r"""GetCenter(self) -> itkPointD4"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4DVCULLPD4_GetCenter(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> itkPointD4"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4DVCULLPD4_GetMinimum(self)

    def SetMinimum(self, arg0):
        r"""
        SetMinimum(self, arg0)

        Parameters
        ----------
        arg0: itkPointD4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL4DVCULLPD4_SetMinimum(self, arg0)

    def GetMaximum(self):
        r"""GetMaximum(self) -> itkPointD4"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4DVCULLPD4_GetMaximum(self)

    def SetMaximum(self, arg0):
        r"""
        SetMaximum(self, arg0)

        Parameters
        ----------
        arg0: itkPointD4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL4DVCULLPD4_SetMaximum(self, arg0)

    def ConsiderPoint(self, arg0):
        r"""
        ConsiderPoint(self, arg0)

        Parameters
        ----------
        arg0: itkPointD4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL4DVCULLPD4_ConsiderPoint(self, arg0)

    def GetDiagonalLength2(self):
        r"""GetDiagonalLength2(self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4DVCULLPD4_GetDiagonalLength2(self)

    def IsInside(self, arg0):
        r"""
        IsInside(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointD4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL4DVCULLPD4_IsInside(self, arg0)

    def DeepCopy(self):
        r"""DeepCopy(self) -> itkBoundingBoxULL4DVCULLPD4_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4DVCULLPD4_DeepCopy(self)
    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxULL4DVCULLPD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundingBoxULL4DVCULLPD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL4DVCULLPD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxULL4DVCULLPD4

        Create a new object of the class itkBoundingBoxULL4DVCULLPD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxULL4DVCULLPD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxULL4DVCULLPD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxULL4DVCULLPD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxULL4DVCULLPD4 in _itkBoundingBoxPython:
_itkBoundingBoxPython.itkBoundingBoxULL4DVCULLPD4_swigregister(itkBoundingBoxULL4DVCULLPD4)

def itkBoundingBoxULL4FMCULLPF4_New():
    return itkBoundingBoxULL4FMCULLPF4.New()

class itkBoundingBoxULL4FMCULLPF4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBoundingBoxULL4FMCULLPF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundingBoxULL4FMCULLPF4_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4FMCULLPF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundingBoxULL4FMCULLPF4_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4FMCULLPF4_Clone(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkMapContainerULLPF4 const *

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL4FMCULLPF4_SetPoints(self, arg0)

    def GetPoints(self):
        r"""GetPoints(self) -> itkMapContainerULLPF4"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4FMCULLPF4_GetPoints(self)

    def ComputeCorners(self):
        r"""ComputeCorners(self) -> std::array< itkPointF4,16 >"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4FMCULLPF4_ComputeCorners(self)

    def ComputeBoundingBox(self):
        r"""ComputeBoundingBox(self) -> bool"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4FMCULLPF4_ComputeBoundingBox(self)

    def GetBounds(self):
        r"""GetBounds(self) -> itkFixedArrayF8"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4FMCULLPF4_GetBounds(self)

    def GetCenter(self):
        r"""GetCenter(self) -> itkPointF4"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4FMCULLPF4_GetCenter(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> itkPointF4"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4FMCULLPF4_GetMinimum(self)

    def SetMinimum(self, arg0):
        r"""
        SetMinimum(self, arg0)

        Parameters
        ----------
        arg0: itkPointF4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL4FMCULLPF4_SetMinimum(self, arg0)

    def GetMaximum(self):
        r"""GetMaximum(self) -> itkPointF4"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4FMCULLPF4_GetMaximum(self)

    def SetMaximum(self, arg0):
        r"""
        SetMaximum(self, arg0)

        Parameters
        ----------
        arg0: itkPointF4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL4FMCULLPF4_SetMaximum(self, arg0)

    def ConsiderPoint(self, arg0):
        r"""
        ConsiderPoint(self, arg0)

        Parameters
        ----------
        arg0: itkPointF4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL4FMCULLPF4_ConsiderPoint(self, arg0)

    def GetDiagonalLength2(self):
        r"""GetDiagonalLength2(self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4FMCULLPF4_GetDiagonalLength2(self)

    def IsInside(self, arg0):
        r"""
        IsInside(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointF4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL4FMCULLPF4_IsInside(self, arg0)

    def DeepCopy(self):
        r"""DeepCopy(self) -> itkBoundingBoxULL4FMCULLPF4_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4FMCULLPF4_DeepCopy(self)
    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxULL4FMCULLPF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundingBoxULL4FMCULLPF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL4FMCULLPF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxULL4FMCULLPF4

        Create a new object of the class itkBoundingBoxULL4FMCULLPF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxULL4FMCULLPF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxULL4FMCULLPF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxULL4FMCULLPF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxULL4FMCULLPF4 in _itkBoundingBoxPython:
_itkBoundingBoxPython.itkBoundingBoxULL4FMCULLPF4_swigregister(itkBoundingBoxULL4FMCULLPF4)

def itkBoundingBoxULL4FVCULLPF4_New():
    return itkBoundingBoxULL4FVCULLPF4.New()

class itkBoundingBoxULL4FVCULLPF4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkBoundingBoxULL4FVCULLPF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBoundingBoxULL4FVCULLPF4_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4FVCULLPF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBoundingBoxULL4FVCULLPF4_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4FVCULLPF4_Clone(self)

    def SetPoints(self, arg0):
        r"""
        SetPoints(self, arg0)

        Parameters
        ----------
        arg0: itkVectorContainerULLPF4 const *

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL4FVCULLPF4_SetPoints(self, arg0)

    def GetPoints(self):
        r"""GetPoints(self) -> itkVectorContainerULLPF4"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4FVCULLPF4_GetPoints(self)

    def ComputeCorners(self):
        r"""ComputeCorners(self) -> std::array< itkPointF4,16 >"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4FVCULLPF4_ComputeCorners(self)

    def ComputeBoundingBox(self):
        r"""ComputeBoundingBox(self) -> bool"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4FVCULLPF4_ComputeBoundingBox(self)

    def GetBounds(self):
        r"""GetBounds(self) -> itkFixedArrayF8"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4FVCULLPF4_GetBounds(self)

    def GetCenter(self):
        r"""GetCenter(self) -> itkPointF4"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4FVCULLPF4_GetCenter(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> itkPointF4"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4FVCULLPF4_GetMinimum(self)

    def SetMinimum(self, arg0):
        r"""
        SetMinimum(self, arg0)

        Parameters
        ----------
        arg0: itkPointF4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL4FVCULLPF4_SetMinimum(self, arg0)

    def GetMaximum(self):
        r"""GetMaximum(self) -> itkPointF4"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4FVCULLPF4_GetMaximum(self)

    def SetMaximum(self, arg0):
        r"""
        SetMaximum(self, arg0)

        Parameters
        ----------
        arg0: itkPointF4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL4FVCULLPF4_SetMaximum(self, arg0)

    def ConsiderPoint(self, arg0):
        r"""
        ConsiderPoint(self, arg0)

        Parameters
        ----------
        arg0: itkPointF4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL4FVCULLPF4_ConsiderPoint(self, arg0)

    def GetDiagonalLength2(self):
        r"""GetDiagonalLength2(self) -> double"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4FVCULLPF4_GetDiagonalLength2(self)

    def IsInside(self, arg0):
        r"""
        IsInside(self, arg0) -> bool

        Parameters
        ----------
        arg0: itkPointF4 const &

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL4FVCULLPF4_IsInside(self, arg0)

    def DeepCopy(self):
        r"""DeepCopy(self) -> itkBoundingBoxULL4FVCULLPF4_Pointer"""
        return _itkBoundingBoxPython.itkBoundingBoxULL4FVCULLPF4_DeepCopy(self)
    __swig_destroy__ = _itkBoundingBoxPython.delete_itkBoundingBoxULL4FVCULLPF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBoundingBoxULL4FVCULLPF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBoundingBoxPython.itkBoundingBoxULL4FVCULLPF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBoundingBoxULL4FVCULLPF4

        Create a new object of the class itkBoundingBoxULL4FVCULLPF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundingBoxULL4FVCULLPF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundingBoxULL4FVCULLPF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundingBoxULL4FVCULLPF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundingBoxULL4FVCULLPF4 in _itkBoundingBoxPython:
_itkBoundingBoxPython.itkBoundingBoxULL4FVCULLPF4_swigregister(itkBoundingBoxULL4FVCULLPF4)

