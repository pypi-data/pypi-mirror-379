# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkTriangleHelperPython
else:
    import _itkTriangleHelperPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkPointPython
class itkTriangleHelperPD2(object):
    r"""Proxy of C++ itkTriangleHelperPD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsObtuse(iA, iB, iC):
        r"""
        IsObtuse(iA, iB, iC) -> bool

        Parameters
        ----------
        iA: itkPointD2 const &
        iB: itkPointD2 const &
        iC: itkPointD2 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD2_IsObtuse(iA, iB, iC)

    @staticmethod
    def ComputeNormal(iA, iB, iC):
        r"""
        ComputeNormal(iA, iB, iC) -> itkVectorD2

        Parameters
        ----------
        iA: itkPointD2 const &
        iB: itkPointD2 const &
        iC: itkPointD2 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD2_ComputeNormal(iA, iB, iC)

    @staticmethod
    def Cotangent(iA, iB, iC):
        r"""
        Cotangent(iA, iB, iC) -> double

        Parameters
        ----------
        iA: itkPointD2 const &
        iB: itkPointD2 const &
        iC: itkPointD2 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD2_Cotangent(iA, iB, iC)

    @staticmethod
    def ComputeBarycenter(iA1, iP1, iA2, iP2, iA3, iP3):
        r"""
        ComputeBarycenter(iA1, iP1, iA2, iP2, iA3, iP3) -> itkPointD2

        Parameters
        ----------
        iA1: double const &
        iP1: itkPointD2 const &
        iA2: double const &
        iP2: itkPointD2 const &
        iA3: double const &
        iP3: itkPointD2 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD2_ComputeBarycenter(iA1, iP1, iA2, iP2, iA3, iP3)

    @staticmethod
    def ComputeAngle(iP1, iP2, iP3):
        r"""
        ComputeAngle(iP1, iP2, iP3) -> double

        Parameters
        ----------
        iP1: itkPointD2 const &
        iP2: itkPointD2 const &
        iP3: itkPointD2 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD2_ComputeAngle(iP1, iP2, iP3)

    @staticmethod
    def ComputeGravityCenter(iP1, iP2, iP3):
        r"""
        ComputeGravityCenter(iP1, iP2, iP3) -> itkPointD2

        Parameters
        ----------
        iP1: itkPointD2 const &
        iP2: itkPointD2 const &
        iP3: itkPointD2 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD2_ComputeGravityCenter(iP1, iP2, iP3)

    @staticmethod
    def ComputeCircumCenter(iP1, iP2, iP3):
        r"""
        ComputeCircumCenter(iP1, iP2, iP3) -> itkPointD2

        Parameters
        ----------
        iP1: itkPointD2 const &
        iP2: itkPointD2 const &
        iP3: itkPointD2 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD2_ComputeCircumCenter(iP1, iP2, iP3)

    @staticmethod
    def ComputeConstrainedCircumCenter(iP1, iP2, iP3):
        r"""
        ComputeConstrainedCircumCenter(iP1, iP2, iP3) -> itkPointD2

        Parameters
        ----------
        iP1: itkPointD2 const &
        iP2: itkPointD2 const &
        iP3: itkPointD2 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD2_ComputeConstrainedCircumCenter(iP1, iP2, iP3)

    @staticmethod
    def ComputeArea(iP1, iP2, iP3):
        r"""
        ComputeArea(iP1, iP2, iP3) -> double

        Parameters
        ----------
        iP1: itkPointD2 const &
        iP2: itkPointD2 const &
        iP3: itkPointD2 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD2_ComputeArea(iP1, iP2, iP3)

    @staticmethod
    def ComputeMixedArea(iP1, iP2, iP3):
        r"""
        ComputeMixedArea(iP1, iP2, iP3) -> double

        Parameters
        ----------
        iP1: itkPointD2 const &
        iP2: itkPointD2 const &
        iP3: itkPointD2 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD2_ComputeMixedArea(iP1, iP2, iP3)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkTriangleHelperPD2
        __init__(self, arg0) -> itkTriangleHelperPD2

        Parameters
        ----------
        arg0: itkTriangleHelperPD2 const &

        """
        _itkTriangleHelperPython.itkTriangleHelperPD2_swiginit(self, _itkTriangleHelperPython.new_itkTriangleHelperPD2(*args))
    __swig_destroy__ = _itkTriangleHelperPython.delete_itkTriangleHelperPD2

# Register itkTriangleHelperPD2 in _itkTriangleHelperPython:
_itkTriangleHelperPython.itkTriangleHelperPD2_swigregister(itkTriangleHelperPD2)
class itkTriangleHelperPD3(object):
    r"""Proxy of C++ itkTriangleHelperPD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsObtuse(iA, iB, iC):
        r"""
        IsObtuse(iA, iB, iC) -> bool

        Parameters
        ----------
        iA: itkPointD3 const &
        iB: itkPointD3 const &
        iC: itkPointD3 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD3_IsObtuse(iA, iB, iC)

    @staticmethod
    def ComputeNormal(iA, iB, iC):
        r"""
        ComputeNormal(iA, iB, iC) -> itkVectorD3

        Parameters
        ----------
        iA: itkPointD3 const &
        iB: itkPointD3 const &
        iC: itkPointD3 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD3_ComputeNormal(iA, iB, iC)

    @staticmethod
    def Cotangent(iA, iB, iC):
        r"""
        Cotangent(iA, iB, iC) -> double

        Parameters
        ----------
        iA: itkPointD3 const &
        iB: itkPointD3 const &
        iC: itkPointD3 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD3_Cotangent(iA, iB, iC)

    @staticmethod
    def ComputeBarycenter(iA1, iP1, iA2, iP2, iA3, iP3):
        r"""
        ComputeBarycenter(iA1, iP1, iA2, iP2, iA3, iP3) -> itkPointD3

        Parameters
        ----------
        iA1: double const &
        iP1: itkPointD3 const &
        iA2: double const &
        iP2: itkPointD3 const &
        iA3: double const &
        iP3: itkPointD3 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD3_ComputeBarycenter(iA1, iP1, iA2, iP2, iA3, iP3)

    @staticmethod
    def ComputeAngle(iP1, iP2, iP3):
        r"""
        ComputeAngle(iP1, iP2, iP3) -> double

        Parameters
        ----------
        iP1: itkPointD3 const &
        iP2: itkPointD3 const &
        iP3: itkPointD3 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD3_ComputeAngle(iP1, iP2, iP3)

    @staticmethod
    def ComputeGravityCenter(iP1, iP2, iP3):
        r"""
        ComputeGravityCenter(iP1, iP2, iP3) -> itkPointD3

        Parameters
        ----------
        iP1: itkPointD3 const &
        iP2: itkPointD3 const &
        iP3: itkPointD3 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD3_ComputeGravityCenter(iP1, iP2, iP3)

    @staticmethod
    def ComputeCircumCenter(iP1, iP2, iP3):
        r"""
        ComputeCircumCenter(iP1, iP2, iP3) -> itkPointD3

        Parameters
        ----------
        iP1: itkPointD3 const &
        iP2: itkPointD3 const &
        iP3: itkPointD3 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD3_ComputeCircumCenter(iP1, iP2, iP3)

    @staticmethod
    def ComputeConstrainedCircumCenter(iP1, iP2, iP3):
        r"""
        ComputeConstrainedCircumCenter(iP1, iP2, iP3) -> itkPointD3

        Parameters
        ----------
        iP1: itkPointD3 const &
        iP2: itkPointD3 const &
        iP3: itkPointD3 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD3_ComputeConstrainedCircumCenter(iP1, iP2, iP3)

    @staticmethod
    def ComputeArea(iP1, iP2, iP3):
        r"""
        ComputeArea(iP1, iP2, iP3) -> double

        Parameters
        ----------
        iP1: itkPointD3 const &
        iP2: itkPointD3 const &
        iP3: itkPointD3 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD3_ComputeArea(iP1, iP2, iP3)

    @staticmethod
    def ComputeMixedArea(iP1, iP2, iP3):
        r"""
        ComputeMixedArea(iP1, iP2, iP3) -> double

        Parameters
        ----------
        iP1: itkPointD3 const &
        iP2: itkPointD3 const &
        iP3: itkPointD3 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD3_ComputeMixedArea(iP1, iP2, iP3)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkTriangleHelperPD3
        __init__(self, arg0) -> itkTriangleHelperPD3

        Parameters
        ----------
        arg0: itkTriangleHelperPD3 const &

        """
        _itkTriangleHelperPython.itkTriangleHelperPD3_swiginit(self, _itkTriangleHelperPython.new_itkTriangleHelperPD3(*args))
    __swig_destroy__ = _itkTriangleHelperPython.delete_itkTriangleHelperPD3

# Register itkTriangleHelperPD3 in _itkTriangleHelperPython:
_itkTriangleHelperPython.itkTriangleHelperPD3_swigregister(itkTriangleHelperPD3)
class itkTriangleHelperPD4(object):
    r"""Proxy of C++ itkTriangleHelperPD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsObtuse(iA, iB, iC):
        r"""
        IsObtuse(iA, iB, iC) -> bool

        Parameters
        ----------
        iA: itkPointD4 const &
        iB: itkPointD4 const &
        iC: itkPointD4 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD4_IsObtuse(iA, iB, iC)

    @staticmethod
    def ComputeNormal(iA, iB, iC):
        r"""
        ComputeNormal(iA, iB, iC) -> itkVectorD4

        Parameters
        ----------
        iA: itkPointD4 const &
        iB: itkPointD4 const &
        iC: itkPointD4 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD4_ComputeNormal(iA, iB, iC)

    @staticmethod
    def Cotangent(iA, iB, iC):
        r"""
        Cotangent(iA, iB, iC) -> double

        Parameters
        ----------
        iA: itkPointD4 const &
        iB: itkPointD4 const &
        iC: itkPointD4 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD4_Cotangent(iA, iB, iC)

    @staticmethod
    def ComputeBarycenter(iA1, iP1, iA2, iP2, iA3, iP3):
        r"""
        ComputeBarycenter(iA1, iP1, iA2, iP2, iA3, iP3) -> itkPointD4

        Parameters
        ----------
        iA1: double const &
        iP1: itkPointD4 const &
        iA2: double const &
        iP2: itkPointD4 const &
        iA3: double const &
        iP3: itkPointD4 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD4_ComputeBarycenter(iA1, iP1, iA2, iP2, iA3, iP3)

    @staticmethod
    def ComputeAngle(iP1, iP2, iP3):
        r"""
        ComputeAngle(iP1, iP2, iP3) -> double

        Parameters
        ----------
        iP1: itkPointD4 const &
        iP2: itkPointD4 const &
        iP3: itkPointD4 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD4_ComputeAngle(iP1, iP2, iP3)

    @staticmethod
    def ComputeGravityCenter(iP1, iP2, iP3):
        r"""
        ComputeGravityCenter(iP1, iP2, iP3) -> itkPointD4

        Parameters
        ----------
        iP1: itkPointD4 const &
        iP2: itkPointD4 const &
        iP3: itkPointD4 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD4_ComputeGravityCenter(iP1, iP2, iP3)

    @staticmethod
    def ComputeCircumCenter(iP1, iP2, iP3):
        r"""
        ComputeCircumCenter(iP1, iP2, iP3) -> itkPointD4

        Parameters
        ----------
        iP1: itkPointD4 const &
        iP2: itkPointD4 const &
        iP3: itkPointD4 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD4_ComputeCircumCenter(iP1, iP2, iP3)

    @staticmethod
    def ComputeConstrainedCircumCenter(iP1, iP2, iP3):
        r"""
        ComputeConstrainedCircumCenter(iP1, iP2, iP3) -> itkPointD4

        Parameters
        ----------
        iP1: itkPointD4 const &
        iP2: itkPointD4 const &
        iP3: itkPointD4 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD4_ComputeConstrainedCircumCenter(iP1, iP2, iP3)

    @staticmethod
    def ComputeArea(iP1, iP2, iP3):
        r"""
        ComputeArea(iP1, iP2, iP3) -> double

        Parameters
        ----------
        iP1: itkPointD4 const &
        iP2: itkPointD4 const &
        iP3: itkPointD4 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD4_ComputeArea(iP1, iP2, iP3)

    @staticmethod
    def ComputeMixedArea(iP1, iP2, iP3):
        r"""
        ComputeMixedArea(iP1, iP2, iP3) -> double

        Parameters
        ----------
        iP1: itkPointD4 const &
        iP2: itkPointD4 const &
        iP3: itkPointD4 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPD4_ComputeMixedArea(iP1, iP2, iP3)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkTriangleHelperPD4
        __init__(self, arg0) -> itkTriangleHelperPD4

        Parameters
        ----------
        arg0: itkTriangleHelperPD4 const &

        """
        _itkTriangleHelperPython.itkTriangleHelperPD4_swiginit(self, _itkTriangleHelperPython.new_itkTriangleHelperPD4(*args))
    __swig_destroy__ = _itkTriangleHelperPython.delete_itkTriangleHelperPD4

# Register itkTriangleHelperPD4 in _itkTriangleHelperPython:
_itkTriangleHelperPython.itkTriangleHelperPD4_swigregister(itkTriangleHelperPD4)
class itkTriangleHelperPF2(object):
    r"""Proxy of C++ itkTriangleHelperPF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsObtuse(iA, iB, iC):
        r"""
        IsObtuse(iA, iB, iC) -> bool

        Parameters
        ----------
        iA: itkPointF2 const &
        iB: itkPointF2 const &
        iC: itkPointF2 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF2_IsObtuse(iA, iB, iC)

    @staticmethod
    def ComputeNormal(iA, iB, iC):
        r"""
        ComputeNormal(iA, iB, iC) -> itkVectorF2

        Parameters
        ----------
        iA: itkPointF2 const &
        iB: itkPointF2 const &
        iC: itkPointF2 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF2_ComputeNormal(iA, iB, iC)

    @staticmethod
    def Cotangent(iA, iB, iC):
        r"""
        Cotangent(iA, iB, iC) -> float

        Parameters
        ----------
        iA: itkPointF2 const &
        iB: itkPointF2 const &
        iC: itkPointF2 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF2_Cotangent(iA, iB, iC)

    @staticmethod
    def ComputeBarycenter(iA1, iP1, iA2, iP2, iA3, iP3):
        r"""
        ComputeBarycenter(iA1, iP1, iA2, iP2, iA3, iP3) -> itkPointF2

        Parameters
        ----------
        iA1: float const &
        iP1: itkPointF2 const &
        iA2: float const &
        iP2: itkPointF2 const &
        iA3: float const &
        iP3: itkPointF2 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF2_ComputeBarycenter(iA1, iP1, iA2, iP2, iA3, iP3)

    @staticmethod
    def ComputeAngle(iP1, iP2, iP3):
        r"""
        ComputeAngle(iP1, iP2, iP3) -> float

        Parameters
        ----------
        iP1: itkPointF2 const &
        iP2: itkPointF2 const &
        iP3: itkPointF2 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF2_ComputeAngle(iP1, iP2, iP3)

    @staticmethod
    def ComputeGravityCenter(iP1, iP2, iP3):
        r"""
        ComputeGravityCenter(iP1, iP2, iP3) -> itkPointF2

        Parameters
        ----------
        iP1: itkPointF2 const &
        iP2: itkPointF2 const &
        iP3: itkPointF2 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF2_ComputeGravityCenter(iP1, iP2, iP3)

    @staticmethod
    def ComputeCircumCenter(iP1, iP2, iP3):
        r"""
        ComputeCircumCenter(iP1, iP2, iP3) -> itkPointF2

        Parameters
        ----------
        iP1: itkPointF2 const &
        iP2: itkPointF2 const &
        iP3: itkPointF2 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF2_ComputeCircumCenter(iP1, iP2, iP3)

    @staticmethod
    def ComputeConstrainedCircumCenter(iP1, iP2, iP3):
        r"""
        ComputeConstrainedCircumCenter(iP1, iP2, iP3) -> itkPointF2

        Parameters
        ----------
        iP1: itkPointF2 const &
        iP2: itkPointF2 const &
        iP3: itkPointF2 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF2_ComputeConstrainedCircumCenter(iP1, iP2, iP3)

    @staticmethod
    def ComputeArea(iP1, iP2, iP3):
        r"""
        ComputeArea(iP1, iP2, iP3) -> float

        Parameters
        ----------
        iP1: itkPointF2 const &
        iP2: itkPointF2 const &
        iP3: itkPointF2 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF2_ComputeArea(iP1, iP2, iP3)

    @staticmethod
    def ComputeMixedArea(iP1, iP2, iP3):
        r"""
        ComputeMixedArea(iP1, iP2, iP3) -> float

        Parameters
        ----------
        iP1: itkPointF2 const &
        iP2: itkPointF2 const &
        iP3: itkPointF2 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF2_ComputeMixedArea(iP1, iP2, iP3)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkTriangleHelperPF2
        __init__(self, arg0) -> itkTriangleHelperPF2

        Parameters
        ----------
        arg0: itkTriangleHelperPF2 const &

        """
        _itkTriangleHelperPython.itkTriangleHelperPF2_swiginit(self, _itkTriangleHelperPython.new_itkTriangleHelperPF2(*args))
    __swig_destroy__ = _itkTriangleHelperPython.delete_itkTriangleHelperPF2

# Register itkTriangleHelperPF2 in _itkTriangleHelperPython:
_itkTriangleHelperPython.itkTriangleHelperPF2_swigregister(itkTriangleHelperPF2)
class itkTriangleHelperPF3(object):
    r"""Proxy of C++ itkTriangleHelperPF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsObtuse(iA, iB, iC):
        r"""
        IsObtuse(iA, iB, iC) -> bool

        Parameters
        ----------
        iA: itkPointF3 const &
        iB: itkPointF3 const &
        iC: itkPointF3 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF3_IsObtuse(iA, iB, iC)

    @staticmethod
    def ComputeNormal(iA, iB, iC):
        r"""
        ComputeNormal(iA, iB, iC) -> itkVectorF3

        Parameters
        ----------
        iA: itkPointF3 const &
        iB: itkPointF3 const &
        iC: itkPointF3 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF3_ComputeNormal(iA, iB, iC)

    @staticmethod
    def Cotangent(iA, iB, iC):
        r"""
        Cotangent(iA, iB, iC) -> float

        Parameters
        ----------
        iA: itkPointF3 const &
        iB: itkPointF3 const &
        iC: itkPointF3 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF3_Cotangent(iA, iB, iC)

    @staticmethod
    def ComputeBarycenter(iA1, iP1, iA2, iP2, iA3, iP3):
        r"""
        ComputeBarycenter(iA1, iP1, iA2, iP2, iA3, iP3) -> itkPointF3

        Parameters
        ----------
        iA1: float const &
        iP1: itkPointF3 const &
        iA2: float const &
        iP2: itkPointF3 const &
        iA3: float const &
        iP3: itkPointF3 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF3_ComputeBarycenter(iA1, iP1, iA2, iP2, iA3, iP3)

    @staticmethod
    def ComputeAngle(iP1, iP2, iP3):
        r"""
        ComputeAngle(iP1, iP2, iP3) -> float

        Parameters
        ----------
        iP1: itkPointF3 const &
        iP2: itkPointF3 const &
        iP3: itkPointF3 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF3_ComputeAngle(iP1, iP2, iP3)

    @staticmethod
    def ComputeGravityCenter(iP1, iP2, iP3):
        r"""
        ComputeGravityCenter(iP1, iP2, iP3) -> itkPointF3

        Parameters
        ----------
        iP1: itkPointF3 const &
        iP2: itkPointF3 const &
        iP3: itkPointF3 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF3_ComputeGravityCenter(iP1, iP2, iP3)

    @staticmethod
    def ComputeCircumCenter(iP1, iP2, iP3):
        r"""
        ComputeCircumCenter(iP1, iP2, iP3) -> itkPointF3

        Parameters
        ----------
        iP1: itkPointF3 const &
        iP2: itkPointF3 const &
        iP3: itkPointF3 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF3_ComputeCircumCenter(iP1, iP2, iP3)

    @staticmethod
    def ComputeConstrainedCircumCenter(iP1, iP2, iP3):
        r"""
        ComputeConstrainedCircumCenter(iP1, iP2, iP3) -> itkPointF3

        Parameters
        ----------
        iP1: itkPointF3 const &
        iP2: itkPointF3 const &
        iP3: itkPointF3 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF3_ComputeConstrainedCircumCenter(iP1, iP2, iP3)

    @staticmethod
    def ComputeArea(iP1, iP2, iP3):
        r"""
        ComputeArea(iP1, iP2, iP3) -> float

        Parameters
        ----------
        iP1: itkPointF3 const &
        iP2: itkPointF3 const &
        iP3: itkPointF3 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF3_ComputeArea(iP1, iP2, iP3)

    @staticmethod
    def ComputeMixedArea(iP1, iP2, iP3):
        r"""
        ComputeMixedArea(iP1, iP2, iP3) -> float

        Parameters
        ----------
        iP1: itkPointF3 const &
        iP2: itkPointF3 const &
        iP3: itkPointF3 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF3_ComputeMixedArea(iP1, iP2, iP3)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkTriangleHelperPF3
        __init__(self, arg0) -> itkTriangleHelperPF3

        Parameters
        ----------
        arg0: itkTriangleHelperPF3 const &

        """
        _itkTriangleHelperPython.itkTriangleHelperPF3_swiginit(self, _itkTriangleHelperPython.new_itkTriangleHelperPF3(*args))
    __swig_destroy__ = _itkTriangleHelperPython.delete_itkTriangleHelperPF3

# Register itkTriangleHelperPF3 in _itkTriangleHelperPython:
_itkTriangleHelperPython.itkTriangleHelperPF3_swigregister(itkTriangleHelperPF3)
class itkTriangleHelperPF4(object):
    r"""Proxy of C++ itkTriangleHelperPF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsObtuse(iA, iB, iC):
        r"""
        IsObtuse(iA, iB, iC) -> bool

        Parameters
        ----------
        iA: itkPointF4 const &
        iB: itkPointF4 const &
        iC: itkPointF4 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF4_IsObtuse(iA, iB, iC)

    @staticmethod
    def ComputeNormal(iA, iB, iC):
        r"""
        ComputeNormal(iA, iB, iC) -> itkVectorF4

        Parameters
        ----------
        iA: itkPointF4 const &
        iB: itkPointF4 const &
        iC: itkPointF4 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF4_ComputeNormal(iA, iB, iC)

    @staticmethod
    def Cotangent(iA, iB, iC):
        r"""
        Cotangent(iA, iB, iC) -> float

        Parameters
        ----------
        iA: itkPointF4 const &
        iB: itkPointF4 const &
        iC: itkPointF4 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF4_Cotangent(iA, iB, iC)

    @staticmethod
    def ComputeBarycenter(iA1, iP1, iA2, iP2, iA3, iP3):
        r"""
        ComputeBarycenter(iA1, iP1, iA2, iP2, iA3, iP3) -> itkPointF4

        Parameters
        ----------
        iA1: float const &
        iP1: itkPointF4 const &
        iA2: float const &
        iP2: itkPointF4 const &
        iA3: float const &
        iP3: itkPointF4 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF4_ComputeBarycenter(iA1, iP1, iA2, iP2, iA3, iP3)

    @staticmethod
    def ComputeAngle(iP1, iP2, iP3):
        r"""
        ComputeAngle(iP1, iP2, iP3) -> float

        Parameters
        ----------
        iP1: itkPointF4 const &
        iP2: itkPointF4 const &
        iP3: itkPointF4 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF4_ComputeAngle(iP1, iP2, iP3)

    @staticmethod
    def ComputeGravityCenter(iP1, iP2, iP3):
        r"""
        ComputeGravityCenter(iP1, iP2, iP3) -> itkPointF4

        Parameters
        ----------
        iP1: itkPointF4 const &
        iP2: itkPointF4 const &
        iP3: itkPointF4 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF4_ComputeGravityCenter(iP1, iP2, iP3)

    @staticmethod
    def ComputeCircumCenter(iP1, iP2, iP3):
        r"""
        ComputeCircumCenter(iP1, iP2, iP3) -> itkPointF4

        Parameters
        ----------
        iP1: itkPointF4 const &
        iP2: itkPointF4 const &
        iP3: itkPointF4 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF4_ComputeCircumCenter(iP1, iP2, iP3)

    @staticmethod
    def ComputeConstrainedCircumCenter(iP1, iP2, iP3):
        r"""
        ComputeConstrainedCircumCenter(iP1, iP2, iP3) -> itkPointF4

        Parameters
        ----------
        iP1: itkPointF4 const &
        iP2: itkPointF4 const &
        iP3: itkPointF4 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF4_ComputeConstrainedCircumCenter(iP1, iP2, iP3)

    @staticmethod
    def ComputeArea(iP1, iP2, iP3):
        r"""
        ComputeArea(iP1, iP2, iP3) -> float

        Parameters
        ----------
        iP1: itkPointF4 const &
        iP2: itkPointF4 const &
        iP3: itkPointF4 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF4_ComputeArea(iP1, iP2, iP3)

    @staticmethod
    def ComputeMixedArea(iP1, iP2, iP3):
        r"""
        ComputeMixedArea(iP1, iP2, iP3) -> float

        Parameters
        ----------
        iP1: itkPointF4 const &
        iP2: itkPointF4 const &
        iP3: itkPointF4 const &

        """
        return _itkTriangleHelperPython.itkTriangleHelperPF4_ComputeMixedArea(iP1, iP2, iP3)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkTriangleHelperPF4
        __init__(self, arg0) -> itkTriangleHelperPF4

        Parameters
        ----------
        arg0: itkTriangleHelperPF4 const &

        """
        _itkTriangleHelperPython.itkTriangleHelperPF4_swiginit(self, _itkTriangleHelperPython.new_itkTriangleHelperPF4(*args))
    __swig_destroy__ = _itkTriangleHelperPython.delete_itkTriangleHelperPF4

# Register itkTriangleHelperPF4 in _itkTriangleHelperPython:
_itkTriangleHelperPython.itkTriangleHelperPF4_swigregister(itkTriangleHelperPF4)

