# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageFunctionPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkWindowedSincInterpolateImageFunctionPython
else:
    import _itkWindowedSincInterpolateImageFunctionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImagePython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkContinuousIndexPython
import itk.itkInterpolateImageFunctionPython
import itk.itkImageFunctionBasePython
import itk.itkFunctionBasePython
import itk.itkArrayPython
class itkCosineWindowFunction2(object):
    r"""Proxy of C++ itkCosineWindowFunction2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, A):
        r"""
        __call__(self, A) -> double

        Parameters
        ----------
        A: double const &

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkCosineWindowFunction2___call__(self, A)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkCosineWindowFunction2

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCosineWindowFunction2
        __init__(self, arg0) -> itkCosineWindowFunction2

        Parameters
        ----------
        arg0: itkCosineWindowFunction2 const &

        """
        _itkWindowedSincInterpolateImageFunctionPython.itkCosineWindowFunction2_swiginit(self, _itkWindowedSincInterpolateImageFunctionPython.new_itkCosineWindowFunction2(*args))

# Register itkCosineWindowFunction2 in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkCosineWindowFunction2_swigregister(itkCosineWindowFunction2)
class itkCosineWindowFunction3(object):
    r"""Proxy of C++ itkCosineWindowFunction3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, A):
        r"""
        __call__(self, A) -> double

        Parameters
        ----------
        A: double const &

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkCosineWindowFunction3___call__(self, A)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkCosineWindowFunction3

    def __init__(self, *args):
        r"""
        __init__(self) -> itkCosineWindowFunction3
        __init__(self, arg0) -> itkCosineWindowFunction3

        Parameters
        ----------
        arg0: itkCosineWindowFunction3 const &

        """
        _itkWindowedSincInterpolateImageFunctionPython.itkCosineWindowFunction3_swiginit(self, _itkWindowedSincInterpolateImageFunctionPython.new_itkCosineWindowFunction3(*args))

# Register itkCosineWindowFunction3 in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkCosineWindowFunction3_swigregister(itkCosineWindowFunction3)
class itkHammingWindowFunction2(object):
    r"""Proxy of C++ itkHammingWindowFunction2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, A):
        r"""
        __call__(self, A) -> double

        Parameters
        ----------
        A: double const &

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkHammingWindowFunction2___call__(self, A)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkHammingWindowFunction2

    def __init__(self, *args):
        r"""
        __init__(self) -> itkHammingWindowFunction2
        __init__(self, arg0) -> itkHammingWindowFunction2

        Parameters
        ----------
        arg0: itkHammingWindowFunction2 const &

        """
        _itkWindowedSincInterpolateImageFunctionPython.itkHammingWindowFunction2_swiginit(self, _itkWindowedSincInterpolateImageFunctionPython.new_itkHammingWindowFunction2(*args))

# Register itkHammingWindowFunction2 in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkHammingWindowFunction2_swigregister(itkHammingWindowFunction2)
class itkHammingWindowFunction3(object):
    r"""Proxy of C++ itkHammingWindowFunction3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, A):
        r"""
        __call__(self, A) -> double

        Parameters
        ----------
        A: double const &

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkHammingWindowFunction3___call__(self, A)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkHammingWindowFunction3

    def __init__(self, *args):
        r"""
        __init__(self) -> itkHammingWindowFunction3
        __init__(self, arg0) -> itkHammingWindowFunction3

        Parameters
        ----------
        arg0: itkHammingWindowFunction3 const &

        """
        _itkWindowedSincInterpolateImageFunctionPython.itkHammingWindowFunction3_swiginit(self, _itkWindowedSincInterpolateImageFunctionPython.new_itkHammingWindowFunction3(*args))

# Register itkHammingWindowFunction3 in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkHammingWindowFunction3_swigregister(itkHammingWindowFunction3)
class itkLanczosWindowFunction2(object):
    r"""Proxy of C++ itkLanczosWindowFunction2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, A):
        r"""
        __call__(self, A) -> double

        Parameters
        ----------
        A: double const &

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkLanczosWindowFunction2___call__(self, A)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkLanczosWindowFunction2

    def __init__(self, *args):
        r"""
        __init__(self) -> itkLanczosWindowFunction2
        __init__(self, arg0) -> itkLanczosWindowFunction2

        Parameters
        ----------
        arg0: itkLanczosWindowFunction2 const &

        """
        _itkWindowedSincInterpolateImageFunctionPython.itkLanczosWindowFunction2_swiginit(self, _itkWindowedSincInterpolateImageFunctionPython.new_itkLanczosWindowFunction2(*args))

# Register itkLanczosWindowFunction2 in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkLanczosWindowFunction2_swigregister(itkLanczosWindowFunction2)
class itkLanczosWindowFunction3(object):
    r"""Proxy of C++ itkLanczosWindowFunction3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, A):
        r"""
        __call__(self, A) -> double

        Parameters
        ----------
        A: double const &

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkLanczosWindowFunction3___call__(self, A)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkLanczosWindowFunction3

    def __init__(self, *args):
        r"""
        __init__(self) -> itkLanczosWindowFunction3
        __init__(self, arg0) -> itkLanczosWindowFunction3

        Parameters
        ----------
        arg0: itkLanczosWindowFunction3 const &

        """
        _itkWindowedSincInterpolateImageFunctionPython.itkLanczosWindowFunction3_swiginit(self, _itkWindowedSincInterpolateImageFunctionPython.new_itkLanczosWindowFunction3(*args))

# Register itkLanczosWindowFunction3 in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkLanczosWindowFunction3_swigregister(itkLanczosWindowFunction3)
class itkWelchWindowFunction2(object):
    r"""Proxy of C++ itkWelchWindowFunction2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, A):
        r"""
        __call__(self, A) -> double

        Parameters
        ----------
        A: double const &

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWelchWindowFunction2___call__(self, A)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWelchWindowFunction2

    def __init__(self, *args):
        r"""
        __init__(self) -> itkWelchWindowFunction2
        __init__(self, arg0) -> itkWelchWindowFunction2

        Parameters
        ----------
        arg0: itkWelchWindowFunction2 const &

        """
        _itkWindowedSincInterpolateImageFunctionPython.itkWelchWindowFunction2_swiginit(self, _itkWindowedSincInterpolateImageFunctionPython.new_itkWelchWindowFunction2(*args))

# Register itkWelchWindowFunction2 in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWelchWindowFunction2_swigregister(itkWelchWindowFunction2)
class itkWelchWindowFunction3(object):
    r"""Proxy of C++ itkWelchWindowFunction3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, A):
        r"""
        __call__(self, A) -> double

        Parameters
        ----------
        A: double const &

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWelchWindowFunction3___call__(self, A)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWelchWindowFunction3

    def __init__(self, *args):
        r"""
        __init__(self) -> itkWelchWindowFunction3
        __init__(self, arg0) -> itkWelchWindowFunction3

        Parameters
        ----------
        arg0: itkWelchWindowFunction3 const &

        """
        _itkWindowedSincInterpolateImageFunctionPython.itkWelchWindowFunction3_swiginit(self, _itkWindowedSincInterpolateImageFunctionPython.new_itkWelchWindowFunction3(*args))

# Register itkWelchWindowFunction3 in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWelchWindowFunction3_swigregister(itkWelchWindowFunction3)

def itkWindowedSincInterpolateImageFunctionID22Cosine_New():
    return itkWindowedSincInterpolateImageFunctionID22Cosine.New()

class itkWindowedSincInterpolateImageFunctionID22Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionID22Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionID22Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID22Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionID22Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID22Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionID22Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionID22Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID22Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionID22Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionID22Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionID22Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionID22Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionID22Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionID22Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID22Cosine_swigregister(itkWindowedSincInterpolateImageFunctionID22Cosine)

def itkWindowedSincInterpolateImageFunctionID22Hamming_New():
    return itkWindowedSincInterpolateImageFunctionID22Hamming.New()

class itkWindowedSincInterpolateImageFunctionID22Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionID22Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionID22Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID22Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionID22Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID22Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionID22Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionID22Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID22Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionID22Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionID22Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionID22Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionID22Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionID22Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionID22Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID22Hamming_swigregister(itkWindowedSincInterpolateImageFunctionID22Hamming)

def itkWindowedSincInterpolateImageFunctionID22Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionID22Lanczos.New()

class itkWindowedSincInterpolateImageFunctionID22Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionID22Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionID22Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID22Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionID22Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID22Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionID22Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionID22Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID22Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionID22Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionID22Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionID22Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionID22Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionID22Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionID22Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID22Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionID22Lanczos)

def itkWindowedSincInterpolateImageFunctionID22Welch_New():
    return itkWindowedSincInterpolateImageFunctionID22Welch.New()

class itkWindowedSincInterpolateImageFunctionID22Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionID22Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionID22Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID22Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionID22Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID22Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionID22Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionID22Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID22Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionID22Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionID22Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionID22Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionID22Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionID22Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionID22Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID22Welch_swigregister(itkWindowedSincInterpolateImageFunctionID22Welch)

def itkWindowedSincInterpolateImageFunctionID23Cosine_New():
    return itkWindowedSincInterpolateImageFunctionID23Cosine.New()

class itkWindowedSincInterpolateImageFunctionID23Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionID23Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionID23Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID23Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionID23Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID23Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionID23Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionID23Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID23Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionID23Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionID23Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionID23Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionID23Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionID23Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionID23Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID23Cosine_swigregister(itkWindowedSincInterpolateImageFunctionID23Cosine)

def itkWindowedSincInterpolateImageFunctionID23Hamming_New():
    return itkWindowedSincInterpolateImageFunctionID23Hamming.New()

class itkWindowedSincInterpolateImageFunctionID23Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionID23Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionID23Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID23Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionID23Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID23Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionID23Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionID23Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID23Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionID23Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionID23Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionID23Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionID23Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionID23Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionID23Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID23Hamming_swigregister(itkWindowedSincInterpolateImageFunctionID23Hamming)

def itkWindowedSincInterpolateImageFunctionID23Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionID23Lanczos.New()

class itkWindowedSincInterpolateImageFunctionID23Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionID23Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionID23Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID23Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionID23Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID23Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionID23Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionID23Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID23Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionID23Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionID23Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionID23Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionID23Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionID23Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionID23Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID23Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionID23Lanczos)

def itkWindowedSincInterpolateImageFunctionID23Welch_New():
    return itkWindowedSincInterpolateImageFunctionID23Welch.New()

class itkWindowedSincInterpolateImageFunctionID23Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionID23Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionID23Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID23Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionID23Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID23Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionID23Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionID23Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID23Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionID23Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionID23Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionID23Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionID23Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionID23Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionID23Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID23Welch_swigregister(itkWindowedSincInterpolateImageFunctionID23Welch)

def itkWindowedSincInterpolateImageFunctionID32Cosine_New():
    return itkWindowedSincInterpolateImageFunctionID32Cosine.New()

class itkWindowedSincInterpolateImageFunctionID32Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionID32Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionID32Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID32Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionID32Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID32Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionID32Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionID32Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID32Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionID32Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionID32Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionID32Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionID32Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionID32Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionID32Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID32Cosine_swigregister(itkWindowedSincInterpolateImageFunctionID32Cosine)

def itkWindowedSincInterpolateImageFunctionID32Hamming_New():
    return itkWindowedSincInterpolateImageFunctionID32Hamming.New()

class itkWindowedSincInterpolateImageFunctionID32Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionID32Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionID32Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID32Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionID32Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID32Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionID32Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionID32Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID32Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionID32Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionID32Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionID32Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionID32Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionID32Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionID32Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID32Hamming_swigregister(itkWindowedSincInterpolateImageFunctionID32Hamming)

def itkWindowedSincInterpolateImageFunctionID32Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionID32Lanczos.New()

class itkWindowedSincInterpolateImageFunctionID32Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionID32Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionID32Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID32Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionID32Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID32Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionID32Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionID32Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID32Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionID32Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionID32Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionID32Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionID32Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionID32Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionID32Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID32Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionID32Lanczos)

def itkWindowedSincInterpolateImageFunctionID32Welch_New():
    return itkWindowedSincInterpolateImageFunctionID32Welch.New()

class itkWindowedSincInterpolateImageFunctionID32Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionID32Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionID32Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID32Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionID32Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID32Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionID32Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionID32Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID32Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionID32Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionID32Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionID32Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionID32Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionID32Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionID32Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID32Welch_swigregister(itkWindowedSincInterpolateImageFunctionID32Welch)

def itkWindowedSincInterpolateImageFunctionID33Cosine_New():
    return itkWindowedSincInterpolateImageFunctionID33Cosine.New()

class itkWindowedSincInterpolateImageFunctionID33Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionID33Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionID33Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID33Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionID33Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID33Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionID33Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionID33Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID33Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionID33Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionID33Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionID33Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionID33Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionID33Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionID33Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID33Cosine_swigregister(itkWindowedSincInterpolateImageFunctionID33Cosine)

def itkWindowedSincInterpolateImageFunctionID33Hamming_New():
    return itkWindowedSincInterpolateImageFunctionID33Hamming.New()

class itkWindowedSincInterpolateImageFunctionID33Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionID33Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionID33Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID33Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionID33Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID33Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionID33Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionID33Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID33Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionID33Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionID33Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionID33Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionID33Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionID33Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionID33Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID33Hamming_swigregister(itkWindowedSincInterpolateImageFunctionID33Hamming)

def itkWindowedSincInterpolateImageFunctionID33Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionID33Lanczos.New()

class itkWindowedSincInterpolateImageFunctionID33Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionID33Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionID33Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID33Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionID33Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID33Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionID33Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionID33Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID33Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionID33Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionID33Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionID33Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionID33Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionID33Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionID33Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID33Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionID33Lanczos)

def itkWindowedSincInterpolateImageFunctionID33Welch_New():
    return itkWindowedSincInterpolateImageFunctionID33Welch.New()

class itkWindowedSincInterpolateImageFunctionID33Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionID33Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionID33Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID33Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionID33Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID33Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionID33Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionID33Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID33Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionID33Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionID33Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionID33Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionID33Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionID33Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionID33Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID33Welch_swigregister(itkWindowedSincInterpolateImageFunctionID33Welch)

def itkWindowedSincInterpolateImageFunctionID42Cosine_New():
    return itkWindowedSincInterpolateImageFunctionID42Cosine.New()

class itkWindowedSincInterpolateImageFunctionID42Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionID42Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionID42Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID42Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionID42Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID42Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionID42Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionID42Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID42Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionID42Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionID42Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionID42Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionID42Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionID42Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionID42Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID42Cosine_swigregister(itkWindowedSincInterpolateImageFunctionID42Cosine)

def itkWindowedSincInterpolateImageFunctionID42Hamming_New():
    return itkWindowedSincInterpolateImageFunctionID42Hamming.New()

class itkWindowedSincInterpolateImageFunctionID42Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionID42Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionID42Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID42Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionID42Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID42Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionID42Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionID42Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID42Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionID42Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionID42Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionID42Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionID42Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionID42Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionID42Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID42Hamming_swigregister(itkWindowedSincInterpolateImageFunctionID42Hamming)

def itkWindowedSincInterpolateImageFunctionID42Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionID42Lanczos.New()

class itkWindowedSincInterpolateImageFunctionID42Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionID42Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionID42Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID42Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionID42Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID42Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionID42Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionID42Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID42Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionID42Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionID42Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionID42Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionID42Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionID42Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionID42Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID42Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionID42Lanczos)

def itkWindowedSincInterpolateImageFunctionID42Welch_New():
    return itkWindowedSincInterpolateImageFunctionID42Welch.New()

class itkWindowedSincInterpolateImageFunctionID42Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionID42Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionID42Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID42Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionID42Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID42Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionID42Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionID42Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID42Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionID42Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionID42Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionID42Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionID42Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionID42Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionID42Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID42Welch_swigregister(itkWindowedSincInterpolateImageFunctionID42Welch)

def itkWindowedSincInterpolateImageFunctionID43Cosine_New():
    return itkWindowedSincInterpolateImageFunctionID43Cosine.New()

class itkWindowedSincInterpolateImageFunctionID43Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionID43Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionID43Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID43Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionID43Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID43Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionID43Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionID43Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID43Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionID43Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionID43Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionID43Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionID43Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionID43Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionID43Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID43Cosine_swigregister(itkWindowedSincInterpolateImageFunctionID43Cosine)

def itkWindowedSincInterpolateImageFunctionID43Hamming_New():
    return itkWindowedSincInterpolateImageFunctionID43Hamming.New()

class itkWindowedSincInterpolateImageFunctionID43Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionID43Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionID43Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID43Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionID43Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID43Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionID43Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionID43Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID43Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionID43Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionID43Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionID43Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionID43Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionID43Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionID43Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID43Hamming_swigregister(itkWindowedSincInterpolateImageFunctionID43Hamming)

def itkWindowedSincInterpolateImageFunctionID43Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionID43Lanczos.New()

class itkWindowedSincInterpolateImageFunctionID43Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionID43Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionID43Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID43Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionID43Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID43Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionID43Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionID43Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID43Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionID43Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionID43Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionID43Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionID43Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionID43Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionID43Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID43Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionID43Lanczos)

def itkWindowedSincInterpolateImageFunctionID43Welch_New():
    return itkWindowedSincInterpolateImageFunctionID43Welch.New()

class itkWindowedSincInterpolateImageFunctionID43Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionID43Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionID43Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID43Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionID43Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID43Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionID43Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionID43Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID43Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionID43Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionID43Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionID43Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionID43Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionID43Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionID43Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionID43Welch_swigregister(itkWindowedSincInterpolateImageFunctionID43Welch)

def itkWindowedSincInterpolateImageFunctionIF22Cosine_New():
    return itkWindowedSincInterpolateImageFunctionIF22Cosine.New()

class itkWindowedSincInterpolateImageFunctionIF22Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIF22Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIF22Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF22Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIF22Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF22Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIF22Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIF22Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF22Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIF22Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIF22Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIF22Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIF22Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIF22Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIF22Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF22Cosine_swigregister(itkWindowedSincInterpolateImageFunctionIF22Cosine)

def itkWindowedSincInterpolateImageFunctionIF22Hamming_New():
    return itkWindowedSincInterpolateImageFunctionIF22Hamming.New()

class itkWindowedSincInterpolateImageFunctionIF22Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIF22Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIF22Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF22Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIF22Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF22Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIF22Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIF22Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF22Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIF22Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIF22Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIF22Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIF22Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIF22Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIF22Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF22Hamming_swigregister(itkWindowedSincInterpolateImageFunctionIF22Hamming)

def itkWindowedSincInterpolateImageFunctionIF22Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionIF22Lanczos.New()

class itkWindowedSincInterpolateImageFunctionIF22Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIF22Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIF22Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF22Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIF22Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF22Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIF22Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIF22Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF22Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIF22Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIF22Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIF22Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIF22Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIF22Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIF22Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF22Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionIF22Lanczos)

def itkWindowedSincInterpolateImageFunctionIF22Welch_New():
    return itkWindowedSincInterpolateImageFunctionIF22Welch.New()

class itkWindowedSincInterpolateImageFunctionIF22Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIF22Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIF22Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF22Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIF22Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF22Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIF22Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIF22Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF22Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIF22Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIF22Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIF22Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIF22Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIF22Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIF22Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF22Welch_swigregister(itkWindowedSincInterpolateImageFunctionIF22Welch)

def itkWindowedSincInterpolateImageFunctionIF23Cosine_New():
    return itkWindowedSincInterpolateImageFunctionIF23Cosine.New()

class itkWindowedSincInterpolateImageFunctionIF23Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIF23Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIF23Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF23Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIF23Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF23Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIF23Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIF23Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF23Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIF23Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIF23Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIF23Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIF23Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIF23Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIF23Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF23Cosine_swigregister(itkWindowedSincInterpolateImageFunctionIF23Cosine)

def itkWindowedSincInterpolateImageFunctionIF23Hamming_New():
    return itkWindowedSincInterpolateImageFunctionIF23Hamming.New()

class itkWindowedSincInterpolateImageFunctionIF23Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIF23Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIF23Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF23Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIF23Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF23Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIF23Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIF23Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF23Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIF23Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIF23Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIF23Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIF23Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIF23Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIF23Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF23Hamming_swigregister(itkWindowedSincInterpolateImageFunctionIF23Hamming)

def itkWindowedSincInterpolateImageFunctionIF23Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionIF23Lanczos.New()

class itkWindowedSincInterpolateImageFunctionIF23Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIF23Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIF23Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF23Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIF23Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF23Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIF23Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIF23Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF23Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIF23Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIF23Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIF23Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIF23Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIF23Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIF23Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF23Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionIF23Lanczos)

def itkWindowedSincInterpolateImageFunctionIF23Welch_New():
    return itkWindowedSincInterpolateImageFunctionIF23Welch.New()

class itkWindowedSincInterpolateImageFunctionIF23Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIF23Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIF23Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF23Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIF23Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF23Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIF23Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIF23Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF23Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIF23Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIF23Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIF23Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIF23Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIF23Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIF23Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF23Welch_swigregister(itkWindowedSincInterpolateImageFunctionIF23Welch)

def itkWindowedSincInterpolateImageFunctionIF32Cosine_New():
    return itkWindowedSincInterpolateImageFunctionIF32Cosine.New()

class itkWindowedSincInterpolateImageFunctionIF32Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIF32Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIF32Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF32Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIF32Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF32Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIF32Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIF32Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF32Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIF32Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIF32Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIF32Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIF32Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIF32Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIF32Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF32Cosine_swigregister(itkWindowedSincInterpolateImageFunctionIF32Cosine)

def itkWindowedSincInterpolateImageFunctionIF32Hamming_New():
    return itkWindowedSincInterpolateImageFunctionIF32Hamming.New()

class itkWindowedSincInterpolateImageFunctionIF32Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIF32Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIF32Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF32Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIF32Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF32Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIF32Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIF32Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF32Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIF32Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIF32Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIF32Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIF32Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIF32Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIF32Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF32Hamming_swigregister(itkWindowedSincInterpolateImageFunctionIF32Hamming)

def itkWindowedSincInterpolateImageFunctionIF32Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionIF32Lanczos.New()

class itkWindowedSincInterpolateImageFunctionIF32Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIF32Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIF32Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF32Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIF32Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF32Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIF32Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIF32Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF32Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIF32Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIF32Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIF32Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIF32Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIF32Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIF32Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF32Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionIF32Lanczos)

def itkWindowedSincInterpolateImageFunctionIF32Welch_New():
    return itkWindowedSincInterpolateImageFunctionIF32Welch.New()

class itkWindowedSincInterpolateImageFunctionIF32Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIF32Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIF32Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF32Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIF32Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF32Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIF32Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIF32Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF32Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIF32Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIF32Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIF32Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIF32Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIF32Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIF32Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF32Welch_swigregister(itkWindowedSincInterpolateImageFunctionIF32Welch)

def itkWindowedSincInterpolateImageFunctionIF33Cosine_New():
    return itkWindowedSincInterpolateImageFunctionIF33Cosine.New()

class itkWindowedSincInterpolateImageFunctionIF33Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIF33Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIF33Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF33Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIF33Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF33Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIF33Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIF33Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF33Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIF33Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIF33Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIF33Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIF33Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIF33Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIF33Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF33Cosine_swigregister(itkWindowedSincInterpolateImageFunctionIF33Cosine)

def itkWindowedSincInterpolateImageFunctionIF33Hamming_New():
    return itkWindowedSincInterpolateImageFunctionIF33Hamming.New()

class itkWindowedSincInterpolateImageFunctionIF33Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIF33Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIF33Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF33Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIF33Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF33Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIF33Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIF33Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF33Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIF33Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIF33Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIF33Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIF33Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIF33Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIF33Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF33Hamming_swigregister(itkWindowedSincInterpolateImageFunctionIF33Hamming)

def itkWindowedSincInterpolateImageFunctionIF33Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionIF33Lanczos.New()

class itkWindowedSincInterpolateImageFunctionIF33Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIF33Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIF33Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF33Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIF33Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF33Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIF33Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIF33Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF33Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIF33Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIF33Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIF33Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIF33Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIF33Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIF33Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF33Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionIF33Lanczos)

def itkWindowedSincInterpolateImageFunctionIF33Welch_New():
    return itkWindowedSincInterpolateImageFunctionIF33Welch.New()

class itkWindowedSincInterpolateImageFunctionIF33Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIF33Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIF33Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF33Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIF33Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF33Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIF33Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIF33Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF33Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIF33Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIF33Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIF33Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIF33Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIF33Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIF33Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF33Welch_swigregister(itkWindowedSincInterpolateImageFunctionIF33Welch)

def itkWindowedSincInterpolateImageFunctionIF42Cosine_New():
    return itkWindowedSincInterpolateImageFunctionIF42Cosine.New()

class itkWindowedSincInterpolateImageFunctionIF42Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIF42Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIF42Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF42Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIF42Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF42Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIF42Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIF42Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF42Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIF42Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIF42Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIF42Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIF42Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIF42Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIF42Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF42Cosine_swigregister(itkWindowedSincInterpolateImageFunctionIF42Cosine)

def itkWindowedSincInterpolateImageFunctionIF42Hamming_New():
    return itkWindowedSincInterpolateImageFunctionIF42Hamming.New()

class itkWindowedSincInterpolateImageFunctionIF42Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIF42Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIF42Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF42Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIF42Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF42Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIF42Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIF42Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF42Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIF42Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIF42Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIF42Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIF42Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIF42Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIF42Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF42Hamming_swigregister(itkWindowedSincInterpolateImageFunctionIF42Hamming)

def itkWindowedSincInterpolateImageFunctionIF42Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionIF42Lanczos.New()

class itkWindowedSincInterpolateImageFunctionIF42Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIF42Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIF42Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF42Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIF42Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF42Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIF42Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIF42Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF42Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIF42Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIF42Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIF42Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIF42Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIF42Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIF42Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF42Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionIF42Lanczos)

def itkWindowedSincInterpolateImageFunctionIF42Welch_New():
    return itkWindowedSincInterpolateImageFunctionIF42Welch.New()

class itkWindowedSincInterpolateImageFunctionIF42Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIF42Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIF42Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF42Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIF42Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF42Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIF42Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIF42Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF42Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIF42Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIF42Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIF42Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIF42Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIF42Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIF42Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF42Welch_swigregister(itkWindowedSincInterpolateImageFunctionIF42Welch)

def itkWindowedSincInterpolateImageFunctionIF43Cosine_New():
    return itkWindowedSincInterpolateImageFunctionIF43Cosine.New()

class itkWindowedSincInterpolateImageFunctionIF43Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIF43Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIF43Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF43Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIF43Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF43Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIF43Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIF43Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF43Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIF43Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIF43Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIF43Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIF43Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIF43Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIF43Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF43Cosine_swigregister(itkWindowedSincInterpolateImageFunctionIF43Cosine)

def itkWindowedSincInterpolateImageFunctionIF43Hamming_New():
    return itkWindowedSincInterpolateImageFunctionIF43Hamming.New()

class itkWindowedSincInterpolateImageFunctionIF43Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIF43Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIF43Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF43Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIF43Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF43Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIF43Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIF43Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF43Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIF43Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIF43Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIF43Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIF43Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIF43Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIF43Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF43Hamming_swigregister(itkWindowedSincInterpolateImageFunctionIF43Hamming)

def itkWindowedSincInterpolateImageFunctionIF43Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionIF43Lanczos.New()

class itkWindowedSincInterpolateImageFunctionIF43Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIF43Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIF43Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF43Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIF43Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF43Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIF43Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIF43Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF43Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIF43Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIF43Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIF43Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIF43Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIF43Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIF43Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF43Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionIF43Lanczos)

def itkWindowedSincInterpolateImageFunctionIF43Welch_New():
    return itkWindowedSincInterpolateImageFunctionIF43Welch.New()

class itkWindowedSincInterpolateImageFunctionIF43Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIF43Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIF43Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF43Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIF43Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF43Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIF43Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIF43Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF43Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIF43Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIF43Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIF43Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIF43Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIF43Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIF43Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIF43Welch_swigregister(itkWindowedSincInterpolateImageFunctionIF43Welch)

def itkWindowedSincInterpolateImageFunctionISS22Cosine_New():
    return itkWindowedSincInterpolateImageFunctionISS22Cosine.New()

class itkWindowedSincInterpolateImageFunctionISS22Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionISS22Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionISS22Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS22Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionISS22Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS22Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionISS22Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionISS22Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS22Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionISS22Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionISS22Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionISS22Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionISS22Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionISS22Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionISS22Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS22Cosine_swigregister(itkWindowedSincInterpolateImageFunctionISS22Cosine)

def itkWindowedSincInterpolateImageFunctionISS22Hamming_New():
    return itkWindowedSincInterpolateImageFunctionISS22Hamming.New()

class itkWindowedSincInterpolateImageFunctionISS22Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionISS22Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionISS22Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS22Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionISS22Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS22Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionISS22Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionISS22Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS22Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionISS22Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionISS22Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionISS22Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionISS22Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionISS22Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionISS22Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS22Hamming_swigregister(itkWindowedSincInterpolateImageFunctionISS22Hamming)

def itkWindowedSincInterpolateImageFunctionISS22Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionISS22Lanczos.New()

class itkWindowedSincInterpolateImageFunctionISS22Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionISS22Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionISS22Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS22Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionISS22Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS22Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionISS22Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionISS22Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS22Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionISS22Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionISS22Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionISS22Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionISS22Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionISS22Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionISS22Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS22Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionISS22Lanczos)

def itkWindowedSincInterpolateImageFunctionISS22Welch_New():
    return itkWindowedSincInterpolateImageFunctionISS22Welch.New()

class itkWindowedSincInterpolateImageFunctionISS22Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionISS22Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionISS22Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS22Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionISS22Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS22Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionISS22Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionISS22Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS22Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionISS22Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionISS22Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionISS22Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionISS22Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionISS22Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionISS22Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS22Welch_swigregister(itkWindowedSincInterpolateImageFunctionISS22Welch)

def itkWindowedSincInterpolateImageFunctionISS23Cosine_New():
    return itkWindowedSincInterpolateImageFunctionISS23Cosine.New()

class itkWindowedSincInterpolateImageFunctionISS23Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionISS23Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionISS23Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS23Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionISS23Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS23Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionISS23Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionISS23Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS23Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionISS23Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionISS23Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionISS23Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionISS23Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionISS23Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionISS23Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS23Cosine_swigregister(itkWindowedSincInterpolateImageFunctionISS23Cosine)

def itkWindowedSincInterpolateImageFunctionISS23Hamming_New():
    return itkWindowedSincInterpolateImageFunctionISS23Hamming.New()

class itkWindowedSincInterpolateImageFunctionISS23Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionISS23Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionISS23Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS23Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionISS23Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS23Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionISS23Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionISS23Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS23Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionISS23Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionISS23Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionISS23Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionISS23Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionISS23Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionISS23Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS23Hamming_swigregister(itkWindowedSincInterpolateImageFunctionISS23Hamming)

def itkWindowedSincInterpolateImageFunctionISS23Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionISS23Lanczos.New()

class itkWindowedSincInterpolateImageFunctionISS23Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionISS23Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionISS23Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS23Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionISS23Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS23Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionISS23Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionISS23Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS23Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionISS23Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionISS23Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionISS23Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionISS23Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionISS23Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionISS23Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS23Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionISS23Lanczos)

def itkWindowedSincInterpolateImageFunctionISS23Welch_New():
    return itkWindowedSincInterpolateImageFunctionISS23Welch.New()

class itkWindowedSincInterpolateImageFunctionISS23Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionISS23Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionISS23Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS23Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionISS23Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS23Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionISS23Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionISS23Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS23Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionISS23Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionISS23Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionISS23Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionISS23Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionISS23Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionISS23Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS23Welch_swigregister(itkWindowedSincInterpolateImageFunctionISS23Welch)

def itkWindowedSincInterpolateImageFunctionISS32Cosine_New():
    return itkWindowedSincInterpolateImageFunctionISS32Cosine.New()

class itkWindowedSincInterpolateImageFunctionISS32Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionISS32Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionISS32Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS32Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionISS32Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS32Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionISS32Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionISS32Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS32Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionISS32Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionISS32Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionISS32Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionISS32Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionISS32Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionISS32Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS32Cosine_swigregister(itkWindowedSincInterpolateImageFunctionISS32Cosine)

def itkWindowedSincInterpolateImageFunctionISS32Hamming_New():
    return itkWindowedSincInterpolateImageFunctionISS32Hamming.New()

class itkWindowedSincInterpolateImageFunctionISS32Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionISS32Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionISS32Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS32Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionISS32Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS32Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionISS32Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionISS32Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS32Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionISS32Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionISS32Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionISS32Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionISS32Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionISS32Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionISS32Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS32Hamming_swigregister(itkWindowedSincInterpolateImageFunctionISS32Hamming)

def itkWindowedSincInterpolateImageFunctionISS32Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionISS32Lanczos.New()

class itkWindowedSincInterpolateImageFunctionISS32Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionISS32Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionISS32Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS32Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionISS32Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS32Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionISS32Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionISS32Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS32Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionISS32Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionISS32Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionISS32Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionISS32Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionISS32Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionISS32Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS32Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionISS32Lanczos)

def itkWindowedSincInterpolateImageFunctionISS32Welch_New():
    return itkWindowedSincInterpolateImageFunctionISS32Welch.New()

class itkWindowedSincInterpolateImageFunctionISS32Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionISS32Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionISS32Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS32Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionISS32Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS32Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionISS32Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionISS32Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS32Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionISS32Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionISS32Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionISS32Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionISS32Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionISS32Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionISS32Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS32Welch_swigregister(itkWindowedSincInterpolateImageFunctionISS32Welch)

def itkWindowedSincInterpolateImageFunctionISS33Cosine_New():
    return itkWindowedSincInterpolateImageFunctionISS33Cosine.New()

class itkWindowedSincInterpolateImageFunctionISS33Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionISS33Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionISS33Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS33Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionISS33Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS33Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionISS33Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionISS33Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS33Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionISS33Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionISS33Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionISS33Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionISS33Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionISS33Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionISS33Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS33Cosine_swigregister(itkWindowedSincInterpolateImageFunctionISS33Cosine)

def itkWindowedSincInterpolateImageFunctionISS33Hamming_New():
    return itkWindowedSincInterpolateImageFunctionISS33Hamming.New()

class itkWindowedSincInterpolateImageFunctionISS33Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionISS33Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionISS33Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS33Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionISS33Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS33Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionISS33Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionISS33Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS33Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionISS33Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionISS33Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionISS33Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionISS33Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionISS33Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionISS33Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS33Hamming_swigregister(itkWindowedSincInterpolateImageFunctionISS33Hamming)

def itkWindowedSincInterpolateImageFunctionISS33Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionISS33Lanczos.New()

class itkWindowedSincInterpolateImageFunctionISS33Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionISS33Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionISS33Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS33Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionISS33Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS33Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionISS33Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionISS33Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS33Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionISS33Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionISS33Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionISS33Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionISS33Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionISS33Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionISS33Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS33Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionISS33Lanczos)

def itkWindowedSincInterpolateImageFunctionISS33Welch_New():
    return itkWindowedSincInterpolateImageFunctionISS33Welch.New()

class itkWindowedSincInterpolateImageFunctionISS33Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionISS33Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionISS33Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS33Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionISS33Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS33Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionISS33Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionISS33Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS33Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionISS33Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionISS33Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionISS33Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionISS33Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionISS33Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionISS33Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS33Welch_swigregister(itkWindowedSincInterpolateImageFunctionISS33Welch)

def itkWindowedSincInterpolateImageFunctionISS42Cosine_New():
    return itkWindowedSincInterpolateImageFunctionISS42Cosine.New()

class itkWindowedSincInterpolateImageFunctionISS42Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionISS42Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionISS42Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS42Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionISS42Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS42Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionISS42Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionISS42Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS42Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionISS42Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionISS42Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionISS42Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionISS42Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionISS42Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionISS42Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS42Cosine_swigregister(itkWindowedSincInterpolateImageFunctionISS42Cosine)

def itkWindowedSincInterpolateImageFunctionISS42Hamming_New():
    return itkWindowedSincInterpolateImageFunctionISS42Hamming.New()

class itkWindowedSincInterpolateImageFunctionISS42Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionISS42Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionISS42Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS42Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionISS42Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS42Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionISS42Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionISS42Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS42Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionISS42Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionISS42Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionISS42Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionISS42Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionISS42Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionISS42Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS42Hamming_swigregister(itkWindowedSincInterpolateImageFunctionISS42Hamming)

def itkWindowedSincInterpolateImageFunctionISS42Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionISS42Lanczos.New()

class itkWindowedSincInterpolateImageFunctionISS42Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionISS42Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionISS42Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS42Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionISS42Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS42Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionISS42Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionISS42Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS42Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionISS42Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionISS42Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionISS42Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionISS42Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionISS42Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionISS42Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS42Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionISS42Lanczos)

def itkWindowedSincInterpolateImageFunctionISS42Welch_New():
    return itkWindowedSincInterpolateImageFunctionISS42Welch.New()

class itkWindowedSincInterpolateImageFunctionISS42Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionISS42Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionISS42Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS42Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionISS42Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS42Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionISS42Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionISS42Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS42Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionISS42Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionISS42Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionISS42Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionISS42Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionISS42Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionISS42Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS42Welch_swigregister(itkWindowedSincInterpolateImageFunctionISS42Welch)

def itkWindowedSincInterpolateImageFunctionISS43Cosine_New():
    return itkWindowedSincInterpolateImageFunctionISS43Cosine.New()

class itkWindowedSincInterpolateImageFunctionISS43Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionISS43Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionISS43Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS43Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionISS43Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS43Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionISS43Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionISS43Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS43Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionISS43Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionISS43Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionISS43Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionISS43Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionISS43Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionISS43Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS43Cosine_swigregister(itkWindowedSincInterpolateImageFunctionISS43Cosine)

def itkWindowedSincInterpolateImageFunctionISS43Hamming_New():
    return itkWindowedSincInterpolateImageFunctionISS43Hamming.New()

class itkWindowedSincInterpolateImageFunctionISS43Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionISS43Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionISS43Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS43Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionISS43Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS43Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionISS43Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionISS43Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS43Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionISS43Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionISS43Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionISS43Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionISS43Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionISS43Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionISS43Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS43Hamming_swigregister(itkWindowedSincInterpolateImageFunctionISS43Hamming)

def itkWindowedSincInterpolateImageFunctionISS43Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionISS43Lanczos.New()

class itkWindowedSincInterpolateImageFunctionISS43Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionISS43Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionISS43Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS43Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionISS43Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS43Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionISS43Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionISS43Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS43Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionISS43Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionISS43Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionISS43Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionISS43Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionISS43Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionISS43Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS43Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionISS43Lanczos)

def itkWindowedSincInterpolateImageFunctionISS43Welch_New():
    return itkWindowedSincInterpolateImageFunctionISS43Welch.New()

class itkWindowedSincInterpolateImageFunctionISS43Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionISS43Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionISS43Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS43Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionISS43Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS43Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionISS43Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionISS43Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS43Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionISS43Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionISS43Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionISS43Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionISS43Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionISS43Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionISS43Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionISS43Welch_swigregister(itkWindowedSincInterpolateImageFunctionISS43Welch)

def itkWindowedSincInterpolateImageFunctionIUC22Cosine_New():
    return itkWindowedSincInterpolateImageFunctionIUC22Cosine.New()

class itkWindowedSincInterpolateImageFunctionIUC22Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUC22Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUC22Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC22Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUC22Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC22Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUC22Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUC22Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC22Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUC22Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUC22Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUC22Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUC22Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUC22Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUC22Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC22Cosine_swigregister(itkWindowedSincInterpolateImageFunctionIUC22Cosine)

def itkWindowedSincInterpolateImageFunctionIUC22Hamming_New():
    return itkWindowedSincInterpolateImageFunctionIUC22Hamming.New()

class itkWindowedSincInterpolateImageFunctionIUC22Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUC22Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUC22Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC22Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUC22Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC22Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUC22Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUC22Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC22Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUC22Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUC22Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUC22Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUC22Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUC22Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUC22Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC22Hamming_swigregister(itkWindowedSincInterpolateImageFunctionIUC22Hamming)

def itkWindowedSincInterpolateImageFunctionIUC22Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionIUC22Lanczos.New()

class itkWindowedSincInterpolateImageFunctionIUC22Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUC22Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUC22Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC22Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUC22Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC22Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUC22Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUC22Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC22Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUC22Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUC22Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUC22Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUC22Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUC22Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUC22Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC22Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionIUC22Lanczos)

def itkWindowedSincInterpolateImageFunctionIUC22Welch_New():
    return itkWindowedSincInterpolateImageFunctionIUC22Welch.New()

class itkWindowedSincInterpolateImageFunctionIUC22Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUC22Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUC22Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC22Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUC22Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC22Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUC22Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUC22Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC22Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUC22Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUC22Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUC22Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUC22Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUC22Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUC22Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC22Welch_swigregister(itkWindowedSincInterpolateImageFunctionIUC22Welch)

def itkWindowedSincInterpolateImageFunctionIUC23Cosine_New():
    return itkWindowedSincInterpolateImageFunctionIUC23Cosine.New()

class itkWindowedSincInterpolateImageFunctionIUC23Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUC23Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUC23Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC23Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUC23Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC23Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUC23Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUC23Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC23Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUC23Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUC23Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUC23Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUC23Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUC23Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUC23Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC23Cosine_swigregister(itkWindowedSincInterpolateImageFunctionIUC23Cosine)

def itkWindowedSincInterpolateImageFunctionIUC23Hamming_New():
    return itkWindowedSincInterpolateImageFunctionIUC23Hamming.New()

class itkWindowedSincInterpolateImageFunctionIUC23Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUC23Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUC23Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC23Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUC23Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC23Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUC23Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUC23Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC23Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUC23Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUC23Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUC23Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUC23Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUC23Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUC23Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC23Hamming_swigregister(itkWindowedSincInterpolateImageFunctionIUC23Hamming)

def itkWindowedSincInterpolateImageFunctionIUC23Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionIUC23Lanczos.New()

class itkWindowedSincInterpolateImageFunctionIUC23Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUC23Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUC23Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC23Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUC23Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC23Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUC23Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUC23Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC23Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUC23Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUC23Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUC23Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUC23Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUC23Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUC23Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC23Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionIUC23Lanczos)

def itkWindowedSincInterpolateImageFunctionIUC23Welch_New():
    return itkWindowedSincInterpolateImageFunctionIUC23Welch.New()

class itkWindowedSincInterpolateImageFunctionIUC23Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUC23Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUC23Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC23Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUC23Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC23Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUC23Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUC23Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC23Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUC23Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUC23Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUC23Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUC23Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUC23Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUC23Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC23Welch_swigregister(itkWindowedSincInterpolateImageFunctionIUC23Welch)

def itkWindowedSincInterpolateImageFunctionIUC32Cosine_New():
    return itkWindowedSincInterpolateImageFunctionIUC32Cosine.New()

class itkWindowedSincInterpolateImageFunctionIUC32Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUC32Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUC32Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC32Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUC32Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC32Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUC32Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUC32Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC32Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUC32Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUC32Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUC32Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUC32Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUC32Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUC32Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC32Cosine_swigregister(itkWindowedSincInterpolateImageFunctionIUC32Cosine)

def itkWindowedSincInterpolateImageFunctionIUC32Hamming_New():
    return itkWindowedSincInterpolateImageFunctionIUC32Hamming.New()

class itkWindowedSincInterpolateImageFunctionIUC32Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUC32Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUC32Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC32Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUC32Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC32Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUC32Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUC32Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC32Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUC32Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUC32Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUC32Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUC32Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUC32Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUC32Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC32Hamming_swigregister(itkWindowedSincInterpolateImageFunctionIUC32Hamming)

def itkWindowedSincInterpolateImageFunctionIUC32Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionIUC32Lanczos.New()

class itkWindowedSincInterpolateImageFunctionIUC32Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUC32Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUC32Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC32Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUC32Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC32Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUC32Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUC32Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC32Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUC32Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUC32Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUC32Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUC32Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUC32Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUC32Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC32Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionIUC32Lanczos)

def itkWindowedSincInterpolateImageFunctionIUC32Welch_New():
    return itkWindowedSincInterpolateImageFunctionIUC32Welch.New()

class itkWindowedSincInterpolateImageFunctionIUC32Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUC32Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUC32Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC32Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUC32Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC32Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUC32Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUC32Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC32Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUC32Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUC32Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUC32Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUC32Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUC32Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUC32Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC32Welch_swigregister(itkWindowedSincInterpolateImageFunctionIUC32Welch)

def itkWindowedSincInterpolateImageFunctionIUC33Cosine_New():
    return itkWindowedSincInterpolateImageFunctionIUC33Cosine.New()

class itkWindowedSincInterpolateImageFunctionIUC33Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUC33Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUC33Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC33Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUC33Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC33Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUC33Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUC33Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC33Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUC33Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUC33Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUC33Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUC33Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUC33Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUC33Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC33Cosine_swigregister(itkWindowedSincInterpolateImageFunctionIUC33Cosine)

def itkWindowedSincInterpolateImageFunctionIUC33Hamming_New():
    return itkWindowedSincInterpolateImageFunctionIUC33Hamming.New()

class itkWindowedSincInterpolateImageFunctionIUC33Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUC33Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUC33Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC33Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUC33Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC33Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUC33Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUC33Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC33Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUC33Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUC33Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUC33Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUC33Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUC33Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUC33Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC33Hamming_swigregister(itkWindowedSincInterpolateImageFunctionIUC33Hamming)

def itkWindowedSincInterpolateImageFunctionIUC33Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionIUC33Lanczos.New()

class itkWindowedSincInterpolateImageFunctionIUC33Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUC33Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUC33Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC33Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUC33Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC33Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUC33Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUC33Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC33Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUC33Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUC33Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUC33Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUC33Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUC33Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUC33Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC33Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionIUC33Lanczos)

def itkWindowedSincInterpolateImageFunctionIUC33Welch_New():
    return itkWindowedSincInterpolateImageFunctionIUC33Welch.New()

class itkWindowedSincInterpolateImageFunctionIUC33Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUC33Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUC33Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC33Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUC33Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC33Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUC33Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUC33Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC33Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUC33Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUC33Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUC33Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUC33Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUC33Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUC33Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC33Welch_swigregister(itkWindowedSincInterpolateImageFunctionIUC33Welch)

def itkWindowedSincInterpolateImageFunctionIUC42Cosine_New():
    return itkWindowedSincInterpolateImageFunctionIUC42Cosine.New()

class itkWindowedSincInterpolateImageFunctionIUC42Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUC42Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUC42Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC42Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUC42Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC42Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUC42Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUC42Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC42Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUC42Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUC42Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUC42Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUC42Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUC42Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUC42Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC42Cosine_swigregister(itkWindowedSincInterpolateImageFunctionIUC42Cosine)

def itkWindowedSincInterpolateImageFunctionIUC42Hamming_New():
    return itkWindowedSincInterpolateImageFunctionIUC42Hamming.New()

class itkWindowedSincInterpolateImageFunctionIUC42Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUC42Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUC42Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC42Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUC42Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC42Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUC42Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUC42Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC42Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUC42Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUC42Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUC42Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUC42Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUC42Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUC42Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC42Hamming_swigregister(itkWindowedSincInterpolateImageFunctionIUC42Hamming)

def itkWindowedSincInterpolateImageFunctionIUC42Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionIUC42Lanczos.New()

class itkWindowedSincInterpolateImageFunctionIUC42Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUC42Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUC42Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC42Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUC42Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC42Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUC42Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUC42Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC42Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUC42Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUC42Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUC42Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUC42Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUC42Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUC42Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC42Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionIUC42Lanczos)

def itkWindowedSincInterpolateImageFunctionIUC42Welch_New():
    return itkWindowedSincInterpolateImageFunctionIUC42Welch.New()

class itkWindowedSincInterpolateImageFunctionIUC42Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUC42Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUC42Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC42Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUC42Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC42Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUC42Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUC42Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC42Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUC42Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUC42Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUC42Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUC42Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUC42Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUC42Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC42Welch_swigregister(itkWindowedSincInterpolateImageFunctionIUC42Welch)

def itkWindowedSincInterpolateImageFunctionIUC43Cosine_New():
    return itkWindowedSincInterpolateImageFunctionIUC43Cosine.New()

class itkWindowedSincInterpolateImageFunctionIUC43Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUC43Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUC43Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC43Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUC43Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC43Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUC43Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUC43Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC43Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUC43Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUC43Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUC43Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUC43Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUC43Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUC43Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC43Cosine_swigregister(itkWindowedSincInterpolateImageFunctionIUC43Cosine)

def itkWindowedSincInterpolateImageFunctionIUC43Hamming_New():
    return itkWindowedSincInterpolateImageFunctionIUC43Hamming.New()

class itkWindowedSincInterpolateImageFunctionIUC43Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUC43Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUC43Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC43Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUC43Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC43Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUC43Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUC43Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC43Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUC43Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUC43Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUC43Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUC43Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUC43Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUC43Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC43Hamming_swigregister(itkWindowedSincInterpolateImageFunctionIUC43Hamming)

def itkWindowedSincInterpolateImageFunctionIUC43Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionIUC43Lanczos.New()

class itkWindowedSincInterpolateImageFunctionIUC43Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUC43Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUC43Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC43Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUC43Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC43Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUC43Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUC43Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC43Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUC43Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUC43Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUC43Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUC43Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUC43Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUC43Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC43Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionIUC43Lanczos)

def itkWindowedSincInterpolateImageFunctionIUC43Welch_New():
    return itkWindowedSincInterpolateImageFunctionIUC43Welch.New()

class itkWindowedSincInterpolateImageFunctionIUC43Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUC43Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUC43Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC43Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUC43Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC43Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUC43Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUC43Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC43Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUC43Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUC43Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUC43Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUC43Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUC43Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUC43Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUC43Welch_swigregister(itkWindowedSincInterpolateImageFunctionIUC43Welch)

def itkWindowedSincInterpolateImageFunctionIUS22Cosine_New():
    return itkWindowedSincInterpolateImageFunctionIUS22Cosine.New()

class itkWindowedSincInterpolateImageFunctionIUS22Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUS22Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUS22Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS22Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUS22Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS22Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUS22Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUS22Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS22Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUS22Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUS22Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUS22Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUS22Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUS22Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUS22Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS22Cosine_swigregister(itkWindowedSincInterpolateImageFunctionIUS22Cosine)

def itkWindowedSincInterpolateImageFunctionIUS22Hamming_New():
    return itkWindowedSincInterpolateImageFunctionIUS22Hamming.New()

class itkWindowedSincInterpolateImageFunctionIUS22Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUS22Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUS22Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS22Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUS22Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS22Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUS22Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUS22Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS22Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUS22Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUS22Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUS22Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUS22Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUS22Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUS22Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS22Hamming_swigregister(itkWindowedSincInterpolateImageFunctionIUS22Hamming)

def itkWindowedSincInterpolateImageFunctionIUS22Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionIUS22Lanczos.New()

class itkWindowedSincInterpolateImageFunctionIUS22Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUS22Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUS22Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS22Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUS22Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS22Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUS22Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUS22Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS22Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUS22Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUS22Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUS22Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUS22Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUS22Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUS22Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS22Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionIUS22Lanczos)

def itkWindowedSincInterpolateImageFunctionIUS22Welch_New():
    return itkWindowedSincInterpolateImageFunctionIUS22Welch.New()

class itkWindowedSincInterpolateImageFunctionIUS22Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUS22Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUS22Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS22Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUS22Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS22Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUS22Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUS22Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS22Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUS22Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUS22Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUS22Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUS22Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUS22Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUS22Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS22Welch_swigregister(itkWindowedSincInterpolateImageFunctionIUS22Welch)

def itkWindowedSincInterpolateImageFunctionIUS23Cosine_New():
    return itkWindowedSincInterpolateImageFunctionIUS23Cosine.New()

class itkWindowedSincInterpolateImageFunctionIUS23Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUS23Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUS23Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS23Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUS23Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS23Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUS23Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUS23Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS23Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUS23Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUS23Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUS23Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUS23Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUS23Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUS23Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS23Cosine_swigregister(itkWindowedSincInterpolateImageFunctionIUS23Cosine)

def itkWindowedSincInterpolateImageFunctionIUS23Hamming_New():
    return itkWindowedSincInterpolateImageFunctionIUS23Hamming.New()

class itkWindowedSincInterpolateImageFunctionIUS23Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUS23Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUS23Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS23Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUS23Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS23Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUS23Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUS23Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS23Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUS23Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUS23Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUS23Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUS23Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUS23Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUS23Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS23Hamming_swigregister(itkWindowedSincInterpolateImageFunctionIUS23Hamming)

def itkWindowedSincInterpolateImageFunctionIUS23Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionIUS23Lanczos.New()

class itkWindowedSincInterpolateImageFunctionIUS23Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUS23Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUS23Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS23Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUS23Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS23Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUS23Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUS23Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS23Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUS23Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUS23Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUS23Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUS23Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUS23Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUS23Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS23Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionIUS23Lanczos)

def itkWindowedSincInterpolateImageFunctionIUS23Welch_New():
    return itkWindowedSincInterpolateImageFunctionIUS23Welch.New()

class itkWindowedSincInterpolateImageFunctionIUS23Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUS23Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUS23Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS23Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUS23Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS23Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUS23Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUS23Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS23Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUS23Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUS23Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUS23Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUS23Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUS23Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUS23Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS23Welch_swigregister(itkWindowedSincInterpolateImageFunctionIUS23Welch)

def itkWindowedSincInterpolateImageFunctionIUS32Cosine_New():
    return itkWindowedSincInterpolateImageFunctionIUS32Cosine.New()

class itkWindowedSincInterpolateImageFunctionIUS32Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUS32Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUS32Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS32Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUS32Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS32Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUS32Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUS32Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS32Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUS32Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUS32Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUS32Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUS32Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUS32Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUS32Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS32Cosine_swigregister(itkWindowedSincInterpolateImageFunctionIUS32Cosine)

def itkWindowedSincInterpolateImageFunctionIUS32Hamming_New():
    return itkWindowedSincInterpolateImageFunctionIUS32Hamming.New()

class itkWindowedSincInterpolateImageFunctionIUS32Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUS32Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUS32Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS32Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUS32Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS32Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUS32Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUS32Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS32Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUS32Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUS32Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUS32Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUS32Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUS32Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUS32Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS32Hamming_swigregister(itkWindowedSincInterpolateImageFunctionIUS32Hamming)

def itkWindowedSincInterpolateImageFunctionIUS32Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionIUS32Lanczos.New()

class itkWindowedSincInterpolateImageFunctionIUS32Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUS32Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUS32Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS32Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUS32Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS32Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUS32Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUS32Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS32Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUS32Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUS32Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUS32Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUS32Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUS32Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUS32Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS32Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionIUS32Lanczos)

def itkWindowedSincInterpolateImageFunctionIUS32Welch_New():
    return itkWindowedSincInterpolateImageFunctionIUS32Welch.New()

class itkWindowedSincInterpolateImageFunctionIUS32Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUS32Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUS32Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS32Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUS32Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS32Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUS32Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUS32Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS32Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUS32Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUS32Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUS32Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUS32Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUS32Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUS32Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS32Welch_swigregister(itkWindowedSincInterpolateImageFunctionIUS32Welch)

def itkWindowedSincInterpolateImageFunctionIUS33Cosine_New():
    return itkWindowedSincInterpolateImageFunctionIUS33Cosine.New()

class itkWindowedSincInterpolateImageFunctionIUS33Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUS33Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUS33Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS33Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUS33Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS33Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUS33Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUS33Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS33Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUS33Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUS33Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUS33Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUS33Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUS33Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUS33Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS33Cosine_swigregister(itkWindowedSincInterpolateImageFunctionIUS33Cosine)

def itkWindowedSincInterpolateImageFunctionIUS33Hamming_New():
    return itkWindowedSincInterpolateImageFunctionIUS33Hamming.New()

class itkWindowedSincInterpolateImageFunctionIUS33Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUS33Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUS33Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS33Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUS33Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS33Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUS33Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUS33Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS33Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUS33Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUS33Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUS33Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUS33Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUS33Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUS33Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS33Hamming_swigregister(itkWindowedSincInterpolateImageFunctionIUS33Hamming)

def itkWindowedSincInterpolateImageFunctionIUS33Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionIUS33Lanczos.New()

class itkWindowedSincInterpolateImageFunctionIUS33Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUS33Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUS33Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS33Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUS33Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS33Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUS33Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUS33Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS33Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUS33Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUS33Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUS33Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUS33Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUS33Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUS33Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS33Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionIUS33Lanczos)

def itkWindowedSincInterpolateImageFunctionIUS33Welch_New():
    return itkWindowedSincInterpolateImageFunctionIUS33Welch.New()

class itkWindowedSincInterpolateImageFunctionIUS33Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUS33Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUS33Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS33Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUS33Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS33Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUS33Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUS33Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS33Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUS33Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUS33Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUS33Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUS33Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUS33Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUS33Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS33Welch_swigregister(itkWindowedSincInterpolateImageFunctionIUS33Welch)

def itkWindowedSincInterpolateImageFunctionIUS42Cosine_New():
    return itkWindowedSincInterpolateImageFunctionIUS42Cosine.New()

class itkWindowedSincInterpolateImageFunctionIUS42Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUS42Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUS42Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS42Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUS42Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS42Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUS42Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUS42Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS42Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUS42Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUS42Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUS42Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUS42Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUS42Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUS42Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS42Cosine_swigregister(itkWindowedSincInterpolateImageFunctionIUS42Cosine)

def itkWindowedSincInterpolateImageFunctionIUS42Hamming_New():
    return itkWindowedSincInterpolateImageFunctionIUS42Hamming.New()

class itkWindowedSincInterpolateImageFunctionIUS42Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUS42Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUS42Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS42Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUS42Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS42Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUS42Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUS42Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS42Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUS42Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUS42Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUS42Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUS42Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUS42Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUS42Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS42Hamming_swigregister(itkWindowedSincInterpolateImageFunctionIUS42Hamming)

def itkWindowedSincInterpolateImageFunctionIUS42Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionIUS42Lanczos.New()

class itkWindowedSincInterpolateImageFunctionIUS42Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUS42Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUS42Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS42Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUS42Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS42Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUS42Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUS42Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS42Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUS42Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUS42Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUS42Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUS42Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUS42Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUS42Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS42Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionIUS42Lanczos)

def itkWindowedSincInterpolateImageFunctionIUS42Welch_New():
    return itkWindowedSincInterpolateImageFunctionIUS42Welch.New()

class itkWindowedSincInterpolateImageFunctionIUS42Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUS42Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUS42Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS42Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUS42Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS42Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUS42Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUS42Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS42Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUS42Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUS42Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUS42Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUS42Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUS42Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUS42Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS42Welch_swigregister(itkWindowedSincInterpolateImageFunctionIUS42Welch)

def itkWindowedSincInterpolateImageFunctionIUS43Cosine_New():
    return itkWindowedSincInterpolateImageFunctionIUS43Cosine.New()

class itkWindowedSincInterpolateImageFunctionIUS43Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUS43Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUS43Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS43Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUS43Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS43Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUS43Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUS43Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS43Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUS43Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUS43Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUS43Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUS43Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUS43Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUS43Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS43Cosine_swigregister(itkWindowedSincInterpolateImageFunctionIUS43Cosine)

def itkWindowedSincInterpolateImageFunctionIUS43Hamming_New():
    return itkWindowedSincInterpolateImageFunctionIUS43Hamming.New()

class itkWindowedSincInterpolateImageFunctionIUS43Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUS43Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUS43Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS43Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUS43Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS43Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUS43Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUS43Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS43Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUS43Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUS43Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUS43Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUS43Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUS43Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUS43Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS43Hamming_swigregister(itkWindowedSincInterpolateImageFunctionIUS43Hamming)

def itkWindowedSincInterpolateImageFunctionIUS43Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionIUS43Lanczos.New()

class itkWindowedSincInterpolateImageFunctionIUS43Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUS43Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUS43Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS43Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUS43Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS43Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUS43Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUS43Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS43Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUS43Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUS43Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUS43Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUS43Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUS43Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUS43Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS43Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionIUS43Lanczos)

def itkWindowedSincInterpolateImageFunctionIUS43Welch_New():
    return itkWindowedSincInterpolateImageFunctionIUS43Welch.New()

class itkWindowedSincInterpolateImageFunctionIUS43Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS4D):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionIUS43Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionIUS43Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS43Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionIUS43Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS43Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionIUS43Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionIUS43Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS43Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionIUS43Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionIUS43Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionIUS43Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionIUS43Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionIUS43Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionIUS43Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionIUS43Welch_swigregister(itkWindowedSincInterpolateImageFunctionIUS43Welch)

def itkWindowedSincInterpolateImageFunctionPA3DSCIF2Cosine_New():
    return itkWindowedSincInterpolateImageFunctionPA3DSCIF2Cosine.New()

class itkWindowedSincInterpolateImageFunctionPA3DSCIF2Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionPA3DSCIFD):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionPA3DSCIF2Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionPA3DSCIF2Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF2Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionPA3DSCIF2Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF2Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionPA3DSCIF2Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionPA3DSCIF2Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF2Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionPA3DSCIF2Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionPA3DSCIF2Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionPA3DSCIF2Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionPA3DSCIF2Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionPA3DSCIF2Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionPA3DSCIF2Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF2Cosine_swigregister(itkWindowedSincInterpolateImageFunctionPA3DSCIF2Cosine)

def itkWindowedSincInterpolateImageFunctionPA3DSCIF2Hamming_New():
    return itkWindowedSincInterpolateImageFunctionPA3DSCIF2Hamming.New()

class itkWindowedSincInterpolateImageFunctionPA3DSCIF2Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionPA3DSCIFD):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionPA3DSCIF2Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionPA3DSCIF2Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF2Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionPA3DSCIF2Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF2Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionPA3DSCIF2Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionPA3DSCIF2Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF2Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionPA3DSCIF2Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionPA3DSCIF2Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionPA3DSCIF2Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionPA3DSCIF2Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionPA3DSCIF2Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionPA3DSCIF2Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF2Hamming_swigregister(itkWindowedSincInterpolateImageFunctionPA3DSCIF2Hamming)

def itkWindowedSincInterpolateImageFunctionPA3DSCIF2Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionPA3DSCIF2Lanczos.New()

class itkWindowedSincInterpolateImageFunctionPA3DSCIF2Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionPA3DSCIFD):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionPA3DSCIF2Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionPA3DSCIF2Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF2Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionPA3DSCIF2Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF2Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionPA3DSCIF2Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionPA3DSCIF2Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF2Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionPA3DSCIF2Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionPA3DSCIF2Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionPA3DSCIF2Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionPA3DSCIF2Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionPA3DSCIF2Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionPA3DSCIF2Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF2Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionPA3DSCIF2Lanczos)

def itkWindowedSincInterpolateImageFunctionPA3DSCIF2Welch_New():
    return itkWindowedSincInterpolateImageFunctionPA3DSCIF2Welch.New()

class itkWindowedSincInterpolateImageFunctionPA3DSCIF2Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionPA3DSCIFD):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionPA3DSCIF2Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionPA3DSCIF2Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF2Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionPA3DSCIF2Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF2Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionPA3DSCIF2Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionPA3DSCIF2Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF2Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionPA3DSCIF2Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionPA3DSCIF2Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionPA3DSCIF2Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionPA3DSCIF2Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionPA3DSCIF2Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionPA3DSCIF2Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF2Welch_swigregister(itkWindowedSincInterpolateImageFunctionPA3DSCIF2Welch)

def itkWindowedSincInterpolateImageFunctionPA3DSCIF3Cosine_New():
    return itkWindowedSincInterpolateImageFunctionPA3DSCIF3Cosine.New()

class itkWindowedSincInterpolateImageFunctionPA3DSCIF3Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionPA3DSCIFD):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionPA3DSCIF3Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionPA3DSCIF3Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF3Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionPA3DSCIF3Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF3Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionPA3DSCIF3Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionPA3DSCIF3Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF3Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionPA3DSCIF3Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionPA3DSCIF3Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionPA3DSCIF3Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionPA3DSCIF3Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionPA3DSCIF3Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionPA3DSCIF3Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF3Cosine_swigregister(itkWindowedSincInterpolateImageFunctionPA3DSCIF3Cosine)

def itkWindowedSincInterpolateImageFunctionPA3DSCIF3Hamming_New():
    return itkWindowedSincInterpolateImageFunctionPA3DSCIF3Hamming.New()

class itkWindowedSincInterpolateImageFunctionPA3DSCIF3Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionPA3DSCIFD):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionPA3DSCIF3Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionPA3DSCIF3Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF3Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionPA3DSCIF3Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF3Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionPA3DSCIF3Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionPA3DSCIF3Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF3Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionPA3DSCIF3Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionPA3DSCIF3Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionPA3DSCIF3Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionPA3DSCIF3Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionPA3DSCIF3Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionPA3DSCIF3Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF3Hamming_swigregister(itkWindowedSincInterpolateImageFunctionPA3DSCIF3Hamming)

def itkWindowedSincInterpolateImageFunctionPA3DSCIF3Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionPA3DSCIF3Lanczos.New()

class itkWindowedSincInterpolateImageFunctionPA3DSCIF3Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionPA3DSCIFD):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionPA3DSCIF3Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionPA3DSCIF3Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF3Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionPA3DSCIF3Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF3Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionPA3DSCIF3Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionPA3DSCIF3Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF3Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionPA3DSCIF3Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionPA3DSCIF3Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionPA3DSCIF3Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionPA3DSCIF3Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionPA3DSCIF3Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionPA3DSCIF3Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF3Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionPA3DSCIF3Lanczos)

def itkWindowedSincInterpolateImageFunctionPA3DSCIF3Welch_New():
    return itkWindowedSincInterpolateImageFunctionPA3DSCIF3Welch.New()

class itkWindowedSincInterpolateImageFunctionPA3DSCIF3Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionPA3DSCIFD):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionPA3DSCIF3Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionPA3DSCIF3Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF3Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionPA3DSCIF3Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF3Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionPA3DSCIF3Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionPA3DSCIF3Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF3Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionPA3DSCIF3Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionPA3DSCIF3Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionPA3DSCIF3Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionPA3DSCIF3Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionPA3DSCIF3Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionPA3DSCIF3Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIF3Welch_swigregister(itkWindowedSincInterpolateImageFunctionPA3DSCIF3Welch)

def itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Cosine_New():
    return itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Cosine.New()

class itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionPA3DSCIUCD):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Cosine_swigregister(itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Cosine)

def itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Hamming_New():
    return itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Hamming.New()

class itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionPA3DSCIUCD):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Hamming_swigregister(itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Hamming)

def itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Lanczos.New()

class itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionPA3DSCIUCD):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Lanczos)

def itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Welch_New():
    return itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Welch.New()

class itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionPA3DSCIUCD):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Welch_swigregister(itkWindowedSincInterpolateImageFunctionPA3DSCIUC2Welch)

def itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Cosine_New():
    return itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Cosine.New()

class itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Cosine(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionPA3DSCIUCD):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Cosine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Cosine___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Cosine_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Cosine_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Cosine

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Cosine

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Cosine_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Cosine

        Create a new object of the class itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Cosine and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Cosine.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Cosine.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Cosine.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Cosine in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Cosine_swigregister(itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Cosine)

def itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Hamming_New():
    return itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Hamming.New()

class itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Hamming(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionPA3DSCIUCD):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Hamming class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Hamming___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Hamming_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Hamming_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Hamming

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Hamming

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Hamming_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Hamming

        Create a new object of the class itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Hamming and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Hamming.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Hamming.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Hamming.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Hamming in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Hamming_swigregister(itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Hamming)

def itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Lanczos_New():
    return itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Lanczos.New()

class itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Lanczos(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionPA3DSCIUCD):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Lanczos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Lanczos___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Lanczos_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Lanczos_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Lanczos

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Lanczos

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Lanczos_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Lanczos

        Create a new object of the class itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Lanczos and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Lanczos.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Lanczos.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Lanczos.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Lanczos in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Lanczos_swigregister(itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Lanczos)

def itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Welch_New():
    return itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Welch.New()

class itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Welch(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionPA3DSCIUCD):
    r"""Proxy of C++ itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Welch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Welch___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Welch_Pointer"""
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Welch_Clone(self)
    __swig_destroy__ = _itkWindowedSincInterpolateImageFunctionPython.delete_itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Welch

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Welch

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Welch_cast(obj)

    def New(*args, **kargs):
        """New() -> itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Welch

        Create a new object of the class itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Welch and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Welch.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Welch.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Welch.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Welch in _itkWindowedSincInterpolateImageFunctionPython:
_itkWindowedSincInterpolateImageFunctionPython.itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Welch_swigregister(itkWindowedSincInterpolateImageFunctionPA3DSCIUC3Welch)

