# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKFFTPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkInverse1DFFTImageFilterPython
else:
    import _itkInverse1DFFTImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageToImageFilterBPython
import itk.itkVectorImagePython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkInverse1DFFTImageFilterICD2ID2_New():
    return itkInverse1DFFTImageFilterICD2ID2.New()

class itkInverse1DFFTImageFilterICD2ID2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD2ID2):
    r"""Proxy of C++ itkInverse1DFFTImageFilterICD2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInverse1DFFTImageFilterICD2ID2_Pointer"""
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInverse1DFFTImageFilterICD2ID2_Pointer"""
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD2ID2_Clone(self)

    def GetDirection(self):
        r"""GetDirection(self) -> unsigned int"""
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD2ID2_GetDirection(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD2ID2_SetDirection(self, _arg)

    def GetSizeGreatestPrimeFactor(self):
        r"""GetSizeGreatestPrimeFactor(self) -> unsigned long long"""
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD2ID2_GetSizeGreatestPrimeFactor(self)
    __swig_destroy__ = _itkInverse1DFFTImageFilterPython.delete_itkInverse1DFFTImageFilterICD2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInverse1DFFTImageFilterICD2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInverse1DFFTImageFilterICD2ID2

        Create a new object of the class itkInverse1DFFTImageFilterICD2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverse1DFFTImageFilterICD2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverse1DFFTImageFilterICD2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverse1DFFTImageFilterICD2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverse1DFFTImageFilterICD2ID2 in _itkInverse1DFFTImageFilterPython:
_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD2ID2_swigregister(itkInverse1DFFTImageFilterICD2ID2)

def itkInverse1DFFTImageFilterICD3ID3_New():
    return itkInverse1DFFTImageFilterICD3ID3.New()

class itkInverse1DFFTImageFilterICD3ID3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD3ID3):
    r"""Proxy of C++ itkInverse1DFFTImageFilterICD3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInverse1DFFTImageFilterICD3ID3_Pointer"""
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInverse1DFFTImageFilterICD3ID3_Pointer"""
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD3ID3_Clone(self)

    def GetDirection(self):
        r"""GetDirection(self) -> unsigned int"""
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD3ID3_GetDirection(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD3ID3_SetDirection(self, _arg)

    def GetSizeGreatestPrimeFactor(self):
        r"""GetSizeGreatestPrimeFactor(self) -> unsigned long long"""
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD3ID3_GetSizeGreatestPrimeFactor(self)
    __swig_destroy__ = _itkInverse1DFFTImageFilterPython.delete_itkInverse1DFFTImageFilterICD3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInverse1DFFTImageFilterICD3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInverse1DFFTImageFilterICD3ID3

        Create a new object of the class itkInverse1DFFTImageFilterICD3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverse1DFFTImageFilterICD3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverse1DFFTImageFilterICD3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverse1DFFTImageFilterICD3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverse1DFFTImageFilterICD3ID3 in _itkInverse1DFFTImageFilterPython:
_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD3ID3_swigregister(itkInverse1DFFTImageFilterICD3ID3)

def itkInverse1DFFTImageFilterICD4ID4_New():
    return itkInverse1DFFTImageFilterICD4ID4.New()

class itkInverse1DFFTImageFilterICD4ID4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD4ID4):
    r"""Proxy of C++ itkInverse1DFFTImageFilterICD4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInverse1DFFTImageFilterICD4ID4_Pointer"""
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInverse1DFFTImageFilterICD4ID4_Pointer"""
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD4ID4_Clone(self)

    def GetDirection(self):
        r"""GetDirection(self) -> unsigned int"""
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD4ID4_GetDirection(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD4ID4_SetDirection(self, _arg)

    def GetSizeGreatestPrimeFactor(self):
        r"""GetSizeGreatestPrimeFactor(self) -> unsigned long long"""
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD4ID4_GetSizeGreatestPrimeFactor(self)
    __swig_destroy__ = _itkInverse1DFFTImageFilterPython.delete_itkInverse1DFFTImageFilterICD4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInverse1DFFTImageFilterICD4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInverse1DFFTImageFilterICD4ID4

        Create a new object of the class itkInverse1DFFTImageFilterICD4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverse1DFFTImageFilterICD4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverse1DFFTImageFilterICD4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverse1DFFTImageFilterICD4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverse1DFFTImageFilterICD4ID4 in _itkInverse1DFFTImageFilterPython:
_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD4ID4_swigregister(itkInverse1DFFTImageFilterICD4ID4)

def itkInverse1DFFTImageFilterICF2IF2_New():
    return itkInverse1DFFTImageFilterICF2IF2.New()

class itkInverse1DFFTImageFilterICF2IF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2):
    r"""Proxy of C++ itkInverse1DFFTImageFilterICF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInverse1DFFTImageFilterICF2IF2_Pointer"""
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInverse1DFFTImageFilterICF2IF2_Pointer"""
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF2IF2_Clone(self)

    def GetDirection(self):
        r"""GetDirection(self) -> unsigned int"""
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF2IF2_GetDirection(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF2IF2_SetDirection(self, _arg)

    def GetSizeGreatestPrimeFactor(self):
        r"""GetSizeGreatestPrimeFactor(self) -> unsigned long long"""
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF2IF2_GetSizeGreatestPrimeFactor(self)
    __swig_destroy__ = _itkInverse1DFFTImageFilterPython.delete_itkInverse1DFFTImageFilterICF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInverse1DFFTImageFilterICF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInverse1DFFTImageFilterICF2IF2

        Create a new object of the class itkInverse1DFFTImageFilterICF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverse1DFFTImageFilterICF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverse1DFFTImageFilterICF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverse1DFFTImageFilterICF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverse1DFFTImageFilterICF2IF2 in _itkInverse1DFFTImageFilterPython:
_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF2IF2_swigregister(itkInverse1DFFTImageFilterICF2IF2)

def itkInverse1DFFTImageFilterICF3IF3_New():
    return itkInverse1DFFTImageFilterICF3IF3.New()

class itkInverse1DFFTImageFilterICF3IF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3):
    r"""Proxy of C++ itkInverse1DFFTImageFilterICF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInverse1DFFTImageFilterICF3IF3_Pointer"""
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInverse1DFFTImageFilterICF3IF3_Pointer"""
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF3IF3_Clone(self)

    def GetDirection(self):
        r"""GetDirection(self) -> unsigned int"""
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF3IF3_GetDirection(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF3IF3_SetDirection(self, _arg)

    def GetSizeGreatestPrimeFactor(self):
        r"""GetSizeGreatestPrimeFactor(self) -> unsigned long long"""
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF3IF3_GetSizeGreatestPrimeFactor(self)
    __swig_destroy__ = _itkInverse1DFFTImageFilterPython.delete_itkInverse1DFFTImageFilterICF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInverse1DFFTImageFilterICF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInverse1DFFTImageFilterICF3IF3

        Create a new object of the class itkInverse1DFFTImageFilterICF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverse1DFFTImageFilterICF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverse1DFFTImageFilterICF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverse1DFFTImageFilterICF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverse1DFFTImageFilterICF3IF3 in _itkInverse1DFFTImageFilterPython:
_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF3IF3_swigregister(itkInverse1DFFTImageFilterICF3IF3)

def itkInverse1DFFTImageFilterICF4IF4_New():
    return itkInverse1DFFTImageFilterICF4IF4.New()

class itkInverse1DFFTImageFilterICF4IF4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF4IF4):
    r"""Proxy of C++ itkInverse1DFFTImageFilterICF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInverse1DFFTImageFilterICF4IF4_Pointer"""
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInverse1DFFTImageFilterICF4IF4_Pointer"""
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF4IF4_Clone(self)

    def GetDirection(self):
        r"""GetDirection(self) -> unsigned int"""
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF4IF4_GetDirection(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF4IF4_SetDirection(self, _arg)

    def GetSizeGreatestPrimeFactor(self):
        r"""GetSizeGreatestPrimeFactor(self) -> unsigned long long"""
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF4IF4_GetSizeGreatestPrimeFactor(self)
    __swig_destroy__ = _itkInverse1DFFTImageFilterPython.delete_itkInverse1DFFTImageFilterICF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInverse1DFFTImageFilterICF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInverse1DFFTImageFilterICF4IF4

        Create a new object of the class itkInverse1DFFTImageFilterICF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverse1DFFTImageFilterICF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverse1DFFTImageFilterICF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverse1DFFTImageFilterICF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverse1DFFTImageFilterICF4IF4 in _itkInverse1DFFTImageFilterPython:
_itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF4IF4_swigregister(itkInverse1DFFTImageFilterICF4IF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def inverse1_dfft_image_filter(*args: itkt.ImageLike,  direction: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for Inverse1DFFTImageFilter"""
    import itk

    kwarg_typehints = { 'direction':direction }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.Inverse1DFFTImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def inverse1_dfft_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKFFT.Inverse1DFFTImageFilter
    inverse1_dfft_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    inverse1_dfft_image_filter.__doc__ = filter_object.__doc__



