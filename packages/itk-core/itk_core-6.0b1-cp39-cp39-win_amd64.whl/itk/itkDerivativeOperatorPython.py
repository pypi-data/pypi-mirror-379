# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDerivativeOperatorPython
else:
    import _itkDerivativeOperatorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkNeighborhoodOperatorPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkNeighborhoodPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
class itkDerivativeOperatorD2(itk.itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD2):
    r"""Proxy of C++ itkDerivativeOperatorD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetOrder(self, order):
        r"""
        SetOrder(self, order)

        Parameters
        ----------
        order: unsigned int const

        """
        return _itkDerivativeOperatorPython.itkDerivativeOperatorD2_SetOrder(self, order)

    def GetOrder(self):
        r"""GetOrder(self) -> unsigned int"""
        return _itkDerivativeOperatorPython.itkDerivativeOperatorD2_GetOrder(self)
    __swig_destroy__ = _itkDerivativeOperatorPython.delete_itkDerivativeOperatorD2

    def __init__(self, *args):
        r"""
        __init__(self) -> itkDerivativeOperatorD2
        __init__(self, arg0) -> itkDerivativeOperatorD2

        Parameters
        ----------
        arg0: itkDerivativeOperatorD2 const &

        """
        _itkDerivativeOperatorPython.itkDerivativeOperatorD2_swiginit(self, _itkDerivativeOperatorPython.new_itkDerivativeOperatorD2(*args))

# Register itkDerivativeOperatorD2 in _itkDerivativeOperatorPython:
_itkDerivativeOperatorPython.itkDerivativeOperatorD2_swigregister(itkDerivativeOperatorD2)
class itkDerivativeOperatorD3(itk.itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD3):
    r"""Proxy of C++ itkDerivativeOperatorD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetOrder(self, order):
        r"""
        SetOrder(self, order)

        Parameters
        ----------
        order: unsigned int const

        """
        return _itkDerivativeOperatorPython.itkDerivativeOperatorD3_SetOrder(self, order)

    def GetOrder(self):
        r"""GetOrder(self) -> unsigned int"""
        return _itkDerivativeOperatorPython.itkDerivativeOperatorD3_GetOrder(self)
    __swig_destroy__ = _itkDerivativeOperatorPython.delete_itkDerivativeOperatorD3

    def __init__(self, *args):
        r"""
        __init__(self) -> itkDerivativeOperatorD3
        __init__(self, arg0) -> itkDerivativeOperatorD3

        Parameters
        ----------
        arg0: itkDerivativeOperatorD3 const &

        """
        _itkDerivativeOperatorPython.itkDerivativeOperatorD3_swiginit(self, _itkDerivativeOperatorPython.new_itkDerivativeOperatorD3(*args))

# Register itkDerivativeOperatorD3 in _itkDerivativeOperatorPython:
_itkDerivativeOperatorPython.itkDerivativeOperatorD3_swigregister(itkDerivativeOperatorD3)
class itkDerivativeOperatorD4(itk.itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD4):
    r"""Proxy of C++ itkDerivativeOperatorD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetOrder(self, order):
        r"""
        SetOrder(self, order)

        Parameters
        ----------
        order: unsigned int const

        """
        return _itkDerivativeOperatorPython.itkDerivativeOperatorD4_SetOrder(self, order)

    def GetOrder(self):
        r"""GetOrder(self) -> unsigned int"""
        return _itkDerivativeOperatorPython.itkDerivativeOperatorD4_GetOrder(self)
    __swig_destroy__ = _itkDerivativeOperatorPython.delete_itkDerivativeOperatorD4

    def __init__(self, *args):
        r"""
        __init__(self) -> itkDerivativeOperatorD4
        __init__(self, arg0) -> itkDerivativeOperatorD4

        Parameters
        ----------
        arg0: itkDerivativeOperatorD4 const &

        """
        _itkDerivativeOperatorPython.itkDerivativeOperatorD4_swiginit(self, _itkDerivativeOperatorPython.new_itkDerivativeOperatorD4(*args))

# Register itkDerivativeOperatorD4 in _itkDerivativeOperatorPython:
_itkDerivativeOperatorPython.itkDerivativeOperatorD4_swigregister(itkDerivativeOperatorD4)
class itkDerivativeOperatorF2(itk.itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF2):
    r"""Proxy of C++ itkDerivativeOperatorF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetOrder(self, order):
        r"""
        SetOrder(self, order)

        Parameters
        ----------
        order: unsigned int const

        """
        return _itkDerivativeOperatorPython.itkDerivativeOperatorF2_SetOrder(self, order)

    def GetOrder(self):
        r"""GetOrder(self) -> unsigned int"""
        return _itkDerivativeOperatorPython.itkDerivativeOperatorF2_GetOrder(self)
    __swig_destroy__ = _itkDerivativeOperatorPython.delete_itkDerivativeOperatorF2

    def __init__(self, *args):
        r"""
        __init__(self) -> itkDerivativeOperatorF2
        __init__(self, arg0) -> itkDerivativeOperatorF2

        Parameters
        ----------
        arg0: itkDerivativeOperatorF2 const &

        """
        _itkDerivativeOperatorPython.itkDerivativeOperatorF2_swiginit(self, _itkDerivativeOperatorPython.new_itkDerivativeOperatorF2(*args))

# Register itkDerivativeOperatorF2 in _itkDerivativeOperatorPython:
_itkDerivativeOperatorPython.itkDerivativeOperatorF2_swigregister(itkDerivativeOperatorF2)
class itkDerivativeOperatorF3(itk.itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF3):
    r"""Proxy of C++ itkDerivativeOperatorF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetOrder(self, order):
        r"""
        SetOrder(self, order)

        Parameters
        ----------
        order: unsigned int const

        """
        return _itkDerivativeOperatorPython.itkDerivativeOperatorF3_SetOrder(self, order)

    def GetOrder(self):
        r"""GetOrder(self) -> unsigned int"""
        return _itkDerivativeOperatorPython.itkDerivativeOperatorF3_GetOrder(self)
    __swig_destroy__ = _itkDerivativeOperatorPython.delete_itkDerivativeOperatorF3

    def __init__(self, *args):
        r"""
        __init__(self) -> itkDerivativeOperatorF3
        __init__(self, arg0) -> itkDerivativeOperatorF3

        Parameters
        ----------
        arg0: itkDerivativeOperatorF3 const &

        """
        _itkDerivativeOperatorPython.itkDerivativeOperatorF3_swiginit(self, _itkDerivativeOperatorPython.new_itkDerivativeOperatorF3(*args))

# Register itkDerivativeOperatorF3 in _itkDerivativeOperatorPython:
_itkDerivativeOperatorPython.itkDerivativeOperatorF3_swigregister(itkDerivativeOperatorF3)
class itkDerivativeOperatorF4(itk.itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF4):
    r"""Proxy of C++ itkDerivativeOperatorF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetOrder(self, order):
        r"""
        SetOrder(self, order)

        Parameters
        ----------
        order: unsigned int const

        """
        return _itkDerivativeOperatorPython.itkDerivativeOperatorF4_SetOrder(self, order)

    def GetOrder(self):
        r"""GetOrder(self) -> unsigned int"""
        return _itkDerivativeOperatorPython.itkDerivativeOperatorF4_GetOrder(self)
    __swig_destroy__ = _itkDerivativeOperatorPython.delete_itkDerivativeOperatorF4

    def __init__(self, *args):
        r"""
        __init__(self) -> itkDerivativeOperatorF4
        __init__(self, arg0) -> itkDerivativeOperatorF4

        Parameters
        ----------
        arg0: itkDerivativeOperatorF4 const &

        """
        _itkDerivativeOperatorPython.itkDerivativeOperatorF4_swiginit(self, _itkDerivativeOperatorPython.new_itkDerivativeOperatorF4(*args))

# Register itkDerivativeOperatorF4 in _itkDerivativeOperatorPython:
_itkDerivativeOperatorPython.itkDerivativeOperatorF4_swigregister(itkDerivativeOperatorF4)

