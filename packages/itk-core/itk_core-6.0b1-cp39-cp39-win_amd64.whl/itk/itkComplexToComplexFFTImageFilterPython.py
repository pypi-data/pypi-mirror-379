# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKFFTPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkComplexToComplexFFTImageFilterPython
else:
    import _itkComplexToComplexFFTImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageToImageFilterBPython
import itk.itkVectorImagePython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
class itkComplexToComplexFFTImageFilterEnums(object):
    r"""Proxy of C++ itkComplexToComplexFFTImageFilterEnums class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TransformDirection_FORWARD = _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterEnums_TransformDirection_FORWARD
    
    TransformDirection_INVERSE = _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterEnums_TransformDirection_INVERSE
    

    def __init__(self, *args):
        r"""
        __init__(self) -> itkComplexToComplexFFTImageFilterEnums
        __init__(self, arg0) -> itkComplexToComplexFFTImageFilterEnums

        Parameters
        ----------
        arg0: itkComplexToComplexFFTImageFilterEnums const &

        """
        _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterEnums_swiginit(self, _itkComplexToComplexFFTImageFilterPython.new_itkComplexToComplexFFTImageFilterEnums(*args))
    __swig_destroy__ = _itkComplexToComplexFFTImageFilterPython.delete_itkComplexToComplexFFTImageFilterEnums

# Register itkComplexToComplexFFTImageFilterEnums in _itkComplexToComplexFFTImageFilterPython:
_itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterEnums_swigregister(itkComplexToComplexFFTImageFilterEnums)

def itkComplexToComplexFFTImageFilterICD2_New():
    return itkComplexToComplexFFTImageFilterICD2.New()

class itkComplexToComplexFFTImageFilterICD2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2):
    r"""Proxy of C++ itkComplexToComplexFFTImageFilterICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkComplexToComplexFFTImageFilterICD2_Pointer"""
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkComplexToComplexFFTImageFilterICD2_Pointer"""
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICD2_Clone(self)

    def SetTransformDirection(self, _arg):
        r"""
        SetTransformDirection(self, _arg)

        Parameters
        ----------
        _arg: enum itkComplexToComplexFFTImageFilterEnums::TransformDirection const

        """
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICD2_SetTransformDirection(self, _arg)

    def GetTransformDirection(self):
        r"""GetTransformDirection(self) -> itkComplexToComplexFFTImageFilterEnums::TransformDirection"""
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICD2_GetTransformDirection(self)
    __swig_destroy__ = _itkComplexToComplexFFTImageFilterPython.delete_itkComplexToComplexFFTImageFilterICD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkComplexToComplexFFTImageFilterICD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkComplexToComplexFFTImageFilterICD2

        Create a new object of the class itkComplexToComplexFFTImageFilterICD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToComplexFFTImageFilterICD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToComplexFFTImageFilterICD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToComplexFFTImageFilterICD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToComplexFFTImageFilterICD2 in _itkComplexToComplexFFTImageFilterPython:
_itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICD2_swigregister(itkComplexToComplexFFTImageFilterICD2)

def itkComplexToComplexFFTImageFilterICD3_New():
    return itkComplexToComplexFFTImageFilterICD3.New()

class itkComplexToComplexFFTImageFilterICD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3):
    r"""Proxy of C++ itkComplexToComplexFFTImageFilterICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkComplexToComplexFFTImageFilterICD3_Pointer"""
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkComplexToComplexFFTImageFilterICD3_Pointer"""
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICD3_Clone(self)

    def SetTransformDirection(self, _arg):
        r"""
        SetTransformDirection(self, _arg)

        Parameters
        ----------
        _arg: enum itkComplexToComplexFFTImageFilterEnums::TransformDirection const

        """
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICD3_SetTransformDirection(self, _arg)

    def GetTransformDirection(self):
        r"""GetTransformDirection(self) -> itkComplexToComplexFFTImageFilterEnums::TransformDirection"""
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICD3_GetTransformDirection(self)
    __swig_destroy__ = _itkComplexToComplexFFTImageFilterPython.delete_itkComplexToComplexFFTImageFilterICD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkComplexToComplexFFTImageFilterICD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkComplexToComplexFFTImageFilterICD3

        Create a new object of the class itkComplexToComplexFFTImageFilterICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToComplexFFTImageFilterICD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToComplexFFTImageFilterICD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToComplexFFTImageFilterICD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToComplexFFTImageFilterICD3 in _itkComplexToComplexFFTImageFilterPython:
_itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICD3_swigregister(itkComplexToComplexFFTImageFilterICD3)

def itkComplexToComplexFFTImageFilterICD4_New():
    return itkComplexToComplexFFTImageFilterICD4.New()

class itkComplexToComplexFFTImageFilterICD4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4):
    r"""Proxy of C++ itkComplexToComplexFFTImageFilterICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkComplexToComplexFFTImageFilterICD4_Pointer"""
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkComplexToComplexFFTImageFilterICD4_Pointer"""
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICD4_Clone(self)

    def SetTransformDirection(self, _arg):
        r"""
        SetTransformDirection(self, _arg)

        Parameters
        ----------
        _arg: enum itkComplexToComplexFFTImageFilterEnums::TransformDirection const

        """
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICD4_SetTransformDirection(self, _arg)

    def GetTransformDirection(self):
        r"""GetTransformDirection(self) -> itkComplexToComplexFFTImageFilterEnums::TransformDirection"""
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICD4_GetTransformDirection(self)
    __swig_destroy__ = _itkComplexToComplexFFTImageFilterPython.delete_itkComplexToComplexFFTImageFilterICD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkComplexToComplexFFTImageFilterICD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkComplexToComplexFFTImageFilterICD4

        Create a new object of the class itkComplexToComplexFFTImageFilterICD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToComplexFFTImageFilterICD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToComplexFFTImageFilterICD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToComplexFFTImageFilterICD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToComplexFFTImageFilterICD4 in _itkComplexToComplexFFTImageFilterPython:
_itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICD4_swigregister(itkComplexToComplexFFTImageFilterICD4)

def itkComplexToComplexFFTImageFilterICF2_New():
    return itkComplexToComplexFFTImageFilterICF2.New()

class itkComplexToComplexFFTImageFilterICF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2):
    r"""Proxy of C++ itkComplexToComplexFFTImageFilterICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkComplexToComplexFFTImageFilterICF2_Pointer"""
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkComplexToComplexFFTImageFilterICF2_Pointer"""
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF2_Clone(self)

    def SetTransformDirection(self, _arg):
        r"""
        SetTransformDirection(self, _arg)

        Parameters
        ----------
        _arg: enum itkComplexToComplexFFTImageFilterEnums::TransformDirection const

        """
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF2_SetTransformDirection(self, _arg)

    def GetTransformDirection(self):
        r"""GetTransformDirection(self) -> itkComplexToComplexFFTImageFilterEnums::TransformDirection"""
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF2_GetTransformDirection(self)
    __swig_destroy__ = _itkComplexToComplexFFTImageFilterPython.delete_itkComplexToComplexFFTImageFilterICF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkComplexToComplexFFTImageFilterICF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkComplexToComplexFFTImageFilterICF2

        Create a new object of the class itkComplexToComplexFFTImageFilterICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToComplexFFTImageFilterICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToComplexFFTImageFilterICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToComplexFFTImageFilterICF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToComplexFFTImageFilterICF2 in _itkComplexToComplexFFTImageFilterPython:
_itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF2_swigregister(itkComplexToComplexFFTImageFilterICF2)

def itkComplexToComplexFFTImageFilterICF3_New():
    return itkComplexToComplexFFTImageFilterICF3.New()

class itkComplexToComplexFFTImageFilterICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    r"""Proxy of C++ itkComplexToComplexFFTImageFilterICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkComplexToComplexFFTImageFilterICF3_Pointer"""
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkComplexToComplexFFTImageFilterICF3_Pointer"""
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF3_Clone(self)

    def SetTransformDirection(self, _arg):
        r"""
        SetTransformDirection(self, _arg)

        Parameters
        ----------
        _arg: enum itkComplexToComplexFFTImageFilterEnums::TransformDirection const

        """
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF3_SetTransformDirection(self, _arg)

    def GetTransformDirection(self):
        r"""GetTransformDirection(self) -> itkComplexToComplexFFTImageFilterEnums::TransformDirection"""
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF3_GetTransformDirection(self)
    __swig_destroy__ = _itkComplexToComplexFFTImageFilterPython.delete_itkComplexToComplexFFTImageFilterICF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkComplexToComplexFFTImageFilterICF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkComplexToComplexFFTImageFilterICF3

        Create a new object of the class itkComplexToComplexFFTImageFilterICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToComplexFFTImageFilterICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToComplexFFTImageFilterICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToComplexFFTImageFilterICF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToComplexFFTImageFilterICF3 in _itkComplexToComplexFFTImageFilterPython:
_itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF3_swigregister(itkComplexToComplexFFTImageFilterICF3)

def itkComplexToComplexFFTImageFilterICF4_New():
    return itkComplexToComplexFFTImageFilterICF4.New()

class itkComplexToComplexFFTImageFilterICF4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4):
    r"""Proxy of C++ itkComplexToComplexFFTImageFilterICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkComplexToComplexFFTImageFilterICF4_Pointer"""
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkComplexToComplexFFTImageFilterICF4_Pointer"""
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF4_Clone(self)

    def SetTransformDirection(self, _arg):
        r"""
        SetTransformDirection(self, _arg)

        Parameters
        ----------
        _arg: enum itkComplexToComplexFFTImageFilterEnums::TransformDirection const

        """
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF4_SetTransformDirection(self, _arg)

    def GetTransformDirection(self):
        r"""GetTransformDirection(self) -> itkComplexToComplexFFTImageFilterEnums::TransformDirection"""
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF4_GetTransformDirection(self)
    __swig_destroy__ = _itkComplexToComplexFFTImageFilterPython.delete_itkComplexToComplexFFTImageFilterICF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkComplexToComplexFFTImageFilterICF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkComplexToComplexFFTImageFilterICF4

        Create a new object of the class itkComplexToComplexFFTImageFilterICF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToComplexFFTImageFilterICF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToComplexFFTImageFilterICF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToComplexFFTImageFilterICF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToComplexFFTImageFilterICF4 in _itkComplexToComplexFFTImageFilterPython:
_itkComplexToComplexFFTImageFilterPython.itkComplexToComplexFFTImageFilterICF4_swigregister(itkComplexToComplexFFTImageFilterICF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def complex_to_complex_fft_image_filter(*args: itkt.ImageLike,  transform_direction=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ComplexToComplexFFTImageFilter"""
    import itk

    kwarg_typehints = { 'transform_direction':transform_direction }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ComplexToComplexFFTImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def complex_to_complex_fft_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKFFT.ComplexToComplexFFTImageFilter
    complex_to_complex_fft_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    complex_to_complex_fft_image_filter.__doc__ = filter_object.__doc__



