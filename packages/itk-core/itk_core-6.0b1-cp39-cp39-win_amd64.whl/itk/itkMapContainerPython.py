# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMapContainerPython
else:
    import _itkMapContainerPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython

def itkMapContainerULLD_New():
    return itkMapContainerULLD.New()

class itkMapContainerULLD(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULLD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULLD
        __init__(self, comp) -> itkMapContainerULLD

        Parameters
        ----------
        comp: std::less< unsigned long long > const &

        """
        _itkMapContainerPython.itkMapContainerULLD_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLD(*args))

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMapContainerULLD_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMapContainerULLD_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLD_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::map< unsigned long long,double,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,double > > > &"""
        return _itkMapContainerPython.itkMapContainerULLD_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::map< unsigned long long,double,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,double > > > const &"""
        return _itkMapContainerPython.itkMapContainerULLD_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> double

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> double const &

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLD_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> double &

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLD_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> double

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLD_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: double

        """
        return _itkMapContainerPython.itkMapContainerULLD_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: double

        """
        return _itkMapContainerPython.itkMapContainerULLD_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLD_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: double *

        """
        return _itkMapContainerPython.itkMapContainerULLD_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLD_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLD_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkMapContainerPython.itkMapContainerULLD_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLD_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkMapContainerPython.itkMapContainerULLD_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkMapContainerPython.itkMapContainerULLD_Initialize(self)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMapContainerULLD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMapContainerPython.itkMapContainerULLD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLD

        Create a new object of the class itkMapContainerULLD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLD in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLD_swigregister(itkMapContainerULLD)

def itkMapContainerULLF_New():
    return itkMapContainerULLF.New()

class itkMapContainerULLF(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULLF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULLF
        __init__(self, comp) -> itkMapContainerULLF

        Parameters
        ----------
        comp: std::less< unsigned long long > const &

        """
        _itkMapContainerPython.itkMapContainerULLF_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLF(*args))

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMapContainerULLF_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMapContainerULLF_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLF_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::map< unsigned long long,float,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,float > > > &"""
        return _itkMapContainerPython.itkMapContainerULLF_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::map< unsigned long long,float,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,float > > > const &"""
        return _itkMapContainerPython.itkMapContainerULLF_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> float

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> float const &

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLF_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> float &

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLF_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> float

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLF_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: float

        """
        return _itkMapContainerPython.itkMapContainerULLF_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: float

        """
        return _itkMapContainerPython.itkMapContainerULLF_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLF_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: float *

        """
        return _itkMapContainerPython.itkMapContainerULLF_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLF_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLF_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkMapContainerPython.itkMapContainerULLF_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLF_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkMapContainerPython.itkMapContainerULLF_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkMapContainerPython.itkMapContainerULLF_Initialize(self)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMapContainerULLF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMapContainerPython.itkMapContainerULLF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLF

        Create a new object of the class itkMapContainerULLF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLF in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLF_swigregister(itkMapContainerULLF)

def itkMapContainerULLPD2_New():
    return itkMapContainerULLPD2.New()

class itkMapContainerULLPD2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULLPD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULLPD2
        __init__(self, comp) -> itkMapContainerULLPD2

        Parameters
        ----------
        comp: std::less< unsigned long long > const &

        """
        _itkMapContainerPython.itkMapContainerULLPD2_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLPD2(*args))

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMapContainerULLPD2_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLPD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMapContainerULLPD2_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLPD2_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::map< unsigned long long,itkPointD2,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkPointD2 > > > &"""
        return _itkMapContainerPython.itkMapContainerULLPD2_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::map< unsigned long long,itkPointD2,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkPointD2 > > > const &"""
        return _itkMapContainerPython.itkMapContainerULLPD2_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkPointD2

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkPointD2

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPD2_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkPointD2

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPD2_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkPointD2

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPD2_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointD2

        """
        return _itkMapContainerPython.itkMapContainerULLPD2_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointD2

        """
        return _itkMapContainerPython.itkMapContainerULLPD2_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPD2_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointD2 *

        """
        return _itkMapContainerPython.itkMapContainerULLPD2_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPD2_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPD2_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkMapContainerPython.itkMapContainerULLPD2_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPD2_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkMapContainerPython.itkMapContainerULLPD2_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkMapContainerPython.itkMapContainerULLPD2_Initialize(self)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLPD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMapContainerULLPD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMapContainerPython.itkMapContainerULLPD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLPD2

        Create a new object of the class itkMapContainerULLPD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLPD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLPD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLPD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLPD2 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLPD2_swigregister(itkMapContainerULLPD2)

def itkMapContainerULLPD3_New():
    return itkMapContainerULLPD3.New()

class itkMapContainerULLPD3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULLPD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULLPD3
        __init__(self, comp) -> itkMapContainerULLPD3

        Parameters
        ----------
        comp: std::less< unsigned long long > const &

        """
        _itkMapContainerPython.itkMapContainerULLPD3_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLPD3(*args))

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMapContainerULLPD3_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLPD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMapContainerULLPD3_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLPD3_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::map< unsigned long long,itkPointD3,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkPointD3 > > > &"""
        return _itkMapContainerPython.itkMapContainerULLPD3_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::map< unsigned long long,itkPointD3,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkPointD3 > > > const &"""
        return _itkMapContainerPython.itkMapContainerULLPD3_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkPointD3

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkPointD3

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPD3_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkPointD3

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPD3_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkPointD3

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPD3_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointD3

        """
        return _itkMapContainerPython.itkMapContainerULLPD3_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointD3

        """
        return _itkMapContainerPython.itkMapContainerULLPD3_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPD3_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointD3 *

        """
        return _itkMapContainerPython.itkMapContainerULLPD3_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPD3_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPD3_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkMapContainerPython.itkMapContainerULLPD3_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPD3_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkMapContainerPython.itkMapContainerULLPD3_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkMapContainerPython.itkMapContainerULLPD3_Initialize(self)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLPD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMapContainerULLPD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMapContainerPython.itkMapContainerULLPD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLPD3

        Create a new object of the class itkMapContainerULLPD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLPD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLPD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLPD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLPD3 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLPD3_swigregister(itkMapContainerULLPD3)

def itkMapContainerULLPD4_New():
    return itkMapContainerULLPD4.New()

class itkMapContainerULLPD4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULLPD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULLPD4
        __init__(self, comp) -> itkMapContainerULLPD4

        Parameters
        ----------
        comp: std::less< unsigned long long > const &

        """
        _itkMapContainerPython.itkMapContainerULLPD4_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLPD4(*args))

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMapContainerULLPD4_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLPD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMapContainerULLPD4_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLPD4_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::map< unsigned long long,itkPointD4,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkPointD4 > > > &"""
        return _itkMapContainerPython.itkMapContainerULLPD4_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::map< unsigned long long,itkPointD4,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkPointD4 > > > const &"""
        return _itkMapContainerPython.itkMapContainerULLPD4_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkPointD4

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkPointD4

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPD4_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkPointD4

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPD4_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkPointD4

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPD4_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointD4

        """
        return _itkMapContainerPython.itkMapContainerULLPD4_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointD4

        """
        return _itkMapContainerPython.itkMapContainerULLPD4_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPD4_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointD4 *

        """
        return _itkMapContainerPython.itkMapContainerULLPD4_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPD4_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPD4_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkMapContainerPython.itkMapContainerULLPD4_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPD4_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkMapContainerPython.itkMapContainerULLPD4_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkMapContainerPython.itkMapContainerULLPD4_Initialize(self)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLPD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMapContainerULLPD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMapContainerPython.itkMapContainerULLPD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLPD4

        Create a new object of the class itkMapContainerULLPD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLPD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLPD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLPD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLPD4 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLPD4_swigregister(itkMapContainerULLPD4)

def itkMapContainerULLPF2_New():
    return itkMapContainerULLPF2.New()

class itkMapContainerULLPF2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULLPF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULLPF2
        __init__(self, comp) -> itkMapContainerULLPF2

        Parameters
        ----------
        comp: std::less< unsigned long long > const &

        """
        _itkMapContainerPython.itkMapContainerULLPF2_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLPF2(*args))

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMapContainerULLPF2_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLPF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMapContainerULLPF2_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLPF2_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::map< unsigned long long,itkPointF2,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkPointF2 > > > &"""
        return _itkMapContainerPython.itkMapContainerULLPF2_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::map< unsigned long long,itkPointF2,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkPointF2 > > > const &"""
        return _itkMapContainerPython.itkMapContainerULLPF2_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkPointF2

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkPointF2

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPF2_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkPointF2

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPF2_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkPointF2

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPF2_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointF2

        """
        return _itkMapContainerPython.itkMapContainerULLPF2_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointF2

        """
        return _itkMapContainerPython.itkMapContainerULLPF2_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPF2_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointF2 *

        """
        return _itkMapContainerPython.itkMapContainerULLPF2_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPF2_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPF2_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkMapContainerPython.itkMapContainerULLPF2_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPF2_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkMapContainerPython.itkMapContainerULLPF2_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkMapContainerPython.itkMapContainerULLPF2_Initialize(self)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLPF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMapContainerULLPF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMapContainerPython.itkMapContainerULLPF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLPF2

        Create a new object of the class itkMapContainerULLPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLPF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLPF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLPF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLPF2 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLPF2_swigregister(itkMapContainerULLPF2)

def itkMapContainerULLPF3_New():
    return itkMapContainerULLPF3.New()

class itkMapContainerULLPF3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULLPF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULLPF3
        __init__(self, comp) -> itkMapContainerULLPF3

        Parameters
        ----------
        comp: std::less< unsigned long long > const &

        """
        _itkMapContainerPython.itkMapContainerULLPF3_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLPF3(*args))

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMapContainerULLPF3_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLPF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMapContainerULLPF3_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLPF3_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::map< unsigned long long,itkPointF3,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkPointF3 > > > &"""
        return _itkMapContainerPython.itkMapContainerULLPF3_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::map< unsigned long long,itkPointF3,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkPointF3 > > > const &"""
        return _itkMapContainerPython.itkMapContainerULLPF3_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkPointF3

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkPointF3

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPF3_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkPointF3

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPF3_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkPointF3

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPF3_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointF3

        """
        return _itkMapContainerPython.itkMapContainerULLPF3_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointF3

        """
        return _itkMapContainerPython.itkMapContainerULLPF3_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPF3_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointF3 *

        """
        return _itkMapContainerPython.itkMapContainerULLPF3_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPF3_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPF3_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkMapContainerPython.itkMapContainerULLPF3_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPF3_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkMapContainerPython.itkMapContainerULLPF3_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkMapContainerPython.itkMapContainerULLPF3_Initialize(self)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLPF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMapContainerULLPF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMapContainerPython.itkMapContainerULLPF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLPF3

        Create a new object of the class itkMapContainerULLPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLPF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLPF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLPF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLPF3 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLPF3_swigregister(itkMapContainerULLPF3)

def itkMapContainerULLPF4_New():
    return itkMapContainerULLPF4.New()

class itkMapContainerULLPF4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULLPF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULLPF4
        __init__(self, comp) -> itkMapContainerULLPF4

        Parameters
        ----------
        comp: std::less< unsigned long long > const &

        """
        _itkMapContainerPython.itkMapContainerULLPF4_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLPF4(*args))

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMapContainerULLPF4_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLPF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMapContainerULLPF4_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLPF4_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::map< unsigned long long,itkPointF4,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkPointF4 > > > &"""
        return _itkMapContainerPython.itkMapContainerULLPF4_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::map< unsigned long long,itkPointF4,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkPointF4 > > > const &"""
        return _itkMapContainerPython.itkMapContainerULLPF4_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkPointF4

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkPointF4

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPF4_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkPointF4

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPF4_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkPointF4

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPF4_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointF4

        """
        return _itkMapContainerPython.itkMapContainerULLPF4_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointF4

        """
        return _itkMapContainerPython.itkMapContainerULLPF4_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPF4_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkPointF4 *

        """
        return _itkMapContainerPython.itkMapContainerULLPF4_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPF4_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPF4_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkMapContainerPython.itkMapContainerULLPF4_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLPF4_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkMapContainerPython.itkMapContainerULLPF4_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkMapContainerPython.itkMapContainerULLPF4_Initialize(self)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLPF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMapContainerULLPF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMapContainerPython.itkMapContainerULLPF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLPF4

        Create a new object of the class itkMapContainerULLPF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLPF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLPF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLPF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLPF4 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLPF4_swigregister(itkMapContainerULLPF4)

def itkMapContainerULLSIT_New():
    return itkMapContainerULLSIT.New()

class itkMapContainerULLSIT(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULLSIT class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULLSIT
        __init__(self, comp) -> itkMapContainerULLSIT

        Parameters
        ----------
        comp: std::less< unsigned long long > const &

        """
        _itkMapContainerPython.itkMapContainerULLSIT_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLSIT(*args))

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMapContainerULLSIT_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLSIT___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMapContainerULLSIT_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLSIT_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::map< unsigned long long,std::set< unsigned long long,std::less< unsigned long long >,std::allocator< unsigned long long > >,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,std::set< unsigned long long,std::less< unsigned long long >,std::allocator< unsigned long long > > > > > &"""
        return _itkMapContainerPython.itkMapContainerULLSIT_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::map< unsigned long long,std::set< unsigned long long,std::less< unsigned long long >,std::allocator< unsigned long long > >,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,std::set< unsigned long long,std::less< unsigned long long >,std::allocator< unsigned long long > > > > > const &"""
        return _itkMapContainerPython.itkMapContainerULLSIT_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> setULL

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> setULL

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLSIT_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> setULL

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLSIT_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> setULL

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLSIT_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: std::set< unsigned long long,std::less< unsigned long long >,std::allocator< unsigned long long > >

        """
        return _itkMapContainerPython.itkMapContainerULLSIT_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: std::set< unsigned long long,std::less< unsigned long long >,std::allocator< unsigned long long > >

        """
        return _itkMapContainerPython.itkMapContainerULLSIT_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLSIT_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: std::set< unsigned long long,std::less< unsigned long long >,std::allocator< unsigned long long > > *

        """
        return _itkMapContainerPython.itkMapContainerULLSIT_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLSIT_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLSIT_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkMapContainerPython.itkMapContainerULLSIT_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLSIT_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkMapContainerPython.itkMapContainerULLSIT_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkMapContainerPython.itkMapContainerULLSIT_Initialize(self)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLSIT

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMapContainerULLSIT

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMapContainerPython.itkMapContainerULLSIT_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLSIT

        Create a new object of the class itkMapContainerULLSIT and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLSIT.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLSIT.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLSIT.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLSIT in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLSIT_swigregister(itkMapContainerULLSIT)

def itkMapContainerULLVD2_New():
    return itkMapContainerULLVD2.New()

class itkMapContainerULLVD2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULLVD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULLVD2
        __init__(self, comp) -> itkMapContainerULLVD2

        Parameters
        ----------
        comp: std::less< unsigned long long > const &

        """
        _itkMapContainerPython.itkMapContainerULLVD2_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLVD2(*args))

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMapContainerULLVD2_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLVD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMapContainerULLVD2_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLVD2_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::map< unsigned long long,itkVectorD2,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkVectorD2 > > > &"""
        return _itkMapContainerPython.itkMapContainerULLVD2_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::map< unsigned long long,itkVectorD2,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkVectorD2 > > > const &"""
        return _itkMapContainerPython.itkMapContainerULLVD2_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkVectorD2

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkVectorD2

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVD2_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkVectorD2

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVD2_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkVectorD2

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVD2_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorD2

        """
        return _itkMapContainerPython.itkMapContainerULLVD2_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorD2

        """
        return _itkMapContainerPython.itkMapContainerULLVD2_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVD2_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorD2 *

        """
        return _itkMapContainerPython.itkMapContainerULLVD2_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVD2_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVD2_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkMapContainerPython.itkMapContainerULLVD2_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVD2_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkMapContainerPython.itkMapContainerULLVD2_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkMapContainerPython.itkMapContainerULLVD2_Initialize(self)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLVD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMapContainerULLVD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMapContainerPython.itkMapContainerULLVD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLVD2

        Create a new object of the class itkMapContainerULLVD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLVD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLVD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLVD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLVD2 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLVD2_swigregister(itkMapContainerULLVD2)

def itkMapContainerULLVD3_New():
    return itkMapContainerULLVD3.New()

class itkMapContainerULLVD3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULLVD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULLVD3
        __init__(self, comp) -> itkMapContainerULLVD3

        Parameters
        ----------
        comp: std::less< unsigned long long > const &

        """
        _itkMapContainerPython.itkMapContainerULLVD3_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLVD3(*args))

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMapContainerULLVD3_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLVD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMapContainerULLVD3_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLVD3_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::map< unsigned long long,itkVectorD3,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkVectorD3 > > > &"""
        return _itkMapContainerPython.itkMapContainerULLVD3_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::map< unsigned long long,itkVectorD3,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkVectorD3 > > > const &"""
        return _itkMapContainerPython.itkMapContainerULLVD3_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkVectorD3

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkVectorD3

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVD3_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkVectorD3

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVD3_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkVectorD3

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVD3_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorD3

        """
        return _itkMapContainerPython.itkMapContainerULLVD3_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorD3

        """
        return _itkMapContainerPython.itkMapContainerULLVD3_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVD3_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorD3 *

        """
        return _itkMapContainerPython.itkMapContainerULLVD3_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVD3_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVD3_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkMapContainerPython.itkMapContainerULLVD3_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVD3_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkMapContainerPython.itkMapContainerULLVD3_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkMapContainerPython.itkMapContainerULLVD3_Initialize(self)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLVD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMapContainerULLVD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMapContainerPython.itkMapContainerULLVD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLVD3

        Create a new object of the class itkMapContainerULLVD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLVD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLVD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLVD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLVD3 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLVD3_swigregister(itkMapContainerULLVD3)

def itkMapContainerULLVD4_New():
    return itkMapContainerULLVD4.New()

class itkMapContainerULLVD4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULLVD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULLVD4
        __init__(self, comp) -> itkMapContainerULLVD4

        Parameters
        ----------
        comp: std::less< unsigned long long > const &

        """
        _itkMapContainerPython.itkMapContainerULLVD4_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLVD4(*args))

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMapContainerULLVD4_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLVD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMapContainerULLVD4_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLVD4_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::map< unsigned long long,itkVectorD4,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkVectorD4 > > > &"""
        return _itkMapContainerPython.itkMapContainerULLVD4_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::map< unsigned long long,itkVectorD4,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkVectorD4 > > > const &"""
        return _itkMapContainerPython.itkMapContainerULLVD4_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkVectorD4

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkVectorD4

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVD4_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkVectorD4

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVD4_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkVectorD4

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVD4_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorD4

        """
        return _itkMapContainerPython.itkMapContainerULLVD4_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorD4

        """
        return _itkMapContainerPython.itkMapContainerULLVD4_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVD4_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorD4 *

        """
        return _itkMapContainerPython.itkMapContainerULLVD4_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVD4_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVD4_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkMapContainerPython.itkMapContainerULLVD4_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVD4_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkMapContainerPython.itkMapContainerULLVD4_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkMapContainerPython.itkMapContainerULLVD4_Initialize(self)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLVD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMapContainerULLVD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMapContainerPython.itkMapContainerULLVD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLVD4

        Create a new object of the class itkMapContainerULLVD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLVD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLVD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLVD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLVD4 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLVD4_swigregister(itkMapContainerULLVD4)

def itkMapContainerULLVF2_New():
    return itkMapContainerULLVF2.New()

class itkMapContainerULLVF2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULLVF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULLVF2
        __init__(self, comp) -> itkMapContainerULLVF2

        Parameters
        ----------
        comp: std::less< unsigned long long > const &

        """
        _itkMapContainerPython.itkMapContainerULLVF2_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLVF2(*args))

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMapContainerULLVF2_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLVF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMapContainerULLVF2_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLVF2_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::map< unsigned long long,itkVectorF2,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkVectorF2 > > > &"""
        return _itkMapContainerPython.itkMapContainerULLVF2_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::map< unsigned long long,itkVectorF2,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkVectorF2 > > > const &"""
        return _itkMapContainerPython.itkMapContainerULLVF2_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkVectorF2

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkVectorF2

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVF2_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkVectorF2

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVF2_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkVectorF2

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVF2_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorF2

        """
        return _itkMapContainerPython.itkMapContainerULLVF2_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorF2

        """
        return _itkMapContainerPython.itkMapContainerULLVF2_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVF2_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorF2 *

        """
        return _itkMapContainerPython.itkMapContainerULLVF2_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVF2_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVF2_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkMapContainerPython.itkMapContainerULLVF2_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVF2_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkMapContainerPython.itkMapContainerULLVF2_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkMapContainerPython.itkMapContainerULLVF2_Initialize(self)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLVF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMapContainerULLVF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMapContainerPython.itkMapContainerULLVF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLVF2

        Create a new object of the class itkMapContainerULLVF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLVF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLVF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLVF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLVF2 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLVF2_swigregister(itkMapContainerULLVF2)

def itkMapContainerULLVF3_New():
    return itkMapContainerULLVF3.New()

class itkMapContainerULLVF3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULLVF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULLVF3
        __init__(self, comp) -> itkMapContainerULLVF3

        Parameters
        ----------
        comp: std::less< unsigned long long > const &

        """
        _itkMapContainerPython.itkMapContainerULLVF3_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLVF3(*args))

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMapContainerULLVF3_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLVF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMapContainerULLVF3_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLVF3_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::map< unsigned long long,itkVectorF3,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkVectorF3 > > > &"""
        return _itkMapContainerPython.itkMapContainerULLVF3_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::map< unsigned long long,itkVectorF3,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkVectorF3 > > > const &"""
        return _itkMapContainerPython.itkMapContainerULLVF3_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkVectorF3

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkVectorF3

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVF3_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkVectorF3

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVF3_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkVectorF3

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVF3_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorF3

        """
        return _itkMapContainerPython.itkMapContainerULLVF3_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorF3

        """
        return _itkMapContainerPython.itkMapContainerULLVF3_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVF3_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorF3 *

        """
        return _itkMapContainerPython.itkMapContainerULLVF3_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVF3_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVF3_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkMapContainerPython.itkMapContainerULLVF3_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVF3_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkMapContainerPython.itkMapContainerULLVF3_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkMapContainerPython.itkMapContainerULLVF3_Initialize(self)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLVF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMapContainerULLVF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMapContainerPython.itkMapContainerULLVF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLVF3

        Create a new object of the class itkMapContainerULLVF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLVF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLVF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLVF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLVF3 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLVF3_swigregister(itkMapContainerULLVF3)

def itkMapContainerULLVF4_New():
    return itkMapContainerULLVF4.New()

class itkMapContainerULLVF4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULLVF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULLVF4
        __init__(self, comp) -> itkMapContainerULLVF4

        Parameters
        ----------
        comp: std::less< unsigned long long > const &

        """
        _itkMapContainerPython.itkMapContainerULLVF4_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLVF4(*args))

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMapContainerULLVF4_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLVF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMapContainerULLVF4_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLVF4_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::map< unsigned long long,itkVectorF4,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkVectorF4 > > > &"""
        return _itkMapContainerPython.itkMapContainerULLVF4_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::map< unsigned long long,itkVectorF4,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkVectorF4 > > > const &"""
        return _itkMapContainerPython.itkMapContainerULLVF4_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkVectorF4

        Parameters
        ----------
        arg0: unsigned long long

        ElementAt(self, arg0) -> itkVectorF4

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVF4_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkVectorF4

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVF4_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkVectorF4

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVF4_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorF4

        """
        return _itkMapContainerPython.itkMapContainerULLVF4_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorF4

        """
        return _itkMapContainerPython.itkMapContainerULLVF4_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVF4_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: unsigned long long
        arg1: itkVectorF4 *

        """
        return _itkMapContainerPython.itkMapContainerULLVF4_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVF4_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVF4_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> unsigned long long"""
        return _itkMapContainerPython.itkMapContainerULLVF4_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: unsigned long long

        """
        return _itkMapContainerPython.itkMapContainerULLVF4_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkMapContainerPython.itkMapContainerULLVF4_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkMapContainerPython.itkMapContainerULLVF4_Initialize(self)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLVF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMapContainerULLVF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMapContainerPython.itkMapContainerULLVF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMapContainerULLVF4

        Create a new object of the class itkMapContainerULLVF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLVF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULLVF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULLVF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULLVF4 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULLVF4_swigregister(itkMapContainerULLVF4)

