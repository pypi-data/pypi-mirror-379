# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKIOMeshGiftiPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkGiftiMeshIOPython
else:
    import _itkGiftiMeshIOPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkMeshIOBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython

def itkGiftiMeshIO_New():
    return itkGiftiMeshIO.New()

class itkGiftiMeshIO(itk.itkMeshIOBasePython.itkMeshIOBase):
    r"""Proxy of C++ itkGiftiMeshIO class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGiftiMeshIO_Pointer"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIO___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkGiftiMeshIO_Pointer"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIO_Clone(self)

    def GetReadPointData(self):
        r"""GetReadPointData(self) -> bool"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIO_GetReadPointData(self)

    def SetReadPointData(self, _arg):
        r"""
        SetReadPointData(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkGiftiMeshIOPython.itkGiftiMeshIO_SetReadPointData(self, _arg)

    def ReadPointDataOn(self):
        r"""ReadPointDataOn(self)"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIO_ReadPointDataOn(self)

    def ReadPointDataOff(self):
        r"""ReadPointDataOff(self)"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIO_ReadPointDataOff(self)

    def SetDirection(self, direction):
        r"""
        SetDirection(self, direction)

        Parameters
        ----------
        direction: itkMatrixD44 const &

        """
        return _itkGiftiMeshIOPython.itkGiftiMeshIO_SetDirection(self, direction)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIO_GetDirection(self)

    def GetLabelColorTable(self):
        r"""GetLabelColorTable(self) -> itkMapContainerIRGBAF_Pointer"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIO_GetLabelColorTable(self)

    def GetLabelNameTable(self):
        r"""GetLabelNameTable(self) -> itkMapContainerIstring_Pointer"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIO_GetLabelNameTable(self)

    def SetLabelColorTable(self, colorMap):
        r"""
        SetLabelColorTable(self, colorMap)

        Parameters
        ----------
        colorMap: itkMapContainerIRGBAF const *

        """
        return _itkGiftiMeshIOPython.itkGiftiMeshIO_SetLabelColorTable(self, colorMap)

    def SetLabelNameTable(self, labelMap):
        r"""
        SetLabelNameTable(self, labelMap)

        Parameters
        ----------
        labelMap: itkMapContainerIstring const *

        """
        return _itkGiftiMeshIOPython.itkGiftiMeshIO_SetLabelNameTable(self, labelMap)
    __swig_destroy__ = _itkGiftiMeshIOPython.delete_itkGiftiMeshIO

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGiftiMeshIO

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGiftiMeshIOPython.itkGiftiMeshIO_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGiftiMeshIO

        Create a new object of the class itkGiftiMeshIO and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGiftiMeshIO.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGiftiMeshIO.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGiftiMeshIO.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGiftiMeshIO in _itkGiftiMeshIOPython:
_itkGiftiMeshIOPython.itkGiftiMeshIO_swigregister(itkGiftiMeshIO)

def itkGiftiMeshIOFactory_New():
    return itkGiftiMeshIOFactory.New()

class itkGiftiMeshIOFactory(itk.ITKCommonBasePython.itkObjectFactoryBase):
    r"""Proxy of C++ itkGiftiMeshIOFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkGiftiMeshIOFactory_Pointer"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIOFactory___New_orig__()

    @staticmethod
    def RegisterOneFactory():
        r"""RegisterOneFactory()"""
        return _itkGiftiMeshIOPython.itkGiftiMeshIOFactory_RegisterOneFactory()
    __swig_destroy__ = _itkGiftiMeshIOPython.delete_itkGiftiMeshIOFactory

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkGiftiMeshIOFactory

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGiftiMeshIOPython.itkGiftiMeshIOFactory_cast(obj)

    def New(*args, **kargs):
        """New() -> itkGiftiMeshIOFactory

        Create a new object of the class itkGiftiMeshIOFactory and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGiftiMeshIOFactory.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGiftiMeshIOFactory.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGiftiMeshIOFactory.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGiftiMeshIOFactory in _itkGiftiMeshIOPython:
_itkGiftiMeshIOPython.itkGiftiMeshIOFactory_swigregister(itkGiftiMeshIOFactory)

def itkMapContainerIRGBAF_New():
    return itkMapContainerIRGBAF.New()

class itkMapContainerIRGBAF(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerIRGBAF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerIRGBAF
        __init__(self, comp) -> itkMapContainerIRGBAF

        Parameters
        ----------
        comp: std::less< int > const &

        """
        _itkGiftiMeshIOPython.itkMapContainerIRGBAF_swiginit(self, _itkGiftiMeshIOPython.new_itkMapContainerIRGBAF(*args))

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMapContainerIRGBAF_Pointer"""
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMapContainerIRGBAF_Pointer"""
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::map< int,itkRGBAPixelF,std::less< int >,std::allocator< std::pair< int const,itkRGBAPixelF > > > &"""
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::map< int,itkRGBAPixelF,std::less< int >,std::allocator< std::pair< int const,itkRGBAPixelF > > > const &"""
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> itkRGBAPixelF

        Parameters
        ----------
        arg0: int

        ElementAt(self, arg0) -> itkRGBAPixelF

        Parameters
        ----------
        arg0: int

        """
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> itkRGBAPixelF

        Parameters
        ----------
        arg0: int

        """
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> itkRGBAPixelF

        Parameters
        ----------
        arg0: int

        """
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: int
        arg1: itkRGBAPixelF

        """
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: int
        arg1: itkRGBAPixelF

        """
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: int

        """
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: int
        arg1: itkRGBAPixelF *

        """
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: int

        """
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: int

        """
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> int"""
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: int

        """
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_Initialize(self)
    __swig_destroy__ = _itkGiftiMeshIOPython.delete_itkMapContainerIRGBAF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMapContainerIRGBAF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGiftiMeshIOPython.itkMapContainerIRGBAF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMapContainerIRGBAF

        Create a new object of the class itkMapContainerIRGBAF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerIRGBAF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerIRGBAF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerIRGBAF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerIRGBAF in _itkGiftiMeshIOPython:
_itkGiftiMeshIOPython.itkMapContainerIRGBAF_swigregister(itkMapContainerIRGBAF)

def itkMapContainerIstring_New():
    return itkMapContainerIstring.New()

class itkMapContainerIstring(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerIstring class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerIstring
        __init__(self, comp) -> itkMapContainerIstring

        Parameters
        ----------
        comp: std::less< int > const &

        """
        _itkGiftiMeshIOPython.itkMapContainerIstring_swiginit(self, _itkGiftiMeshIOPython.new_itkMapContainerIstring(*args))

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMapContainerIstring_Pointer"""
        return _itkGiftiMeshIOPython.itkMapContainerIstring___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMapContainerIstring_Pointer"""
        return _itkGiftiMeshIOPython.itkMapContainerIstring_Clone(self)

    def CastToSTLContainer(self):
        r"""CastToSTLContainer(self) -> std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > &"""
        return _itkGiftiMeshIOPython.itkMapContainerIstring_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        r"""CastToSTLConstContainer(self) -> std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > > const &"""
        return _itkGiftiMeshIOPython.itkMapContainerIstring_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        r"""
        ElementAt(self, arg0) -> std::string

        Parameters
        ----------
        arg0: int

        ElementAt(self, arg0) -> std::string const &

        Parameters
        ----------
        arg0: int

        """
        return _itkGiftiMeshIOPython.itkMapContainerIstring_ElementAt(self, *args)

    def CreateElementAt(self, arg0):
        r"""
        CreateElementAt(self, arg0) -> std::string &

        Parameters
        ----------
        arg0: int

        """
        return _itkGiftiMeshIOPython.itkMapContainerIstring_CreateElementAt(self, arg0)

    def GetElement(self, arg0):
        r"""
        GetElement(self, arg0) -> std::string

        Parameters
        ----------
        arg0: int

        """
        return _itkGiftiMeshIOPython.itkMapContainerIstring_GetElement(self, arg0)

    def SetElement(self, arg0, arg1):
        r"""
        SetElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: int
        arg1: std::string

        """
        return _itkGiftiMeshIOPython.itkMapContainerIstring_SetElement(self, arg0, arg1)

    def InsertElement(self, arg0, arg1):
        r"""
        InsertElement(self, arg0, arg1)

        Parameters
        ----------
        arg0: int
        arg1: std::string

        """
        return _itkGiftiMeshIOPython.itkMapContainerIstring_InsertElement(self, arg0, arg1)

    def IndexExists(self, arg0):
        r"""
        IndexExists(self, arg0) -> bool

        Parameters
        ----------
        arg0: int

        """
        return _itkGiftiMeshIOPython.itkMapContainerIstring_IndexExists(self, arg0)

    def GetElementIfIndexExists(self, arg0, arg1):
        r"""
        GetElementIfIndexExists(self, arg0, arg1) -> bool

        Parameters
        ----------
        arg0: int
        arg1: std::string *

        """
        return _itkGiftiMeshIOPython.itkMapContainerIstring_GetElementIfIndexExists(self, arg0, arg1)

    def CreateIndex(self, arg0):
        r"""
        CreateIndex(self, arg0)

        Parameters
        ----------
        arg0: int

        """
        return _itkGiftiMeshIOPython.itkMapContainerIstring_CreateIndex(self, arg0)

    def DeleteIndex(self, arg0):
        r"""
        DeleteIndex(self, arg0)

        Parameters
        ----------
        arg0: int

        """
        return _itkGiftiMeshIOPython.itkMapContainerIstring_DeleteIndex(self, arg0)

    def Size(self):
        r"""Size(self) -> int"""
        return _itkGiftiMeshIOPython.itkMapContainerIstring_Size(self)

    def Reserve(self, arg0):
        r"""
        Reserve(self, arg0)

        Parameters
        ----------
        arg0: int

        """
        return _itkGiftiMeshIOPython.itkMapContainerIstring_Reserve(self, arg0)

    def Squeeze(self):
        r"""Squeeze(self)"""
        return _itkGiftiMeshIOPython.itkMapContainerIstring_Squeeze(self)

    def Initialize(self):
        r"""Initialize(self)"""
        return _itkGiftiMeshIOPython.itkMapContainerIstring_Initialize(self)
    __swig_destroy__ = _itkGiftiMeshIOPython.delete_itkMapContainerIstring

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMapContainerIstring

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkGiftiMeshIOPython.itkMapContainerIstring_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMapContainerIstring

        Create a new object of the class itkMapContainerIstring and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerIstring.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerIstring.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerIstring.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerIstring in _itkGiftiMeshIOPython:
_itkGiftiMeshIOPython.itkMapContainerIstring_swigregister(itkMapContainerIstring)

