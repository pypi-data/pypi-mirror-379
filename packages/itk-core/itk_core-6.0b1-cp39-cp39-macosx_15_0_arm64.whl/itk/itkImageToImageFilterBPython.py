# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageToImageFilterBPython
else:
    import _itkImageToImageFilterBPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
class itkImageToImageFilterICD2ICD2(itk.itkImageSourcePython.itkImageSourceICD2):
    r"""Proxy of C++ itkImageToImageFilterICD2ICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD2
        GetInput(self, idx) -> itkImageCD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD2ICD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD2ICD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2_cast(obj)

# Register itkImageToImageFilterICD2ICD2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2_swigregister(itkImageToImageFilterICD2ICD2)
class itkImageToImageFilterICD2ICD3(itk.itkImageSourcePython.itkImageSourceICD3):
    r"""Proxy of C++ itkImageToImageFilterICD2ICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD2
        GetInput(self, idx) -> itkImageCD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD2ICD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD2ICD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD3_cast(obj)

# Register itkImageToImageFilterICD2ICD3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD3_swigregister(itkImageToImageFilterICD2ICD3)
class itkImageToImageFilterICD2ICD4(itk.itkImageSourcePython.itkImageSourceICD4):
    r"""Proxy of C++ itkImageToImageFilterICD2ICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD2
        GetInput(self, idx) -> itkImageCD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD2ICD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD2ICD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD4_cast(obj)

# Register itkImageToImageFilterICD2ICD4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD4_swigregister(itkImageToImageFilterICD2ICD4)
class itkImageToImageFilterICD2ICF2(itk.itkImageSourcePython.itkImageSourceICF2):
    r"""Proxy of C++ itkImageToImageFilterICD2ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD2
        GetInput(self, idx) -> itkImageCD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD2ICF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD2ICF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ICF2_cast(obj)

# Register itkImageToImageFilterICD2ICF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD2ICF2_swigregister(itkImageToImageFilterICD2ICF2)
class itkImageToImageFilterICD2ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterICD2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD2
        GetInput(self, idx) -> itkImageCD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ID2_cast(obj)

# Register itkImageToImageFilterICD2ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD2ID2_swigregister(itkImageToImageFilterICD2ID2)
class itkImageToImageFilterICD2IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterICD2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD2
        GetInput(self, idx) -> itkImageCD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IF2_cast(obj)

# Register itkImageToImageFilterICD2IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD2IF2_swigregister(itkImageToImageFilterICD2IF2)
class itkImageToImageFilterICD2ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterICD2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD2
        GetInput(self, idx) -> itkImageCD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2ISS2_cast(obj)

# Register itkImageToImageFilterICD2ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD2ISS2_swigregister(itkImageToImageFilterICD2ISS2)
class itkImageToImageFilterICD2IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterICD2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD2
        GetInput(self, idx) -> itkImageCD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IUC2_cast(obj)

# Register itkImageToImageFilterICD2IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD2IUC2_swigregister(itkImageToImageFilterICD2IUC2)
class itkImageToImageFilterICD2IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterICD2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD2
        GetInput(self, idx) -> itkImageCD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD2IUS2_cast(obj)

# Register itkImageToImageFilterICD2IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD2IUS2_swigregister(itkImageToImageFilterICD2IUS2)
class itkImageToImageFilterICD3ICD2(itk.itkImageSourcePython.itkImageSourceICD2):
    r"""Proxy of C++ itkImageToImageFilterICD3ICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD3
        GetInput(self, idx) -> itkImageCD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD3ICD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD3ICD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD2_cast(obj)

# Register itkImageToImageFilterICD3ICD2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD2_swigregister(itkImageToImageFilterICD3ICD2)
class itkImageToImageFilterICD3ICD3(itk.itkImageSourcePython.itkImageSourceICD3):
    r"""Proxy of C++ itkImageToImageFilterICD3ICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD3
        GetInput(self, idx) -> itkImageCD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD3ICD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD3ICD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3_cast(obj)

# Register itkImageToImageFilterICD3ICD3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3_swigregister(itkImageToImageFilterICD3ICD3)
class itkImageToImageFilterICD3ICD4(itk.itkImageSourcePython.itkImageSourceICD4):
    r"""Proxy of C++ itkImageToImageFilterICD3ICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD3
        GetInput(self, idx) -> itkImageCD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD3ICD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD3ICD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD4_cast(obj)

# Register itkImageToImageFilterICD3ICD4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD4_swigregister(itkImageToImageFilterICD3ICD4)
class itkImageToImageFilterICD3ICF3(itk.itkImageSourcePython.itkImageSourceICF3):
    r"""Proxy of C++ itkImageToImageFilterICD3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD3
        GetInput(self, idx) -> itkImageCD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD3ICF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD3ICF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ICF3_cast(obj)

# Register itkImageToImageFilterICD3ICF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD3ICF3_swigregister(itkImageToImageFilterICD3ICF3)
class itkImageToImageFilterICD3ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterICD3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD3
        GetInput(self, idx) -> itkImageCD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ID3_cast(obj)

# Register itkImageToImageFilterICD3ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD3ID3_swigregister(itkImageToImageFilterICD3ID3)
class itkImageToImageFilterICD3IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterICD3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD3
        GetInput(self, idx) -> itkImageCD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IF3_cast(obj)

# Register itkImageToImageFilterICD3IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD3IF3_swigregister(itkImageToImageFilterICD3IF3)
class itkImageToImageFilterICD3ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterICD3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD3
        GetInput(self, idx) -> itkImageCD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3ISS3_cast(obj)

# Register itkImageToImageFilterICD3ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD3ISS3_swigregister(itkImageToImageFilterICD3ISS3)
class itkImageToImageFilterICD3IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterICD3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD3
        GetInput(self, idx) -> itkImageCD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IUC3_cast(obj)

# Register itkImageToImageFilterICD3IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD3IUC3_swigregister(itkImageToImageFilterICD3IUC3)
class itkImageToImageFilterICD3IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterICD3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD3
        GetInput(self, idx) -> itkImageCD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD3IUS3_cast(obj)

# Register itkImageToImageFilterICD3IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD3IUS3_swigregister(itkImageToImageFilterICD3IUS3)
class itkImageToImageFilterICD4ICD2(itk.itkImageSourcePython.itkImageSourceICD2):
    r"""Proxy of C++ itkImageToImageFilterICD4ICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD4
        GetInput(self, idx) -> itkImageCD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD4ICD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD4ICD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD2_cast(obj)

# Register itkImageToImageFilterICD4ICD2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD2_swigregister(itkImageToImageFilterICD4ICD2)
class itkImageToImageFilterICD4ICD3(itk.itkImageSourcePython.itkImageSourceICD3):
    r"""Proxy of C++ itkImageToImageFilterICD4ICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD4
        GetInput(self, idx) -> itkImageCD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD4ICD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD4ICD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD3_cast(obj)

# Register itkImageToImageFilterICD4ICD3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD3_swigregister(itkImageToImageFilterICD4ICD3)
class itkImageToImageFilterICD4ICD4(itk.itkImageSourcePython.itkImageSourceICD4):
    r"""Proxy of C++ itkImageToImageFilterICD4ICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD4
        GetInput(self, idx) -> itkImageCD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD4ICD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD4ICD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4_cast(obj)

# Register itkImageToImageFilterICD4ICD4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4_swigregister(itkImageToImageFilterICD4ICD4)
class itkImageToImageFilterICD4ICF4(itk.itkImageSourcePython.itkImageSourceICF4):
    r"""Proxy of C++ itkImageToImageFilterICD4ICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD4
        GetInput(self, idx) -> itkImageCD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD4ICF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD4ICF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ICF4_cast(obj)

# Register itkImageToImageFilterICD4ICF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD4ICF4_swigregister(itkImageToImageFilterICD4ICF4)
class itkImageToImageFilterICD4ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterICD4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD4
        GetInput(self, idx) -> itkImageCD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ID4_cast(obj)

# Register itkImageToImageFilterICD4ID4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD4ID4_swigregister(itkImageToImageFilterICD4ID4)
class itkImageToImageFilterICD4IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterICD4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD4
        GetInput(self, idx) -> itkImageCD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IF4_cast(obj)

# Register itkImageToImageFilterICD4IF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD4IF4_swigregister(itkImageToImageFilterICD4IF4)
class itkImageToImageFilterICD4ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterICD4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD4
        GetInput(self, idx) -> itkImageCD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4ISS4_cast(obj)

# Register itkImageToImageFilterICD4ISS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD4ISS4_swigregister(itkImageToImageFilterICD4ISS4)
class itkImageToImageFilterICD4IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterICD4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD4
        GetInput(self, idx) -> itkImageCD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IUC4_cast(obj)

# Register itkImageToImageFilterICD4IUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD4IUC4_swigregister(itkImageToImageFilterICD4IUC4)
class itkImageToImageFilterICD4IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterICD4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCD4
        GetInput(self, idx) -> itkImageCD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICD4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICD4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICD4IUS4_cast(obj)

# Register itkImageToImageFilterICD4IUS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICD4IUS4_swigregister(itkImageToImageFilterICD4IUS4)
class itkImageToImageFilterICF2ICD2(itk.itkImageSourcePython.itkImageSourceICD2):
    r"""Proxy of C++ itkImageToImageFilterICF2ICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICD2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF2
        GetInput(self, idx) -> itkImageCF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICD2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICD2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICD2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICD2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICD2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICD2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICD2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICD2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICD2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF2ICD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF2ICD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICD2_cast(obj)

# Register itkImageToImageFilterICF2ICD2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICD2_swigregister(itkImageToImageFilterICF2ICD2)
class itkImageToImageFilterICF2ICF2(itk.itkImageSourcePython.itkImageSourceICF2):
    r"""Proxy of C++ itkImageToImageFilterICF2ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF2
        GetInput(self, idx) -> itkImageCF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF2ICF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF2ICF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_cast(obj)

# Register itkImageToImageFilterICF2ICF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2_swigregister(itkImageToImageFilterICF2ICF2)
class itkImageToImageFilterICF2ICF3(itk.itkImageSourcePython.itkImageSourceICF3):
    r"""Proxy of C++ itkImageToImageFilterICF2ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF2
        GetInput(self, idx) -> itkImageCF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF2ICF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF2ICF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_cast(obj)

# Register itkImageToImageFilterICF2ICF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF3_swigregister(itkImageToImageFilterICF2ICF3)
class itkImageToImageFilterICF2ICF4(itk.itkImageSourcePython.itkImageSourceICF4):
    r"""Proxy of C++ itkImageToImageFilterICF2ICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF2
        GetInput(self, idx) -> itkImageCF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF2ICF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF2ICF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF4_cast(obj)

# Register itkImageToImageFilterICF2ICF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF4_swigregister(itkImageToImageFilterICF2ICF4)
class itkImageToImageFilterICF2ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterICF2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF2
        GetInput(self, idx) -> itkImageCF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_cast(obj)

# Register itkImageToImageFilterICF2ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF2ID2_swigregister(itkImageToImageFilterICF2ID2)
class itkImageToImageFilterICF2IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterICF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF2
        GetInput(self, idx) -> itkImageCF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_cast(obj)

# Register itkImageToImageFilterICF2IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2_swigregister(itkImageToImageFilterICF2IF2)
class itkImageToImageFilterICF2ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterICF2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF2
        GetInput(self, idx) -> itkImageCF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_cast(obj)

# Register itkImageToImageFilterICF2ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF2ISS2_swigregister(itkImageToImageFilterICF2ISS2)
class itkImageToImageFilterICF2IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterICF2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF2
        GetInput(self, idx) -> itkImageCF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_cast(obj)

# Register itkImageToImageFilterICF2IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUC2_swigregister(itkImageToImageFilterICF2IUC2)
class itkImageToImageFilterICF2IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterICF2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF2
        GetInput(self, idx) -> itkImageCF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_cast(obj)

# Register itkImageToImageFilterICF2IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF2IUS2_swigregister(itkImageToImageFilterICF2IUS2)
class itkImageToImageFilterICF3ICD3(itk.itkImageSourcePython.itkImageSourceICD3):
    r"""Proxy of C++ itkImageToImageFilterICF3ICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICD3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF3
        GetInput(self, idx) -> itkImageCF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICD3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICD3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICD3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICD3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICD3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICD3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICD3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICD3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICD3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF3ICD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF3ICD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICD3_cast(obj)

# Register itkImageToImageFilterICF3ICD3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICD3_swigregister(itkImageToImageFilterICF3ICD3)
class itkImageToImageFilterICF3ICF2(itk.itkImageSourcePython.itkImageSourceICF2):
    r"""Proxy of C++ itkImageToImageFilterICF3ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF3
        GetInput(self, idx) -> itkImageCF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF3ICF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF3ICF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_cast(obj)

# Register itkImageToImageFilterICF3ICF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF2_swigregister(itkImageToImageFilterICF3ICF2)
class itkImageToImageFilterICF3ICF3(itk.itkImageSourcePython.itkImageSourceICF3):
    r"""Proxy of C++ itkImageToImageFilterICF3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF3
        GetInput(self, idx) -> itkImageCF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF3ICF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF3ICF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_cast(obj)

# Register itkImageToImageFilterICF3ICF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3_swigregister(itkImageToImageFilterICF3ICF3)
class itkImageToImageFilterICF3ICF4(itk.itkImageSourcePython.itkImageSourceICF4):
    r"""Proxy of C++ itkImageToImageFilterICF3ICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF3
        GetInput(self, idx) -> itkImageCF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF3ICF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF3ICF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF4_cast(obj)

# Register itkImageToImageFilterICF3ICF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF4_swigregister(itkImageToImageFilterICF3ICF4)
class itkImageToImageFilterICF3ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterICF3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF3
        GetInput(self, idx) -> itkImageCF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_cast(obj)

# Register itkImageToImageFilterICF3ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF3ID3_swigregister(itkImageToImageFilterICF3ID3)
class itkImageToImageFilterICF3IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterICF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF3
        GetInput(self, idx) -> itkImageCF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_cast(obj)

# Register itkImageToImageFilterICF3IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3_swigregister(itkImageToImageFilterICF3IF3)
class itkImageToImageFilterICF3ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterICF3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF3
        GetInput(self, idx) -> itkImageCF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_cast(obj)

# Register itkImageToImageFilterICF3ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF3ISS3_swigregister(itkImageToImageFilterICF3ISS3)
class itkImageToImageFilterICF3IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterICF3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF3
        GetInput(self, idx) -> itkImageCF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_cast(obj)

# Register itkImageToImageFilterICF3IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUC3_swigregister(itkImageToImageFilterICF3IUC3)
class itkImageToImageFilterICF3IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterICF3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF3
        GetInput(self, idx) -> itkImageCF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_cast(obj)

# Register itkImageToImageFilterICF3IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF3IUS3_swigregister(itkImageToImageFilterICF3IUS3)
class itkImageToImageFilterICF4ICD4(itk.itkImageSourcePython.itkImageSourceICD4):
    r"""Proxy of C++ itkImageToImageFilterICF4ICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICD4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF4
        GetInput(self, idx) -> itkImageCF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICD4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICD4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICD4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICD4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICD4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICD4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICD4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICD4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICD4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF4ICD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF4ICD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICD4_cast(obj)

# Register itkImageToImageFilterICF4ICD4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF4ICD4_swigregister(itkImageToImageFilterICF4ICD4)
class itkImageToImageFilterICF4ICF2(itk.itkImageSourcePython.itkImageSourceICF2):
    r"""Proxy of C++ itkImageToImageFilterICF4ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF4
        GetInput(self, idx) -> itkImageCF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF4ICF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF4ICF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF2_cast(obj)

# Register itkImageToImageFilterICF4ICF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF2_swigregister(itkImageToImageFilterICF4ICF2)
class itkImageToImageFilterICF4ICF3(itk.itkImageSourcePython.itkImageSourceICF3):
    r"""Proxy of C++ itkImageToImageFilterICF4ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF4
        GetInput(self, idx) -> itkImageCF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF4ICF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF4ICF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF3_cast(obj)

# Register itkImageToImageFilterICF4ICF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF3_swigregister(itkImageToImageFilterICF4ICF3)
class itkImageToImageFilterICF4ICF4(itk.itkImageSourcePython.itkImageSourceICF4):
    r"""Proxy of C++ itkImageToImageFilterICF4ICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF4
        GetInput(self, idx) -> itkImageCF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF4ICF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF4ICF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4_cast(obj)

# Register itkImageToImageFilterICF4ICF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4_swigregister(itkImageToImageFilterICF4ICF4)
class itkImageToImageFilterICF4ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterICF4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF4
        GetInput(self, idx) -> itkImageCF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ID4_cast(obj)

# Register itkImageToImageFilterICF4ID4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF4ID4_swigregister(itkImageToImageFilterICF4ID4)
class itkImageToImageFilterICF4IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterICF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF4
        GetInput(self, idx) -> itkImageCF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IF4_cast(obj)

# Register itkImageToImageFilterICF4IF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF4IF4_swigregister(itkImageToImageFilterICF4IF4)
class itkImageToImageFilterICF4ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterICF4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF4
        GetInput(self, idx) -> itkImageCF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4ISS4_cast(obj)

# Register itkImageToImageFilterICF4ISS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF4ISS4_swigregister(itkImageToImageFilterICF4ISS4)
class itkImageToImageFilterICF4IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterICF4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF4
        GetInput(self, idx) -> itkImageCF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IUC4_cast(obj)

# Register itkImageToImageFilterICF4IUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF4IUC4_swigregister(itkImageToImageFilterICF4IUC4)
class itkImageToImageFilterICF4IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterICF4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCF4
        GetInput(self, idx) -> itkImageCF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICF4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICF4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICF4IUS4_cast(obj)

# Register itkImageToImageFilterICF4IUS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICF4IUS4_swigregister(itkImageToImageFilterICF4IUS4)
class itkImageToImageFilterICVF22ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterICVF22ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF22
        GetInput(self, idx) -> itkImageCVF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF22ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF22ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_cast(obj)

# Register itkImageToImageFilterICVF22ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ID2_swigregister(itkImageToImageFilterICVF22ID2)
class itkImageToImageFilterICVF22IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterICVF22IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF22
        GetInput(self, idx) -> itkImageCVF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF22IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF22IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_cast(obj)

# Register itkImageToImageFilterICVF22IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IF2_swigregister(itkImageToImageFilterICVF22IF2)
class itkImageToImageFilterICVF22ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterICVF22ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF22
        GetInput(self, idx) -> itkImageCVF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF22ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF22ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_cast(obj)

# Register itkImageToImageFilterICVF22ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2_swigregister(itkImageToImageFilterICVF22ISS2)
class itkImageToImageFilterICVF22IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterICVF22IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF22
        GetInput(self, idx) -> itkImageCVF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF22IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF22IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_cast(obj)

# Register itkImageToImageFilterICVF22IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2_swigregister(itkImageToImageFilterICVF22IUC2)
class itkImageToImageFilterICVF22IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterICVF22IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF22
        GetInput(self, idx) -> itkImageCVF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF22IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF22IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_cast(obj)

# Register itkImageToImageFilterICVF22IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2_swigregister(itkImageToImageFilterICVF22IUS2)
class itkImageToImageFilterICVF23ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterICVF23ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF23 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF23
        GetInput(self, idx) -> itkImageCVF23

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF23ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF23ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_cast(obj)

# Register itkImageToImageFilterICVF23ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ID3_swigregister(itkImageToImageFilterICVF23ID3)
class itkImageToImageFilterICVF23IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterICVF23IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF23 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF23
        GetInput(self, idx) -> itkImageCVF23

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF23IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF23IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_cast(obj)

# Register itkImageToImageFilterICVF23IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IF3_swigregister(itkImageToImageFilterICVF23IF3)
class itkImageToImageFilterICVF23ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterICVF23ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF23 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF23
        GetInput(self, idx) -> itkImageCVF23

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF23ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF23ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_cast(obj)

# Register itkImageToImageFilterICVF23ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3_swigregister(itkImageToImageFilterICVF23ISS3)
class itkImageToImageFilterICVF23IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterICVF23IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF23 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF23
        GetInput(self, idx) -> itkImageCVF23

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF23IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF23IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_cast(obj)

# Register itkImageToImageFilterICVF23IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3_swigregister(itkImageToImageFilterICVF23IUC3)
class itkImageToImageFilterICVF23IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterICVF23IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF23 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF23
        GetInput(self, idx) -> itkImageCVF23

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF23IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF23IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_cast(obj)

# Register itkImageToImageFilterICVF23IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3_swigregister(itkImageToImageFilterICVF23IUS3)
class itkImageToImageFilterICVF24ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterICVF24ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF24 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF24
        GetInput(self, idx) -> itkImageCVF24

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF24ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF24ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24ID4_cast(obj)

# Register itkImageToImageFilterICVF24ID4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF24ID4_swigregister(itkImageToImageFilterICVF24ID4)
class itkImageToImageFilterICVF24IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterICVF24IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF24 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF24
        GetInput(self, idx) -> itkImageCVF24

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF24IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF24IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IF4_cast(obj)

# Register itkImageToImageFilterICVF24IF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF24IF4_swigregister(itkImageToImageFilterICVF24IF4)
class itkImageToImageFilterICVF24ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterICVF24ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF24 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF24
        GetInput(self, idx) -> itkImageCVF24

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF24ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF24ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24ISS4_cast(obj)

# Register itkImageToImageFilterICVF24ISS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF24ISS4_swigregister(itkImageToImageFilterICVF24ISS4)
class itkImageToImageFilterICVF24IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterICVF24IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF24 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF24
        GetInput(self, idx) -> itkImageCVF24

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF24IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF24IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUC4_cast(obj)

# Register itkImageToImageFilterICVF24IUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUC4_swigregister(itkImageToImageFilterICVF24IUC4)
class itkImageToImageFilterICVF24IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterICVF24IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF24 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF24
        GetInput(self, idx) -> itkImageCVF24

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF24IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF24IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUS4_cast(obj)

# Register itkImageToImageFilterICVF24IUS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUS4_swigregister(itkImageToImageFilterICVF24IUS4)
class itkImageToImageFilterICVF32ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterICVF32ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF32 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF32
        GetInput(self, idx) -> itkImageCVF32

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF32ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF32ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_cast(obj)

# Register itkImageToImageFilterICVF32ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ID2_swigregister(itkImageToImageFilterICVF32ID2)
class itkImageToImageFilterICVF32IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterICVF32IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF32 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF32
        GetInput(self, idx) -> itkImageCVF32

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF32IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF32IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_cast(obj)

# Register itkImageToImageFilterICVF32IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IF2_swigregister(itkImageToImageFilterICVF32IF2)
class itkImageToImageFilterICVF32ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterICVF32ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF32 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF32
        GetInput(self, idx) -> itkImageCVF32

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF32ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF32ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_cast(obj)

# Register itkImageToImageFilterICVF32ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2_swigregister(itkImageToImageFilterICVF32ISS2)
class itkImageToImageFilterICVF32IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterICVF32IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF32 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF32
        GetInput(self, idx) -> itkImageCVF32

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF32IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF32IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_cast(obj)

# Register itkImageToImageFilterICVF32IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2_swigregister(itkImageToImageFilterICVF32IUC2)
class itkImageToImageFilterICVF32IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterICVF32IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF32 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF32
        GetInput(self, idx) -> itkImageCVF32

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF32IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF32IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_cast(obj)

# Register itkImageToImageFilterICVF32IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2_swigregister(itkImageToImageFilterICVF32IUS2)
class itkImageToImageFilterICVF33ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterICVF33ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF33
        GetInput(self, idx) -> itkImageCVF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF33ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF33ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_cast(obj)

# Register itkImageToImageFilterICVF33ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ID3_swigregister(itkImageToImageFilterICVF33ID3)
class itkImageToImageFilterICVF33IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterICVF33IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF33
        GetInput(self, idx) -> itkImageCVF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF33IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF33IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_cast(obj)

# Register itkImageToImageFilterICVF33IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IF3_swigregister(itkImageToImageFilterICVF33IF3)
class itkImageToImageFilterICVF33ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterICVF33ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF33
        GetInput(self, idx) -> itkImageCVF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF33ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF33ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_cast(obj)

# Register itkImageToImageFilterICVF33ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3_swigregister(itkImageToImageFilterICVF33ISS3)
class itkImageToImageFilterICVF33IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterICVF33IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF33
        GetInput(self, idx) -> itkImageCVF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF33IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF33IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_cast(obj)

# Register itkImageToImageFilterICVF33IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3_swigregister(itkImageToImageFilterICVF33IUC3)
class itkImageToImageFilterICVF33IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterICVF33IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF33
        GetInput(self, idx) -> itkImageCVF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF33IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF33IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_cast(obj)

# Register itkImageToImageFilterICVF33IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3_swigregister(itkImageToImageFilterICVF33IUS3)
class itkImageToImageFilterICVF34ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterICVF34ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF34 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF34
        GetInput(self, idx) -> itkImageCVF34

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF34ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF34ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34ID4_cast(obj)

# Register itkImageToImageFilterICVF34ID4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF34ID4_swigregister(itkImageToImageFilterICVF34ID4)
class itkImageToImageFilterICVF34IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterICVF34IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF34 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF34
        GetInput(self, idx) -> itkImageCVF34

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF34IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF34IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IF4_cast(obj)

# Register itkImageToImageFilterICVF34IF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF34IF4_swigregister(itkImageToImageFilterICVF34IF4)
class itkImageToImageFilterICVF34ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterICVF34ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF34 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF34
        GetInput(self, idx) -> itkImageCVF34

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF34ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF34ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34ISS4_cast(obj)

# Register itkImageToImageFilterICVF34ISS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF34ISS4_swigregister(itkImageToImageFilterICVF34ISS4)
class itkImageToImageFilterICVF34IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterICVF34IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF34 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF34
        GetInput(self, idx) -> itkImageCVF34

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF34IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF34IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUC4_cast(obj)

# Register itkImageToImageFilterICVF34IUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUC4_swigregister(itkImageToImageFilterICVF34IUC4)
class itkImageToImageFilterICVF34IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterICVF34IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF34 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF34
        GetInput(self, idx) -> itkImageCVF34

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF34IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF34IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUS4_cast(obj)

# Register itkImageToImageFilterICVF34IUS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUS4_swigregister(itkImageToImageFilterICVF34IUS4)
class itkImageToImageFilterICVF42ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterICVF42ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF42 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF42
        GetInput(self, idx) -> itkImageCVF42

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF42ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF42ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_cast(obj)

# Register itkImageToImageFilterICVF42ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ID2_swigregister(itkImageToImageFilterICVF42ID2)
class itkImageToImageFilterICVF42IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterICVF42IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF42 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF42
        GetInput(self, idx) -> itkImageCVF42

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF42IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF42IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_cast(obj)

# Register itkImageToImageFilterICVF42IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IF2_swigregister(itkImageToImageFilterICVF42IF2)
class itkImageToImageFilterICVF42ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterICVF42ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF42 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF42
        GetInput(self, idx) -> itkImageCVF42

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF42ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF42ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_cast(obj)

# Register itkImageToImageFilterICVF42ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2_swigregister(itkImageToImageFilterICVF42ISS2)
class itkImageToImageFilterICVF42IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterICVF42IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF42 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF42
        GetInput(self, idx) -> itkImageCVF42

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF42IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF42IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_cast(obj)

# Register itkImageToImageFilterICVF42IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2_swigregister(itkImageToImageFilterICVF42IUC2)
class itkImageToImageFilterICVF42IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterICVF42IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF42 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF42
        GetInput(self, idx) -> itkImageCVF42

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF42IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF42IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_cast(obj)

# Register itkImageToImageFilterICVF42IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2_swigregister(itkImageToImageFilterICVF42IUS2)
class itkImageToImageFilterICVF43ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterICVF43ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF43 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF43
        GetInput(self, idx) -> itkImageCVF43

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF43ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF43ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_cast(obj)

# Register itkImageToImageFilterICVF43ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ID3_swigregister(itkImageToImageFilterICVF43ID3)
class itkImageToImageFilterICVF43IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterICVF43IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF43 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF43
        GetInput(self, idx) -> itkImageCVF43

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF43IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF43IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_cast(obj)

# Register itkImageToImageFilterICVF43IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IF3_swigregister(itkImageToImageFilterICVF43IF3)
class itkImageToImageFilterICVF43ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterICVF43ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF43 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF43
        GetInput(self, idx) -> itkImageCVF43

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF43ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF43ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_cast(obj)

# Register itkImageToImageFilterICVF43ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3_swigregister(itkImageToImageFilterICVF43ISS3)
class itkImageToImageFilterICVF43IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterICVF43IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF43 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF43
        GetInput(self, idx) -> itkImageCVF43

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF43IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF43IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_cast(obj)

# Register itkImageToImageFilterICVF43IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3_swigregister(itkImageToImageFilterICVF43IUC3)
class itkImageToImageFilterICVF43IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterICVF43IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF43 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF43
        GetInput(self, idx) -> itkImageCVF43

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF43IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF43IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_cast(obj)

# Register itkImageToImageFilterICVF43IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3_swigregister(itkImageToImageFilterICVF43IUS3)
class itkImageToImageFilterICVF44ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterICVF44ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF44
        GetInput(self, idx) -> itkImageCVF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF44ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF44ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44ID4_cast(obj)

# Register itkImageToImageFilterICVF44ID4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF44ID4_swigregister(itkImageToImageFilterICVF44ID4)
class itkImageToImageFilterICVF44IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterICVF44IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF44
        GetInput(self, idx) -> itkImageCVF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF44IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF44IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IF4_cast(obj)

# Register itkImageToImageFilterICVF44IF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF44IF4_swigregister(itkImageToImageFilterICVF44IF4)
class itkImageToImageFilterICVF44ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterICVF44ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF44
        GetInput(self, idx) -> itkImageCVF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF44ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF44ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44ISS4_cast(obj)

# Register itkImageToImageFilterICVF44ISS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF44ISS4_swigregister(itkImageToImageFilterICVF44ISS4)
class itkImageToImageFilterICVF44IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterICVF44IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF44
        GetInput(self, idx) -> itkImageCVF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF44IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF44IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUC4_cast(obj)

# Register itkImageToImageFilterICVF44IUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUC4_swigregister(itkImageToImageFilterICVF44IUC4)
class itkImageToImageFilterICVF44IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterICVF44IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVF44
        GetInput(self, idx) -> itkImageCVF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterICVF44IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVF44IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUS4_cast(obj)

# Register itkImageToImageFilterICVF44IUS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUS4_swigregister(itkImageToImageFilterICVF44IUS4)
class itkImageToImageFilterID2ICD2(itk.itkImageSourcePython.itkImageSourceICD2):
    r"""Proxy of C++ itkImageToImageFilterID2ICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICD2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICD2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICD2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICD2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICD2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICD2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICD2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICD2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICD2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICD2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2ICD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2ICD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICD2_cast(obj)

# Register itkImageToImageFilterID2ICD2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2ICD2_swigregister(itkImageToImageFilterID2ICD2)
class itkImageToImageFilterID2ICF2(itk.itkImageSourcePython.itkImageSourceICF2):
    r"""Proxy of C++ itkImageToImageFilterID2ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2ICF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2ICF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_cast(obj)

# Register itkImageToImageFilterID2ICF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2ICF2_swigregister(itkImageToImageFilterID2ICF2)
class itkImageToImageFilterID2ICVD22(itk.itkImageSourcePython.itkImageSourceICVD22):
    r"""Proxy of C++ itkImageToImageFilterID2ICVD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2ICVD22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2ICVD22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_cast(obj)

# Register itkImageToImageFilterID2ICVD22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVD22_swigregister(itkImageToImageFilterID2ICVD22)
class itkImageToImageFilterID2ICVF22(itk.itkImageSourcePython.itkImageSourceICVF22):
    r"""Proxy of C++ itkImageToImageFilterID2ICVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2ICVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2ICVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_cast(obj)

# Register itkImageToImageFilterID2ICVF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22_swigregister(itkImageToImageFilterID2ICVF22)
class itkImageToImageFilterID2ICVF32(itk.itkImageSourcePython.itkImageSourceICVF32):
    r"""Proxy of C++ itkImageToImageFilterID2ICVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2ICVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2ICVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_cast(obj)

# Register itkImageToImageFilterID2ICVF32 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF32_swigregister(itkImageToImageFilterID2ICVF32)
class itkImageToImageFilterID2ICVF42(itk.itkImageSourcePython.itkImageSourceICVF42):
    r"""Proxy of C++ itkImageToImageFilterID2ICVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2ICVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2ICVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_cast(obj)

# Register itkImageToImageFilterID2ICVF42 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF42_swigregister(itkImageToImageFilterID2ICVF42)
class itkImageToImageFilterID2ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterID2ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_cast(obj)

# Register itkImageToImageFilterID2ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2ID3_swigregister(itkImageToImageFilterID2ID3)
class itkImageToImageFilterID2ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterID2ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ID4_cast(obj)

# Register itkImageToImageFilterID2ID4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2ID4_swigregister(itkImageToImageFilterID2ID4)
class itkImageToImageFilterID2IRGBAUC2(itk.itkImageSourcePython.itkImageSourceIRGBAUC2):
    r"""Proxy of C++ itkImageToImageFilterID2IRGBAUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2IRGBAUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2IRGBAUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_cast(obj)

# Register itkImageToImageFilterID2IRGBAUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2_swigregister(itkImageToImageFilterID2IRGBAUC2)
class itkImageToImageFilterID2IRGBUC2(itk.itkImageSourcePython.itkImageSourceIRGBUC2):
    r"""Proxy of C++ itkImageToImageFilterID2IRGBUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2IRGBUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2IRGBUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_cast(obj)

# Register itkImageToImageFilterID2IRGBUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2_swigregister(itkImageToImageFilterID2IRGBUC2)
class itkImageToImageFilterID2ISSRTD22(itk.itkImageSourcePython.itkImageSourceISSRTD22):
    r"""Proxy of C++ itkImageToImageFilterID2ISSRTD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2ISSRTD22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2ISSRTD22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_cast(obj)

# Register itkImageToImageFilterID2ISSRTD22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22_swigregister(itkImageToImageFilterID2ISSRTD22)
class itkImageToImageFilterID2ISSRTF22(itk.itkImageSourcePython.itkImageSourceISSRTF22):
    r"""Proxy of C++ itkImageToImageFilterID2ISSRTF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2ISSRTF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2ISSRTF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTF22_cast(obj)

# Register itkImageToImageFilterID2ISSRTF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTF22_swigregister(itkImageToImageFilterID2ISSRTF22)
class itkImageToImageFilterID2IVF22(itk.itkImageSourcePython.itkImageSourceIVF22):
    r"""Proxy of C++ itkImageToImageFilterID2IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2IVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2IVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_cast(obj)

# Register itkImageToImageFilterID2IVF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF22_swigregister(itkImageToImageFilterID2IVF22)
class itkImageToImageFilterID2IVF32(itk.itkImageSourcePython.itkImageSourceIVF32):
    r"""Proxy of C++ itkImageToImageFilterID2IVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2IVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2IVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_cast(obj)

# Register itkImageToImageFilterID2IVF32 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF32_swigregister(itkImageToImageFilterID2IVF32)
class itkImageToImageFilterID2IVF42(itk.itkImageSourcePython.itkImageSourceIVF42):
    r"""Proxy of C++ itkImageToImageFilterID2IVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2IVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2IVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_cast(obj)

# Register itkImageToImageFilterID2IVF42 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2IVF42_swigregister(itkImageToImageFilterID2IVF42)
class itkImageToImageFilterID2VID2(itk.itkImageSourcePython.itkImageSourceVID2):
    r"""Proxy of C++ itkImageToImageFilterID2VID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2VID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2VID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_cast(obj)

# Register itkImageToImageFilterID2VID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2VID2_swigregister(itkImageToImageFilterID2VID2)
class itkImageToImageFilterID2VIF2(itk.itkImageSourcePython.itkImageSourceVIF2):
    r"""Proxy of C++ itkImageToImageFilterID2VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2VIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2VIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_cast(obj)

# Register itkImageToImageFilterID2VIF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2_swigregister(itkImageToImageFilterID2VIF2)
class itkImageToImageFilterID2VISS2(itk.itkImageSourcePython.itkImageSourceVISS2):
    r"""Proxy of C++ itkImageToImageFilterID2VISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2VISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2VISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_cast(obj)

# Register itkImageToImageFilterID2VISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2VISS2_swigregister(itkImageToImageFilterID2VISS2)
class itkImageToImageFilterID2VIUC2(itk.itkImageSourcePython.itkImageSourceVIUC2):
    r"""Proxy of C++ itkImageToImageFilterID2VIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2VIUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2VIUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_cast(obj)

# Register itkImageToImageFilterID2VIUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUC2_swigregister(itkImageToImageFilterID2VIUC2)
class itkImageToImageFilterID2VIUS2(itk.itkImageSourcePython.itkImageSourceVIUS2):
    r"""Proxy of C++ itkImageToImageFilterID2VIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID2VIUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2VIUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_cast(obj)

# Register itkImageToImageFilterID2VIUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID2VIUS2_swigregister(itkImageToImageFilterID2VIUS2)
class itkImageToImageFilterID3ICD3(itk.itkImageSourcePython.itkImageSourceICD3):
    r"""Proxy of C++ itkImageToImageFilterID3ICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICD3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICD3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICD3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICD3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICD3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICD3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICD3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICD3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICD3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICD3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3ICD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3ICD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICD3_cast(obj)

# Register itkImageToImageFilterID3ICD3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3ICD3_swigregister(itkImageToImageFilterID3ICD3)
class itkImageToImageFilterID3ICF3(itk.itkImageSourcePython.itkImageSourceICF3):
    r"""Proxy of C++ itkImageToImageFilterID3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3ICF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3ICF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_cast(obj)

# Register itkImageToImageFilterID3ICF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3ICF3_swigregister(itkImageToImageFilterID3ICF3)
class itkImageToImageFilterID3ICVD33(itk.itkImageSourcePython.itkImageSourceICVD33):
    r"""Proxy of C++ itkImageToImageFilterID3ICVD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3ICVD33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3ICVD33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_cast(obj)

# Register itkImageToImageFilterID3ICVD33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVD33_swigregister(itkImageToImageFilterID3ICVD33)
class itkImageToImageFilterID3ICVF23(itk.itkImageSourcePython.itkImageSourceICVF23):
    r"""Proxy of C++ itkImageToImageFilterID3ICVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3ICVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3ICVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_cast(obj)

# Register itkImageToImageFilterID3ICVF23 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF23_swigregister(itkImageToImageFilterID3ICVF23)
class itkImageToImageFilterID3ICVF33(itk.itkImageSourcePython.itkImageSourceICVF33):
    r"""Proxy of C++ itkImageToImageFilterID3ICVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3ICVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3ICVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_cast(obj)

# Register itkImageToImageFilterID3ICVF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33_swigregister(itkImageToImageFilterID3ICVF33)
class itkImageToImageFilterID3ICVF43(itk.itkImageSourcePython.itkImageSourceICVF43):
    r"""Proxy of C++ itkImageToImageFilterID3ICVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3ICVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3ICVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_cast(obj)

# Register itkImageToImageFilterID3ICVF43 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF43_swigregister(itkImageToImageFilterID3ICVF43)
class itkImageToImageFilterID3ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterID3ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_cast(obj)

# Register itkImageToImageFilterID3ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3ID2_swigregister(itkImageToImageFilterID3ID2)
class itkImageToImageFilterID3ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterID3ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ID4_cast(obj)

# Register itkImageToImageFilterID3ID4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3ID4_swigregister(itkImageToImageFilterID3ID4)
class itkImageToImageFilterID3IRGBAUC3(itk.itkImageSourcePython.itkImageSourceIRGBAUC3):
    r"""Proxy of C++ itkImageToImageFilterID3IRGBAUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3IRGBAUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3IRGBAUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_cast(obj)

# Register itkImageToImageFilterID3IRGBAUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3_swigregister(itkImageToImageFilterID3IRGBAUC3)
class itkImageToImageFilterID3IRGBUC3(itk.itkImageSourcePython.itkImageSourceIRGBUC3):
    r"""Proxy of C++ itkImageToImageFilterID3IRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3IRGBUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3IRGBUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_cast(obj)

# Register itkImageToImageFilterID3IRGBUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3_swigregister(itkImageToImageFilterID3IRGBUC3)
class itkImageToImageFilterID3ISSRTD33(itk.itkImageSourcePython.itkImageSourceISSRTD33):
    r"""Proxy of C++ itkImageToImageFilterID3ISSRTD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3ISSRTD33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3ISSRTD33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_cast(obj)

# Register itkImageToImageFilterID3ISSRTD33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33_swigregister(itkImageToImageFilterID3ISSRTD33)
class itkImageToImageFilterID3ISSRTF33(itk.itkImageSourcePython.itkImageSourceISSRTF33):
    r"""Proxy of C++ itkImageToImageFilterID3ISSRTF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3ISSRTF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3ISSRTF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTF33_cast(obj)

# Register itkImageToImageFilterID3ISSRTF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTF33_swigregister(itkImageToImageFilterID3ISSRTF33)
class itkImageToImageFilterID3IVF23(itk.itkImageSourcePython.itkImageSourceIVF23):
    r"""Proxy of C++ itkImageToImageFilterID3IVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3IVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3IVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_cast(obj)

# Register itkImageToImageFilterID3IVF23 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF23_swigregister(itkImageToImageFilterID3IVF23)
class itkImageToImageFilterID3IVF33(itk.itkImageSourcePython.itkImageSourceIVF33):
    r"""Proxy of C++ itkImageToImageFilterID3IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3IVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3IVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_cast(obj)

# Register itkImageToImageFilterID3IVF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF33_swigregister(itkImageToImageFilterID3IVF33)
class itkImageToImageFilterID3IVF43(itk.itkImageSourcePython.itkImageSourceIVF43):
    r"""Proxy of C++ itkImageToImageFilterID3IVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3IVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3IVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_cast(obj)

# Register itkImageToImageFilterID3IVF43 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3IVF43_swigregister(itkImageToImageFilterID3IVF43)
class itkImageToImageFilterID3PA3DSCISS(itk.itkImageSourcePython.itkImageSourcePA3DSCISS):
    r"""Proxy of C++ itkImageToImageFilterID3PA3DSCISS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCISS_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCISS_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCISS_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCISS_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCISS_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCISS_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCISS_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCISS_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCISS_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCISS_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3PA3DSCISS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3PA3DSCISS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCISS_cast(obj)

# Register itkImageToImageFilterID3PA3DSCISS in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCISS_swigregister(itkImageToImageFilterID3PA3DSCISS)
class itkImageToImageFilterID3PA3DSCIUC(itk.itkImageSourcePython.itkImageSourcePA3DSCIUC):
    r"""Proxy of C++ itkImageToImageFilterID3PA3DSCIUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCIUC_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCIUC_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCIUC_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCIUC_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCIUC_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCIUC_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCIUC_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCIUC_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCIUC_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCIUC_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3PA3DSCIUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3PA3DSCIUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCIUC_cast(obj)

# Register itkImageToImageFilterID3PA3DSCIUC in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCIUC_swigregister(itkImageToImageFilterID3PA3DSCIUC)
class itkImageToImageFilterID3PA3DSCIUS(itk.itkImageSourcePython.itkImageSourcePA3DSCIUS):
    r"""Proxy of C++ itkImageToImageFilterID3PA3DSCIUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCIUS_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCIUS_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCIUS_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCIUS_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCIUS_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCIUS_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCIUS_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCIUS_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCIUS_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCIUS_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3PA3DSCIUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3PA3DSCIUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCIUS_cast(obj)

# Register itkImageToImageFilterID3PA3DSCIUS in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3PA3DSCIUS_swigregister(itkImageToImageFilterID3PA3DSCIUS)
class itkImageToImageFilterID3VID3(itk.itkImageSourcePython.itkImageSourceVID3):
    r"""Proxy of C++ itkImageToImageFilterID3VID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3VID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3VID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_cast(obj)

# Register itkImageToImageFilterID3VID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3VID3_swigregister(itkImageToImageFilterID3VID3)
class itkImageToImageFilterID3VIF3(itk.itkImageSourcePython.itkImageSourceVIF3):
    r"""Proxy of C++ itkImageToImageFilterID3VIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3VIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3VIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_cast(obj)

# Register itkImageToImageFilterID3VIF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3_swigregister(itkImageToImageFilterID3VIF3)
class itkImageToImageFilterID3VISS3(itk.itkImageSourcePython.itkImageSourceVISS3):
    r"""Proxy of C++ itkImageToImageFilterID3VISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3VISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3VISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_cast(obj)

# Register itkImageToImageFilterID3VISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3VISS3_swigregister(itkImageToImageFilterID3VISS3)
class itkImageToImageFilterID3VIUC3(itk.itkImageSourcePython.itkImageSourceVIUC3):
    r"""Proxy of C++ itkImageToImageFilterID3VIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3VIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3VIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_cast(obj)

# Register itkImageToImageFilterID3VIUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUC3_swigregister(itkImageToImageFilterID3VIUC3)
class itkImageToImageFilterID3VIUS3(itk.itkImageSourcePython.itkImageSourceVIUS3):
    r"""Proxy of C++ itkImageToImageFilterID3VIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID3VIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3VIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_cast(obj)

# Register itkImageToImageFilterID3VIUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID3VIUS3_swigregister(itkImageToImageFilterID3VIUS3)
class itkImageToImageFilterID4ICD4(itk.itkImageSourcePython.itkImageSourceICD4):
    r"""Proxy of C++ itkImageToImageFilterID4ICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICD4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICD4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICD4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICD4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICD4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICD4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICD4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICD4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICD4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICD4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID4ICD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4ICD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICD4_cast(obj)

# Register itkImageToImageFilterID4ICD4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID4ICD4_swigregister(itkImageToImageFilterID4ICD4)
class itkImageToImageFilterID4ICF4(itk.itkImageSourcePython.itkImageSourceICF4):
    r"""Proxy of C++ itkImageToImageFilterID4ICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID4ICF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4ICF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICF4_cast(obj)

# Register itkImageToImageFilterID4ICF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID4ICF4_swigregister(itkImageToImageFilterID4ICF4)
class itkImageToImageFilterID4ICVD44(itk.itkImageSourcePython.itkImageSourceICVD44):
    r"""Proxy of C++ itkImageToImageFilterID4ICVD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVD44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVD44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVD44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVD44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVD44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVD44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVD44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVD44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVD44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVD44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID4ICVD44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4ICVD44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVD44_cast(obj)

# Register itkImageToImageFilterID4ICVD44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID4ICVD44_swigregister(itkImageToImageFilterID4ICVD44)
class itkImageToImageFilterID4ICVF24(itk.itkImageSourcePython.itkImageSourceICVF24):
    r"""Proxy of C++ itkImageToImageFilterID4ICVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF24_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF24_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF24_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF24_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF24_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF24_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF24_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF24_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF24_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF24_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID4ICVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4ICVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF24_cast(obj)

# Register itkImageToImageFilterID4ICVF24 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF24_swigregister(itkImageToImageFilterID4ICVF24)
class itkImageToImageFilterID4ICVF34(itk.itkImageSourcePython.itkImageSourceICVF34):
    r"""Proxy of C++ itkImageToImageFilterID4ICVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF34_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF34_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF34_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF34_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF34_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF34_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF34_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF34_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF34_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF34_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID4ICVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4ICVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF34_cast(obj)

# Register itkImageToImageFilterID4ICVF34 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF34_swigregister(itkImageToImageFilterID4ICVF34)
class itkImageToImageFilterID4ICVF44(itk.itkImageSourcePython.itkImageSourceICVF44):
    r"""Proxy of C++ itkImageToImageFilterID4ICVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID4ICVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4ICVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF44_cast(obj)

# Register itkImageToImageFilterID4ICVF44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID4ICVF44_swigregister(itkImageToImageFilterID4ICVF44)
class itkImageToImageFilterID4ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterID4ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID4ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ID2_cast(obj)

# Register itkImageToImageFilterID4ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID4ID2_swigregister(itkImageToImageFilterID4ID2)
class itkImageToImageFilterID4ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterID4ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID4ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ID3_cast(obj)

# Register itkImageToImageFilterID4ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID4ID3_swigregister(itkImageToImageFilterID4ID3)
class itkImageToImageFilterID4IRGBAUC4(itk.itkImageSourcePython.itkImageSourceIRGBAUC4):
    r"""Proxy of C++ itkImageToImageFilterID4IRGBAUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IRGBAUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IRGBAUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IRGBAUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IRGBAUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IRGBAUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IRGBAUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IRGBAUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IRGBAUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IRGBAUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IRGBAUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID4IRGBAUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4IRGBAUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IRGBAUC4_cast(obj)

# Register itkImageToImageFilterID4IRGBAUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID4IRGBAUC4_swigregister(itkImageToImageFilterID4IRGBAUC4)
class itkImageToImageFilterID4IRGBUC4(itk.itkImageSourcePython.itkImageSourceIRGBUC4):
    r"""Proxy of C++ itkImageToImageFilterID4IRGBUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IRGBUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IRGBUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IRGBUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IRGBUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IRGBUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IRGBUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IRGBUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IRGBUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IRGBUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IRGBUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID4IRGBUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4IRGBUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IRGBUC4_cast(obj)

# Register itkImageToImageFilterID4IRGBUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID4IRGBUC4_swigregister(itkImageToImageFilterID4IRGBUC4)
class itkImageToImageFilterID4ISSRTD44(itk.itkImageSourcePython.itkImageSourceISSRTD44):
    r"""Proxy of C++ itkImageToImageFilterID4ISSRTD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTD44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTD44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTD44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTD44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTD44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTD44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTD44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTD44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTD44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTD44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID4ISSRTD44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4ISSRTD44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTD44_cast(obj)

# Register itkImageToImageFilterID4ISSRTD44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTD44_swigregister(itkImageToImageFilterID4ISSRTD44)
class itkImageToImageFilterID4ISSRTF44(itk.itkImageSourcePython.itkImageSourceISSRTF44):
    r"""Proxy of C++ itkImageToImageFilterID4ISSRTF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID4ISSRTF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4ISSRTF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTF44_cast(obj)

# Register itkImageToImageFilterID4ISSRTF44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID4ISSRTF44_swigregister(itkImageToImageFilterID4ISSRTF44)
class itkImageToImageFilterID4IVF24(itk.itkImageSourcePython.itkImageSourceIVF24):
    r"""Proxy of C++ itkImageToImageFilterID4IVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF24_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF24_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF24_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF24_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF24_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF24_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF24_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF24_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF24_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF24_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID4IVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4IVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF24_cast(obj)

# Register itkImageToImageFilterID4IVF24 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID4IVF24_swigregister(itkImageToImageFilterID4IVF24)
class itkImageToImageFilterID4IVF34(itk.itkImageSourcePython.itkImageSourceIVF34):
    r"""Proxy of C++ itkImageToImageFilterID4IVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF34_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF34_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF34_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF34_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF34_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF34_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF34_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF34_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF34_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF34_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID4IVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4IVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF34_cast(obj)

# Register itkImageToImageFilterID4IVF34 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID4IVF34_swigregister(itkImageToImageFilterID4IVF34)
class itkImageToImageFilterID4IVF44(itk.itkImageSourcePython.itkImageSourceIVF44):
    r"""Proxy of C++ itkImageToImageFilterID4IVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID4IVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4IVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4IVF44_cast(obj)

# Register itkImageToImageFilterID4IVF44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID4IVF44_swigregister(itkImageToImageFilterID4IVF44)
class itkImageToImageFilterID4VID4(itk.itkImageSourcePython.itkImageSourceVID4):
    r"""Proxy of C++ itkImageToImageFilterID4VID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID4VID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4VID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VID4_cast(obj)

# Register itkImageToImageFilterID4VID4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID4VID4_swigregister(itkImageToImageFilterID4VID4)
class itkImageToImageFilterID4VIF4(itk.itkImageSourcePython.itkImageSourceVIF4):
    r"""Proxy of C++ itkImageToImageFilterID4VIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID4VIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4VIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIF4_cast(obj)

# Register itkImageToImageFilterID4VIF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID4VIF4_swigregister(itkImageToImageFilterID4VIF4)
class itkImageToImageFilterID4VISS4(itk.itkImageSourcePython.itkImageSourceVISS4):
    r"""Proxy of C++ itkImageToImageFilterID4VISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID4VISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4VISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VISS4_cast(obj)

# Register itkImageToImageFilterID4VISS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID4VISS4_swigregister(itkImageToImageFilterID4VISS4)
class itkImageToImageFilterID4VIUC4(itk.itkImageSourcePython.itkImageSourceVIUC4):
    r"""Proxy of C++ itkImageToImageFilterID4VIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID4VIUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4VIUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIUC4_cast(obj)

# Register itkImageToImageFilterID4VIUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID4VIUC4_swigregister(itkImageToImageFilterID4VIUC4)
class itkImageToImageFilterID4VIUS4(itk.itkImageSourcePython.itkImageSourceVIUS4):
    r"""Proxy of C++ itkImageToImageFilterID4VIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD4
        GetInput(self, idx) -> itkImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterID4VIUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID4VIUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterID4VIUS4_cast(obj)

# Register itkImageToImageFilterID4VIUS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterID4VIUS4_swigregister(itkImageToImageFilterID4VIUS4)
class itkImageToImageFilterIF2ICD2(itk.itkImageSourcePython.itkImageSourceICD2):
    r"""Proxy of C++ itkImageToImageFilterIF2ICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICD2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICD2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICD2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICD2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICD2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICD2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICD2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICD2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICD2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICD2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2ICD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2ICD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICD2_cast(obj)

# Register itkImageToImageFilterIF2ICD2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICD2_swigregister(itkImageToImageFilterIF2ICD2)
class itkImageToImageFilterIF2ICF2(itk.itkImageSourcePython.itkImageSourceICF2):
    r"""Proxy of C++ itkImageToImageFilterIF2ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2ICF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2ICF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_cast(obj)

# Register itkImageToImageFilterIF2ICF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2_swigregister(itkImageToImageFilterIF2ICF2)
class itkImageToImageFilterIF2ICVD22(itk.itkImageSourcePython.itkImageSourceICVD22):
    r"""Proxy of C++ itkImageToImageFilterIF2ICVD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2ICVD22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2ICVD22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_cast(obj)

# Register itkImageToImageFilterIF2ICVD22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVD22_swigregister(itkImageToImageFilterIF2ICVD22)
class itkImageToImageFilterIF2ICVF22(itk.itkImageSourcePython.itkImageSourceICVF22):
    r"""Proxy of C++ itkImageToImageFilterIF2ICVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2ICVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2ICVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_cast(obj)

# Register itkImageToImageFilterIF2ICVF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22_swigregister(itkImageToImageFilterIF2ICVF22)
class itkImageToImageFilterIF2ICVF32(itk.itkImageSourcePython.itkImageSourceICVF32):
    r"""Proxy of C++ itkImageToImageFilterIF2ICVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2ICVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2ICVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_cast(obj)

# Register itkImageToImageFilterIF2ICVF32 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF32_swigregister(itkImageToImageFilterIF2ICVF32)
class itkImageToImageFilterIF2ICVF42(itk.itkImageSourcePython.itkImageSourceICVF42):
    r"""Proxy of C++ itkImageToImageFilterIF2ICVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2ICVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2ICVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_cast(obj)

# Register itkImageToImageFilterIF2ICVF42 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF42_swigregister(itkImageToImageFilterIF2ICVF42)
class itkImageToImageFilterIF2IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterIF2IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_cast(obj)

# Register itkImageToImageFilterIF2IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3_swigregister(itkImageToImageFilterIF2IF3)
class itkImageToImageFilterIF2IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterIF2IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IF4_cast(obj)

# Register itkImageToImageFilterIF2IF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2IF4_swigregister(itkImageToImageFilterIF2IF4)
class itkImageToImageFilterIF2IRGBAUC2(itk.itkImageSourcePython.itkImageSourceIRGBAUC2):
    r"""Proxy of C++ itkImageToImageFilterIF2IRGBAUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2IRGBAUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2IRGBAUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_cast(obj)

# Register itkImageToImageFilterIF2IRGBAUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2_swigregister(itkImageToImageFilterIF2IRGBAUC2)
class itkImageToImageFilterIF2IRGBUC2(itk.itkImageSourcePython.itkImageSourceIRGBUC2):
    r"""Proxy of C++ itkImageToImageFilterIF2IRGBUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2IRGBUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2IRGBUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_cast(obj)

# Register itkImageToImageFilterIF2IRGBUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2_swigregister(itkImageToImageFilterIF2IRGBUC2)
class itkImageToImageFilterIF2ISSRTD22(itk.itkImageSourcePython.itkImageSourceISSRTD22):
    r"""Proxy of C++ itkImageToImageFilterIF2ISSRTD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2ISSRTD22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2ISSRTD22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_cast(obj)

# Register itkImageToImageFilterIF2ISSRTD22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22_swigregister(itkImageToImageFilterIF2ISSRTD22)
class itkImageToImageFilterIF2ISSRTF22(itk.itkImageSourcePython.itkImageSourceISSRTF22):
    r"""Proxy of C++ itkImageToImageFilterIF2ISSRTF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2ISSRTF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2ISSRTF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTF22_cast(obj)

# Register itkImageToImageFilterIF2ISSRTF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTF22_swigregister(itkImageToImageFilterIF2ISSRTF22)
class itkImageToImageFilterIF2IVF22(itk.itkImageSourcePython.itkImageSourceIVF22):
    r"""Proxy of C++ itkImageToImageFilterIF2IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2IVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2IVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_cast(obj)

# Register itkImageToImageFilterIF2IVF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF22_swigregister(itkImageToImageFilterIF2IVF22)
class itkImageToImageFilterIF2IVF32(itk.itkImageSourcePython.itkImageSourceIVF32):
    r"""Proxy of C++ itkImageToImageFilterIF2IVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2IVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2IVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_cast(obj)

# Register itkImageToImageFilterIF2IVF32 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF32_swigregister(itkImageToImageFilterIF2IVF32)
class itkImageToImageFilterIF2IVF42(itk.itkImageSourcePython.itkImageSourceIVF42):
    r"""Proxy of C++ itkImageToImageFilterIF2IVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2IVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2IVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_cast(obj)

# Register itkImageToImageFilterIF2IVF42 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2IVF42_swigregister(itkImageToImageFilterIF2IVF42)
class itkImageToImageFilterIF2VID2(itk.itkImageSourcePython.itkImageSourceVID2):
    r"""Proxy of C++ itkImageToImageFilterIF2VID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2VID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2VID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_cast(obj)

# Register itkImageToImageFilterIF2VID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2_swigregister(itkImageToImageFilterIF2VID2)
class itkImageToImageFilterIF2VIF2(itk.itkImageSourcePython.itkImageSourceVIF2):
    r"""Proxy of C++ itkImageToImageFilterIF2VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2VIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2VIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_cast(obj)

# Register itkImageToImageFilterIF2VIF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2_swigregister(itkImageToImageFilterIF2VIF2)
class itkImageToImageFilterIF2VISS2(itk.itkImageSourcePython.itkImageSourceVISS2):
    r"""Proxy of C++ itkImageToImageFilterIF2VISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2VISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2VISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_cast(obj)

# Register itkImageToImageFilterIF2VISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2VISS2_swigregister(itkImageToImageFilterIF2VISS2)
class itkImageToImageFilterIF2VIUC2(itk.itkImageSourcePython.itkImageSourceVIUC2):
    r"""Proxy of C++ itkImageToImageFilterIF2VIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2VIUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2VIUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_cast(obj)

# Register itkImageToImageFilterIF2VIUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUC2_swigregister(itkImageToImageFilterIF2VIUC2)
class itkImageToImageFilterIF2VIUS2(itk.itkImageSourcePython.itkImageSourceVIUS2):
    r"""Proxy of C++ itkImageToImageFilterIF2VIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF2VIUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2VIUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_cast(obj)

# Register itkImageToImageFilterIF2VIUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF2VIUS2_swigregister(itkImageToImageFilterIF2VIUS2)
class itkImageToImageFilterIF3ICD3(itk.itkImageSourcePython.itkImageSourceICD3):
    r"""Proxy of C++ itkImageToImageFilterIF3ICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICD3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICD3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICD3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICD3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICD3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICD3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICD3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICD3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICD3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICD3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3ICD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3ICD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICD3_cast(obj)

# Register itkImageToImageFilterIF3ICD3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICD3_swigregister(itkImageToImageFilterIF3ICD3)
class itkImageToImageFilterIF3ICF3(itk.itkImageSourcePython.itkImageSourceICF3):
    r"""Proxy of C++ itkImageToImageFilterIF3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3ICF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3ICF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_cast(obj)

# Register itkImageToImageFilterIF3ICF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3_swigregister(itkImageToImageFilterIF3ICF3)
class itkImageToImageFilterIF3ICVD33(itk.itkImageSourcePython.itkImageSourceICVD33):
    r"""Proxy of C++ itkImageToImageFilterIF3ICVD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3ICVD33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3ICVD33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_cast(obj)

# Register itkImageToImageFilterIF3ICVD33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVD33_swigregister(itkImageToImageFilterIF3ICVD33)
class itkImageToImageFilterIF3ICVF23(itk.itkImageSourcePython.itkImageSourceICVF23):
    r"""Proxy of C++ itkImageToImageFilterIF3ICVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3ICVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3ICVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_cast(obj)

# Register itkImageToImageFilterIF3ICVF23 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF23_swigregister(itkImageToImageFilterIF3ICVF23)
class itkImageToImageFilterIF3ICVF33(itk.itkImageSourcePython.itkImageSourceICVF33):
    r"""Proxy of C++ itkImageToImageFilterIF3ICVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3ICVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3ICVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_cast(obj)

# Register itkImageToImageFilterIF3ICVF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33_swigregister(itkImageToImageFilterIF3ICVF33)
class itkImageToImageFilterIF3ICVF43(itk.itkImageSourcePython.itkImageSourceICVF43):
    r"""Proxy of C++ itkImageToImageFilterIF3ICVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3ICVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3ICVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_cast(obj)

# Register itkImageToImageFilterIF3ICVF43 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF43_swigregister(itkImageToImageFilterIF3ICVF43)
class itkImageToImageFilterIF3IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterIF3IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_cast(obj)

# Register itkImageToImageFilterIF3IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3IF2_swigregister(itkImageToImageFilterIF3IF2)
class itkImageToImageFilterIF3IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterIF3IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IF4_cast(obj)

# Register itkImageToImageFilterIF3IF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3IF4_swigregister(itkImageToImageFilterIF3IF4)
class itkImageToImageFilterIF3IRGBAUC3(itk.itkImageSourcePython.itkImageSourceIRGBAUC3):
    r"""Proxy of C++ itkImageToImageFilterIF3IRGBAUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3IRGBAUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3IRGBAUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_cast(obj)

# Register itkImageToImageFilterIF3IRGBAUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3_swigregister(itkImageToImageFilterIF3IRGBAUC3)
class itkImageToImageFilterIF3IRGBUC3(itk.itkImageSourcePython.itkImageSourceIRGBUC3):
    r"""Proxy of C++ itkImageToImageFilterIF3IRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3IRGBUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3IRGBUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_cast(obj)

# Register itkImageToImageFilterIF3IRGBUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3_swigregister(itkImageToImageFilterIF3IRGBUC3)
class itkImageToImageFilterIF3ISSRTD33(itk.itkImageSourcePython.itkImageSourceISSRTD33):
    r"""Proxy of C++ itkImageToImageFilterIF3ISSRTD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3ISSRTD33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3ISSRTD33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_cast(obj)

# Register itkImageToImageFilterIF3ISSRTD33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33_swigregister(itkImageToImageFilterIF3ISSRTD33)
class itkImageToImageFilterIF3ISSRTF33(itk.itkImageSourcePython.itkImageSourceISSRTF33):
    r"""Proxy of C++ itkImageToImageFilterIF3ISSRTF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3ISSRTF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3ISSRTF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTF33_cast(obj)

# Register itkImageToImageFilterIF3ISSRTF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTF33_swigregister(itkImageToImageFilterIF3ISSRTF33)
class itkImageToImageFilterIF3IVF23(itk.itkImageSourcePython.itkImageSourceIVF23):
    r"""Proxy of C++ itkImageToImageFilterIF3IVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3IVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3IVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_cast(obj)

# Register itkImageToImageFilterIF3IVF23 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF23_swigregister(itkImageToImageFilterIF3IVF23)
class itkImageToImageFilterIF3IVF33(itk.itkImageSourcePython.itkImageSourceIVF33):
    r"""Proxy of C++ itkImageToImageFilterIF3IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3IVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3IVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_cast(obj)

# Register itkImageToImageFilterIF3IVF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF33_swigregister(itkImageToImageFilterIF3IVF33)
class itkImageToImageFilterIF3IVF43(itk.itkImageSourcePython.itkImageSourceIVF43):
    r"""Proxy of C++ itkImageToImageFilterIF3IVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3IVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3IVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_cast(obj)

# Register itkImageToImageFilterIF3IVF43 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3IVF43_swigregister(itkImageToImageFilterIF3IVF43)
class itkImageToImageFilterIF3PA3DSCISS(itk.itkImageSourcePython.itkImageSourcePA3DSCISS):
    r"""Proxy of C++ itkImageToImageFilterIF3PA3DSCISS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCISS_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCISS_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCISS_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCISS_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCISS_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCISS_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCISS_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCISS_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCISS_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCISS_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3PA3DSCISS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3PA3DSCISS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCISS_cast(obj)

# Register itkImageToImageFilterIF3PA3DSCISS in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCISS_swigregister(itkImageToImageFilterIF3PA3DSCISS)
class itkImageToImageFilterIF3PA3DSCIUC(itk.itkImageSourcePython.itkImageSourcePA3DSCIUC):
    r"""Proxy of C++ itkImageToImageFilterIF3PA3DSCIUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCIUC_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCIUC_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCIUC_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCIUC_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCIUC_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCIUC_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCIUC_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCIUC_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCIUC_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCIUC_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3PA3DSCIUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3PA3DSCIUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCIUC_cast(obj)

# Register itkImageToImageFilterIF3PA3DSCIUC in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCIUC_swigregister(itkImageToImageFilterIF3PA3DSCIUC)
class itkImageToImageFilterIF3PA3DSCIUS(itk.itkImageSourcePython.itkImageSourcePA3DSCIUS):
    r"""Proxy of C++ itkImageToImageFilterIF3PA3DSCIUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCIUS_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCIUS_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCIUS_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCIUS_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCIUS_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCIUS_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCIUS_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCIUS_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCIUS_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCIUS_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3PA3DSCIUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3PA3DSCIUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCIUS_cast(obj)

# Register itkImageToImageFilterIF3PA3DSCIUS in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3PA3DSCIUS_swigregister(itkImageToImageFilterIF3PA3DSCIUS)
class itkImageToImageFilterIF3VID3(itk.itkImageSourcePython.itkImageSourceVID3):
    r"""Proxy of C++ itkImageToImageFilterIF3VID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3VID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3VID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_cast(obj)

# Register itkImageToImageFilterIF3VID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3_swigregister(itkImageToImageFilterIF3VID3)
class itkImageToImageFilterIF3VIF3(itk.itkImageSourcePython.itkImageSourceVIF3):
    r"""Proxy of C++ itkImageToImageFilterIF3VIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3VIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3VIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_cast(obj)

# Register itkImageToImageFilterIF3VIF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3_swigregister(itkImageToImageFilterIF3VIF3)
class itkImageToImageFilterIF3VISS3(itk.itkImageSourcePython.itkImageSourceVISS3):
    r"""Proxy of C++ itkImageToImageFilterIF3VISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3VISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3VISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_cast(obj)

# Register itkImageToImageFilterIF3VISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3VISS3_swigregister(itkImageToImageFilterIF3VISS3)
class itkImageToImageFilterIF3VIUC3(itk.itkImageSourcePython.itkImageSourceVIUC3):
    r"""Proxy of C++ itkImageToImageFilterIF3VIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3VIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3VIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_cast(obj)

# Register itkImageToImageFilterIF3VIUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUC3_swigregister(itkImageToImageFilterIF3VIUC3)
class itkImageToImageFilterIF3VIUS3(itk.itkImageSourcePython.itkImageSourceVIUS3):
    r"""Proxy of C++ itkImageToImageFilterIF3VIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF3VIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3VIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_cast(obj)

# Register itkImageToImageFilterIF3VIUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF3VIUS3_swigregister(itkImageToImageFilterIF3VIUS3)
class itkImageToImageFilterIF4ICD4(itk.itkImageSourcePython.itkImageSourceICD4):
    r"""Proxy of C++ itkImageToImageFilterIF4ICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICD4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICD4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICD4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICD4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICD4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICD4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICD4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICD4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICD4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICD4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF4ICD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4ICD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICD4_cast(obj)

# Register itkImageToImageFilterIF4ICD4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF4ICD4_swigregister(itkImageToImageFilterIF4ICD4)
class itkImageToImageFilterIF4ICF4(itk.itkImageSourcePython.itkImageSourceICF4):
    r"""Proxy of C++ itkImageToImageFilterIF4ICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF4ICF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4ICF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICF4_cast(obj)

# Register itkImageToImageFilterIF4ICF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF4ICF4_swigregister(itkImageToImageFilterIF4ICF4)
class itkImageToImageFilterIF4ICVD44(itk.itkImageSourcePython.itkImageSourceICVD44):
    r"""Proxy of C++ itkImageToImageFilterIF4ICVD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVD44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVD44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVD44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVD44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVD44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVD44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVD44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVD44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVD44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVD44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF4ICVD44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4ICVD44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVD44_cast(obj)

# Register itkImageToImageFilterIF4ICVD44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVD44_swigregister(itkImageToImageFilterIF4ICVD44)
class itkImageToImageFilterIF4ICVF24(itk.itkImageSourcePython.itkImageSourceICVF24):
    r"""Proxy of C++ itkImageToImageFilterIF4ICVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF24_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF24_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF24_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF24_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF24_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF24_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF24_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF24_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF24_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF24_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF4ICVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4ICVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF24_cast(obj)

# Register itkImageToImageFilterIF4ICVF24 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF24_swigregister(itkImageToImageFilterIF4ICVF24)
class itkImageToImageFilterIF4ICVF34(itk.itkImageSourcePython.itkImageSourceICVF34):
    r"""Proxy of C++ itkImageToImageFilterIF4ICVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF34_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF34_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF34_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF34_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF34_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF34_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF34_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF34_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF34_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF34_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF4ICVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4ICVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF34_cast(obj)

# Register itkImageToImageFilterIF4ICVF34 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF34_swigregister(itkImageToImageFilterIF4ICVF34)
class itkImageToImageFilterIF4ICVF44(itk.itkImageSourcePython.itkImageSourceICVF44):
    r"""Proxy of C++ itkImageToImageFilterIF4ICVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF4ICVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4ICVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF44_cast(obj)

# Register itkImageToImageFilterIF4ICVF44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF4ICVF44_swigregister(itkImageToImageFilterIF4ICVF44)
class itkImageToImageFilterIF4IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterIF4IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF4IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IF2_cast(obj)

# Register itkImageToImageFilterIF4IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF4IF2_swigregister(itkImageToImageFilterIF4IF2)
class itkImageToImageFilterIF4IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterIF4IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF4IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IF3_cast(obj)

# Register itkImageToImageFilterIF4IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF4IF3_swigregister(itkImageToImageFilterIF4IF3)
class itkImageToImageFilterIF4IRGBAUC4(itk.itkImageSourcePython.itkImageSourceIRGBAUC4):
    r"""Proxy of C++ itkImageToImageFilterIF4IRGBAUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IRGBAUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IRGBAUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IRGBAUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IRGBAUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IRGBAUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IRGBAUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IRGBAUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IRGBAUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IRGBAUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IRGBAUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF4IRGBAUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4IRGBAUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IRGBAUC4_cast(obj)

# Register itkImageToImageFilterIF4IRGBAUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF4IRGBAUC4_swigregister(itkImageToImageFilterIF4IRGBAUC4)
class itkImageToImageFilterIF4IRGBUC4(itk.itkImageSourcePython.itkImageSourceIRGBUC4):
    r"""Proxy of C++ itkImageToImageFilterIF4IRGBUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IRGBUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IRGBUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IRGBUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IRGBUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IRGBUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IRGBUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IRGBUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IRGBUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IRGBUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IRGBUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF4IRGBUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4IRGBUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IRGBUC4_cast(obj)

# Register itkImageToImageFilterIF4IRGBUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF4IRGBUC4_swigregister(itkImageToImageFilterIF4IRGBUC4)
class itkImageToImageFilterIF4ISSRTD44(itk.itkImageSourcePython.itkImageSourceISSRTD44):
    r"""Proxy of C++ itkImageToImageFilterIF4ISSRTD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTD44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTD44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTD44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTD44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTD44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTD44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTD44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTD44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTD44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTD44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF4ISSRTD44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4ISSRTD44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTD44_cast(obj)

# Register itkImageToImageFilterIF4ISSRTD44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTD44_swigregister(itkImageToImageFilterIF4ISSRTD44)
class itkImageToImageFilterIF4ISSRTF44(itk.itkImageSourcePython.itkImageSourceISSRTF44):
    r"""Proxy of C++ itkImageToImageFilterIF4ISSRTF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF4ISSRTF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4ISSRTF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTF44_cast(obj)

# Register itkImageToImageFilterIF4ISSRTF44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF4ISSRTF44_swigregister(itkImageToImageFilterIF4ISSRTF44)
class itkImageToImageFilterIF4IVF24(itk.itkImageSourcePython.itkImageSourceIVF24):
    r"""Proxy of C++ itkImageToImageFilterIF4IVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF24_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF24_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF24_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF24_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF24_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF24_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF24_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF24_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF24_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF24_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF4IVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4IVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF24_cast(obj)

# Register itkImageToImageFilterIF4IVF24 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF24_swigregister(itkImageToImageFilterIF4IVF24)
class itkImageToImageFilterIF4IVF34(itk.itkImageSourcePython.itkImageSourceIVF34):
    r"""Proxy of C++ itkImageToImageFilterIF4IVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF34_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF34_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF34_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF34_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF34_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF34_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF34_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF34_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF34_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF34_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF4IVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4IVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF34_cast(obj)

# Register itkImageToImageFilterIF4IVF34 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF34_swigregister(itkImageToImageFilterIF4IVF34)
class itkImageToImageFilterIF4IVF44(itk.itkImageSourcePython.itkImageSourceIVF44):
    r"""Proxy of C++ itkImageToImageFilterIF4IVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF4IVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4IVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF44_cast(obj)

# Register itkImageToImageFilterIF4IVF44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF4IVF44_swigregister(itkImageToImageFilterIF4IVF44)
class itkImageToImageFilterIF4VID4(itk.itkImageSourcePython.itkImageSourceVID4):
    r"""Proxy of C++ itkImageToImageFilterIF4VID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF4VID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4VID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VID4_cast(obj)

# Register itkImageToImageFilterIF4VID4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF4VID4_swigregister(itkImageToImageFilterIF4VID4)
class itkImageToImageFilterIF4VIF4(itk.itkImageSourcePython.itkImageSourceVIF4):
    r"""Proxy of C++ itkImageToImageFilterIF4VIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF4VIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4VIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIF4_cast(obj)

# Register itkImageToImageFilterIF4VIF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF4VIF4_swigregister(itkImageToImageFilterIF4VIF4)
class itkImageToImageFilterIF4VISS4(itk.itkImageSourcePython.itkImageSourceVISS4):
    r"""Proxy of C++ itkImageToImageFilterIF4VISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF4VISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4VISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VISS4_cast(obj)

# Register itkImageToImageFilterIF4VISS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF4VISS4_swigregister(itkImageToImageFilterIF4VISS4)
class itkImageToImageFilterIF4VIUC4(itk.itkImageSourcePython.itkImageSourceVIUC4):
    r"""Proxy of C++ itkImageToImageFilterIF4VIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF4VIUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4VIUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIUC4_cast(obj)

# Register itkImageToImageFilterIF4VIUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF4VIUC4_swigregister(itkImageToImageFilterIF4VIUC4)
class itkImageToImageFilterIF4VIUS4(itk.itkImageSourcePython.itkImageSourceVIUS4):
    r"""Proxy of C++ itkImageToImageFilterIF4VIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF4
        GetInput(self, idx) -> itkImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIF4VIUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF4VIUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIF4VIUS4_cast(obj)

# Register itkImageToImageFilterIF4VIUS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIF4VIUS4_swigregister(itkImageToImageFilterIF4VIUS4)
class itkImageToImageFilterIRGBAUC2ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBAUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBAUC2
        GetInput(self, idx) -> itkImageRGBAUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBAUC2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_cast(obj)

# Register itkImageToImageFilterIRGBAUC2ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ID2_swigregister(itkImageToImageFilterIRGBAUC2ID2)
class itkImageToImageFilterIRGBAUC2IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBAUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBAUC2
        GetInput(self, idx) -> itkImageRGBAUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBAUC2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_cast(obj)

# Register itkImageToImageFilterIRGBAUC2IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IF2_swigregister(itkImageToImageFilterIRGBAUC2IF2)
class itkImageToImageFilterIRGBAUC2ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBAUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBAUC2
        GetInput(self, idx) -> itkImageRGBAUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBAUC2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_cast(obj)

# Register itkImageToImageFilterIRGBAUC2ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2_swigregister(itkImageToImageFilterIRGBAUC2ISS2)
class itkImageToImageFilterIRGBAUC2IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBAUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBAUC2
        GetInput(self, idx) -> itkImageRGBAUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBAUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_cast(obj)

# Register itkImageToImageFilterIRGBAUC2IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2_swigregister(itkImageToImageFilterIRGBAUC2IUC2)
class itkImageToImageFilterIRGBAUC2IUL2(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC2IUL2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBAUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBAUC2
        GetInput(self, idx) -> itkImageRGBAUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC2IUL2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBAUC2IUL2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_cast(obj)

# Register itkImageToImageFilterIRGBAUC2IUL2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUL2_swigregister(itkImageToImageFilterIRGBAUC2IUL2)
class itkImageToImageFilterIRGBAUC2IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBAUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBAUC2
        GetInput(self, idx) -> itkImageRGBAUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBAUC2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_cast(obj)

# Register itkImageToImageFilterIRGBAUC2IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2_swigregister(itkImageToImageFilterIRGBAUC2IUS2)
class itkImageToImageFilterIRGBAUC3ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBAUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBAUC3
        GetInput(self, idx) -> itkImageRGBAUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBAUC3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_cast(obj)

# Register itkImageToImageFilterIRGBAUC3ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ID3_swigregister(itkImageToImageFilterIRGBAUC3ID3)
class itkImageToImageFilterIRGBAUC3IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBAUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBAUC3
        GetInput(self, idx) -> itkImageRGBAUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBAUC3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_cast(obj)

# Register itkImageToImageFilterIRGBAUC3IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IF3_swigregister(itkImageToImageFilterIRGBAUC3IF3)
class itkImageToImageFilterIRGBAUC3ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBAUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBAUC3
        GetInput(self, idx) -> itkImageRGBAUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBAUC3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_cast(obj)

# Register itkImageToImageFilterIRGBAUC3ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3_swigregister(itkImageToImageFilterIRGBAUC3ISS3)
class itkImageToImageFilterIRGBAUC3IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBAUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBAUC3
        GetInput(self, idx) -> itkImageRGBAUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBAUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_cast(obj)

# Register itkImageToImageFilterIRGBAUC3IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3_swigregister(itkImageToImageFilterIRGBAUC3IUC3)
class itkImageToImageFilterIRGBAUC3IUL3(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC3IUL3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBAUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBAUC3
        GetInput(self, idx) -> itkImageRGBAUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC3IUL3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBAUC3IUL3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_cast(obj)

# Register itkImageToImageFilterIRGBAUC3IUL3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUL3_swigregister(itkImageToImageFilterIRGBAUC3IUL3)
class itkImageToImageFilterIRGBAUC3IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBAUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBAUC3
        GetInput(self, idx) -> itkImageRGBAUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBAUC3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_cast(obj)

# Register itkImageToImageFilterIRGBAUC3IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3_swigregister(itkImageToImageFilterIRGBAUC3IUS3)
class itkImageToImageFilterIRGBAUC4ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBAUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBAUC4
        GetInput(self, idx) -> itkImageRGBAUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBAUC4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ID4_cast(obj)

# Register itkImageToImageFilterIRGBAUC4ID4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ID4_swigregister(itkImageToImageFilterIRGBAUC4ID4)
class itkImageToImageFilterIRGBAUC4IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBAUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBAUC4
        GetInput(self, idx) -> itkImageRGBAUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBAUC4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IF4_cast(obj)

# Register itkImageToImageFilterIRGBAUC4IF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IF4_swigregister(itkImageToImageFilterIRGBAUC4IF4)
class itkImageToImageFilterIRGBAUC4ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBAUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBAUC4
        GetInput(self, idx) -> itkImageRGBAUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBAUC4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ISS4_cast(obj)

# Register itkImageToImageFilterIRGBAUC4ISS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ISS4_swigregister(itkImageToImageFilterIRGBAUC4ISS4)
class itkImageToImageFilterIRGBAUC4IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBAUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBAUC4
        GetInput(self, idx) -> itkImageRGBAUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBAUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUC4_cast(obj)

# Register itkImageToImageFilterIRGBAUC4IUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUC4_swigregister(itkImageToImageFilterIRGBAUC4IUC4)
class itkImageToImageFilterIRGBAUC4IUL4(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC4IUL4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBAUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUL4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBAUC4
        GetInput(self, idx) -> itkImageRGBAUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUL4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUL4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUL4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUL4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUL4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUL4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUL4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUL4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUL4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC4IUL4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBAUC4IUL4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUL4_cast(obj)

# Register itkImageToImageFilterIRGBAUC4IUL4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUL4_swigregister(itkImageToImageFilterIRGBAUC4IUL4)
class itkImageToImageFilterIRGBAUC4IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterIRGBAUC4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBAUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBAUC4
        GetInput(self, idx) -> itkImageRGBAUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBAUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBAUC4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBAUC4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUS4_cast(obj)

# Register itkImageToImageFilterIRGBAUC4IUS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUS4_swigregister(itkImageToImageFilterIRGBAUC4IUS4)
class itkImageToImageFilterIRGBUC2ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC2
        GetInput(self, idx) -> itkImageRGBUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_cast(obj)

# Register itkImageToImageFilterIRGBUC2ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ID2_swigregister(itkImageToImageFilterIRGBUC2ID2)
class itkImageToImageFilterIRGBUC2IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC2
        GetInput(self, idx) -> itkImageRGBUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_cast(obj)

# Register itkImageToImageFilterIRGBUC2IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IF2_swigregister(itkImageToImageFilterIRGBUC2IF2)
class itkImageToImageFilterIRGBUC2IRGBUC3(itk.itkImageSourcePython.itkImageSourceIRGBUC3):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC2IRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC2
        GetInput(self, idx) -> itkImageRGBUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC2IRGBUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC2IRGBUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_cast(obj)

# Register itkImageToImageFilterIRGBUC2IRGBUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC3_swigregister(itkImageToImageFilterIRGBUC2IRGBUC3)
class itkImageToImageFilterIRGBUC2IRGBUC4(itk.itkImageSourcePython.itkImageSourceIRGBUC4):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC2IRGBUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC2
        GetInput(self, idx) -> itkImageRGBUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC2IRGBUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC2IRGBUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC4_cast(obj)

# Register itkImageToImageFilterIRGBUC2IRGBUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IRGBUC4_swigregister(itkImageToImageFilterIRGBUC2IRGBUC4)
class itkImageToImageFilterIRGBUC2ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC2
        GetInput(self, idx) -> itkImageRGBUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_cast(obj)

# Register itkImageToImageFilterIRGBUC2ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2_swigregister(itkImageToImageFilterIRGBUC2ISS2)
class itkImageToImageFilterIRGBUC2IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC2
        GetInput(self, idx) -> itkImageRGBUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_cast(obj)

# Register itkImageToImageFilterIRGBUC2IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2_swigregister(itkImageToImageFilterIRGBUC2IUC2)
class itkImageToImageFilterIRGBUC2IUL2(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC2IUL2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC2
        GetInput(self, idx) -> itkImageRGBUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC2IUL2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC2IUL2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_cast(obj)

# Register itkImageToImageFilterIRGBUC2IUL2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUL2_swigregister(itkImageToImageFilterIRGBUC2IUL2)
class itkImageToImageFilterIRGBUC2IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC2
        GetInput(self, idx) -> itkImageRGBUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_cast(obj)

# Register itkImageToImageFilterIRGBUC2IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2_swigregister(itkImageToImageFilterIRGBUC2IUS2)
class itkImageToImageFilterIRGBUC3ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC3
        GetInput(self, idx) -> itkImageRGBUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_cast(obj)

# Register itkImageToImageFilterIRGBUC3ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ID3_swigregister(itkImageToImageFilterIRGBUC3ID3)
class itkImageToImageFilterIRGBUC3IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC3
        GetInput(self, idx) -> itkImageRGBUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_cast(obj)

# Register itkImageToImageFilterIRGBUC3IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IF3_swigregister(itkImageToImageFilterIRGBUC3IF3)
class itkImageToImageFilterIRGBUC3IRGBUC2(itk.itkImageSourcePython.itkImageSourceIRGBUC2):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC3IRGBUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC3
        GetInput(self, idx) -> itkImageRGBUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC3IRGBUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC3IRGBUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_cast(obj)

# Register itkImageToImageFilterIRGBUC3IRGBUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC2_swigregister(itkImageToImageFilterIRGBUC3IRGBUC2)
class itkImageToImageFilterIRGBUC3IRGBUC4(itk.itkImageSourcePython.itkImageSourceIRGBUC4):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC3IRGBUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC3
        GetInput(self, idx) -> itkImageRGBUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC3IRGBUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC3IRGBUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC4_cast(obj)

# Register itkImageToImageFilterIRGBUC3IRGBUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IRGBUC4_swigregister(itkImageToImageFilterIRGBUC3IRGBUC4)
class itkImageToImageFilterIRGBUC3ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC3
        GetInput(self, idx) -> itkImageRGBUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_cast(obj)

# Register itkImageToImageFilterIRGBUC3ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3_swigregister(itkImageToImageFilterIRGBUC3ISS3)
class itkImageToImageFilterIRGBUC3IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC3
        GetInput(self, idx) -> itkImageRGBUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_cast(obj)

# Register itkImageToImageFilterIRGBUC3IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3_swigregister(itkImageToImageFilterIRGBUC3IUC3)
class itkImageToImageFilterIRGBUC3IUL3(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC3IUL3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC3
        GetInput(self, idx) -> itkImageRGBUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC3IUL3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC3IUL3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_cast(obj)

# Register itkImageToImageFilterIRGBUC3IUL3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUL3_swigregister(itkImageToImageFilterIRGBUC3IUL3)
class itkImageToImageFilterIRGBUC3IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC3
        GetInput(self, idx) -> itkImageRGBUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_cast(obj)

# Register itkImageToImageFilterIRGBUC3IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3_swigregister(itkImageToImageFilterIRGBUC3IUS3)
class itkImageToImageFilterIRGBUC4ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC4
        GetInput(self, idx) -> itkImageRGBUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ID4_cast(obj)

# Register itkImageToImageFilterIRGBUC4ID4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ID4_swigregister(itkImageToImageFilterIRGBUC4ID4)
class itkImageToImageFilterIRGBUC4IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC4
        GetInput(self, idx) -> itkImageRGBUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IF4_cast(obj)

# Register itkImageToImageFilterIRGBUC4IF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IF4_swigregister(itkImageToImageFilterIRGBUC4IF4)
class itkImageToImageFilterIRGBUC4IRGBUC2(itk.itkImageSourcePython.itkImageSourceIRGBUC2):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC4IRGBUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IRGBUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC4
        GetInput(self, idx) -> itkImageRGBUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IRGBUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IRGBUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IRGBUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IRGBUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IRGBUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IRGBUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IRGBUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IRGBUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IRGBUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC4IRGBUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC4IRGBUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IRGBUC2_cast(obj)

# Register itkImageToImageFilterIRGBUC4IRGBUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IRGBUC2_swigregister(itkImageToImageFilterIRGBUC4IRGBUC2)
class itkImageToImageFilterIRGBUC4IRGBUC3(itk.itkImageSourcePython.itkImageSourceIRGBUC3):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC4IRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IRGBUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC4
        GetInput(self, idx) -> itkImageRGBUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IRGBUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IRGBUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IRGBUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IRGBUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IRGBUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IRGBUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IRGBUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IRGBUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IRGBUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC4IRGBUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC4IRGBUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IRGBUC3_cast(obj)

# Register itkImageToImageFilterIRGBUC4IRGBUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IRGBUC3_swigregister(itkImageToImageFilterIRGBUC4IRGBUC3)
class itkImageToImageFilterIRGBUC4ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC4
        GetInput(self, idx) -> itkImageRGBUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ISS4_cast(obj)

# Register itkImageToImageFilterIRGBUC4ISS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ISS4_swigregister(itkImageToImageFilterIRGBUC4ISS4)
class itkImageToImageFilterIRGBUC4IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC4
        GetInput(self, idx) -> itkImageRGBUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUC4_cast(obj)

# Register itkImageToImageFilterIRGBUC4IUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUC4_swigregister(itkImageToImageFilterIRGBUC4IUC4)
class itkImageToImageFilterIRGBUC4IUL4(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC4IUL4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUL4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC4
        GetInput(self, idx) -> itkImageRGBUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUL4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUL4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUL4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUL4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUL4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUL4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUL4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUL4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUL4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC4IUL4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC4IUL4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUL4_cast(obj)

# Register itkImageToImageFilterIRGBUC4IUL4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUL4_swigregister(itkImageToImageFilterIRGBUC4IUL4)
class itkImageToImageFilterIRGBUC4IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterIRGBUC4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageRGBUC4
        GetInput(self, idx) -> itkImageRGBUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageRGBUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIRGBUC4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIRGBUC4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUS4_cast(obj)

# Register itkImageToImageFilterIRGBUC4IUS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUS4_swigregister(itkImageToImageFilterIRGBUC4IUS4)
class itkImageToImageFilterISS2ICD2(itk.itkImageSourcePython.itkImageSourceICD2):
    r"""Proxy of C++ itkImageToImageFilterISS2ICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICD2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICD2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICD2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICD2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICD2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICD2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICD2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICD2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICD2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICD2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2ICD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2ICD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICD2_cast(obj)

# Register itkImageToImageFilterISS2ICD2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICD2_swigregister(itkImageToImageFilterISS2ICD2)
class itkImageToImageFilterISS2ICF2(itk.itkImageSourcePython.itkImageSourceICF2):
    r"""Proxy of C++ itkImageToImageFilterISS2ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2ICF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2ICF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_cast(obj)

# Register itkImageToImageFilterISS2ICF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICF2_swigregister(itkImageToImageFilterISS2ICF2)
class itkImageToImageFilterISS2ICVF22(itk.itkImageSourcePython.itkImageSourceICVF22):
    r"""Proxy of C++ itkImageToImageFilterISS2ICVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2ICVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2ICVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_cast(obj)

# Register itkImageToImageFilterISS2ICVF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22_swigregister(itkImageToImageFilterISS2ICVF22)
class itkImageToImageFilterISS2ICVF32(itk.itkImageSourcePython.itkImageSourceICVF32):
    r"""Proxy of C++ itkImageToImageFilterISS2ICVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2ICVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2ICVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_cast(obj)

# Register itkImageToImageFilterISS2ICVF32 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF32_swigregister(itkImageToImageFilterISS2ICVF32)
class itkImageToImageFilterISS2ICVF42(itk.itkImageSourcePython.itkImageSourceICVF42):
    r"""Proxy of C++ itkImageToImageFilterISS2ICVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2ICVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2ICVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_cast(obj)

# Register itkImageToImageFilterISS2ICVF42 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF42_swigregister(itkImageToImageFilterISS2ICVF42)
class itkImageToImageFilterISS2IRGBAUC2(itk.itkImageSourcePython.itkImageSourceIRGBAUC2):
    r"""Proxy of C++ itkImageToImageFilterISS2IRGBAUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2IRGBAUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2IRGBAUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_cast(obj)

# Register itkImageToImageFilterISS2IRGBAUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2_swigregister(itkImageToImageFilterISS2IRGBAUC2)
class itkImageToImageFilterISS2IRGBUC2(itk.itkImageSourcePython.itkImageSourceIRGBUC2):
    r"""Proxy of C++ itkImageToImageFilterISS2IRGBUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2IRGBUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2IRGBUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_cast(obj)

# Register itkImageToImageFilterISS2IRGBUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2_swigregister(itkImageToImageFilterISS2IRGBUC2)
class itkImageToImageFilterISS2ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterISS2ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_cast(obj)

# Register itkImageToImageFilterISS2ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3_swigregister(itkImageToImageFilterISS2ISS3)
class itkImageToImageFilterISS2ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterISS2ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS4_cast(obj)

# Register itkImageToImageFilterISS2ISS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS4_swigregister(itkImageToImageFilterISS2ISS4)
class itkImageToImageFilterISS2ISSRTD22(itk.itkImageSourcePython.itkImageSourceISSRTD22):
    r"""Proxy of C++ itkImageToImageFilterISS2ISSRTD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2ISSRTD22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2ISSRTD22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_cast(obj)

# Register itkImageToImageFilterISS2ISSRTD22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22_swigregister(itkImageToImageFilterISS2ISSRTD22)
class itkImageToImageFilterISS2ISSRTF22(itk.itkImageSourcePython.itkImageSourceISSRTF22):
    r"""Proxy of C++ itkImageToImageFilterISS2ISSRTF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2ISSRTF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2ISSRTF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTF22_cast(obj)

# Register itkImageToImageFilterISS2ISSRTF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTF22_swigregister(itkImageToImageFilterISS2ISSRTF22)
class itkImageToImageFilterISS2IVF22(itk.itkImageSourcePython.itkImageSourceIVF22):
    r"""Proxy of C++ itkImageToImageFilterISS2IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2IVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2IVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_cast(obj)

# Register itkImageToImageFilterISS2IVF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF22_swigregister(itkImageToImageFilterISS2IVF22)
class itkImageToImageFilterISS2IVF32(itk.itkImageSourcePython.itkImageSourceIVF32):
    r"""Proxy of C++ itkImageToImageFilterISS2IVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2IVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2IVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_cast(obj)

# Register itkImageToImageFilterISS2IVF32 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF32_swigregister(itkImageToImageFilterISS2IVF32)
class itkImageToImageFilterISS2IVF42(itk.itkImageSourcePython.itkImageSourceIVF42):
    r"""Proxy of C++ itkImageToImageFilterISS2IVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2IVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2IVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_cast(obj)

# Register itkImageToImageFilterISS2IVF42 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2IVF42_swigregister(itkImageToImageFilterISS2IVF42)
class itkImageToImageFilterISS2VID2(itk.itkImageSourcePython.itkImageSourceVID2):
    r"""Proxy of C++ itkImageToImageFilterISS2VID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2VID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2VID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_cast(obj)

# Register itkImageToImageFilterISS2VID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2_swigregister(itkImageToImageFilterISS2VID2)
class itkImageToImageFilterISS2VIF2(itk.itkImageSourcePython.itkImageSourceVIF2):
    r"""Proxy of C++ itkImageToImageFilterISS2VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2VIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2VIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_cast(obj)

# Register itkImageToImageFilterISS2VIF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2_swigregister(itkImageToImageFilterISS2VIF2)
class itkImageToImageFilterISS2VISS2(itk.itkImageSourcePython.itkImageSourceVISS2):
    r"""Proxy of C++ itkImageToImageFilterISS2VISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2VISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2VISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_cast(obj)

# Register itkImageToImageFilterISS2VISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2VISS2_swigregister(itkImageToImageFilterISS2VISS2)
class itkImageToImageFilterISS2VIUC2(itk.itkImageSourcePython.itkImageSourceVIUC2):
    r"""Proxy of C++ itkImageToImageFilterISS2VIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2VIUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2VIUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_cast(obj)

# Register itkImageToImageFilterISS2VIUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUC2_swigregister(itkImageToImageFilterISS2VIUC2)
class itkImageToImageFilterISS2VIUS2(itk.itkImageSourcePython.itkImageSourceVIUS2):
    r"""Proxy of C++ itkImageToImageFilterISS2VIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS2
        GetInput(self, idx) -> itkImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS2VIUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS2VIUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_cast(obj)

# Register itkImageToImageFilterISS2VIUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS2VIUS2_swigregister(itkImageToImageFilterISS2VIUS2)
class itkImageToImageFilterISS3ICD3(itk.itkImageSourcePython.itkImageSourceICD3):
    r"""Proxy of C++ itkImageToImageFilterISS3ICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICD3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICD3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICD3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICD3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICD3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICD3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICD3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICD3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICD3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICD3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3ICD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3ICD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICD3_cast(obj)

# Register itkImageToImageFilterISS3ICD3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICD3_swigregister(itkImageToImageFilterISS3ICD3)
class itkImageToImageFilterISS3ICF3(itk.itkImageSourcePython.itkImageSourceICF3):
    r"""Proxy of C++ itkImageToImageFilterISS3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3ICF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3ICF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_cast(obj)

# Register itkImageToImageFilterISS3ICF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICF3_swigregister(itkImageToImageFilterISS3ICF3)
class itkImageToImageFilterISS3ICVF23(itk.itkImageSourcePython.itkImageSourceICVF23):
    r"""Proxy of C++ itkImageToImageFilterISS3ICVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3ICVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3ICVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_cast(obj)

# Register itkImageToImageFilterISS3ICVF23 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF23_swigregister(itkImageToImageFilterISS3ICVF23)
class itkImageToImageFilterISS3ICVF33(itk.itkImageSourcePython.itkImageSourceICVF33):
    r"""Proxy of C++ itkImageToImageFilterISS3ICVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3ICVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3ICVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_cast(obj)

# Register itkImageToImageFilterISS3ICVF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33_swigregister(itkImageToImageFilterISS3ICVF33)
class itkImageToImageFilterISS3ICVF43(itk.itkImageSourcePython.itkImageSourceICVF43):
    r"""Proxy of C++ itkImageToImageFilterISS3ICVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3ICVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3ICVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_cast(obj)

# Register itkImageToImageFilterISS3ICVF43 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF43_swigregister(itkImageToImageFilterISS3ICVF43)
class itkImageToImageFilterISS3IRGBAUC3(itk.itkImageSourcePython.itkImageSourceIRGBAUC3):
    r"""Proxy of C++ itkImageToImageFilterISS3IRGBAUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3IRGBAUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3IRGBAUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_cast(obj)

# Register itkImageToImageFilterISS3IRGBAUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3_swigregister(itkImageToImageFilterISS3IRGBAUC3)
class itkImageToImageFilterISS3IRGBUC3(itk.itkImageSourcePython.itkImageSourceIRGBUC3):
    r"""Proxy of C++ itkImageToImageFilterISS3IRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3IRGBUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3IRGBUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_cast(obj)

# Register itkImageToImageFilterISS3IRGBUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3_swigregister(itkImageToImageFilterISS3IRGBUC3)
class itkImageToImageFilterISS3ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterISS3ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_cast(obj)

# Register itkImageToImageFilterISS3ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS2_swigregister(itkImageToImageFilterISS3ISS2)
class itkImageToImageFilterISS3ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterISS3ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS4_cast(obj)

# Register itkImageToImageFilterISS3ISS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISS4_swigregister(itkImageToImageFilterISS3ISS4)
class itkImageToImageFilterISS3ISSRTD33(itk.itkImageSourcePython.itkImageSourceISSRTD33):
    r"""Proxy of C++ itkImageToImageFilterISS3ISSRTD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3ISSRTD33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3ISSRTD33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_cast(obj)

# Register itkImageToImageFilterISS3ISSRTD33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33_swigregister(itkImageToImageFilterISS3ISSRTD33)
class itkImageToImageFilterISS3ISSRTF33(itk.itkImageSourcePython.itkImageSourceISSRTF33):
    r"""Proxy of C++ itkImageToImageFilterISS3ISSRTF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3ISSRTF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3ISSRTF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTF33_cast(obj)

# Register itkImageToImageFilterISS3ISSRTF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTF33_swigregister(itkImageToImageFilterISS3ISSRTF33)
class itkImageToImageFilterISS3IVF23(itk.itkImageSourcePython.itkImageSourceIVF23):
    r"""Proxy of C++ itkImageToImageFilterISS3IVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3IVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3IVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_cast(obj)

# Register itkImageToImageFilterISS3IVF23 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF23_swigregister(itkImageToImageFilterISS3IVF23)
class itkImageToImageFilterISS3IVF33(itk.itkImageSourcePython.itkImageSourceIVF33):
    r"""Proxy of C++ itkImageToImageFilterISS3IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3IVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3IVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_cast(obj)

# Register itkImageToImageFilterISS3IVF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF33_swigregister(itkImageToImageFilterISS3IVF33)
class itkImageToImageFilterISS3IVF43(itk.itkImageSourcePython.itkImageSourceIVF43):
    r"""Proxy of C++ itkImageToImageFilterISS3IVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3IVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3IVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_cast(obj)

# Register itkImageToImageFilterISS3IVF43 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3IVF43_swigregister(itkImageToImageFilterISS3IVF43)
class itkImageToImageFilterISS3PA3DSCISS(itk.itkImageSourcePython.itkImageSourcePA3DSCISS):
    r"""Proxy of C++ itkImageToImageFilterISS3PA3DSCISS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCISS_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCISS_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCISS_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCISS_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCISS_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCISS_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCISS_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCISS_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCISS_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCISS_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3PA3DSCISS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3PA3DSCISS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCISS_cast(obj)

# Register itkImageToImageFilterISS3PA3DSCISS in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCISS_swigregister(itkImageToImageFilterISS3PA3DSCISS)
class itkImageToImageFilterISS3PA3DSCIUC(itk.itkImageSourcePython.itkImageSourcePA3DSCIUC):
    r"""Proxy of C++ itkImageToImageFilterISS3PA3DSCIUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCIUC_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCIUC_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCIUC_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCIUC_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCIUC_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCIUC_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCIUC_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCIUC_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCIUC_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCIUC_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3PA3DSCIUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3PA3DSCIUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCIUC_cast(obj)

# Register itkImageToImageFilterISS3PA3DSCIUC in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCIUC_swigregister(itkImageToImageFilterISS3PA3DSCIUC)
class itkImageToImageFilterISS3PA3DSCIUS(itk.itkImageSourcePython.itkImageSourcePA3DSCIUS):
    r"""Proxy of C++ itkImageToImageFilterISS3PA3DSCIUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCIUS_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCIUS_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCIUS_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCIUS_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCIUS_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCIUS_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCIUS_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCIUS_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCIUS_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCIUS_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3PA3DSCIUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3PA3DSCIUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCIUS_cast(obj)

# Register itkImageToImageFilterISS3PA3DSCIUS in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3PA3DSCIUS_swigregister(itkImageToImageFilterISS3PA3DSCIUS)
class itkImageToImageFilterISS3VID3(itk.itkImageSourcePython.itkImageSourceVID3):
    r"""Proxy of C++ itkImageToImageFilterISS3VID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3VID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3VID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_cast(obj)

# Register itkImageToImageFilterISS3VID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3_swigregister(itkImageToImageFilterISS3VID3)
class itkImageToImageFilterISS3VIF3(itk.itkImageSourcePython.itkImageSourceVIF3):
    r"""Proxy of C++ itkImageToImageFilterISS3VIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3VIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3VIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_cast(obj)

# Register itkImageToImageFilterISS3VIF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3_swigregister(itkImageToImageFilterISS3VIF3)
class itkImageToImageFilterISS3VISS3(itk.itkImageSourcePython.itkImageSourceVISS3):
    r"""Proxy of C++ itkImageToImageFilterISS3VISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3VISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3VISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_cast(obj)

# Register itkImageToImageFilterISS3VISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3VISS3_swigregister(itkImageToImageFilterISS3VISS3)
class itkImageToImageFilterISS3VIUC3(itk.itkImageSourcePython.itkImageSourceVIUC3):
    r"""Proxy of C++ itkImageToImageFilterISS3VIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3VIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3VIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_cast(obj)

# Register itkImageToImageFilterISS3VIUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUC3_swigregister(itkImageToImageFilterISS3VIUC3)
class itkImageToImageFilterISS3VIUS3(itk.itkImageSourcePython.itkImageSourceVIUS3):
    r"""Proxy of C++ itkImageToImageFilterISS3VIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS3
        GetInput(self, idx) -> itkImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS3VIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS3VIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_cast(obj)

# Register itkImageToImageFilterISS3VIUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS3VIUS3_swigregister(itkImageToImageFilterISS3VIUS3)
class itkImageToImageFilterISS4ICD4(itk.itkImageSourcePython.itkImageSourceICD4):
    r"""Proxy of C++ itkImageToImageFilterISS4ICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICD4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICD4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICD4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICD4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICD4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICD4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICD4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICD4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICD4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICD4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS4ICD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4ICD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICD4_cast(obj)

# Register itkImageToImageFilterISS4ICD4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS4ICD4_swigregister(itkImageToImageFilterISS4ICD4)
class itkImageToImageFilterISS4ICF4(itk.itkImageSourcePython.itkImageSourceICF4):
    r"""Proxy of C++ itkImageToImageFilterISS4ICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS4ICF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4ICF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICF4_cast(obj)

# Register itkImageToImageFilterISS4ICF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS4ICF4_swigregister(itkImageToImageFilterISS4ICF4)
class itkImageToImageFilterISS4ICVF24(itk.itkImageSourcePython.itkImageSourceICVF24):
    r"""Proxy of C++ itkImageToImageFilterISS4ICVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF24_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF24_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF24_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF24_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF24_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF24_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF24_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF24_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF24_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF24_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS4ICVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4ICVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF24_cast(obj)

# Register itkImageToImageFilterISS4ICVF24 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF24_swigregister(itkImageToImageFilterISS4ICVF24)
class itkImageToImageFilterISS4ICVF34(itk.itkImageSourcePython.itkImageSourceICVF34):
    r"""Proxy of C++ itkImageToImageFilterISS4ICVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF34_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF34_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF34_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF34_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF34_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF34_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF34_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF34_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF34_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF34_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS4ICVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4ICVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF34_cast(obj)

# Register itkImageToImageFilterISS4ICVF34 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF34_swigregister(itkImageToImageFilterISS4ICVF34)
class itkImageToImageFilterISS4ICVF44(itk.itkImageSourcePython.itkImageSourceICVF44):
    r"""Proxy of C++ itkImageToImageFilterISS4ICVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS4ICVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4ICVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF44_cast(obj)

# Register itkImageToImageFilterISS4ICVF44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS4ICVF44_swigregister(itkImageToImageFilterISS4ICVF44)
class itkImageToImageFilterISS4IRGBAUC4(itk.itkImageSourcePython.itkImageSourceIRGBAUC4):
    r"""Proxy of C++ itkImageToImageFilterISS4IRGBAUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IRGBAUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IRGBAUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IRGBAUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IRGBAUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IRGBAUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IRGBAUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IRGBAUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IRGBAUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IRGBAUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IRGBAUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS4IRGBAUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4IRGBAUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IRGBAUC4_cast(obj)

# Register itkImageToImageFilterISS4IRGBAUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS4IRGBAUC4_swigregister(itkImageToImageFilterISS4IRGBAUC4)
class itkImageToImageFilterISS4IRGBUC4(itk.itkImageSourcePython.itkImageSourceIRGBUC4):
    r"""Proxy of C++ itkImageToImageFilterISS4IRGBUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IRGBUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IRGBUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IRGBUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IRGBUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IRGBUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IRGBUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IRGBUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IRGBUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IRGBUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IRGBUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS4IRGBUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4IRGBUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IRGBUC4_cast(obj)

# Register itkImageToImageFilterISS4IRGBUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS4IRGBUC4_swigregister(itkImageToImageFilterISS4IRGBUC4)
class itkImageToImageFilterISS4ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterISS4ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS4ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS2_cast(obj)

# Register itkImageToImageFilterISS4ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS2_swigregister(itkImageToImageFilterISS4ISS2)
class itkImageToImageFilterISS4ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterISS4ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS4ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS3_cast(obj)

# Register itkImageToImageFilterISS4ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS4ISS3_swigregister(itkImageToImageFilterISS4ISS3)
class itkImageToImageFilterISS4ISSRTD44(itk.itkImageSourcePython.itkImageSourceISSRTD44):
    r"""Proxy of C++ itkImageToImageFilterISS4ISSRTD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTD44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTD44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTD44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTD44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTD44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTD44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTD44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTD44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTD44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTD44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS4ISSRTD44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4ISSRTD44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTD44_cast(obj)

# Register itkImageToImageFilterISS4ISSRTD44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTD44_swigregister(itkImageToImageFilterISS4ISSRTD44)
class itkImageToImageFilterISS4ISSRTF44(itk.itkImageSourcePython.itkImageSourceISSRTF44):
    r"""Proxy of C++ itkImageToImageFilterISS4ISSRTF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS4ISSRTF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4ISSRTF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTF44_cast(obj)

# Register itkImageToImageFilterISS4ISSRTF44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS4ISSRTF44_swigregister(itkImageToImageFilterISS4ISSRTF44)
class itkImageToImageFilterISS4IVF24(itk.itkImageSourcePython.itkImageSourceIVF24):
    r"""Proxy of C++ itkImageToImageFilterISS4IVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF24_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF24_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF24_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF24_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF24_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF24_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF24_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF24_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF24_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF24_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS4IVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4IVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF24_cast(obj)

# Register itkImageToImageFilterISS4IVF24 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF24_swigregister(itkImageToImageFilterISS4IVF24)
class itkImageToImageFilterISS4IVF34(itk.itkImageSourcePython.itkImageSourceIVF34):
    r"""Proxy of C++ itkImageToImageFilterISS4IVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF34_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF34_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF34_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF34_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF34_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF34_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF34_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF34_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF34_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF34_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS4IVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4IVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF34_cast(obj)

# Register itkImageToImageFilterISS4IVF34 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF34_swigregister(itkImageToImageFilterISS4IVF34)
class itkImageToImageFilterISS4IVF44(itk.itkImageSourcePython.itkImageSourceIVF44):
    r"""Proxy of C++ itkImageToImageFilterISS4IVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS4IVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4IVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF44_cast(obj)

# Register itkImageToImageFilterISS4IVF44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS4IVF44_swigregister(itkImageToImageFilterISS4IVF44)
class itkImageToImageFilterISS4VID4(itk.itkImageSourcePython.itkImageSourceVID4):
    r"""Proxy of C++ itkImageToImageFilterISS4VID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS4VID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4VID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VID4_cast(obj)

# Register itkImageToImageFilterISS4VID4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS4VID4_swigregister(itkImageToImageFilterISS4VID4)
class itkImageToImageFilterISS4VIF4(itk.itkImageSourcePython.itkImageSourceVIF4):
    r"""Proxy of C++ itkImageToImageFilterISS4VIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS4VIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4VIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIF4_cast(obj)

# Register itkImageToImageFilterISS4VIF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS4VIF4_swigregister(itkImageToImageFilterISS4VIF4)
class itkImageToImageFilterISS4VISS4(itk.itkImageSourcePython.itkImageSourceVISS4):
    r"""Proxy of C++ itkImageToImageFilterISS4VISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS4VISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4VISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VISS4_cast(obj)

# Register itkImageToImageFilterISS4VISS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS4VISS4_swigregister(itkImageToImageFilterISS4VISS4)
class itkImageToImageFilterISS4VIUC4(itk.itkImageSourcePython.itkImageSourceVIUC4):
    r"""Proxy of C++ itkImageToImageFilterISS4VIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS4VIUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4VIUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIUC4_cast(obj)

# Register itkImageToImageFilterISS4VIUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS4VIUC4_swigregister(itkImageToImageFilterISS4VIUC4)
class itkImageToImageFilterISS4VIUS4(itk.itkImageSourcePython.itkImageSourceVIUS4):
    r"""Proxy of C++ itkImageToImageFilterISS4VIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSS4
        GetInput(self, idx) -> itkImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISS4VIUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISS4VIUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISS4VIUS4_cast(obj)

# Register itkImageToImageFilterISS4VIUS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISS4VIUS4_swigregister(itkImageToImageFilterISS4VIUS4)
class itkImageToImageFilterISSRTD22ICVD22(itk.itkImageSourcePython.itkImageSourceICVD22):
    r"""Proxy of C++ itkImageToImageFilterISSRTD22ICVD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTD22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ICVD22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTD22
        GetInput(self, idx) -> itkImageSSRTD22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ICVD22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ICVD22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ICVD22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ICVD22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ICVD22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ICVD22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ICVD22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ICVD22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ICVD22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD22ICVD22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTD22ICVD22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ICVD22_cast(obj)

# Register itkImageToImageFilterISSRTD22ICVD22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ICVD22_swigregister(itkImageToImageFilterISSRTD22ICVD22)
class itkImageToImageFilterISSRTD22ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterISSRTD22ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTD22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTD22
        GetInput(self, idx) -> itkImageSSRTD22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD22ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTD22ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_cast(obj)

# Register itkImageToImageFilterISSRTD22ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ID2_swigregister(itkImageToImageFilterISSRTD22ID2)
class itkImageToImageFilterISSRTD22IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterISSRTD22IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTD22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTD22
        GetInput(self, idx) -> itkImageSSRTD22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD22IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTD22IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_cast(obj)

# Register itkImageToImageFilterISSRTD22IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IF2_swigregister(itkImageToImageFilterISSRTD22IF2)
class itkImageToImageFilterISSRTD22ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterISSRTD22ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTD22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTD22
        GetInput(self, idx) -> itkImageSSRTD22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD22ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTD22ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_cast(obj)

# Register itkImageToImageFilterISSRTD22ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISS2_swigregister(itkImageToImageFilterISSRTD22ISS2)
class itkImageToImageFilterISSRTD22ISSRTD22(itk.itkImageSourcePython.itkImageSourceISSRTD22):
    r"""Proxy of C++ itkImageToImageFilterISSRTD22ISSRTD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTD22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTD22
        GetInput(self, idx) -> itkImageSSRTD22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD22ISSRTD22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTD22ISSRTD22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_cast(obj)

# Register itkImageToImageFilterISSRTD22ISSRTD22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTD22_swigregister(itkImageToImageFilterISSRTD22ISSRTD22)
class itkImageToImageFilterISSRTD22ISSRTF22(itk.itkImageSourcePython.itkImageSourceISSRTF22):
    r"""Proxy of C++ itkImageToImageFilterISSRTD22ISSRTF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTD22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTD22
        GetInput(self, idx) -> itkImageSSRTD22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD22ISSRTF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTD22ISSRTF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTF22_cast(obj)

# Register itkImageToImageFilterISSRTD22ISSRTF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22ISSRTF22_swigregister(itkImageToImageFilterISSRTD22ISSRTF22)
class itkImageToImageFilterISSRTD22IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterISSRTD22IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTD22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTD22
        GetInput(self, idx) -> itkImageSSRTD22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD22IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTD22IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_cast(obj)

# Register itkImageToImageFilterISSRTD22IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUC2_swigregister(itkImageToImageFilterISSRTD22IUC2)
class itkImageToImageFilterISSRTD22IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterISSRTD22IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTD22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTD22
        GetInput(self, idx) -> itkImageSSRTD22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD22IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTD22IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_cast(obj)

# Register itkImageToImageFilterISSRTD22IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD22IUS2_swigregister(itkImageToImageFilterISSRTD22IUS2)
class itkImageToImageFilterISSRTD33ICVD33(itk.itkImageSourcePython.itkImageSourceICVD33):
    r"""Proxy of C++ itkImageToImageFilterISSRTD33ICVD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTD33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ICVD33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTD33
        GetInput(self, idx) -> itkImageSSRTD33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ICVD33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ICVD33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ICVD33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ICVD33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ICVD33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ICVD33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ICVD33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ICVD33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ICVD33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD33ICVD33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTD33ICVD33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ICVD33_cast(obj)

# Register itkImageToImageFilterISSRTD33ICVD33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ICVD33_swigregister(itkImageToImageFilterISSRTD33ICVD33)
class itkImageToImageFilterISSRTD33ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterISSRTD33ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTD33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTD33
        GetInput(self, idx) -> itkImageSSRTD33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD33ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTD33ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_cast(obj)

# Register itkImageToImageFilterISSRTD33ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ID3_swigregister(itkImageToImageFilterISSRTD33ID3)
class itkImageToImageFilterISSRTD33IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterISSRTD33IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTD33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTD33
        GetInput(self, idx) -> itkImageSSRTD33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD33IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTD33IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_cast(obj)

# Register itkImageToImageFilterISSRTD33IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IF3_swigregister(itkImageToImageFilterISSRTD33IF3)
class itkImageToImageFilterISSRTD33ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterISSRTD33ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTD33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTD33
        GetInput(self, idx) -> itkImageSSRTD33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD33ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTD33ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_cast(obj)

# Register itkImageToImageFilterISSRTD33ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISS3_swigregister(itkImageToImageFilterISSRTD33ISS3)
class itkImageToImageFilterISSRTD33ISSRTD33(itk.itkImageSourcePython.itkImageSourceISSRTD33):
    r"""Proxy of C++ itkImageToImageFilterISSRTD33ISSRTD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTD33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTD33
        GetInput(self, idx) -> itkImageSSRTD33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD33ISSRTD33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTD33ISSRTD33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_cast(obj)

# Register itkImageToImageFilterISSRTD33ISSRTD33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTD33_swigregister(itkImageToImageFilterISSRTD33ISSRTD33)
class itkImageToImageFilterISSRTD33ISSRTF33(itk.itkImageSourcePython.itkImageSourceISSRTF33):
    r"""Proxy of C++ itkImageToImageFilterISSRTD33ISSRTF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTD33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTD33
        GetInput(self, idx) -> itkImageSSRTD33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD33ISSRTF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTD33ISSRTF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTF33_cast(obj)

# Register itkImageToImageFilterISSRTD33ISSRTF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33ISSRTF33_swigregister(itkImageToImageFilterISSRTD33ISSRTF33)
class itkImageToImageFilterISSRTD33IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterISSRTD33IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTD33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTD33
        GetInput(self, idx) -> itkImageSSRTD33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD33IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTD33IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_cast(obj)

# Register itkImageToImageFilterISSRTD33IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUC3_swigregister(itkImageToImageFilterISSRTD33IUC3)
class itkImageToImageFilterISSRTD33IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterISSRTD33IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTD33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTD33
        GetInput(self, idx) -> itkImageSSRTD33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD33IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTD33IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_cast(obj)

# Register itkImageToImageFilterISSRTD33IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD33IUS3_swigregister(itkImageToImageFilterISSRTD33IUS3)
class itkImageToImageFilterISSRTD44ICVD44(itk.itkImageSourcePython.itkImageSourceICVD44):
    r"""Proxy of C++ itkImageToImageFilterISSRTD44ICVD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTD44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ICVD44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTD44
        GetInput(self, idx) -> itkImageSSRTD44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ICVD44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ICVD44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ICVD44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ICVD44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ICVD44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ICVD44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ICVD44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ICVD44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ICVD44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD44ICVD44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTD44ICVD44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ICVD44_cast(obj)

# Register itkImageToImageFilterISSRTD44ICVD44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ICVD44_swigregister(itkImageToImageFilterISSRTD44ICVD44)
class itkImageToImageFilterISSRTD44ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterISSRTD44ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTD44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTD44
        GetInput(self, idx) -> itkImageSSRTD44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD44ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTD44ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ID4_cast(obj)

# Register itkImageToImageFilterISSRTD44ID4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ID4_swigregister(itkImageToImageFilterISSRTD44ID4)
class itkImageToImageFilterISSRTD44IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterISSRTD44IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTD44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTD44
        GetInput(self, idx) -> itkImageSSRTD44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD44IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTD44IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IF4_cast(obj)

# Register itkImageToImageFilterISSRTD44IF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IF4_swigregister(itkImageToImageFilterISSRTD44IF4)
class itkImageToImageFilterISSRTD44ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterISSRTD44ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTD44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTD44
        GetInput(self, idx) -> itkImageSSRTD44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD44ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTD44ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISS4_cast(obj)

# Register itkImageToImageFilterISSRTD44ISS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISS4_swigregister(itkImageToImageFilterISSRTD44ISS4)
class itkImageToImageFilterISSRTD44ISSRTD44(itk.itkImageSourcePython.itkImageSourceISSRTD44):
    r"""Proxy of C++ itkImageToImageFilterISSRTD44ISSRTD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTD44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISSRTD44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTD44
        GetInput(self, idx) -> itkImageSSRTD44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISSRTD44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISSRTD44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISSRTD44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISSRTD44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISSRTD44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISSRTD44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISSRTD44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISSRTD44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISSRTD44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD44ISSRTD44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTD44ISSRTD44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISSRTD44_cast(obj)

# Register itkImageToImageFilterISSRTD44ISSRTD44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISSRTD44_swigregister(itkImageToImageFilterISSRTD44ISSRTD44)
class itkImageToImageFilterISSRTD44ISSRTF44(itk.itkImageSourcePython.itkImageSourceISSRTF44):
    r"""Proxy of C++ itkImageToImageFilterISSRTD44ISSRTF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTD44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISSRTF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTD44
        GetInput(self, idx) -> itkImageSSRTD44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISSRTF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISSRTF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISSRTF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISSRTF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISSRTF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISSRTF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISSRTF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISSRTF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISSRTF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD44ISSRTF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTD44ISSRTF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISSRTF44_cast(obj)

# Register itkImageToImageFilterISSRTD44ISSRTF44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44ISSRTF44_swigregister(itkImageToImageFilterISSRTD44ISSRTF44)
class itkImageToImageFilterISSRTD44IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterISSRTD44IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTD44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTD44
        GetInput(self, idx) -> itkImageSSRTD44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD44IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTD44IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IUC4_cast(obj)

# Register itkImageToImageFilterISSRTD44IUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IUC4_swigregister(itkImageToImageFilterISSRTD44IUC4)
class itkImageToImageFilterISSRTD44IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterISSRTD44IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTD44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTD44
        GetInput(self, idx) -> itkImageSSRTD44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTD44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTD44IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTD44IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IUS4_cast(obj)

# Register itkImageToImageFilterISSRTD44IUS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTD44IUS4_swigregister(itkImageToImageFilterISSRTD44IUS4)
class itkImageToImageFilterISSRTF22ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterISSRTF22ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTF22
        GetInput(self, idx) -> itkImageSSRTF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTF22ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTF22ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ID2_cast(obj)

# Register itkImageToImageFilterISSRTF22ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ID2_swigregister(itkImageToImageFilterISSRTF22ID2)
class itkImageToImageFilterISSRTF22IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterISSRTF22IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTF22
        GetInput(self, idx) -> itkImageSSRTF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTF22IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTF22IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IF2_cast(obj)

# Register itkImageToImageFilterISSRTF22IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IF2_swigregister(itkImageToImageFilterISSRTF22IF2)
class itkImageToImageFilterISSRTF22ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterISSRTF22ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTF22
        GetInput(self, idx) -> itkImageSSRTF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTF22ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTF22ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISS2_cast(obj)

# Register itkImageToImageFilterISSRTF22ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISS2_swigregister(itkImageToImageFilterISSRTF22ISS2)
class itkImageToImageFilterISSRTF22ISSRTD22(itk.itkImageSourcePython.itkImageSourceISSRTD22):
    r"""Proxy of C++ itkImageToImageFilterISSRTF22ISSRTD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISSRTD22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTF22
        GetInput(self, idx) -> itkImageSSRTF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISSRTD22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISSRTD22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISSRTD22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISSRTD22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISSRTD22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISSRTD22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISSRTD22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISSRTD22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISSRTD22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTF22ISSRTD22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTF22ISSRTD22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISSRTD22_cast(obj)

# Register itkImageToImageFilterISSRTF22ISSRTD22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISSRTD22_swigregister(itkImageToImageFilterISSRTF22ISSRTD22)
class itkImageToImageFilterISSRTF22ISSRTF22(itk.itkImageSourcePython.itkImageSourceISSRTF22):
    r"""Proxy of C++ itkImageToImageFilterISSRTF22ISSRTF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISSRTF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTF22
        GetInput(self, idx) -> itkImageSSRTF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISSRTF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISSRTF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISSRTF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISSRTF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISSRTF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISSRTF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISSRTF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISSRTF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISSRTF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTF22ISSRTF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTF22ISSRTF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISSRTF22_cast(obj)

# Register itkImageToImageFilterISSRTF22ISSRTF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22ISSRTF22_swigregister(itkImageToImageFilterISSRTF22ISSRTF22)
class itkImageToImageFilterISSRTF22IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterISSRTF22IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTF22
        GetInput(self, idx) -> itkImageSSRTF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTF22IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTF22IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IUC2_cast(obj)

# Register itkImageToImageFilterISSRTF22IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IUC2_swigregister(itkImageToImageFilterISSRTF22IUC2)
class itkImageToImageFilterISSRTF22IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterISSRTF22IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTF22
        GetInput(self, idx) -> itkImageSSRTF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTF22IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTF22IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IUS2_cast(obj)

# Register itkImageToImageFilterISSRTF22IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTF22IUS2_swigregister(itkImageToImageFilterISSRTF22IUS2)
class itkImageToImageFilterISSRTF33ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterISSRTF33ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTF33
        GetInput(self, idx) -> itkImageSSRTF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTF33ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTF33ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ID3_cast(obj)

# Register itkImageToImageFilterISSRTF33ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ID3_swigregister(itkImageToImageFilterISSRTF33ID3)
class itkImageToImageFilterISSRTF33IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterISSRTF33IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTF33
        GetInput(self, idx) -> itkImageSSRTF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTF33IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTF33IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IF3_cast(obj)

# Register itkImageToImageFilterISSRTF33IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IF3_swigregister(itkImageToImageFilterISSRTF33IF3)
class itkImageToImageFilterISSRTF33ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterISSRTF33ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTF33
        GetInput(self, idx) -> itkImageSSRTF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTF33ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTF33ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISS3_cast(obj)

# Register itkImageToImageFilterISSRTF33ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISS3_swigregister(itkImageToImageFilterISSRTF33ISS3)
class itkImageToImageFilterISSRTF33ISSRTD33(itk.itkImageSourcePython.itkImageSourceISSRTD33):
    r"""Proxy of C++ itkImageToImageFilterISSRTF33ISSRTD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISSRTD33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTF33
        GetInput(self, idx) -> itkImageSSRTF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISSRTD33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISSRTD33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISSRTD33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISSRTD33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISSRTD33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISSRTD33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISSRTD33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISSRTD33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISSRTD33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTF33ISSRTD33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTF33ISSRTD33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISSRTD33_cast(obj)

# Register itkImageToImageFilterISSRTF33ISSRTD33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISSRTD33_swigregister(itkImageToImageFilterISSRTF33ISSRTD33)
class itkImageToImageFilterISSRTF33ISSRTF33(itk.itkImageSourcePython.itkImageSourceISSRTF33):
    r"""Proxy of C++ itkImageToImageFilterISSRTF33ISSRTF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISSRTF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTF33
        GetInput(self, idx) -> itkImageSSRTF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISSRTF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISSRTF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISSRTF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISSRTF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISSRTF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISSRTF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISSRTF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISSRTF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISSRTF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTF33ISSRTF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTF33ISSRTF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISSRTF33_cast(obj)

# Register itkImageToImageFilterISSRTF33ISSRTF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33ISSRTF33_swigregister(itkImageToImageFilterISSRTF33ISSRTF33)
class itkImageToImageFilterISSRTF33IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterISSRTF33IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTF33
        GetInput(self, idx) -> itkImageSSRTF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTF33IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTF33IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IUC3_cast(obj)

# Register itkImageToImageFilterISSRTF33IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IUC3_swigregister(itkImageToImageFilterISSRTF33IUC3)
class itkImageToImageFilterISSRTF33IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterISSRTF33IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTF33
        GetInput(self, idx) -> itkImageSSRTF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTF33IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTF33IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IUS3_cast(obj)

# Register itkImageToImageFilterISSRTF33IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTF33IUS3_swigregister(itkImageToImageFilterISSRTF33IUS3)
class itkImageToImageFilterISSRTF44ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterISSRTF44ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTF44
        GetInput(self, idx) -> itkImageSSRTF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTF44ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTF44ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ID4_cast(obj)

# Register itkImageToImageFilterISSRTF44ID4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ID4_swigregister(itkImageToImageFilterISSRTF44ID4)
class itkImageToImageFilterISSRTF44IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterISSRTF44IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTF44
        GetInput(self, idx) -> itkImageSSRTF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTF44IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTF44IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IF4_cast(obj)

# Register itkImageToImageFilterISSRTF44IF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IF4_swigregister(itkImageToImageFilterISSRTF44IF4)
class itkImageToImageFilterISSRTF44ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterISSRTF44ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTF44
        GetInput(self, idx) -> itkImageSSRTF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTF44ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTF44ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISS4_cast(obj)

# Register itkImageToImageFilterISSRTF44ISS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISS4_swigregister(itkImageToImageFilterISSRTF44ISS4)
class itkImageToImageFilterISSRTF44ISSRTD44(itk.itkImageSourcePython.itkImageSourceISSRTD44):
    r"""Proxy of C++ itkImageToImageFilterISSRTF44ISSRTD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISSRTD44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTF44
        GetInput(self, idx) -> itkImageSSRTF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISSRTD44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISSRTD44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISSRTD44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISSRTD44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISSRTD44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISSRTD44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISSRTD44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISSRTD44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISSRTD44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTF44ISSRTD44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTF44ISSRTD44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISSRTD44_cast(obj)

# Register itkImageToImageFilterISSRTF44ISSRTD44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISSRTD44_swigregister(itkImageToImageFilterISSRTF44ISSRTD44)
class itkImageToImageFilterISSRTF44ISSRTF44(itk.itkImageSourcePython.itkImageSourceISSRTF44):
    r"""Proxy of C++ itkImageToImageFilterISSRTF44ISSRTF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISSRTF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTF44
        GetInput(self, idx) -> itkImageSSRTF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISSRTF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISSRTF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISSRTF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISSRTF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISSRTF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISSRTF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISSRTF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISSRTF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISSRTF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTF44ISSRTF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTF44ISSRTF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISSRTF44_cast(obj)

# Register itkImageToImageFilterISSRTF44ISSRTF44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44ISSRTF44_swigregister(itkImageToImageFilterISSRTF44ISSRTF44)
class itkImageToImageFilterISSRTF44IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterISSRTF44IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTF44
        GetInput(self, idx) -> itkImageSSRTF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTF44IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTF44IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IUC4_cast(obj)

# Register itkImageToImageFilterISSRTF44IUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IUC4_swigregister(itkImageToImageFilterISSRTF44IUC4)
class itkImageToImageFilterISSRTF44IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterISSRTF44IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageSSRTF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageSSRTF44
        GetInput(self, idx) -> itkImageSSRTF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageSSRTF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterISSRTF44IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterISSRTF44IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IUS4_cast(obj)

# Register itkImageToImageFilterISSRTF44IUS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterISSRTF44IUS4_swigregister(itkImageToImageFilterISSRTF44IUS4)
class itkImageToImageFilterIUC2ICD2(itk.itkImageSourcePython.itkImageSourceICD2):
    r"""Proxy of C++ itkImageToImageFilterIUC2ICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICD2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICD2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICD2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICD2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICD2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICD2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICD2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICD2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICD2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICD2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2ICD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2ICD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICD2_cast(obj)

# Register itkImageToImageFilterIUC2ICD2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICD2_swigregister(itkImageToImageFilterIUC2ICD2)
class itkImageToImageFilterIUC2ICF2(itk.itkImageSourcePython.itkImageSourceICF2):
    r"""Proxy of C++ itkImageToImageFilterIUC2ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2ICF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2ICF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_cast(obj)

# Register itkImageToImageFilterIUC2ICF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICF2_swigregister(itkImageToImageFilterIUC2ICF2)
class itkImageToImageFilterIUC2ICVF22(itk.itkImageSourcePython.itkImageSourceICVF22):
    r"""Proxy of C++ itkImageToImageFilterIUC2ICVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2ICVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2ICVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_cast(obj)

# Register itkImageToImageFilterIUC2ICVF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22_swigregister(itkImageToImageFilterIUC2ICVF22)
class itkImageToImageFilterIUC2ICVF32(itk.itkImageSourcePython.itkImageSourceICVF32):
    r"""Proxy of C++ itkImageToImageFilterIUC2ICVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2ICVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2ICVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_cast(obj)

# Register itkImageToImageFilterIUC2ICVF32 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF32_swigregister(itkImageToImageFilterIUC2ICVF32)
class itkImageToImageFilterIUC2ICVF42(itk.itkImageSourcePython.itkImageSourceICVF42):
    r"""Proxy of C++ itkImageToImageFilterIUC2ICVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2ICVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2ICVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_cast(obj)

# Register itkImageToImageFilterIUC2ICVF42 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF42_swigregister(itkImageToImageFilterIUC2ICVF42)
class itkImageToImageFilterIUC2IRGBAUC2(itk.itkImageSourcePython.itkImageSourceIRGBAUC2):
    r"""Proxy of C++ itkImageToImageFilterIUC2IRGBAUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2IRGBAUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2IRGBAUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_cast(obj)

# Register itkImageToImageFilterIUC2IRGBAUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2_swigregister(itkImageToImageFilterIUC2IRGBAUC2)
class itkImageToImageFilterIUC2IRGBUC2(itk.itkImageSourcePython.itkImageSourceIRGBUC2):
    r"""Proxy of C++ itkImageToImageFilterIUC2IRGBUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2IRGBUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2IRGBUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_cast(obj)

# Register itkImageToImageFilterIUC2IRGBUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2_swigregister(itkImageToImageFilterIUC2IRGBUC2)
class itkImageToImageFilterIUC2ISSRTD22(itk.itkImageSourcePython.itkImageSourceISSRTD22):
    r"""Proxy of C++ itkImageToImageFilterIUC2ISSRTD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2ISSRTD22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2ISSRTD22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_cast(obj)

# Register itkImageToImageFilterIUC2ISSRTD22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22_swigregister(itkImageToImageFilterIUC2ISSRTD22)
class itkImageToImageFilterIUC2ISSRTF22(itk.itkImageSourcePython.itkImageSourceISSRTF22):
    r"""Proxy of C++ itkImageToImageFilterIUC2ISSRTF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2ISSRTF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2ISSRTF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTF22_cast(obj)

# Register itkImageToImageFilterIUC2ISSRTF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTF22_swigregister(itkImageToImageFilterIUC2ISSRTF22)
class itkImageToImageFilterIUC2IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterIUC2IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_cast(obj)

# Register itkImageToImageFilterIUC2IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3_swigregister(itkImageToImageFilterIUC2IUC3)
class itkImageToImageFilterIUC2IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterIUC2IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC4_cast(obj)

# Register itkImageToImageFilterIUC2IUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC4_swigregister(itkImageToImageFilterIUC2IUC4)
class itkImageToImageFilterIUC2IVF22(itk.itkImageSourcePython.itkImageSourceIVF22):
    r"""Proxy of C++ itkImageToImageFilterIUC2IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2IVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2IVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_cast(obj)

# Register itkImageToImageFilterIUC2IVF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF22_swigregister(itkImageToImageFilterIUC2IVF22)
class itkImageToImageFilterIUC2IVF32(itk.itkImageSourcePython.itkImageSourceIVF32):
    r"""Proxy of C++ itkImageToImageFilterIUC2IVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2IVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2IVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_cast(obj)

# Register itkImageToImageFilterIUC2IVF32 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF32_swigregister(itkImageToImageFilterIUC2IVF32)
class itkImageToImageFilterIUC2IVF42(itk.itkImageSourcePython.itkImageSourceIVF42):
    r"""Proxy of C++ itkImageToImageFilterIUC2IVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2IVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2IVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_cast(obj)

# Register itkImageToImageFilterIUC2IVF42 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2IVF42_swigregister(itkImageToImageFilterIUC2IVF42)
class itkImageToImageFilterIUC2VID2(itk.itkImageSourcePython.itkImageSourceVID2):
    r"""Proxy of C++ itkImageToImageFilterIUC2VID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2VID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2VID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_cast(obj)

# Register itkImageToImageFilterIUC2VID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2_swigregister(itkImageToImageFilterIUC2VID2)
class itkImageToImageFilterIUC2VIF2(itk.itkImageSourcePython.itkImageSourceVIF2):
    r"""Proxy of C++ itkImageToImageFilterIUC2VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2VIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2VIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_cast(obj)

# Register itkImageToImageFilterIUC2VIF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2_swigregister(itkImageToImageFilterIUC2VIF2)
class itkImageToImageFilterIUC2VISS2(itk.itkImageSourcePython.itkImageSourceVISS2):
    r"""Proxy of C++ itkImageToImageFilterIUC2VISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2VISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2VISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_cast(obj)

# Register itkImageToImageFilterIUC2VISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VISS2_swigregister(itkImageToImageFilterIUC2VISS2)
class itkImageToImageFilterIUC2VIUC2(itk.itkImageSourcePython.itkImageSourceVIUC2):
    r"""Proxy of C++ itkImageToImageFilterIUC2VIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2VIUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2VIUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_cast(obj)

# Register itkImageToImageFilterIUC2VIUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUC2_swigregister(itkImageToImageFilterIUC2VIUC2)
class itkImageToImageFilterIUC2VIUS2(itk.itkImageSourcePython.itkImageSourceVIUS2):
    r"""Proxy of C++ itkImageToImageFilterIUC2VIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC2
        GetInput(self, idx) -> itkImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC2VIUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC2VIUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_cast(obj)

# Register itkImageToImageFilterIUC2VIUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIUS2_swigregister(itkImageToImageFilterIUC2VIUS2)
class itkImageToImageFilterIUC3ICD3(itk.itkImageSourcePython.itkImageSourceICD3):
    r"""Proxy of C++ itkImageToImageFilterIUC3ICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICD3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICD3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICD3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICD3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICD3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICD3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICD3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICD3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICD3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICD3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3ICD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3ICD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICD3_cast(obj)

# Register itkImageToImageFilterIUC3ICD3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICD3_swigregister(itkImageToImageFilterIUC3ICD3)
class itkImageToImageFilterIUC3ICF3(itk.itkImageSourcePython.itkImageSourceICF3):
    r"""Proxy of C++ itkImageToImageFilterIUC3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3ICF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3ICF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_cast(obj)

# Register itkImageToImageFilterIUC3ICF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICF3_swigregister(itkImageToImageFilterIUC3ICF3)
class itkImageToImageFilterIUC3ICVF23(itk.itkImageSourcePython.itkImageSourceICVF23):
    r"""Proxy of C++ itkImageToImageFilterIUC3ICVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3ICVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3ICVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_cast(obj)

# Register itkImageToImageFilterIUC3ICVF23 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF23_swigregister(itkImageToImageFilterIUC3ICVF23)
class itkImageToImageFilterIUC3ICVF33(itk.itkImageSourcePython.itkImageSourceICVF33):
    r"""Proxy of C++ itkImageToImageFilterIUC3ICVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3ICVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3ICVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_cast(obj)

# Register itkImageToImageFilterIUC3ICVF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33_swigregister(itkImageToImageFilterIUC3ICVF33)
class itkImageToImageFilterIUC3ICVF43(itk.itkImageSourcePython.itkImageSourceICVF43):
    r"""Proxy of C++ itkImageToImageFilterIUC3ICVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3ICVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3ICVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_cast(obj)

# Register itkImageToImageFilterIUC3ICVF43 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF43_swigregister(itkImageToImageFilterIUC3ICVF43)
class itkImageToImageFilterIUC3IRGBAUC3(itk.itkImageSourcePython.itkImageSourceIRGBAUC3):
    r"""Proxy of C++ itkImageToImageFilterIUC3IRGBAUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3IRGBAUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3IRGBAUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_cast(obj)

# Register itkImageToImageFilterIUC3IRGBAUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3_swigregister(itkImageToImageFilterIUC3IRGBAUC3)
class itkImageToImageFilterIUC3IRGBUC3(itk.itkImageSourcePython.itkImageSourceIRGBUC3):
    r"""Proxy of C++ itkImageToImageFilterIUC3IRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3IRGBUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3IRGBUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_cast(obj)

# Register itkImageToImageFilterIUC3IRGBUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3_swigregister(itkImageToImageFilterIUC3IRGBUC3)
class itkImageToImageFilterIUC3ISSRTD33(itk.itkImageSourcePython.itkImageSourceISSRTD33):
    r"""Proxy of C++ itkImageToImageFilterIUC3ISSRTD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3ISSRTD33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3ISSRTD33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_cast(obj)

# Register itkImageToImageFilterIUC3ISSRTD33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33_swigregister(itkImageToImageFilterIUC3ISSRTD33)
class itkImageToImageFilterIUC3ISSRTF33(itk.itkImageSourcePython.itkImageSourceISSRTF33):
    r"""Proxy of C++ itkImageToImageFilterIUC3ISSRTF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3ISSRTF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3ISSRTF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTF33_cast(obj)

# Register itkImageToImageFilterIUC3ISSRTF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTF33_swigregister(itkImageToImageFilterIUC3ISSRTF33)
class itkImageToImageFilterIUC3IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterIUC3IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_cast(obj)

# Register itkImageToImageFilterIUC3IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC2_swigregister(itkImageToImageFilterIUC3IUC2)
class itkImageToImageFilterIUC3IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterIUC3IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC4_cast(obj)

# Register itkImageToImageFilterIUC3IUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IUC4_swigregister(itkImageToImageFilterIUC3IUC4)
class itkImageToImageFilterIUC3IVF23(itk.itkImageSourcePython.itkImageSourceIVF23):
    r"""Proxy of C++ itkImageToImageFilterIUC3IVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3IVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3IVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_cast(obj)

# Register itkImageToImageFilterIUC3IVF23 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF23_swigregister(itkImageToImageFilterIUC3IVF23)
class itkImageToImageFilterIUC3IVF33(itk.itkImageSourcePython.itkImageSourceIVF33):
    r"""Proxy of C++ itkImageToImageFilterIUC3IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3IVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3IVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_cast(obj)

# Register itkImageToImageFilterIUC3IVF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF33_swigregister(itkImageToImageFilterIUC3IVF33)
class itkImageToImageFilterIUC3IVF43(itk.itkImageSourcePython.itkImageSourceIVF43):
    r"""Proxy of C++ itkImageToImageFilterIUC3IVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3IVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3IVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_cast(obj)

# Register itkImageToImageFilterIUC3IVF43 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3IVF43_swigregister(itkImageToImageFilterIUC3IVF43)
class itkImageToImageFilterIUC3PA3DSCISS(itk.itkImageSourcePython.itkImageSourcePA3DSCISS):
    r"""Proxy of C++ itkImageToImageFilterIUC3PA3DSCISS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCISS_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCISS_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCISS_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCISS_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCISS_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCISS_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCISS_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCISS_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCISS_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCISS_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3PA3DSCISS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3PA3DSCISS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCISS_cast(obj)

# Register itkImageToImageFilterIUC3PA3DSCISS in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCISS_swigregister(itkImageToImageFilterIUC3PA3DSCISS)
class itkImageToImageFilterIUC3PA3DSCIUC(itk.itkImageSourcePython.itkImageSourcePA3DSCIUC):
    r"""Proxy of C++ itkImageToImageFilterIUC3PA3DSCIUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCIUC_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCIUC_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCIUC_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCIUC_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCIUC_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCIUC_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCIUC_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCIUC_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCIUC_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCIUC_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3PA3DSCIUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3PA3DSCIUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCIUC_cast(obj)

# Register itkImageToImageFilterIUC3PA3DSCIUC in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCIUC_swigregister(itkImageToImageFilterIUC3PA3DSCIUC)
class itkImageToImageFilterIUC3PA3DSCIUS(itk.itkImageSourcePython.itkImageSourcePA3DSCIUS):
    r"""Proxy of C++ itkImageToImageFilterIUC3PA3DSCIUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCIUS_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCIUS_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCIUS_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCIUS_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCIUS_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCIUS_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCIUS_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCIUS_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCIUS_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCIUS_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3PA3DSCIUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3PA3DSCIUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCIUS_cast(obj)

# Register itkImageToImageFilterIUC3PA3DSCIUS in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3PA3DSCIUS_swigregister(itkImageToImageFilterIUC3PA3DSCIUS)
class itkImageToImageFilterIUC3VID3(itk.itkImageSourcePython.itkImageSourceVID3):
    r"""Proxy of C++ itkImageToImageFilterIUC3VID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3VID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3VID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_cast(obj)

# Register itkImageToImageFilterIUC3VID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3_swigregister(itkImageToImageFilterIUC3VID3)
class itkImageToImageFilterIUC3VIF3(itk.itkImageSourcePython.itkImageSourceVIF3):
    r"""Proxy of C++ itkImageToImageFilterIUC3VIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3VIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3VIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_cast(obj)

# Register itkImageToImageFilterIUC3VIF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3_swigregister(itkImageToImageFilterIUC3VIF3)
class itkImageToImageFilterIUC3VISS3(itk.itkImageSourcePython.itkImageSourceVISS3):
    r"""Proxy of C++ itkImageToImageFilterIUC3VISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3VISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3VISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_cast(obj)

# Register itkImageToImageFilterIUC3VISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VISS3_swigregister(itkImageToImageFilterIUC3VISS3)
class itkImageToImageFilterIUC3VIUC3(itk.itkImageSourcePython.itkImageSourceVIUC3):
    r"""Proxy of C++ itkImageToImageFilterIUC3VIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3VIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3VIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_cast(obj)

# Register itkImageToImageFilterIUC3VIUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUC3_swigregister(itkImageToImageFilterIUC3VIUC3)
class itkImageToImageFilterIUC3VIUS3(itk.itkImageSourcePython.itkImageSourceVIUS3):
    r"""Proxy of C++ itkImageToImageFilterIUC3VIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC3
        GetInput(self, idx) -> itkImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC3VIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC3VIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_cast(obj)

# Register itkImageToImageFilterIUC3VIUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIUS3_swigregister(itkImageToImageFilterIUC3VIUS3)
class itkImageToImageFilterIUC4ICD4(itk.itkImageSourcePython.itkImageSourceICD4):
    r"""Proxy of C++ itkImageToImageFilterIUC4ICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICD4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICD4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICD4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICD4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICD4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICD4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICD4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICD4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICD4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICD4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC4ICD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4ICD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICD4_cast(obj)

# Register itkImageToImageFilterIUC4ICD4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICD4_swigregister(itkImageToImageFilterIUC4ICD4)
class itkImageToImageFilterIUC4ICF4(itk.itkImageSourcePython.itkImageSourceICF4):
    r"""Proxy of C++ itkImageToImageFilterIUC4ICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC4ICF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4ICF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICF4_cast(obj)

# Register itkImageToImageFilterIUC4ICF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICF4_swigregister(itkImageToImageFilterIUC4ICF4)
class itkImageToImageFilterIUC4ICVF24(itk.itkImageSourcePython.itkImageSourceICVF24):
    r"""Proxy of C++ itkImageToImageFilterIUC4ICVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF24_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF24_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF24_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF24_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF24_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF24_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF24_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF24_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF24_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF24_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC4ICVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4ICVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF24_cast(obj)

# Register itkImageToImageFilterIUC4ICVF24 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF24_swigregister(itkImageToImageFilterIUC4ICVF24)
class itkImageToImageFilterIUC4ICVF34(itk.itkImageSourcePython.itkImageSourceICVF34):
    r"""Proxy of C++ itkImageToImageFilterIUC4ICVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF34_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF34_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF34_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF34_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF34_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF34_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF34_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF34_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF34_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF34_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC4ICVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4ICVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF34_cast(obj)

# Register itkImageToImageFilterIUC4ICVF34 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF34_swigregister(itkImageToImageFilterIUC4ICVF34)
class itkImageToImageFilterIUC4ICVF44(itk.itkImageSourcePython.itkImageSourceICVF44):
    r"""Proxy of C++ itkImageToImageFilterIUC4ICVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC4ICVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4ICVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF44_cast(obj)

# Register itkImageToImageFilterIUC4ICVF44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC4ICVF44_swigregister(itkImageToImageFilterIUC4ICVF44)
class itkImageToImageFilterIUC4IRGBAUC4(itk.itkImageSourcePython.itkImageSourceIRGBAUC4):
    r"""Proxy of C++ itkImageToImageFilterIUC4IRGBAUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IRGBAUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IRGBAUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IRGBAUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IRGBAUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IRGBAUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IRGBAUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IRGBAUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IRGBAUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IRGBAUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IRGBAUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC4IRGBAUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4IRGBAUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IRGBAUC4_cast(obj)

# Register itkImageToImageFilterIUC4IRGBAUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC4IRGBAUC4_swigregister(itkImageToImageFilterIUC4IRGBAUC4)
class itkImageToImageFilterIUC4IRGBUC4(itk.itkImageSourcePython.itkImageSourceIRGBUC4):
    r"""Proxy of C++ itkImageToImageFilterIUC4IRGBUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IRGBUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IRGBUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IRGBUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IRGBUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IRGBUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IRGBUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IRGBUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IRGBUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IRGBUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IRGBUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC4IRGBUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4IRGBUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IRGBUC4_cast(obj)

# Register itkImageToImageFilterIUC4IRGBUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC4IRGBUC4_swigregister(itkImageToImageFilterIUC4IRGBUC4)
class itkImageToImageFilterIUC4ISSRTD44(itk.itkImageSourcePython.itkImageSourceISSRTD44):
    r"""Proxy of C++ itkImageToImageFilterIUC4ISSRTD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTD44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTD44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTD44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTD44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTD44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTD44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTD44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTD44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTD44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTD44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC4ISSRTD44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4ISSRTD44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTD44_cast(obj)

# Register itkImageToImageFilterIUC4ISSRTD44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTD44_swigregister(itkImageToImageFilterIUC4ISSRTD44)
class itkImageToImageFilterIUC4ISSRTF44(itk.itkImageSourcePython.itkImageSourceISSRTF44):
    r"""Proxy of C++ itkImageToImageFilterIUC4ISSRTF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC4ISSRTF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4ISSRTF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTF44_cast(obj)

# Register itkImageToImageFilterIUC4ISSRTF44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC4ISSRTF44_swigregister(itkImageToImageFilterIUC4ISSRTF44)
class itkImageToImageFilterIUC4IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterIUC4IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC4IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC2_cast(obj)

# Register itkImageToImageFilterIUC4IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC2_swigregister(itkImageToImageFilterIUC4IUC2)
class itkImageToImageFilterIUC4IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterIUC4IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC4IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC3_cast(obj)

# Register itkImageToImageFilterIUC4IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC4IUC3_swigregister(itkImageToImageFilterIUC4IUC3)
class itkImageToImageFilterIUC4IVF24(itk.itkImageSourcePython.itkImageSourceIVF24):
    r"""Proxy of C++ itkImageToImageFilterIUC4IVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF24_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF24_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF24_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF24_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF24_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF24_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF24_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF24_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF24_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF24_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC4IVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4IVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF24_cast(obj)

# Register itkImageToImageFilterIUC4IVF24 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF24_swigregister(itkImageToImageFilterIUC4IVF24)
class itkImageToImageFilterIUC4IVF34(itk.itkImageSourcePython.itkImageSourceIVF34):
    r"""Proxy of C++ itkImageToImageFilterIUC4IVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF34_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF34_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF34_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF34_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF34_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF34_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF34_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF34_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF34_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF34_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC4IVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4IVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF34_cast(obj)

# Register itkImageToImageFilterIUC4IVF34 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF34_swigregister(itkImageToImageFilterIUC4IVF34)
class itkImageToImageFilterIUC4IVF44(itk.itkImageSourcePython.itkImageSourceIVF44):
    r"""Proxy of C++ itkImageToImageFilterIUC4IVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC4IVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4IVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF44_cast(obj)

# Register itkImageToImageFilterIUC4IVF44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC4IVF44_swigregister(itkImageToImageFilterIUC4IVF44)
class itkImageToImageFilterIUC4VID4(itk.itkImageSourcePython.itkImageSourceVID4):
    r"""Proxy of C++ itkImageToImageFilterIUC4VID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC4VID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4VID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VID4_cast(obj)

# Register itkImageToImageFilterIUC4VID4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC4VID4_swigregister(itkImageToImageFilterIUC4VID4)
class itkImageToImageFilterIUC4VIF4(itk.itkImageSourcePython.itkImageSourceVIF4):
    r"""Proxy of C++ itkImageToImageFilterIUC4VIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC4VIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4VIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIF4_cast(obj)

# Register itkImageToImageFilterIUC4VIF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIF4_swigregister(itkImageToImageFilterIUC4VIF4)
class itkImageToImageFilterIUC4VISS4(itk.itkImageSourcePython.itkImageSourceVISS4):
    r"""Proxy of C++ itkImageToImageFilterIUC4VISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC4VISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4VISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VISS4_cast(obj)

# Register itkImageToImageFilterIUC4VISS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC4VISS4_swigregister(itkImageToImageFilterIUC4VISS4)
class itkImageToImageFilterIUC4VIUC4(itk.itkImageSourcePython.itkImageSourceVIUC4):
    r"""Proxy of C++ itkImageToImageFilterIUC4VIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC4VIUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4VIUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIUC4_cast(obj)

# Register itkImageToImageFilterIUC4VIUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIUC4_swigregister(itkImageToImageFilterIUC4VIUC4)
class itkImageToImageFilterIUC4VIUS4(itk.itkImageSourcePython.itkImageSourceVIUS4):
    r"""Proxy of C++ itkImageToImageFilterIUC4VIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUC4
        GetInput(self, idx) -> itkImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUC4VIUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUC4VIUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIUS4_cast(obj)

# Register itkImageToImageFilterIUC4VIUS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIUS4_swigregister(itkImageToImageFilterIUC4VIUS4)
class itkImageToImageFilterIUL2IRGBAUC2(itk.itkImageSourcePython.itkImageSourceIRGBAUC2):
    r"""Proxy of C++ itkImageToImageFilterIUL2IRGBAUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL2
        GetInput(self, idx) -> itkImageUL2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUL2IRGBAUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL2IRGBAUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_cast(obj)

# Register itkImageToImageFilterIUL2IRGBAUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2_swigregister(itkImageToImageFilterIUL2IRGBAUC2)
class itkImageToImageFilterIUL2IRGBUC2(itk.itkImageSourcePython.itkImageSourceIRGBUC2):
    r"""Proxy of C++ itkImageToImageFilterIUL2IRGBUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL2
        GetInput(self, idx) -> itkImageUL2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUL2IRGBUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL2IRGBUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_cast(obj)

# Register itkImageToImageFilterIUL2IRGBUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2_swigregister(itkImageToImageFilterIUL2IRGBUC2)
class itkImageToImageFilterIUL3IRGBAUC3(itk.itkImageSourcePython.itkImageSourceIRGBAUC3):
    r"""Proxy of C++ itkImageToImageFilterIUL3IRGBAUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL3
        GetInput(self, idx) -> itkImageUL3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUL3IRGBAUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL3IRGBAUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_cast(obj)

# Register itkImageToImageFilterIUL3IRGBAUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3_swigregister(itkImageToImageFilterIUL3IRGBAUC3)
class itkImageToImageFilterIUL3IRGBUC3(itk.itkImageSourcePython.itkImageSourceIRGBUC3):
    r"""Proxy of C++ itkImageToImageFilterIUL3IRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL3
        GetInput(self, idx) -> itkImageUL3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUL3IRGBUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL3IRGBUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_cast(obj)

# Register itkImageToImageFilterIUL3IRGBUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3_swigregister(itkImageToImageFilterIUL3IRGBUC3)
class itkImageToImageFilterIUL4IRGBAUC4(itk.itkImageSourcePython.itkImageSourceIRGBAUC4):
    r"""Proxy of C++ itkImageToImageFilterIUL4IRGBAUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL4IRGBAUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL4
        GetInput(self, idx) -> itkImageUL4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL4IRGBAUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL4IRGBAUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL4IRGBAUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL4IRGBAUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL4IRGBAUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL4IRGBAUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL4IRGBAUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL4IRGBAUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL4IRGBAUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUL4IRGBAUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL4IRGBAUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL4IRGBAUC4_cast(obj)

# Register itkImageToImageFilterIUL4IRGBAUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUL4IRGBAUC4_swigregister(itkImageToImageFilterIUL4IRGBAUC4)
class itkImageToImageFilterIUL4IRGBUC4(itk.itkImageSourcePython.itkImageSourceIRGBUC4):
    r"""Proxy of C++ itkImageToImageFilterIUL4IRGBUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUL4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL4IRGBUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUL4
        GetInput(self, idx) -> itkImageUL4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL4IRGBUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL4IRGBUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL4IRGBUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUL4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL4IRGBUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL4IRGBUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL4IRGBUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL4IRGBUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL4IRGBUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL4IRGBUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUL4IRGBUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUL4IRGBUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUL4IRGBUC4_cast(obj)

# Register itkImageToImageFilterIUL4IRGBUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUL4IRGBUC4_swigregister(itkImageToImageFilterIUL4IRGBUC4)
class itkImageToImageFilterIUS2ICD2(itk.itkImageSourcePython.itkImageSourceICD2):
    r"""Proxy of C++ itkImageToImageFilterIUS2ICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICD2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICD2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICD2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICD2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICD2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICD2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICD2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICD2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICD2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICD2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2ICD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2ICD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICD2_cast(obj)

# Register itkImageToImageFilterIUS2ICD2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICD2_swigregister(itkImageToImageFilterIUS2ICD2)
class itkImageToImageFilterIUS2ICF2(itk.itkImageSourcePython.itkImageSourceICF2):
    r"""Proxy of C++ itkImageToImageFilterIUS2ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2ICF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2ICF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_cast(obj)

# Register itkImageToImageFilterIUS2ICF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICF2_swigregister(itkImageToImageFilterIUS2ICF2)
class itkImageToImageFilterIUS2ICVF22(itk.itkImageSourcePython.itkImageSourceICVF22):
    r"""Proxy of C++ itkImageToImageFilterIUS2ICVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2ICVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2ICVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_cast(obj)

# Register itkImageToImageFilterIUS2ICVF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22_swigregister(itkImageToImageFilterIUS2ICVF22)
class itkImageToImageFilterIUS2ICVF32(itk.itkImageSourcePython.itkImageSourceICVF32):
    r"""Proxy of C++ itkImageToImageFilterIUS2ICVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2ICVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2ICVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_cast(obj)

# Register itkImageToImageFilterIUS2ICVF32 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF32_swigregister(itkImageToImageFilterIUS2ICVF32)
class itkImageToImageFilterIUS2ICVF42(itk.itkImageSourcePython.itkImageSourceICVF42):
    r"""Proxy of C++ itkImageToImageFilterIUS2ICVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2ICVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2ICVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_cast(obj)

# Register itkImageToImageFilterIUS2ICVF42 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF42_swigregister(itkImageToImageFilterIUS2ICVF42)
class itkImageToImageFilterIUS2IRGBAUC2(itk.itkImageSourcePython.itkImageSourceIRGBAUC2):
    r"""Proxy of C++ itkImageToImageFilterIUS2IRGBAUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2IRGBAUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2IRGBAUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_cast(obj)

# Register itkImageToImageFilterIUS2IRGBAUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2_swigregister(itkImageToImageFilterIUS2IRGBAUC2)
class itkImageToImageFilterIUS2IRGBUC2(itk.itkImageSourcePython.itkImageSourceIRGBUC2):
    r"""Proxy of C++ itkImageToImageFilterIUS2IRGBUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2IRGBUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2IRGBUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_cast(obj)

# Register itkImageToImageFilterIUS2IRGBUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2_swigregister(itkImageToImageFilterIUS2IRGBUC2)
class itkImageToImageFilterIUS2ISSRTD22(itk.itkImageSourcePython.itkImageSourceISSRTD22):
    r"""Proxy of C++ itkImageToImageFilterIUS2ISSRTD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2ISSRTD22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2ISSRTD22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_cast(obj)

# Register itkImageToImageFilterIUS2ISSRTD22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22_swigregister(itkImageToImageFilterIUS2ISSRTD22)
class itkImageToImageFilterIUS2ISSRTF22(itk.itkImageSourcePython.itkImageSourceISSRTF22):
    r"""Proxy of C++ itkImageToImageFilterIUS2ISSRTF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2ISSRTF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2ISSRTF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTF22_cast(obj)

# Register itkImageToImageFilterIUS2ISSRTF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTF22_swigregister(itkImageToImageFilterIUS2ISSRTF22)
class itkImageToImageFilterIUS2IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterIUS2IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_cast(obj)

# Register itkImageToImageFilterIUS2IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3_swigregister(itkImageToImageFilterIUS2IUS3)
class itkImageToImageFilterIUS2IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterIUS2IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS4_cast(obj)

# Register itkImageToImageFilterIUS2IUS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS4_swigregister(itkImageToImageFilterIUS2IUS4)
class itkImageToImageFilterIUS2IVF22(itk.itkImageSourcePython.itkImageSourceIVF22):
    r"""Proxy of C++ itkImageToImageFilterIUS2IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2IVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2IVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_cast(obj)

# Register itkImageToImageFilterIUS2IVF22 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF22_swigregister(itkImageToImageFilterIUS2IVF22)
class itkImageToImageFilterIUS2IVF32(itk.itkImageSourcePython.itkImageSourceIVF32):
    r"""Proxy of C++ itkImageToImageFilterIUS2IVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2IVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2IVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_cast(obj)

# Register itkImageToImageFilterIUS2IVF32 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF32_swigregister(itkImageToImageFilterIUS2IVF32)
class itkImageToImageFilterIUS2IVF42(itk.itkImageSourcePython.itkImageSourceIVF42):
    r"""Proxy of C++ itkImageToImageFilterIUS2IVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2IVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2IVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_cast(obj)

# Register itkImageToImageFilterIUS2IVF42 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2IVF42_swigregister(itkImageToImageFilterIUS2IVF42)
class itkImageToImageFilterIUS2VID2(itk.itkImageSourcePython.itkImageSourceVID2):
    r"""Proxy of C++ itkImageToImageFilterIUS2VID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2VID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2VID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_cast(obj)

# Register itkImageToImageFilterIUS2VID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2_swigregister(itkImageToImageFilterIUS2VID2)
class itkImageToImageFilterIUS2VIF2(itk.itkImageSourcePython.itkImageSourceVIF2):
    r"""Proxy of C++ itkImageToImageFilterIUS2VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2VIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2VIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_cast(obj)

# Register itkImageToImageFilterIUS2VIF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2_swigregister(itkImageToImageFilterIUS2VIF2)
class itkImageToImageFilterIUS2VISS2(itk.itkImageSourcePython.itkImageSourceVISS2):
    r"""Proxy of C++ itkImageToImageFilterIUS2VISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2VISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2VISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_cast(obj)

# Register itkImageToImageFilterIUS2VISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VISS2_swigregister(itkImageToImageFilterIUS2VISS2)
class itkImageToImageFilterIUS2VIUC2(itk.itkImageSourcePython.itkImageSourceVIUC2):
    r"""Proxy of C++ itkImageToImageFilterIUS2VIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2VIUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2VIUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_cast(obj)

# Register itkImageToImageFilterIUS2VIUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUC2_swigregister(itkImageToImageFilterIUS2VIUC2)
class itkImageToImageFilterIUS2VIUS2(itk.itkImageSourcePython.itkImageSourceVIUS2):
    r"""Proxy of C++ itkImageToImageFilterIUS2VIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS2
        GetInput(self, idx) -> itkImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS2VIUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS2VIUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_cast(obj)

# Register itkImageToImageFilterIUS2VIUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIUS2_swigregister(itkImageToImageFilterIUS2VIUS2)
class itkImageToImageFilterIUS3ICD3(itk.itkImageSourcePython.itkImageSourceICD3):
    r"""Proxy of C++ itkImageToImageFilterIUS3ICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICD3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICD3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICD3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICD3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICD3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICD3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICD3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICD3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICD3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICD3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3ICD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3ICD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICD3_cast(obj)

# Register itkImageToImageFilterIUS3ICD3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICD3_swigregister(itkImageToImageFilterIUS3ICD3)
class itkImageToImageFilterIUS3ICF3(itk.itkImageSourcePython.itkImageSourceICF3):
    r"""Proxy of C++ itkImageToImageFilterIUS3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3ICF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3ICF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_cast(obj)

# Register itkImageToImageFilterIUS3ICF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICF3_swigregister(itkImageToImageFilterIUS3ICF3)
class itkImageToImageFilterIUS3ICVF23(itk.itkImageSourcePython.itkImageSourceICVF23):
    r"""Proxy of C++ itkImageToImageFilterIUS3ICVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3ICVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3ICVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_cast(obj)

# Register itkImageToImageFilterIUS3ICVF23 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF23_swigregister(itkImageToImageFilterIUS3ICVF23)
class itkImageToImageFilterIUS3ICVF33(itk.itkImageSourcePython.itkImageSourceICVF33):
    r"""Proxy of C++ itkImageToImageFilterIUS3ICVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3ICVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3ICVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_cast(obj)

# Register itkImageToImageFilterIUS3ICVF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33_swigregister(itkImageToImageFilterIUS3ICVF33)
class itkImageToImageFilterIUS3ICVF43(itk.itkImageSourcePython.itkImageSourceICVF43):
    r"""Proxy of C++ itkImageToImageFilterIUS3ICVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3ICVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3ICVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_cast(obj)

# Register itkImageToImageFilterIUS3ICVF43 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF43_swigregister(itkImageToImageFilterIUS3ICVF43)
class itkImageToImageFilterIUS3IRGBAUC3(itk.itkImageSourcePython.itkImageSourceIRGBAUC3):
    r"""Proxy of C++ itkImageToImageFilterIUS3IRGBAUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3IRGBAUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3IRGBAUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_cast(obj)

# Register itkImageToImageFilterIUS3IRGBAUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3_swigregister(itkImageToImageFilterIUS3IRGBAUC3)
class itkImageToImageFilterIUS3IRGBUC3(itk.itkImageSourcePython.itkImageSourceIRGBUC3):
    r"""Proxy of C++ itkImageToImageFilterIUS3IRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3IRGBUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3IRGBUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_cast(obj)

# Register itkImageToImageFilterIUS3IRGBUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3_swigregister(itkImageToImageFilterIUS3IRGBUC3)
class itkImageToImageFilterIUS3ISSRTD33(itk.itkImageSourcePython.itkImageSourceISSRTD33):
    r"""Proxy of C++ itkImageToImageFilterIUS3ISSRTD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3ISSRTD33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3ISSRTD33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_cast(obj)

# Register itkImageToImageFilterIUS3ISSRTD33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33_swigregister(itkImageToImageFilterIUS3ISSRTD33)
class itkImageToImageFilterIUS3ISSRTF33(itk.itkImageSourcePython.itkImageSourceISSRTF33):
    r"""Proxy of C++ itkImageToImageFilterIUS3ISSRTF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3ISSRTF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3ISSRTF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTF33_cast(obj)

# Register itkImageToImageFilterIUS3ISSRTF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTF33_swigregister(itkImageToImageFilterIUS3ISSRTF33)
class itkImageToImageFilterIUS3IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterIUS3IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_cast(obj)

# Register itkImageToImageFilterIUS3IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS2_swigregister(itkImageToImageFilterIUS3IUS2)
class itkImageToImageFilterIUS3IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterIUS3IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS4_cast(obj)

# Register itkImageToImageFilterIUS3IUS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IUS4_swigregister(itkImageToImageFilterIUS3IUS4)
class itkImageToImageFilterIUS3IVF23(itk.itkImageSourcePython.itkImageSourceIVF23):
    r"""Proxy of C++ itkImageToImageFilterIUS3IVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3IVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3IVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_cast(obj)

# Register itkImageToImageFilterIUS3IVF23 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF23_swigregister(itkImageToImageFilterIUS3IVF23)
class itkImageToImageFilterIUS3IVF33(itk.itkImageSourcePython.itkImageSourceIVF33):
    r"""Proxy of C++ itkImageToImageFilterIUS3IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3IVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3IVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_cast(obj)

# Register itkImageToImageFilterIUS3IVF33 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF33_swigregister(itkImageToImageFilterIUS3IVF33)
class itkImageToImageFilterIUS3IVF43(itk.itkImageSourcePython.itkImageSourceIVF43):
    r"""Proxy of C++ itkImageToImageFilterIUS3IVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3IVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3IVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_cast(obj)

# Register itkImageToImageFilterIUS3IVF43 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3IVF43_swigregister(itkImageToImageFilterIUS3IVF43)
class itkImageToImageFilterIUS3PA3DSCISS(itk.itkImageSourcePython.itkImageSourcePA3DSCISS):
    r"""Proxy of C++ itkImageToImageFilterIUS3PA3DSCISS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCISS_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCISS_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCISS_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCISS_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCISS_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCISS_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCISS_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCISS_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCISS_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCISS_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3PA3DSCISS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3PA3DSCISS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCISS_cast(obj)

# Register itkImageToImageFilterIUS3PA3DSCISS in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCISS_swigregister(itkImageToImageFilterIUS3PA3DSCISS)
class itkImageToImageFilterIUS3PA3DSCIUC(itk.itkImageSourcePython.itkImageSourcePA3DSCIUC):
    r"""Proxy of C++ itkImageToImageFilterIUS3PA3DSCIUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCIUC_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCIUC_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCIUC_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCIUC_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCIUC_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCIUC_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCIUC_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCIUC_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCIUC_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCIUC_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3PA3DSCIUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3PA3DSCIUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCIUC_cast(obj)

# Register itkImageToImageFilterIUS3PA3DSCIUC in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCIUC_swigregister(itkImageToImageFilterIUS3PA3DSCIUC)
class itkImageToImageFilterIUS3PA3DSCIUS(itk.itkImageSourcePython.itkImageSourcePA3DSCIUS):
    r"""Proxy of C++ itkImageToImageFilterIUS3PA3DSCIUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCIUS_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCIUS_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCIUS_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCIUS_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCIUS_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCIUS_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCIUS_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCIUS_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCIUS_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCIUS_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3PA3DSCIUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3PA3DSCIUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCIUS_cast(obj)

# Register itkImageToImageFilterIUS3PA3DSCIUS in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3PA3DSCIUS_swigregister(itkImageToImageFilterIUS3PA3DSCIUS)
class itkImageToImageFilterIUS3VID3(itk.itkImageSourcePython.itkImageSourceVID3):
    r"""Proxy of C++ itkImageToImageFilterIUS3VID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3VID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3VID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_cast(obj)

# Register itkImageToImageFilterIUS3VID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3_swigregister(itkImageToImageFilterIUS3VID3)
class itkImageToImageFilterIUS3VIF3(itk.itkImageSourcePython.itkImageSourceVIF3):
    r"""Proxy of C++ itkImageToImageFilterIUS3VIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3VIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3VIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_cast(obj)

# Register itkImageToImageFilterIUS3VIF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3_swigregister(itkImageToImageFilterIUS3VIF3)
class itkImageToImageFilterIUS3VISS3(itk.itkImageSourcePython.itkImageSourceVISS3):
    r"""Proxy of C++ itkImageToImageFilterIUS3VISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3VISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3VISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_cast(obj)

# Register itkImageToImageFilterIUS3VISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VISS3_swigregister(itkImageToImageFilterIUS3VISS3)
class itkImageToImageFilterIUS3VIUC3(itk.itkImageSourcePython.itkImageSourceVIUC3):
    r"""Proxy of C++ itkImageToImageFilterIUS3VIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3VIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3VIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_cast(obj)

# Register itkImageToImageFilterIUS3VIUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUC3_swigregister(itkImageToImageFilterIUS3VIUC3)
class itkImageToImageFilterIUS3VIUS3(itk.itkImageSourcePython.itkImageSourceVIUS3):
    r"""Proxy of C++ itkImageToImageFilterIUS3VIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS3
        GetInput(self, idx) -> itkImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS3VIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS3VIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_cast(obj)

# Register itkImageToImageFilterIUS3VIUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIUS3_swigregister(itkImageToImageFilterIUS3VIUS3)
class itkImageToImageFilterIUS4ICD4(itk.itkImageSourcePython.itkImageSourceICD4):
    r"""Proxy of C++ itkImageToImageFilterIUS4ICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICD4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICD4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICD4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICD4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICD4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICD4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICD4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICD4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICD4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICD4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS4ICD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4ICD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICD4_cast(obj)

# Register itkImageToImageFilterIUS4ICD4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICD4_swigregister(itkImageToImageFilterIUS4ICD4)
class itkImageToImageFilterIUS4ICF4(itk.itkImageSourcePython.itkImageSourceICF4):
    r"""Proxy of C++ itkImageToImageFilterIUS4ICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS4ICF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4ICF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICF4_cast(obj)

# Register itkImageToImageFilterIUS4ICF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICF4_swigregister(itkImageToImageFilterIUS4ICF4)
class itkImageToImageFilterIUS4ICVF24(itk.itkImageSourcePython.itkImageSourceICVF24):
    r"""Proxy of C++ itkImageToImageFilterIUS4ICVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF24_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF24_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF24_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF24_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF24_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF24_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF24_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF24_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF24_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF24_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS4ICVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4ICVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF24_cast(obj)

# Register itkImageToImageFilterIUS4ICVF24 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF24_swigregister(itkImageToImageFilterIUS4ICVF24)
class itkImageToImageFilterIUS4ICVF34(itk.itkImageSourcePython.itkImageSourceICVF34):
    r"""Proxy of C++ itkImageToImageFilterIUS4ICVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF34_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF34_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF34_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF34_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF34_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF34_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF34_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF34_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF34_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF34_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS4ICVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4ICVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF34_cast(obj)

# Register itkImageToImageFilterIUS4ICVF34 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF34_swigregister(itkImageToImageFilterIUS4ICVF34)
class itkImageToImageFilterIUS4ICVF44(itk.itkImageSourcePython.itkImageSourceICVF44):
    r"""Proxy of C++ itkImageToImageFilterIUS4ICVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS4ICVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4ICVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF44_cast(obj)

# Register itkImageToImageFilterIUS4ICVF44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS4ICVF44_swigregister(itkImageToImageFilterIUS4ICVF44)
class itkImageToImageFilterIUS4IRGBAUC4(itk.itkImageSourcePython.itkImageSourceIRGBAUC4):
    r"""Proxy of C++ itkImageToImageFilterIUS4IRGBAUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IRGBAUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IRGBAUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IRGBAUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IRGBAUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IRGBAUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IRGBAUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IRGBAUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IRGBAUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IRGBAUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IRGBAUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS4IRGBAUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4IRGBAUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IRGBAUC4_cast(obj)

# Register itkImageToImageFilterIUS4IRGBAUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS4IRGBAUC4_swigregister(itkImageToImageFilterIUS4IRGBAUC4)
class itkImageToImageFilterIUS4IRGBUC4(itk.itkImageSourcePython.itkImageSourceIRGBUC4):
    r"""Proxy of C++ itkImageToImageFilterIUS4IRGBUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IRGBUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IRGBUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IRGBUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IRGBUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IRGBUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IRGBUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IRGBUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IRGBUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IRGBUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IRGBUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS4IRGBUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4IRGBUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IRGBUC4_cast(obj)

# Register itkImageToImageFilterIUS4IRGBUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS4IRGBUC4_swigregister(itkImageToImageFilterIUS4IRGBUC4)
class itkImageToImageFilterIUS4ISSRTD44(itk.itkImageSourcePython.itkImageSourceISSRTD44):
    r"""Proxy of C++ itkImageToImageFilterIUS4ISSRTD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTD44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTD44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTD44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTD44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTD44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTD44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTD44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTD44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTD44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTD44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS4ISSRTD44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4ISSRTD44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTD44_cast(obj)

# Register itkImageToImageFilterIUS4ISSRTD44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTD44_swigregister(itkImageToImageFilterIUS4ISSRTD44)
class itkImageToImageFilterIUS4ISSRTF44(itk.itkImageSourcePython.itkImageSourceISSRTF44):
    r"""Proxy of C++ itkImageToImageFilterIUS4ISSRTF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS4ISSRTF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4ISSRTF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTF44_cast(obj)

# Register itkImageToImageFilterIUS4ISSRTF44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS4ISSRTF44_swigregister(itkImageToImageFilterIUS4ISSRTF44)
class itkImageToImageFilterIUS4IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterIUS4IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS4IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS2_cast(obj)

# Register itkImageToImageFilterIUS4IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS2_swigregister(itkImageToImageFilterIUS4IUS2)
class itkImageToImageFilterIUS4IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterIUS4IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS4IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS3_cast(obj)

# Register itkImageToImageFilterIUS4IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS4IUS3_swigregister(itkImageToImageFilterIUS4IUS3)
class itkImageToImageFilterIUS4IVF24(itk.itkImageSourcePython.itkImageSourceIVF24):
    r"""Proxy of C++ itkImageToImageFilterIUS4IVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF24_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF24_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF24_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF24_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF24_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF24_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF24_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF24_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF24_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF24_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS4IVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4IVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF24_cast(obj)

# Register itkImageToImageFilterIUS4IVF24 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF24_swigregister(itkImageToImageFilterIUS4IVF24)
class itkImageToImageFilterIUS4IVF34(itk.itkImageSourcePython.itkImageSourceIVF34):
    r"""Proxy of C++ itkImageToImageFilterIUS4IVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF34_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF34_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF34_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF34_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF34_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF34_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF34_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF34_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF34_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF34_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS4IVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4IVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF34_cast(obj)

# Register itkImageToImageFilterIUS4IVF34 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF34_swigregister(itkImageToImageFilterIUS4IVF34)
class itkImageToImageFilterIUS4IVF44(itk.itkImageSourcePython.itkImageSourceIVF44):
    r"""Proxy of C++ itkImageToImageFilterIUS4IVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF44_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF44_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF44_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF44_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF44_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF44_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF44_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF44_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF44_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF44_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS4IVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4IVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF44_cast(obj)

# Register itkImageToImageFilterIUS4IVF44 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS4IVF44_swigregister(itkImageToImageFilterIUS4IVF44)
class itkImageToImageFilterIUS4VID4(itk.itkImageSourcePython.itkImageSourceVID4):
    r"""Proxy of C++ itkImageToImageFilterIUS4VID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS4VID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4VID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VID4_cast(obj)

# Register itkImageToImageFilterIUS4VID4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS4VID4_swigregister(itkImageToImageFilterIUS4VID4)
class itkImageToImageFilterIUS4VIF4(itk.itkImageSourcePython.itkImageSourceVIF4):
    r"""Proxy of C++ itkImageToImageFilterIUS4VIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS4VIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4VIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIF4_cast(obj)

# Register itkImageToImageFilterIUS4VIF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIF4_swigregister(itkImageToImageFilterIUS4VIF4)
class itkImageToImageFilterIUS4VISS4(itk.itkImageSourcePython.itkImageSourceVISS4):
    r"""Proxy of C++ itkImageToImageFilterIUS4VISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS4VISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4VISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VISS4_cast(obj)

# Register itkImageToImageFilterIUS4VISS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS4VISS4_swigregister(itkImageToImageFilterIUS4VISS4)
class itkImageToImageFilterIUS4VIUC4(itk.itkImageSourcePython.itkImageSourceVIUC4):
    r"""Proxy of C++ itkImageToImageFilterIUS4VIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS4VIUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4VIUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIUC4_cast(obj)

# Register itkImageToImageFilterIUS4VIUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIUC4_swigregister(itkImageToImageFilterIUS4VIUC4)
class itkImageToImageFilterIUS4VIUS4(itk.itkImageSourcePython.itkImageSourceVIUS4):
    r"""Proxy of C++ itkImageToImageFilterIUS4VIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageUS4
        GetInput(self, idx) -> itkImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIUS4VIUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIUS4VIUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIUS4_cast(obj)

# Register itkImageToImageFilterIUS4VIUS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIUS4_swigregister(itkImageToImageFilterIUS4VIUS4)
class itkImageToImageFilterIVF22ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterIVF22ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF22
        GetInput(self, idx) -> itkImageVF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF22ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF22ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_cast(obj)

# Register itkImageToImageFilterIVF22ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2_swigregister(itkImageToImageFilterIVF22ID2)
class itkImageToImageFilterIVF22IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterIVF22IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF22
        GetInput(self, idx) -> itkImageVF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF22IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF22IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_cast(obj)

# Register itkImageToImageFilterIVF22IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2_swigregister(itkImageToImageFilterIVF22IF2)
class itkImageToImageFilterIVF22ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterIVF22ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF22
        GetInput(self, idx) -> itkImageVF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF22ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF22ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_cast(obj)

# Register itkImageToImageFilterIVF22ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2_swigregister(itkImageToImageFilterIVF22ISS2)
class itkImageToImageFilterIVF22IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterIVF22IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF22
        GetInput(self, idx) -> itkImageVF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF22IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF22IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_cast(obj)

# Register itkImageToImageFilterIVF22IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2_swigregister(itkImageToImageFilterIVF22IUC2)
class itkImageToImageFilterIVF22IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterIVF22IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF22
        GetInput(self, idx) -> itkImageVF22

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF22 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF22IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF22IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_cast(obj)

# Register itkImageToImageFilterIVF22IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2_swigregister(itkImageToImageFilterIVF22IUS2)
class itkImageToImageFilterIVF23ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterIVF23ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF23
        GetInput(self, idx) -> itkImageVF23

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF23ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF23ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_cast(obj)

# Register itkImageToImageFilterIVF23ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ID3_swigregister(itkImageToImageFilterIVF23ID3)
class itkImageToImageFilterIVF23IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterIVF23IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF23
        GetInput(self, idx) -> itkImageVF23

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF23IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF23IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_cast(obj)

# Register itkImageToImageFilterIVF23IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IF3_swigregister(itkImageToImageFilterIVF23IF3)
class itkImageToImageFilterIVF23ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterIVF23ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF23
        GetInput(self, idx) -> itkImageVF23

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF23ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF23ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_cast(obj)

# Register itkImageToImageFilterIVF23ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3_swigregister(itkImageToImageFilterIVF23ISS3)
class itkImageToImageFilterIVF23IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterIVF23IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF23
        GetInput(self, idx) -> itkImageVF23

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF23IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF23IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_cast(obj)

# Register itkImageToImageFilterIVF23IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3_swigregister(itkImageToImageFilterIVF23IUC3)
class itkImageToImageFilterIVF23IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterIVF23IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF23
        GetInput(self, idx) -> itkImageVF23

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF23 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF23IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF23IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_cast(obj)

# Register itkImageToImageFilterIVF23IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3_swigregister(itkImageToImageFilterIVF23IUS3)
class itkImageToImageFilterIVF24ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterIVF24ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF24
        GetInput(self, idx) -> itkImageVF24

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF24ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF24ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24ID4_cast(obj)

# Register itkImageToImageFilterIVF24ID4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF24ID4_swigregister(itkImageToImageFilterIVF24ID4)
class itkImageToImageFilterIVF24IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterIVF24IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF24
        GetInput(self, idx) -> itkImageVF24

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF24IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF24IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IF4_cast(obj)

# Register itkImageToImageFilterIVF24IF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF24IF4_swigregister(itkImageToImageFilterIVF24IF4)
class itkImageToImageFilterIVF24ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterIVF24ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF24
        GetInput(self, idx) -> itkImageVF24

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF24ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF24ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24ISS4_cast(obj)

# Register itkImageToImageFilterIVF24ISS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF24ISS4_swigregister(itkImageToImageFilterIVF24ISS4)
class itkImageToImageFilterIVF24IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterIVF24IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF24
        GetInput(self, idx) -> itkImageVF24

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF24IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF24IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUC4_cast(obj)

# Register itkImageToImageFilterIVF24IUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUC4_swigregister(itkImageToImageFilterIVF24IUC4)
class itkImageToImageFilterIVF24IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterIVF24IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF24
        GetInput(self, idx) -> itkImageVF24

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF24IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF24IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUS4_cast(obj)

# Register itkImageToImageFilterIVF24IUS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUS4_swigregister(itkImageToImageFilterIVF24IUS4)
class itkImageToImageFilterIVF32ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterIVF32ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF32 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF32
        GetInput(self, idx) -> itkImageVF32

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF32ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF32ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_cast(obj)

# Register itkImageToImageFilterIVF32ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ID2_swigregister(itkImageToImageFilterIVF32ID2)
class itkImageToImageFilterIVF32IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterIVF32IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF32 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF32
        GetInput(self, idx) -> itkImageVF32

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF32IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF32IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_cast(obj)

# Register itkImageToImageFilterIVF32IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IF2_swigregister(itkImageToImageFilterIVF32IF2)
class itkImageToImageFilterIVF32ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterIVF32ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF32 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF32
        GetInput(self, idx) -> itkImageVF32

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF32ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF32ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_cast(obj)

# Register itkImageToImageFilterIVF32ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2_swigregister(itkImageToImageFilterIVF32ISS2)
class itkImageToImageFilterIVF32IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterIVF32IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF32 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF32
        GetInput(self, idx) -> itkImageVF32

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF32IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF32IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_cast(obj)

# Register itkImageToImageFilterIVF32IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2_swigregister(itkImageToImageFilterIVF32IUC2)
class itkImageToImageFilterIVF32IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterIVF32IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF32 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF32
        GetInput(self, idx) -> itkImageVF32

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF32 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF32IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF32IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_cast(obj)

# Register itkImageToImageFilterIVF32IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2_swigregister(itkImageToImageFilterIVF32IUS2)
class itkImageToImageFilterIVF33ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterIVF33ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF33
        GetInput(self, idx) -> itkImageVF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF33ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF33ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_cast(obj)

# Register itkImageToImageFilterIVF33ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3_swigregister(itkImageToImageFilterIVF33ID3)
class itkImageToImageFilterIVF33IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterIVF33IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF33
        GetInput(self, idx) -> itkImageVF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF33IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF33IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_cast(obj)

# Register itkImageToImageFilterIVF33IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3_swigregister(itkImageToImageFilterIVF33IF3)
class itkImageToImageFilterIVF33ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterIVF33ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF33
        GetInput(self, idx) -> itkImageVF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF33ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF33ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_cast(obj)

# Register itkImageToImageFilterIVF33ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3_swigregister(itkImageToImageFilterIVF33ISS3)
class itkImageToImageFilterIVF33IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterIVF33IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF33
        GetInput(self, idx) -> itkImageVF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF33IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF33IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_cast(obj)

# Register itkImageToImageFilterIVF33IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3_swigregister(itkImageToImageFilterIVF33IUC3)
class itkImageToImageFilterIVF33IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterIVF33IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF33
        GetInput(self, idx) -> itkImageVF33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF33 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF33IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF33IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_cast(obj)

# Register itkImageToImageFilterIVF33IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3_swigregister(itkImageToImageFilterIVF33IUS3)
class itkImageToImageFilterIVF34ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterIVF34ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF34
        GetInput(self, idx) -> itkImageVF34

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF34ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF34ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34ID4_cast(obj)

# Register itkImageToImageFilterIVF34ID4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF34ID4_swigregister(itkImageToImageFilterIVF34ID4)
class itkImageToImageFilterIVF34IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterIVF34IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF34
        GetInput(self, idx) -> itkImageVF34

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF34IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF34IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IF4_cast(obj)

# Register itkImageToImageFilterIVF34IF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF34IF4_swigregister(itkImageToImageFilterIVF34IF4)
class itkImageToImageFilterIVF34ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterIVF34ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF34
        GetInput(self, idx) -> itkImageVF34

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF34ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF34ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34ISS4_cast(obj)

# Register itkImageToImageFilterIVF34ISS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF34ISS4_swigregister(itkImageToImageFilterIVF34ISS4)
class itkImageToImageFilterIVF34IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterIVF34IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF34
        GetInput(self, idx) -> itkImageVF34

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF34IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF34IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUC4_cast(obj)

# Register itkImageToImageFilterIVF34IUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUC4_swigregister(itkImageToImageFilterIVF34IUC4)
class itkImageToImageFilterIVF34IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterIVF34IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF34
        GetInput(self, idx) -> itkImageVF34

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF34IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF34IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUS4_cast(obj)

# Register itkImageToImageFilterIVF34IUS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUS4_swigregister(itkImageToImageFilterIVF34IUS4)
class itkImageToImageFilterIVF42ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterIVF42ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF42 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF42
        GetInput(self, idx) -> itkImageVF42

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF42ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF42ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_cast(obj)

# Register itkImageToImageFilterIVF42ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ID2_swigregister(itkImageToImageFilterIVF42ID2)
class itkImageToImageFilterIVF42IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterIVF42IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF42 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF42
        GetInput(self, idx) -> itkImageVF42

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF42IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF42IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_cast(obj)

# Register itkImageToImageFilterIVF42IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IF2_swigregister(itkImageToImageFilterIVF42IF2)
class itkImageToImageFilterIVF42ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterIVF42ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF42 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF42
        GetInput(self, idx) -> itkImageVF42

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF42ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF42ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_cast(obj)

# Register itkImageToImageFilterIVF42ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2_swigregister(itkImageToImageFilterIVF42ISS2)
class itkImageToImageFilterIVF42IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterIVF42IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF42 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF42
        GetInput(self, idx) -> itkImageVF42

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF42IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF42IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_cast(obj)

# Register itkImageToImageFilterIVF42IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2_swigregister(itkImageToImageFilterIVF42IUC2)
class itkImageToImageFilterIVF42IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterIVF42IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF42 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF42
        GetInput(self, idx) -> itkImageVF42

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF42 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF42IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF42IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_cast(obj)

# Register itkImageToImageFilterIVF42IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2_swigregister(itkImageToImageFilterIVF42IUS2)
class itkImageToImageFilterIVF43ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterIVF43ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF43 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF43
        GetInput(self, idx) -> itkImageVF43

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF43ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF43ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_cast(obj)

# Register itkImageToImageFilterIVF43ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ID3_swigregister(itkImageToImageFilterIVF43ID3)
class itkImageToImageFilterIVF43IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterIVF43IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF43 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF43
        GetInput(self, idx) -> itkImageVF43

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF43IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF43IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_cast(obj)

# Register itkImageToImageFilterIVF43IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IF3_swigregister(itkImageToImageFilterIVF43IF3)
class itkImageToImageFilterIVF43ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterIVF43ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF43 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF43
        GetInput(self, idx) -> itkImageVF43

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF43ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF43ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_cast(obj)

# Register itkImageToImageFilterIVF43ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3_swigregister(itkImageToImageFilterIVF43ISS3)
class itkImageToImageFilterIVF43IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterIVF43IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF43 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF43
        GetInput(self, idx) -> itkImageVF43

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF43IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF43IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_cast(obj)

# Register itkImageToImageFilterIVF43IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3_swigregister(itkImageToImageFilterIVF43IUC3)
class itkImageToImageFilterIVF43IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterIVF43IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF43 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF43
        GetInput(self, idx) -> itkImageVF43

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF43 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF43IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF43IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_cast(obj)

# Register itkImageToImageFilterIVF43IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3_swigregister(itkImageToImageFilterIVF43IUS3)
class itkImageToImageFilterIVF44ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterIVF44ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF44
        GetInput(self, idx) -> itkImageVF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF44ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF44ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44ID4_cast(obj)

# Register itkImageToImageFilterIVF44ID4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF44ID4_swigregister(itkImageToImageFilterIVF44ID4)
class itkImageToImageFilterIVF44IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterIVF44IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF44
        GetInput(self, idx) -> itkImageVF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF44IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF44IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IF4_cast(obj)

# Register itkImageToImageFilterIVF44IF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF44IF4_swigregister(itkImageToImageFilterIVF44IF4)
class itkImageToImageFilterIVF44ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterIVF44ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF44
        GetInput(self, idx) -> itkImageVF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF44ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF44ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44ISS4_cast(obj)

# Register itkImageToImageFilterIVF44ISS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF44ISS4_swigregister(itkImageToImageFilterIVF44ISS4)
class itkImageToImageFilterIVF44IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterIVF44IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF44
        GetInput(self, idx) -> itkImageVF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF44IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF44IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUC4_cast(obj)

# Register itkImageToImageFilterIVF44IUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUC4_swigregister(itkImageToImageFilterIVF44IUC4)
class itkImageToImageFilterIVF44IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterIVF44IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF44
        GetInput(self, idx) -> itkImageVF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterIVF44IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF44IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUS4_cast(obj)

# Register itkImageToImageFilterIVF44IUS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUS4_swigregister(itkImageToImageFilterIVF44IUS4)
class itkImageToImageFilterPA3DSCICDPA3DSCICD(itk.itkImageSourcePython.itkImageSourcePA3DSCICD):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCICDPA3DSCICD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageCD const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageCD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCICD_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageCD
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageCD

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCICD_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageCD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCICD_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCICD_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageCD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCICD_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCICD_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCICD_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCICD_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCICD_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCICD_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCICDPA3DSCICD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCICDPA3DSCICD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCICD_cast(obj)

# Register itkImageToImageFilterPA3DSCICDPA3DSCICD in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCICD_swigregister(itkImageToImageFilterPA3DSCICDPA3DSCICD)
class itkImageToImageFilterPA3DSCICDPA3DSCID(itk.itkImageSourcePython.itkImageSourcePA3DSCID):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCICDPA3DSCID class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageCD const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageCD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCID_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageCD
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageCD

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCID_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageCD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCID_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCID_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageCD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCID_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCID_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCID_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCID_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCID_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCID_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCICDPA3DSCID

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCICDPA3DSCID

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCID_cast(obj)

# Register itkImageToImageFilterPA3DSCICDPA3DSCID in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCID_swigregister(itkImageToImageFilterPA3DSCICDPA3DSCID)
class itkImageToImageFilterPA3DSCICDPA3DSCIF(itk.itkImageSourcePython.itkImageSourcePA3DSCIF):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCICDPA3DSCIF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageCD const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageCD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCIF_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageCD
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageCD

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCIF_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageCD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCIF_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCIF_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageCD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCIF_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCIF_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCIF_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCIF_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCIF_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCIF_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCICDPA3DSCIF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCICDPA3DSCIF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCIF_cast(obj)

# Register itkImageToImageFilterPA3DSCICDPA3DSCIF in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICDPA3DSCIF_swigregister(itkImageToImageFilterPA3DSCICDPA3DSCIF)
class itkImageToImageFilterPA3DSCICFPA3DSCICF(itk.itkImageSourcePython.itkImageSourcePA3DSCICF):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCICFPA3DSCICF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageCF const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageCF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCICF_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageCF
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageCF

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCICF_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageCF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCICF_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCICF_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageCF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCICF_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCICF_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCICF_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCICF_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCICF_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCICF_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCICFPA3DSCICF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCICFPA3DSCICF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCICF_cast(obj)

# Register itkImageToImageFilterPA3DSCICFPA3DSCICF in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCICF_swigregister(itkImageToImageFilterPA3DSCICFPA3DSCICF)
class itkImageToImageFilterPA3DSCICFPA3DSCID(itk.itkImageSourcePython.itkImageSourcePA3DSCID):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCICFPA3DSCID class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageCF const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageCF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCID_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageCF
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageCF

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCID_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageCF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCID_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCID_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageCF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCID_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCID_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCID_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCID_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCID_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCID_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCICFPA3DSCID

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCICFPA3DSCID

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCID_cast(obj)

# Register itkImageToImageFilterPA3DSCICFPA3DSCID in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCID_swigregister(itkImageToImageFilterPA3DSCICFPA3DSCID)
class itkImageToImageFilterPA3DSCICFPA3DSCIF(itk.itkImageSourcePython.itkImageSourcePA3DSCIF):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCICFPA3DSCIF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageCF const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageCF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCIF_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageCF
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageCF

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCIF_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageCF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCIF_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCIF_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageCF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCIF_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCIF_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCIF_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCIF_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCIF_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCIF_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCICFPA3DSCIF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCICFPA3DSCIF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCIF_cast(obj)

# Register itkImageToImageFilterPA3DSCICFPA3DSCIF in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCICFPA3DSCIF_swigregister(itkImageToImageFilterPA3DSCICFPA3DSCIF)
class itkImageToImageFilterPA3DSCIDID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIDID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageD
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageD

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIDID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIDID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDID3_cast(obj)

# Register itkImageToImageFilterPA3DSCIDID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDID3_swigregister(itkImageToImageFilterPA3DSCIDID3)
class itkImageToImageFilterPA3DSCIDIF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIDIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageD
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageD

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIDIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIDIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIF3_cast(obj)

# Register itkImageToImageFilterPA3DSCIDIF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIF3_swigregister(itkImageToImageFilterPA3DSCIDIF3)
class itkImageToImageFilterPA3DSCIDISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIDISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageD
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageD

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIDISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIDISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDISS3_cast(obj)

# Register itkImageToImageFilterPA3DSCIDISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDISS3_swigregister(itkImageToImageFilterPA3DSCIDISS3)
class itkImageToImageFilterPA3DSCIDIUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIDIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageD
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageD

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIDIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIDIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIUC3_cast(obj)

# Register itkImageToImageFilterPA3DSCIDIUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIUC3_swigregister(itkImageToImageFilterPA3DSCIDIUC3)
class itkImageToImageFilterPA3DSCIDIUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIDIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageD
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageD

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIDIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIDIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIUS3_cast(obj)

# Register itkImageToImageFilterPA3DSCIDIUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDIUS3_swigregister(itkImageToImageFilterPA3DSCIDIUS3)
class itkImageToImageFilterPA3DSCIDPA3DSCICD(itk.itkImageSourcePython.itkImageSourcePA3DSCICD):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIDPA3DSCICD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCICD_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageD
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageD

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCICD_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCICD_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCICD_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCICD_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCICD_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCICD_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCICD_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCICD_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCICD_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIDPA3DSCICD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIDPA3DSCICD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCICD_cast(obj)

# Register itkImageToImageFilterPA3DSCIDPA3DSCICD in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCICD_swigregister(itkImageToImageFilterPA3DSCIDPA3DSCICD)
class itkImageToImageFilterPA3DSCIDPA3DSCICF(itk.itkImageSourcePython.itkImageSourcePA3DSCICF):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIDPA3DSCICF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCICF_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageD
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageD

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCICF_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCICF_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCICF_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCICF_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCICF_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCICF_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCICF_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCICF_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCICF_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIDPA3DSCICF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIDPA3DSCICF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCICF_cast(obj)

# Register itkImageToImageFilterPA3DSCIDPA3DSCICF in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCICF_swigregister(itkImageToImageFilterPA3DSCIDPA3DSCICF)
class itkImageToImageFilterPA3DSCIDPA3DSCID(itk.itkImageSourcePython.itkImageSourcePA3DSCID):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIDPA3DSCID class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCID_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageD
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageD

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCID_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCID_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCID_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCID_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCID_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCID_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCID_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCID_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCID_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIDPA3DSCID

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIDPA3DSCID

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCID_cast(obj)

# Register itkImageToImageFilterPA3DSCIDPA3DSCID in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCID_swigregister(itkImageToImageFilterPA3DSCIDPA3DSCID)
class itkImageToImageFilterPA3DSCIDPA3DSCIF(itk.itkImageSourcePython.itkImageSourcePA3DSCIF):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIDPA3DSCIF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIF_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageD
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageD

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIF_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIF_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIF_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIF_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIF_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIF_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIF_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIF_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIF_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIDPA3DSCIF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIDPA3DSCIF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIF_cast(obj)

# Register itkImageToImageFilterPA3DSCIDPA3DSCIF in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIF_swigregister(itkImageToImageFilterPA3DSCIDPA3DSCIF)
class itkImageToImageFilterPA3DSCIDPA3DSCISS(itk.itkImageSourcePython.itkImageSourcePA3DSCISS):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIDPA3DSCISS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCISS_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageD
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageD

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCISS_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCISS_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCISS_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCISS_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCISS_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCISS_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCISS_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCISS_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCISS_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIDPA3DSCISS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIDPA3DSCISS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCISS_cast(obj)

# Register itkImageToImageFilterPA3DSCIDPA3DSCISS in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCISS_swigregister(itkImageToImageFilterPA3DSCIDPA3DSCISS)
class itkImageToImageFilterPA3DSCIDPA3DSCIUC(itk.itkImageSourcePython.itkImageSourcePA3DSCIUC):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIDPA3DSCIUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIUC_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageD
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageD

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIUC_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIUC_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIUC_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIUC_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIUC_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIUC_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIUC_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIUC_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIUC_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIDPA3DSCIUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIDPA3DSCIUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIUC_cast(obj)

# Register itkImageToImageFilterPA3DSCIDPA3DSCIUC in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIUC_swigregister(itkImageToImageFilterPA3DSCIDPA3DSCIUC)
class itkImageToImageFilterPA3DSCIDPA3DSCIUS(itk.itkImageSourcePython.itkImageSourcePA3DSCIUS):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIDPA3DSCIUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIUS_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageD
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageD

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIUS_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIUS_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIUS_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageD const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIUS_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIUS_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIUS_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIUS_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIUS_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIUS_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIDPA3DSCIUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIDPA3DSCIUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIUS_cast(obj)

# Register itkImageToImageFilterPA3DSCIDPA3DSCIUS in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIDPA3DSCIUS_swigregister(itkImageToImageFilterPA3DSCIDPA3DSCIUS)
class itkImageToImageFilterPA3DSCIFID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIFID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageF
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageF

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIFID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIFID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFID3_cast(obj)

# Register itkImageToImageFilterPA3DSCIFID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFID3_swigregister(itkImageToImageFilterPA3DSCIFID3)
class itkImageToImageFilterPA3DSCIFIF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIFIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageF
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageF

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIFIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIFIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIF3_cast(obj)

# Register itkImageToImageFilterPA3DSCIFIF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIF3_swigregister(itkImageToImageFilterPA3DSCIFIF3)
class itkImageToImageFilterPA3DSCIFISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIFISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageF
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageF

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIFISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIFISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFISS3_cast(obj)

# Register itkImageToImageFilterPA3DSCIFISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFISS3_swigregister(itkImageToImageFilterPA3DSCIFISS3)
class itkImageToImageFilterPA3DSCIFIUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIFIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageF
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageF

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIFIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIFIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIUC3_cast(obj)

# Register itkImageToImageFilterPA3DSCIFIUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIUC3_swigregister(itkImageToImageFilterPA3DSCIFIUC3)
class itkImageToImageFilterPA3DSCIFIUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIFIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageF
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageF

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIFIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIFIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIUS3_cast(obj)

# Register itkImageToImageFilterPA3DSCIFIUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFIUS3_swigregister(itkImageToImageFilterPA3DSCIFIUS3)
class itkImageToImageFilterPA3DSCIFPA3DSCICD(itk.itkImageSourcePython.itkImageSourcePA3DSCICD):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIFPA3DSCICD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCICD_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageF
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageF

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCICD_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCICD_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCICD_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCICD_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCICD_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCICD_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCICD_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCICD_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCICD_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIFPA3DSCICD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIFPA3DSCICD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCICD_cast(obj)

# Register itkImageToImageFilterPA3DSCIFPA3DSCICD in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCICD_swigregister(itkImageToImageFilterPA3DSCIFPA3DSCICD)
class itkImageToImageFilterPA3DSCIFPA3DSCICF(itk.itkImageSourcePython.itkImageSourcePA3DSCICF):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIFPA3DSCICF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCICF_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageF
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageF

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCICF_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCICF_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCICF_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCICF_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCICF_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCICF_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCICF_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCICF_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCICF_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIFPA3DSCICF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIFPA3DSCICF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCICF_cast(obj)

# Register itkImageToImageFilterPA3DSCIFPA3DSCICF in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCICF_swigregister(itkImageToImageFilterPA3DSCIFPA3DSCICF)
class itkImageToImageFilterPA3DSCIFPA3DSCID(itk.itkImageSourcePython.itkImageSourcePA3DSCID):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIFPA3DSCID class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCID_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageF
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageF

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCID_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCID_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCID_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCID_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCID_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCID_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCID_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCID_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCID_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIFPA3DSCID

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIFPA3DSCID

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCID_cast(obj)

# Register itkImageToImageFilterPA3DSCIFPA3DSCID in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCID_swigregister(itkImageToImageFilterPA3DSCIFPA3DSCID)
class itkImageToImageFilterPA3DSCIFPA3DSCIF(itk.itkImageSourcePython.itkImageSourcePA3DSCIF):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIFPA3DSCIF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIF_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageF
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageF

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIF_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIF_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIF_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIF_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIF_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIF_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIF_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIF_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIF_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIFPA3DSCIF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIFPA3DSCIF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIF_cast(obj)

# Register itkImageToImageFilterPA3DSCIFPA3DSCIF in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIF_swigregister(itkImageToImageFilterPA3DSCIFPA3DSCIF)
class itkImageToImageFilterPA3DSCIFPA3DSCISS(itk.itkImageSourcePython.itkImageSourcePA3DSCISS):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIFPA3DSCISS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCISS_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageF
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageF

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCISS_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCISS_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCISS_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCISS_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCISS_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCISS_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCISS_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCISS_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCISS_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIFPA3DSCISS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIFPA3DSCISS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCISS_cast(obj)

# Register itkImageToImageFilterPA3DSCIFPA3DSCISS in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCISS_swigregister(itkImageToImageFilterPA3DSCIFPA3DSCISS)
class itkImageToImageFilterPA3DSCIFPA3DSCIUC(itk.itkImageSourcePython.itkImageSourcePA3DSCIUC):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIFPA3DSCIUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIUC_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageF
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageF

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIUC_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIUC_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIUC_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIUC_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIUC_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIUC_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIUC_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIUC_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIUC_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIFPA3DSCIUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIFPA3DSCIUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIUC_cast(obj)

# Register itkImageToImageFilterPA3DSCIFPA3DSCIUC in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIUC_swigregister(itkImageToImageFilterPA3DSCIFPA3DSCIUC)
class itkImageToImageFilterPA3DSCIFPA3DSCIUS(itk.itkImageSourcePython.itkImageSourcePA3DSCIUS):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIFPA3DSCIUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIUS_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageF
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageF

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIUS_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIUS_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIUS_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageF const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIUS_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIUS_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIUS_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIUS_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIUS_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIUS_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIFPA3DSCIUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIFPA3DSCIUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIUS_cast(obj)

# Register itkImageToImageFilterPA3DSCIFPA3DSCIUS in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIFPA3DSCIUS_swigregister(itkImageToImageFilterPA3DSCIFPA3DSCIUS)
class itkImageToImageFilterPA3DSCISSID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCISSID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageSS
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageSS

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCISSID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCISSID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSID3_cast(obj)

# Register itkImageToImageFilterPA3DSCISSID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSID3_swigregister(itkImageToImageFilterPA3DSCISSID3)
class itkImageToImageFilterPA3DSCISSIF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCISSIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageSS
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageSS

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCISSIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCISSIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIF3_cast(obj)

# Register itkImageToImageFilterPA3DSCISSIF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIF3_swigregister(itkImageToImageFilterPA3DSCISSIF3)
class itkImageToImageFilterPA3DSCISSISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCISSISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageSS
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageSS

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCISSISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCISSISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSISS3_cast(obj)

# Register itkImageToImageFilterPA3DSCISSISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSISS3_swigregister(itkImageToImageFilterPA3DSCISSISS3)
class itkImageToImageFilterPA3DSCISSIUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCISSIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageSS
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageSS

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCISSIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCISSIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIUC3_cast(obj)

# Register itkImageToImageFilterPA3DSCISSIUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIUC3_swigregister(itkImageToImageFilterPA3DSCISSIUC3)
class itkImageToImageFilterPA3DSCISSIUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCISSIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageSS
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageSS

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCISSIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCISSIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIUS3_cast(obj)

# Register itkImageToImageFilterPA3DSCISSIUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSIUS3_swigregister(itkImageToImageFilterPA3DSCISSIUS3)
class itkImageToImageFilterPA3DSCISSPA3DSCID(itk.itkImageSourcePython.itkImageSourcePA3DSCID):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCISSPA3DSCID class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCID_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageSS
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageSS

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCID_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCID_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCID_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCID_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCID_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCID_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCID_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCID_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCID_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCISSPA3DSCID

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCISSPA3DSCID

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCID_cast(obj)

# Register itkImageToImageFilterPA3DSCISSPA3DSCID in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCID_swigregister(itkImageToImageFilterPA3DSCISSPA3DSCID)
class itkImageToImageFilterPA3DSCISSPA3DSCIF(itk.itkImageSourcePython.itkImageSourcePA3DSCIF):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCISSPA3DSCIF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIF_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageSS
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageSS

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIF_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIF_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIF_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIF_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIF_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIF_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIF_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIF_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIF_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCISSPA3DSCIF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCISSPA3DSCIF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIF_cast(obj)

# Register itkImageToImageFilterPA3DSCISSPA3DSCIF in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIF_swigregister(itkImageToImageFilterPA3DSCISSPA3DSCIF)
class itkImageToImageFilterPA3DSCISSPA3DSCISS(itk.itkImageSourcePython.itkImageSourcePA3DSCISS):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCISSPA3DSCISS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCISS_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageSS
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageSS

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCISS_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCISS_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCISS_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCISS_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCISS_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCISS_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCISS_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCISS_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCISS_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCISSPA3DSCISS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCISSPA3DSCISS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCISS_cast(obj)

# Register itkImageToImageFilterPA3DSCISSPA3DSCISS in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCISS_swigregister(itkImageToImageFilterPA3DSCISSPA3DSCISS)
class itkImageToImageFilterPA3DSCISSPA3DSCIUC(itk.itkImageSourcePython.itkImageSourcePA3DSCIUC):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCISSPA3DSCIUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIUC_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageSS
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageSS

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIUC_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIUC_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIUC_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIUC_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIUC_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIUC_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIUC_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIUC_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIUC_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCISSPA3DSCIUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCISSPA3DSCIUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIUC_cast(obj)

# Register itkImageToImageFilterPA3DSCISSPA3DSCIUC in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIUC_swigregister(itkImageToImageFilterPA3DSCISSPA3DSCIUC)
class itkImageToImageFilterPA3DSCISSPA3DSCIUS(itk.itkImageSourcePython.itkImageSourcePA3DSCIUS):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCISSPA3DSCIUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIUS_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageSS
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageSS

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIUS_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIUS_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIUS_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageSS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIUS_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIUS_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIUS_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIUS_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIUS_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIUS_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCISSPA3DSCIUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCISSPA3DSCIUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIUS_cast(obj)

# Register itkImageToImageFilterPA3DSCISSPA3DSCIUS in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCISSPA3DSCIUS_swigregister(itkImageToImageFilterPA3DSCISSPA3DSCIUS)
class itkImageToImageFilterPA3DSCIUCID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIUCID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageUC
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageUC

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIUCID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIUCID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCID3_cast(obj)

# Register itkImageToImageFilterPA3DSCIUCID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCID3_swigregister(itkImageToImageFilterPA3DSCIUCID3)
class itkImageToImageFilterPA3DSCIUCIF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIUCIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageUC
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageUC

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIUCIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIUCIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIF3_cast(obj)

# Register itkImageToImageFilterPA3DSCIUCIF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIF3_swigregister(itkImageToImageFilterPA3DSCIUCIF3)
class itkImageToImageFilterPA3DSCIUCISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIUCISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageUC
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageUC

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIUCISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIUCISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCISS3_cast(obj)

# Register itkImageToImageFilterPA3DSCIUCISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCISS3_swigregister(itkImageToImageFilterPA3DSCIUCISS3)
class itkImageToImageFilterPA3DSCIUCIUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIUCIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageUC
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageUC

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIUCIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIUCIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIUC3_cast(obj)

# Register itkImageToImageFilterPA3DSCIUCIUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIUC3_swigregister(itkImageToImageFilterPA3DSCIUCIUC3)
class itkImageToImageFilterPA3DSCIUCIUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIUCIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageUC
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageUC

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIUCIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIUCIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIUS3_cast(obj)

# Register itkImageToImageFilterPA3DSCIUCIUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCIUS3_swigregister(itkImageToImageFilterPA3DSCIUCIUS3)
class itkImageToImageFilterPA3DSCIUCPA3DSCID(itk.itkImageSourcePython.itkImageSourcePA3DSCID):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIUCPA3DSCID class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCID_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageUC
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageUC

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCID_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCID_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCID_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCID_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCID_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCID_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCID_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCID_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCID_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIUCPA3DSCID

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIUCPA3DSCID

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCID_cast(obj)

# Register itkImageToImageFilterPA3DSCIUCPA3DSCID in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCID_swigregister(itkImageToImageFilterPA3DSCIUCPA3DSCID)
class itkImageToImageFilterPA3DSCIUCPA3DSCIF(itk.itkImageSourcePython.itkImageSourcePA3DSCIF):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIUCPA3DSCIF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIF_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageUC
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageUC

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIF_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIF_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIF_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIF_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIF_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIF_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIF_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIF_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIF_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIUCPA3DSCIF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIUCPA3DSCIF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIF_cast(obj)

# Register itkImageToImageFilterPA3DSCIUCPA3DSCIF in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIF_swigregister(itkImageToImageFilterPA3DSCIUCPA3DSCIF)
class itkImageToImageFilterPA3DSCIUCPA3DSCISS(itk.itkImageSourcePython.itkImageSourcePA3DSCISS):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIUCPA3DSCISS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCISS_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageUC
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageUC

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCISS_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCISS_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCISS_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCISS_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCISS_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCISS_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCISS_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCISS_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCISS_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIUCPA3DSCISS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIUCPA3DSCISS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCISS_cast(obj)

# Register itkImageToImageFilterPA3DSCIUCPA3DSCISS in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCISS_swigregister(itkImageToImageFilterPA3DSCIUCPA3DSCISS)
class itkImageToImageFilterPA3DSCIUCPA3DSCIUC(itk.itkImageSourcePython.itkImageSourcePA3DSCIUC):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIUCPA3DSCIUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIUC_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageUC
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageUC

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIUC_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIUC_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIUC_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIUC_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIUC_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIUC_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIUC_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIUC_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIUC_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIUCPA3DSCIUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIUCPA3DSCIUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIUC_cast(obj)

# Register itkImageToImageFilterPA3DSCIUCPA3DSCIUC in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIUC_swigregister(itkImageToImageFilterPA3DSCIUCPA3DSCIUC)
class itkImageToImageFilterPA3DSCIUCPA3DSCIUS(itk.itkImageSourcePython.itkImageSourcePA3DSCIUS):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIUCPA3DSCIUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIUS_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageUC
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageUC

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIUS_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIUS_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIUS_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUC const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIUS_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIUS_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIUS_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIUS_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIUS_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIUS_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIUCPA3DSCIUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIUCPA3DSCIUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIUS_cast(obj)

# Register itkImageToImageFilterPA3DSCIUCPA3DSCIUS in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUCPA3DSCIUS_swigregister(itkImageToImageFilterPA3DSCIUCPA3DSCIUS)
class itkImageToImageFilterPA3DSCIUSID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIUSID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageUS
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageUS

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIUSID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIUSID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSID3_cast(obj)

# Register itkImageToImageFilterPA3DSCIUSID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSID3_swigregister(itkImageToImageFilterPA3DSCIUSID3)
class itkImageToImageFilterPA3DSCIUSIF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIUSIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageUS
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageUS

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIUSIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIUSIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIF3_cast(obj)

# Register itkImageToImageFilterPA3DSCIUSIF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIF3_swigregister(itkImageToImageFilterPA3DSCIUSIF3)
class itkImageToImageFilterPA3DSCIUSISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIUSISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageUS
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageUS

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIUSISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIUSISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSISS3_cast(obj)

# Register itkImageToImageFilterPA3DSCIUSISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSISS3_swigregister(itkImageToImageFilterPA3DSCIUSISS3)
class itkImageToImageFilterPA3DSCIUSIUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIUSIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageUS
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageUS

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIUSIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIUSIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIUC3_cast(obj)

# Register itkImageToImageFilterPA3DSCIUSIUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIUC3_swigregister(itkImageToImageFilterPA3DSCIUSIUC3)
class itkImageToImageFilterPA3DSCIUSIUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIUSIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageUS
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageUS

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIUSIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIUSIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIUS3_cast(obj)

# Register itkImageToImageFilterPA3DSCIUSIUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSIUS3_swigregister(itkImageToImageFilterPA3DSCIUSIUS3)
class itkImageToImageFilterPA3DSCIUSPA3DSCID(itk.itkImageSourcePython.itkImageSourcePA3DSCID):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIUSPA3DSCID class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCID_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageUS
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageUS

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCID_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCID_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCID_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCID_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCID_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCID_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCID_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCID_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCID_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIUSPA3DSCID

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIUSPA3DSCID

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCID_cast(obj)

# Register itkImageToImageFilterPA3DSCIUSPA3DSCID in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCID_swigregister(itkImageToImageFilterPA3DSCIUSPA3DSCID)
class itkImageToImageFilterPA3DSCIUSPA3DSCIF(itk.itkImageSourcePython.itkImageSourcePA3DSCIF):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIUSPA3DSCIF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIF_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageUS
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageUS

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIF_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIF_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIF_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIF_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIF_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIF_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIF_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIF_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIF_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIUSPA3DSCIF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIUSPA3DSCIF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIF_cast(obj)

# Register itkImageToImageFilterPA3DSCIUSPA3DSCIF in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIF_swigregister(itkImageToImageFilterPA3DSCIUSPA3DSCIF)
class itkImageToImageFilterPA3DSCIUSPA3DSCISS(itk.itkImageSourcePython.itkImageSourcePA3DSCISS):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIUSPA3DSCISS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCISS_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageUS
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageUS

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCISS_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCISS_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCISS_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCISS_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCISS_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCISS_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCISS_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCISS_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCISS_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIUSPA3DSCISS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIUSPA3DSCISS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCISS_cast(obj)

# Register itkImageToImageFilterPA3DSCIUSPA3DSCISS in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCISS_swigregister(itkImageToImageFilterPA3DSCIUSPA3DSCISS)
class itkImageToImageFilterPA3DSCIUSPA3DSCIUC(itk.itkImageSourcePython.itkImageSourcePA3DSCIUC):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIUSPA3DSCIUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIUC_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageUS
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageUS

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIUC_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIUC_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIUC_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIUC_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIUC_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIUC_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIUC_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIUC_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIUC_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIUSPA3DSCIUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIUSPA3DSCIUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIUC_cast(obj)

# Register itkImageToImageFilterPA3DSCIUSPA3DSCIUC in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIUC_swigregister(itkImageToImageFilterPA3DSCIUSPA3DSCIUC)
class itkImageToImageFilterPA3DSCIUSPA3DSCIUS(itk.itkImageSourcePython.itkImageSourcePA3DSCIUS):
    r"""Proxy of C++ itkImageToImageFilterPA3DSCIUSPA3DSCIUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIUS_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkPhasedArray3DSpecialCoordinatesImageUS
        GetInput(self, idx) -> itkPhasedArray3DSpecialCoordinatesImageUS

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIUS_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIUS_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIUS_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkPhasedArray3DSpecialCoordinatesImageUS const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIUS_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIUS_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIUS_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIUS_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIUS_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIUS_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterPA3DSCIUSPA3DSCIUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterPA3DSCIUSPA3DSCIUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIUS_cast(obj)

# Register itkImageToImageFilterPA3DSCIUSPA3DSCIUS in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterPA3DSCIUSPA3DSCIUS_swigregister(itkImageToImageFilterPA3DSCIUSPA3DSCIUS)
class itkImageToImageFilterVID2ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterVID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageD2
        GetInput(self, idx) -> itkVectorImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_cast(obj)

# Register itkImageToImageFilterVID2ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2_swigregister(itkImageToImageFilterVID2ID2)
class itkImageToImageFilterVID2IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterVID2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageD2
        GetInput(self, idx) -> itkVectorImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVID2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_cast(obj)

# Register itkImageToImageFilterVID2IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID2IF2_swigregister(itkImageToImageFilterVID2IF2)
class itkImageToImageFilterVID2ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterVID2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageD2
        GetInput(self, idx) -> itkVectorImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVID2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_cast(obj)

# Register itkImageToImageFilterVID2ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID2ISS2_swigregister(itkImageToImageFilterVID2ISS2)
class itkImageToImageFilterVID2IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterVID2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageD2
        GetInput(self, idx) -> itkVectorImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVID2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_cast(obj)

# Register itkImageToImageFilterVID2IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUC2_swigregister(itkImageToImageFilterVID2IUC2)
class itkImageToImageFilterVID2IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterVID2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageD2
        GetInput(self, idx) -> itkVectorImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVID2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_cast(obj)

# Register itkImageToImageFilterVID2IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID2IUS2_swigregister(itkImageToImageFilterVID2IUS2)
class itkImageToImageFilterVID3ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterVID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageD3
        GetInput(self, idx) -> itkVectorImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_cast(obj)

# Register itkImageToImageFilterVID3ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3_swigregister(itkImageToImageFilterVID3ID3)
class itkImageToImageFilterVID3IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterVID3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageD3
        GetInput(self, idx) -> itkVectorImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVID3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_cast(obj)

# Register itkImageToImageFilterVID3IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID3IF3_swigregister(itkImageToImageFilterVID3IF3)
class itkImageToImageFilterVID3ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterVID3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageD3
        GetInput(self, idx) -> itkVectorImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVID3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_cast(obj)

# Register itkImageToImageFilterVID3ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID3ISS3_swigregister(itkImageToImageFilterVID3ISS3)
class itkImageToImageFilterVID3IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterVID3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageD3
        GetInput(self, idx) -> itkVectorImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVID3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_cast(obj)

# Register itkImageToImageFilterVID3IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUC3_swigregister(itkImageToImageFilterVID3IUC3)
class itkImageToImageFilterVID3IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterVID3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageD3
        GetInput(self, idx) -> itkVectorImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVID3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_cast(obj)

# Register itkImageToImageFilterVID3IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID3IUS3_swigregister(itkImageToImageFilterVID3IUS3)
class itkImageToImageFilterVID4ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterVID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageD4
        GetInput(self, idx) -> itkVectorImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4ID4_cast(obj)

# Register itkImageToImageFilterVID4ID4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID4ID4_swigregister(itkImageToImageFilterVID4ID4)
class itkImageToImageFilterVID4IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterVID4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageD4
        GetInput(self, idx) -> itkVectorImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVID4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IF4_cast(obj)

# Register itkImageToImageFilterVID4IF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID4IF4_swigregister(itkImageToImageFilterVID4IF4)
class itkImageToImageFilterVID4ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterVID4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageD4
        GetInput(self, idx) -> itkVectorImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVID4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4ISS4_cast(obj)

# Register itkImageToImageFilterVID4ISS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID4ISS4_swigregister(itkImageToImageFilterVID4ISS4)
class itkImageToImageFilterVID4IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterVID4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageD4
        GetInput(self, idx) -> itkVectorImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVID4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IUC4_cast(obj)

# Register itkImageToImageFilterVID4IUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID4IUC4_swigregister(itkImageToImageFilterVID4IUC4)
class itkImageToImageFilterVID4IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterVID4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageD4
        GetInput(self, idx) -> itkVectorImageD4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVID4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVID4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVID4IUS4_cast(obj)

# Register itkImageToImageFilterVID4IUS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVID4IUS4_swigregister(itkImageToImageFilterVID4IUS4)
class itkImageToImageFilterVIF2ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterVIF2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF2
        GetInput(self, idx) -> itkVectorImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_cast(obj)

# Register itkImageToImageFilterVIF2ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ID2_swigregister(itkImageToImageFilterVIF2ID2)
class itkImageToImageFilterVIF2IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterVIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF2
        GetInput(self, idx) -> itkVectorImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_cast(obj)

# Register itkImageToImageFilterVIF2IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2_swigregister(itkImageToImageFilterVIF2IF2)
class itkImageToImageFilterVIF2ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterVIF2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF2
        GetInput(self, idx) -> itkVectorImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_cast(obj)

# Register itkImageToImageFilterVIF2ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF2ISS2_swigregister(itkImageToImageFilterVIF2ISS2)
class itkImageToImageFilterVIF2IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterVIF2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF2
        GetInput(self, idx) -> itkVectorImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_cast(obj)

# Register itkImageToImageFilterVIF2IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUC2_swigregister(itkImageToImageFilterVIF2IUC2)
class itkImageToImageFilterVIF2IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterVIF2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF2
        GetInput(self, idx) -> itkVectorImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_cast(obj)

# Register itkImageToImageFilterVIF2IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF2IUS2_swigregister(itkImageToImageFilterVIF2IUS2)
class itkImageToImageFilterVIF3ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterVIF3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF3
        GetInput(self, idx) -> itkVectorImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_cast(obj)

# Register itkImageToImageFilterVIF3ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ID3_swigregister(itkImageToImageFilterVIF3ID3)
class itkImageToImageFilterVIF3IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterVIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF3
        GetInput(self, idx) -> itkVectorImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_cast(obj)

# Register itkImageToImageFilterVIF3IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3_swigregister(itkImageToImageFilterVIF3IF3)
class itkImageToImageFilterVIF3ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterVIF3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF3
        GetInput(self, idx) -> itkVectorImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_cast(obj)

# Register itkImageToImageFilterVIF3ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF3ISS3_swigregister(itkImageToImageFilterVIF3ISS3)
class itkImageToImageFilterVIF3IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterVIF3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF3
        GetInput(self, idx) -> itkVectorImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_cast(obj)

# Register itkImageToImageFilterVIF3IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUC3_swigregister(itkImageToImageFilterVIF3IUC3)
class itkImageToImageFilterVIF3IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterVIF3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF3
        GetInput(self, idx) -> itkVectorImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_cast(obj)

# Register itkImageToImageFilterVIF3IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF3IUS3_swigregister(itkImageToImageFilterVIF3IUS3)
class itkImageToImageFilterVIF4ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterVIF4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF4
        GetInput(self, idx) -> itkVectorImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4ID4_cast(obj)

# Register itkImageToImageFilterVIF4ID4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF4ID4_swigregister(itkImageToImageFilterVIF4ID4)
class itkImageToImageFilterVIF4IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterVIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF4
        GetInput(self, idx) -> itkVectorImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IF4_cast(obj)

# Register itkImageToImageFilterVIF4IF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF4IF4_swigregister(itkImageToImageFilterVIF4IF4)
class itkImageToImageFilterVIF4ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterVIF4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF4
        GetInput(self, idx) -> itkVectorImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4ISS4_cast(obj)

# Register itkImageToImageFilterVIF4ISS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF4ISS4_swigregister(itkImageToImageFilterVIF4ISS4)
class itkImageToImageFilterVIF4IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterVIF4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF4
        GetInput(self, idx) -> itkVectorImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IUC4_cast(obj)

# Register itkImageToImageFilterVIF4IUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF4IUC4_swigregister(itkImageToImageFilterVIF4IUC4)
class itkImageToImageFilterVIF4IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterVIF4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF4
        GetInput(self, idx) -> itkVectorImageF4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIF4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIF4IUS4_cast(obj)

# Register itkImageToImageFilterVIF4IUS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIF4IUS4_swigregister(itkImageToImageFilterVIF4IUS4)
class itkImageToImageFilterVISS2ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterVISS2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageSS2
        GetInput(self, idx) -> itkVectorImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVISS2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_cast(obj)

# Register itkImageToImageFilterVISS2ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ID2_swigregister(itkImageToImageFilterVISS2ID2)
class itkImageToImageFilterVISS2IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterVISS2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageSS2
        GetInput(self, idx) -> itkVectorImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVISS2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_cast(obj)

# Register itkImageToImageFilterVISS2IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IF2_swigregister(itkImageToImageFilterVISS2IF2)
class itkImageToImageFilterVISS2ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterVISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageSS2
        GetInput(self, idx) -> itkVectorImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_cast(obj)

# Register itkImageToImageFilterVISS2ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS2ISS2_swigregister(itkImageToImageFilterVISS2ISS2)
class itkImageToImageFilterVISS2IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterVISS2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageSS2
        GetInput(self, idx) -> itkVectorImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVISS2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_cast(obj)

# Register itkImageToImageFilterVISS2IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUC2_swigregister(itkImageToImageFilterVISS2IUC2)
class itkImageToImageFilterVISS2IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterVISS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageSS2
        GetInput(self, idx) -> itkVectorImageSS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVISS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_cast(obj)

# Register itkImageToImageFilterVISS2IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS2IUS2_swigregister(itkImageToImageFilterVISS2IUS2)
class itkImageToImageFilterVISS3ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterVISS3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageSS3
        GetInput(self, idx) -> itkVectorImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVISS3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_cast(obj)

# Register itkImageToImageFilterVISS3ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ID3_swigregister(itkImageToImageFilterVISS3ID3)
class itkImageToImageFilterVISS3IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterVISS3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageSS3
        GetInput(self, idx) -> itkVectorImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVISS3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_cast(obj)

# Register itkImageToImageFilterVISS3IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IF3_swigregister(itkImageToImageFilterVISS3IF3)
class itkImageToImageFilterVISS3ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterVISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageSS3
        GetInput(self, idx) -> itkVectorImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_cast(obj)

# Register itkImageToImageFilterVISS3ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS3ISS3_swigregister(itkImageToImageFilterVISS3ISS3)
class itkImageToImageFilterVISS3IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterVISS3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageSS3
        GetInput(self, idx) -> itkVectorImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVISS3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_cast(obj)

# Register itkImageToImageFilterVISS3IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUC3_swigregister(itkImageToImageFilterVISS3IUC3)
class itkImageToImageFilterVISS3IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterVISS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageSS3
        GetInput(self, idx) -> itkVectorImageSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVISS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_cast(obj)

# Register itkImageToImageFilterVISS3IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS3IUS3_swigregister(itkImageToImageFilterVISS3IUS3)
class itkImageToImageFilterVISS4ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterVISS4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageSS4
        GetInput(self, idx) -> itkVectorImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVISS4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4ID4_cast(obj)

# Register itkImageToImageFilterVISS4ID4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS4ID4_swigregister(itkImageToImageFilterVISS4ID4)
class itkImageToImageFilterVISS4IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterVISS4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageSS4
        GetInput(self, idx) -> itkVectorImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVISS4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IF4_cast(obj)

# Register itkImageToImageFilterVISS4IF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS4IF4_swigregister(itkImageToImageFilterVISS4IF4)
class itkImageToImageFilterVISS4ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterVISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageSS4
        GetInput(self, idx) -> itkVectorImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4ISS4_cast(obj)

# Register itkImageToImageFilterVISS4ISS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS4ISS4_swigregister(itkImageToImageFilterVISS4ISS4)
class itkImageToImageFilterVISS4IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterVISS4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageSS4
        GetInput(self, idx) -> itkVectorImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVISS4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IUC4_cast(obj)

# Register itkImageToImageFilterVISS4IUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS4IUC4_swigregister(itkImageToImageFilterVISS4IUC4)
class itkImageToImageFilterVISS4IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterVISS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageSS4
        GetInput(self, idx) -> itkVectorImageSS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageSS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVISS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVISS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVISS4IUS4_cast(obj)

# Register itkImageToImageFilterVISS4IUS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVISS4IUS4_swigregister(itkImageToImageFilterVISS4IUS4)
class itkImageToImageFilterVIUC2ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterVIUC2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUC2
        GetInput(self, idx) -> itkVectorImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUC2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_cast(obj)

# Register itkImageToImageFilterVIUC2ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ID2_swigregister(itkImageToImageFilterVIUC2ID2)
class itkImageToImageFilterVIUC2IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterVIUC2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUC2
        GetInput(self, idx) -> itkVectorImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUC2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_cast(obj)

# Register itkImageToImageFilterVIUC2IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IF2_swigregister(itkImageToImageFilterVIUC2IF2)
class itkImageToImageFilterVIUC2ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterVIUC2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUC2
        GetInput(self, idx) -> itkVectorImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUC2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_cast(obj)

# Register itkImageToImageFilterVIUC2ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2ISS2_swigregister(itkImageToImageFilterVIUC2ISS2)
class itkImageToImageFilterVIUC2IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterVIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUC2
        GetInput(self, idx) -> itkVectorImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_cast(obj)

# Register itkImageToImageFilterVIUC2IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUC2_swigregister(itkImageToImageFilterVIUC2IUC2)
class itkImageToImageFilterVIUC2IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterVIUC2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUC2
        GetInput(self, idx) -> itkVectorImageUC2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUC2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_cast(obj)

# Register itkImageToImageFilterVIUC2IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC2IUS2_swigregister(itkImageToImageFilterVIUC2IUS2)
class itkImageToImageFilterVIUC3ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterVIUC3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUC3
        GetInput(self, idx) -> itkVectorImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUC3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_cast(obj)

# Register itkImageToImageFilterVIUC3ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ID3_swigregister(itkImageToImageFilterVIUC3ID3)
class itkImageToImageFilterVIUC3IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterVIUC3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUC3
        GetInput(self, idx) -> itkVectorImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUC3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_cast(obj)

# Register itkImageToImageFilterVIUC3IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IF3_swigregister(itkImageToImageFilterVIUC3IF3)
class itkImageToImageFilterVIUC3ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterVIUC3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUC3
        GetInput(self, idx) -> itkVectorImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUC3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_cast(obj)

# Register itkImageToImageFilterVIUC3ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3ISS3_swigregister(itkImageToImageFilterVIUC3ISS3)
class itkImageToImageFilterVIUC3IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterVIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUC3
        GetInput(self, idx) -> itkVectorImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_cast(obj)

# Register itkImageToImageFilterVIUC3IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUC3_swigregister(itkImageToImageFilterVIUC3IUC3)
class itkImageToImageFilterVIUC3IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterVIUC3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUC3
        GetInput(self, idx) -> itkVectorImageUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUC3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_cast(obj)

# Register itkImageToImageFilterVIUC3IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC3IUS3_swigregister(itkImageToImageFilterVIUC3IUS3)
class itkImageToImageFilterVIUC4ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterVIUC4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUC4
        GetInput(self, idx) -> itkVectorImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUC4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4ID4_cast(obj)

# Register itkImageToImageFilterVIUC4ID4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC4ID4_swigregister(itkImageToImageFilterVIUC4ID4)
class itkImageToImageFilterVIUC4IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterVIUC4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUC4
        GetInput(self, idx) -> itkVectorImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUC4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IF4_cast(obj)

# Register itkImageToImageFilterVIUC4IF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IF4_swigregister(itkImageToImageFilterVIUC4IF4)
class itkImageToImageFilterVIUC4ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterVIUC4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUC4
        GetInput(self, idx) -> itkVectorImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUC4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4ISS4_cast(obj)

# Register itkImageToImageFilterVIUC4ISS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC4ISS4_swigregister(itkImageToImageFilterVIUC4ISS4)
class itkImageToImageFilterVIUC4IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterVIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUC4
        GetInput(self, idx) -> itkVectorImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IUC4_cast(obj)

# Register itkImageToImageFilterVIUC4IUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IUC4_swigregister(itkImageToImageFilterVIUC4IUC4)
class itkImageToImageFilterVIUC4IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterVIUC4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUC4
        GetInput(self, idx) -> itkVectorImageUC4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUC4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUC4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUC4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IUS4_cast(obj)

# Register itkImageToImageFilterVIUC4IUS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUC4IUS4_swigregister(itkImageToImageFilterVIUC4IUS4)
class itkImageToImageFilterVIUS2ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterVIUS2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUS2
        GetInput(self, idx) -> itkVectorImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUS2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_cast(obj)

# Register itkImageToImageFilterVIUS2ID2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ID2_swigregister(itkImageToImageFilterVIUS2ID2)
class itkImageToImageFilterVIUS2IF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterVIUS2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUS2
        GetInput(self, idx) -> itkVectorImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUS2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_cast(obj)

# Register itkImageToImageFilterVIUS2IF2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IF2_swigregister(itkImageToImageFilterVIUS2IF2)
class itkImageToImageFilterVIUS2ISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterVIUS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUS2
        GetInput(self, idx) -> itkVectorImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_cast(obj)

# Register itkImageToImageFilterVIUS2ISS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2ISS2_swigregister(itkImageToImageFilterVIUS2ISS2)
class itkImageToImageFilterVIUS2IUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterVIUS2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUS2
        GetInput(self, idx) -> itkVectorImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUS2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_cast(obj)

# Register itkImageToImageFilterVIUS2IUC2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUC2_swigregister(itkImageToImageFilterVIUS2IUC2)
class itkImageToImageFilterVIUS2IUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterVIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUS2
        GetInput(self, idx) -> itkVectorImageUS2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS2 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_cast(obj)

# Register itkImageToImageFilterVIUS2IUS2 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS2IUS2_swigregister(itkImageToImageFilterVIUS2IUS2)
class itkImageToImageFilterVIUS3ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterVIUS3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUS3
        GetInput(self, idx) -> itkVectorImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUS3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_cast(obj)

# Register itkImageToImageFilterVIUS3ID3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ID3_swigregister(itkImageToImageFilterVIUS3ID3)
class itkImageToImageFilterVIUS3IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterVIUS3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUS3
        GetInput(self, idx) -> itkVectorImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUS3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_cast(obj)

# Register itkImageToImageFilterVIUS3IF3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IF3_swigregister(itkImageToImageFilterVIUS3IF3)
class itkImageToImageFilterVIUS3ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterVIUS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUS3
        GetInput(self, idx) -> itkVectorImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_cast(obj)

# Register itkImageToImageFilterVIUS3ISS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3ISS3_swigregister(itkImageToImageFilterVIUS3ISS3)
class itkImageToImageFilterVIUS3IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterVIUS3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUS3
        GetInput(self, idx) -> itkVectorImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUS3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_cast(obj)

# Register itkImageToImageFilterVIUS3IUC3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUC3_swigregister(itkImageToImageFilterVIUS3IUC3)
class itkImageToImageFilterVIUS3IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterVIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUS3
        GetInput(self, idx) -> itkVectorImageUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS3 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_cast(obj)

# Register itkImageToImageFilterVIUS3IUS3 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS3IUS3_swigregister(itkImageToImageFilterVIUS3IUS3)
class itkImageToImageFilterVIUS4ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterVIUS4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUS4
        GetInput(self, idx) -> itkVectorImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUS4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4ID4_cast(obj)

# Register itkImageToImageFilterVIUS4ID4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS4ID4_swigregister(itkImageToImageFilterVIUS4ID4)
class itkImageToImageFilterVIUS4IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterVIUS4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUS4
        GetInput(self, idx) -> itkVectorImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUS4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IF4_cast(obj)

# Register itkImageToImageFilterVIUS4IF4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IF4_swigregister(itkImageToImageFilterVIUS4IF4)
class itkImageToImageFilterVIUS4ISS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImageToImageFilterVIUS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4ISS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUS4
        GetInput(self, idx) -> itkVectorImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4ISS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4ISS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4ISS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4ISS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4ISS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4ISS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4ISS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4ISS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4ISS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4ISS4_cast(obj)

# Register itkImageToImageFilterVIUS4ISS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS4ISS4_swigregister(itkImageToImageFilterVIUS4ISS4)
class itkImageToImageFilterVIUS4IUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImageToImageFilterVIUS4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IUC4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUS4
        GetInput(self, idx) -> itkVectorImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IUC4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IUC4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IUC4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IUC4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IUC4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IUC4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IUC4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IUC4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IUC4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUS4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IUC4_cast(obj)

# Register itkImageToImageFilterVIUS4IUC4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IUC4_swigregister(itkImageToImageFilterVIUS4IUC4)
class itkImageToImageFilterVIUS4IUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImageToImageFilterVIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS4 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IUS4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageUS4
        GetInput(self, idx) -> itkVectorImageUS4

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IUS4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IUS4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IUS4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageUS4 const *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IUS4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IUS4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IUS4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IUS4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IUS4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IUS4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterBPython.delete_itkImageToImageFilterVIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IUS4_cast(obj)

# Register itkImageToImageFilterVIUS4IUS4 in _itkImageToImageFilterBPython:
_itkImageToImageFilterBPython.itkImageToImageFilterVIUS4IUS4_swigregister(itkImageToImageFilterVIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def image_to_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ImageToImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ImageToImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def image_to_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKCommon.ImageToImageFilter
    image_to_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_to_image_filter.__doc__ = filter_object.__doc__



