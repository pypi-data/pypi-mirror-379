# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSymmetricSecondRankTensorPython
else:
    import _itkSymmetricSecondRankTensorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkMatrixPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
class itkSymmetricSecondRankTensorD2(itk.itkFixedArrayPython.itkFixedArrayD3):
    r"""Proxy of C++ itkSymmetricSecondRankTensorD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, r):
        r"""
        __add__(self, r) -> itkSymmetricSecondRankTensorD2

        Parameters
        ----------
        r: itkSymmetricSecondRankTensorD2 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___add__(self, r)

    def __sub__(self, r):
        r"""
        __sub__(self, r) -> itkSymmetricSecondRankTensorD2

        Parameters
        ----------
        r: itkSymmetricSecondRankTensorD2 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___sub__(self, r)

    def __iadd__(self, r):
        r"""
        __iadd__(self, r) -> itkSymmetricSecondRankTensorD2

        Parameters
        ----------
        r: itkSymmetricSecondRankTensorD2 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___iadd__(self, r)

    def __isub__(self, r):
        r"""
        __isub__(self, r) -> itkSymmetricSecondRankTensorD2

        Parameters
        ----------
        r: itkSymmetricSecondRankTensorD2 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___isub__(self, r)

    def __mul__(self, r):
        r"""
        __mul__(self, r) -> itkSymmetricSecondRankTensorD2

        Parameters
        ----------
        r: double const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___mul__(self, r)

    def __truediv__(self, *args):
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___truediv__(self, *args)
    __div__ = __truediv__



    def __imul__(self, r):
        r"""
        __imul__(self, r) -> itkSymmetricSecondRankTensorD2

        Parameters
        ----------
        r: double const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___imul__(self, r)

    def __itruediv__(self, *args):
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___itruediv__(self, *args)
    __idiv__ = __itruediv__



    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_GetNumberOfComponents()

    def GetNthComponent(self, c):
        r"""
        GetNthComponent(self, c) -> double

        Parameters
        ----------
        c: int

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_GetNthComponent(self, c)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: double const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_SetNthComponent(self, c, v)

    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> double

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> double const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___call__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_SetIdentity(self)

    def GetTrace(self):
        r"""GetTrace(self) -> double"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_GetTrace(self)

    def ComputeEigenValues(self, eigenValues):
        r"""
        ComputeEigenValues(self, eigenValues)

        Parameters
        ----------
        eigenValues: itkFixedArrayD2 &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_ComputeEigenValues(self, eigenValues)

    def ComputeEigenAnalysis(self, eigenValues, eigenVectors):
        r"""
        ComputeEigenAnalysis(self, eigenValues, eigenVectors)

        Parameters
        ----------
        eigenValues: itkFixedArrayD2 &
        eigenVectors: itkMatrixD22 &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_ComputeEigenAnalysis(self, eigenValues, eigenVectors)

    def PreMultiply(self, m):
        r"""
        PreMultiply(self, m) -> itkMatrixD22

        Parameters
        ----------
        m: itkMatrixD22 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_PreMultiply(self, m)

    def PostMultiply(self, m):
        r"""
        PostMultiply(self, m) -> itkMatrixD22

        Parameters
        ----------
        m: itkMatrixD22 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_PostMultiply(self, m)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkSymmetricSecondRankTensorD2
        __init__(self, r) -> itkSymmetricSecondRankTensorD2

        Parameters
        ----------
        r: double const &

        __init__(self, r) -> itkSymmetricSecondRankTensorD2

        Parameters
        ----------
        r: double const *

        __init__(self, arg0) -> itkSymmetricSecondRankTensorD2

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorD2 const &

        """
        _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_swiginit(self, _itkSymmetricSecondRankTensorPython.new_itkSymmetricSecondRankTensorD2(*args))
    __swig_destroy__ = _itkSymmetricSecondRankTensorPython.delete_itkSymmetricSecondRankTensorD2

# Register itkSymmetricSecondRankTensorD2 in _itkSymmetricSecondRankTensorPython:
_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_swigregister(itkSymmetricSecondRankTensorD2)
class itkSymmetricSecondRankTensorD3(itk.itkFixedArrayPython.itkFixedArrayD6):
    r"""Proxy of C++ itkSymmetricSecondRankTensorD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, r):
        r"""
        __add__(self, r) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        r: itkSymmetricSecondRankTensorD3 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___add__(self, r)

    def __sub__(self, r):
        r"""
        __sub__(self, r) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        r: itkSymmetricSecondRankTensorD3 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___sub__(self, r)

    def __iadd__(self, r):
        r"""
        __iadd__(self, r) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        r: itkSymmetricSecondRankTensorD3 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___iadd__(self, r)

    def __isub__(self, r):
        r"""
        __isub__(self, r) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        r: itkSymmetricSecondRankTensorD3 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___isub__(self, r)

    def __mul__(self, r):
        r"""
        __mul__(self, r) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        r: double const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___mul__(self, r)

    def __truediv__(self, *args):
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___truediv__(self, *args)
    __div__ = __truediv__



    def __imul__(self, r):
        r"""
        __imul__(self, r) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        r: double const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___imul__(self, r)

    def __itruediv__(self, *args):
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___itruediv__(self, *args)
    __idiv__ = __itruediv__



    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_GetNumberOfComponents()

    def GetNthComponent(self, c):
        r"""
        GetNthComponent(self, c) -> double

        Parameters
        ----------
        c: int

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_GetNthComponent(self, c)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: double const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_SetNthComponent(self, c, v)

    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> double

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> double const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___call__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_SetIdentity(self)

    def GetTrace(self):
        r"""GetTrace(self) -> double"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_GetTrace(self)

    def ComputeEigenValues(self, eigenValues):
        r"""
        ComputeEigenValues(self, eigenValues)

        Parameters
        ----------
        eigenValues: itkFixedArrayD3 &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_ComputeEigenValues(self, eigenValues)

    def ComputeEigenAnalysis(self, eigenValues, eigenVectors):
        r"""
        ComputeEigenAnalysis(self, eigenValues, eigenVectors)

        Parameters
        ----------
        eigenValues: itkFixedArrayD3 &
        eigenVectors: itkMatrixD33 &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_ComputeEigenAnalysis(self, eigenValues, eigenVectors)

    def PreMultiply(self, m):
        r"""
        PreMultiply(self, m) -> itkMatrixD33

        Parameters
        ----------
        m: itkMatrixD33 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_PreMultiply(self, m)

    def PostMultiply(self, m):
        r"""
        PostMultiply(self, m) -> itkMatrixD33

        Parameters
        ----------
        m: itkMatrixD33 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_PostMultiply(self, m)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkSymmetricSecondRankTensorD3
        __init__(self, r) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        r: double const &

        __init__(self, r) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        r: double const *

        __init__(self, arg0) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorD3 const &

        """
        _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_swiginit(self, _itkSymmetricSecondRankTensorPython.new_itkSymmetricSecondRankTensorD3(*args))
    __swig_destroy__ = _itkSymmetricSecondRankTensorPython.delete_itkSymmetricSecondRankTensorD3

# Register itkSymmetricSecondRankTensorD3 in _itkSymmetricSecondRankTensorPython:
_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_swigregister(itkSymmetricSecondRankTensorD3)
class itkSymmetricSecondRankTensorD4(itk.itkFixedArrayPython.itkFixedArrayD10):
    r"""Proxy of C++ itkSymmetricSecondRankTensorD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, r):
        r"""
        __add__(self, r) -> itkSymmetricSecondRankTensorD4

        Parameters
        ----------
        r: itkSymmetricSecondRankTensorD4 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD4___add__(self, r)

    def __sub__(self, r):
        r"""
        __sub__(self, r) -> itkSymmetricSecondRankTensorD4

        Parameters
        ----------
        r: itkSymmetricSecondRankTensorD4 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD4___sub__(self, r)

    def __iadd__(self, r):
        r"""
        __iadd__(self, r) -> itkSymmetricSecondRankTensorD4

        Parameters
        ----------
        r: itkSymmetricSecondRankTensorD4 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD4___iadd__(self, r)

    def __isub__(self, r):
        r"""
        __isub__(self, r) -> itkSymmetricSecondRankTensorD4

        Parameters
        ----------
        r: itkSymmetricSecondRankTensorD4 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD4___isub__(self, r)

    def __mul__(self, r):
        r"""
        __mul__(self, r) -> itkSymmetricSecondRankTensorD4

        Parameters
        ----------
        r: double const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD4___mul__(self, r)

    def __truediv__(self, *args):
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD4___truediv__(self, *args)
    __div__ = __truediv__



    def __imul__(self, r):
        r"""
        __imul__(self, r) -> itkSymmetricSecondRankTensorD4

        Parameters
        ----------
        r: double const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD4___imul__(self, r)

    def __itruediv__(self, *args):
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD4___itruediv__(self, *args)
    __idiv__ = __itruediv__



    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD4_GetNumberOfComponents()

    def GetNthComponent(self, c):
        r"""
        GetNthComponent(self, c) -> double

        Parameters
        ----------
        c: int

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD4_GetNthComponent(self, c)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: double const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD4_SetNthComponent(self, c, v)

    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> double

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> double const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD4___call__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD4_SetIdentity(self)

    def GetTrace(self):
        r"""GetTrace(self) -> double"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD4_GetTrace(self)

    def ComputeEigenValues(self, eigenValues):
        r"""
        ComputeEigenValues(self, eigenValues)

        Parameters
        ----------
        eigenValues: itkFixedArrayD4 &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD4_ComputeEigenValues(self, eigenValues)

    def ComputeEigenAnalysis(self, eigenValues, eigenVectors):
        r"""
        ComputeEigenAnalysis(self, eigenValues, eigenVectors)

        Parameters
        ----------
        eigenValues: itkFixedArrayD4 &
        eigenVectors: itkMatrixD44 &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD4_ComputeEigenAnalysis(self, eigenValues, eigenVectors)

    def PreMultiply(self, m):
        r"""
        PreMultiply(self, m) -> itkMatrixD44

        Parameters
        ----------
        m: itkMatrixD44 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD4_PreMultiply(self, m)

    def PostMultiply(self, m):
        r"""
        PostMultiply(self, m) -> itkMatrixD44

        Parameters
        ----------
        m: itkMatrixD44 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD4_PostMultiply(self, m)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkSymmetricSecondRankTensorD4
        __init__(self, r) -> itkSymmetricSecondRankTensorD4

        Parameters
        ----------
        r: double const &

        __init__(self, r) -> itkSymmetricSecondRankTensorD4

        Parameters
        ----------
        r: double const *

        __init__(self, arg0) -> itkSymmetricSecondRankTensorD4

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorD4 const &

        """
        _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD4_swiginit(self, _itkSymmetricSecondRankTensorPython.new_itkSymmetricSecondRankTensorD4(*args))
    __swig_destroy__ = _itkSymmetricSecondRankTensorPython.delete_itkSymmetricSecondRankTensorD4

# Register itkSymmetricSecondRankTensorD4 in _itkSymmetricSecondRankTensorPython:
_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD4_swigregister(itkSymmetricSecondRankTensorD4)
class itkSymmetricSecondRankTensorF2(itk.itkFixedArrayPython.itkFixedArrayF3):
    r"""Proxy of C++ itkSymmetricSecondRankTensorF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, r):
        r"""
        __add__(self, r) -> itkSymmetricSecondRankTensorF2

        Parameters
        ----------
        r: itkSymmetricSecondRankTensorF2 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___add__(self, r)

    def __sub__(self, r):
        r"""
        __sub__(self, r) -> itkSymmetricSecondRankTensorF2

        Parameters
        ----------
        r: itkSymmetricSecondRankTensorF2 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___sub__(self, r)

    def __iadd__(self, r):
        r"""
        __iadd__(self, r) -> itkSymmetricSecondRankTensorF2

        Parameters
        ----------
        r: itkSymmetricSecondRankTensorF2 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___iadd__(self, r)

    def __isub__(self, r):
        r"""
        __isub__(self, r) -> itkSymmetricSecondRankTensorF2

        Parameters
        ----------
        r: itkSymmetricSecondRankTensorF2 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___isub__(self, r)

    def __mul__(self, r):
        r"""
        __mul__(self, r) -> itkSymmetricSecondRankTensorF2

        Parameters
        ----------
        r: double const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___mul__(self, r)

    def __truediv__(self, *args):
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___truediv__(self, *args)
    __div__ = __truediv__



    def __imul__(self, r):
        r"""
        __imul__(self, r) -> itkSymmetricSecondRankTensorF2

        Parameters
        ----------
        r: double const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___imul__(self, r)

    def __itruediv__(self, *args):
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___itruediv__(self, *args)
    __idiv__ = __itruediv__



    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_GetNumberOfComponents()

    def GetNthComponent(self, c):
        r"""
        GetNthComponent(self, c) -> float

        Parameters
        ----------
        c: int

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_GetNthComponent(self, c)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: float const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_SetNthComponent(self, c, v)

    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> float

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> float const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___call__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_SetIdentity(self)

    def GetTrace(self):
        r"""GetTrace(self) -> double"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_GetTrace(self)

    def ComputeEigenValues(self, eigenValues):
        r"""
        ComputeEigenValues(self, eigenValues)

        Parameters
        ----------
        eigenValues: itkFixedArrayF2 &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_ComputeEigenValues(self, eigenValues)

    def ComputeEigenAnalysis(self, eigenValues, eigenVectors):
        r"""
        ComputeEigenAnalysis(self, eigenValues, eigenVectors)

        Parameters
        ----------
        eigenValues: itkFixedArrayF2 &
        eigenVectors: itkMatrixF22 &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_ComputeEigenAnalysis(self, eigenValues, eigenVectors)

    def PreMultiply(self, m):
        r"""
        PreMultiply(self, m) -> itkMatrixF22

        Parameters
        ----------
        m: itkMatrixF22 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_PreMultiply(self, m)

    def PostMultiply(self, m):
        r"""
        PostMultiply(self, m) -> itkMatrixF22

        Parameters
        ----------
        m: itkMatrixF22 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_PostMultiply(self, m)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkSymmetricSecondRankTensorF2
        __init__(self, r) -> itkSymmetricSecondRankTensorF2

        Parameters
        ----------
        r: float const &

        __init__(self, r) -> itkSymmetricSecondRankTensorF2

        Parameters
        ----------
        r: float const *

        __init__(self, arg0) -> itkSymmetricSecondRankTensorF2

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorF2 const &

        """
        _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_swiginit(self, _itkSymmetricSecondRankTensorPython.new_itkSymmetricSecondRankTensorF2(*args))
    __swig_destroy__ = _itkSymmetricSecondRankTensorPython.delete_itkSymmetricSecondRankTensorF2

# Register itkSymmetricSecondRankTensorF2 in _itkSymmetricSecondRankTensorPython:
_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_swigregister(itkSymmetricSecondRankTensorF2)
class itkSymmetricSecondRankTensorF3(itk.itkFixedArrayPython.itkFixedArrayF6):
    r"""Proxy of C++ itkSymmetricSecondRankTensorF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, r):
        r"""
        __add__(self, r) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        r: itkSymmetricSecondRankTensorF3 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___add__(self, r)

    def __sub__(self, r):
        r"""
        __sub__(self, r) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        r: itkSymmetricSecondRankTensorF3 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___sub__(self, r)

    def __iadd__(self, r):
        r"""
        __iadd__(self, r) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        r: itkSymmetricSecondRankTensorF3 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___iadd__(self, r)

    def __isub__(self, r):
        r"""
        __isub__(self, r) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        r: itkSymmetricSecondRankTensorF3 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___isub__(self, r)

    def __mul__(self, r):
        r"""
        __mul__(self, r) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        r: double const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___mul__(self, r)

    def __truediv__(self, *args):
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___truediv__(self, *args)
    __div__ = __truediv__



    def __imul__(self, r):
        r"""
        __imul__(self, r) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        r: double const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___imul__(self, r)

    def __itruediv__(self, *args):
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___itruediv__(self, *args)
    __idiv__ = __itruediv__



    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_GetNumberOfComponents()

    def GetNthComponent(self, c):
        r"""
        GetNthComponent(self, c) -> float

        Parameters
        ----------
        c: int

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_GetNthComponent(self, c)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: float const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_SetNthComponent(self, c, v)

    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> float

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> float const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___call__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_SetIdentity(self)

    def GetTrace(self):
        r"""GetTrace(self) -> double"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_GetTrace(self)

    def ComputeEigenValues(self, eigenValues):
        r"""
        ComputeEigenValues(self, eigenValues)

        Parameters
        ----------
        eigenValues: itkFixedArrayF3 &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_ComputeEigenValues(self, eigenValues)

    def ComputeEigenAnalysis(self, eigenValues, eigenVectors):
        r"""
        ComputeEigenAnalysis(self, eigenValues, eigenVectors)

        Parameters
        ----------
        eigenValues: itkFixedArrayF3 &
        eigenVectors: itkMatrixF33 &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_ComputeEigenAnalysis(self, eigenValues, eigenVectors)

    def PreMultiply(self, m):
        r"""
        PreMultiply(self, m) -> itkMatrixF33

        Parameters
        ----------
        m: itkMatrixF33 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_PreMultiply(self, m)

    def PostMultiply(self, m):
        r"""
        PostMultiply(self, m) -> itkMatrixF33

        Parameters
        ----------
        m: itkMatrixF33 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_PostMultiply(self, m)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkSymmetricSecondRankTensorF3
        __init__(self, r) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        r: float const &

        __init__(self, r) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        r: float const *

        __init__(self, arg0) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorF3 const &

        """
        _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_swiginit(self, _itkSymmetricSecondRankTensorPython.new_itkSymmetricSecondRankTensorF3(*args))
    __swig_destroy__ = _itkSymmetricSecondRankTensorPython.delete_itkSymmetricSecondRankTensorF3

# Register itkSymmetricSecondRankTensorF3 in _itkSymmetricSecondRankTensorPython:
_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_swigregister(itkSymmetricSecondRankTensorF3)
class itkSymmetricSecondRankTensorF4(itk.itkFixedArrayPython.itkFixedArrayF10):
    r"""Proxy of C++ itkSymmetricSecondRankTensorF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, r):
        r"""
        __add__(self, r) -> itkSymmetricSecondRankTensorF4

        Parameters
        ----------
        r: itkSymmetricSecondRankTensorF4 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF4___add__(self, r)

    def __sub__(self, r):
        r"""
        __sub__(self, r) -> itkSymmetricSecondRankTensorF4

        Parameters
        ----------
        r: itkSymmetricSecondRankTensorF4 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF4___sub__(self, r)

    def __iadd__(self, r):
        r"""
        __iadd__(self, r) -> itkSymmetricSecondRankTensorF4

        Parameters
        ----------
        r: itkSymmetricSecondRankTensorF4 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF4___iadd__(self, r)

    def __isub__(self, r):
        r"""
        __isub__(self, r) -> itkSymmetricSecondRankTensorF4

        Parameters
        ----------
        r: itkSymmetricSecondRankTensorF4 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF4___isub__(self, r)

    def __mul__(self, r):
        r"""
        __mul__(self, r) -> itkSymmetricSecondRankTensorF4

        Parameters
        ----------
        r: double const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF4___mul__(self, r)

    def __truediv__(self, *args):
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF4___truediv__(self, *args)
    __div__ = __truediv__



    def __imul__(self, r):
        r"""
        __imul__(self, r) -> itkSymmetricSecondRankTensorF4

        Parameters
        ----------
        r: double const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF4___imul__(self, r)

    def __itruediv__(self, *args):
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF4___itruediv__(self, *args)
    __idiv__ = __itruediv__



    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF4_GetNumberOfComponents()

    def GetNthComponent(self, c):
        r"""
        GetNthComponent(self, c) -> float

        Parameters
        ----------
        c: int

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF4_GetNthComponent(self, c)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: float const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF4_SetNthComponent(self, c, v)

    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> float

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> float const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF4___call__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF4_SetIdentity(self)

    def GetTrace(self):
        r"""GetTrace(self) -> double"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF4_GetTrace(self)

    def ComputeEigenValues(self, eigenValues):
        r"""
        ComputeEigenValues(self, eigenValues)

        Parameters
        ----------
        eigenValues: itkFixedArrayF4 &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF4_ComputeEigenValues(self, eigenValues)

    def ComputeEigenAnalysis(self, eigenValues, eigenVectors):
        r"""
        ComputeEigenAnalysis(self, eigenValues, eigenVectors)

        Parameters
        ----------
        eigenValues: itkFixedArrayF4 &
        eigenVectors: itkMatrixF44 &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF4_ComputeEigenAnalysis(self, eigenValues, eigenVectors)

    def PreMultiply(self, m):
        r"""
        PreMultiply(self, m) -> itkMatrixF44

        Parameters
        ----------
        m: itkMatrixF44 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF4_PreMultiply(self, m)

    def PostMultiply(self, m):
        r"""
        PostMultiply(self, m) -> itkMatrixF44

        Parameters
        ----------
        m: itkMatrixF44 const &

        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF4_PostMultiply(self, m)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkSymmetricSecondRankTensorF4
        __init__(self, r) -> itkSymmetricSecondRankTensorF4

        Parameters
        ----------
        r: float const &

        __init__(self, r) -> itkSymmetricSecondRankTensorF4

        Parameters
        ----------
        r: float const *

        __init__(self, arg0) -> itkSymmetricSecondRankTensorF4

        Parameters
        ----------
        arg0: itkSymmetricSecondRankTensorF4 const &

        """
        _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF4_swiginit(self, _itkSymmetricSecondRankTensorPython.new_itkSymmetricSecondRankTensorF4(*args))
    __swig_destroy__ = _itkSymmetricSecondRankTensorPython.delete_itkSymmetricSecondRankTensorF4

# Register itkSymmetricSecondRankTensorF4 in _itkSymmetricSecondRankTensorPython:
_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF4_swigregister(itkSymmetricSecondRankTensorF4)

