# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageGridPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkOrientImageFilterPython
else:
    import _itkOrientImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterBPython
import itk.itkAnatomicalOrientationPython

def itkOrientImageFilterICD3ICD3_New():
    return itkOrientImageFilterICD3ICD3.New()

class itkOrientImageFilterICD3ICD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3):
    r"""Proxy of C++ itkOrientImageFilterICD3ICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOrientImageFilterICD3ICD3_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICD3ICD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOrientImageFilterICD3ICD3_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICD3ICD3_Clone(self)

    def GetGivenCoordinateOrientation(self):
        r"""GetGivenCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICD3ICD3_GetGivenCoordinateOrientation(self)

    def SetGivenCoordinateOrientation(self, newCode):
        r"""
        SetGivenCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICD3ICD3_SetGivenCoordinateOrientation(self, newCode)

    def SetGivenCoordinateDirection(self, GivenDirection):
        r"""
        SetGivenCoordinateDirection(self, GivenDirection)

        Parameters
        ----------
        GivenDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICD3ICD3_SetGivenCoordinateDirection(self, GivenDirection)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICD3ICD3_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, newCode):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICD3ICD3_SetDesiredCoordinateOrientation(self, newCode)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICD3ICD3_SetDesiredCoordinateDirection(self, DesiredDirection)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICD3ICD3_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICD3ICD3_UseImageDirectionOff(self)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICD3ICD3_GetUseImageDirection(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICD3ICD3_SetUseImageDirection(self, _arg)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICD3ICD3_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICD3ICD3_GetFlipAxes(self)

    def SetDesiredCoordinateOrientationToAxial(self):
        r"""SetDesiredCoordinateOrientationToAxial(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICD3ICD3_SetDesiredCoordinateOrientationToAxial(self)

    def SetDesiredCoordinateOrientationToCoronal(self):
        r"""SetDesiredCoordinateOrientationToCoronal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICD3ICD3_SetDesiredCoordinateOrientationToCoronal(self)

    def SetDesiredCoordinateOrientationToSagittal(self):
        r"""SetDesiredCoordinateOrientationToSagittal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICD3ICD3_SetDesiredCoordinateOrientationToSagittal(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICD3ICD3_GenerateOutputInformation(self)
    InputConvertibleToOutput = _itkOrientImageFilterPython.itkOrientImageFilterICD3ICD3_InputConvertibleToOutput
    
    SameDimension = _itkOrientImageFilterPython.itkOrientImageFilterICD3ICD3_SameDimension
    
    DimensionShouldBe3 = _itkOrientImageFilterPython.itkOrientImageFilterICD3ICD3_DimensionShouldBe3
    
    __swig_destroy__ = _itkOrientImageFilterPython.delete_itkOrientImageFilterICD3ICD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOrientImageFilterICD3ICD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICD3ICD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOrientImageFilterICD3ICD3

        Create a new object of the class itkOrientImageFilterICD3ICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOrientImageFilterICD3ICD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOrientImageFilterICD3ICD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOrientImageFilterICD3ICD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOrientImageFilterICD3ICD3 in _itkOrientImageFilterPython:
_itkOrientImageFilterPython.itkOrientImageFilterICD3ICD3_swigregister(itkOrientImageFilterICD3ICD3)

def itkOrientImageFilterICF3ICF3_New():
    return itkOrientImageFilterICF3ICF3.New()

class itkOrientImageFilterICF3ICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    r"""Proxy of C++ itkOrientImageFilterICF3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOrientImageFilterICF3ICF3_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICF3ICF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOrientImageFilterICF3ICF3_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICF3ICF3_Clone(self)

    def GetGivenCoordinateOrientation(self):
        r"""GetGivenCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICF3ICF3_GetGivenCoordinateOrientation(self)

    def SetGivenCoordinateOrientation(self, newCode):
        r"""
        SetGivenCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICF3ICF3_SetGivenCoordinateOrientation(self, newCode)

    def SetGivenCoordinateDirection(self, GivenDirection):
        r"""
        SetGivenCoordinateDirection(self, GivenDirection)

        Parameters
        ----------
        GivenDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICF3ICF3_SetGivenCoordinateDirection(self, GivenDirection)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICF3ICF3_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, newCode):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICF3ICF3_SetDesiredCoordinateOrientation(self, newCode)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICF3ICF3_SetDesiredCoordinateDirection(self, DesiredDirection)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICF3ICF3_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICF3ICF3_UseImageDirectionOff(self)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICF3ICF3_GetUseImageDirection(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICF3ICF3_SetUseImageDirection(self, _arg)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICF3ICF3_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICF3ICF3_GetFlipAxes(self)

    def SetDesiredCoordinateOrientationToAxial(self):
        r"""SetDesiredCoordinateOrientationToAxial(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICF3ICF3_SetDesiredCoordinateOrientationToAxial(self)

    def SetDesiredCoordinateOrientationToCoronal(self):
        r"""SetDesiredCoordinateOrientationToCoronal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICF3ICF3_SetDesiredCoordinateOrientationToCoronal(self)

    def SetDesiredCoordinateOrientationToSagittal(self):
        r"""SetDesiredCoordinateOrientationToSagittal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICF3ICF3_SetDesiredCoordinateOrientationToSagittal(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICF3ICF3_GenerateOutputInformation(self)
    InputConvertibleToOutput = _itkOrientImageFilterPython.itkOrientImageFilterICF3ICF3_InputConvertibleToOutput
    
    SameDimension = _itkOrientImageFilterPython.itkOrientImageFilterICF3ICF3_SameDimension
    
    DimensionShouldBe3 = _itkOrientImageFilterPython.itkOrientImageFilterICF3ICF3_DimensionShouldBe3
    
    __swig_destroy__ = _itkOrientImageFilterPython.delete_itkOrientImageFilterICF3ICF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOrientImageFilterICF3ICF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICF3ICF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOrientImageFilterICF3ICF3

        Create a new object of the class itkOrientImageFilterICF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOrientImageFilterICF3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOrientImageFilterICF3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOrientImageFilterICF3ICF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOrientImageFilterICF3ICF3 in _itkOrientImageFilterPython:
_itkOrientImageFilterPython.itkOrientImageFilterICF3ICF3_swigregister(itkOrientImageFilterICF3ICF3)

def itkOrientImageFilterICVF23ICVF23_New():
    return itkOrientImageFilterICVF23ICVF23.New()

class itkOrientImageFilterICVF23ICVF23(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF23ICVF23):
    r"""Proxy of C++ itkOrientImageFilterICVF23ICVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOrientImageFilterICVF23ICVF23_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF23ICVF23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOrientImageFilterICVF23ICVF23_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF23ICVF23_Clone(self)

    def GetGivenCoordinateOrientation(self):
        r"""GetGivenCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF23ICVF23_GetGivenCoordinateOrientation(self)

    def SetGivenCoordinateOrientation(self, newCode):
        r"""
        SetGivenCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF23ICVF23_SetGivenCoordinateOrientation(self, newCode)

    def SetGivenCoordinateDirection(self, GivenDirection):
        r"""
        SetGivenCoordinateDirection(self, GivenDirection)

        Parameters
        ----------
        GivenDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF23ICVF23_SetGivenCoordinateDirection(self, GivenDirection)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF23ICVF23_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, newCode):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF23ICVF23_SetDesiredCoordinateOrientation(self, newCode)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF23ICVF23_SetDesiredCoordinateDirection(self, DesiredDirection)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF23ICVF23_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF23ICVF23_UseImageDirectionOff(self)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF23ICVF23_GetUseImageDirection(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF23ICVF23_SetUseImageDirection(self, _arg)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF23ICVF23_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF23ICVF23_GetFlipAxes(self)

    def SetDesiredCoordinateOrientationToAxial(self):
        r"""SetDesiredCoordinateOrientationToAxial(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF23ICVF23_SetDesiredCoordinateOrientationToAxial(self)

    def SetDesiredCoordinateOrientationToCoronal(self):
        r"""SetDesiredCoordinateOrientationToCoronal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF23ICVF23_SetDesiredCoordinateOrientationToCoronal(self)

    def SetDesiredCoordinateOrientationToSagittal(self):
        r"""SetDesiredCoordinateOrientationToSagittal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF23ICVF23_SetDesiredCoordinateOrientationToSagittal(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF23ICVF23_GenerateOutputInformation(self)
    InputConvertibleToOutput = _itkOrientImageFilterPython.itkOrientImageFilterICVF23ICVF23_InputConvertibleToOutput
    
    SameDimension = _itkOrientImageFilterPython.itkOrientImageFilterICVF23ICVF23_SameDimension
    
    DimensionShouldBe3 = _itkOrientImageFilterPython.itkOrientImageFilterICVF23ICVF23_DimensionShouldBe3
    
    __swig_destroy__ = _itkOrientImageFilterPython.delete_itkOrientImageFilterICVF23ICVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOrientImageFilterICVF23ICVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF23ICVF23_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOrientImageFilterICVF23ICVF23

        Create a new object of the class itkOrientImageFilterICVF23ICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOrientImageFilterICVF23ICVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOrientImageFilterICVF23ICVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOrientImageFilterICVF23ICVF23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOrientImageFilterICVF23ICVF23 in _itkOrientImageFilterPython:
_itkOrientImageFilterPython.itkOrientImageFilterICVF23ICVF23_swigregister(itkOrientImageFilterICVF23ICVF23)

def itkOrientImageFilterICVF33ICVF33_New():
    return itkOrientImageFilterICVF33ICVF33.New()

class itkOrientImageFilterICVF33ICVF33(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF33ICVF33):
    r"""Proxy of C++ itkOrientImageFilterICVF33ICVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOrientImageFilterICVF33ICVF33_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF33ICVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOrientImageFilterICVF33ICVF33_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF33ICVF33_Clone(self)

    def GetGivenCoordinateOrientation(self):
        r"""GetGivenCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF33ICVF33_GetGivenCoordinateOrientation(self)

    def SetGivenCoordinateOrientation(self, newCode):
        r"""
        SetGivenCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF33ICVF33_SetGivenCoordinateOrientation(self, newCode)

    def SetGivenCoordinateDirection(self, GivenDirection):
        r"""
        SetGivenCoordinateDirection(self, GivenDirection)

        Parameters
        ----------
        GivenDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF33ICVF33_SetGivenCoordinateDirection(self, GivenDirection)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF33ICVF33_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, newCode):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF33ICVF33_SetDesiredCoordinateOrientation(self, newCode)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF33ICVF33_SetDesiredCoordinateDirection(self, DesiredDirection)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF33ICVF33_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF33ICVF33_UseImageDirectionOff(self)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF33ICVF33_GetUseImageDirection(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF33ICVF33_SetUseImageDirection(self, _arg)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF33ICVF33_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF33ICVF33_GetFlipAxes(self)

    def SetDesiredCoordinateOrientationToAxial(self):
        r"""SetDesiredCoordinateOrientationToAxial(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF33ICVF33_SetDesiredCoordinateOrientationToAxial(self)

    def SetDesiredCoordinateOrientationToCoronal(self):
        r"""SetDesiredCoordinateOrientationToCoronal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF33ICVF33_SetDesiredCoordinateOrientationToCoronal(self)

    def SetDesiredCoordinateOrientationToSagittal(self):
        r"""SetDesiredCoordinateOrientationToSagittal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF33ICVF33_SetDesiredCoordinateOrientationToSagittal(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF33ICVF33_GenerateOutputInformation(self)
    InputConvertibleToOutput = _itkOrientImageFilterPython.itkOrientImageFilterICVF33ICVF33_InputConvertibleToOutput
    
    SameDimension = _itkOrientImageFilterPython.itkOrientImageFilterICVF33ICVF33_SameDimension
    
    DimensionShouldBe3 = _itkOrientImageFilterPython.itkOrientImageFilterICVF33ICVF33_DimensionShouldBe3
    
    __swig_destroy__ = _itkOrientImageFilterPython.delete_itkOrientImageFilterICVF33ICVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOrientImageFilterICVF33ICVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF33ICVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOrientImageFilterICVF33ICVF33

        Create a new object of the class itkOrientImageFilterICVF33ICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOrientImageFilterICVF33ICVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOrientImageFilterICVF33ICVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOrientImageFilterICVF33ICVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOrientImageFilterICVF33ICVF33 in _itkOrientImageFilterPython:
_itkOrientImageFilterPython.itkOrientImageFilterICVF33ICVF33_swigregister(itkOrientImageFilterICVF33ICVF33)

def itkOrientImageFilterICVF43ICVF43_New():
    return itkOrientImageFilterICVF43ICVF43.New()

class itkOrientImageFilterICVF43ICVF43(itk.itkImageToImageFilterAPython.itkImageToImageFilterICVF43ICVF43):
    r"""Proxy of C++ itkOrientImageFilterICVF43ICVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOrientImageFilterICVF43ICVF43_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF43ICVF43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOrientImageFilterICVF43ICVF43_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF43ICVF43_Clone(self)

    def GetGivenCoordinateOrientation(self):
        r"""GetGivenCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF43ICVF43_GetGivenCoordinateOrientation(self)

    def SetGivenCoordinateOrientation(self, newCode):
        r"""
        SetGivenCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF43ICVF43_SetGivenCoordinateOrientation(self, newCode)

    def SetGivenCoordinateDirection(self, GivenDirection):
        r"""
        SetGivenCoordinateDirection(self, GivenDirection)

        Parameters
        ----------
        GivenDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF43ICVF43_SetGivenCoordinateDirection(self, GivenDirection)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF43ICVF43_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, newCode):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF43ICVF43_SetDesiredCoordinateOrientation(self, newCode)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF43ICVF43_SetDesiredCoordinateDirection(self, DesiredDirection)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF43ICVF43_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF43ICVF43_UseImageDirectionOff(self)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF43ICVF43_GetUseImageDirection(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF43ICVF43_SetUseImageDirection(self, _arg)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF43ICVF43_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF43ICVF43_GetFlipAxes(self)

    def SetDesiredCoordinateOrientationToAxial(self):
        r"""SetDesiredCoordinateOrientationToAxial(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF43ICVF43_SetDesiredCoordinateOrientationToAxial(self)

    def SetDesiredCoordinateOrientationToCoronal(self):
        r"""SetDesiredCoordinateOrientationToCoronal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF43ICVF43_SetDesiredCoordinateOrientationToCoronal(self)

    def SetDesiredCoordinateOrientationToSagittal(self):
        r"""SetDesiredCoordinateOrientationToSagittal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF43ICVF43_SetDesiredCoordinateOrientationToSagittal(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF43ICVF43_GenerateOutputInformation(self)
    InputConvertibleToOutput = _itkOrientImageFilterPython.itkOrientImageFilterICVF43ICVF43_InputConvertibleToOutput
    
    SameDimension = _itkOrientImageFilterPython.itkOrientImageFilterICVF43ICVF43_SameDimension
    
    DimensionShouldBe3 = _itkOrientImageFilterPython.itkOrientImageFilterICVF43ICVF43_DimensionShouldBe3
    
    __swig_destroy__ = _itkOrientImageFilterPython.delete_itkOrientImageFilterICVF43ICVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOrientImageFilterICVF43ICVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterICVF43ICVF43_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOrientImageFilterICVF43ICVF43

        Create a new object of the class itkOrientImageFilterICVF43ICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOrientImageFilterICVF43ICVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOrientImageFilterICVF43ICVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOrientImageFilterICVF43ICVF43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOrientImageFilterICVF43ICVF43 in _itkOrientImageFilterPython:
_itkOrientImageFilterPython.itkOrientImageFilterICVF43ICVF43_swigregister(itkOrientImageFilterICVF43ICVF43)

def itkOrientImageFilterID3ID3_New():
    return itkOrientImageFilterID3ID3.New()

class itkOrientImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkOrientImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOrientImageFilterID3ID3_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOrientImageFilterID3ID3_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterID3ID3_Clone(self)

    def GetGivenCoordinateOrientation(self):
        r"""GetGivenCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterID3ID3_GetGivenCoordinateOrientation(self)

    def SetGivenCoordinateOrientation(self, newCode):
        r"""
        SetGivenCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterID3ID3_SetGivenCoordinateOrientation(self, newCode)

    def SetGivenCoordinateDirection(self, GivenDirection):
        r"""
        SetGivenCoordinateDirection(self, GivenDirection)

        Parameters
        ----------
        GivenDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterID3ID3_SetGivenCoordinateDirection(self, GivenDirection)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterID3ID3_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, newCode):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterID3ID3_SetDesiredCoordinateOrientation(self, newCode)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterID3ID3_SetDesiredCoordinateDirection(self, DesiredDirection)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterID3ID3_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterID3ID3_UseImageDirectionOff(self)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkOrientImageFilterPython.itkOrientImageFilterID3ID3_GetUseImageDirection(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterID3ID3_SetUseImageDirection(self, _arg)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterID3ID3_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterID3ID3_GetFlipAxes(self)

    def SetDesiredCoordinateOrientationToAxial(self):
        r"""SetDesiredCoordinateOrientationToAxial(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterID3ID3_SetDesiredCoordinateOrientationToAxial(self)

    def SetDesiredCoordinateOrientationToCoronal(self):
        r"""SetDesiredCoordinateOrientationToCoronal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterID3ID3_SetDesiredCoordinateOrientationToCoronal(self)

    def SetDesiredCoordinateOrientationToSagittal(self):
        r"""SetDesiredCoordinateOrientationToSagittal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterID3ID3_SetDesiredCoordinateOrientationToSagittal(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterID3ID3_GenerateOutputInformation(self)
    InputConvertibleToOutput = _itkOrientImageFilterPython.itkOrientImageFilterID3ID3_InputConvertibleToOutput
    
    SameDimension = _itkOrientImageFilterPython.itkOrientImageFilterID3ID3_SameDimension
    
    DimensionShouldBe3 = _itkOrientImageFilterPython.itkOrientImageFilterID3ID3_DimensionShouldBe3
    
    __swig_destroy__ = _itkOrientImageFilterPython.delete_itkOrientImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOrientImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOrientImageFilterID3ID3

        Create a new object of the class itkOrientImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOrientImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOrientImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOrientImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOrientImageFilterID3ID3 in _itkOrientImageFilterPython:
_itkOrientImageFilterPython.itkOrientImageFilterID3ID3_swigregister(itkOrientImageFilterID3ID3)

def itkOrientImageFilterIF3IF3_New():
    return itkOrientImageFilterIF3IF3.New()

class itkOrientImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkOrientImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOrientImageFilterIF3IF3_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOrientImageFilterIF3IF3_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIF3IF3_Clone(self)

    def GetGivenCoordinateOrientation(self):
        r"""GetGivenCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIF3IF3_GetGivenCoordinateOrientation(self)

    def SetGivenCoordinateOrientation(self, newCode):
        r"""
        SetGivenCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIF3IF3_SetGivenCoordinateOrientation(self, newCode)

    def SetGivenCoordinateDirection(self, GivenDirection):
        r"""
        SetGivenCoordinateDirection(self, GivenDirection)

        Parameters
        ----------
        GivenDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIF3IF3_SetGivenCoordinateDirection(self, GivenDirection)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIF3IF3_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, newCode):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIF3IF3_SetDesiredCoordinateOrientation(self, newCode)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIF3IF3_SetDesiredCoordinateDirection(self, DesiredDirection)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIF3IF3_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIF3IF3_UseImageDirectionOff(self)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIF3IF3_GetUseImageDirection(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIF3IF3_SetUseImageDirection(self, _arg)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIF3IF3_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIF3IF3_GetFlipAxes(self)

    def SetDesiredCoordinateOrientationToAxial(self):
        r"""SetDesiredCoordinateOrientationToAxial(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIF3IF3_SetDesiredCoordinateOrientationToAxial(self)

    def SetDesiredCoordinateOrientationToCoronal(self):
        r"""SetDesiredCoordinateOrientationToCoronal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIF3IF3_SetDesiredCoordinateOrientationToCoronal(self)

    def SetDesiredCoordinateOrientationToSagittal(self):
        r"""SetDesiredCoordinateOrientationToSagittal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIF3IF3_SetDesiredCoordinateOrientationToSagittal(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIF3IF3_GenerateOutputInformation(self)
    InputConvertibleToOutput = _itkOrientImageFilterPython.itkOrientImageFilterIF3IF3_InputConvertibleToOutput
    
    SameDimension = _itkOrientImageFilterPython.itkOrientImageFilterIF3IF3_SameDimension
    
    DimensionShouldBe3 = _itkOrientImageFilterPython.itkOrientImageFilterIF3IF3_DimensionShouldBe3
    
    __swig_destroy__ = _itkOrientImageFilterPython.delete_itkOrientImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOrientImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOrientImageFilterIF3IF3

        Create a new object of the class itkOrientImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOrientImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOrientImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOrientImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOrientImageFilterIF3IF3 in _itkOrientImageFilterPython:
_itkOrientImageFilterPython.itkOrientImageFilterIF3IF3_swigregister(itkOrientImageFilterIF3IF3)

def itkOrientImageFilterIRGBAUC3IRGBAUC3_New():
    return itkOrientImageFilterIRGBAUC3IRGBAUC3.New()

class itkOrientImageFilterIRGBAUC3IRGBAUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIRGBAUC3IRGBAUC3):
    r"""Proxy of C++ itkOrientImageFilterIRGBAUC3IRGBAUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOrientImageFilterIRGBAUC3IRGBAUC3_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBAUC3IRGBAUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOrientImageFilterIRGBAUC3IRGBAUC3_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBAUC3IRGBAUC3_Clone(self)

    def GetGivenCoordinateOrientation(self):
        r"""GetGivenCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBAUC3IRGBAUC3_GetGivenCoordinateOrientation(self)

    def SetGivenCoordinateOrientation(self, newCode):
        r"""
        SetGivenCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBAUC3IRGBAUC3_SetGivenCoordinateOrientation(self, newCode)

    def SetGivenCoordinateDirection(self, GivenDirection):
        r"""
        SetGivenCoordinateDirection(self, GivenDirection)

        Parameters
        ----------
        GivenDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBAUC3IRGBAUC3_SetGivenCoordinateDirection(self, GivenDirection)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBAUC3IRGBAUC3_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, newCode):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBAUC3IRGBAUC3_SetDesiredCoordinateOrientation(self, newCode)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBAUC3IRGBAUC3_SetDesiredCoordinateDirection(self, DesiredDirection)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBAUC3IRGBAUC3_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBAUC3IRGBAUC3_UseImageDirectionOff(self)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBAUC3IRGBAUC3_GetUseImageDirection(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBAUC3IRGBAUC3_SetUseImageDirection(self, _arg)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBAUC3IRGBAUC3_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBAUC3IRGBAUC3_GetFlipAxes(self)

    def SetDesiredCoordinateOrientationToAxial(self):
        r"""SetDesiredCoordinateOrientationToAxial(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBAUC3IRGBAUC3_SetDesiredCoordinateOrientationToAxial(self)

    def SetDesiredCoordinateOrientationToCoronal(self):
        r"""SetDesiredCoordinateOrientationToCoronal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBAUC3IRGBAUC3_SetDesiredCoordinateOrientationToCoronal(self)

    def SetDesiredCoordinateOrientationToSagittal(self):
        r"""SetDesiredCoordinateOrientationToSagittal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBAUC3IRGBAUC3_SetDesiredCoordinateOrientationToSagittal(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBAUC3IRGBAUC3_GenerateOutputInformation(self)
    InputConvertibleToOutput = _itkOrientImageFilterPython.itkOrientImageFilterIRGBAUC3IRGBAUC3_InputConvertibleToOutput
    
    SameDimension = _itkOrientImageFilterPython.itkOrientImageFilterIRGBAUC3IRGBAUC3_SameDimension
    
    DimensionShouldBe3 = _itkOrientImageFilterPython.itkOrientImageFilterIRGBAUC3IRGBAUC3_DimensionShouldBe3
    
    __swig_destroy__ = _itkOrientImageFilterPython.delete_itkOrientImageFilterIRGBAUC3IRGBAUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOrientImageFilterIRGBAUC3IRGBAUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBAUC3IRGBAUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOrientImageFilterIRGBAUC3IRGBAUC3

        Create a new object of the class itkOrientImageFilterIRGBAUC3IRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOrientImageFilterIRGBAUC3IRGBAUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOrientImageFilterIRGBAUC3IRGBAUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOrientImageFilterIRGBAUC3IRGBAUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOrientImageFilterIRGBAUC3IRGBAUC3 in _itkOrientImageFilterPython:
_itkOrientImageFilterPython.itkOrientImageFilterIRGBAUC3IRGBAUC3_swigregister(itkOrientImageFilterIRGBAUC3IRGBAUC3)

def itkOrientImageFilterIRGBUC3IRGBUC3_New():
    return itkOrientImageFilterIRGBUC3IRGBUC3.New()

class itkOrientImageFilterIRGBUC3IRGBUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC3IRGBUC3):
    r"""Proxy of C++ itkOrientImageFilterIRGBUC3IRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOrientImageFilterIRGBUC3IRGBUC3_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBUC3IRGBUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOrientImageFilterIRGBUC3IRGBUC3_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBUC3IRGBUC3_Clone(self)

    def GetGivenCoordinateOrientation(self):
        r"""GetGivenCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBUC3IRGBUC3_GetGivenCoordinateOrientation(self)

    def SetGivenCoordinateOrientation(self, newCode):
        r"""
        SetGivenCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBUC3IRGBUC3_SetGivenCoordinateOrientation(self, newCode)

    def SetGivenCoordinateDirection(self, GivenDirection):
        r"""
        SetGivenCoordinateDirection(self, GivenDirection)

        Parameters
        ----------
        GivenDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBUC3IRGBUC3_SetGivenCoordinateDirection(self, GivenDirection)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBUC3IRGBUC3_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, newCode):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBUC3IRGBUC3_SetDesiredCoordinateOrientation(self, newCode)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBUC3IRGBUC3_SetDesiredCoordinateDirection(self, DesiredDirection)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBUC3IRGBUC3_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBUC3IRGBUC3_UseImageDirectionOff(self)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBUC3IRGBUC3_GetUseImageDirection(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBUC3IRGBUC3_SetUseImageDirection(self, _arg)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBUC3IRGBUC3_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBUC3IRGBUC3_GetFlipAxes(self)

    def SetDesiredCoordinateOrientationToAxial(self):
        r"""SetDesiredCoordinateOrientationToAxial(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBUC3IRGBUC3_SetDesiredCoordinateOrientationToAxial(self)

    def SetDesiredCoordinateOrientationToCoronal(self):
        r"""SetDesiredCoordinateOrientationToCoronal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBUC3IRGBUC3_SetDesiredCoordinateOrientationToCoronal(self)

    def SetDesiredCoordinateOrientationToSagittal(self):
        r"""SetDesiredCoordinateOrientationToSagittal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBUC3IRGBUC3_SetDesiredCoordinateOrientationToSagittal(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBUC3IRGBUC3_GenerateOutputInformation(self)
    InputConvertibleToOutput = _itkOrientImageFilterPython.itkOrientImageFilterIRGBUC3IRGBUC3_InputConvertibleToOutput
    
    SameDimension = _itkOrientImageFilterPython.itkOrientImageFilterIRGBUC3IRGBUC3_SameDimension
    
    DimensionShouldBe3 = _itkOrientImageFilterPython.itkOrientImageFilterIRGBUC3IRGBUC3_DimensionShouldBe3
    
    __swig_destroy__ = _itkOrientImageFilterPython.delete_itkOrientImageFilterIRGBUC3IRGBUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOrientImageFilterIRGBUC3IRGBUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIRGBUC3IRGBUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOrientImageFilterIRGBUC3IRGBUC3

        Create a new object of the class itkOrientImageFilterIRGBUC3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOrientImageFilterIRGBUC3IRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOrientImageFilterIRGBUC3IRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOrientImageFilterIRGBUC3IRGBUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOrientImageFilterIRGBUC3IRGBUC3 in _itkOrientImageFilterPython:
_itkOrientImageFilterPython.itkOrientImageFilterIRGBUC3IRGBUC3_swigregister(itkOrientImageFilterIRGBUC3IRGBUC3)

def itkOrientImageFilterISS3ISS3_New():
    return itkOrientImageFilterISS3ISS3.New()

class itkOrientImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkOrientImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOrientImageFilterISS3ISS3_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOrientImageFilterISS3ISS3_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterISS3ISS3_Clone(self)

    def GetGivenCoordinateOrientation(self):
        r"""GetGivenCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterISS3ISS3_GetGivenCoordinateOrientation(self)

    def SetGivenCoordinateOrientation(self, newCode):
        r"""
        SetGivenCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterISS3ISS3_SetGivenCoordinateOrientation(self, newCode)

    def SetGivenCoordinateDirection(self, GivenDirection):
        r"""
        SetGivenCoordinateDirection(self, GivenDirection)

        Parameters
        ----------
        GivenDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterISS3ISS3_SetGivenCoordinateDirection(self, GivenDirection)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterISS3ISS3_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, newCode):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterISS3ISS3_SetDesiredCoordinateOrientation(self, newCode)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterISS3ISS3_SetDesiredCoordinateDirection(self, DesiredDirection)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterISS3ISS3_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterISS3ISS3_UseImageDirectionOff(self)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkOrientImageFilterPython.itkOrientImageFilterISS3ISS3_GetUseImageDirection(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterISS3ISS3_SetUseImageDirection(self, _arg)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterISS3ISS3_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterISS3ISS3_GetFlipAxes(self)

    def SetDesiredCoordinateOrientationToAxial(self):
        r"""SetDesiredCoordinateOrientationToAxial(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterISS3ISS3_SetDesiredCoordinateOrientationToAxial(self)

    def SetDesiredCoordinateOrientationToCoronal(self):
        r"""SetDesiredCoordinateOrientationToCoronal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterISS3ISS3_SetDesiredCoordinateOrientationToCoronal(self)

    def SetDesiredCoordinateOrientationToSagittal(self):
        r"""SetDesiredCoordinateOrientationToSagittal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterISS3ISS3_SetDesiredCoordinateOrientationToSagittal(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterISS3ISS3_GenerateOutputInformation(self)
    InputConvertibleToOutput = _itkOrientImageFilterPython.itkOrientImageFilterISS3ISS3_InputConvertibleToOutput
    
    SameDimension = _itkOrientImageFilterPython.itkOrientImageFilterISS3ISS3_SameDimension
    
    DimensionShouldBe3 = _itkOrientImageFilterPython.itkOrientImageFilterISS3ISS3_DimensionShouldBe3
    
    __swig_destroy__ = _itkOrientImageFilterPython.delete_itkOrientImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOrientImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOrientImageFilterISS3ISS3

        Create a new object of the class itkOrientImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOrientImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOrientImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOrientImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOrientImageFilterISS3ISS3 in _itkOrientImageFilterPython:
_itkOrientImageFilterPython.itkOrientImageFilterISS3ISS3_swigregister(itkOrientImageFilterISS3ISS3)

def itkOrientImageFilterIUC3IUC3_New():
    return itkOrientImageFilterIUC3IUC3.New()

class itkOrientImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkOrientImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOrientImageFilterIUC3IUC3_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOrientImageFilterIUC3IUC3_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUC3IUC3_Clone(self)

    def GetGivenCoordinateOrientation(self):
        r"""GetGivenCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUC3IUC3_GetGivenCoordinateOrientation(self)

    def SetGivenCoordinateOrientation(self, newCode):
        r"""
        SetGivenCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIUC3IUC3_SetGivenCoordinateOrientation(self, newCode)

    def SetGivenCoordinateDirection(self, GivenDirection):
        r"""
        SetGivenCoordinateDirection(self, GivenDirection)

        Parameters
        ----------
        GivenDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIUC3IUC3_SetGivenCoordinateDirection(self, GivenDirection)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUC3IUC3_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, newCode):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIUC3IUC3_SetDesiredCoordinateOrientation(self, newCode)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIUC3IUC3_SetDesiredCoordinateDirection(self, DesiredDirection)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUC3IUC3_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUC3IUC3_UseImageDirectionOff(self)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUC3IUC3_GetUseImageDirection(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIUC3IUC3_SetUseImageDirection(self, _arg)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUC3IUC3_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUC3IUC3_GetFlipAxes(self)

    def SetDesiredCoordinateOrientationToAxial(self):
        r"""SetDesiredCoordinateOrientationToAxial(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUC3IUC3_SetDesiredCoordinateOrientationToAxial(self)

    def SetDesiredCoordinateOrientationToCoronal(self):
        r"""SetDesiredCoordinateOrientationToCoronal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUC3IUC3_SetDesiredCoordinateOrientationToCoronal(self)

    def SetDesiredCoordinateOrientationToSagittal(self):
        r"""SetDesiredCoordinateOrientationToSagittal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUC3IUC3_SetDesiredCoordinateOrientationToSagittal(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUC3IUC3_GenerateOutputInformation(self)
    InputConvertibleToOutput = _itkOrientImageFilterPython.itkOrientImageFilterIUC3IUC3_InputConvertibleToOutput
    
    SameDimension = _itkOrientImageFilterPython.itkOrientImageFilterIUC3IUC3_SameDimension
    
    DimensionShouldBe3 = _itkOrientImageFilterPython.itkOrientImageFilterIUC3IUC3_DimensionShouldBe3
    
    __swig_destroy__ = _itkOrientImageFilterPython.delete_itkOrientImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOrientImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOrientImageFilterIUC3IUC3

        Create a new object of the class itkOrientImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOrientImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOrientImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOrientImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOrientImageFilterIUC3IUC3 in _itkOrientImageFilterPython:
_itkOrientImageFilterPython.itkOrientImageFilterIUC3IUC3_swigregister(itkOrientImageFilterIUC3IUC3)

def itkOrientImageFilterIUS3IUS3_New():
    return itkOrientImageFilterIUS3IUS3.New()

class itkOrientImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkOrientImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOrientImageFilterIUS3IUS3_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOrientImageFilterIUS3IUS3_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUS3IUS3_Clone(self)

    def GetGivenCoordinateOrientation(self):
        r"""GetGivenCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUS3IUS3_GetGivenCoordinateOrientation(self)

    def SetGivenCoordinateOrientation(self, newCode):
        r"""
        SetGivenCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIUS3IUS3_SetGivenCoordinateOrientation(self, newCode)

    def SetGivenCoordinateDirection(self, GivenDirection):
        r"""
        SetGivenCoordinateDirection(self, GivenDirection)

        Parameters
        ----------
        GivenDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIUS3IUS3_SetGivenCoordinateDirection(self, GivenDirection)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUS3IUS3_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, newCode):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIUS3IUS3_SetDesiredCoordinateOrientation(self, newCode)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIUS3IUS3_SetDesiredCoordinateDirection(self, DesiredDirection)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUS3IUS3_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUS3IUS3_UseImageDirectionOff(self)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUS3IUS3_GetUseImageDirection(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIUS3IUS3_SetUseImageDirection(self, _arg)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUS3IUS3_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUS3IUS3_GetFlipAxes(self)

    def SetDesiredCoordinateOrientationToAxial(self):
        r"""SetDesiredCoordinateOrientationToAxial(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUS3IUS3_SetDesiredCoordinateOrientationToAxial(self)

    def SetDesiredCoordinateOrientationToCoronal(self):
        r"""SetDesiredCoordinateOrientationToCoronal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUS3IUS3_SetDesiredCoordinateOrientationToCoronal(self)

    def SetDesiredCoordinateOrientationToSagittal(self):
        r"""SetDesiredCoordinateOrientationToSagittal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUS3IUS3_SetDesiredCoordinateOrientationToSagittal(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIUS3IUS3_GenerateOutputInformation(self)
    InputConvertibleToOutput = _itkOrientImageFilterPython.itkOrientImageFilterIUS3IUS3_InputConvertibleToOutput
    
    SameDimension = _itkOrientImageFilterPython.itkOrientImageFilterIUS3IUS3_SameDimension
    
    DimensionShouldBe3 = _itkOrientImageFilterPython.itkOrientImageFilterIUS3IUS3_DimensionShouldBe3
    
    __swig_destroy__ = _itkOrientImageFilterPython.delete_itkOrientImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOrientImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOrientImageFilterIUS3IUS3

        Create a new object of the class itkOrientImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOrientImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOrientImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOrientImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOrientImageFilterIUS3IUS3 in _itkOrientImageFilterPython:
_itkOrientImageFilterPython.itkOrientImageFilterIUS3IUS3_swigregister(itkOrientImageFilterIUS3IUS3)

def itkOrientImageFilterIVF23IVF23_New():
    return itkOrientImageFilterIVF23IVF23.New()

class itkOrientImageFilterIVF23IVF23(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23):
    r"""Proxy of C++ itkOrientImageFilterIVF23IVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOrientImageFilterIVF23IVF23_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF23IVF23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOrientImageFilterIVF23IVF23_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF23IVF23_Clone(self)

    def GetGivenCoordinateOrientation(self):
        r"""GetGivenCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF23IVF23_GetGivenCoordinateOrientation(self)

    def SetGivenCoordinateOrientation(self, newCode):
        r"""
        SetGivenCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF23IVF23_SetGivenCoordinateOrientation(self, newCode)

    def SetGivenCoordinateDirection(self, GivenDirection):
        r"""
        SetGivenCoordinateDirection(self, GivenDirection)

        Parameters
        ----------
        GivenDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF23IVF23_SetGivenCoordinateDirection(self, GivenDirection)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF23IVF23_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, newCode):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF23IVF23_SetDesiredCoordinateOrientation(self, newCode)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF23IVF23_SetDesiredCoordinateDirection(self, DesiredDirection)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF23IVF23_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF23IVF23_UseImageDirectionOff(self)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF23IVF23_GetUseImageDirection(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF23IVF23_SetUseImageDirection(self, _arg)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF23IVF23_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF23IVF23_GetFlipAxes(self)

    def SetDesiredCoordinateOrientationToAxial(self):
        r"""SetDesiredCoordinateOrientationToAxial(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF23IVF23_SetDesiredCoordinateOrientationToAxial(self)

    def SetDesiredCoordinateOrientationToCoronal(self):
        r"""SetDesiredCoordinateOrientationToCoronal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF23IVF23_SetDesiredCoordinateOrientationToCoronal(self)

    def SetDesiredCoordinateOrientationToSagittal(self):
        r"""SetDesiredCoordinateOrientationToSagittal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF23IVF23_SetDesiredCoordinateOrientationToSagittal(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF23IVF23_GenerateOutputInformation(self)
    InputConvertibleToOutput = _itkOrientImageFilterPython.itkOrientImageFilterIVF23IVF23_InputConvertibleToOutput
    
    SameDimension = _itkOrientImageFilterPython.itkOrientImageFilterIVF23IVF23_SameDimension
    
    DimensionShouldBe3 = _itkOrientImageFilterPython.itkOrientImageFilterIVF23IVF23_DimensionShouldBe3
    
    __swig_destroy__ = _itkOrientImageFilterPython.delete_itkOrientImageFilterIVF23IVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOrientImageFilterIVF23IVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF23IVF23_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOrientImageFilterIVF23IVF23

        Create a new object of the class itkOrientImageFilterIVF23IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOrientImageFilterIVF23IVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOrientImageFilterIVF23IVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOrientImageFilterIVF23IVF23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOrientImageFilterIVF23IVF23 in _itkOrientImageFilterPython:
_itkOrientImageFilterPython.itkOrientImageFilterIVF23IVF23_swigregister(itkOrientImageFilterIVF23IVF23)

def itkOrientImageFilterIVF33IVF33_New():
    return itkOrientImageFilterIVF33IVF33.New()

class itkOrientImageFilterIVF33IVF33(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33):
    r"""Proxy of C++ itkOrientImageFilterIVF33IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOrientImageFilterIVF33IVF33_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF33IVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOrientImageFilterIVF33IVF33_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF33IVF33_Clone(self)

    def GetGivenCoordinateOrientation(self):
        r"""GetGivenCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF33IVF33_GetGivenCoordinateOrientation(self)

    def SetGivenCoordinateOrientation(self, newCode):
        r"""
        SetGivenCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF33IVF33_SetGivenCoordinateOrientation(self, newCode)

    def SetGivenCoordinateDirection(self, GivenDirection):
        r"""
        SetGivenCoordinateDirection(self, GivenDirection)

        Parameters
        ----------
        GivenDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF33IVF33_SetGivenCoordinateDirection(self, GivenDirection)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF33IVF33_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, newCode):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF33IVF33_SetDesiredCoordinateOrientation(self, newCode)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF33IVF33_SetDesiredCoordinateDirection(self, DesiredDirection)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF33IVF33_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF33IVF33_UseImageDirectionOff(self)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF33IVF33_GetUseImageDirection(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF33IVF33_SetUseImageDirection(self, _arg)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF33IVF33_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF33IVF33_GetFlipAxes(self)

    def SetDesiredCoordinateOrientationToAxial(self):
        r"""SetDesiredCoordinateOrientationToAxial(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF33IVF33_SetDesiredCoordinateOrientationToAxial(self)

    def SetDesiredCoordinateOrientationToCoronal(self):
        r"""SetDesiredCoordinateOrientationToCoronal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF33IVF33_SetDesiredCoordinateOrientationToCoronal(self)

    def SetDesiredCoordinateOrientationToSagittal(self):
        r"""SetDesiredCoordinateOrientationToSagittal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF33IVF33_SetDesiredCoordinateOrientationToSagittal(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF33IVF33_GenerateOutputInformation(self)
    InputConvertibleToOutput = _itkOrientImageFilterPython.itkOrientImageFilterIVF33IVF33_InputConvertibleToOutput
    
    SameDimension = _itkOrientImageFilterPython.itkOrientImageFilterIVF33IVF33_SameDimension
    
    DimensionShouldBe3 = _itkOrientImageFilterPython.itkOrientImageFilterIVF33IVF33_DimensionShouldBe3
    
    __swig_destroy__ = _itkOrientImageFilterPython.delete_itkOrientImageFilterIVF33IVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOrientImageFilterIVF33IVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF33IVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOrientImageFilterIVF33IVF33

        Create a new object of the class itkOrientImageFilterIVF33IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOrientImageFilterIVF33IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOrientImageFilterIVF33IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOrientImageFilterIVF33IVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOrientImageFilterIVF33IVF33 in _itkOrientImageFilterPython:
_itkOrientImageFilterPython.itkOrientImageFilterIVF33IVF33_swigregister(itkOrientImageFilterIVF33IVF33)

def itkOrientImageFilterIVF43IVF43_New():
    return itkOrientImageFilterIVF43IVF43.New()

class itkOrientImageFilterIVF43IVF43(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43):
    r"""Proxy of C++ itkOrientImageFilterIVF43IVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOrientImageFilterIVF43IVF43_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF43IVF43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOrientImageFilterIVF43IVF43_Pointer"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF43IVF43_Clone(self)

    def GetGivenCoordinateOrientation(self):
        r"""GetGivenCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF43IVF43_GetGivenCoordinateOrientation(self)

    def SetGivenCoordinateOrientation(self, newCode):
        r"""
        SetGivenCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF43IVF43_SetGivenCoordinateOrientation(self, newCode)

    def SetGivenCoordinateDirection(self, GivenDirection):
        r"""
        SetGivenCoordinateDirection(self, GivenDirection)

        Parameters
        ----------
        GivenDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF43IVF43_SetGivenCoordinateDirection(self, GivenDirection)

    def GetDesiredCoordinateOrientation(self):
        r"""GetDesiredCoordinateOrientation(self) -> itkAnatomicalOrientation"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF43IVF43_GetDesiredCoordinateOrientation(self)

    def SetDesiredCoordinateOrientation(self, newCode):
        r"""
        SetDesiredCoordinateOrientation(self, newCode)

        Parameters
        ----------
        newCode: itkAnatomicalOrientation

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF43IVF43_SetDesiredCoordinateOrientation(self, newCode)

    def SetDesiredCoordinateDirection(self, DesiredDirection):
        r"""
        SetDesiredCoordinateDirection(self, DesiredDirection)

        Parameters
        ----------
        DesiredDirection: itkMatrixD33 const &

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF43IVF43_SetDesiredCoordinateDirection(self, DesiredDirection)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF43IVF43_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF43IVF43_UseImageDirectionOff(self)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF43IVF43_GetUseImageDirection(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF43IVF43_SetUseImageDirection(self, _arg)

    def GetPermuteOrder(self):
        r"""GetPermuteOrder(self) -> itkFixedArrayUI3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF43IVF43_GetPermuteOrder(self)

    def GetFlipAxes(self):
        r"""GetFlipAxes(self) -> itkFixedArrayB3"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF43IVF43_GetFlipAxes(self)

    def SetDesiredCoordinateOrientationToAxial(self):
        r"""SetDesiredCoordinateOrientationToAxial(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF43IVF43_SetDesiredCoordinateOrientationToAxial(self)

    def SetDesiredCoordinateOrientationToCoronal(self):
        r"""SetDesiredCoordinateOrientationToCoronal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF43IVF43_SetDesiredCoordinateOrientationToCoronal(self)

    def SetDesiredCoordinateOrientationToSagittal(self):
        r"""SetDesiredCoordinateOrientationToSagittal(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF43IVF43_SetDesiredCoordinateOrientationToSagittal(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF43IVF43_GenerateOutputInformation(self)
    InputConvertibleToOutput = _itkOrientImageFilterPython.itkOrientImageFilterIVF43IVF43_InputConvertibleToOutput
    
    SameDimension = _itkOrientImageFilterPython.itkOrientImageFilterIVF43IVF43_SameDimension
    
    DimensionShouldBe3 = _itkOrientImageFilterPython.itkOrientImageFilterIVF43IVF43_DimensionShouldBe3
    
    __swig_destroy__ = _itkOrientImageFilterPython.delete_itkOrientImageFilterIVF43IVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOrientImageFilterIVF43IVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOrientImageFilterPython.itkOrientImageFilterIVF43IVF43_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOrientImageFilterIVF43IVF43

        Create a new object of the class itkOrientImageFilterIVF43IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOrientImageFilterIVF43IVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOrientImageFilterIVF43IVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOrientImageFilterIVF43IVF43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOrientImageFilterIVF43IVF43 in _itkOrientImageFilterPython:
_itkOrientImageFilterPython.itkOrientImageFilterIVF43IVF43_swigregister(itkOrientImageFilterIVF43IVF43)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def orient_image_filter(*args: itkt.ImageLike,  given_coordinate_orientation=..., given_coordinate_direction=..., desired_coordinate_orientation=..., desired_coordinate_direction=..., use_image_direction: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for OrientImageFilter"""
    import itk

    kwarg_typehints = { 'given_coordinate_orientation':given_coordinate_orientation,'given_coordinate_direction':given_coordinate_direction,'desired_coordinate_orientation':desired_coordinate_orientation,'desired_coordinate_direction':desired_coordinate_direction,'use_image_direction':use_image_direction }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.OrientImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def orient_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageGrid.OrientImageFilter
    orient_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    orient_image_filter.__doc__ = filter_object.__doc__



