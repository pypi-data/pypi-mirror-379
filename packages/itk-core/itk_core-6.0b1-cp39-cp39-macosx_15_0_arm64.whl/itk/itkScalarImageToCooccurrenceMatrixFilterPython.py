# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKStatisticsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkScalarImageToCooccurrenceMatrixFilterPython
else:
    import _itkScalarImageToCooccurrenceMatrixFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkHistogramPython
import itk.itkSamplePython
import itk.itkArrayPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython

def itkScalarImageToCooccurrenceMatrixFilterID2_New():
    return itkScalarImageToCooccurrenceMatrixFilterID2.New()

class itkScalarImageToCooccurrenceMatrixFilterID2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterID2_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToCooccurrenceMatrixFilterID2_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_Clone(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO2 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_SetOffsets(self, _arg)

    def GetOffsets(self):
        r"""GetOffsets(self) -> itkVectorContainerUCO2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetOffsets(self)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset2 const

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_SetOffset(self, offset)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetNumberOfBinsPerAxis(self)

    def SetPixelValueMinMax(self, min, max):
        r"""
        SetPixelValueMinMax(self, min, max)

        Parameters
        ----------
        min: double
        max: double

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_SetPixelValueMinMax(self, min, max)

    def GetMin(self):
        r"""GetMin(self) -> double"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetMin(self)

    def GetMax(self):
        r"""GetMax(self) -> double"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetMax(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_NormalizeOff(self)

    def SetInput(self, image):
        r"""
        SetInput(self, image)

        Parameters
        ----------
        image: itkImageD2 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_SetInput(self, image)

    def GetInput(self):
        r"""GetInput(self) -> itkImageD2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetInput(self)

    def SetMaskImage(self, image):
        r"""
        SetMaskImage(self, image)

        Parameters
        ----------
        image: itkImageD2 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_SetMaskImage(self, image)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageD2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetMaskImage(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetOutput(self)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> double"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetInsidePixelValue(self)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToCooccurrenceMatrixFilterID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterID2

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterID2 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_swigregister(itkScalarImageToCooccurrenceMatrixFilterID2)

def itkScalarImageToCooccurrenceMatrixFilterID3_New():
    return itkScalarImageToCooccurrenceMatrixFilterID3.New()

class itkScalarImageToCooccurrenceMatrixFilterID3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterID3_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToCooccurrenceMatrixFilterID3_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_Clone(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO3 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_SetOffsets(self, _arg)

    def GetOffsets(self):
        r"""GetOffsets(self) -> itkVectorContainerUCO3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetOffsets(self)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset3 const

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_SetOffset(self, offset)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetNumberOfBinsPerAxis(self)

    def SetPixelValueMinMax(self, min, max):
        r"""
        SetPixelValueMinMax(self, min, max)

        Parameters
        ----------
        min: double
        max: double

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_SetPixelValueMinMax(self, min, max)

    def GetMin(self):
        r"""GetMin(self) -> double"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetMin(self)

    def GetMax(self):
        r"""GetMax(self) -> double"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetMax(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_NormalizeOff(self)

    def SetInput(self, image):
        r"""
        SetInput(self, image)

        Parameters
        ----------
        image: itkImageD3 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_SetInput(self, image)

    def GetInput(self):
        r"""GetInput(self) -> itkImageD3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetInput(self)

    def SetMaskImage(self, image):
        r"""
        SetMaskImage(self, image)

        Parameters
        ----------
        image: itkImageD3 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_SetMaskImage(self, image)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageD3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetMaskImage(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetOutput(self)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> double"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetInsidePixelValue(self)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToCooccurrenceMatrixFilterID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterID3

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterID3 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_swigregister(itkScalarImageToCooccurrenceMatrixFilterID3)

def itkScalarImageToCooccurrenceMatrixFilterID4_New():
    return itkScalarImageToCooccurrenceMatrixFilterID4.New()

class itkScalarImageToCooccurrenceMatrixFilterID4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterID4_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToCooccurrenceMatrixFilterID4_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_Clone(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO4 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_SetOffsets(self, _arg)

    def GetOffsets(self):
        r"""GetOffsets(self) -> itkVectorContainerUCO4"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_GetOffsets(self)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset4 const

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_SetOffset(self, offset)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_GetNumberOfBinsPerAxis(self)

    def SetPixelValueMinMax(self, min, max):
        r"""
        SetPixelValueMinMax(self, min, max)

        Parameters
        ----------
        min: double
        max: double

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_SetPixelValueMinMax(self, min, max)

    def GetMin(self):
        r"""GetMin(self) -> double"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_GetMin(self)

    def GetMax(self):
        r"""GetMax(self) -> double"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_GetMax(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_NormalizeOff(self)

    def SetInput(self, image):
        r"""
        SetInput(self, image)

        Parameters
        ----------
        image: itkImageD4 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_SetInput(self, image)

    def GetInput(self):
        r"""GetInput(self) -> itkImageD4"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_GetInput(self)

    def SetMaskImage(self, image):
        r"""
        SetMaskImage(self, image)

        Parameters
        ----------
        image: itkImageD4 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_SetMaskImage(self, image)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageD4"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_GetMaskImage(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_GetOutput(self)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> double"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_GetInsidePixelValue(self)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToCooccurrenceMatrixFilterID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterID4

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterID4 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_swigregister(itkScalarImageToCooccurrenceMatrixFilterID4)

def itkScalarImageToCooccurrenceMatrixFilterIF2_New():
    return itkScalarImageToCooccurrenceMatrixFilterIF2.New()

class itkScalarImageToCooccurrenceMatrixFilterIF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterIF2_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToCooccurrenceMatrixFilterIF2_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_Clone(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO2 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetOffsets(self, _arg)

    def GetOffsets(self):
        r"""GetOffsets(self) -> itkVectorContainerUCO2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetOffsets(self)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset2 const

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetOffset(self, offset)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetNumberOfBinsPerAxis(self)

    def SetPixelValueMinMax(self, min, max):
        r"""
        SetPixelValueMinMax(self, min, max)

        Parameters
        ----------
        min: float
        max: float

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetPixelValueMinMax(self, min, max)

    def GetMin(self):
        r"""GetMin(self) -> float"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetMin(self)

    def GetMax(self):
        r"""GetMax(self) -> float"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetMax(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_NormalizeOff(self)

    def SetInput(self, image):
        r"""
        SetInput(self, image)

        Parameters
        ----------
        image: itkImageF2 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetInput(self, image)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetInput(self)

    def SetMaskImage(self, image):
        r"""
        SetMaskImage(self, image)

        Parameters
        ----------
        image: itkImageF2 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetMaskImage(self, image)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageF2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetMaskImage(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetOutput(self)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> float"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetInsidePixelValue(self)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToCooccurrenceMatrixFilterIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIF2

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterIF2 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_swigregister(itkScalarImageToCooccurrenceMatrixFilterIF2)

def itkScalarImageToCooccurrenceMatrixFilterIF3_New():
    return itkScalarImageToCooccurrenceMatrixFilterIF3.New()

class itkScalarImageToCooccurrenceMatrixFilterIF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterIF3_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToCooccurrenceMatrixFilterIF3_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_Clone(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO3 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetOffsets(self, _arg)

    def GetOffsets(self):
        r"""GetOffsets(self) -> itkVectorContainerUCO3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetOffsets(self)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset3 const

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetOffset(self, offset)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetNumberOfBinsPerAxis(self)

    def SetPixelValueMinMax(self, min, max):
        r"""
        SetPixelValueMinMax(self, min, max)

        Parameters
        ----------
        min: float
        max: float

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetPixelValueMinMax(self, min, max)

    def GetMin(self):
        r"""GetMin(self) -> float"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetMin(self)

    def GetMax(self):
        r"""GetMax(self) -> float"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetMax(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_NormalizeOff(self)

    def SetInput(self, image):
        r"""
        SetInput(self, image)

        Parameters
        ----------
        image: itkImageF3 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetInput(self, image)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetInput(self)

    def SetMaskImage(self, image):
        r"""
        SetMaskImage(self, image)

        Parameters
        ----------
        image: itkImageF3 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetMaskImage(self, image)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageF3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetMaskImage(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetOutput(self)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> float"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetInsidePixelValue(self)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToCooccurrenceMatrixFilterIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIF3

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterIF3 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_swigregister(itkScalarImageToCooccurrenceMatrixFilterIF3)

def itkScalarImageToCooccurrenceMatrixFilterIF4_New():
    return itkScalarImageToCooccurrenceMatrixFilterIF4.New()

class itkScalarImageToCooccurrenceMatrixFilterIF4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterIF4_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToCooccurrenceMatrixFilterIF4_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_Clone(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO4 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_SetOffsets(self, _arg)

    def GetOffsets(self):
        r"""GetOffsets(self) -> itkVectorContainerUCO4"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_GetOffsets(self)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset4 const

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_SetOffset(self, offset)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_GetNumberOfBinsPerAxis(self)

    def SetPixelValueMinMax(self, min, max):
        r"""
        SetPixelValueMinMax(self, min, max)

        Parameters
        ----------
        min: float
        max: float

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_SetPixelValueMinMax(self, min, max)

    def GetMin(self):
        r"""GetMin(self) -> float"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_GetMin(self)

    def GetMax(self):
        r"""GetMax(self) -> float"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_GetMax(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_NormalizeOff(self)

    def SetInput(self, image):
        r"""
        SetInput(self, image)

        Parameters
        ----------
        image: itkImageF4 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_SetInput(self, image)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF4"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_GetInput(self)

    def SetMaskImage(self, image):
        r"""
        SetMaskImage(self, image)

        Parameters
        ----------
        image: itkImageF4 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_SetMaskImage(self, image)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageF4"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_GetMaskImage(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_GetOutput(self)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> float"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_GetInsidePixelValue(self)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToCooccurrenceMatrixFilterIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIF4

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterIF4 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_swigregister(itkScalarImageToCooccurrenceMatrixFilterIF4)

def itkScalarImageToCooccurrenceMatrixFilterISS2_New():
    return itkScalarImageToCooccurrenceMatrixFilterISS2.New()

class itkScalarImageToCooccurrenceMatrixFilterISS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterISS2_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToCooccurrenceMatrixFilterISS2_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_Clone(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO2 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetOffsets(self, _arg)

    def GetOffsets(self):
        r"""GetOffsets(self) -> itkVectorContainerUCO2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetOffsets(self)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset2 const

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetOffset(self, offset)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetNumberOfBinsPerAxis(self)

    def SetPixelValueMinMax(self, min, max):
        r"""
        SetPixelValueMinMax(self, min, max)

        Parameters
        ----------
        min: short
        max: short

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetPixelValueMinMax(self, min, max)

    def GetMin(self):
        r"""GetMin(self) -> short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetMin(self)

    def GetMax(self):
        r"""GetMax(self) -> short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetMax(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_NormalizeOff(self)

    def SetInput(self, image):
        r"""
        SetInput(self, image)

        Parameters
        ----------
        image: itkImageSS2 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetInput(self, image)

    def GetInput(self):
        r"""GetInput(self) -> itkImageSS2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetInput(self)

    def SetMaskImage(self, image):
        r"""
        SetMaskImage(self, image)

        Parameters
        ----------
        image: itkImageSS2 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetMaskImage(self, image)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageSS2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetMaskImage(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetOutput(self)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetInsidePixelValue(self)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToCooccurrenceMatrixFilterISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterISS2

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterISS2 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_swigregister(itkScalarImageToCooccurrenceMatrixFilterISS2)

def itkScalarImageToCooccurrenceMatrixFilterISS3_New():
    return itkScalarImageToCooccurrenceMatrixFilterISS3.New()

class itkScalarImageToCooccurrenceMatrixFilterISS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterISS3_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToCooccurrenceMatrixFilterISS3_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_Clone(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO3 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetOffsets(self, _arg)

    def GetOffsets(self):
        r"""GetOffsets(self) -> itkVectorContainerUCO3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetOffsets(self)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset3 const

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetOffset(self, offset)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetNumberOfBinsPerAxis(self)

    def SetPixelValueMinMax(self, min, max):
        r"""
        SetPixelValueMinMax(self, min, max)

        Parameters
        ----------
        min: short
        max: short

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetPixelValueMinMax(self, min, max)

    def GetMin(self):
        r"""GetMin(self) -> short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetMin(self)

    def GetMax(self):
        r"""GetMax(self) -> short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetMax(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_NormalizeOff(self)

    def SetInput(self, image):
        r"""
        SetInput(self, image)

        Parameters
        ----------
        image: itkImageSS3 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetInput(self, image)

    def GetInput(self):
        r"""GetInput(self) -> itkImageSS3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetInput(self)

    def SetMaskImage(self, image):
        r"""
        SetMaskImage(self, image)

        Parameters
        ----------
        image: itkImageSS3 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetMaskImage(self, image)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageSS3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetMaskImage(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetOutput(self)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetInsidePixelValue(self)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToCooccurrenceMatrixFilterISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterISS3

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterISS3 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_swigregister(itkScalarImageToCooccurrenceMatrixFilterISS3)

def itkScalarImageToCooccurrenceMatrixFilterISS4_New():
    return itkScalarImageToCooccurrenceMatrixFilterISS4.New()

class itkScalarImageToCooccurrenceMatrixFilterISS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterISS4_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToCooccurrenceMatrixFilterISS4_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_Clone(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO4 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_SetOffsets(self, _arg)

    def GetOffsets(self):
        r"""GetOffsets(self) -> itkVectorContainerUCO4"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_GetOffsets(self)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset4 const

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_SetOffset(self, offset)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_GetNumberOfBinsPerAxis(self)

    def SetPixelValueMinMax(self, min, max):
        r"""
        SetPixelValueMinMax(self, min, max)

        Parameters
        ----------
        min: short
        max: short

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_SetPixelValueMinMax(self, min, max)

    def GetMin(self):
        r"""GetMin(self) -> short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_GetMin(self)

    def GetMax(self):
        r"""GetMax(self) -> short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_GetMax(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_NormalizeOff(self)

    def SetInput(self, image):
        r"""
        SetInput(self, image)

        Parameters
        ----------
        image: itkImageSS4 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_SetInput(self, image)

    def GetInput(self):
        r"""GetInput(self) -> itkImageSS4"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_GetInput(self)

    def SetMaskImage(self, image):
        r"""
        SetMaskImage(self, image)

        Parameters
        ----------
        image: itkImageSS4 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_SetMaskImage(self, image)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageSS4"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_GetMaskImage(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_GetOutput(self)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_GetInsidePixelValue(self)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToCooccurrenceMatrixFilterISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterISS4

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterISS4 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_swigregister(itkScalarImageToCooccurrenceMatrixFilterISS4)

def itkScalarImageToCooccurrenceMatrixFilterIUC2_New():
    return itkScalarImageToCooccurrenceMatrixFilterIUC2.New()

class itkScalarImageToCooccurrenceMatrixFilterIUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterIUC2_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToCooccurrenceMatrixFilterIUC2_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_Clone(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO2 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetOffsets(self, _arg)

    def GetOffsets(self):
        r"""GetOffsets(self) -> itkVectorContainerUCO2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetOffsets(self)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset2 const

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetOffset(self, offset)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetNumberOfBinsPerAxis(self)

    def SetPixelValueMinMax(self, min, max):
        r"""
        SetPixelValueMinMax(self, min, max)

        Parameters
        ----------
        min: unsigned char
        max: unsigned char

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetPixelValueMinMax(self, min, max)

    def GetMin(self):
        r"""GetMin(self) -> unsigned char"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetMin(self)

    def GetMax(self):
        r"""GetMax(self) -> unsigned char"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetMax(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_NormalizeOff(self)

    def SetInput(self, image):
        r"""
        SetInput(self, image)

        Parameters
        ----------
        image: itkImageUC2 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetInput(self, image)

    def GetInput(self):
        r"""GetInput(self) -> itkImageUC2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetInput(self)

    def SetMaskImage(self, image):
        r"""
        SetMaskImage(self, image)

        Parameters
        ----------
        image: itkImageUC2 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetMaskImage(self, image)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetMaskImage(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetOutput(self)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetInsidePixelValue(self)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToCooccurrenceMatrixFilterIUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIUC2

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterIUC2 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_swigregister(itkScalarImageToCooccurrenceMatrixFilterIUC2)

def itkScalarImageToCooccurrenceMatrixFilterIUC3_New():
    return itkScalarImageToCooccurrenceMatrixFilterIUC3.New()

class itkScalarImageToCooccurrenceMatrixFilterIUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterIUC3_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToCooccurrenceMatrixFilterIUC3_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_Clone(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO3 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetOffsets(self, _arg)

    def GetOffsets(self):
        r"""GetOffsets(self) -> itkVectorContainerUCO3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetOffsets(self)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset3 const

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetOffset(self, offset)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetNumberOfBinsPerAxis(self)

    def SetPixelValueMinMax(self, min, max):
        r"""
        SetPixelValueMinMax(self, min, max)

        Parameters
        ----------
        min: unsigned char
        max: unsigned char

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetPixelValueMinMax(self, min, max)

    def GetMin(self):
        r"""GetMin(self) -> unsigned char"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetMin(self)

    def GetMax(self):
        r"""GetMax(self) -> unsigned char"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetMax(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_NormalizeOff(self)

    def SetInput(self, image):
        r"""
        SetInput(self, image)

        Parameters
        ----------
        image: itkImageUC3 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetInput(self, image)

    def GetInput(self):
        r"""GetInput(self) -> itkImageUC3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetInput(self)

    def SetMaskImage(self, image):
        r"""
        SetMaskImage(self, image)

        Parameters
        ----------
        image: itkImageUC3 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetMaskImage(self, image)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetMaskImage(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetOutput(self)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetInsidePixelValue(self)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToCooccurrenceMatrixFilterIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIUC3

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterIUC3 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_swigregister(itkScalarImageToCooccurrenceMatrixFilterIUC3)

def itkScalarImageToCooccurrenceMatrixFilterIUC4_New():
    return itkScalarImageToCooccurrenceMatrixFilterIUC4.New()

class itkScalarImageToCooccurrenceMatrixFilterIUC4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterIUC4_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToCooccurrenceMatrixFilterIUC4_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_Clone(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO4 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_SetOffsets(self, _arg)

    def GetOffsets(self):
        r"""GetOffsets(self) -> itkVectorContainerUCO4"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_GetOffsets(self)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset4 const

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_SetOffset(self, offset)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_GetNumberOfBinsPerAxis(self)

    def SetPixelValueMinMax(self, min, max):
        r"""
        SetPixelValueMinMax(self, min, max)

        Parameters
        ----------
        min: unsigned char
        max: unsigned char

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_SetPixelValueMinMax(self, min, max)

    def GetMin(self):
        r"""GetMin(self) -> unsigned char"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_GetMin(self)

    def GetMax(self):
        r"""GetMax(self) -> unsigned char"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_GetMax(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_NormalizeOff(self)

    def SetInput(self, image):
        r"""
        SetInput(self, image)

        Parameters
        ----------
        image: itkImageUC4 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_SetInput(self, image)

    def GetInput(self):
        r"""GetInput(self) -> itkImageUC4"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_GetInput(self)

    def SetMaskImage(self, image):
        r"""
        SetMaskImage(self, image)

        Parameters
        ----------
        image: itkImageUC4 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_SetMaskImage(self, image)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUC4"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_GetMaskImage(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_GetOutput(self)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned char"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_GetInsidePixelValue(self)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToCooccurrenceMatrixFilterIUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIUC4

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterIUC4 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_swigregister(itkScalarImageToCooccurrenceMatrixFilterIUC4)

def itkScalarImageToCooccurrenceMatrixFilterIUS2_New():
    return itkScalarImageToCooccurrenceMatrixFilterIUS2.New()

class itkScalarImageToCooccurrenceMatrixFilterIUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterIUS2_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToCooccurrenceMatrixFilterIUS2_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_Clone(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO2 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetOffsets(self, _arg)

    def GetOffsets(self):
        r"""GetOffsets(self) -> itkVectorContainerUCO2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetOffsets(self)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset2 const

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetOffset(self, offset)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetNumberOfBinsPerAxis(self)

    def SetPixelValueMinMax(self, min, max):
        r"""
        SetPixelValueMinMax(self, min, max)

        Parameters
        ----------
        min: unsigned short
        max: unsigned short

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetPixelValueMinMax(self, min, max)

    def GetMin(self):
        r"""GetMin(self) -> unsigned short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetMin(self)

    def GetMax(self):
        r"""GetMax(self) -> unsigned short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetMax(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_NormalizeOff(self)

    def SetInput(self, image):
        r"""
        SetInput(self, image)

        Parameters
        ----------
        image: itkImageUS2 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetInput(self, image)

    def GetInput(self):
        r"""GetInput(self) -> itkImageUS2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetInput(self)

    def SetMaskImage(self, image):
        r"""
        SetMaskImage(self, image)

        Parameters
        ----------
        image: itkImageUS2 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetMaskImage(self, image)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUS2"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetMaskImage(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetOutput(self)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetInsidePixelValue(self)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToCooccurrenceMatrixFilterIUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIUS2

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterIUS2 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_swigregister(itkScalarImageToCooccurrenceMatrixFilterIUS2)

def itkScalarImageToCooccurrenceMatrixFilterIUS3_New():
    return itkScalarImageToCooccurrenceMatrixFilterIUS3.New()

class itkScalarImageToCooccurrenceMatrixFilterIUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterIUS3_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToCooccurrenceMatrixFilterIUS3_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_Clone(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO3 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetOffsets(self, _arg)

    def GetOffsets(self):
        r"""GetOffsets(self) -> itkVectorContainerUCO3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetOffsets(self)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset3 const

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetOffset(self, offset)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetNumberOfBinsPerAxis(self)

    def SetPixelValueMinMax(self, min, max):
        r"""
        SetPixelValueMinMax(self, min, max)

        Parameters
        ----------
        min: unsigned short
        max: unsigned short

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetPixelValueMinMax(self, min, max)

    def GetMin(self):
        r"""GetMin(self) -> unsigned short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetMin(self)

    def GetMax(self):
        r"""GetMax(self) -> unsigned short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetMax(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_NormalizeOff(self)

    def SetInput(self, image):
        r"""
        SetInput(self, image)

        Parameters
        ----------
        image: itkImageUS3 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetInput(self, image)

    def GetInput(self):
        r"""GetInput(self) -> itkImageUS3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetInput(self)

    def SetMaskImage(self, image):
        r"""
        SetMaskImage(self, image)

        Parameters
        ----------
        image: itkImageUS3 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetMaskImage(self, image)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUS3"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetMaskImage(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetOutput(self)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetInsidePixelValue(self)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToCooccurrenceMatrixFilterIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIUS3

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterIUS3 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_swigregister(itkScalarImageToCooccurrenceMatrixFilterIUS3)

def itkScalarImageToCooccurrenceMatrixFilterIUS4_New():
    return itkScalarImageToCooccurrenceMatrixFilterIUS4.New()

class itkScalarImageToCooccurrenceMatrixFilterIUS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToCooccurrenceMatrixFilterIUS4_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToCooccurrenceMatrixFilterIUS4_Pointer"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_Clone(self)

    def SetOffsets(self, _arg):
        r"""
        SetOffsets(self, _arg)

        Parameters
        ----------
        _arg: itkVectorContainerUCO4 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_SetOffsets(self, _arg)

    def GetOffsets(self):
        r"""GetOffsets(self) -> itkVectorContainerUCO4"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_GetOffsets(self)

    def SetOffset(self, offset):
        r"""
        SetOffset(self, offset)

        Parameters
        ----------
        offset: itkOffset4 const

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_SetOffset(self, offset)

    def SetNumberOfBinsPerAxis(self, _arg):
        r"""
        SetNumberOfBinsPerAxis(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_SetNumberOfBinsPerAxis(self, _arg)

    def GetNumberOfBinsPerAxis(self):
        r"""GetNumberOfBinsPerAxis(self) -> unsigned int"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_GetNumberOfBinsPerAxis(self)

    def SetPixelValueMinMax(self, min, max):
        r"""
        SetPixelValueMinMax(self, min, max)

        Parameters
        ----------
        min: unsigned short
        max: unsigned short

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_SetPixelValueMinMax(self, min, max)

    def GetMin(self):
        r"""GetMin(self) -> unsigned short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_GetMin(self)

    def GetMax(self):
        r"""GetMax(self) -> unsigned short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_GetMax(self)

    def SetNormalize(self, _arg):
        r"""
        SetNormalize(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_SetNormalize(self, _arg)

    def GetNormalize(self):
        r"""GetNormalize(self) -> bool"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_GetNormalize(self)

    def NormalizeOn(self):
        r"""NormalizeOn(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_NormalizeOn(self)

    def NormalizeOff(self):
        r"""NormalizeOff(self)"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_NormalizeOff(self)

    def SetInput(self, image):
        r"""
        SetInput(self, image)

        Parameters
        ----------
        image: itkImageUS4 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_SetInput(self, image)

    def GetInput(self):
        r"""GetInput(self) -> itkImageUS4"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_GetInput(self)

    def SetMaskImage(self, image):
        r"""
        SetMaskImage(self, image)

        Parameters
        ----------
        image: itkImageUS4 const *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_SetMaskImage(self, image)

    def GetMaskImage(self):
        r"""GetMaskImage(self) -> itkImageUS4"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_GetMaskImage(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_GetOutput(self)

    def SetInsidePixelValue(self, _arg):
        r"""
        SetInsidePixelValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_SetInsidePixelValue(self, _arg)

    def GetInsidePixelValue(self):
        r"""GetInsidePixelValue(self) -> unsigned short"""
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_GetInsidePixelValue(self)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToCooccurrenceMatrixFilterIUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIUS4

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterIUS4 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_swigregister(itkScalarImageToCooccurrenceMatrixFilterIUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def scalar_image_to_cooccurrence_matrix_filter(*args,  offsets=..., offset: Sequence[int]=..., number_of_bins_per_axis: int=..., pixel_value_min_max: int=..., normalize: bool=..., mask_image: itkt.Image=..., inside_pixel_value: int=...,**kwargs):
    """Functional interface for ScalarImageToCooccurrenceMatrixFilter"""
    import itk

    kwarg_typehints = { 'offsets':offsets,'offset':offset,'number_of_bins_per_axis':number_of_bins_per_axis,'pixel_value_min_max':pixel_value_min_max,'normalize':normalize,'mask_image':mask_image,'inside_pixel_value':inside_pixel_value }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ScalarImageToCooccurrenceMatrixFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def scalar_image_to_cooccurrence_matrix_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKStatistics.ScalarImageToCooccurrenceMatrixFilter
    scalar_image_to_cooccurrence_matrix_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    scalar_image_to_cooccurrence_matrix_filter.__doc__ = filter_object.__doc__



