# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKStatisticsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkScalarImageToHistogramGeneratorPython
else:
    import _itkScalarImageToHistogramGeneratorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkHistogramPython
import itk.itkSamplePython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython

def itkScalarImageToHistogramGeneratorID2_New():
    return itkScalarImageToHistogramGeneratorID2.New()

class itkScalarImageToHistogramGeneratorID2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkScalarImageToHistogramGeneratorID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToHistogramGeneratorID2_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToHistogramGeneratorID2_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID2_Clone(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID2_Compute(self)

    def SetInput(self, arg0):
        r"""
        SetInput(self, arg0)

        Parameters
        ----------
        arg0: itkImageD2 const *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID2_SetInput(self, arg0)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID2_GetOutput(self)

    def SetNumberOfBins(self, numberOfBins):
        r"""
        SetNumberOfBins(self, numberOfBins)

        Parameters
        ----------
        numberOfBins: unsigned int

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID2_SetNumberOfBins(self, numberOfBins)

    def SetMarginalScale(self, marginalScale):
        r"""
        SetMarginalScale(self, marginalScale)

        Parameters
        ----------
        marginalScale: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID2_SetMarginalScale(self, marginalScale)

    def SetHistogramMin(self, minimumValue):
        r"""
        SetHistogramMin(self, minimumValue)

        Parameters
        ----------
        minimumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID2_SetHistogramMin(self, minimumValue)

    def SetHistogramMax(self, maximumValue):
        r"""
        SetHistogramMax(self, maximumValue)

        Parameters
        ----------
        maximumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID2_SetHistogramMax(self, maximumValue)

    def SetAutoHistogramMinimumMaximum(self, autoOnOff):
        r"""
        SetAutoHistogramMinimumMaximum(self, autoOnOff)

        Parameters
        ----------
        autoOnOff: bool

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID2_SetAutoHistogramMinimumMaximum(self, autoOnOff)
    __swig_destroy__ = _itkScalarImageToHistogramGeneratorPython.delete_itkScalarImageToHistogramGeneratorID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToHistogramGeneratorID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToHistogramGeneratorID2

        Create a new object of the class itkScalarImageToHistogramGeneratorID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToHistogramGeneratorID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToHistogramGeneratorID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToHistogramGeneratorID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToHistogramGeneratorID2 in _itkScalarImageToHistogramGeneratorPython:
_itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID2_swigregister(itkScalarImageToHistogramGeneratorID2)

def itkScalarImageToHistogramGeneratorID3_New():
    return itkScalarImageToHistogramGeneratorID3.New()

class itkScalarImageToHistogramGeneratorID3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkScalarImageToHistogramGeneratorID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToHistogramGeneratorID3_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToHistogramGeneratorID3_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID3_Clone(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID3_Compute(self)

    def SetInput(self, arg0):
        r"""
        SetInput(self, arg0)

        Parameters
        ----------
        arg0: itkImageD3 const *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID3_SetInput(self, arg0)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID3_GetOutput(self)

    def SetNumberOfBins(self, numberOfBins):
        r"""
        SetNumberOfBins(self, numberOfBins)

        Parameters
        ----------
        numberOfBins: unsigned int

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID3_SetNumberOfBins(self, numberOfBins)

    def SetMarginalScale(self, marginalScale):
        r"""
        SetMarginalScale(self, marginalScale)

        Parameters
        ----------
        marginalScale: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID3_SetMarginalScale(self, marginalScale)

    def SetHistogramMin(self, minimumValue):
        r"""
        SetHistogramMin(self, minimumValue)

        Parameters
        ----------
        minimumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID3_SetHistogramMin(self, minimumValue)

    def SetHistogramMax(self, maximumValue):
        r"""
        SetHistogramMax(self, maximumValue)

        Parameters
        ----------
        maximumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID3_SetHistogramMax(self, maximumValue)

    def SetAutoHistogramMinimumMaximum(self, autoOnOff):
        r"""
        SetAutoHistogramMinimumMaximum(self, autoOnOff)

        Parameters
        ----------
        autoOnOff: bool

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID3_SetAutoHistogramMinimumMaximum(self, autoOnOff)
    __swig_destroy__ = _itkScalarImageToHistogramGeneratorPython.delete_itkScalarImageToHistogramGeneratorID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToHistogramGeneratorID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToHistogramGeneratorID3

        Create a new object of the class itkScalarImageToHistogramGeneratorID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToHistogramGeneratorID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToHistogramGeneratorID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToHistogramGeneratorID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToHistogramGeneratorID3 in _itkScalarImageToHistogramGeneratorPython:
_itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID3_swigregister(itkScalarImageToHistogramGeneratorID3)

def itkScalarImageToHistogramGeneratorID4_New():
    return itkScalarImageToHistogramGeneratorID4.New()

class itkScalarImageToHistogramGeneratorID4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkScalarImageToHistogramGeneratorID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToHistogramGeneratorID4_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToHistogramGeneratorID4_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID4_Clone(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID4_Compute(self)

    def SetInput(self, arg0):
        r"""
        SetInput(self, arg0)

        Parameters
        ----------
        arg0: itkImageD4 const *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID4_SetInput(self, arg0)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID4_GetOutput(self)

    def SetNumberOfBins(self, numberOfBins):
        r"""
        SetNumberOfBins(self, numberOfBins)

        Parameters
        ----------
        numberOfBins: unsigned int

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID4_SetNumberOfBins(self, numberOfBins)

    def SetMarginalScale(self, marginalScale):
        r"""
        SetMarginalScale(self, marginalScale)

        Parameters
        ----------
        marginalScale: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID4_SetMarginalScale(self, marginalScale)

    def SetHistogramMin(self, minimumValue):
        r"""
        SetHistogramMin(self, minimumValue)

        Parameters
        ----------
        minimumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID4_SetHistogramMin(self, minimumValue)

    def SetHistogramMax(self, maximumValue):
        r"""
        SetHistogramMax(self, maximumValue)

        Parameters
        ----------
        maximumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID4_SetHistogramMax(self, maximumValue)

    def SetAutoHistogramMinimumMaximum(self, autoOnOff):
        r"""
        SetAutoHistogramMinimumMaximum(self, autoOnOff)

        Parameters
        ----------
        autoOnOff: bool

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID4_SetAutoHistogramMinimumMaximum(self, autoOnOff)
    __swig_destroy__ = _itkScalarImageToHistogramGeneratorPython.delete_itkScalarImageToHistogramGeneratorID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToHistogramGeneratorID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToHistogramGeneratorID4

        Create a new object of the class itkScalarImageToHistogramGeneratorID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToHistogramGeneratorID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToHistogramGeneratorID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToHistogramGeneratorID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToHistogramGeneratorID4 in _itkScalarImageToHistogramGeneratorPython:
_itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorID4_swigregister(itkScalarImageToHistogramGeneratorID4)

def itkScalarImageToHistogramGeneratorIF2_New():
    return itkScalarImageToHistogramGeneratorIF2.New()

class itkScalarImageToHistogramGeneratorIF2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkScalarImageToHistogramGeneratorIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToHistogramGeneratorIF2_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToHistogramGeneratorIF2_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF2_Clone(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF2_Compute(self)

    def SetInput(self, arg0):
        r"""
        SetInput(self, arg0)

        Parameters
        ----------
        arg0: itkImageF2 const *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF2_SetInput(self, arg0)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF2_GetOutput(self)

    def SetNumberOfBins(self, numberOfBins):
        r"""
        SetNumberOfBins(self, numberOfBins)

        Parameters
        ----------
        numberOfBins: unsigned int

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF2_SetNumberOfBins(self, numberOfBins)

    def SetMarginalScale(self, marginalScale):
        r"""
        SetMarginalScale(self, marginalScale)

        Parameters
        ----------
        marginalScale: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF2_SetMarginalScale(self, marginalScale)

    def SetHistogramMin(self, minimumValue):
        r"""
        SetHistogramMin(self, minimumValue)

        Parameters
        ----------
        minimumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF2_SetHistogramMin(self, minimumValue)

    def SetHistogramMax(self, maximumValue):
        r"""
        SetHistogramMax(self, maximumValue)

        Parameters
        ----------
        maximumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF2_SetHistogramMax(self, maximumValue)

    def SetAutoHistogramMinimumMaximum(self, autoOnOff):
        r"""
        SetAutoHistogramMinimumMaximum(self, autoOnOff)

        Parameters
        ----------
        autoOnOff: bool

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF2_SetAutoHistogramMinimumMaximum(self, autoOnOff)
    __swig_destroy__ = _itkScalarImageToHistogramGeneratorPython.delete_itkScalarImageToHistogramGeneratorIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToHistogramGeneratorIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToHistogramGeneratorIF2

        Create a new object of the class itkScalarImageToHistogramGeneratorIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToHistogramGeneratorIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToHistogramGeneratorIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToHistogramGeneratorIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToHistogramGeneratorIF2 in _itkScalarImageToHistogramGeneratorPython:
_itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF2_swigregister(itkScalarImageToHistogramGeneratorIF2)

def itkScalarImageToHistogramGeneratorIF3_New():
    return itkScalarImageToHistogramGeneratorIF3.New()

class itkScalarImageToHistogramGeneratorIF3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkScalarImageToHistogramGeneratorIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToHistogramGeneratorIF3_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToHistogramGeneratorIF3_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF3_Clone(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF3_Compute(self)

    def SetInput(self, arg0):
        r"""
        SetInput(self, arg0)

        Parameters
        ----------
        arg0: itkImageF3 const *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF3_SetInput(self, arg0)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF3_GetOutput(self)

    def SetNumberOfBins(self, numberOfBins):
        r"""
        SetNumberOfBins(self, numberOfBins)

        Parameters
        ----------
        numberOfBins: unsigned int

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF3_SetNumberOfBins(self, numberOfBins)

    def SetMarginalScale(self, marginalScale):
        r"""
        SetMarginalScale(self, marginalScale)

        Parameters
        ----------
        marginalScale: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF3_SetMarginalScale(self, marginalScale)

    def SetHistogramMin(self, minimumValue):
        r"""
        SetHistogramMin(self, minimumValue)

        Parameters
        ----------
        minimumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF3_SetHistogramMin(self, minimumValue)

    def SetHistogramMax(self, maximumValue):
        r"""
        SetHistogramMax(self, maximumValue)

        Parameters
        ----------
        maximumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF3_SetHistogramMax(self, maximumValue)

    def SetAutoHistogramMinimumMaximum(self, autoOnOff):
        r"""
        SetAutoHistogramMinimumMaximum(self, autoOnOff)

        Parameters
        ----------
        autoOnOff: bool

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF3_SetAutoHistogramMinimumMaximum(self, autoOnOff)
    __swig_destroy__ = _itkScalarImageToHistogramGeneratorPython.delete_itkScalarImageToHistogramGeneratorIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToHistogramGeneratorIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToHistogramGeneratorIF3

        Create a new object of the class itkScalarImageToHistogramGeneratorIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToHistogramGeneratorIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToHistogramGeneratorIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToHistogramGeneratorIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToHistogramGeneratorIF3 in _itkScalarImageToHistogramGeneratorPython:
_itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF3_swigregister(itkScalarImageToHistogramGeneratorIF3)

def itkScalarImageToHistogramGeneratorIF4_New():
    return itkScalarImageToHistogramGeneratorIF4.New()

class itkScalarImageToHistogramGeneratorIF4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkScalarImageToHistogramGeneratorIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToHistogramGeneratorIF4_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToHistogramGeneratorIF4_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF4_Clone(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF4_Compute(self)

    def SetInput(self, arg0):
        r"""
        SetInput(self, arg0)

        Parameters
        ----------
        arg0: itkImageF4 const *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF4_SetInput(self, arg0)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF4_GetOutput(self)

    def SetNumberOfBins(self, numberOfBins):
        r"""
        SetNumberOfBins(self, numberOfBins)

        Parameters
        ----------
        numberOfBins: unsigned int

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF4_SetNumberOfBins(self, numberOfBins)

    def SetMarginalScale(self, marginalScale):
        r"""
        SetMarginalScale(self, marginalScale)

        Parameters
        ----------
        marginalScale: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF4_SetMarginalScale(self, marginalScale)

    def SetHistogramMin(self, minimumValue):
        r"""
        SetHistogramMin(self, minimumValue)

        Parameters
        ----------
        minimumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF4_SetHistogramMin(self, minimumValue)

    def SetHistogramMax(self, maximumValue):
        r"""
        SetHistogramMax(self, maximumValue)

        Parameters
        ----------
        maximumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF4_SetHistogramMax(self, maximumValue)

    def SetAutoHistogramMinimumMaximum(self, autoOnOff):
        r"""
        SetAutoHistogramMinimumMaximum(self, autoOnOff)

        Parameters
        ----------
        autoOnOff: bool

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF4_SetAutoHistogramMinimumMaximum(self, autoOnOff)
    __swig_destroy__ = _itkScalarImageToHistogramGeneratorPython.delete_itkScalarImageToHistogramGeneratorIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToHistogramGeneratorIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToHistogramGeneratorIF4

        Create a new object of the class itkScalarImageToHistogramGeneratorIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToHistogramGeneratorIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToHistogramGeneratorIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToHistogramGeneratorIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToHistogramGeneratorIF4 in _itkScalarImageToHistogramGeneratorPython:
_itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIF4_swigregister(itkScalarImageToHistogramGeneratorIF4)

def itkScalarImageToHistogramGeneratorISS2_New():
    return itkScalarImageToHistogramGeneratorISS2.New()

class itkScalarImageToHistogramGeneratorISS2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkScalarImageToHistogramGeneratorISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToHistogramGeneratorISS2_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToHistogramGeneratorISS2_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS2_Clone(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS2_Compute(self)

    def SetInput(self, arg0):
        r"""
        SetInput(self, arg0)

        Parameters
        ----------
        arg0: itkImageSS2 const *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS2_SetInput(self, arg0)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS2_GetOutput(self)

    def SetNumberOfBins(self, numberOfBins):
        r"""
        SetNumberOfBins(self, numberOfBins)

        Parameters
        ----------
        numberOfBins: unsigned int

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS2_SetNumberOfBins(self, numberOfBins)

    def SetMarginalScale(self, marginalScale):
        r"""
        SetMarginalScale(self, marginalScale)

        Parameters
        ----------
        marginalScale: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS2_SetMarginalScale(self, marginalScale)

    def SetHistogramMin(self, minimumValue):
        r"""
        SetHistogramMin(self, minimumValue)

        Parameters
        ----------
        minimumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS2_SetHistogramMin(self, minimumValue)

    def SetHistogramMax(self, maximumValue):
        r"""
        SetHistogramMax(self, maximumValue)

        Parameters
        ----------
        maximumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS2_SetHistogramMax(self, maximumValue)

    def SetAutoHistogramMinimumMaximum(self, autoOnOff):
        r"""
        SetAutoHistogramMinimumMaximum(self, autoOnOff)

        Parameters
        ----------
        autoOnOff: bool

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS2_SetAutoHistogramMinimumMaximum(self, autoOnOff)
    __swig_destroy__ = _itkScalarImageToHistogramGeneratorPython.delete_itkScalarImageToHistogramGeneratorISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToHistogramGeneratorISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToHistogramGeneratorISS2

        Create a new object of the class itkScalarImageToHistogramGeneratorISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToHistogramGeneratorISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToHistogramGeneratorISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToHistogramGeneratorISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToHistogramGeneratorISS2 in _itkScalarImageToHistogramGeneratorPython:
_itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS2_swigregister(itkScalarImageToHistogramGeneratorISS2)

def itkScalarImageToHistogramGeneratorISS3_New():
    return itkScalarImageToHistogramGeneratorISS3.New()

class itkScalarImageToHistogramGeneratorISS3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkScalarImageToHistogramGeneratorISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToHistogramGeneratorISS3_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToHistogramGeneratorISS3_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS3_Clone(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS3_Compute(self)

    def SetInput(self, arg0):
        r"""
        SetInput(self, arg0)

        Parameters
        ----------
        arg0: itkImageSS3 const *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS3_SetInput(self, arg0)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS3_GetOutput(self)

    def SetNumberOfBins(self, numberOfBins):
        r"""
        SetNumberOfBins(self, numberOfBins)

        Parameters
        ----------
        numberOfBins: unsigned int

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS3_SetNumberOfBins(self, numberOfBins)

    def SetMarginalScale(self, marginalScale):
        r"""
        SetMarginalScale(self, marginalScale)

        Parameters
        ----------
        marginalScale: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS3_SetMarginalScale(self, marginalScale)

    def SetHistogramMin(self, minimumValue):
        r"""
        SetHistogramMin(self, minimumValue)

        Parameters
        ----------
        minimumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS3_SetHistogramMin(self, minimumValue)

    def SetHistogramMax(self, maximumValue):
        r"""
        SetHistogramMax(self, maximumValue)

        Parameters
        ----------
        maximumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS3_SetHistogramMax(self, maximumValue)

    def SetAutoHistogramMinimumMaximum(self, autoOnOff):
        r"""
        SetAutoHistogramMinimumMaximum(self, autoOnOff)

        Parameters
        ----------
        autoOnOff: bool

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS3_SetAutoHistogramMinimumMaximum(self, autoOnOff)
    __swig_destroy__ = _itkScalarImageToHistogramGeneratorPython.delete_itkScalarImageToHistogramGeneratorISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToHistogramGeneratorISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToHistogramGeneratorISS3

        Create a new object of the class itkScalarImageToHistogramGeneratorISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToHistogramGeneratorISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToHistogramGeneratorISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToHistogramGeneratorISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToHistogramGeneratorISS3 in _itkScalarImageToHistogramGeneratorPython:
_itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS3_swigregister(itkScalarImageToHistogramGeneratorISS3)

def itkScalarImageToHistogramGeneratorISS4_New():
    return itkScalarImageToHistogramGeneratorISS4.New()

class itkScalarImageToHistogramGeneratorISS4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkScalarImageToHistogramGeneratorISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToHistogramGeneratorISS4_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToHistogramGeneratorISS4_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS4_Clone(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS4_Compute(self)

    def SetInput(self, arg0):
        r"""
        SetInput(self, arg0)

        Parameters
        ----------
        arg0: itkImageSS4 const *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS4_SetInput(self, arg0)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS4_GetOutput(self)

    def SetNumberOfBins(self, numberOfBins):
        r"""
        SetNumberOfBins(self, numberOfBins)

        Parameters
        ----------
        numberOfBins: unsigned int

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS4_SetNumberOfBins(self, numberOfBins)

    def SetMarginalScale(self, marginalScale):
        r"""
        SetMarginalScale(self, marginalScale)

        Parameters
        ----------
        marginalScale: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS4_SetMarginalScale(self, marginalScale)

    def SetHistogramMin(self, minimumValue):
        r"""
        SetHistogramMin(self, minimumValue)

        Parameters
        ----------
        minimumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS4_SetHistogramMin(self, minimumValue)

    def SetHistogramMax(self, maximumValue):
        r"""
        SetHistogramMax(self, maximumValue)

        Parameters
        ----------
        maximumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS4_SetHistogramMax(self, maximumValue)

    def SetAutoHistogramMinimumMaximum(self, autoOnOff):
        r"""
        SetAutoHistogramMinimumMaximum(self, autoOnOff)

        Parameters
        ----------
        autoOnOff: bool

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS4_SetAutoHistogramMinimumMaximum(self, autoOnOff)
    __swig_destroy__ = _itkScalarImageToHistogramGeneratorPython.delete_itkScalarImageToHistogramGeneratorISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToHistogramGeneratorISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToHistogramGeneratorISS4

        Create a new object of the class itkScalarImageToHistogramGeneratorISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToHistogramGeneratorISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToHistogramGeneratorISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToHistogramGeneratorISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToHistogramGeneratorISS4 in _itkScalarImageToHistogramGeneratorPython:
_itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorISS4_swigregister(itkScalarImageToHistogramGeneratorISS4)

def itkScalarImageToHistogramGeneratorIUC2_New():
    return itkScalarImageToHistogramGeneratorIUC2.New()

class itkScalarImageToHistogramGeneratorIUC2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkScalarImageToHistogramGeneratorIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToHistogramGeneratorIUC2_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToHistogramGeneratorIUC2_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC2_Clone(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC2_Compute(self)

    def SetInput(self, arg0):
        r"""
        SetInput(self, arg0)

        Parameters
        ----------
        arg0: itkImageUC2 const *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC2_SetInput(self, arg0)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC2_GetOutput(self)

    def SetNumberOfBins(self, numberOfBins):
        r"""
        SetNumberOfBins(self, numberOfBins)

        Parameters
        ----------
        numberOfBins: unsigned int

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC2_SetNumberOfBins(self, numberOfBins)

    def SetMarginalScale(self, marginalScale):
        r"""
        SetMarginalScale(self, marginalScale)

        Parameters
        ----------
        marginalScale: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC2_SetMarginalScale(self, marginalScale)

    def SetHistogramMin(self, minimumValue):
        r"""
        SetHistogramMin(self, minimumValue)

        Parameters
        ----------
        minimumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC2_SetHistogramMin(self, minimumValue)

    def SetHistogramMax(self, maximumValue):
        r"""
        SetHistogramMax(self, maximumValue)

        Parameters
        ----------
        maximumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC2_SetHistogramMax(self, maximumValue)

    def SetAutoHistogramMinimumMaximum(self, autoOnOff):
        r"""
        SetAutoHistogramMinimumMaximum(self, autoOnOff)

        Parameters
        ----------
        autoOnOff: bool

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC2_SetAutoHistogramMinimumMaximum(self, autoOnOff)
    __swig_destroy__ = _itkScalarImageToHistogramGeneratorPython.delete_itkScalarImageToHistogramGeneratorIUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToHistogramGeneratorIUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToHistogramGeneratorIUC2

        Create a new object of the class itkScalarImageToHistogramGeneratorIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToHistogramGeneratorIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToHistogramGeneratorIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToHistogramGeneratorIUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToHistogramGeneratorIUC2 in _itkScalarImageToHistogramGeneratorPython:
_itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC2_swigregister(itkScalarImageToHistogramGeneratorIUC2)

def itkScalarImageToHistogramGeneratorIUC3_New():
    return itkScalarImageToHistogramGeneratorIUC3.New()

class itkScalarImageToHistogramGeneratorIUC3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkScalarImageToHistogramGeneratorIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToHistogramGeneratorIUC3_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToHistogramGeneratorIUC3_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC3_Clone(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC3_Compute(self)

    def SetInput(self, arg0):
        r"""
        SetInput(self, arg0)

        Parameters
        ----------
        arg0: itkImageUC3 const *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC3_SetInput(self, arg0)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC3_GetOutput(self)

    def SetNumberOfBins(self, numberOfBins):
        r"""
        SetNumberOfBins(self, numberOfBins)

        Parameters
        ----------
        numberOfBins: unsigned int

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC3_SetNumberOfBins(self, numberOfBins)

    def SetMarginalScale(self, marginalScale):
        r"""
        SetMarginalScale(self, marginalScale)

        Parameters
        ----------
        marginalScale: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC3_SetMarginalScale(self, marginalScale)

    def SetHistogramMin(self, minimumValue):
        r"""
        SetHistogramMin(self, minimumValue)

        Parameters
        ----------
        minimumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC3_SetHistogramMin(self, minimumValue)

    def SetHistogramMax(self, maximumValue):
        r"""
        SetHistogramMax(self, maximumValue)

        Parameters
        ----------
        maximumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC3_SetHistogramMax(self, maximumValue)

    def SetAutoHistogramMinimumMaximum(self, autoOnOff):
        r"""
        SetAutoHistogramMinimumMaximum(self, autoOnOff)

        Parameters
        ----------
        autoOnOff: bool

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC3_SetAutoHistogramMinimumMaximum(self, autoOnOff)
    __swig_destroy__ = _itkScalarImageToHistogramGeneratorPython.delete_itkScalarImageToHistogramGeneratorIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToHistogramGeneratorIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToHistogramGeneratorIUC3

        Create a new object of the class itkScalarImageToHistogramGeneratorIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToHistogramGeneratorIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToHistogramGeneratorIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToHistogramGeneratorIUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToHistogramGeneratorIUC3 in _itkScalarImageToHistogramGeneratorPython:
_itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC3_swigregister(itkScalarImageToHistogramGeneratorIUC3)

def itkScalarImageToHistogramGeneratorIUC4_New():
    return itkScalarImageToHistogramGeneratorIUC4.New()

class itkScalarImageToHistogramGeneratorIUC4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkScalarImageToHistogramGeneratorIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToHistogramGeneratorIUC4_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToHistogramGeneratorIUC4_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC4_Clone(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC4_Compute(self)

    def SetInput(self, arg0):
        r"""
        SetInput(self, arg0)

        Parameters
        ----------
        arg0: itkImageUC4 const *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC4_SetInput(self, arg0)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC4_GetOutput(self)

    def SetNumberOfBins(self, numberOfBins):
        r"""
        SetNumberOfBins(self, numberOfBins)

        Parameters
        ----------
        numberOfBins: unsigned int

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC4_SetNumberOfBins(self, numberOfBins)

    def SetMarginalScale(self, marginalScale):
        r"""
        SetMarginalScale(self, marginalScale)

        Parameters
        ----------
        marginalScale: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC4_SetMarginalScale(self, marginalScale)

    def SetHistogramMin(self, minimumValue):
        r"""
        SetHistogramMin(self, minimumValue)

        Parameters
        ----------
        minimumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC4_SetHistogramMin(self, minimumValue)

    def SetHistogramMax(self, maximumValue):
        r"""
        SetHistogramMax(self, maximumValue)

        Parameters
        ----------
        maximumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC4_SetHistogramMax(self, maximumValue)

    def SetAutoHistogramMinimumMaximum(self, autoOnOff):
        r"""
        SetAutoHistogramMinimumMaximum(self, autoOnOff)

        Parameters
        ----------
        autoOnOff: bool

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC4_SetAutoHistogramMinimumMaximum(self, autoOnOff)
    __swig_destroy__ = _itkScalarImageToHistogramGeneratorPython.delete_itkScalarImageToHistogramGeneratorIUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToHistogramGeneratorIUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToHistogramGeneratorIUC4

        Create a new object of the class itkScalarImageToHistogramGeneratorIUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToHistogramGeneratorIUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToHistogramGeneratorIUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToHistogramGeneratorIUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToHistogramGeneratorIUC4 in _itkScalarImageToHistogramGeneratorPython:
_itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUC4_swigregister(itkScalarImageToHistogramGeneratorIUC4)

def itkScalarImageToHistogramGeneratorIUS2_New():
    return itkScalarImageToHistogramGeneratorIUS2.New()

class itkScalarImageToHistogramGeneratorIUS2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkScalarImageToHistogramGeneratorIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToHistogramGeneratorIUS2_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToHistogramGeneratorIUS2_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS2_Clone(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS2_Compute(self)

    def SetInput(self, arg0):
        r"""
        SetInput(self, arg0)

        Parameters
        ----------
        arg0: itkImageUS2 const *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS2_SetInput(self, arg0)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS2_GetOutput(self)

    def SetNumberOfBins(self, numberOfBins):
        r"""
        SetNumberOfBins(self, numberOfBins)

        Parameters
        ----------
        numberOfBins: unsigned int

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS2_SetNumberOfBins(self, numberOfBins)

    def SetMarginalScale(self, marginalScale):
        r"""
        SetMarginalScale(self, marginalScale)

        Parameters
        ----------
        marginalScale: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS2_SetMarginalScale(self, marginalScale)

    def SetHistogramMin(self, minimumValue):
        r"""
        SetHistogramMin(self, minimumValue)

        Parameters
        ----------
        minimumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS2_SetHistogramMin(self, minimumValue)

    def SetHistogramMax(self, maximumValue):
        r"""
        SetHistogramMax(self, maximumValue)

        Parameters
        ----------
        maximumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS2_SetHistogramMax(self, maximumValue)

    def SetAutoHistogramMinimumMaximum(self, autoOnOff):
        r"""
        SetAutoHistogramMinimumMaximum(self, autoOnOff)

        Parameters
        ----------
        autoOnOff: bool

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS2_SetAutoHistogramMinimumMaximum(self, autoOnOff)
    __swig_destroy__ = _itkScalarImageToHistogramGeneratorPython.delete_itkScalarImageToHistogramGeneratorIUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToHistogramGeneratorIUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToHistogramGeneratorIUS2

        Create a new object of the class itkScalarImageToHistogramGeneratorIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToHistogramGeneratorIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToHistogramGeneratorIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToHistogramGeneratorIUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToHistogramGeneratorIUS2 in _itkScalarImageToHistogramGeneratorPython:
_itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS2_swigregister(itkScalarImageToHistogramGeneratorIUS2)

def itkScalarImageToHistogramGeneratorIUS3_New():
    return itkScalarImageToHistogramGeneratorIUS3.New()

class itkScalarImageToHistogramGeneratorIUS3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkScalarImageToHistogramGeneratorIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToHistogramGeneratorIUS3_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToHistogramGeneratorIUS3_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS3_Clone(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS3_Compute(self)

    def SetInput(self, arg0):
        r"""
        SetInput(self, arg0)

        Parameters
        ----------
        arg0: itkImageUS3 const *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS3_SetInput(self, arg0)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS3_GetOutput(self)

    def SetNumberOfBins(self, numberOfBins):
        r"""
        SetNumberOfBins(self, numberOfBins)

        Parameters
        ----------
        numberOfBins: unsigned int

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS3_SetNumberOfBins(self, numberOfBins)

    def SetMarginalScale(self, marginalScale):
        r"""
        SetMarginalScale(self, marginalScale)

        Parameters
        ----------
        marginalScale: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS3_SetMarginalScale(self, marginalScale)

    def SetHistogramMin(self, minimumValue):
        r"""
        SetHistogramMin(self, minimumValue)

        Parameters
        ----------
        minimumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS3_SetHistogramMin(self, minimumValue)

    def SetHistogramMax(self, maximumValue):
        r"""
        SetHistogramMax(self, maximumValue)

        Parameters
        ----------
        maximumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS3_SetHistogramMax(self, maximumValue)

    def SetAutoHistogramMinimumMaximum(self, autoOnOff):
        r"""
        SetAutoHistogramMinimumMaximum(self, autoOnOff)

        Parameters
        ----------
        autoOnOff: bool

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS3_SetAutoHistogramMinimumMaximum(self, autoOnOff)
    __swig_destroy__ = _itkScalarImageToHistogramGeneratorPython.delete_itkScalarImageToHistogramGeneratorIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToHistogramGeneratorIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToHistogramGeneratorIUS3

        Create a new object of the class itkScalarImageToHistogramGeneratorIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToHistogramGeneratorIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToHistogramGeneratorIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToHistogramGeneratorIUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToHistogramGeneratorIUS3 in _itkScalarImageToHistogramGeneratorPython:
_itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS3_swigregister(itkScalarImageToHistogramGeneratorIUS3)

def itkScalarImageToHistogramGeneratorIUS4_New():
    return itkScalarImageToHistogramGeneratorIUS4.New()

class itkScalarImageToHistogramGeneratorIUS4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkScalarImageToHistogramGeneratorIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkScalarImageToHistogramGeneratorIUS4_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkScalarImageToHistogramGeneratorIUS4_Pointer"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS4_Clone(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS4_Compute(self)

    def SetInput(self, arg0):
        r"""
        SetInput(self, arg0)

        Parameters
        ----------
        arg0: itkImageUS4 const *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS4_SetInput(self, arg0)

    def GetOutput(self):
        r"""GetOutput(self) -> itkHistogramD"""
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS4_GetOutput(self)

    def SetNumberOfBins(self, numberOfBins):
        r"""
        SetNumberOfBins(self, numberOfBins)

        Parameters
        ----------
        numberOfBins: unsigned int

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS4_SetNumberOfBins(self, numberOfBins)

    def SetMarginalScale(self, marginalScale):
        r"""
        SetMarginalScale(self, marginalScale)

        Parameters
        ----------
        marginalScale: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS4_SetMarginalScale(self, marginalScale)

    def SetHistogramMin(self, minimumValue):
        r"""
        SetHistogramMin(self, minimumValue)

        Parameters
        ----------
        minimumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS4_SetHistogramMin(self, minimumValue)

    def SetHistogramMax(self, maximumValue):
        r"""
        SetHistogramMax(self, maximumValue)

        Parameters
        ----------
        maximumValue: double

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS4_SetHistogramMax(self, maximumValue)

    def SetAutoHistogramMinimumMaximum(self, autoOnOff):
        r"""
        SetAutoHistogramMinimumMaximum(self, autoOnOff)

        Parameters
        ----------
        autoOnOff: bool

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS4_SetAutoHistogramMinimumMaximum(self, autoOnOff)
    __swig_destroy__ = _itkScalarImageToHistogramGeneratorPython.delete_itkScalarImageToHistogramGeneratorIUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkScalarImageToHistogramGeneratorIUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkScalarImageToHistogramGeneratorIUS4

        Create a new object of the class itkScalarImageToHistogramGeneratorIUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToHistogramGeneratorIUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToHistogramGeneratorIUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToHistogramGeneratorIUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToHistogramGeneratorIUS4 in _itkScalarImageToHistogramGeneratorPython:
_itkScalarImageToHistogramGeneratorPython.itkScalarImageToHistogramGeneratorIUS4_swigregister(itkScalarImageToHistogramGeneratorIUS4)

