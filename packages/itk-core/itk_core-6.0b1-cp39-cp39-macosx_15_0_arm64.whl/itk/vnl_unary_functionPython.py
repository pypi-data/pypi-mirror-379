# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _vnl_unary_functionPython
else:
    import _vnl_unary_functionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
class vnl_unary_functionD_vnl_vectorD(object):
    r"""Proxy of C++ vnl_unary_functionD_vnl_vectorD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def f(self, i):
        r"""
        f(self, i) -> double

        Parameters
        ----------
        i: vnl_vectorD const &

        """
        return _vnl_unary_functionPython.vnl_unary_functionD_vnl_vectorD_f(self, i)

    def get_range_min(self):
        r"""get_range_min(self) -> double"""
        return _vnl_unary_functionPython.vnl_unary_functionD_vnl_vectorD_get_range_min(self)

    def get_range_max(self):
        r"""get_range_max(self) -> double"""
        return _vnl_unary_functionPython.vnl_unary_functionD_vnl_vectorD_get_range_max(self)

    def Copy(self):
        r"""Copy(self) -> vnl_unary_functionD_vnl_vectorD"""
        return _vnl_unary_functionPython.vnl_unary_functionD_vnl_vectorD_Copy(self)
    __swig_destroy__ = _vnl_unary_functionPython.delete_vnl_unary_functionD_vnl_vectorD

# Register vnl_unary_functionD_vnl_vectorD in _vnl_unary_functionPython:
_vnl_unary_functionPython.vnl_unary_functionD_vnl_vectorD_swigregister(vnl_unary_functionD_vnl_vectorD)

