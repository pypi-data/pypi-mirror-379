# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageFunctionPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLabelImageGaussianInterpolateImageFunctionPython
else:
    import _itkLabelImageGaussianInterpolateImageFunctionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkGaussianInterpolateImageFunctionPython
import itk.itkInterpolateImageFunctionPython
import itk.itkImageFunctionBasePython
import itk.itkFunctionBasePython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkArrayPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython

def itkLabelImageGaussianInterpolateImageFunctionISS2D_New():
    return itkLabelImageGaussianInterpolateImageFunctionISS2D.New()

class itkLabelImageGaussianInterpolateImageFunctionISS2D(itk.itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS2D):
    r"""Proxy of C++ itkLabelImageGaussianInterpolateImageFunctionISS2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLabelImageGaussianInterpolateImageFunctionISS2D_Pointer"""
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionISS2D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLabelImageGaussianInterpolateImageFunctionISS2D_Pointer"""
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionISS2D_Clone(self)
    __swig_destroy__ = _itkLabelImageGaussianInterpolateImageFunctionPython.delete_itkLabelImageGaussianInterpolateImageFunctionISS2D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLabelImageGaussianInterpolateImageFunctionISS2D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionISS2D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLabelImageGaussianInterpolateImageFunctionISS2D

        Create a new object of the class itkLabelImageGaussianInterpolateImageFunctionISS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelImageGaussianInterpolateImageFunctionISS2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelImageGaussianInterpolateImageFunctionISS2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelImageGaussianInterpolateImageFunctionISS2D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelImageGaussianInterpolateImageFunctionISS2D in _itkLabelImageGaussianInterpolateImageFunctionPython:
_itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionISS2D_swigregister(itkLabelImageGaussianInterpolateImageFunctionISS2D)

def itkLabelImageGaussianInterpolateImageFunctionISS3D_New():
    return itkLabelImageGaussianInterpolateImageFunctionISS3D.New()

class itkLabelImageGaussianInterpolateImageFunctionISS3D(itk.itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS3D):
    r"""Proxy of C++ itkLabelImageGaussianInterpolateImageFunctionISS3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLabelImageGaussianInterpolateImageFunctionISS3D_Pointer"""
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionISS3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLabelImageGaussianInterpolateImageFunctionISS3D_Pointer"""
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionISS3D_Clone(self)
    __swig_destroy__ = _itkLabelImageGaussianInterpolateImageFunctionPython.delete_itkLabelImageGaussianInterpolateImageFunctionISS3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLabelImageGaussianInterpolateImageFunctionISS3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionISS3D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLabelImageGaussianInterpolateImageFunctionISS3D

        Create a new object of the class itkLabelImageGaussianInterpolateImageFunctionISS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelImageGaussianInterpolateImageFunctionISS3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelImageGaussianInterpolateImageFunctionISS3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelImageGaussianInterpolateImageFunctionISS3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelImageGaussianInterpolateImageFunctionISS3D in _itkLabelImageGaussianInterpolateImageFunctionPython:
_itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionISS3D_swigregister(itkLabelImageGaussianInterpolateImageFunctionISS3D)

def itkLabelImageGaussianInterpolateImageFunctionISS4D_New():
    return itkLabelImageGaussianInterpolateImageFunctionISS4D.New()

class itkLabelImageGaussianInterpolateImageFunctionISS4D(itk.itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionISS4D):
    r"""Proxy of C++ itkLabelImageGaussianInterpolateImageFunctionISS4D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLabelImageGaussianInterpolateImageFunctionISS4D_Pointer"""
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionISS4D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLabelImageGaussianInterpolateImageFunctionISS4D_Pointer"""
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionISS4D_Clone(self)
    __swig_destroy__ = _itkLabelImageGaussianInterpolateImageFunctionPython.delete_itkLabelImageGaussianInterpolateImageFunctionISS4D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLabelImageGaussianInterpolateImageFunctionISS4D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionISS4D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLabelImageGaussianInterpolateImageFunctionISS4D

        Create a new object of the class itkLabelImageGaussianInterpolateImageFunctionISS4D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelImageGaussianInterpolateImageFunctionISS4D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelImageGaussianInterpolateImageFunctionISS4D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelImageGaussianInterpolateImageFunctionISS4D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelImageGaussianInterpolateImageFunctionISS4D in _itkLabelImageGaussianInterpolateImageFunctionPython:
_itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionISS4D_swigregister(itkLabelImageGaussianInterpolateImageFunctionISS4D)

def itkLabelImageGaussianInterpolateImageFunctionIUC2D_New():
    return itkLabelImageGaussianInterpolateImageFunctionIUC2D.New()

class itkLabelImageGaussianInterpolateImageFunctionIUC2D(itk.itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC2D):
    r"""Proxy of C++ itkLabelImageGaussianInterpolateImageFunctionIUC2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLabelImageGaussianInterpolateImageFunctionIUC2D_Pointer"""
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionIUC2D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLabelImageGaussianInterpolateImageFunctionIUC2D_Pointer"""
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionIUC2D_Clone(self)
    __swig_destroy__ = _itkLabelImageGaussianInterpolateImageFunctionPython.delete_itkLabelImageGaussianInterpolateImageFunctionIUC2D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLabelImageGaussianInterpolateImageFunctionIUC2D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionIUC2D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLabelImageGaussianInterpolateImageFunctionIUC2D

        Create a new object of the class itkLabelImageGaussianInterpolateImageFunctionIUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelImageGaussianInterpolateImageFunctionIUC2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelImageGaussianInterpolateImageFunctionIUC2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelImageGaussianInterpolateImageFunctionIUC2D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelImageGaussianInterpolateImageFunctionIUC2D in _itkLabelImageGaussianInterpolateImageFunctionPython:
_itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionIUC2D_swigregister(itkLabelImageGaussianInterpolateImageFunctionIUC2D)

def itkLabelImageGaussianInterpolateImageFunctionIUC3D_New():
    return itkLabelImageGaussianInterpolateImageFunctionIUC3D.New()

class itkLabelImageGaussianInterpolateImageFunctionIUC3D(itk.itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC3D):
    r"""Proxy of C++ itkLabelImageGaussianInterpolateImageFunctionIUC3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLabelImageGaussianInterpolateImageFunctionIUC3D_Pointer"""
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionIUC3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLabelImageGaussianInterpolateImageFunctionIUC3D_Pointer"""
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionIUC3D_Clone(self)
    __swig_destroy__ = _itkLabelImageGaussianInterpolateImageFunctionPython.delete_itkLabelImageGaussianInterpolateImageFunctionIUC3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLabelImageGaussianInterpolateImageFunctionIUC3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionIUC3D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLabelImageGaussianInterpolateImageFunctionIUC3D

        Create a new object of the class itkLabelImageGaussianInterpolateImageFunctionIUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelImageGaussianInterpolateImageFunctionIUC3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelImageGaussianInterpolateImageFunctionIUC3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelImageGaussianInterpolateImageFunctionIUC3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelImageGaussianInterpolateImageFunctionIUC3D in _itkLabelImageGaussianInterpolateImageFunctionPython:
_itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionIUC3D_swigregister(itkLabelImageGaussianInterpolateImageFunctionIUC3D)

def itkLabelImageGaussianInterpolateImageFunctionIUC4D_New():
    return itkLabelImageGaussianInterpolateImageFunctionIUC4D.New()

class itkLabelImageGaussianInterpolateImageFunctionIUC4D(itk.itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUC4D):
    r"""Proxy of C++ itkLabelImageGaussianInterpolateImageFunctionIUC4D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLabelImageGaussianInterpolateImageFunctionIUC4D_Pointer"""
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionIUC4D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLabelImageGaussianInterpolateImageFunctionIUC4D_Pointer"""
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionIUC4D_Clone(self)
    __swig_destroy__ = _itkLabelImageGaussianInterpolateImageFunctionPython.delete_itkLabelImageGaussianInterpolateImageFunctionIUC4D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLabelImageGaussianInterpolateImageFunctionIUC4D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionIUC4D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLabelImageGaussianInterpolateImageFunctionIUC4D

        Create a new object of the class itkLabelImageGaussianInterpolateImageFunctionIUC4D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelImageGaussianInterpolateImageFunctionIUC4D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelImageGaussianInterpolateImageFunctionIUC4D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelImageGaussianInterpolateImageFunctionIUC4D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelImageGaussianInterpolateImageFunctionIUC4D in _itkLabelImageGaussianInterpolateImageFunctionPython:
_itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionIUC4D_swigregister(itkLabelImageGaussianInterpolateImageFunctionIUC4D)

def itkLabelImageGaussianInterpolateImageFunctionIUS2D_New():
    return itkLabelImageGaussianInterpolateImageFunctionIUS2D.New()

class itkLabelImageGaussianInterpolateImageFunctionIUS2D(itk.itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS2D):
    r"""Proxy of C++ itkLabelImageGaussianInterpolateImageFunctionIUS2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLabelImageGaussianInterpolateImageFunctionIUS2D_Pointer"""
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionIUS2D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLabelImageGaussianInterpolateImageFunctionIUS2D_Pointer"""
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionIUS2D_Clone(self)
    __swig_destroy__ = _itkLabelImageGaussianInterpolateImageFunctionPython.delete_itkLabelImageGaussianInterpolateImageFunctionIUS2D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLabelImageGaussianInterpolateImageFunctionIUS2D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionIUS2D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLabelImageGaussianInterpolateImageFunctionIUS2D

        Create a new object of the class itkLabelImageGaussianInterpolateImageFunctionIUS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelImageGaussianInterpolateImageFunctionIUS2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelImageGaussianInterpolateImageFunctionIUS2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelImageGaussianInterpolateImageFunctionIUS2D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelImageGaussianInterpolateImageFunctionIUS2D in _itkLabelImageGaussianInterpolateImageFunctionPython:
_itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionIUS2D_swigregister(itkLabelImageGaussianInterpolateImageFunctionIUS2D)

def itkLabelImageGaussianInterpolateImageFunctionIUS3D_New():
    return itkLabelImageGaussianInterpolateImageFunctionIUS3D.New()

class itkLabelImageGaussianInterpolateImageFunctionIUS3D(itk.itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS3D):
    r"""Proxy of C++ itkLabelImageGaussianInterpolateImageFunctionIUS3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLabelImageGaussianInterpolateImageFunctionIUS3D_Pointer"""
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionIUS3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLabelImageGaussianInterpolateImageFunctionIUS3D_Pointer"""
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionIUS3D_Clone(self)
    __swig_destroy__ = _itkLabelImageGaussianInterpolateImageFunctionPython.delete_itkLabelImageGaussianInterpolateImageFunctionIUS3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLabelImageGaussianInterpolateImageFunctionIUS3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionIUS3D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLabelImageGaussianInterpolateImageFunctionIUS3D

        Create a new object of the class itkLabelImageGaussianInterpolateImageFunctionIUS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelImageGaussianInterpolateImageFunctionIUS3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelImageGaussianInterpolateImageFunctionIUS3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelImageGaussianInterpolateImageFunctionIUS3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelImageGaussianInterpolateImageFunctionIUS3D in _itkLabelImageGaussianInterpolateImageFunctionPython:
_itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionIUS3D_swigregister(itkLabelImageGaussianInterpolateImageFunctionIUS3D)

def itkLabelImageGaussianInterpolateImageFunctionIUS4D_New():
    return itkLabelImageGaussianInterpolateImageFunctionIUS4D.New()

class itkLabelImageGaussianInterpolateImageFunctionIUS4D(itk.itkGaussianInterpolateImageFunctionPython.itkGaussianInterpolateImageFunctionIUS4D):
    r"""Proxy of C++ itkLabelImageGaussianInterpolateImageFunctionIUS4D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkLabelImageGaussianInterpolateImageFunctionIUS4D_Pointer"""
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionIUS4D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkLabelImageGaussianInterpolateImageFunctionIUS4D_Pointer"""
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionIUS4D_Clone(self)
    __swig_destroy__ = _itkLabelImageGaussianInterpolateImageFunctionPython.delete_itkLabelImageGaussianInterpolateImageFunctionIUS4D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkLabelImageGaussianInterpolateImageFunctionIUS4D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionIUS4D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkLabelImageGaussianInterpolateImageFunctionIUS4D

        Create a new object of the class itkLabelImageGaussianInterpolateImageFunctionIUS4D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelImageGaussianInterpolateImageFunctionIUS4D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelImageGaussianInterpolateImageFunctionIUS4D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelImageGaussianInterpolateImageFunctionIUS4D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelImageGaussianInterpolateImageFunctionIUS4D in _itkLabelImageGaussianInterpolateImageFunctionPython:
_itkLabelImageGaussianInterpolateImageFunctionPython.itkLabelImageGaussianInterpolateImageFunctionIUS4D_swigregister(itkLabelImageGaussianInterpolateImageFunctionIUS4D)

