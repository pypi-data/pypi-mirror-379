# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKStatisticsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHistogramToIntensityImageFilterPython
else:
    import _itkHistogramToIntensityImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkImageSourcePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkHistogramPython
import itk.itkSamplePython
import itk.itkArrayPython

def itkHistogramToIntensityImageFilterHDID2_Superclass_New():
    return itkHistogramToIntensityImageFilterHDID2_Superclass.New()

class itkHistogramToIntensityImageFilterHDID2_Superclass(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHDID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToIntensityImageFilterHDID2_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToIntensityImageFilterHDID2_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramD const *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramIntensityFunction< unsigned long,double > const &

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramIntensityFunction< unsigned long,double >
        GetFunctor(self) -> itk::Function::HistogramIntensityFunction< unsigned long,double > const &
        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHDID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToIntensityImageFilterHDID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHDID2_Superclass

        Create a new object of the class itkHistogramToIntensityImageFilterHDID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHDID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHDID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHDID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHDID2_Superclass in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_Superclass_swigregister(itkHistogramToIntensityImageFilterHDID2_Superclass)

def itkHistogramToIntensityImageFilterHDID3_Superclass_New():
    return itkHistogramToIntensityImageFilterHDID3_Superclass.New()

class itkHistogramToIntensityImageFilterHDID3_Superclass(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHDID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToIntensityImageFilterHDID3_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToIntensityImageFilterHDID3_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramD const *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramIntensityFunction< unsigned long,double > const &

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramIntensityFunction< unsigned long,double >
        GetFunctor(self) -> itk::Function::HistogramIntensityFunction< unsigned long,double > const &
        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHDID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToIntensityImageFilterHDID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHDID3_Superclass

        Create a new object of the class itkHistogramToIntensityImageFilterHDID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHDID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHDID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHDID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHDID3_Superclass in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_Superclass_swigregister(itkHistogramToIntensityImageFilterHDID3_Superclass)

def itkHistogramToIntensityImageFilterHDID4_Superclass_New():
    return itkHistogramToIntensityImageFilterHDID4_Superclass.New()

class itkHistogramToIntensityImageFilterHDID4_Superclass(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHDID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToIntensityImageFilterHDID4_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToIntensityImageFilterHDID4_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID4_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramD const *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID4_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID4_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramIntensityFunction< unsigned long,double > const &

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID4_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramIntensityFunction< unsigned long,double >
        GetFunctor(self) -> itk::Function::HistogramIntensityFunction< unsigned long,double > const &
        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID4_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID4_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHDID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToIntensityImageFilterHDID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHDID4_Superclass

        Create a new object of the class itkHistogramToIntensityImageFilterHDID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHDID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHDID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHDID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHDID4_Superclass in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID4_Superclass_swigregister(itkHistogramToIntensityImageFilterHDID4_Superclass)

def itkHistogramToIntensityImageFilterHDIF2_Superclass_New():
    return itkHistogramToIntensityImageFilterHDIF2_Superclass.New()

class itkHistogramToIntensityImageFilterHDIF2_Superclass(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHDIF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToIntensityImageFilterHDIF2_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToIntensityImageFilterHDIF2_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramD const *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramIntensityFunction< unsigned long,float > const &

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramIntensityFunction< unsigned long,float >
        GetFunctor(self) -> itk::Function::HistogramIntensityFunction< unsigned long,float > const &
        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHDIF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToIntensityImageFilterHDIF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHDIF2_Superclass

        Create a new object of the class itkHistogramToIntensityImageFilterHDIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHDIF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHDIF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHDIF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHDIF2_Superclass in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Superclass_swigregister(itkHistogramToIntensityImageFilterHDIF2_Superclass)

def itkHistogramToIntensityImageFilterHDIF3_Superclass_New():
    return itkHistogramToIntensityImageFilterHDIF3_Superclass.New()

class itkHistogramToIntensityImageFilterHDIF3_Superclass(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHDIF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToIntensityImageFilterHDIF3_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToIntensityImageFilterHDIF3_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramD const *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramIntensityFunction< unsigned long,float > const &

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramIntensityFunction< unsigned long,float >
        GetFunctor(self) -> itk::Function::HistogramIntensityFunction< unsigned long,float > const &
        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHDIF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToIntensityImageFilterHDIF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHDIF3_Superclass

        Create a new object of the class itkHistogramToIntensityImageFilterHDIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHDIF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHDIF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHDIF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHDIF3_Superclass in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Superclass_swigregister(itkHistogramToIntensityImageFilterHDIF3_Superclass)

def itkHistogramToIntensityImageFilterHDIF4_Superclass_New():
    return itkHistogramToIntensityImageFilterHDIF4_Superclass.New()

class itkHistogramToIntensityImageFilterHDIF4_Superclass(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHDIF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToIntensityImageFilterHDIF4_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToIntensityImageFilterHDIF4_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF4_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramD const *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF4_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF4_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramIntensityFunction< unsigned long,float > const &

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF4_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramIntensityFunction< unsigned long,float >
        GetFunctor(self) -> itk::Function::HistogramIntensityFunction< unsigned long,float > const &
        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF4_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF4_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHDIF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToIntensityImageFilterHDIF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHDIF4_Superclass

        Create a new object of the class itkHistogramToIntensityImageFilterHDIF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHDIF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHDIF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHDIF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHDIF4_Superclass in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF4_Superclass_swigregister(itkHistogramToIntensityImageFilterHDIF4_Superclass)

def itkHistogramToIntensityImageFilterHFID2_Superclass_New():
    return itkHistogramToIntensityImageFilterHFID2_Superclass.New()

class itkHistogramToIntensityImageFilterHFID2_Superclass(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHFID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToIntensityImageFilterHFID2_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToIntensityImageFilterHFID2_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramF const *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramIntensityFunction< unsigned long,double > const &

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramIntensityFunction< unsigned long,double >
        GetFunctor(self) -> itk::Function::HistogramIntensityFunction< unsigned long,double > const &
        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHFID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToIntensityImageFilterHFID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHFID2_Superclass

        Create a new object of the class itkHistogramToIntensityImageFilterHFID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHFID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHFID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHFID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHFID2_Superclass in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_Superclass_swigregister(itkHistogramToIntensityImageFilterHFID2_Superclass)

def itkHistogramToIntensityImageFilterHFID3_Superclass_New():
    return itkHistogramToIntensityImageFilterHFID3_Superclass.New()

class itkHistogramToIntensityImageFilterHFID3_Superclass(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHFID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToIntensityImageFilterHFID3_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToIntensityImageFilterHFID3_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramF const *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramIntensityFunction< unsigned long,double > const &

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramIntensityFunction< unsigned long,double >
        GetFunctor(self) -> itk::Function::HistogramIntensityFunction< unsigned long,double > const &
        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHFID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToIntensityImageFilterHFID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHFID3_Superclass

        Create a new object of the class itkHistogramToIntensityImageFilterHFID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHFID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHFID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHFID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHFID3_Superclass in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_Superclass_swigregister(itkHistogramToIntensityImageFilterHFID3_Superclass)

def itkHistogramToIntensityImageFilterHFID4_Superclass_New():
    return itkHistogramToIntensityImageFilterHFID4_Superclass.New()

class itkHistogramToIntensityImageFilterHFID4_Superclass(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHFID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToIntensityImageFilterHFID4_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToIntensityImageFilterHFID4_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID4_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramF const *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID4_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID4_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramIntensityFunction< unsigned long,double > const &

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID4_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramIntensityFunction< unsigned long,double >
        GetFunctor(self) -> itk::Function::HistogramIntensityFunction< unsigned long,double > const &
        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID4_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID4_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHFID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToIntensityImageFilterHFID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHFID4_Superclass

        Create a new object of the class itkHistogramToIntensityImageFilterHFID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHFID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHFID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHFID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHFID4_Superclass in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID4_Superclass_swigregister(itkHistogramToIntensityImageFilterHFID4_Superclass)

def itkHistogramToIntensityImageFilterHFIF2_Superclass_New():
    return itkHistogramToIntensityImageFilterHFIF2_Superclass.New()

class itkHistogramToIntensityImageFilterHFIF2_Superclass(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHFIF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToIntensityImageFilterHFIF2_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToIntensityImageFilterHFIF2_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramF const *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramIntensityFunction< unsigned long,float > const &

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramIntensityFunction< unsigned long,float >
        GetFunctor(self) -> itk::Function::HistogramIntensityFunction< unsigned long,float > const &
        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHFIF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToIntensityImageFilterHFIF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHFIF2_Superclass

        Create a new object of the class itkHistogramToIntensityImageFilterHFIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHFIF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHFIF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHFIF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHFIF2_Superclass in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Superclass_swigregister(itkHistogramToIntensityImageFilterHFIF2_Superclass)

def itkHistogramToIntensityImageFilterHFIF3_Superclass_New():
    return itkHistogramToIntensityImageFilterHFIF3_Superclass.New()

class itkHistogramToIntensityImageFilterHFIF3_Superclass(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHFIF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToIntensityImageFilterHFIF3_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToIntensityImageFilterHFIF3_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramF const *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramIntensityFunction< unsigned long,float > const &

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramIntensityFunction< unsigned long,float >
        GetFunctor(self) -> itk::Function::HistogramIntensityFunction< unsigned long,float > const &
        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHFIF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToIntensityImageFilterHFIF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHFIF3_Superclass

        Create a new object of the class itkHistogramToIntensityImageFilterHFIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHFIF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHFIF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHFIF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHFIF3_Superclass in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Superclass_swigregister(itkHistogramToIntensityImageFilterHFIF3_Superclass)

def itkHistogramToIntensityImageFilterHFIF4_Superclass_New():
    return itkHistogramToIntensityImageFilterHFIF4_Superclass.New()

class itkHistogramToIntensityImageFilterHFIF4_Superclass(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHFIF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToIntensityImageFilterHFIF4_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToIntensityImageFilterHFIF4_Superclass_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF4_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramF const *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF4_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF4_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramIntensityFunction< unsigned long,float > const &

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF4_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramIntensityFunction< unsigned long,float >
        GetFunctor(self) -> itk::Function::HistogramIntensityFunction< unsigned long,float > const &
        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF4_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF4_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHFIF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToIntensityImageFilterHFIF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHFIF4_Superclass

        Create a new object of the class itkHistogramToIntensityImageFilterHFIF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHFIF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHFIF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHFIF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHFIF4_Superclass in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF4_Superclass_swigregister(itkHistogramToIntensityImageFilterHFIF4_Superclass)

def itkHistogramToIntensityImageFilterHDID2_New():
    return itkHistogramToIntensityImageFilterHDID2.New()

class itkHistogramToIntensityImageFilterHDID2(itkHistogramToIntensityImageFilterHDID2_Superclass):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHDID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToIntensityImageFilterHDID2_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToIntensityImageFilterHDID2_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_Clone(self)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHDID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToIntensityImageFilterHDID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHDID2

        Create a new object of the class itkHistogramToIntensityImageFilterHDID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHDID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHDID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHDID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHDID2 in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID2_swigregister(itkHistogramToIntensityImageFilterHDID2)

def itkHistogramToIntensityImageFilterHDID3_New():
    return itkHistogramToIntensityImageFilterHDID3.New()

class itkHistogramToIntensityImageFilterHDID3(itkHistogramToIntensityImageFilterHDID3_Superclass):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHDID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToIntensityImageFilterHDID3_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToIntensityImageFilterHDID3_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_Clone(self)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHDID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToIntensityImageFilterHDID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHDID3

        Create a new object of the class itkHistogramToIntensityImageFilterHDID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHDID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHDID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHDID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHDID3 in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID3_swigregister(itkHistogramToIntensityImageFilterHDID3)

def itkHistogramToIntensityImageFilterHDID4_New():
    return itkHistogramToIntensityImageFilterHDID4.New()

class itkHistogramToIntensityImageFilterHDID4(itkHistogramToIntensityImageFilterHDID4_Superclass):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHDID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToIntensityImageFilterHDID4_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToIntensityImageFilterHDID4_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID4_Clone(self)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHDID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToIntensityImageFilterHDID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHDID4

        Create a new object of the class itkHistogramToIntensityImageFilterHDID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHDID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHDID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHDID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHDID4 in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDID4_swigregister(itkHistogramToIntensityImageFilterHDID4)

def itkHistogramToIntensityImageFilterHDIF2_New():
    return itkHistogramToIntensityImageFilterHDIF2.New()

class itkHistogramToIntensityImageFilterHDIF2(itkHistogramToIntensityImageFilterHDIF2_Superclass):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHDIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToIntensityImageFilterHDIF2_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToIntensityImageFilterHDIF2_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_Clone(self)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHDIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToIntensityImageFilterHDIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHDIF2

        Create a new object of the class itkHistogramToIntensityImageFilterHDIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHDIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHDIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHDIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHDIF2 in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF2_swigregister(itkHistogramToIntensityImageFilterHDIF2)

def itkHistogramToIntensityImageFilterHDIF3_New():
    return itkHistogramToIntensityImageFilterHDIF3.New()

class itkHistogramToIntensityImageFilterHDIF3(itkHistogramToIntensityImageFilterHDIF3_Superclass):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHDIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToIntensityImageFilterHDIF3_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToIntensityImageFilterHDIF3_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_Clone(self)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHDIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToIntensityImageFilterHDIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHDIF3

        Create a new object of the class itkHistogramToIntensityImageFilterHDIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHDIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHDIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHDIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHDIF3 in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF3_swigregister(itkHistogramToIntensityImageFilterHDIF3)

def itkHistogramToIntensityImageFilterHDIF4_New():
    return itkHistogramToIntensityImageFilterHDIF4.New()

class itkHistogramToIntensityImageFilterHDIF4(itkHistogramToIntensityImageFilterHDIF4_Superclass):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHDIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToIntensityImageFilterHDIF4_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToIntensityImageFilterHDIF4_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF4_Clone(self)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHDIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToIntensityImageFilterHDIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHDIF4

        Create a new object of the class itkHistogramToIntensityImageFilterHDIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHDIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHDIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHDIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHDIF4 in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHDIF4_swigregister(itkHistogramToIntensityImageFilterHDIF4)

def itkHistogramToIntensityImageFilterHFID2_New():
    return itkHistogramToIntensityImageFilterHFID2.New()

class itkHistogramToIntensityImageFilterHFID2(itkHistogramToIntensityImageFilterHFID2_Superclass):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHFID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToIntensityImageFilterHFID2_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToIntensityImageFilterHFID2_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_Clone(self)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHFID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToIntensityImageFilterHFID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHFID2

        Create a new object of the class itkHistogramToIntensityImageFilterHFID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHFID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHFID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHFID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHFID2 in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID2_swigregister(itkHistogramToIntensityImageFilterHFID2)

def itkHistogramToIntensityImageFilterHFID3_New():
    return itkHistogramToIntensityImageFilterHFID3.New()

class itkHistogramToIntensityImageFilterHFID3(itkHistogramToIntensityImageFilterHFID3_Superclass):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHFID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToIntensityImageFilterHFID3_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToIntensityImageFilterHFID3_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_Clone(self)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHFID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToIntensityImageFilterHFID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHFID3

        Create a new object of the class itkHistogramToIntensityImageFilterHFID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHFID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHFID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHFID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHFID3 in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID3_swigregister(itkHistogramToIntensityImageFilterHFID3)

def itkHistogramToIntensityImageFilterHFID4_New():
    return itkHistogramToIntensityImageFilterHFID4.New()

class itkHistogramToIntensityImageFilterHFID4(itkHistogramToIntensityImageFilterHFID4_Superclass):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHFID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToIntensityImageFilterHFID4_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToIntensityImageFilterHFID4_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID4_Clone(self)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHFID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToIntensityImageFilterHFID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHFID4

        Create a new object of the class itkHistogramToIntensityImageFilterHFID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHFID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHFID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHFID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHFID4 in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFID4_swigregister(itkHistogramToIntensityImageFilterHFID4)

def itkHistogramToIntensityImageFilterHFIF2_New():
    return itkHistogramToIntensityImageFilterHFIF2.New()

class itkHistogramToIntensityImageFilterHFIF2(itkHistogramToIntensityImageFilterHFIF2_Superclass):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHFIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToIntensityImageFilterHFIF2_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToIntensityImageFilterHFIF2_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_Clone(self)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHFIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToIntensityImageFilterHFIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHFIF2

        Create a new object of the class itkHistogramToIntensityImageFilterHFIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHFIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHFIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHFIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHFIF2 in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF2_swigregister(itkHistogramToIntensityImageFilterHFIF2)

def itkHistogramToIntensityImageFilterHFIF3_New():
    return itkHistogramToIntensityImageFilterHFIF3.New()

class itkHistogramToIntensityImageFilterHFIF3(itkHistogramToIntensityImageFilterHFIF3_Superclass):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHFIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToIntensityImageFilterHFIF3_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToIntensityImageFilterHFIF3_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_Clone(self)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHFIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToIntensityImageFilterHFIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHFIF3

        Create a new object of the class itkHistogramToIntensityImageFilterHFIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHFIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHFIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHFIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHFIF3 in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF3_swigregister(itkHistogramToIntensityImageFilterHFIF3)

def itkHistogramToIntensityImageFilterHFIF4_New():
    return itkHistogramToIntensityImageFilterHFIF4.New()

class itkHistogramToIntensityImageFilterHFIF4(itkHistogramToIntensityImageFilterHFIF4_Superclass):
    r"""Proxy of C++ itkHistogramToIntensityImageFilterHFIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToIntensityImageFilterHFIF4_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToIntensityImageFilterHFIF4_Pointer"""
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF4_Clone(self)
    __swig_destroy__ = _itkHistogramToIntensityImageFilterPython.delete_itkHistogramToIntensityImageFilterHFIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToIntensityImageFilterHFIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToIntensityImageFilterHFIF4

        Create a new object of the class itkHistogramToIntensityImageFilterHFIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToIntensityImageFilterHFIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToIntensityImageFilterHFIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToIntensityImageFilterHFIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToIntensityImageFilterHFIF4 in _itkHistogramToIntensityImageFilterPython:
_itkHistogramToIntensityImageFilterPython.itkHistogramToIntensityImageFilterHFIF4_swigregister(itkHistogramToIntensityImageFilterHFIF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def histogram_to_intensity_image_filter(*args,  functor=..., total_frequency: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for HistogramToIntensityImageFilter"""
    import itk

    kwarg_typehints = { 'functor':functor,'total_frequency':total_frequency }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.HistogramToIntensityImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def histogram_to_intensity_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKStatistics.HistogramToIntensityImageFilter
    histogram_to_intensity_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    histogram_to_intensity_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def histogram_to_image_filter(*args,  functor=..., total_frequency: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for HistogramToImageFilter"""
    import itk

    kwarg_typehints = { 'functor':functor,'total_frequency':total_frequency }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.HistogramToImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def histogram_to_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKStatistics.HistogramToImageFilter
    histogram_to_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    histogram_to_image_filter.__doc__ = filter_object.__doc__



