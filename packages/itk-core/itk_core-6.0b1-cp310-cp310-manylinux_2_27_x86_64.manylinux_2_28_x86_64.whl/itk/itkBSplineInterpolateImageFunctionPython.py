# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageFunctionPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBSplineInterpolateImageFunctionPython
else:
    import _itkBSplineInterpolateImageFunctionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkSizePython
import itk.itkInterpolateImageFunctionPython
import itk.itkRGBAPixelPython
import itk.itkImageFunctionBasePython
import itk.itkRGBPixelPython
import itk.itkFunctionBasePython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkArrayPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython

def itkBSplineInterpolateImageFunctionID2DD_New():
    return itkBSplineInterpolateImageFunctionID2DD.New()

class itkBSplineInterpolateImageFunctionID2DD(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D):
    r"""Proxy of C++ itkBSplineInterpolateImageFunctionID2DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineInterpolateImageFunctionID2DD_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineInterpolateImageFunctionID2DD_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_Clone(self)

    def Evaluate(self, *args):
        r"""
        Evaluate(self, point) -> double

        Parameters
        ----------
        point: itkPointD2 const &

        Evaluate(self, point, threadId) -> double

        Parameters
        ----------
        point: itkPointD2 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        EvaluateAtContinuousIndex(self, x, threadId) -> double

        Parameters
        ----------
        x: itkContinuousIndexD2 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        r"""
        EvaluateDerivative(self, point) -> itkCovariantVectorD2

        Parameters
        ----------
        point: itkPointD2 const &

        EvaluateDerivative(self, point, threadId) -> itkCovariantVectorD2

        Parameters
        ----------
        point: itkPointD2 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateDerivativeAtContinuousIndex(self, x) -> itkCovariantVectorD2

        Parameters
        ----------
        x: itkContinuousIndexD2 const &

        EvaluateDerivativeAtContinuousIndex(self, x, threadId) -> itkCovariantVectorD2

        Parameters
        ----------
        x: itkContinuousIndexD2 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        r"""
        EvaluateValueAndDerivative(self, point, value, deriv)

        Parameters
        ----------
        point: itkPointD2 const &
        value: double &
        deriv: itkCovariantVectorD2 &

        EvaluateValueAndDerivative(self, point, value, deriv, threadId)

        Parameters
        ----------
        point: itkPointD2 const &
        value: double &
        deriv: itkCovariantVectorD2 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, deriv)

        Parameters
        ----------
        x: itkContinuousIndexD2 const &
        value: double &
        deriv: itkCovariantVectorD2 &

        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, derivativeValue, threadId)

        Parameters
        ----------
        x: itkContinuousIndexD2 const &
        value: double &
        derivativeValue: itkCovariantVectorD2 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_GetSplineOrder(self)

    def SetNumberOfWorkUnits(self, numWorkUnits):
        r"""
        SetNumberOfWorkUnits(self, numWorkUnits)

        Parameters
        ----------
        numWorkUnits: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_SetNumberOfWorkUnits(self, numWorkUnits)

    def GetNumberOfWorkUnits(self):
        r"""GetNumberOfWorkUnits(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_GetNumberOfWorkUnits(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_UseImageDirectionOff(self)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionID2DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineInterpolateImageFunctionID2DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionID2DD

        Create a new object of the class itkBSplineInterpolateImageFunctionID2DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionID2DD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionID2DD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionID2DD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionID2DD in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_swigregister(itkBSplineInterpolateImageFunctionID2DD)

def itkBSplineInterpolateImageFunctionID3DD_New():
    return itkBSplineInterpolateImageFunctionID3DD.New()

class itkBSplineInterpolateImageFunctionID3DD(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D):
    r"""Proxy of C++ itkBSplineInterpolateImageFunctionID3DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineInterpolateImageFunctionID3DD_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineInterpolateImageFunctionID3DD_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_Clone(self)

    def Evaluate(self, *args):
        r"""
        Evaluate(self, point) -> double

        Parameters
        ----------
        point: itkPointD3 const &

        Evaluate(self, point, threadId) -> double

        Parameters
        ----------
        point: itkPointD3 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        EvaluateAtContinuousIndex(self, x, threadId) -> double

        Parameters
        ----------
        x: itkContinuousIndexD3 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        r"""
        EvaluateDerivative(self, point) -> itkCovariantVectorD3

        Parameters
        ----------
        point: itkPointD3 const &

        EvaluateDerivative(self, point, threadId) -> itkCovariantVectorD3

        Parameters
        ----------
        point: itkPointD3 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateDerivativeAtContinuousIndex(self, x) -> itkCovariantVectorD3

        Parameters
        ----------
        x: itkContinuousIndexD3 const &

        EvaluateDerivativeAtContinuousIndex(self, x, threadId) -> itkCovariantVectorD3

        Parameters
        ----------
        x: itkContinuousIndexD3 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        r"""
        EvaluateValueAndDerivative(self, point, value, deriv)

        Parameters
        ----------
        point: itkPointD3 const &
        value: double &
        deriv: itkCovariantVectorD3 &

        EvaluateValueAndDerivative(self, point, value, deriv, threadId)

        Parameters
        ----------
        point: itkPointD3 const &
        value: double &
        deriv: itkCovariantVectorD3 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, deriv)

        Parameters
        ----------
        x: itkContinuousIndexD3 const &
        value: double &
        deriv: itkCovariantVectorD3 &

        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, derivativeValue, threadId)

        Parameters
        ----------
        x: itkContinuousIndexD3 const &
        value: double &
        derivativeValue: itkCovariantVectorD3 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_GetSplineOrder(self)

    def SetNumberOfWorkUnits(self, numWorkUnits):
        r"""
        SetNumberOfWorkUnits(self, numWorkUnits)

        Parameters
        ----------
        numWorkUnits: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_SetNumberOfWorkUnits(self, numWorkUnits)

    def GetNumberOfWorkUnits(self):
        r"""GetNumberOfWorkUnits(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_GetNumberOfWorkUnits(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_UseImageDirectionOff(self)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionID3DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineInterpolateImageFunctionID3DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionID3DD

        Create a new object of the class itkBSplineInterpolateImageFunctionID3DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionID3DD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionID3DD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionID3DD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionID3DD in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_swigregister(itkBSplineInterpolateImageFunctionID3DD)

def itkBSplineInterpolateImageFunctionID4DD_New():
    return itkBSplineInterpolateImageFunctionID4DD.New()

class itkBSplineInterpolateImageFunctionID4DD(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID4D):
    r"""Proxy of C++ itkBSplineInterpolateImageFunctionID4DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineInterpolateImageFunctionID4DD_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID4DD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineInterpolateImageFunctionID4DD_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID4DD_Clone(self)

    def Evaluate(self, *args):
        r"""
        Evaluate(self, point) -> double

        Parameters
        ----------
        point: itkPointD4 const &

        Evaluate(self, point, threadId) -> double

        Parameters
        ----------
        point: itkPointD4 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID4DD_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        EvaluateAtContinuousIndex(self, x, threadId) -> double

        Parameters
        ----------
        x: itkContinuousIndexD4 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID4DD_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        r"""
        EvaluateDerivative(self, point) -> itkCovariantVectorD4

        Parameters
        ----------
        point: itkPointD4 const &

        EvaluateDerivative(self, point, threadId) -> itkCovariantVectorD4

        Parameters
        ----------
        point: itkPointD4 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID4DD_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateDerivativeAtContinuousIndex(self, x) -> itkCovariantVectorD4

        Parameters
        ----------
        x: itkContinuousIndexD4 const &

        EvaluateDerivativeAtContinuousIndex(self, x, threadId) -> itkCovariantVectorD4

        Parameters
        ----------
        x: itkContinuousIndexD4 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID4DD_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        r"""
        EvaluateValueAndDerivative(self, point, value, deriv)

        Parameters
        ----------
        point: itkPointD4 const &
        value: double &
        deriv: itkCovariantVectorD4 &

        EvaluateValueAndDerivative(self, point, value, deriv, threadId)

        Parameters
        ----------
        point: itkPointD4 const &
        value: double &
        deriv: itkCovariantVectorD4 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID4DD_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, deriv)

        Parameters
        ----------
        x: itkContinuousIndexD4 const &
        value: double &
        deriv: itkCovariantVectorD4 &

        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, derivativeValue, threadId)

        Parameters
        ----------
        x: itkContinuousIndexD4 const &
        value: double &
        derivativeValue: itkCovariantVectorD4 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID4DD_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID4DD_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID4DD_GetSplineOrder(self)

    def SetNumberOfWorkUnits(self, numWorkUnits):
        r"""
        SetNumberOfWorkUnits(self, numWorkUnits)

        Parameters
        ----------
        numWorkUnits: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID4DD_SetNumberOfWorkUnits(self, numWorkUnits)

    def GetNumberOfWorkUnits(self):
        r"""GetNumberOfWorkUnits(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID4DD_GetNumberOfWorkUnits(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID4DD_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID4DD_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID4DD_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID4DD_UseImageDirectionOff(self)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionID4DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineInterpolateImageFunctionID4DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID4DD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionID4DD

        Create a new object of the class itkBSplineInterpolateImageFunctionID4DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionID4DD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionID4DD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionID4DD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionID4DD in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID4DD_swigregister(itkBSplineInterpolateImageFunctionID4DD)

def itkBSplineInterpolateImageFunctionIF2DF_New():
    return itkBSplineInterpolateImageFunctionIF2DF.New()

class itkBSplineInterpolateImageFunctionIF2DF(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D):
    r"""Proxy of C++ itkBSplineInterpolateImageFunctionIF2DF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineInterpolateImageFunctionIF2DF_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineInterpolateImageFunctionIF2DF_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_Clone(self)

    def Evaluate(self, *args):
        r"""
        Evaluate(self, point) -> double

        Parameters
        ----------
        point: itkPointD2 const &

        Evaluate(self, point, threadId) -> double

        Parameters
        ----------
        point: itkPointD2 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        EvaluateAtContinuousIndex(self, x, threadId) -> double

        Parameters
        ----------
        x: itkContinuousIndexD2 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        r"""
        EvaluateDerivative(self, point) -> itkCovariantVectorD2

        Parameters
        ----------
        point: itkPointD2 const &

        EvaluateDerivative(self, point, threadId) -> itkCovariantVectorD2

        Parameters
        ----------
        point: itkPointD2 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateDerivativeAtContinuousIndex(self, x) -> itkCovariantVectorD2

        Parameters
        ----------
        x: itkContinuousIndexD2 const &

        EvaluateDerivativeAtContinuousIndex(self, x, threadId) -> itkCovariantVectorD2

        Parameters
        ----------
        x: itkContinuousIndexD2 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        r"""
        EvaluateValueAndDerivative(self, point, value, deriv)

        Parameters
        ----------
        point: itkPointD2 const &
        value: double &
        deriv: itkCovariantVectorD2 &

        EvaluateValueAndDerivative(self, point, value, deriv, threadId)

        Parameters
        ----------
        point: itkPointD2 const &
        value: double &
        deriv: itkCovariantVectorD2 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, deriv)

        Parameters
        ----------
        x: itkContinuousIndexD2 const &
        value: double &
        deriv: itkCovariantVectorD2 &

        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, derivativeValue, threadId)

        Parameters
        ----------
        x: itkContinuousIndexD2 const &
        value: double &
        derivativeValue: itkCovariantVectorD2 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_GetSplineOrder(self)

    def SetNumberOfWorkUnits(self, numWorkUnits):
        r"""
        SetNumberOfWorkUnits(self, numWorkUnits)

        Parameters
        ----------
        numWorkUnits: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_SetNumberOfWorkUnits(self, numWorkUnits)

    def GetNumberOfWorkUnits(self):
        r"""GetNumberOfWorkUnits(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_GetNumberOfWorkUnits(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_UseImageDirectionOff(self)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIF2DF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineInterpolateImageFunctionIF2DF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIF2DF

        Create a new object of the class itkBSplineInterpolateImageFunctionIF2DF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionIF2DF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionIF2DF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionIF2DF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionIF2DF in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_swigregister(itkBSplineInterpolateImageFunctionIF2DF)

def itkBSplineInterpolateImageFunctionIF3DF_New():
    return itkBSplineInterpolateImageFunctionIF3DF.New()

class itkBSplineInterpolateImageFunctionIF3DF(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D):
    r"""Proxy of C++ itkBSplineInterpolateImageFunctionIF3DF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineInterpolateImageFunctionIF3DF_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineInterpolateImageFunctionIF3DF_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_Clone(self)

    def Evaluate(self, *args):
        r"""
        Evaluate(self, point) -> double

        Parameters
        ----------
        point: itkPointD3 const &

        Evaluate(self, point, threadId) -> double

        Parameters
        ----------
        point: itkPointD3 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        EvaluateAtContinuousIndex(self, x, threadId) -> double

        Parameters
        ----------
        x: itkContinuousIndexD3 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        r"""
        EvaluateDerivative(self, point) -> itkCovariantVectorD3

        Parameters
        ----------
        point: itkPointD3 const &

        EvaluateDerivative(self, point, threadId) -> itkCovariantVectorD3

        Parameters
        ----------
        point: itkPointD3 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateDerivativeAtContinuousIndex(self, x) -> itkCovariantVectorD3

        Parameters
        ----------
        x: itkContinuousIndexD3 const &

        EvaluateDerivativeAtContinuousIndex(self, x, threadId) -> itkCovariantVectorD3

        Parameters
        ----------
        x: itkContinuousIndexD3 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        r"""
        EvaluateValueAndDerivative(self, point, value, deriv)

        Parameters
        ----------
        point: itkPointD3 const &
        value: double &
        deriv: itkCovariantVectorD3 &

        EvaluateValueAndDerivative(self, point, value, deriv, threadId)

        Parameters
        ----------
        point: itkPointD3 const &
        value: double &
        deriv: itkCovariantVectorD3 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, deriv)

        Parameters
        ----------
        x: itkContinuousIndexD3 const &
        value: double &
        deriv: itkCovariantVectorD3 &

        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, derivativeValue, threadId)

        Parameters
        ----------
        x: itkContinuousIndexD3 const &
        value: double &
        derivativeValue: itkCovariantVectorD3 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_GetSplineOrder(self)

    def SetNumberOfWorkUnits(self, numWorkUnits):
        r"""
        SetNumberOfWorkUnits(self, numWorkUnits)

        Parameters
        ----------
        numWorkUnits: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_SetNumberOfWorkUnits(self, numWorkUnits)

    def GetNumberOfWorkUnits(self):
        r"""GetNumberOfWorkUnits(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_GetNumberOfWorkUnits(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_UseImageDirectionOff(self)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIF3DF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineInterpolateImageFunctionIF3DF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIF3DF

        Create a new object of the class itkBSplineInterpolateImageFunctionIF3DF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionIF3DF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionIF3DF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionIF3DF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionIF3DF in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_swigregister(itkBSplineInterpolateImageFunctionIF3DF)

def itkBSplineInterpolateImageFunctionIF4DF_New():
    return itkBSplineInterpolateImageFunctionIF4DF.New()

class itkBSplineInterpolateImageFunctionIF4DF(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF4D):
    r"""Proxy of C++ itkBSplineInterpolateImageFunctionIF4DF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineInterpolateImageFunctionIF4DF_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF4DF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineInterpolateImageFunctionIF4DF_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF4DF_Clone(self)

    def Evaluate(self, *args):
        r"""
        Evaluate(self, point) -> double

        Parameters
        ----------
        point: itkPointD4 const &

        Evaluate(self, point, threadId) -> double

        Parameters
        ----------
        point: itkPointD4 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF4DF_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        EvaluateAtContinuousIndex(self, x, threadId) -> double

        Parameters
        ----------
        x: itkContinuousIndexD4 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF4DF_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        r"""
        EvaluateDerivative(self, point) -> itkCovariantVectorD4

        Parameters
        ----------
        point: itkPointD4 const &

        EvaluateDerivative(self, point, threadId) -> itkCovariantVectorD4

        Parameters
        ----------
        point: itkPointD4 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF4DF_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateDerivativeAtContinuousIndex(self, x) -> itkCovariantVectorD4

        Parameters
        ----------
        x: itkContinuousIndexD4 const &

        EvaluateDerivativeAtContinuousIndex(self, x, threadId) -> itkCovariantVectorD4

        Parameters
        ----------
        x: itkContinuousIndexD4 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF4DF_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        r"""
        EvaluateValueAndDerivative(self, point, value, deriv)

        Parameters
        ----------
        point: itkPointD4 const &
        value: double &
        deriv: itkCovariantVectorD4 &

        EvaluateValueAndDerivative(self, point, value, deriv, threadId)

        Parameters
        ----------
        point: itkPointD4 const &
        value: double &
        deriv: itkCovariantVectorD4 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF4DF_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, deriv)

        Parameters
        ----------
        x: itkContinuousIndexD4 const &
        value: double &
        deriv: itkCovariantVectorD4 &

        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, derivativeValue, threadId)

        Parameters
        ----------
        x: itkContinuousIndexD4 const &
        value: double &
        derivativeValue: itkCovariantVectorD4 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF4DF_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF4DF_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF4DF_GetSplineOrder(self)

    def SetNumberOfWorkUnits(self, numWorkUnits):
        r"""
        SetNumberOfWorkUnits(self, numWorkUnits)

        Parameters
        ----------
        numWorkUnits: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF4DF_SetNumberOfWorkUnits(self, numWorkUnits)

    def GetNumberOfWorkUnits(self):
        r"""GetNumberOfWorkUnits(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF4DF_GetNumberOfWorkUnits(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF4DF_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF4DF_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF4DF_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF4DF_UseImageDirectionOff(self)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIF4DF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineInterpolateImageFunctionIF4DF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF4DF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIF4DF

        Create a new object of the class itkBSplineInterpolateImageFunctionIF4DF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionIF4DF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionIF4DF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionIF4DF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionIF4DF in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF4DF_swigregister(itkBSplineInterpolateImageFunctionIF4DF)

def itkBSplineInterpolateImageFunctionISS2DSS_New():
    return itkBSplineInterpolateImageFunctionISS2DSS.New()

class itkBSplineInterpolateImageFunctionISS2DSS(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D):
    r"""Proxy of C++ itkBSplineInterpolateImageFunctionISS2DSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineInterpolateImageFunctionISS2DSS_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineInterpolateImageFunctionISS2DSS_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_Clone(self)

    def Evaluate(self, *args):
        r"""
        Evaluate(self, point) -> double

        Parameters
        ----------
        point: itkPointD2 const &

        Evaluate(self, point, threadId) -> double

        Parameters
        ----------
        point: itkPointD2 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        EvaluateAtContinuousIndex(self, x, threadId) -> double

        Parameters
        ----------
        x: itkContinuousIndexD2 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        r"""
        EvaluateDerivative(self, point) -> itkCovariantVectorD2

        Parameters
        ----------
        point: itkPointD2 const &

        EvaluateDerivative(self, point, threadId) -> itkCovariantVectorD2

        Parameters
        ----------
        point: itkPointD2 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateDerivativeAtContinuousIndex(self, x) -> itkCovariantVectorD2

        Parameters
        ----------
        x: itkContinuousIndexD2 const &

        EvaluateDerivativeAtContinuousIndex(self, x, threadId) -> itkCovariantVectorD2

        Parameters
        ----------
        x: itkContinuousIndexD2 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        r"""
        EvaluateValueAndDerivative(self, point, value, deriv)

        Parameters
        ----------
        point: itkPointD2 const &
        value: double &
        deriv: itkCovariantVectorD2 &

        EvaluateValueAndDerivative(self, point, value, deriv, threadId)

        Parameters
        ----------
        point: itkPointD2 const &
        value: double &
        deriv: itkCovariantVectorD2 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, deriv)

        Parameters
        ----------
        x: itkContinuousIndexD2 const &
        value: double &
        deriv: itkCovariantVectorD2 &

        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, derivativeValue, threadId)

        Parameters
        ----------
        x: itkContinuousIndexD2 const &
        value: double &
        derivativeValue: itkCovariantVectorD2 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_GetSplineOrder(self)

    def SetNumberOfWorkUnits(self, numWorkUnits):
        r"""
        SetNumberOfWorkUnits(self, numWorkUnits)

        Parameters
        ----------
        numWorkUnits: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_SetNumberOfWorkUnits(self, numWorkUnits)

    def GetNumberOfWorkUnits(self):
        r"""GetNumberOfWorkUnits(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_GetNumberOfWorkUnits(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_UseImageDirectionOff(self)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionISS2DSS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineInterpolateImageFunctionISS2DSS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionISS2DSS

        Create a new object of the class itkBSplineInterpolateImageFunctionISS2DSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionISS2DSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionISS2DSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionISS2DSS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionISS2DSS in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS2DSS_swigregister(itkBSplineInterpolateImageFunctionISS2DSS)

def itkBSplineInterpolateImageFunctionISS3DSS_New():
    return itkBSplineInterpolateImageFunctionISS3DSS.New()

class itkBSplineInterpolateImageFunctionISS3DSS(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D):
    r"""Proxy of C++ itkBSplineInterpolateImageFunctionISS3DSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineInterpolateImageFunctionISS3DSS_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineInterpolateImageFunctionISS3DSS_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_Clone(self)

    def Evaluate(self, *args):
        r"""
        Evaluate(self, point) -> double

        Parameters
        ----------
        point: itkPointD3 const &

        Evaluate(self, point, threadId) -> double

        Parameters
        ----------
        point: itkPointD3 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        EvaluateAtContinuousIndex(self, x, threadId) -> double

        Parameters
        ----------
        x: itkContinuousIndexD3 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        r"""
        EvaluateDerivative(self, point) -> itkCovariantVectorD3

        Parameters
        ----------
        point: itkPointD3 const &

        EvaluateDerivative(self, point, threadId) -> itkCovariantVectorD3

        Parameters
        ----------
        point: itkPointD3 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateDerivativeAtContinuousIndex(self, x) -> itkCovariantVectorD3

        Parameters
        ----------
        x: itkContinuousIndexD3 const &

        EvaluateDerivativeAtContinuousIndex(self, x, threadId) -> itkCovariantVectorD3

        Parameters
        ----------
        x: itkContinuousIndexD3 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        r"""
        EvaluateValueAndDerivative(self, point, value, deriv)

        Parameters
        ----------
        point: itkPointD3 const &
        value: double &
        deriv: itkCovariantVectorD3 &

        EvaluateValueAndDerivative(self, point, value, deriv, threadId)

        Parameters
        ----------
        point: itkPointD3 const &
        value: double &
        deriv: itkCovariantVectorD3 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, deriv)

        Parameters
        ----------
        x: itkContinuousIndexD3 const &
        value: double &
        deriv: itkCovariantVectorD3 &

        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, derivativeValue, threadId)

        Parameters
        ----------
        x: itkContinuousIndexD3 const &
        value: double &
        derivativeValue: itkCovariantVectorD3 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_GetSplineOrder(self)

    def SetNumberOfWorkUnits(self, numWorkUnits):
        r"""
        SetNumberOfWorkUnits(self, numWorkUnits)

        Parameters
        ----------
        numWorkUnits: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_SetNumberOfWorkUnits(self, numWorkUnits)

    def GetNumberOfWorkUnits(self):
        r"""GetNumberOfWorkUnits(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_GetNumberOfWorkUnits(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_UseImageDirectionOff(self)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionISS3DSS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineInterpolateImageFunctionISS3DSS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionISS3DSS

        Create a new object of the class itkBSplineInterpolateImageFunctionISS3DSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionISS3DSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionISS3DSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionISS3DSS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionISS3DSS in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS3DSS_swigregister(itkBSplineInterpolateImageFunctionISS3DSS)

def itkBSplineInterpolateImageFunctionISS4DSS_New():
    return itkBSplineInterpolateImageFunctionISS4DSS.New()

class itkBSplineInterpolateImageFunctionISS4DSS(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS4D):
    r"""Proxy of C++ itkBSplineInterpolateImageFunctionISS4DSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineInterpolateImageFunctionISS4DSS_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS4DSS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineInterpolateImageFunctionISS4DSS_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS4DSS_Clone(self)

    def Evaluate(self, *args):
        r"""
        Evaluate(self, point) -> double

        Parameters
        ----------
        point: itkPointD4 const &

        Evaluate(self, point, threadId) -> double

        Parameters
        ----------
        point: itkPointD4 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS4DSS_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        EvaluateAtContinuousIndex(self, x, threadId) -> double

        Parameters
        ----------
        x: itkContinuousIndexD4 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS4DSS_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        r"""
        EvaluateDerivative(self, point) -> itkCovariantVectorD4

        Parameters
        ----------
        point: itkPointD4 const &

        EvaluateDerivative(self, point, threadId) -> itkCovariantVectorD4

        Parameters
        ----------
        point: itkPointD4 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS4DSS_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateDerivativeAtContinuousIndex(self, x) -> itkCovariantVectorD4

        Parameters
        ----------
        x: itkContinuousIndexD4 const &

        EvaluateDerivativeAtContinuousIndex(self, x, threadId) -> itkCovariantVectorD4

        Parameters
        ----------
        x: itkContinuousIndexD4 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS4DSS_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        r"""
        EvaluateValueAndDerivative(self, point, value, deriv)

        Parameters
        ----------
        point: itkPointD4 const &
        value: double &
        deriv: itkCovariantVectorD4 &

        EvaluateValueAndDerivative(self, point, value, deriv, threadId)

        Parameters
        ----------
        point: itkPointD4 const &
        value: double &
        deriv: itkCovariantVectorD4 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS4DSS_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, deriv)

        Parameters
        ----------
        x: itkContinuousIndexD4 const &
        value: double &
        deriv: itkCovariantVectorD4 &

        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, derivativeValue, threadId)

        Parameters
        ----------
        x: itkContinuousIndexD4 const &
        value: double &
        derivativeValue: itkCovariantVectorD4 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS4DSS_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS4DSS_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS4DSS_GetSplineOrder(self)

    def SetNumberOfWorkUnits(self, numWorkUnits):
        r"""
        SetNumberOfWorkUnits(self, numWorkUnits)

        Parameters
        ----------
        numWorkUnits: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS4DSS_SetNumberOfWorkUnits(self, numWorkUnits)

    def GetNumberOfWorkUnits(self):
        r"""GetNumberOfWorkUnits(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS4DSS_GetNumberOfWorkUnits(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS4DSS_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS4DSS_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS4DSS_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS4DSS_UseImageDirectionOff(self)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionISS4DSS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineInterpolateImageFunctionISS4DSS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS4DSS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionISS4DSS

        Create a new object of the class itkBSplineInterpolateImageFunctionISS4DSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionISS4DSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionISS4DSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionISS4DSS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionISS4DSS in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionISS4DSS_swigregister(itkBSplineInterpolateImageFunctionISS4DSS)

def itkBSplineInterpolateImageFunctionIUC2DUC_New():
    return itkBSplineInterpolateImageFunctionIUC2DUC.New()

class itkBSplineInterpolateImageFunctionIUC2DUC(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D):
    r"""Proxy of C++ itkBSplineInterpolateImageFunctionIUC2DUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineInterpolateImageFunctionIUC2DUC_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineInterpolateImageFunctionIUC2DUC_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_Clone(self)

    def Evaluate(self, *args):
        r"""
        Evaluate(self, point) -> double

        Parameters
        ----------
        point: itkPointD2 const &

        Evaluate(self, point, threadId) -> double

        Parameters
        ----------
        point: itkPointD2 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        EvaluateAtContinuousIndex(self, x, threadId) -> double

        Parameters
        ----------
        x: itkContinuousIndexD2 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        r"""
        EvaluateDerivative(self, point) -> itkCovariantVectorD2

        Parameters
        ----------
        point: itkPointD2 const &

        EvaluateDerivative(self, point, threadId) -> itkCovariantVectorD2

        Parameters
        ----------
        point: itkPointD2 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateDerivativeAtContinuousIndex(self, x) -> itkCovariantVectorD2

        Parameters
        ----------
        x: itkContinuousIndexD2 const &

        EvaluateDerivativeAtContinuousIndex(self, x, threadId) -> itkCovariantVectorD2

        Parameters
        ----------
        x: itkContinuousIndexD2 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        r"""
        EvaluateValueAndDerivative(self, point, value, deriv)

        Parameters
        ----------
        point: itkPointD2 const &
        value: double &
        deriv: itkCovariantVectorD2 &

        EvaluateValueAndDerivative(self, point, value, deriv, threadId)

        Parameters
        ----------
        point: itkPointD2 const &
        value: double &
        deriv: itkCovariantVectorD2 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, deriv)

        Parameters
        ----------
        x: itkContinuousIndexD2 const &
        value: double &
        deriv: itkCovariantVectorD2 &

        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, derivativeValue, threadId)

        Parameters
        ----------
        x: itkContinuousIndexD2 const &
        value: double &
        derivativeValue: itkCovariantVectorD2 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_GetSplineOrder(self)

    def SetNumberOfWorkUnits(self, numWorkUnits):
        r"""
        SetNumberOfWorkUnits(self, numWorkUnits)

        Parameters
        ----------
        numWorkUnits: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_SetNumberOfWorkUnits(self, numWorkUnits)

    def GetNumberOfWorkUnits(self):
        r"""GetNumberOfWorkUnits(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_GetNumberOfWorkUnits(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_UseImageDirectionOff(self)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIUC2DUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineInterpolateImageFunctionIUC2DUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIUC2DUC

        Create a new object of the class itkBSplineInterpolateImageFunctionIUC2DUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionIUC2DUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionIUC2DUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionIUC2DUC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionIUC2DUC in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_swigregister(itkBSplineInterpolateImageFunctionIUC2DUC)

def itkBSplineInterpolateImageFunctionIUC3DUC_New():
    return itkBSplineInterpolateImageFunctionIUC3DUC.New()

class itkBSplineInterpolateImageFunctionIUC3DUC(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D):
    r"""Proxy of C++ itkBSplineInterpolateImageFunctionIUC3DUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineInterpolateImageFunctionIUC3DUC_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineInterpolateImageFunctionIUC3DUC_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_Clone(self)

    def Evaluate(self, *args):
        r"""
        Evaluate(self, point) -> double

        Parameters
        ----------
        point: itkPointD3 const &

        Evaluate(self, point, threadId) -> double

        Parameters
        ----------
        point: itkPointD3 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        EvaluateAtContinuousIndex(self, x, threadId) -> double

        Parameters
        ----------
        x: itkContinuousIndexD3 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        r"""
        EvaluateDerivative(self, point) -> itkCovariantVectorD3

        Parameters
        ----------
        point: itkPointD3 const &

        EvaluateDerivative(self, point, threadId) -> itkCovariantVectorD3

        Parameters
        ----------
        point: itkPointD3 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateDerivativeAtContinuousIndex(self, x) -> itkCovariantVectorD3

        Parameters
        ----------
        x: itkContinuousIndexD3 const &

        EvaluateDerivativeAtContinuousIndex(self, x, threadId) -> itkCovariantVectorD3

        Parameters
        ----------
        x: itkContinuousIndexD3 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        r"""
        EvaluateValueAndDerivative(self, point, value, deriv)

        Parameters
        ----------
        point: itkPointD3 const &
        value: double &
        deriv: itkCovariantVectorD3 &

        EvaluateValueAndDerivative(self, point, value, deriv, threadId)

        Parameters
        ----------
        point: itkPointD3 const &
        value: double &
        deriv: itkCovariantVectorD3 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, deriv)

        Parameters
        ----------
        x: itkContinuousIndexD3 const &
        value: double &
        deriv: itkCovariantVectorD3 &

        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, derivativeValue, threadId)

        Parameters
        ----------
        x: itkContinuousIndexD3 const &
        value: double &
        derivativeValue: itkCovariantVectorD3 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_GetSplineOrder(self)

    def SetNumberOfWorkUnits(self, numWorkUnits):
        r"""
        SetNumberOfWorkUnits(self, numWorkUnits)

        Parameters
        ----------
        numWorkUnits: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_SetNumberOfWorkUnits(self, numWorkUnits)

    def GetNumberOfWorkUnits(self):
        r"""GetNumberOfWorkUnits(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_GetNumberOfWorkUnits(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_UseImageDirectionOff(self)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIUC3DUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineInterpolateImageFunctionIUC3DUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIUC3DUC

        Create a new object of the class itkBSplineInterpolateImageFunctionIUC3DUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionIUC3DUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionIUC3DUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionIUC3DUC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionIUC3DUC in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_swigregister(itkBSplineInterpolateImageFunctionIUC3DUC)

def itkBSplineInterpolateImageFunctionIUC4DUC_New():
    return itkBSplineInterpolateImageFunctionIUC4DUC.New()

class itkBSplineInterpolateImageFunctionIUC4DUC(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC4D):
    r"""Proxy of C++ itkBSplineInterpolateImageFunctionIUC4DUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineInterpolateImageFunctionIUC4DUC_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC4DUC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineInterpolateImageFunctionIUC4DUC_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC4DUC_Clone(self)

    def Evaluate(self, *args):
        r"""
        Evaluate(self, point) -> double

        Parameters
        ----------
        point: itkPointD4 const &

        Evaluate(self, point, threadId) -> double

        Parameters
        ----------
        point: itkPointD4 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC4DUC_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        EvaluateAtContinuousIndex(self, x, threadId) -> double

        Parameters
        ----------
        x: itkContinuousIndexD4 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC4DUC_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        r"""
        EvaluateDerivative(self, point) -> itkCovariantVectorD4

        Parameters
        ----------
        point: itkPointD4 const &

        EvaluateDerivative(self, point, threadId) -> itkCovariantVectorD4

        Parameters
        ----------
        point: itkPointD4 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC4DUC_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateDerivativeAtContinuousIndex(self, x) -> itkCovariantVectorD4

        Parameters
        ----------
        x: itkContinuousIndexD4 const &

        EvaluateDerivativeAtContinuousIndex(self, x, threadId) -> itkCovariantVectorD4

        Parameters
        ----------
        x: itkContinuousIndexD4 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC4DUC_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        r"""
        EvaluateValueAndDerivative(self, point, value, deriv)

        Parameters
        ----------
        point: itkPointD4 const &
        value: double &
        deriv: itkCovariantVectorD4 &

        EvaluateValueAndDerivative(self, point, value, deriv, threadId)

        Parameters
        ----------
        point: itkPointD4 const &
        value: double &
        deriv: itkCovariantVectorD4 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC4DUC_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, deriv)

        Parameters
        ----------
        x: itkContinuousIndexD4 const &
        value: double &
        deriv: itkCovariantVectorD4 &

        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, derivativeValue, threadId)

        Parameters
        ----------
        x: itkContinuousIndexD4 const &
        value: double &
        derivativeValue: itkCovariantVectorD4 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC4DUC_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC4DUC_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC4DUC_GetSplineOrder(self)

    def SetNumberOfWorkUnits(self, numWorkUnits):
        r"""
        SetNumberOfWorkUnits(self, numWorkUnits)

        Parameters
        ----------
        numWorkUnits: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC4DUC_SetNumberOfWorkUnits(self, numWorkUnits)

    def GetNumberOfWorkUnits(self):
        r"""GetNumberOfWorkUnits(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC4DUC_GetNumberOfWorkUnits(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC4DUC_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC4DUC_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC4DUC_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC4DUC_UseImageDirectionOff(self)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIUC4DUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineInterpolateImageFunctionIUC4DUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC4DUC_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIUC4DUC

        Create a new object of the class itkBSplineInterpolateImageFunctionIUC4DUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionIUC4DUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionIUC4DUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionIUC4DUC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionIUC4DUC in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC4DUC_swigregister(itkBSplineInterpolateImageFunctionIUC4DUC)

def itkBSplineInterpolateImageFunctionIUS2DUS_New():
    return itkBSplineInterpolateImageFunctionIUS2DUS.New()

class itkBSplineInterpolateImageFunctionIUS2DUS(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D):
    r"""Proxy of C++ itkBSplineInterpolateImageFunctionIUS2DUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineInterpolateImageFunctionIUS2DUS_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineInterpolateImageFunctionIUS2DUS_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_Clone(self)

    def Evaluate(self, *args):
        r"""
        Evaluate(self, point) -> double

        Parameters
        ----------
        point: itkPointD2 const &

        Evaluate(self, point, threadId) -> double

        Parameters
        ----------
        point: itkPointD2 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD2 const &

        EvaluateAtContinuousIndex(self, x, threadId) -> double

        Parameters
        ----------
        x: itkContinuousIndexD2 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        r"""
        EvaluateDerivative(self, point) -> itkCovariantVectorD2

        Parameters
        ----------
        point: itkPointD2 const &

        EvaluateDerivative(self, point, threadId) -> itkCovariantVectorD2

        Parameters
        ----------
        point: itkPointD2 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateDerivativeAtContinuousIndex(self, x) -> itkCovariantVectorD2

        Parameters
        ----------
        x: itkContinuousIndexD2 const &

        EvaluateDerivativeAtContinuousIndex(self, x, threadId) -> itkCovariantVectorD2

        Parameters
        ----------
        x: itkContinuousIndexD2 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        r"""
        EvaluateValueAndDerivative(self, point, value, deriv)

        Parameters
        ----------
        point: itkPointD2 const &
        value: double &
        deriv: itkCovariantVectorD2 &

        EvaluateValueAndDerivative(self, point, value, deriv, threadId)

        Parameters
        ----------
        point: itkPointD2 const &
        value: double &
        deriv: itkCovariantVectorD2 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, deriv)

        Parameters
        ----------
        x: itkContinuousIndexD2 const &
        value: double &
        deriv: itkCovariantVectorD2 &

        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, derivativeValue, threadId)

        Parameters
        ----------
        x: itkContinuousIndexD2 const &
        value: double &
        derivativeValue: itkCovariantVectorD2 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_GetSplineOrder(self)

    def SetNumberOfWorkUnits(self, numWorkUnits):
        r"""
        SetNumberOfWorkUnits(self, numWorkUnits)

        Parameters
        ----------
        numWorkUnits: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_SetNumberOfWorkUnits(self, numWorkUnits)

    def GetNumberOfWorkUnits(self):
        r"""GetNumberOfWorkUnits(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_GetNumberOfWorkUnits(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_UseImageDirectionOff(self)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIUS2DUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineInterpolateImageFunctionIUS2DUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIUS2DUS

        Create a new object of the class itkBSplineInterpolateImageFunctionIUS2DUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionIUS2DUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionIUS2DUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionIUS2DUS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionIUS2DUS in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_swigregister(itkBSplineInterpolateImageFunctionIUS2DUS)

def itkBSplineInterpolateImageFunctionIUS3DUS_New():
    return itkBSplineInterpolateImageFunctionIUS3DUS.New()

class itkBSplineInterpolateImageFunctionIUS3DUS(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D):
    r"""Proxy of C++ itkBSplineInterpolateImageFunctionIUS3DUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineInterpolateImageFunctionIUS3DUS_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineInterpolateImageFunctionIUS3DUS_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_Clone(self)

    def Evaluate(self, *args):
        r"""
        Evaluate(self, point) -> double

        Parameters
        ----------
        point: itkPointD3 const &

        Evaluate(self, point, threadId) -> double

        Parameters
        ----------
        point: itkPointD3 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD3 const &

        EvaluateAtContinuousIndex(self, x, threadId) -> double

        Parameters
        ----------
        x: itkContinuousIndexD3 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        r"""
        EvaluateDerivative(self, point) -> itkCovariantVectorD3

        Parameters
        ----------
        point: itkPointD3 const &

        EvaluateDerivative(self, point, threadId) -> itkCovariantVectorD3

        Parameters
        ----------
        point: itkPointD3 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateDerivativeAtContinuousIndex(self, x) -> itkCovariantVectorD3

        Parameters
        ----------
        x: itkContinuousIndexD3 const &

        EvaluateDerivativeAtContinuousIndex(self, x, threadId) -> itkCovariantVectorD3

        Parameters
        ----------
        x: itkContinuousIndexD3 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        r"""
        EvaluateValueAndDerivative(self, point, value, deriv)

        Parameters
        ----------
        point: itkPointD3 const &
        value: double &
        deriv: itkCovariantVectorD3 &

        EvaluateValueAndDerivative(self, point, value, deriv, threadId)

        Parameters
        ----------
        point: itkPointD3 const &
        value: double &
        deriv: itkCovariantVectorD3 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, deriv)

        Parameters
        ----------
        x: itkContinuousIndexD3 const &
        value: double &
        deriv: itkCovariantVectorD3 &

        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, derivativeValue, threadId)

        Parameters
        ----------
        x: itkContinuousIndexD3 const &
        value: double &
        derivativeValue: itkCovariantVectorD3 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_GetSplineOrder(self)

    def SetNumberOfWorkUnits(self, numWorkUnits):
        r"""
        SetNumberOfWorkUnits(self, numWorkUnits)

        Parameters
        ----------
        numWorkUnits: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_SetNumberOfWorkUnits(self, numWorkUnits)

    def GetNumberOfWorkUnits(self):
        r"""GetNumberOfWorkUnits(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_GetNumberOfWorkUnits(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_UseImageDirectionOff(self)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIUS3DUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineInterpolateImageFunctionIUS3DUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIUS3DUS

        Create a new object of the class itkBSplineInterpolateImageFunctionIUS3DUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionIUS3DUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionIUS3DUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionIUS3DUS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionIUS3DUS in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_swigregister(itkBSplineInterpolateImageFunctionIUS3DUS)

def itkBSplineInterpolateImageFunctionIUS4DUS_New():
    return itkBSplineInterpolateImageFunctionIUS4DUS.New()

class itkBSplineInterpolateImageFunctionIUS4DUS(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS4D):
    r"""Proxy of C++ itkBSplineInterpolateImageFunctionIUS4DUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineInterpolateImageFunctionIUS4DUS_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS4DUS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineInterpolateImageFunctionIUS4DUS_Pointer"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS4DUS_Clone(self)

    def Evaluate(self, *args):
        r"""
        Evaluate(self, point) -> double

        Parameters
        ----------
        point: itkPointD4 const &

        Evaluate(self, point, threadId) -> double

        Parameters
        ----------
        point: itkPointD4 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS4DUS_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        r"""
        EvaluateAtContinuousIndex(self, index) -> double

        Parameters
        ----------
        index: itkContinuousIndexD4 const &

        EvaluateAtContinuousIndex(self, x, threadId) -> double

        Parameters
        ----------
        x: itkContinuousIndexD4 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS4DUS_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        r"""
        EvaluateDerivative(self, point) -> itkCovariantVectorD4

        Parameters
        ----------
        point: itkPointD4 const &

        EvaluateDerivative(self, point, threadId) -> itkCovariantVectorD4

        Parameters
        ----------
        point: itkPointD4 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS4DUS_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateDerivativeAtContinuousIndex(self, x) -> itkCovariantVectorD4

        Parameters
        ----------
        x: itkContinuousIndexD4 const &

        EvaluateDerivativeAtContinuousIndex(self, x, threadId) -> itkCovariantVectorD4

        Parameters
        ----------
        x: itkContinuousIndexD4 const &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS4DUS_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        r"""
        EvaluateValueAndDerivative(self, point, value, deriv)

        Parameters
        ----------
        point: itkPointD4 const &
        value: double &
        deriv: itkCovariantVectorD4 &

        EvaluateValueAndDerivative(self, point, value, deriv, threadId)

        Parameters
        ----------
        point: itkPointD4 const &
        value: double &
        deriv: itkCovariantVectorD4 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS4DUS_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        r"""
        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, deriv)

        Parameters
        ----------
        x: itkContinuousIndexD4 const &
        value: double &
        deriv: itkCovariantVectorD4 &

        EvaluateValueAndDerivativeAtContinuousIndex(self, x, value, derivativeValue, threadId)

        Parameters
        ----------
        x: itkContinuousIndexD4 const &
        value: double &
        derivativeValue: itkCovariantVectorD4 &
        threadId: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS4DUS_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS4DUS_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS4DUS_GetSplineOrder(self)

    def SetNumberOfWorkUnits(self, numWorkUnits):
        r"""
        SetNumberOfWorkUnits(self, numWorkUnits)

        Parameters
        ----------
        numWorkUnits: unsigned int

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS4DUS_SetNumberOfWorkUnits(self, numWorkUnits)

    def GetNumberOfWorkUnits(self):
        r"""GetNumberOfWorkUnits(self) -> unsigned int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS4DUS_GetNumberOfWorkUnits(self)

    def SetUseImageDirection(self, _arg):
        r"""
        SetUseImageDirection(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS4DUS_SetUseImageDirection(self, _arg)

    def GetUseImageDirection(self):
        r"""GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS4DUS_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        r"""UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS4DUS_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        r"""UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS4DUS_UseImageDirectionOff(self)
    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIUS4DUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineInterpolateImageFunctionIUS4DUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS4DUS_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIUS4DUS

        Create a new object of the class itkBSplineInterpolateImageFunctionIUS4DUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineInterpolateImageFunctionIUS4DUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineInterpolateImageFunctionIUS4DUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineInterpolateImageFunctionIUS4DUS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineInterpolateImageFunctionIUS4DUS in _itkBSplineInterpolateImageFunctionPython:
_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS4DUS_swigregister(itkBSplineInterpolateImageFunctionIUS4DUS)

