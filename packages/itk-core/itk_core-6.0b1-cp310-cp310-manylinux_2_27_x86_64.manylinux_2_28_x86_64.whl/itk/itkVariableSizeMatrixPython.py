# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVariableSizeMatrixPython
else:
    import _itkVariableSizeMatrixPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
class itkVariableSizeMatrixD(object):
    r"""Proxy of C++ itkVariableSizeMatrixD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkVariableSizeMatrixD

        Parameters
        ----------
        matrix: itkVariableSizeMatrixD const &

        """
        return _itkVariableSizeMatrixPython.itkVariableSizeMatrixD___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkVariableSizeMatrixD

        Parameters
        ----------
        matrix: itkVariableSizeMatrixD const &

        """
        return _itkVariableSizeMatrixPython.itkVariableSizeMatrixD___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkVariableSizeMatrixD

        Parameters
        ----------
        matrix: itkVariableSizeMatrixD const &

        """
        return _itkVariableSizeMatrixPython.itkVariableSizeMatrixD___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkVariableSizeMatrixD

        Parameters
        ----------
        matrix: itkVariableSizeMatrixD const &

        """
        return _itkVariableSizeMatrixPython.itkVariableSizeMatrixD___isub__(self, matrix)

    def __neg__(self):
        r"""__neg__(self) -> itkVariableSizeMatrixD"""
        return _itkVariableSizeMatrixPython.itkVariableSizeMatrixD___neg__(self)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkVariableSizeMatrixD const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __imul__(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkVariableSizeMatrixPython.itkVariableSizeMatrixD___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkArrayD

        Parameters
        ----------
        vect: itkArrayD const &

        __mul__(self, matrix) -> itkVariableSizeMatrixD

        Parameters
        ----------
        matrix: itkVariableSizeMatrixD const &

        __mul__(self, matrix) -> vnl_matrixD

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __mul__(self, vc) -> vnl_vectorD

        Parameters
        ----------
        vc: vnl_vectorD const &

        __mul__(self, value) -> itkVariableSizeMatrixD

        Parameters
        ----------
        value: double const &

        """
        return _itkVariableSizeMatrixPython.itkVariableSizeMatrixD___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkVariableSizeMatrixPython.itkVariableSizeMatrixD___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkVariableSizeMatrixPython.itkVariableSizeMatrixD___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> double

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> double const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkVariableSizeMatrixPython.itkVariableSizeMatrixD___call__(self, *args)

    def GetVnlMatrix(self, *args):
        r"""
        GetVnlMatrix(self) -> vnl_matrixD
        GetVnlMatrix(self) -> vnl_matrixD
        """
        return _itkVariableSizeMatrixPython.itkVariableSizeMatrixD_GetVnlMatrix(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkVariableSizeMatrixPython.itkVariableSizeMatrixD_SetIdentity(self)

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkVariableSizeMatrixPython.itkVariableSizeMatrixD_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkVariableSizeMatrixD const &

        """
        return _itkVariableSizeMatrixPython.itkVariableSizeMatrixD___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVariableSizeMatrixD const &

        """
        return _itkVariableSizeMatrixPython.itkVariableSizeMatrixD___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrixD"""
        return _itkVariableSizeMatrixPython.itkVariableSizeMatrixD_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrixD"""
        return _itkVariableSizeMatrixPython.itkVariableSizeMatrixD_GetTranspose(self)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVariableSizeMatrixD
        __init__(self, rows, cols) -> itkVariableSizeMatrixD

        Parameters
        ----------
        rows: unsigned int
        cols: unsigned int

        __init__(self, matrix) -> itkVariableSizeMatrixD

        Parameters
        ----------
        matrix: itkVariableSizeMatrixD const &

        """
        _itkVariableSizeMatrixPython.itkVariableSizeMatrixD_swiginit(self, _itkVariableSizeMatrixPython.new_itkVariableSizeMatrixD(*args))

    def Rows(self):
        r"""Rows(self) -> unsigned int"""
        return _itkVariableSizeMatrixPython.itkVariableSizeMatrixD_Rows(self)

    def Cols(self):
        r"""Cols(self) -> unsigned int"""
        return _itkVariableSizeMatrixPython.itkVariableSizeMatrixD_Cols(self)

    def SetSize(self, r, c):
        r"""
        SetSize(self, r, c) -> bool

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _itkVariableSizeMatrixPython.itkVariableSizeMatrixD_SetSize(self, r, c)
    __swig_destroy__ = _itkVariableSizeMatrixPython.delete_itkVariableSizeMatrixD

# Register itkVariableSizeMatrixD in _itkVariableSizeMatrixPython:
_itkVariableSizeMatrixPython.itkVariableSizeMatrixD_swigregister(itkVariableSizeMatrixD)

