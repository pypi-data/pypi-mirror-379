# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMinimumMaximumImageCalculatorPython
else:
    import _itkMinimumMaximumImageCalculatorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython

def itkMinimumMaximumImageCalculatorID2_New():
    return itkMinimumMaximumImageCalculatorID2.New()

class itkMinimumMaximumImageCalculatorID2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMinimumMaximumImageCalculatorID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumMaximumImageCalculatorID2_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumMaximumImageCalculatorID2_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_Clone(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageD2 const *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_SetImage(self, _arg)

    def ComputeMinimum(self):
        r"""ComputeMinimum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_ComputeMinimum(self)

    def ComputeMaximum(self):
        r"""ComputeMaximum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_ComputeMaximum(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_Compute(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> double"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_GetMinimum(self)

    def GetMaximum(self):
        r"""GetMaximum(self) -> double"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_GetMaximum(self)

    def GetIndexOfMinimum(self):
        r"""GetIndexOfMinimum(self) -> itkIndex2"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_GetIndexOfMinimum(self)

    def GetIndexOfMaximum(self):
        r"""GetIndexOfMaximum(self) -> itkIndex2"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_GetIndexOfMaximum(self)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_SetRegion(self, region)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumMaximumImageCalculatorID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorID2

        Create a new object of the class itkMinimumMaximumImageCalculatorID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorID2 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID2_swigregister(itkMinimumMaximumImageCalculatorID2)

def itkMinimumMaximumImageCalculatorID3_New():
    return itkMinimumMaximumImageCalculatorID3.New()

class itkMinimumMaximumImageCalculatorID3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMinimumMaximumImageCalculatorID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumMaximumImageCalculatorID3_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumMaximumImageCalculatorID3_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_Clone(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageD3 const *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_SetImage(self, _arg)

    def ComputeMinimum(self):
        r"""ComputeMinimum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_ComputeMinimum(self)

    def ComputeMaximum(self):
        r"""ComputeMaximum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_ComputeMaximum(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_Compute(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> double"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_GetMinimum(self)

    def GetMaximum(self):
        r"""GetMaximum(self) -> double"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_GetMaximum(self)

    def GetIndexOfMinimum(self):
        r"""GetIndexOfMinimum(self) -> itkIndex3"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_GetIndexOfMinimum(self)

    def GetIndexOfMaximum(self):
        r"""GetIndexOfMaximum(self) -> itkIndex3"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_GetIndexOfMaximum(self)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_SetRegion(self, region)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumMaximumImageCalculatorID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorID3

        Create a new object of the class itkMinimumMaximumImageCalculatorID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorID3 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID3_swigregister(itkMinimumMaximumImageCalculatorID3)

def itkMinimumMaximumImageCalculatorID4_New():
    return itkMinimumMaximumImageCalculatorID4.New()

class itkMinimumMaximumImageCalculatorID4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMinimumMaximumImageCalculatorID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumMaximumImageCalculatorID4_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumMaximumImageCalculatorID4_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID4_Clone(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageD4 const *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID4_SetImage(self, _arg)

    def ComputeMinimum(self):
        r"""ComputeMinimum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID4_ComputeMinimum(self)

    def ComputeMaximum(self):
        r"""ComputeMaximum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID4_ComputeMaximum(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID4_Compute(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> double"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID4_GetMinimum(self)

    def GetMaximum(self):
        r"""GetMaximum(self) -> double"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID4_GetMaximum(self)

    def GetIndexOfMinimum(self):
        r"""GetIndexOfMinimum(self) -> itkIndex4"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID4_GetIndexOfMinimum(self)

    def GetIndexOfMaximum(self):
        r"""GetIndexOfMaximum(self) -> itkIndex4"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID4_GetIndexOfMaximum(self)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID4_SetRegion(self, region)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumMaximumImageCalculatorID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorID4

        Create a new object of the class itkMinimumMaximumImageCalculatorID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorID4 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorID4_swigregister(itkMinimumMaximumImageCalculatorID4)

def itkMinimumMaximumImageCalculatorIF2_New():
    return itkMinimumMaximumImageCalculatorIF2.New()

class itkMinimumMaximumImageCalculatorIF2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMinimumMaximumImageCalculatorIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumMaximumImageCalculatorIF2_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumMaximumImageCalculatorIF2_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_Clone(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageF2 const *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_SetImage(self, _arg)

    def ComputeMinimum(self):
        r"""ComputeMinimum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_ComputeMinimum(self)

    def ComputeMaximum(self):
        r"""ComputeMaximum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_ComputeMaximum(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_Compute(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> float"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_GetMinimum(self)

    def GetMaximum(self):
        r"""GetMaximum(self) -> float"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_GetMaximum(self)

    def GetIndexOfMinimum(self):
        r"""GetIndexOfMinimum(self) -> itkIndex2"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_GetIndexOfMinimum(self)

    def GetIndexOfMaximum(self):
        r"""GetIndexOfMaximum(self) -> itkIndex2"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_GetIndexOfMaximum(self)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_SetRegion(self, region)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumMaximumImageCalculatorIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorIF2

        Create a new object of the class itkMinimumMaximumImageCalculatorIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorIF2 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF2_swigregister(itkMinimumMaximumImageCalculatorIF2)

def itkMinimumMaximumImageCalculatorIF3_New():
    return itkMinimumMaximumImageCalculatorIF3.New()

class itkMinimumMaximumImageCalculatorIF3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMinimumMaximumImageCalculatorIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumMaximumImageCalculatorIF3_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumMaximumImageCalculatorIF3_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_Clone(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageF3 const *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_SetImage(self, _arg)

    def ComputeMinimum(self):
        r"""ComputeMinimum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_ComputeMinimum(self)

    def ComputeMaximum(self):
        r"""ComputeMaximum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_ComputeMaximum(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_Compute(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> float"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_GetMinimum(self)

    def GetMaximum(self):
        r"""GetMaximum(self) -> float"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_GetMaximum(self)

    def GetIndexOfMinimum(self):
        r"""GetIndexOfMinimum(self) -> itkIndex3"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_GetIndexOfMinimum(self)

    def GetIndexOfMaximum(self):
        r"""GetIndexOfMaximum(self) -> itkIndex3"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_GetIndexOfMaximum(self)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_SetRegion(self, region)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumMaximumImageCalculatorIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorIF3

        Create a new object of the class itkMinimumMaximumImageCalculatorIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorIF3 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF3_swigregister(itkMinimumMaximumImageCalculatorIF3)

def itkMinimumMaximumImageCalculatorIF4_New():
    return itkMinimumMaximumImageCalculatorIF4.New()

class itkMinimumMaximumImageCalculatorIF4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMinimumMaximumImageCalculatorIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumMaximumImageCalculatorIF4_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumMaximumImageCalculatorIF4_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF4_Clone(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageF4 const *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF4_SetImage(self, _arg)

    def ComputeMinimum(self):
        r"""ComputeMinimum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF4_ComputeMinimum(self)

    def ComputeMaximum(self):
        r"""ComputeMaximum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF4_ComputeMaximum(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF4_Compute(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> float"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF4_GetMinimum(self)

    def GetMaximum(self):
        r"""GetMaximum(self) -> float"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF4_GetMaximum(self)

    def GetIndexOfMinimum(self):
        r"""GetIndexOfMinimum(self) -> itkIndex4"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF4_GetIndexOfMinimum(self)

    def GetIndexOfMaximum(self):
        r"""GetIndexOfMaximum(self) -> itkIndex4"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF4_GetIndexOfMaximum(self)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF4_SetRegion(self, region)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumMaximumImageCalculatorIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorIF4

        Create a new object of the class itkMinimumMaximumImageCalculatorIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorIF4 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIF4_swigregister(itkMinimumMaximumImageCalculatorIF4)

def itkMinimumMaximumImageCalculatorISS2_New():
    return itkMinimumMaximumImageCalculatorISS2.New()

class itkMinimumMaximumImageCalculatorISS2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMinimumMaximumImageCalculatorISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumMaximumImageCalculatorISS2_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumMaximumImageCalculatorISS2_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_Clone(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageSS2 const *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_SetImage(self, _arg)

    def ComputeMinimum(self):
        r"""ComputeMinimum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_ComputeMinimum(self)

    def ComputeMaximum(self):
        r"""ComputeMaximum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_ComputeMaximum(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_Compute(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> short"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_GetMinimum(self)

    def GetMaximum(self):
        r"""GetMaximum(self) -> short"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_GetMaximum(self)

    def GetIndexOfMinimum(self):
        r"""GetIndexOfMinimum(self) -> itkIndex2"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_GetIndexOfMinimum(self)

    def GetIndexOfMaximum(self):
        r"""GetIndexOfMaximum(self) -> itkIndex2"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_GetIndexOfMaximum(self)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_SetRegion(self, region)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumMaximumImageCalculatorISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorISS2

        Create a new object of the class itkMinimumMaximumImageCalculatorISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorISS2 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS2_swigregister(itkMinimumMaximumImageCalculatorISS2)

def itkMinimumMaximumImageCalculatorISS3_New():
    return itkMinimumMaximumImageCalculatorISS3.New()

class itkMinimumMaximumImageCalculatorISS3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMinimumMaximumImageCalculatorISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumMaximumImageCalculatorISS3_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumMaximumImageCalculatorISS3_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_Clone(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageSS3 const *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_SetImage(self, _arg)

    def ComputeMinimum(self):
        r"""ComputeMinimum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_ComputeMinimum(self)

    def ComputeMaximum(self):
        r"""ComputeMaximum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_ComputeMaximum(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_Compute(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> short"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_GetMinimum(self)

    def GetMaximum(self):
        r"""GetMaximum(self) -> short"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_GetMaximum(self)

    def GetIndexOfMinimum(self):
        r"""GetIndexOfMinimum(self) -> itkIndex3"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_GetIndexOfMinimum(self)

    def GetIndexOfMaximum(self):
        r"""GetIndexOfMaximum(self) -> itkIndex3"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_GetIndexOfMaximum(self)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_SetRegion(self, region)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumMaximumImageCalculatorISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorISS3

        Create a new object of the class itkMinimumMaximumImageCalculatorISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorISS3 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS3_swigregister(itkMinimumMaximumImageCalculatorISS3)

def itkMinimumMaximumImageCalculatorISS4_New():
    return itkMinimumMaximumImageCalculatorISS4.New()

class itkMinimumMaximumImageCalculatorISS4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMinimumMaximumImageCalculatorISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumMaximumImageCalculatorISS4_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumMaximumImageCalculatorISS4_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS4_Clone(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageSS4 const *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS4_SetImage(self, _arg)

    def ComputeMinimum(self):
        r"""ComputeMinimum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS4_ComputeMinimum(self)

    def ComputeMaximum(self):
        r"""ComputeMaximum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS4_ComputeMaximum(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS4_Compute(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> short"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS4_GetMinimum(self)

    def GetMaximum(self):
        r"""GetMaximum(self) -> short"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS4_GetMaximum(self)

    def GetIndexOfMinimum(self):
        r"""GetIndexOfMinimum(self) -> itkIndex4"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS4_GetIndexOfMinimum(self)

    def GetIndexOfMaximum(self):
        r"""GetIndexOfMaximum(self) -> itkIndex4"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS4_GetIndexOfMaximum(self)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS4_SetRegion(self, region)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumMaximumImageCalculatorISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorISS4

        Create a new object of the class itkMinimumMaximumImageCalculatorISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorISS4 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorISS4_swigregister(itkMinimumMaximumImageCalculatorISS4)

def itkMinimumMaximumImageCalculatorIUC2_New():
    return itkMinimumMaximumImageCalculatorIUC2.New()

class itkMinimumMaximumImageCalculatorIUC2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMinimumMaximumImageCalculatorIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumMaximumImageCalculatorIUC2_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumMaximumImageCalculatorIUC2_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_Clone(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC2 const *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_SetImage(self, _arg)

    def ComputeMinimum(self):
        r"""ComputeMinimum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_ComputeMinimum(self)

    def ComputeMaximum(self):
        r"""ComputeMaximum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_ComputeMaximum(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_Compute(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> unsigned char"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_GetMinimum(self)

    def GetMaximum(self):
        r"""GetMaximum(self) -> unsigned char"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_GetMaximum(self)

    def GetIndexOfMinimum(self):
        r"""GetIndexOfMinimum(self) -> itkIndex2"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_GetIndexOfMinimum(self)

    def GetIndexOfMaximum(self):
        r"""GetIndexOfMaximum(self) -> itkIndex2"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_GetIndexOfMaximum(self)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_SetRegion(self, region)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorIUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumMaximumImageCalculatorIUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorIUC2

        Create a new object of the class itkMinimumMaximumImageCalculatorIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorIUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorIUC2 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC2_swigregister(itkMinimumMaximumImageCalculatorIUC2)

def itkMinimumMaximumImageCalculatorIUC3_New():
    return itkMinimumMaximumImageCalculatorIUC3.New()

class itkMinimumMaximumImageCalculatorIUC3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMinimumMaximumImageCalculatorIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumMaximumImageCalculatorIUC3_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumMaximumImageCalculatorIUC3_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_Clone(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC3 const *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_SetImage(self, _arg)

    def ComputeMinimum(self):
        r"""ComputeMinimum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_ComputeMinimum(self)

    def ComputeMaximum(self):
        r"""ComputeMaximum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_ComputeMaximum(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_Compute(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> unsigned char"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_GetMinimum(self)

    def GetMaximum(self):
        r"""GetMaximum(self) -> unsigned char"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_GetMaximum(self)

    def GetIndexOfMinimum(self):
        r"""GetIndexOfMinimum(self) -> itkIndex3"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_GetIndexOfMinimum(self)

    def GetIndexOfMaximum(self):
        r"""GetIndexOfMaximum(self) -> itkIndex3"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_GetIndexOfMaximum(self)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_SetRegion(self, region)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumMaximumImageCalculatorIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorIUC3

        Create a new object of the class itkMinimumMaximumImageCalculatorIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorIUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorIUC3 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC3_swigregister(itkMinimumMaximumImageCalculatorIUC3)

def itkMinimumMaximumImageCalculatorIUC4_New():
    return itkMinimumMaximumImageCalculatorIUC4.New()

class itkMinimumMaximumImageCalculatorIUC4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMinimumMaximumImageCalculatorIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumMaximumImageCalculatorIUC4_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumMaximumImageCalculatorIUC4_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC4_Clone(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUC4 const *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC4_SetImage(self, _arg)

    def ComputeMinimum(self):
        r"""ComputeMinimum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC4_ComputeMinimum(self)

    def ComputeMaximum(self):
        r"""ComputeMaximum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC4_ComputeMaximum(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC4_Compute(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> unsigned char"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC4_GetMinimum(self)

    def GetMaximum(self):
        r"""GetMaximum(self) -> unsigned char"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC4_GetMaximum(self)

    def GetIndexOfMinimum(self):
        r"""GetIndexOfMinimum(self) -> itkIndex4"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC4_GetIndexOfMinimum(self)

    def GetIndexOfMaximum(self):
        r"""GetIndexOfMaximum(self) -> itkIndex4"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC4_GetIndexOfMaximum(self)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC4_SetRegion(self, region)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorIUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumMaximumImageCalculatorIUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorIUC4

        Create a new object of the class itkMinimumMaximumImageCalculatorIUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorIUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorIUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorIUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorIUC4 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUC4_swigregister(itkMinimumMaximumImageCalculatorIUC4)

def itkMinimumMaximumImageCalculatorIUS2_New():
    return itkMinimumMaximumImageCalculatorIUS2.New()

class itkMinimumMaximumImageCalculatorIUS2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMinimumMaximumImageCalculatorIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumMaximumImageCalculatorIUS2_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumMaximumImageCalculatorIUS2_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_Clone(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUS2 const *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_SetImage(self, _arg)

    def ComputeMinimum(self):
        r"""ComputeMinimum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_ComputeMinimum(self)

    def ComputeMaximum(self):
        r"""ComputeMaximum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_ComputeMaximum(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_Compute(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> unsigned short"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_GetMinimum(self)

    def GetMaximum(self):
        r"""GetMaximum(self) -> unsigned short"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_GetMaximum(self)

    def GetIndexOfMinimum(self):
        r"""GetIndexOfMinimum(self) -> itkIndex2"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_GetIndexOfMinimum(self)

    def GetIndexOfMaximum(self):
        r"""GetIndexOfMaximum(self) -> itkIndex2"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_GetIndexOfMaximum(self)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_SetRegion(self, region)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorIUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumMaximumImageCalculatorIUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorIUS2

        Create a new object of the class itkMinimumMaximumImageCalculatorIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorIUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorIUS2 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS2_swigregister(itkMinimumMaximumImageCalculatorIUS2)

def itkMinimumMaximumImageCalculatorIUS3_New():
    return itkMinimumMaximumImageCalculatorIUS3.New()

class itkMinimumMaximumImageCalculatorIUS3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMinimumMaximumImageCalculatorIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumMaximumImageCalculatorIUS3_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumMaximumImageCalculatorIUS3_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_Clone(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUS3 const *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_SetImage(self, _arg)

    def ComputeMinimum(self):
        r"""ComputeMinimum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_ComputeMinimum(self)

    def ComputeMaximum(self):
        r"""ComputeMaximum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_ComputeMaximum(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_Compute(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> unsigned short"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_GetMinimum(self)

    def GetMaximum(self):
        r"""GetMaximum(self) -> unsigned short"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_GetMaximum(self)

    def GetIndexOfMinimum(self):
        r"""GetIndexOfMinimum(self) -> itkIndex3"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_GetIndexOfMinimum(self)

    def GetIndexOfMaximum(self):
        r"""GetIndexOfMaximum(self) -> itkIndex3"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_GetIndexOfMaximum(self)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_SetRegion(self, region)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumMaximumImageCalculatorIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorIUS3

        Create a new object of the class itkMinimumMaximumImageCalculatorIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorIUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorIUS3 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS3_swigregister(itkMinimumMaximumImageCalculatorIUS3)

def itkMinimumMaximumImageCalculatorIUS4_New():
    return itkMinimumMaximumImageCalculatorIUS4.New()

class itkMinimumMaximumImageCalculatorIUS4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMinimumMaximumImageCalculatorIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMinimumMaximumImageCalculatorIUS4_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMinimumMaximumImageCalculatorIUS4_Pointer"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS4_Clone(self)

    def SetImage(self, _arg):
        r"""
        SetImage(self, _arg)

        Parameters
        ----------
        _arg: itkImageUS4 const *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS4_SetImage(self, _arg)

    def ComputeMinimum(self):
        r"""ComputeMinimum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS4_ComputeMinimum(self)

    def ComputeMaximum(self):
        r"""ComputeMaximum(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS4_ComputeMaximum(self)

    def Compute(self):
        r"""Compute(self)"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS4_Compute(self)

    def GetMinimum(self):
        r"""GetMinimum(self) -> unsigned short"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS4_GetMinimum(self)

    def GetMaximum(self):
        r"""GetMaximum(self) -> unsigned short"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS4_GetMaximum(self)

    def GetIndexOfMinimum(self):
        r"""GetIndexOfMinimum(self) -> itkIndex4"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS4_GetIndexOfMinimum(self)

    def GetIndexOfMaximum(self):
        r"""GetIndexOfMaximum(self) -> itkIndex4"""
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS4_GetIndexOfMaximum(self)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS4_SetRegion(self, region)
    __swig_destroy__ = _itkMinimumMaximumImageCalculatorPython.delete_itkMinimumMaximumImageCalculatorIUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMinimumMaximumImageCalculatorIUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMinimumMaximumImageCalculatorIUS4

        Create a new object of the class itkMinimumMaximumImageCalculatorIUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinimumMaximumImageCalculatorIUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinimumMaximumImageCalculatorIUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinimumMaximumImageCalculatorIUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinimumMaximumImageCalculatorIUS4 in _itkMinimumMaximumImageCalculatorPython:
_itkMinimumMaximumImageCalculatorPython.itkMinimumMaximumImageCalculatorIUS4_swigregister(itkMinimumMaximumImageCalculatorIUS4)

