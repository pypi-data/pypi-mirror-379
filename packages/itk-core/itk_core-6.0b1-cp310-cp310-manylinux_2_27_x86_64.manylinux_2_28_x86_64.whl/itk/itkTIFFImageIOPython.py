# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKIOTIFFPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkTIFFImageIOPython
else:
    import _itkTIFFImageIOPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.ITKIOImageBaseBasePython
import itk.itkRGBPixelPython

def itkTIFFImageIO_New():
    return itkTIFFImageIO.New()

class itkTIFFImageIO(itk.ITKIOImageBaseBasePython.itkImageIOBase):
    r"""Proxy of C++ itkTIFFImageIO class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTIFFImageIO_Pointer"""
        return _itkTIFFImageIOPython.itkTIFFImageIO___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTIFFImageIO_Pointer"""
        return _itkTIFFImageIOPython.itkTIFFImageIO_Clone(self)

    def ReadVolume(self, buffer):
        r"""
        ReadVolume(self, buffer)

        Parameters
        ----------
        buffer: void *

        """
        return _itkTIFFImageIOPython.itkTIFFImageIO_ReadVolume(self, buffer)
    NOFORMAT = _itkTIFFImageIOPython.itkTIFFImageIO_NOFORMAT
    
    RGB_ = _itkTIFFImageIOPython.itkTIFFImageIO_RGB_
    
    GRAYSCALE = _itkTIFFImageIOPython.itkTIFFImageIO_GRAYSCALE
    
    PALETTE_RGB = _itkTIFFImageIOPython.itkTIFFImageIO_PALETTE_RGB
    
    PALETTE_GRAYSCALE = _itkTIFFImageIOPython.itkTIFFImageIO_PALETTE_GRAYSCALE
    
    OTHER = _itkTIFFImageIOPython.itkTIFFImageIO_OTHER
    
    NoCompression = _itkTIFFImageIOPython.itkTIFFImageIO_NoCompression
    
    PackBits = _itkTIFFImageIOPython.itkTIFFImageIO_PackBits
    
    JPEG = _itkTIFFImageIOPython.itkTIFFImageIO_JPEG
    
    Deflate = _itkTIFFImageIOPython.itkTIFFImageIO_Deflate
    
    AdobeDeflate = _itkTIFFImageIOPython.itkTIFFImageIO_AdobeDeflate
    
    LZW = _itkTIFFImageIOPython.itkTIFFImageIO_LZW
    

    def SetCompressionToNoCompression(self):
        r"""SetCompressionToNoCompression(self)"""
        return _itkTIFFImageIOPython.itkTIFFImageIO_SetCompressionToNoCompression(self)

    def SetCompressionToPackBits(self):
        r"""SetCompressionToPackBits(self)"""
        return _itkTIFFImageIOPython.itkTIFFImageIO_SetCompressionToPackBits(self)

    def SetCompressionToJPEG(self):
        r"""SetCompressionToJPEG(self)"""
        return _itkTIFFImageIOPython.itkTIFFImageIO_SetCompressionToJPEG(self)

    def SetCompressionToDeflate(self):
        r"""SetCompressionToDeflate(self)"""
        return _itkTIFFImageIOPython.itkTIFFImageIO_SetCompressionToDeflate(self)

    def SetCompressionToAdobeDeflate(self):
        r"""SetCompressionToAdobeDeflate(self)"""
        return _itkTIFFImageIOPython.itkTIFFImageIO_SetCompressionToAdobeDeflate(self)

    def SetCompressionToLZW(self):
        r"""SetCompressionToLZW(self)"""
        return _itkTIFFImageIOPython.itkTIFFImageIO_SetCompressionToLZW(self)

    def SetJPEGQuality(self, _JPEGQuality):
        r"""
        SetJPEGQuality(self, _JPEGQuality)

        Parameters
        ----------
        _JPEGQuality: int

        """
        return _itkTIFFImageIOPython.itkTIFFImageIO_SetJPEGQuality(self, _JPEGQuality)

    def GetJPEGQuality(self):
        r"""GetJPEGQuality(self) -> int"""
        return _itkTIFFImageIOPython.itkTIFFImageIO_GetJPEGQuality(self)

    def GetColorPalette(self):
        r"""GetColorPalette(self) -> std::vector< itkRGBPixelUS,std::allocator< itkRGBPixelUS > > const &"""
        return _itkTIFFImageIOPython.itkTIFFImageIO_GetColorPalette(self)

    def SetColorPalette(self, _arg):
        r"""
        SetColorPalette(self, _arg)

        Parameters
        ----------
        _arg: std::vector< itkRGBPixelUS,std::allocator< itkRGBPixelUS > > const

        """
        return _itkTIFFImageIOPython.itkTIFFImageIO_SetColorPalette(self, _arg)
    __swig_destroy__ = _itkTIFFImageIOPython.delete_itkTIFFImageIO

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTIFFImageIO

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTIFFImageIOPython.itkTIFFImageIO_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTIFFImageIO

        Create a new object of the class itkTIFFImageIO and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTIFFImageIO.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTIFFImageIO.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTIFFImageIO.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTIFFImageIO in _itkTIFFImageIOPython:
_itkTIFFImageIOPython.itkTIFFImageIO_swigregister(itkTIFFImageIO)

def itkTIFFImageIOFactory_New():
    return itkTIFFImageIOFactory.New()

class itkTIFFImageIOFactory(itk.ITKCommonBasePython.itkObjectFactoryBase):
    r"""Proxy of C++ itkTIFFImageIOFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTIFFImageIOFactory_Pointer"""
        return _itkTIFFImageIOPython.itkTIFFImageIOFactory___New_orig__()

    @staticmethod
    def FactoryNew():
        r"""FactoryNew() -> itkTIFFImageIOFactory"""
        return _itkTIFFImageIOPython.itkTIFFImageIOFactory_FactoryNew()

    @staticmethod
    def RegisterOneFactory():
        r"""RegisterOneFactory()"""
        return _itkTIFFImageIOPython.itkTIFFImageIOFactory_RegisterOneFactory()
    __swig_destroy__ = _itkTIFFImageIOPython.delete_itkTIFFImageIOFactory

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTIFFImageIOFactory

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTIFFImageIOPython.itkTIFFImageIOFactory_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTIFFImageIOFactory

        Create a new object of the class itkTIFFImageIOFactory and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTIFFImageIOFactory.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTIFFImageIOFactory.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTIFFImageIOFactory.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTIFFImageIOFactory in _itkTIFFImageIOPython:
_itkTIFFImageIOPython.itkTIFFImageIOFactory_swigregister(itkTIFFImageIOFactory)

