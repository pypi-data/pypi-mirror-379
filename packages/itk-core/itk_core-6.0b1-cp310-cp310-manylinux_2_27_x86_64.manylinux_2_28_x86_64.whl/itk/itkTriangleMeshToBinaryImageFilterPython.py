# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKMeshPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkTriangleMeshToBinaryImageFilterPython
else:
    import _itkTriangleMeshToBinaryImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkMeshBasePython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkPointSetPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkMapContainerPython
import itk.itkBoundingBoxPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
class itkPoint1D(object):
    r"""Proxy of C++ itkPoint1D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPoint1D
        __init__(self, p, s) -> itkPoint1D

        Parameters
        ----------
        p: double const
        s: int const

        __init__(self, point) -> itkPoint1D

        Parameters
        ----------
        point: itkPoint1D const &

        """
        _itkTriangleMeshToBinaryImageFilterPython.itkPoint1D_swiginit(self, _itkTriangleMeshToBinaryImageFilterPython.new_itkPoint1D(*args))

    def getX(self):
        r"""getX(self) -> double"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkPoint1D_getX(self)

    def getSign(self):
        r"""getSign(self) -> int"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkPoint1D_getSign(self)
    __swig_destroy__ = _itkTriangleMeshToBinaryImageFilterPython.delete_itkPoint1D

# Register itkPoint1D in _itkTriangleMeshToBinaryImageFilterPython:
_itkTriangleMeshToBinaryImageFilterPython.itkPoint1D_swigregister(itkPoint1D)

def itkTriangleMeshToBinaryImageFilterMD3ID3_New():
    return itkTriangleMeshToBinaryImageFilterMD3ID3.New()

class itkTriangleMeshToBinaryImageFilterMD3ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkTriangleMeshToBinaryImageFilterMD3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTriangleMeshToBinaryImageFilterMD3ID3_Pointer"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTriangleMeshToBinaryImageFilterMD3ID3_Pointer"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_Clone(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD3

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetSpacing(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD33

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetDirection(self)

    def SetInsideValue(self, _arg):
        r"""
        SetInsideValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetInsideValue(self, _arg)

    def GetInsideValue(self):
        r"""GetInsideValue(self) -> double"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetInsideValue(self)

    def SetOutsideValue(self, _arg):
        r"""
        SetOutsideValue(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetOutsideValue(self, _arg)

    def GetOutsideValue(self):
        r"""GetOutsideValue(self) -> double"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetOutsideValue(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD3

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetOrigin(self)

    def SetIndex(self, _arg):
        r"""
        SetIndex(self, _arg)

        Parameters
        ----------
        _arg: itkIndex3

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetIndex(self, _arg)

    def GetIndex(self):
        r"""GetIndex(self) -> itkIndex3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetIndex(self)

    def SetSize(self, _arg):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetSize(self, _arg)

    def GetSize(self):
        r"""GetSize(self) -> itkSize3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetSize(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshD3 *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetInput(self, input)

    def SetInfoImage(self, InfoImage):
        r"""
        SetInfoImage(self, InfoImage)

        Parameters
        ----------
        InfoImage: itkImageD3 *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetInfoImage(self, InfoImage)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshD3
        GetInput(self, idx) -> itkMeshD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetInput(self, *args)

    def SetTolerance(self, _arg):
        r"""
        SetTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_SetTolerance(self, _arg)

    def GetTolerance(self):
        r"""GetTolerance(self) -> double"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_GetTolerance(self)
    __swig_destroy__ = _itkTriangleMeshToBinaryImageFilterPython.delete_itkTriangleMeshToBinaryImageFilterMD3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTriangleMeshToBinaryImageFilterMD3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTriangleMeshToBinaryImageFilterMD3ID3

        Create a new object of the class itkTriangleMeshToBinaryImageFilterMD3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleMeshToBinaryImageFilterMD3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTriangleMeshToBinaryImageFilterMD3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTriangleMeshToBinaryImageFilterMD3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTriangleMeshToBinaryImageFilterMD3ID3 in _itkTriangleMeshToBinaryImageFilterPython:
_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMD3ID3_swigregister(itkTriangleMeshToBinaryImageFilterMD3ID3)

def itkTriangleMeshToBinaryImageFilterMF3IF3_New():
    return itkTriangleMeshToBinaryImageFilterMF3IF3.New()

class itkTriangleMeshToBinaryImageFilterMF3IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkTriangleMeshToBinaryImageFilterMF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTriangleMeshToBinaryImageFilterMF3IF3_Pointer"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTriangleMeshToBinaryImageFilterMF3IF3_Pointer"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_Clone(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD3

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetSpacing(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD33

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetDirection(self)

    def SetInsideValue(self, _arg):
        r"""
        SetInsideValue(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetInsideValue(self, _arg)

    def GetInsideValue(self):
        r"""GetInsideValue(self) -> float"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetInsideValue(self)

    def SetOutsideValue(self, _arg):
        r"""
        SetOutsideValue(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetOutsideValue(self, _arg)

    def GetOutsideValue(self):
        r"""GetOutsideValue(self) -> float"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetOutsideValue(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD3

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetOrigin(self)

    def SetIndex(self, _arg):
        r"""
        SetIndex(self, _arg)

        Parameters
        ----------
        _arg: itkIndex3

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetIndex(self, _arg)

    def GetIndex(self):
        r"""GetIndex(self) -> itkIndex3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetIndex(self)

    def SetSize(self, _arg):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetSize(self, _arg)

    def GetSize(self):
        r"""GetSize(self) -> itkSize3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetSize(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshF3 *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetInput(self, input)

    def SetInfoImage(self, InfoImage):
        r"""
        SetInfoImage(self, InfoImage)

        Parameters
        ----------
        InfoImage: itkImageF3 *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetInfoImage(self, InfoImage)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshF3
        GetInput(self, idx) -> itkMeshF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetInput(self, *args)

    def SetTolerance(self, _arg):
        r"""
        SetTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_SetTolerance(self, _arg)

    def GetTolerance(self):
        r"""GetTolerance(self) -> double"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_GetTolerance(self)
    __swig_destroy__ = _itkTriangleMeshToBinaryImageFilterPython.delete_itkTriangleMeshToBinaryImageFilterMF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTriangleMeshToBinaryImageFilterMF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTriangleMeshToBinaryImageFilterMF3IF3

        Create a new object of the class itkTriangleMeshToBinaryImageFilterMF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleMeshToBinaryImageFilterMF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTriangleMeshToBinaryImageFilterMF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTriangleMeshToBinaryImageFilterMF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTriangleMeshToBinaryImageFilterMF3IF3 in _itkTriangleMeshToBinaryImageFilterPython:
_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMF3IF3_swigregister(itkTriangleMeshToBinaryImageFilterMF3IF3)

def itkTriangleMeshToBinaryImageFilterMSS3ISS3_New():
    return itkTriangleMeshToBinaryImageFilterMSS3ISS3.New()

class itkTriangleMeshToBinaryImageFilterMSS3ISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkTriangleMeshToBinaryImageFilterMSS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTriangleMeshToBinaryImageFilterMSS3ISS3_Pointer"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTriangleMeshToBinaryImageFilterMSS3ISS3_Pointer"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_Clone(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD3

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetSpacing(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD33

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetDirection(self)

    def SetInsideValue(self, _arg):
        r"""
        SetInsideValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetInsideValue(self, _arg)

    def GetInsideValue(self):
        r"""GetInsideValue(self) -> short"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetInsideValue(self)

    def SetOutsideValue(self, _arg):
        r"""
        SetOutsideValue(self, _arg)

        Parameters
        ----------
        _arg: short

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetOutsideValue(self, _arg)

    def GetOutsideValue(self):
        r"""GetOutsideValue(self) -> short"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetOutsideValue(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD3

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetOrigin(self)

    def SetIndex(self, _arg):
        r"""
        SetIndex(self, _arg)

        Parameters
        ----------
        _arg: itkIndex3

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetIndex(self, _arg)

    def GetIndex(self):
        r"""GetIndex(self) -> itkIndex3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetIndex(self)

    def SetSize(self, _arg):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetSize(self, _arg)

    def GetSize(self):
        r"""GetSize(self) -> itkSize3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetSize(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshSS3 *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetInput(self, input)

    def SetInfoImage(self, InfoImage):
        r"""
        SetInfoImage(self, InfoImage)

        Parameters
        ----------
        InfoImage: itkImageSS3 *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetInfoImage(self, InfoImage)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshSS3
        GetInput(self, idx) -> itkMeshSS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetInput(self, *args)

    def SetTolerance(self, _arg):
        r"""
        SetTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_SetTolerance(self, _arg)

    def GetTolerance(self):
        r"""GetTolerance(self) -> double"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_GetTolerance(self)
    __swig_destroy__ = _itkTriangleMeshToBinaryImageFilterPython.delete_itkTriangleMeshToBinaryImageFilterMSS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTriangleMeshToBinaryImageFilterMSS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTriangleMeshToBinaryImageFilterMSS3ISS3

        Create a new object of the class itkTriangleMeshToBinaryImageFilterMSS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleMeshToBinaryImageFilterMSS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTriangleMeshToBinaryImageFilterMSS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTriangleMeshToBinaryImageFilterMSS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTriangleMeshToBinaryImageFilterMSS3ISS3 in _itkTriangleMeshToBinaryImageFilterPython:
_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMSS3ISS3_swigregister(itkTriangleMeshToBinaryImageFilterMSS3ISS3)

def itkTriangleMeshToBinaryImageFilterMUC3IUC3_New():
    return itkTriangleMeshToBinaryImageFilterMUC3IUC3.New()

class itkTriangleMeshToBinaryImageFilterMUC3IUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkTriangleMeshToBinaryImageFilterMUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTriangleMeshToBinaryImageFilterMUC3IUC3_Pointer"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTriangleMeshToBinaryImageFilterMUC3IUC3_Pointer"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_Clone(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD3

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetSpacing(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD33

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetDirection(self)

    def SetInsideValue(self, _arg):
        r"""
        SetInsideValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetInsideValue(self, _arg)

    def GetInsideValue(self):
        r"""GetInsideValue(self) -> unsigned char"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetInsideValue(self)

    def SetOutsideValue(self, _arg):
        r"""
        SetOutsideValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned char

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetOutsideValue(self, _arg)

    def GetOutsideValue(self):
        r"""GetOutsideValue(self) -> unsigned char"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetOutsideValue(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD3

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetOrigin(self)

    def SetIndex(self, _arg):
        r"""
        SetIndex(self, _arg)

        Parameters
        ----------
        _arg: itkIndex3

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetIndex(self, _arg)

    def GetIndex(self):
        r"""GetIndex(self) -> itkIndex3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetIndex(self)

    def SetSize(self, _arg):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetSize(self, _arg)

    def GetSize(self):
        r"""GetSize(self) -> itkSize3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetSize(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshUC3 *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetInput(self, input)

    def SetInfoImage(self, InfoImage):
        r"""
        SetInfoImage(self, InfoImage)

        Parameters
        ----------
        InfoImage: itkImageUC3 *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetInfoImage(self, InfoImage)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshUC3
        GetInput(self, idx) -> itkMeshUC3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetInput(self, *args)

    def SetTolerance(self, _arg):
        r"""
        SetTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_SetTolerance(self, _arg)

    def GetTolerance(self):
        r"""GetTolerance(self) -> double"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_GetTolerance(self)
    __swig_destroy__ = _itkTriangleMeshToBinaryImageFilterPython.delete_itkTriangleMeshToBinaryImageFilterMUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTriangleMeshToBinaryImageFilterMUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTriangleMeshToBinaryImageFilterMUC3IUC3

        Create a new object of the class itkTriangleMeshToBinaryImageFilterMUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleMeshToBinaryImageFilterMUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTriangleMeshToBinaryImageFilterMUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTriangleMeshToBinaryImageFilterMUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTriangleMeshToBinaryImageFilterMUC3IUC3 in _itkTriangleMeshToBinaryImageFilterPython:
_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUC3IUC3_swigregister(itkTriangleMeshToBinaryImageFilterMUC3IUC3)

def itkTriangleMeshToBinaryImageFilterMUS3IUS3_New():
    return itkTriangleMeshToBinaryImageFilterMUS3IUS3.New()

class itkTriangleMeshToBinaryImageFilterMUS3IUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkTriangleMeshToBinaryImageFilterMUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkTriangleMeshToBinaryImageFilterMUS3IUS3_Pointer"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkTriangleMeshToBinaryImageFilterMUS3IUS3_Pointer"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_Clone(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD3

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetSpacing(self, *args)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetSpacing(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD33

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetDirection(self)

    def SetInsideValue(self, _arg):
        r"""
        SetInsideValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetInsideValue(self, _arg)

    def GetInsideValue(self):
        r"""GetInsideValue(self) -> unsigned short"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetInsideValue(self)

    def SetOutsideValue(self, _arg):
        r"""
        SetOutsideValue(self, _arg)

        Parameters
        ----------
        _arg: unsigned short

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetOutsideValue(self, _arg)

    def GetOutsideValue(self):
        r"""GetOutsideValue(self) -> unsigned short"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetOutsideValue(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD3

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetOrigin(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetOrigin(self)

    def SetIndex(self, _arg):
        r"""
        SetIndex(self, _arg)

        Parameters
        ----------
        _arg: itkIndex3

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetIndex(self, _arg)

    def GetIndex(self):
        r"""GetIndex(self) -> itkIndex3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetIndex(self)

    def SetSize(self, _arg):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetSize(self, _arg)

    def GetSize(self):
        r"""GetSize(self) -> itkSize3"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetSize(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkMeshUS3 *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetInput(self, input)

    def SetInfoImage(self, InfoImage):
        r"""
        SetInfoImage(self, InfoImage)

        Parameters
        ----------
        InfoImage: itkImageUS3 *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetInfoImage(self, InfoImage)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkMeshUS3
        GetInput(self, idx) -> itkMeshUS3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetInput(self, *args)

    def SetTolerance(self, _arg):
        r"""
        SetTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_SetTolerance(self, _arg)

    def GetTolerance(self):
        r"""GetTolerance(self) -> double"""
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_GetTolerance(self)
    __swig_destroy__ = _itkTriangleMeshToBinaryImageFilterPython.delete_itkTriangleMeshToBinaryImageFilterMUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkTriangleMeshToBinaryImageFilterMUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkTriangleMeshToBinaryImageFilterMUS3IUS3

        Create a new object of the class itkTriangleMeshToBinaryImageFilterMUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleMeshToBinaryImageFilterMUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTriangleMeshToBinaryImageFilterMUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTriangleMeshToBinaryImageFilterMUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTriangleMeshToBinaryImageFilterMUS3IUS3 in _itkTriangleMeshToBinaryImageFilterPython:
_itkTriangleMeshToBinaryImageFilterPython.itkTriangleMeshToBinaryImageFilterMUS3IUS3_swigregister(itkTriangleMeshToBinaryImageFilterMUS3IUS3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def triangle_mesh_to_binary_image_filter(*args,  spacing: Sequence[float]=..., direction=..., inside_value: int=..., outside_value: int=..., origin: Sequence[float]=..., index: Sequence[int]=..., size: Sequence[int]=..., info_image: itkt.Image=..., tolerance: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for TriangleMeshToBinaryImageFilter"""
    import itk

    kwarg_typehints = { 'spacing':spacing,'direction':direction,'inside_value':inside_value,'outside_value':outside_value,'origin':origin,'index':index,'size':size,'info_image':info_image,'tolerance':tolerance }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.TriangleMeshToBinaryImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def triangle_mesh_to_binary_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKMesh.TriangleMeshToBinaryImageFilter
    triangle_mesh_to_binary_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    triangle_mesh_to_binary_image_filter.__doc__ = filter_object.__doc__



