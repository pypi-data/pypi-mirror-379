# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKTransformPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkAffineTransformPython
else:
    import _itkAffineTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkArray2DPython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkVariableLengthVectorPython
import itk.itkTransformBasePython

def itkAffineTransformD2_New():
    return itkAffineTransformD2.New()

class itkAffineTransformD2(itk.itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22):
    r"""Proxy of C++ itkAffineTransformD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAffineTransformD2_Pointer"""
        return _itkAffineTransformPython.itkAffineTransformD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAffineTransformD2_Pointer"""
        return _itkAffineTransformPython.itkAffineTransformD2_Clone(self)

    def Translate(self, trans, pre=False):
        r"""
        Translate(self, trans, pre=False)

        Parameters
        ----------
        trans: itkVectorD2 const &
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformD2_Translate(self, trans, pre)

    def Scale(self, *args):
        r"""
        Scale(self, factor, pre=False)

        Parameters
        ----------
        factor: itkVectorD2 const &
        pre: bool

        Scale(self, factor, pre=False)

        Parameters
        ----------
        factor: double const &
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformD2_Scale(self, *args)

    def Rotate(self, axis1, axis2, angle, pre=False):
        r"""
        Rotate(self, axis1, axis2, angle, pre=False)

        Parameters
        ----------
        axis1: int
        axis2: int
        angle: double
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformD2_Rotate(self, axis1, axis2, angle, pre)

    def Rotate2D(self, angle, pre=False):
        r"""
        Rotate2D(self, angle, pre=False)

        Parameters
        ----------
        angle: double
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformD2_Rotate2D(self, angle, pre)

    def Rotate3D(self, axis, angle, pre=False):
        r"""
        Rotate3D(self, axis, angle, pre=False)

        Parameters
        ----------
        axis: itkVectorD2 const &
        angle: double
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformD2_Rotate3D(self, axis, angle, pre)

    def Shear(self, axis1, axis2, coef, pre=False):
        r"""
        Shear(self, axis1, axis2, coef, pre=False)

        Parameters
        ----------
        axis1: int
        axis2: int
        coef: double
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformD2_Shear(self, axis1, axis2, coef, pre)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkAffineTransformD2 *

        """
        return _itkAffineTransformPython.itkAffineTransformD2_GetInverse(self, inverse)

    def Metric(self, *args):
        r"""
        Metric(self, other) -> double

        Parameters
        ----------
        other: itkAffineTransformD2 const *

        Metric(self) -> double
        """
        return _itkAffineTransformPython.itkAffineTransformD2_Metric(self, *args)
    __swig_destroy__ = _itkAffineTransformPython.delete_itkAffineTransformD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAffineTransformD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAffineTransformPython.itkAffineTransformD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAffineTransformD2

        Create a new object of the class itkAffineTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAffineTransformD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAffineTransformD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAffineTransformD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAffineTransformD2 in _itkAffineTransformPython:
_itkAffineTransformPython.itkAffineTransformD2_swigregister(itkAffineTransformD2)

def itkAffineTransformD3_New():
    return itkAffineTransformD3.New()

class itkAffineTransformD3(itk.itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33):
    r"""Proxy of C++ itkAffineTransformD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAffineTransformD3_Pointer"""
        return _itkAffineTransformPython.itkAffineTransformD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAffineTransformD3_Pointer"""
        return _itkAffineTransformPython.itkAffineTransformD3_Clone(self)

    def Translate(self, trans, pre=False):
        r"""
        Translate(self, trans, pre=False)

        Parameters
        ----------
        trans: itkVectorD3 const &
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformD3_Translate(self, trans, pre)

    def Scale(self, *args):
        r"""
        Scale(self, factor, pre=False)

        Parameters
        ----------
        factor: itkVectorD3 const &
        pre: bool

        Scale(self, factor, pre=False)

        Parameters
        ----------
        factor: double const &
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformD3_Scale(self, *args)

    def Rotate(self, axis1, axis2, angle, pre=False):
        r"""
        Rotate(self, axis1, axis2, angle, pre=False)

        Parameters
        ----------
        axis1: int
        axis2: int
        angle: double
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformD3_Rotate(self, axis1, axis2, angle, pre)

    def Rotate2D(self, angle, pre=False):
        r"""
        Rotate2D(self, angle, pre=False)

        Parameters
        ----------
        angle: double
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformD3_Rotate2D(self, angle, pre)

    def Rotate3D(self, axis, angle, pre=False):
        r"""
        Rotate3D(self, axis, angle, pre=False)

        Parameters
        ----------
        axis: itkVectorD3 const &
        angle: double
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformD3_Rotate3D(self, axis, angle, pre)

    def Shear(self, axis1, axis2, coef, pre=False):
        r"""
        Shear(self, axis1, axis2, coef, pre=False)

        Parameters
        ----------
        axis1: int
        axis2: int
        coef: double
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformD3_Shear(self, axis1, axis2, coef, pre)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkAffineTransformD3 *

        """
        return _itkAffineTransformPython.itkAffineTransformD3_GetInverse(self, inverse)

    def Metric(self, *args):
        r"""
        Metric(self, other) -> double

        Parameters
        ----------
        other: itkAffineTransformD3 const *

        Metric(self) -> double
        """
        return _itkAffineTransformPython.itkAffineTransformD3_Metric(self, *args)
    __swig_destroy__ = _itkAffineTransformPython.delete_itkAffineTransformD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAffineTransformD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAffineTransformPython.itkAffineTransformD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAffineTransformD3

        Create a new object of the class itkAffineTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAffineTransformD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAffineTransformD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAffineTransformD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAffineTransformD3 in _itkAffineTransformPython:
_itkAffineTransformPython.itkAffineTransformD3_swigregister(itkAffineTransformD3)

def itkAffineTransformD4_New():
    return itkAffineTransformD4.New()

class itkAffineTransformD4(itk.itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD44):
    r"""Proxy of C++ itkAffineTransformD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAffineTransformD4_Pointer"""
        return _itkAffineTransformPython.itkAffineTransformD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAffineTransformD4_Pointer"""
        return _itkAffineTransformPython.itkAffineTransformD4_Clone(self)

    def Translate(self, trans, pre=False):
        r"""
        Translate(self, trans, pre=False)

        Parameters
        ----------
        trans: itkVectorD4 const &
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformD4_Translate(self, trans, pre)

    def Scale(self, *args):
        r"""
        Scale(self, factor, pre=False)

        Parameters
        ----------
        factor: itkVectorD4 const &
        pre: bool

        Scale(self, factor, pre=False)

        Parameters
        ----------
        factor: double const &
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformD4_Scale(self, *args)

    def Rotate(self, axis1, axis2, angle, pre=False):
        r"""
        Rotate(self, axis1, axis2, angle, pre=False)

        Parameters
        ----------
        axis1: int
        axis2: int
        angle: double
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformD4_Rotate(self, axis1, axis2, angle, pre)

    def Rotate2D(self, angle, pre=False):
        r"""
        Rotate2D(self, angle, pre=False)

        Parameters
        ----------
        angle: double
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformD4_Rotate2D(self, angle, pre)

    def Rotate3D(self, axis, angle, pre=False):
        r"""
        Rotate3D(self, axis, angle, pre=False)

        Parameters
        ----------
        axis: itkVectorD4 const &
        angle: double
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformD4_Rotate3D(self, axis, angle, pre)

    def Shear(self, axis1, axis2, coef, pre=False):
        r"""
        Shear(self, axis1, axis2, coef, pre=False)

        Parameters
        ----------
        axis1: int
        axis2: int
        coef: double
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformD4_Shear(self, axis1, axis2, coef, pre)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkAffineTransformD4 *

        """
        return _itkAffineTransformPython.itkAffineTransformD4_GetInverse(self, inverse)

    def Metric(self, *args):
        r"""
        Metric(self, other) -> double

        Parameters
        ----------
        other: itkAffineTransformD4 const *

        Metric(self) -> double
        """
        return _itkAffineTransformPython.itkAffineTransformD4_Metric(self, *args)
    __swig_destroy__ = _itkAffineTransformPython.delete_itkAffineTransformD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAffineTransformD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAffineTransformPython.itkAffineTransformD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAffineTransformD4

        Create a new object of the class itkAffineTransformD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAffineTransformD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAffineTransformD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAffineTransformD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAffineTransformD4 in _itkAffineTransformPython:
_itkAffineTransformPython.itkAffineTransformD4_swigregister(itkAffineTransformD4)

def itkAffineTransformF2_New():
    return itkAffineTransformF2.New()

class itkAffineTransformF2(itk.itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF22):
    r"""Proxy of C++ itkAffineTransformF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAffineTransformF2_Pointer"""
        return _itkAffineTransformPython.itkAffineTransformF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAffineTransformF2_Pointer"""
        return _itkAffineTransformPython.itkAffineTransformF2_Clone(self)

    def Translate(self, trans, pre=False):
        r"""
        Translate(self, trans, pre=False)

        Parameters
        ----------
        trans: itkVectorF2 const &
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformF2_Translate(self, trans, pre)

    def Scale(self, *args):
        r"""
        Scale(self, factor, pre=False)

        Parameters
        ----------
        factor: itkVectorF2 const &
        pre: bool

        Scale(self, factor, pre=False)

        Parameters
        ----------
        factor: float const &
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformF2_Scale(self, *args)

    def Rotate(self, axis1, axis2, angle, pre=False):
        r"""
        Rotate(self, axis1, axis2, angle, pre=False)

        Parameters
        ----------
        axis1: int
        axis2: int
        angle: float
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformF2_Rotate(self, axis1, axis2, angle, pre)

    def Rotate2D(self, angle, pre=False):
        r"""
        Rotate2D(self, angle, pre=False)

        Parameters
        ----------
        angle: float
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformF2_Rotate2D(self, angle, pre)

    def Rotate3D(self, axis, angle, pre=False):
        r"""
        Rotate3D(self, axis, angle, pre=False)

        Parameters
        ----------
        axis: itkVectorF2 const &
        angle: float
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformF2_Rotate3D(self, axis, angle, pre)

    def Shear(self, axis1, axis2, coef, pre=False):
        r"""
        Shear(self, axis1, axis2, coef, pre=False)

        Parameters
        ----------
        axis1: int
        axis2: int
        coef: float
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformF2_Shear(self, axis1, axis2, coef, pre)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkAffineTransformF2 *

        """
        return _itkAffineTransformPython.itkAffineTransformF2_GetInverse(self, inverse)

    def Metric(self, *args):
        r"""
        Metric(self, other) -> float

        Parameters
        ----------
        other: itkAffineTransformF2 const *

        Metric(self) -> float
        """
        return _itkAffineTransformPython.itkAffineTransformF2_Metric(self, *args)
    __swig_destroy__ = _itkAffineTransformPython.delete_itkAffineTransformF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAffineTransformF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAffineTransformPython.itkAffineTransformF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAffineTransformF2

        Create a new object of the class itkAffineTransformF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAffineTransformF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAffineTransformF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAffineTransformF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAffineTransformF2 in _itkAffineTransformPython:
_itkAffineTransformPython.itkAffineTransformF2_swigregister(itkAffineTransformF2)

def itkAffineTransformF3_New():
    return itkAffineTransformF3.New()

class itkAffineTransformF3(itk.itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF33):
    r"""Proxy of C++ itkAffineTransformF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAffineTransformF3_Pointer"""
        return _itkAffineTransformPython.itkAffineTransformF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAffineTransformF3_Pointer"""
        return _itkAffineTransformPython.itkAffineTransformF3_Clone(self)

    def Translate(self, trans, pre=False):
        r"""
        Translate(self, trans, pre=False)

        Parameters
        ----------
        trans: itkVectorF3 const &
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformF3_Translate(self, trans, pre)

    def Scale(self, *args):
        r"""
        Scale(self, factor, pre=False)

        Parameters
        ----------
        factor: itkVectorF3 const &
        pre: bool

        Scale(self, factor, pre=False)

        Parameters
        ----------
        factor: float const &
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformF3_Scale(self, *args)

    def Rotate(self, axis1, axis2, angle, pre=False):
        r"""
        Rotate(self, axis1, axis2, angle, pre=False)

        Parameters
        ----------
        axis1: int
        axis2: int
        angle: float
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformF3_Rotate(self, axis1, axis2, angle, pre)

    def Rotate2D(self, angle, pre=False):
        r"""
        Rotate2D(self, angle, pre=False)

        Parameters
        ----------
        angle: float
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformF3_Rotate2D(self, angle, pre)

    def Rotate3D(self, axis, angle, pre=False):
        r"""
        Rotate3D(self, axis, angle, pre=False)

        Parameters
        ----------
        axis: itkVectorF3 const &
        angle: float
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformF3_Rotate3D(self, axis, angle, pre)

    def Shear(self, axis1, axis2, coef, pre=False):
        r"""
        Shear(self, axis1, axis2, coef, pre=False)

        Parameters
        ----------
        axis1: int
        axis2: int
        coef: float
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformF3_Shear(self, axis1, axis2, coef, pre)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkAffineTransformF3 *

        """
        return _itkAffineTransformPython.itkAffineTransformF3_GetInverse(self, inverse)

    def Metric(self, *args):
        r"""
        Metric(self, other) -> float

        Parameters
        ----------
        other: itkAffineTransformF3 const *

        Metric(self) -> float
        """
        return _itkAffineTransformPython.itkAffineTransformF3_Metric(self, *args)
    __swig_destroy__ = _itkAffineTransformPython.delete_itkAffineTransformF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAffineTransformF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAffineTransformPython.itkAffineTransformF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAffineTransformF3

        Create a new object of the class itkAffineTransformF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAffineTransformF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAffineTransformF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAffineTransformF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAffineTransformF3 in _itkAffineTransformPython:
_itkAffineTransformPython.itkAffineTransformF3_swigregister(itkAffineTransformF3)

def itkAffineTransformF4_New():
    return itkAffineTransformF4.New()

class itkAffineTransformF4(itk.itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseF44):
    r"""Proxy of C++ itkAffineTransformF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAffineTransformF4_Pointer"""
        return _itkAffineTransformPython.itkAffineTransformF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAffineTransformF4_Pointer"""
        return _itkAffineTransformPython.itkAffineTransformF4_Clone(self)

    def Translate(self, trans, pre=False):
        r"""
        Translate(self, trans, pre=False)

        Parameters
        ----------
        trans: itkVectorF4 const &
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformF4_Translate(self, trans, pre)

    def Scale(self, *args):
        r"""
        Scale(self, factor, pre=False)

        Parameters
        ----------
        factor: itkVectorF4 const &
        pre: bool

        Scale(self, factor, pre=False)

        Parameters
        ----------
        factor: float const &
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformF4_Scale(self, *args)

    def Rotate(self, axis1, axis2, angle, pre=False):
        r"""
        Rotate(self, axis1, axis2, angle, pre=False)

        Parameters
        ----------
        axis1: int
        axis2: int
        angle: float
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformF4_Rotate(self, axis1, axis2, angle, pre)

    def Rotate2D(self, angle, pre=False):
        r"""
        Rotate2D(self, angle, pre=False)

        Parameters
        ----------
        angle: float
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformF4_Rotate2D(self, angle, pre)

    def Rotate3D(self, axis, angle, pre=False):
        r"""
        Rotate3D(self, axis, angle, pre=False)

        Parameters
        ----------
        axis: itkVectorF4 const &
        angle: float
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformF4_Rotate3D(self, axis, angle, pre)

    def Shear(self, axis1, axis2, coef, pre=False):
        r"""
        Shear(self, axis1, axis2, coef, pre=False)

        Parameters
        ----------
        axis1: int
        axis2: int
        coef: float
        pre: bool

        """
        return _itkAffineTransformPython.itkAffineTransformF4_Shear(self, axis1, axis2, coef, pre)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkAffineTransformF4 *

        """
        return _itkAffineTransformPython.itkAffineTransformF4_GetInverse(self, inverse)

    def Metric(self, *args):
        r"""
        Metric(self, other) -> float

        Parameters
        ----------
        other: itkAffineTransformF4 const *

        Metric(self) -> float
        """
        return _itkAffineTransformPython.itkAffineTransformF4_Metric(self, *args)
    __swig_destroy__ = _itkAffineTransformPython.delete_itkAffineTransformF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAffineTransformF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAffineTransformPython.itkAffineTransformF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAffineTransformF4

        Create a new object of the class itkAffineTransformF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAffineTransformF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAffineTransformF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAffineTransformF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAffineTransformF4 in _itkAffineTransformPython:
_itkAffineTransformPython.itkAffineTransformF4_swigregister(itkAffineTransformF4)

