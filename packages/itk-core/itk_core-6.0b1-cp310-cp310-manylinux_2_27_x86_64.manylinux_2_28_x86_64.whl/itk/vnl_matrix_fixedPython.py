# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _vnl_matrix_fixedPython
else:
    import _vnl_matrix_fixedPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
class vnl_matrix_fixedD_2_2(object):
    r"""Proxy of C++ vnl_matrix_fixedD_2_2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedD_2_2

    def __init__(self, *args):
        r"""
        __init__(self) -> vnl_matrix_fixedD_2_2
        __init__(self, rhs) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        rhs: vnl_matrix_fixedD_2_2 const &

        __init__(self, arg0, arg1) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        __init__(self, value) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        value: double

        __init__(self, datablck) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        datablck: double const *

        __init__(self, rhs) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        rhs: vnl_matrixD const &

        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedD_2_2(*args))

    def size(self):
        r"""size(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_size(self)

    def rows(self):
        r"""rows(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_rows(self)

    def cols(self):
        r"""cols(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_cols(self)

    def columns(self):
        r"""columns(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_columns(self)

    def put(self, r, c, v):
        r"""
        put(self, r, c, v)

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: double const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_put(self, r, c, v)

    def get(self, r, c):
        r"""
        get(self, r, c) -> double

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_get(self, r, c)

    def __call__(self, *args):
        r"""
        __call__(self, r, c) -> double

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        __call__(self, r, c) -> double const &

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2___call__(self, *args)

    def fill(self, arg0):
        r"""
        fill(self, arg0) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        arg0: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_fill(self, arg0)

    def fill_diagonal(self, arg0):
        r"""
        fill_diagonal(self, arg0) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        arg0: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_fill_diagonal(self, arg0)

    def set_diagonal(self, arg0):
        r"""
        set_diagonal(self, arg0) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        arg0: vnl_vectorD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_set_diagonal(self, arg0)

    def copy_in(self, arg0):
        r"""
        copy_in(self, arg0) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        arg0: double const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_copy_in(self, arg0)

    def set(self, *args):
        r"""
        set(self, r, c, v) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: double const &

        set(self, d) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        d: double const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_set(self, *args)

    def copy_out(self, arg0):
        r"""
        copy_out(self, arg0)

        Parameters
        ----------
        arg0: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_copy_out(self, arg0)

    def inplace_transpose(self):
        r"""inplace_transpose(self) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_inplace_transpose(self)

    def __itruediv__(self, *args):
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, *args):
        r"""
        __iadd__(self, s) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        s: double

        __iadd__(self, m) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        m: vnl_matrix_fixedD_2_2 const &

        __iadd__(self, m) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        m: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(self, s) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        s: double

        __isub__(self, m) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        m: vnl_matrix_fixedD_2_2 const &

        __isub__(self, m) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        m: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2___isub__(self, *args)

    def __neg__(self):
        r"""__neg__(self) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2___neg__(self)

    def __imul__(self, *args):
        r"""
        __imul__(self, s) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        s: double

        __imul__(self, s) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        s: vnl_matrix_fixedD_2_2 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2___imul__(self, *args)

    def transpose(self):
        r"""transpose(self) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_transpose(self)

    def conjugate_transpose(self):
        r"""conjugate_transpose(self) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_conjugate_transpose(self)

    def update(self, *args):
        r"""
        update(self, arg0, top=0, left=0) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        arg0: vnl_matrixD const &
        top: unsigned int
        left: unsigned int

        update(self, m, top=0, left=0) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        m: vnl_matrix_fixedD_2_2 const &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_update(self, *args)

    def set_column(self, *args):
        r"""
        set_column(self, i, v) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        i: unsigned int
        v: double const *

        set_column(self, i, value) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        i: unsigned int
        value: double

        set_column(self, j, v) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        j: unsigned int
        v: vnl_vectorD const &

        set_column(self, j, v) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        j: unsigned int
        v: vnl_vector_fixed< double,2 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_set_column(self, *args)

    def set_columns(self, starting_column, M):
        r"""
        set_columns(self, starting_column, M) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        starting_column: unsigned int
        M: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_set_columns(self, starting_column, M)

    def set_row(self, *args):
        r"""
        set_row(self, i, v) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        i: unsigned int
        v: double const *

        set_row(self, i, value) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        i: unsigned int
        value: double

        set_row(self, i, arg1) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vectorD const &

        set_row(self, i, arg1) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vector_fixed< double,2 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_set_row(self, *args)

    def extract(self, *args):
        r"""
        extract(self, r, c, top=0, left=0) -> vnl_matrixD

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        top: unsigned int
        left: unsigned int

        extract(self, sub_matrix, top=0, left=0)

        Parameters
        ----------
        sub_matrix: vnl_matrixD &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_extract(self, *args)

    def get_row(self, row):
        r"""
        get_row(self, row) -> vnl_vector_fixed< double,2 >

        Parameters
        ----------
        row: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_get_row(self, row)

    def get_column(self, col):
        r"""
        get_column(self, col) -> vnl_vector_fixed< double,2 >

        Parameters
        ----------
        col: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_get_column(self, col)

    def get_rows(self, i):
        r"""
        get_rows(self, i) -> vnl_matrixD

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_get_rows(self, i)

    def get_columns(self, i):
        r"""
        get_columns(self, i) -> vnl_matrixD

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_get_columns(self, i)

    def get_n_rows(self, rowstart, n):
        r"""
        get_n_rows(self, rowstart, n) -> vnl_matrixD

        Parameters
        ----------
        rowstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_get_n_rows(self, rowstart, n)

    def get_n_columns(self, colstart, n):
        r"""
        get_n_columns(self, colstart, n) -> vnl_matrixD

        Parameters
        ----------
        colstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_get_n_columns(self, colstart, n)

    def get_diagonal(self):
        r"""get_diagonal(self) -> vnl_vectorD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_get_diagonal(self)

    def flatten_row_major(self):
        r"""flatten_row_major(self) -> vnl_vector_fixed< double,4 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_flatten_row_major(self)

    def flatten_column_major(self):
        r"""flatten_column_major(self) -> vnl_vector_fixed< double,4 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_flatten_column_major(self)

    def set_identity(self):
        r"""set_identity(self) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_set_identity(self)

    def flipud(self):
        r"""flipud(self) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_flipud(self)

    def fliplr(self):
        r"""fliplr(self) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_fliplr(self)

    def normalize_rows(self):
        r"""normalize_rows(self) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_normalize_rows(self)

    def normalize_columns(self):
        r"""normalize_columns(self) -> vnl_matrix_fixedD_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_normalize_columns(self)

    def scale_row(self, row, value):
        r"""
        scale_row(self, row, value) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        row: unsigned int
        value: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_scale_row(self, row, value)

    def scale_column(self, col, value):
        r"""
        scale_column(self, col, value) -> vnl_matrix_fixedD_2_2

        Parameters
        ----------
        col: unsigned int
        value: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_scale_column(self, col, value)

    def swap(self, that):
        r"""
        swap(self, that)

        Parameters
        ----------
        that: vnl_matrix_fixedD_2_2 &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_swap(self, that)

    def array_one_norm(self):
        r"""array_one_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_array_one_norm(self)

    def array_two_norm(self):
        r"""array_two_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_array_two_norm(self)

    def array_inf_norm(self):
        r"""array_inf_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_array_inf_norm(self)

    def absolute_value_sum(self):
        r"""absolute_value_sum(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_absolute_value_sum(self)

    def absolute_value_max(self):
        r"""absolute_value_max(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_absolute_value_max(self)

    def operator_one_norm(self):
        r"""operator_one_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_operator_one_norm(self)

    def operator_inf_norm(self):
        r"""operator_inf_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_operator_inf_norm(self)

    def frobenius_norm(self):
        r"""frobenius_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_frobenius_norm(self)

    def fro_norm(self):
        r"""fro_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_fro_norm(self)

    def rms(self):
        r"""rms(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_rms(self)

    def min_value(self):
        r"""min_value(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_min_value(self)

    def max_value(self):
        r"""max_value(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_max_value(self)

    def arg_min(self):
        r"""arg_min(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_arg_min(self)

    def arg_max(self):
        r"""arg_max(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_arg_max(self)

    def mean(self):
        r"""mean(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_mean(self)

    def empty(self):
        r"""empty(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_empty(self)

    def is_identity(self, *args):
        r"""
        is_identity(self) -> bool
        is_identity(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_is_identity(self, *args)

    def is_zero(self, *args):
        r"""
        is_zero(self) -> bool
        is_zero(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_is_zero(self, *args)

    def is_equal(self, rhs, tol):
        r"""
        is_equal(self, rhs, tol) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedD_2_2 const &
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_is_equal(self, rhs, tol)

    def is_finite(self):
        r"""is_finite(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_is_finite(self)

    def has_nans(self):
        r"""has_nans(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_has_nans(self)

    def assert_size(self, arg0, arg1):
        r"""
        assert_size(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_assert_size(self, arg0, arg1)

    def assert_finite(self):
        r"""assert_finite(self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_assert_finite(self)

    def read_ascii(self, s):
        r"""
        read_ascii(self, s) -> bool

        Parameters
        ----------
        s: std::basic_istream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_read_ascii(self, s)

    def data_block(self, *args):
        r"""
        data_block(self) -> double const
        data_block(self) -> double *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_data_block(self, *args)

    def as_matrix(self):
        r"""as_matrix(self) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_as_matrix(self)

    def begin(self, *args):
        r"""
        begin(self) -> double
        begin(self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> double
        end(self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_end(self, *args)

    def operator_eq(self, rhs):
        r"""
        operator_eq(self, rhs) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedD_2_2 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_operator_eq(self, rhs)

    def __eq__(self, *args):
        r"""
        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedD_2_2 const &

        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedD_2_2 const &

        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2___ne__(self, *args)

    def _print(self, os):
        r"""
        _print(self, os)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2__print(self, os)

    @staticmethod
    def add(*args):
        r"""
        add(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        add(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_add(*args)

    @staticmethod
    def sub(*args):
        r"""
        sub(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        sub(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        sub(a, b, r)

        Parameters
        ----------
        a: double
        b: double const *
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_sub(*args)

    @staticmethod
    def mul(*args):
        r"""
        mul(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        mul(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_mul(*args)

    @staticmethod
    def div(*args):
        r"""
        div(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        div(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_div(*args)

    @staticmethod
    def equal(a, b):
        r"""
        equal(a, b) -> bool

        Parameters
        ----------
        a: double const *
        b: double const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_equal(a, b)

# Register vnl_matrix_fixedD_2_2 in _vnl_matrix_fixedPython:
_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_2_swigregister(vnl_matrix_fixedD_2_2)
class vnl_matrix_fixedD_2_3(object):
    r"""Proxy of C++ vnl_matrix_fixedD_2_3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedD_2_3

    def __init__(self, *args):
        r"""
        __init__(self) -> vnl_matrix_fixedD_2_3
        __init__(self, rhs) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        rhs: vnl_matrix_fixedD_2_3 const &

        __init__(self, arg0, arg1) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        __init__(self, value) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        value: double

        __init__(self, datablck) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        datablck: double const *

        __init__(self, rhs) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        rhs: vnl_matrixD const &

        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedD_2_3(*args))

    def size(self):
        r"""size(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_size(self)

    def rows(self):
        r"""rows(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_rows(self)

    def cols(self):
        r"""cols(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_cols(self)

    def columns(self):
        r"""columns(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_columns(self)

    def put(self, r, c, v):
        r"""
        put(self, r, c, v)

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: double const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_put(self, r, c, v)

    def get(self, r, c):
        r"""
        get(self, r, c) -> double

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_get(self, r, c)

    def __call__(self, *args):
        r"""
        __call__(self, r, c) -> double

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        __call__(self, r, c) -> double const &

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3___call__(self, *args)

    def fill(self, arg0):
        r"""
        fill(self, arg0) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        arg0: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_fill(self, arg0)

    def fill_diagonal(self, arg0):
        r"""
        fill_diagonal(self, arg0) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        arg0: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_fill_diagonal(self, arg0)

    def set_diagonal(self, arg0):
        r"""
        set_diagonal(self, arg0) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        arg0: vnl_vectorD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_set_diagonal(self, arg0)

    def copy_in(self, arg0):
        r"""
        copy_in(self, arg0) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        arg0: double const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_copy_in(self, arg0)

    def set(self, *args):
        r"""
        set(self, r, c, v) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: double const &

        set(self, d) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        d: double const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_set(self, *args)

    def copy_out(self, arg0):
        r"""
        copy_out(self, arg0)

        Parameters
        ----------
        arg0: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_copy_out(self, arg0)

    def inplace_transpose(self):
        r"""inplace_transpose(self) -> vnl_matrix_fixedD_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_inplace_transpose(self)

    def __itruediv__(self, *args):
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, *args):
        r"""
        __iadd__(self, s) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        s: double

        __iadd__(self, m) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        m: vnl_matrix_fixedD_2_3 const &

        __iadd__(self, m) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        m: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(self, s) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        s: double

        __isub__(self, m) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        m: vnl_matrix_fixedD_2_3 const &

        __isub__(self, m) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        m: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3___isub__(self, *args)

    def __neg__(self):
        r"""__neg__(self) -> vnl_matrix_fixedD_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3___neg__(self)

    def __imul__(self, *args):
        r"""
        __imul__(self, s) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        s: double

        __imul__(self, s) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        s: vnl_matrix_fixedD_3_3 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3___imul__(self, *args)

    def transpose(self):
        r"""transpose(self) -> vnl_matrix_fixed< double,3,2 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_transpose(self)

    def conjugate_transpose(self):
        r"""conjugate_transpose(self) -> vnl_matrix_fixed< double,3,2 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_conjugate_transpose(self)

    def update(self, *args):
        r"""
        update(self, arg0, top=0, left=0) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        arg0: vnl_matrixD const &
        top: unsigned int
        left: unsigned int

        update(self, m, top=0, left=0) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        m: vnl_matrix_fixedD_2_3 const &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_update(self, *args)

    def set_column(self, *args):
        r"""
        set_column(self, i, v) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        i: unsigned int
        v: double const *

        set_column(self, i, value) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        i: unsigned int
        value: double

        set_column(self, j, v) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        j: unsigned int
        v: vnl_vectorD const &

        set_column(self, j, v) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        j: unsigned int
        v: vnl_vector_fixed< double,2 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_set_column(self, *args)

    def set_columns(self, starting_column, M):
        r"""
        set_columns(self, starting_column, M) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        starting_column: unsigned int
        M: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_set_columns(self, starting_column, M)

    def set_row(self, *args):
        r"""
        set_row(self, i, v) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        i: unsigned int
        v: double const *

        set_row(self, i, value) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        i: unsigned int
        value: double

        set_row(self, i, arg1) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vectorD const &

        set_row(self, i, arg1) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vector_fixed< double,3 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_set_row(self, *args)

    def extract(self, *args):
        r"""
        extract(self, r, c, top=0, left=0) -> vnl_matrixD

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        top: unsigned int
        left: unsigned int

        extract(self, sub_matrix, top=0, left=0)

        Parameters
        ----------
        sub_matrix: vnl_matrixD &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_extract(self, *args)

    def get_row(self, row):
        r"""
        get_row(self, row) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        row: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_get_row(self, row)

    def get_column(self, col):
        r"""
        get_column(self, col) -> vnl_vector_fixed< double,2 >

        Parameters
        ----------
        col: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_get_column(self, col)

    def get_rows(self, i):
        r"""
        get_rows(self, i) -> vnl_matrixD

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_get_rows(self, i)

    def get_columns(self, i):
        r"""
        get_columns(self, i) -> vnl_matrixD

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_get_columns(self, i)

    def get_n_rows(self, rowstart, n):
        r"""
        get_n_rows(self, rowstart, n) -> vnl_matrixD

        Parameters
        ----------
        rowstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_get_n_rows(self, rowstart, n)

    def get_n_columns(self, colstart, n):
        r"""
        get_n_columns(self, colstart, n) -> vnl_matrixD

        Parameters
        ----------
        colstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_get_n_columns(self, colstart, n)

    def get_diagonal(self):
        r"""get_diagonal(self) -> vnl_vectorD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_get_diagonal(self)

    def flatten_row_major(self):
        r"""flatten_row_major(self) -> vnl_vector_fixed< double,6 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_flatten_row_major(self)

    def flatten_column_major(self):
        r"""flatten_column_major(self) -> vnl_vector_fixed< double,6 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_flatten_column_major(self)

    def set_identity(self):
        r"""set_identity(self) -> vnl_matrix_fixedD_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_set_identity(self)

    def flipud(self):
        r"""flipud(self) -> vnl_matrix_fixedD_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_flipud(self)

    def fliplr(self):
        r"""fliplr(self) -> vnl_matrix_fixedD_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_fliplr(self)

    def normalize_rows(self):
        r"""normalize_rows(self) -> vnl_matrix_fixedD_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_normalize_rows(self)

    def normalize_columns(self):
        r"""normalize_columns(self) -> vnl_matrix_fixedD_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_normalize_columns(self)

    def scale_row(self, row, value):
        r"""
        scale_row(self, row, value) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        row: unsigned int
        value: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_scale_row(self, row, value)

    def scale_column(self, col, value):
        r"""
        scale_column(self, col, value) -> vnl_matrix_fixedD_2_3

        Parameters
        ----------
        col: unsigned int
        value: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_scale_column(self, col, value)

    def swap(self, that):
        r"""
        swap(self, that)

        Parameters
        ----------
        that: vnl_matrix_fixedD_2_3 &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_swap(self, that)

    def array_one_norm(self):
        r"""array_one_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_array_one_norm(self)

    def array_two_norm(self):
        r"""array_two_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_array_two_norm(self)

    def array_inf_norm(self):
        r"""array_inf_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_array_inf_norm(self)

    def absolute_value_sum(self):
        r"""absolute_value_sum(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_absolute_value_sum(self)

    def absolute_value_max(self):
        r"""absolute_value_max(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_absolute_value_max(self)

    def operator_one_norm(self):
        r"""operator_one_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_operator_one_norm(self)

    def operator_inf_norm(self):
        r"""operator_inf_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_operator_inf_norm(self)

    def frobenius_norm(self):
        r"""frobenius_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_frobenius_norm(self)

    def fro_norm(self):
        r"""fro_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_fro_norm(self)

    def rms(self):
        r"""rms(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_rms(self)

    def min_value(self):
        r"""min_value(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_min_value(self)

    def max_value(self):
        r"""max_value(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_max_value(self)

    def arg_min(self):
        r"""arg_min(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_arg_min(self)

    def arg_max(self):
        r"""arg_max(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_arg_max(self)

    def mean(self):
        r"""mean(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_mean(self)

    def empty(self):
        r"""empty(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_empty(self)

    def is_identity(self, *args):
        r"""
        is_identity(self) -> bool
        is_identity(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_is_identity(self, *args)

    def is_zero(self, *args):
        r"""
        is_zero(self) -> bool
        is_zero(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_is_zero(self, *args)

    def is_equal(self, rhs, tol):
        r"""
        is_equal(self, rhs, tol) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedD_2_3 const &
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_is_equal(self, rhs, tol)

    def is_finite(self):
        r"""is_finite(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_is_finite(self)

    def has_nans(self):
        r"""has_nans(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_has_nans(self)

    def assert_size(self, arg0, arg1):
        r"""
        assert_size(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_assert_size(self, arg0, arg1)

    def assert_finite(self):
        r"""assert_finite(self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_assert_finite(self)

    def read_ascii(self, s):
        r"""
        read_ascii(self, s) -> bool

        Parameters
        ----------
        s: std::basic_istream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_read_ascii(self, s)

    def data_block(self, *args):
        r"""
        data_block(self) -> double const
        data_block(self) -> double *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_data_block(self, *args)

    def as_matrix(self):
        r"""as_matrix(self) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_as_matrix(self)

    def begin(self, *args):
        r"""
        begin(self) -> double
        begin(self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> double
        end(self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_end(self, *args)

    def operator_eq(self, rhs):
        r"""
        operator_eq(self, rhs) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedD_2_3 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_operator_eq(self, rhs)

    def __eq__(self, *args):
        r"""
        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedD_2_3 const &

        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedD_2_3 const &

        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3___ne__(self, *args)

    def _print(self, os):
        r"""
        _print(self, os)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3__print(self, os)

    @staticmethod
    def add(*args):
        r"""
        add(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        add(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_add(*args)

    @staticmethod
    def sub(*args):
        r"""
        sub(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        sub(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        sub(a, b, r)

        Parameters
        ----------
        a: double
        b: double const *
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_sub(*args)

    @staticmethod
    def mul(*args):
        r"""
        mul(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        mul(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_mul(*args)

    @staticmethod
    def div(*args):
        r"""
        div(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        div(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_div(*args)

    @staticmethod
    def equal(a, b):
        r"""
        equal(a, b) -> bool

        Parameters
        ----------
        a: double const *
        b: double const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_equal(a, b)

# Register vnl_matrix_fixedD_2_3 in _vnl_matrix_fixedPython:
_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_3_swigregister(vnl_matrix_fixedD_2_3)
class vnl_matrix_fixedD_2_6(object):
    r"""Proxy of C++ vnl_matrix_fixedD_2_6 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedD_2_6

    def __init__(self, *args):
        r"""
        __init__(self) -> vnl_matrix_fixedD_2_6
        __init__(self, rhs) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        rhs: vnl_matrix_fixedD_2_6 const &

        __init__(self, arg0, arg1) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        __init__(self, value) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        value: double

        __init__(self, datablck) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        datablck: double const *

        __init__(self, rhs) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        rhs: vnl_matrixD const &

        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedD_2_6(*args))

    def size(self):
        r"""size(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_size(self)

    def rows(self):
        r"""rows(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_rows(self)

    def cols(self):
        r"""cols(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_cols(self)

    def columns(self):
        r"""columns(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_columns(self)

    def put(self, r, c, v):
        r"""
        put(self, r, c, v)

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: double const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_put(self, r, c, v)

    def get(self, r, c):
        r"""
        get(self, r, c) -> double

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_get(self, r, c)

    def __call__(self, *args):
        r"""
        __call__(self, r, c) -> double

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        __call__(self, r, c) -> double const &

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6___call__(self, *args)

    def fill(self, arg0):
        r"""
        fill(self, arg0) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        arg0: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_fill(self, arg0)

    def fill_diagonal(self, arg0):
        r"""
        fill_diagonal(self, arg0) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        arg0: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_fill_diagonal(self, arg0)

    def set_diagonal(self, arg0):
        r"""
        set_diagonal(self, arg0) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        arg0: vnl_vectorD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_set_diagonal(self, arg0)

    def copy_in(self, arg0):
        r"""
        copy_in(self, arg0) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        arg0: double const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_copy_in(self, arg0)

    def set(self, *args):
        r"""
        set(self, r, c, v) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: double const &

        set(self, d) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        d: double const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_set(self, *args)

    def copy_out(self, arg0):
        r"""
        copy_out(self, arg0)

        Parameters
        ----------
        arg0: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_copy_out(self, arg0)

    def inplace_transpose(self):
        r"""inplace_transpose(self) -> vnl_matrix_fixedD_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_inplace_transpose(self)

    def __itruediv__(self, *args):
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, *args):
        r"""
        __iadd__(self, s) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        s: double

        __iadd__(self, m) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        m: vnl_matrix_fixedD_2_6 const &

        __iadd__(self, m) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        m: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(self, s) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        s: double

        __isub__(self, m) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        m: vnl_matrix_fixedD_2_6 const &

        __isub__(self, m) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        m: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6___isub__(self, *args)

    def __neg__(self):
        r"""__neg__(self) -> vnl_matrix_fixedD_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6___neg__(self)

    def __imul__(self, *args):
        r"""
        __imul__(self, s) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        s: double

        __imul__(self, s) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        s: vnl_matrix_fixed< double,6,6 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6___imul__(self, *args)

    def transpose(self):
        r"""transpose(self) -> vnl_matrix_fixed< double,6,2 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_transpose(self)

    def conjugate_transpose(self):
        r"""conjugate_transpose(self) -> vnl_matrix_fixed< double,6,2 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_conjugate_transpose(self)

    def update(self, *args):
        r"""
        update(self, arg0, top=0, left=0) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        arg0: vnl_matrixD const &
        top: unsigned int
        left: unsigned int

        update(self, m, top=0, left=0) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        m: vnl_matrix_fixedD_2_6 const &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_update(self, *args)

    def set_column(self, *args):
        r"""
        set_column(self, i, v) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        i: unsigned int
        v: double const *

        set_column(self, i, value) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        i: unsigned int
        value: double

        set_column(self, j, v) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        j: unsigned int
        v: vnl_vectorD const &

        set_column(self, j, v) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        j: unsigned int
        v: vnl_vector_fixed< double,2 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_set_column(self, *args)

    def set_columns(self, starting_column, M):
        r"""
        set_columns(self, starting_column, M) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        starting_column: unsigned int
        M: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_set_columns(self, starting_column, M)

    def set_row(self, *args):
        r"""
        set_row(self, i, v) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        i: unsigned int
        v: double const *

        set_row(self, i, value) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        i: unsigned int
        value: double

        set_row(self, i, arg1) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vectorD const &

        set_row(self, i, arg1) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vector_fixed< double,6 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_set_row(self, *args)

    def extract(self, *args):
        r"""
        extract(self, r, c, top=0, left=0) -> vnl_matrixD

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        top: unsigned int
        left: unsigned int

        extract(self, sub_matrix, top=0, left=0)

        Parameters
        ----------
        sub_matrix: vnl_matrixD &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_extract(self, *args)

    def get_row(self, row):
        r"""
        get_row(self, row) -> vnl_vector_fixed< double,6 >

        Parameters
        ----------
        row: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_get_row(self, row)

    def get_column(self, col):
        r"""
        get_column(self, col) -> vnl_vector_fixed< double,2 >

        Parameters
        ----------
        col: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_get_column(self, col)

    def get_rows(self, i):
        r"""
        get_rows(self, i) -> vnl_matrixD

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_get_rows(self, i)

    def get_columns(self, i):
        r"""
        get_columns(self, i) -> vnl_matrixD

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_get_columns(self, i)

    def get_n_rows(self, rowstart, n):
        r"""
        get_n_rows(self, rowstart, n) -> vnl_matrixD

        Parameters
        ----------
        rowstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_get_n_rows(self, rowstart, n)

    def get_n_columns(self, colstart, n):
        r"""
        get_n_columns(self, colstart, n) -> vnl_matrixD

        Parameters
        ----------
        colstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_get_n_columns(self, colstart, n)

    def get_diagonal(self):
        r"""get_diagonal(self) -> vnl_vectorD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_get_diagonal(self)

    def flatten_row_major(self):
        r"""flatten_row_major(self) -> vnl_vector_fixed< double,12 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_flatten_row_major(self)

    def flatten_column_major(self):
        r"""flatten_column_major(self) -> vnl_vector_fixed< double,12 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_flatten_column_major(self)

    def set_identity(self):
        r"""set_identity(self) -> vnl_matrix_fixedD_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_set_identity(self)

    def flipud(self):
        r"""flipud(self) -> vnl_matrix_fixedD_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_flipud(self)

    def fliplr(self):
        r"""fliplr(self) -> vnl_matrix_fixedD_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_fliplr(self)

    def normalize_rows(self):
        r"""normalize_rows(self) -> vnl_matrix_fixedD_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_normalize_rows(self)

    def normalize_columns(self):
        r"""normalize_columns(self) -> vnl_matrix_fixedD_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_normalize_columns(self)

    def scale_row(self, row, value):
        r"""
        scale_row(self, row, value) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        row: unsigned int
        value: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_scale_row(self, row, value)

    def scale_column(self, col, value):
        r"""
        scale_column(self, col, value) -> vnl_matrix_fixedD_2_6

        Parameters
        ----------
        col: unsigned int
        value: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_scale_column(self, col, value)

    def swap(self, that):
        r"""
        swap(self, that)

        Parameters
        ----------
        that: vnl_matrix_fixedD_2_6 &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_swap(self, that)

    def array_one_norm(self):
        r"""array_one_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_array_one_norm(self)

    def array_two_norm(self):
        r"""array_two_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_array_two_norm(self)

    def array_inf_norm(self):
        r"""array_inf_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_array_inf_norm(self)

    def absolute_value_sum(self):
        r"""absolute_value_sum(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_absolute_value_sum(self)

    def absolute_value_max(self):
        r"""absolute_value_max(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_absolute_value_max(self)

    def operator_one_norm(self):
        r"""operator_one_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_operator_one_norm(self)

    def operator_inf_norm(self):
        r"""operator_inf_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_operator_inf_norm(self)

    def frobenius_norm(self):
        r"""frobenius_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_frobenius_norm(self)

    def fro_norm(self):
        r"""fro_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_fro_norm(self)

    def rms(self):
        r"""rms(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_rms(self)

    def min_value(self):
        r"""min_value(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_min_value(self)

    def max_value(self):
        r"""max_value(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_max_value(self)

    def arg_min(self):
        r"""arg_min(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_arg_min(self)

    def arg_max(self):
        r"""arg_max(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_arg_max(self)

    def mean(self):
        r"""mean(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_mean(self)

    def empty(self):
        r"""empty(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_empty(self)

    def is_identity(self, *args):
        r"""
        is_identity(self) -> bool
        is_identity(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_is_identity(self, *args)

    def is_zero(self, *args):
        r"""
        is_zero(self) -> bool
        is_zero(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_is_zero(self, *args)

    def is_equal(self, rhs, tol):
        r"""
        is_equal(self, rhs, tol) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedD_2_6 const &
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_is_equal(self, rhs, tol)

    def is_finite(self):
        r"""is_finite(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_is_finite(self)

    def has_nans(self):
        r"""has_nans(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_has_nans(self)

    def assert_size(self, arg0, arg1):
        r"""
        assert_size(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_assert_size(self, arg0, arg1)

    def assert_finite(self):
        r"""assert_finite(self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_assert_finite(self)

    def read_ascii(self, s):
        r"""
        read_ascii(self, s) -> bool

        Parameters
        ----------
        s: std::basic_istream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_read_ascii(self, s)

    def data_block(self, *args):
        r"""
        data_block(self) -> double const
        data_block(self) -> double *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_data_block(self, *args)

    def as_matrix(self):
        r"""as_matrix(self) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_as_matrix(self)

    def begin(self, *args):
        r"""
        begin(self) -> double
        begin(self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> double
        end(self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_end(self, *args)

    def operator_eq(self, rhs):
        r"""
        operator_eq(self, rhs) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedD_2_6 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_operator_eq(self, rhs)

    def __eq__(self, *args):
        r"""
        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedD_2_6 const &

        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedD_2_6 const &

        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6___ne__(self, *args)

    def _print(self, os):
        r"""
        _print(self, os)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6__print(self, os)

    @staticmethod
    def add(*args):
        r"""
        add(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        add(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_add(*args)

    @staticmethod
    def sub(*args):
        r"""
        sub(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        sub(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        sub(a, b, r)

        Parameters
        ----------
        a: double
        b: double const *
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_sub(*args)

    @staticmethod
    def mul(*args):
        r"""
        mul(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        mul(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_mul(*args)

    @staticmethod
    def div(*args):
        r"""
        div(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        div(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_div(*args)

    @staticmethod
    def equal(a, b):
        r"""
        equal(a, b) -> bool

        Parameters
        ----------
        a: double const *
        b: double const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_equal(a, b)

# Register vnl_matrix_fixedD_2_6 in _vnl_matrix_fixedPython:
_vnl_matrix_fixedPython.vnl_matrix_fixedD_2_6_swigregister(vnl_matrix_fixedD_2_6)
class vnl_matrix_fixedD_3_12(object):
    r"""Proxy of C++ vnl_matrix_fixedD_3_12 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedD_3_12

    def __init__(self, *args):
        r"""
        __init__(self) -> vnl_matrix_fixedD_3_12
        __init__(self, rhs) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        rhs: vnl_matrix_fixedD_3_12 const &

        __init__(self, arg0, arg1) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        __init__(self, value) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        value: double

        __init__(self, datablck) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        datablck: double const *

        __init__(self, rhs) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        rhs: vnl_matrixD const &

        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedD_3_12(*args))

    def size(self):
        r"""size(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_size(self)

    def rows(self):
        r"""rows(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_rows(self)

    def cols(self):
        r"""cols(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_cols(self)

    def columns(self):
        r"""columns(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_columns(self)

    def put(self, r, c, v):
        r"""
        put(self, r, c, v)

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: double const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_put(self, r, c, v)

    def get(self, r, c):
        r"""
        get(self, r, c) -> double

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_get(self, r, c)

    def __call__(self, *args):
        r"""
        __call__(self, r, c) -> double

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        __call__(self, r, c) -> double const &

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12___call__(self, *args)

    def fill(self, arg0):
        r"""
        fill(self, arg0) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        arg0: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_fill(self, arg0)

    def fill_diagonal(self, arg0):
        r"""
        fill_diagonal(self, arg0) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        arg0: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_fill_diagonal(self, arg0)

    def set_diagonal(self, arg0):
        r"""
        set_diagonal(self, arg0) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        arg0: vnl_vectorD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_set_diagonal(self, arg0)

    def copy_in(self, arg0):
        r"""
        copy_in(self, arg0) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        arg0: double const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_copy_in(self, arg0)

    def set(self, *args):
        r"""
        set(self, r, c, v) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: double const &

        set(self, d) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        d: double const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_set(self, *args)

    def copy_out(self, arg0):
        r"""
        copy_out(self, arg0)

        Parameters
        ----------
        arg0: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_copy_out(self, arg0)

    def inplace_transpose(self):
        r"""inplace_transpose(self) -> vnl_matrix_fixedD_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_inplace_transpose(self)

    def __itruediv__(self, *args):
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, *args):
        r"""
        __iadd__(self, s) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        s: double

        __iadd__(self, m) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        m: vnl_matrix_fixedD_3_12 const &

        __iadd__(self, m) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        m: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(self, s) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        s: double

        __isub__(self, m) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        m: vnl_matrix_fixedD_3_12 const &

        __isub__(self, m) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        m: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12___isub__(self, *args)

    def __neg__(self):
        r"""__neg__(self) -> vnl_matrix_fixedD_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12___neg__(self)

    def __imul__(self, *args):
        r"""
        __imul__(self, s) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        s: double

        __imul__(self, s) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        s: vnl_matrix_fixed< double,12,12 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12___imul__(self, *args)

    def transpose(self):
        r"""transpose(self) -> vnl_matrix_fixed< double,12,3 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_transpose(self)

    def conjugate_transpose(self):
        r"""conjugate_transpose(self) -> vnl_matrix_fixed< double,12,3 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_conjugate_transpose(self)

    def update(self, *args):
        r"""
        update(self, arg0, top=0, left=0) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        arg0: vnl_matrixD const &
        top: unsigned int
        left: unsigned int

        update(self, m, top=0, left=0) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        m: vnl_matrix_fixedD_3_12 const &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_update(self, *args)

    def set_column(self, *args):
        r"""
        set_column(self, i, v) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        i: unsigned int
        v: double const *

        set_column(self, i, value) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        i: unsigned int
        value: double

        set_column(self, j, v) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        j: unsigned int
        v: vnl_vectorD const &

        set_column(self, j, v) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        j: unsigned int
        v: vnl_vector_fixed< double,3 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_set_column(self, *args)

    def set_columns(self, starting_column, M):
        r"""
        set_columns(self, starting_column, M) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        starting_column: unsigned int
        M: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_set_columns(self, starting_column, M)

    def set_row(self, *args):
        r"""
        set_row(self, i, v) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        i: unsigned int
        v: double const *

        set_row(self, i, value) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        i: unsigned int
        value: double

        set_row(self, i, arg1) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vectorD const &

        set_row(self, i, arg1) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vector_fixed< double,12 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_set_row(self, *args)

    def extract(self, *args):
        r"""
        extract(self, r, c, top=0, left=0) -> vnl_matrixD

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        top: unsigned int
        left: unsigned int

        extract(self, sub_matrix, top=0, left=0)

        Parameters
        ----------
        sub_matrix: vnl_matrixD &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_extract(self, *args)

    def get_row(self, row):
        r"""
        get_row(self, row) -> vnl_vector_fixed< double,12 >

        Parameters
        ----------
        row: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_get_row(self, row)

    def get_column(self, col):
        r"""
        get_column(self, col) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        col: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_get_column(self, col)

    def get_rows(self, i):
        r"""
        get_rows(self, i) -> vnl_matrixD

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_get_rows(self, i)

    def get_columns(self, i):
        r"""
        get_columns(self, i) -> vnl_matrixD

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_get_columns(self, i)

    def get_n_rows(self, rowstart, n):
        r"""
        get_n_rows(self, rowstart, n) -> vnl_matrixD

        Parameters
        ----------
        rowstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_get_n_rows(self, rowstart, n)

    def get_n_columns(self, colstart, n):
        r"""
        get_n_columns(self, colstart, n) -> vnl_matrixD

        Parameters
        ----------
        colstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_get_n_columns(self, colstart, n)

    def get_diagonal(self):
        r"""get_diagonal(self) -> vnl_vectorD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_get_diagonal(self)

    def flatten_row_major(self):
        r"""flatten_row_major(self) -> vnl_vector_fixed< double,36 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_flatten_row_major(self)

    def flatten_column_major(self):
        r"""flatten_column_major(self) -> vnl_vector_fixed< double,36 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_flatten_column_major(self)

    def set_identity(self):
        r"""set_identity(self) -> vnl_matrix_fixedD_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_set_identity(self)

    def flipud(self):
        r"""flipud(self) -> vnl_matrix_fixedD_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_flipud(self)

    def fliplr(self):
        r"""fliplr(self) -> vnl_matrix_fixedD_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_fliplr(self)

    def normalize_rows(self):
        r"""normalize_rows(self) -> vnl_matrix_fixedD_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_normalize_rows(self)

    def normalize_columns(self):
        r"""normalize_columns(self) -> vnl_matrix_fixedD_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_normalize_columns(self)

    def scale_row(self, row, value):
        r"""
        scale_row(self, row, value) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        row: unsigned int
        value: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_scale_row(self, row, value)

    def scale_column(self, col, value):
        r"""
        scale_column(self, col, value) -> vnl_matrix_fixedD_3_12

        Parameters
        ----------
        col: unsigned int
        value: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_scale_column(self, col, value)

    def swap(self, that):
        r"""
        swap(self, that)

        Parameters
        ----------
        that: vnl_matrix_fixedD_3_12 &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_swap(self, that)

    def array_one_norm(self):
        r"""array_one_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_array_one_norm(self)

    def array_two_norm(self):
        r"""array_two_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_array_two_norm(self)

    def array_inf_norm(self):
        r"""array_inf_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_array_inf_norm(self)

    def absolute_value_sum(self):
        r"""absolute_value_sum(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_absolute_value_sum(self)

    def absolute_value_max(self):
        r"""absolute_value_max(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_absolute_value_max(self)

    def operator_one_norm(self):
        r"""operator_one_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_operator_one_norm(self)

    def operator_inf_norm(self):
        r"""operator_inf_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_operator_inf_norm(self)

    def frobenius_norm(self):
        r"""frobenius_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_frobenius_norm(self)

    def fro_norm(self):
        r"""fro_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_fro_norm(self)

    def rms(self):
        r"""rms(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_rms(self)

    def min_value(self):
        r"""min_value(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_min_value(self)

    def max_value(self):
        r"""max_value(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_max_value(self)

    def arg_min(self):
        r"""arg_min(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_arg_min(self)

    def arg_max(self):
        r"""arg_max(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_arg_max(self)

    def mean(self):
        r"""mean(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_mean(self)

    def empty(self):
        r"""empty(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_empty(self)

    def is_identity(self, *args):
        r"""
        is_identity(self) -> bool
        is_identity(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_is_identity(self, *args)

    def is_zero(self, *args):
        r"""
        is_zero(self) -> bool
        is_zero(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_is_zero(self, *args)

    def is_equal(self, rhs, tol):
        r"""
        is_equal(self, rhs, tol) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedD_3_12 const &
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_is_equal(self, rhs, tol)

    def is_finite(self):
        r"""is_finite(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_is_finite(self)

    def has_nans(self):
        r"""has_nans(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_has_nans(self)

    def assert_size(self, arg0, arg1):
        r"""
        assert_size(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_assert_size(self, arg0, arg1)

    def assert_finite(self):
        r"""assert_finite(self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_assert_finite(self)

    def read_ascii(self, s):
        r"""
        read_ascii(self, s) -> bool

        Parameters
        ----------
        s: std::basic_istream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_read_ascii(self, s)

    def data_block(self, *args):
        r"""
        data_block(self) -> double const
        data_block(self) -> double *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_data_block(self, *args)

    def as_matrix(self):
        r"""as_matrix(self) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_as_matrix(self)

    def begin(self, *args):
        r"""
        begin(self) -> double
        begin(self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> double
        end(self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_end(self, *args)

    def operator_eq(self, rhs):
        r"""
        operator_eq(self, rhs) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedD_3_12 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_operator_eq(self, rhs)

    def __eq__(self, *args):
        r"""
        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedD_3_12 const &

        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedD_3_12 const &

        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12___ne__(self, *args)

    def _print(self, os):
        r"""
        _print(self, os)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12__print(self, os)

    @staticmethod
    def add(*args):
        r"""
        add(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        add(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_add(*args)

    @staticmethod
    def sub(*args):
        r"""
        sub(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        sub(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        sub(a, b, r)

        Parameters
        ----------
        a: double
        b: double const *
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_sub(*args)

    @staticmethod
    def mul(*args):
        r"""
        mul(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        mul(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_mul(*args)

    @staticmethod
    def div(*args):
        r"""
        div(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        div(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_div(*args)

    @staticmethod
    def equal(a, b):
        r"""
        equal(a, b) -> bool

        Parameters
        ----------
        a: double const *
        b: double const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_equal(a, b)

# Register vnl_matrix_fixedD_3_12 in _vnl_matrix_fixedPython:
_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_12_swigregister(vnl_matrix_fixedD_3_12)
class vnl_matrix_fixedD_3_3(object):
    r"""Proxy of C++ vnl_matrix_fixedD_3_3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedD_3_3

    def __init__(self, *args):
        r"""
        __init__(self) -> vnl_matrix_fixedD_3_3
        __init__(self, rhs) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        rhs: vnl_matrix_fixedD_3_3 const &

        __init__(self, arg0, arg1) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        __init__(self, value) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        value: double

        __init__(self, datablck) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        datablck: double const *

        __init__(self, rhs) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        rhs: vnl_matrixD const &

        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedD_3_3(*args))

    def size(self):
        r"""size(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_size(self)

    def rows(self):
        r"""rows(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_rows(self)

    def cols(self):
        r"""cols(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_cols(self)

    def columns(self):
        r"""columns(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_columns(self)

    def put(self, r, c, v):
        r"""
        put(self, r, c, v)

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: double const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_put(self, r, c, v)

    def get(self, r, c):
        r"""
        get(self, r, c) -> double

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_get(self, r, c)

    def __call__(self, *args):
        r"""
        __call__(self, r, c) -> double

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        __call__(self, r, c) -> double const &

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3___call__(self, *args)

    def fill(self, arg0):
        r"""
        fill(self, arg0) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        arg0: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_fill(self, arg0)

    def fill_diagonal(self, arg0):
        r"""
        fill_diagonal(self, arg0) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        arg0: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_fill_diagonal(self, arg0)

    def set_diagonal(self, arg0):
        r"""
        set_diagonal(self, arg0) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        arg0: vnl_vectorD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_set_diagonal(self, arg0)

    def copy_in(self, arg0):
        r"""
        copy_in(self, arg0) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        arg0: double const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_copy_in(self, arg0)

    def set(self, *args):
        r"""
        set(self, r, c, v) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: double const &

        set(self, d) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        d: double const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_set(self, *args)

    def copy_out(self, arg0):
        r"""
        copy_out(self, arg0)

        Parameters
        ----------
        arg0: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_copy_out(self, arg0)

    def inplace_transpose(self):
        r"""inplace_transpose(self) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_inplace_transpose(self)

    def __itruediv__(self, *args):
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, *args):
        r"""
        __iadd__(self, s) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        s: double

        __iadd__(self, m) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        m: vnl_matrix_fixedD_3_3 const &

        __iadd__(self, m) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        m: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(self, s) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        s: double

        __isub__(self, m) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        m: vnl_matrix_fixedD_3_3 const &

        __isub__(self, m) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        m: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3___isub__(self, *args)

    def __neg__(self):
        r"""__neg__(self) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3___neg__(self)

    def __imul__(self, *args):
        r"""
        __imul__(self, s) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        s: double

        __imul__(self, s) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        s: vnl_matrix_fixedD_3_3 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3___imul__(self, *args)

    def transpose(self):
        r"""transpose(self) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_transpose(self)

    def conjugate_transpose(self):
        r"""conjugate_transpose(self) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_conjugate_transpose(self)

    def update(self, *args):
        r"""
        update(self, arg0, top=0, left=0) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        arg0: vnl_matrixD const &
        top: unsigned int
        left: unsigned int

        update(self, m, top=0, left=0) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        m: vnl_matrix_fixedD_3_3 const &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_update(self, *args)

    def set_column(self, *args):
        r"""
        set_column(self, i, v) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        i: unsigned int
        v: double const *

        set_column(self, i, value) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        i: unsigned int
        value: double

        set_column(self, j, v) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        j: unsigned int
        v: vnl_vectorD const &

        set_column(self, j, v) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        j: unsigned int
        v: vnl_vector_fixed< double,3 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_set_column(self, *args)

    def set_columns(self, starting_column, M):
        r"""
        set_columns(self, starting_column, M) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        starting_column: unsigned int
        M: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_set_columns(self, starting_column, M)

    def set_row(self, *args):
        r"""
        set_row(self, i, v) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        i: unsigned int
        v: double const *

        set_row(self, i, value) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        i: unsigned int
        value: double

        set_row(self, i, arg1) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vectorD const &

        set_row(self, i, arg1) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vector_fixed< double,3 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_set_row(self, *args)

    def extract(self, *args):
        r"""
        extract(self, r, c, top=0, left=0) -> vnl_matrixD

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        top: unsigned int
        left: unsigned int

        extract(self, sub_matrix, top=0, left=0)

        Parameters
        ----------
        sub_matrix: vnl_matrixD &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_extract(self, *args)

    def get_row(self, row):
        r"""
        get_row(self, row) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        row: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_get_row(self, row)

    def get_column(self, col):
        r"""
        get_column(self, col) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        col: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_get_column(self, col)

    def get_rows(self, i):
        r"""
        get_rows(self, i) -> vnl_matrixD

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_get_rows(self, i)

    def get_columns(self, i):
        r"""
        get_columns(self, i) -> vnl_matrixD

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_get_columns(self, i)

    def get_n_rows(self, rowstart, n):
        r"""
        get_n_rows(self, rowstart, n) -> vnl_matrixD

        Parameters
        ----------
        rowstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_get_n_rows(self, rowstart, n)

    def get_n_columns(self, colstart, n):
        r"""
        get_n_columns(self, colstart, n) -> vnl_matrixD

        Parameters
        ----------
        colstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_get_n_columns(self, colstart, n)

    def get_diagonal(self):
        r"""get_diagonal(self) -> vnl_vectorD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_get_diagonal(self)

    def flatten_row_major(self):
        r"""flatten_row_major(self) -> vnl_vector_fixed< double,9 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_flatten_row_major(self)

    def flatten_column_major(self):
        r"""flatten_column_major(self) -> vnl_vector_fixed< double,9 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_flatten_column_major(self)

    def set_identity(self):
        r"""set_identity(self) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_set_identity(self)

    def flipud(self):
        r"""flipud(self) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_flipud(self)

    def fliplr(self):
        r"""fliplr(self) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_fliplr(self)

    def normalize_rows(self):
        r"""normalize_rows(self) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_normalize_rows(self)

    def normalize_columns(self):
        r"""normalize_columns(self) -> vnl_matrix_fixedD_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_normalize_columns(self)

    def scale_row(self, row, value):
        r"""
        scale_row(self, row, value) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        row: unsigned int
        value: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_scale_row(self, row, value)

    def scale_column(self, col, value):
        r"""
        scale_column(self, col, value) -> vnl_matrix_fixedD_3_3

        Parameters
        ----------
        col: unsigned int
        value: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_scale_column(self, col, value)

    def swap(self, that):
        r"""
        swap(self, that)

        Parameters
        ----------
        that: vnl_matrix_fixedD_3_3 &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_swap(self, that)

    def array_one_norm(self):
        r"""array_one_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_array_one_norm(self)

    def array_two_norm(self):
        r"""array_two_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_array_two_norm(self)

    def array_inf_norm(self):
        r"""array_inf_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_array_inf_norm(self)

    def absolute_value_sum(self):
        r"""absolute_value_sum(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_absolute_value_sum(self)

    def absolute_value_max(self):
        r"""absolute_value_max(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_absolute_value_max(self)

    def operator_one_norm(self):
        r"""operator_one_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_operator_one_norm(self)

    def operator_inf_norm(self):
        r"""operator_inf_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_operator_inf_norm(self)

    def frobenius_norm(self):
        r"""frobenius_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_frobenius_norm(self)

    def fro_norm(self):
        r"""fro_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_fro_norm(self)

    def rms(self):
        r"""rms(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_rms(self)

    def min_value(self):
        r"""min_value(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_min_value(self)

    def max_value(self):
        r"""max_value(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_max_value(self)

    def arg_min(self):
        r"""arg_min(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_arg_min(self)

    def arg_max(self):
        r"""arg_max(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_arg_max(self)

    def mean(self):
        r"""mean(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_mean(self)

    def empty(self):
        r"""empty(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_empty(self)

    def is_identity(self, *args):
        r"""
        is_identity(self) -> bool
        is_identity(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_is_identity(self, *args)

    def is_zero(self, *args):
        r"""
        is_zero(self) -> bool
        is_zero(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_is_zero(self, *args)

    def is_equal(self, rhs, tol):
        r"""
        is_equal(self, rhs, tol) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedD_3_3 const &
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_is_equal(self, rhs, tol)

    def is_finite(self):
        r"""is_finite(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_is_finite(self)

    def has_nans(self):
        r"""has_nans(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_has_nans(self)

    def assert_size(self, arg0, arg1):
        r"""
        assert_size(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_assert_size(self, arg0, arg1)

    def assert_finite(self):
        r"""assert_finite(self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_assert_finite(self)

    def read_ascii(self, s):
        r"""
        read_ascii(self, s) -> bool

        Parameters
        ----------
        s: std::basic_istream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_read_ascii(self, s)

    def data_block(self, *args):
        r"""
        data_block(self) -> double const
        data_block(self) -> double *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_data_block(self, *args)

    def as_matrix(self):
        r"""as_matrix(self) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_as_matrix(self)

    def begin(self, *args):
        r"""
        begin(self) -> double
        begin(self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> double
        end(self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_end(self, *args)

    def operator_eq(self, rhs):
        r"""
        operator_eq(self, rhs) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedD_3_3 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_operator_eq(self, rhs)

    def __eq__(self, *args):
        r"""
        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedD_3_3 const &

        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedD_3_3 const &

        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3___ne__(self, *args)

    def _print(self, os):
        r"""
        _print(self, os)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3__print(self, os)

    @staticmethod
    def add(*args):
        r"""
        add(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        add(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_add(*args)

    @staticmethod
    def sub(*args):
        r"""
        sub(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        sub(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        sub(a, b, r)

        Parameters
        ----------
        a: double
        b: double const *
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_sub(*args)

    @staticmethod
    def mul(*args):
        r"""
        mul(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        mul(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_mul(*args)

    @staticmethod
    def div(*args):
        r"""
        div(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        div(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_div(*args)

    @staticmethod
    def equal(a, b):
        r"""
        equal(a, b) -> bool

        Parameters
        ----------
        a: double const *
        b: double const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_equal(a, b)

# Register vnl_matrix_fixedD_3_3 in _vnl_matrix_fixedPython:
_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_3_swigregister(vnl_matrix_fixedD_3_3)
class vnl_matrix_fixedD_3_4(object):
    r"""Proxy of C++ vnl_matrix_fixedD_3_4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedD_3_4

    def __init__(self, *args):
        r"""
        __init__(self) -> vnl_matrix_fixedD_3_4
        __init__(self, rhs) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        rhs: vnl_matrix_fixedD_3_4 const &

        __init__(self, arg0, arg1) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        __init__(self, value) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        value: double

        __init__(self, datablck) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        datablck: double const *

        __init__(self, rhs) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        rhs: vnl_matrixD const &

        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedD_3_4(*args))

    def size(self):
        r"""size(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_size(self)

    def rows(self):
        r"""rows(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_rows(self)

    def cols(self):
        r"""cols(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_cols(self)

    def columns(self):
        r"""columns(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_columns(self)

    def put(self, r, c, v):
        r"""
        put(self, r, c, v)

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: double const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_put(self, r, c, v)

    def get(self, r, c):
        r"""
        get(self, r, c) -> double

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_get(self, r, c)

    def __call__(self, *args):
        r"""
        __call__(self, r, c) -> double

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        __call__(self, r, c) -> double const &

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4___call__(self, *args)

    def fill(self, arg0):
        r"""
        fill(self, arg0) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        arg0: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_fill(self, arg0)

    def fill_diagonal(self, arg0):
        r"""
        fill_diagonal(self, arg0) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        arg0: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_fill_diagonal(self, arg0)

    def set_diagonal(self, arg0):
        r"""
        set_diagonal(self, arg0) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        arg0: vnl_vectorD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_set_diagonal(self, arg0)

    def copy_in(self, arg0):
        r"""
        copy_in(self, arg0) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        arg0: double const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_copy_in(self, arg0)

    def set(self, *args):
        r"""
        set(self, r, c, v) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: double const &

        set(self, d) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        d: double const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_set(self, *args)

    def copy_out(self, arg0):
        r"""
        copy_out(self, arg0)

        Parameters
        ----------
        arg0: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_copy_out(self, arg0)

    def inplace_transpose(self):
        r"""inplace_transpose(self) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_inplace_transpose(self)

    def __itruediv__(self, *args):
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, *args):
        r"""
        __iadd__(self, s) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        s: double

        __iadd__(self, m) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        m: vnl_matrix_fixedD_3_4 const &

        __iadd__(self, m) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        m: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(self, s) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        s: double

        __isub__(self, m) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        m: vnl_matrix_fixedD_3_4 const &

        __isub__(self, m) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        m: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4___isub__(self, *args)

    def __neg__(self):
        r"""__neg__(self) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4___neg__(self)

    def __imul__(self, *args):
        r"""
        __imul__(self, s) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        s: double

        __imul__(self, s) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        s: vnl_matrix_fixedD_4_4 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4___imul__(self, *args)

    def transpose(self):
        r"""transpose(self) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_transpose(self)

    def conjugate_transpose(self):
        r"""conjugate_transpose(self) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_conjugate_transpose(self)

    def update(self, *args):
        r"""
        update(self, arg0, top=0, left=0) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        arg0: vnl_matrixD const &
        top: unsigned int
        left: unsigned int

        update(self, m, top=0, left=0) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        m: vnl_matrix_fixedD_3_4 const &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_update(self, *args)

    def set_column(self, *args):
        r"""
        set_column(self, i, v) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        i: unsigned int
        v: double const *

        set_column(self, i, value) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        i: unsigned int
        value: double

        set_column(self, j, v) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        j: unsigned int
        v: vnl_vectorD const &

        set_column(self, j, v) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        j: unsigned int
        v: vnl_vector_fixed< double,3 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_set_column(self, *args)

    def set_columns(self, starting_column, M):
        r"""
        set_columns(self, starting_column, M) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        starting_column: unsigned int
        M: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_set_columns(self, starting_column, M)

    def set_row(self, *args):
        r"""
        set_row(self, i, v) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        i: unsigned int
        v: double const *

        set_row(self, i, value) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        i: unsigned int
        value: double

        set_row(self, i, arg1) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vectorD const &

        set_row(self, i, arg1) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vector_fixed< double,4 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_set_row(self, *args)

    def extract(self, *args):
        r"""
        extract(self, r, c, top=0, left=0) -> vnl_matrixD

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        top: unsigned int
        left: unsigned int

        extract(self, sub_matrix, top=0, left=0)

        Parameters
        ----------
        sub_matrix: vnl_matrixD &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_extract(self, *args)

    def get_row(self, row):
        r"""
        get_row(self, row) -> vnl_vector_fixed< double,4 >

        Parameters
        ----------
        row: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_get_row(self, row)

    def get_column(self, col):
        r"""
        get_column(self, col) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        col: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_get_column(self, col)

    def get_rows(self, i):
        r"""
        get_rows(self, i) -> vnl_matrixD

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_get_rows(self, i)

    def get_columns(self, i):
        r"""
        get_columns(self, i) -> vnl_matrixD

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_get_columns(self, i)

    def get_n_rows(self, rowstart, n):
        r"""
        get_n_rows(self, rowstart, n) -> vnl_matrixD

        Parameters
        ----------
        rowstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_get_n_rows(self, rowstart, n)

    def get_n_columns(self, colstart, n):
        r"""
        get_n_columns(self, colstart, n) -> vnl_matrixD

        Parameters
        ----------
        colstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_get_n_columns(self, colstart, n)

    def get_diagonal(self):
        r"""get_diagonal(self) -> vnl_vectorD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_get_diagonal(self)

    def flatten_row_major(self):
        r"""flatten_row_major(self) -> vnl_vector_fixed< double,12 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_flatten_row_major(self)

    def flatten_column_major(self):
        r"""flatten_column_major(self) -> vnl_vector_fixed< double,12 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_flatten_column_major(self)

    def set_identity(self):
        r"""set_identity(self) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_set_identity(self)

    def flipud(self):
        r"""flipud(self) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_flipud(self)

    def fliplr(self):
        r"""fliplr(self) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_fliplr(self)

    def normalize_rows(self):
        r"""normalize_rows(self) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_normalize_rows(self)

    def normalize_columns(self):
        r"""normalize_columns(self) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_normalize_columns(self)

    def scale_row(self, row, value):
        r"""
        scale_row(self, row, value) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        row: unsigned int
        value: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_scale_row(self, row, value)

    def scale_column(self, col, value):
        r"""
        scale_column(self, col, value) -> vnl_matrix_fixedD_3_4

        Parameters
        ----------
        col: unsigned int
        value: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_scale_column(self, col, value)

    def swap(self, that):
        r"""
        swap(self, that)

        Parameters
        ----------
        that: vnl_matrix_fixedD_3_4 &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_swap(self, that)

    def array_one_norm(self):
        r"""array_one_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_array_one_norm(self)

    def array_two_norm(self):
        r"""array_two_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_array_two_norm(self)

    def array_inf_norm(self):
        r"""array_inf_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_array_inf_norm(self)

    def absolute_value_sum(self):
        r"""absolute_value_sum(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_absolute_value_sum(self)

    def absolute_value_max(self):
        r"""absolute_value_max(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_absolute_value_max(self)

    def operator_one_norm(self):
        r"""operator_one_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_operator_one_norm(self)

    def operator_inf_norm(self):
        r"""operator_inf_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_operator_inf_norm(self)

    def frobenius_norm(self):
        r"""frobenius_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_frobenius_norm(self)

    def fro_norm(self):
        r"""fro_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_fro_norm(self)

    def rms(self):
        r"""rms(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_rms(self)

    def min_value(self):
        r"""min_value(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_min_value(self)

    def max_value(self):
        r"""max_value(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_max_value(self)

    def arg_min(self):
        r"""arg_min(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_arg_min(self)

    def arg_max(self):
        r"""arg_max(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_arg_max(self)

    def mean(self):
        r"""mean(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_mean(self)

    def empty(self):
        r"""empty(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_empty(self)

    def is_identity(self, *args):
        r"""
        is_identity(self) -> bool
        is_identity(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_is_identity(self, *args)

    def is_zero(self, *args):
        r"""
        is_zero(self) -> bool
        is_zero(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_is_zero(self, *args)

    def is_equal(self, rhs, tol):
        r"""
        is_equal(self, rhs, tol) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedD_3_4 const &
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_is_equal(self, rhs, tol)

    def is_finite(self):
        r"""is_finite(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_is_finite(self)

    def has_nans(self):
        r"""has_nans(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_has_nans(self)

    def assert_size(self, arg0, arg1):
        r"""
        assert_size(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_assert_size(self, arg0, arg1)

    def assert_finite(self):
        r"""assert_finite(self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_assert_finite(self)

    def read_ascii(self, s):
        r"""
        read_ascii(self, s) -> bool

        Parameters
        ----------
        s: std::basic_istream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_read_ascii(self, s)

    def data_block(self, *args):
        r"""
        data_block(self) -> double const
        data_block(self) -> double *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_data_block(self, *args)

    def as_matrix(self):
        r"""as_matrix(self) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_as_matrix(self)

    def begin(self, *args):
        r"""
        begin(self) -> double
        begin(self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> double
        end(self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_end(self, *args)

    def operator_eq(self, rhs):
        r"""
        operator_eq(self, rhs) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedD_3_4 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_operator_eq(self, rhs)

    def __eq__(self, *args):
        r"""
        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedD_3_4 const &

        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedD_3_4 const &

        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4___ne__(self, *args)

    def _print(self, os):
        r"""
        _print(self, os)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4__print(self, os)

    @staticmethod
    def add(*args):
        r"""
        add(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        add(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_add(*args)

    @staticmethod
    def sub(*args):
        r"""
        sub(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        sub(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        sub(a, b, r)

        Parameters
        ----------
        a: double
        b: double const *
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_sub(*args)

    @staticmethod
    def mul(*args):
        r"""
        mul(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        mul(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_mul(*args)

    @staticmethod
    def div(*args):
        r"""
        div(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        div(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_div(*args)

    @staticmethod
    def equal(a, b):
        r"""
        equal(a, b) -> bool

        Parameters
        ----------
        a: double const *
        b: double const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_equal(a, b)

# Register vnl_matrix_fixedD_3_4 in _vnl_matrix_fixedPython:
_vnl_matrix_fixedPython.vnl_matrix_fixedD_3_4_swigregister(vnl_matrix_fixedD_3_4)
class vnl_matrix_fixedD_4_3(object):
    r"""Proxy of C++ vnl_matrix_fixedD_4_3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedD_4_3

    def __init__(self, *args):
        r"""
        __init__(self) -> vnl_matrix_fixedD_4_3
        __init__(self, rhs) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        rhs: vnl_matrix_fixedD_4_3 const &

        __init__(self, arg0, arg1) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        __init__(self, value) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        value: double

        __init__(self, datablck) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        datablck: double const *

        __init__(self, rhs) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        rhs: vnl_matrixD const &

        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedD_4_3(*args))

    def size(self):
        r"""size(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_size(self)

    def rows(self):
        r"""rows(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_rows(self)

    def cols(self):
        r"""cols(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_cols(self)

    def columns(self):
        r"""columns(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_columns(self)

    def put(self, r, c, v):
        r"""
        put(self, r, c, v)

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: double const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_put(self, r, c, v)

    def get(self, r, c):
        r"""
        get(self, r, c) -> double

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_get(self, r, c)

    def __call__(self, *args):
        r"""
        __call__(self, r, c) -> double

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        __call__(self, r, c) -> double const &

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3___call__(self, *args)

    def fill(self, arg0):
        r"""
        fill(self, arg0) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        arg0: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_fill(self, arg0)

    def fill_diagonal(self, arg0):
        r"""
        fill_diagonal(self, arg0) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        arg0: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_fill_diagonal(self, arg0)

    def set_diagonal(self, arg0):
        r"""
        set_diagonal(self, arg0) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        arg0: vnl_vectorD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_set_diagonal(self, arg0)

    def copy_in(self, arg0):
        r"""
        copy_in(self, arg0) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        arg0: double const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_copy_in(self, arg0)

    def set(self, *args):
        r"""
        set(self, r, c, v) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: double const &

        set(self, d) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        d: double const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_set(self, *args)

    def copy_out(self, arg0):
        r"""
        copy_out(self, arg0)

        Parameters
        ----------
        arg0: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_copy_out(self, arg0)

    def inplace_transpose(self):
        r"""inplace_transpose(self) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_inplace_transpose(self)

    def __itruediv__(self, *args):
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, *args):
        r"""
        __iadd__(self, s) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        s: double

        __iadd__(self, m) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        m: vnl_matrix_fixedD_4_3 const &

        __iadd__(self, m) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        m: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(self, s) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        s: double

        __isub__(self, m) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        m: vnl_matrix_fixedD_4_3 const &

        __isub__(self, m) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        m: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3___isub__(self, *args)

    def __neg__(self):
        r"""__neg__(self) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3___neg__(self)

    def __imul__(self, *args):
        r"""
        __imul__(self, s) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        s: double

        __imul__(self, s) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        s: vnl_matrix_fixedD_3_3 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3___imul__(self, *args)

    def transpose(self):
        r"""transpose(self) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_transpose(self)

    def conjugate_transpose(self):
        r"""conjugate_transpose(self) -> vnl_matrix_fixedD_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_conjugate_transpose(self)

    def update(self, *args):
        r"""
        update(self, arg0, top=0, left=0) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        arg0: vnl_matrixD const &
        top: unsigned int
        left: unsigned int

        update(self, m, top=0, left=0) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        m: vnl_matrix_fixedD_4_3 const &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_update(self, *args)

    def set_column(self, *args):
        r"""
        set_column(self, i, v) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        i: unsigned int
        v: double const *

        set_column(self, i, value) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        i: unsigned int
        value: double

        set_column(self, j, v) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        j: unsigned int
        v: vnl_vectorD const &

        set_column(self, j, v) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        j: unsigned int
        v: vnl_vector_fixed< double,4 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_set_column(self, *args)

    def set_columns(self, starting_column, M):
        r"""
        set_columns(self, starting_column, M) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        starting_column: unsigned int
        M: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_set_columns(self, starting_column, M)

    def set_row(self, *args):
        r"""
        set_row(self, i, v) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        i: unsigned int
        v: double const *

        set_row(self, i, value) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        i: unsigned int
        value: double

        set_row(self, i, arg1) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vectorD const &

        set_row(self, i, arg1) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vector_fixed< double,3 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_set_row(self, *args)

    def extract(self, *args):
        r"""
        extract(self, r, c, top=0, left=0) -> vnl_matrixD

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        top: unsigned int
        left: unsigned int

        extract(self, sub_matrix, top=0, left=0)

        Parameters
        ----------
        sub_matrix: vnl_matrixD &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_extract(self, *args)

    def get_row(self, row):
        r"""
        get_row(self, row) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        row: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_get_row(self, row)

    def get_column(self, col):
        r"""
        get_column(self, col) -> vnl_vector_fixed< double,4 >

        Parameters
        ----------
        col: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_get_column(self, col)

    def get_rows(self, i):
        r"""
        get_rows(self, i) -> vnl_matrixD

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_get_rows(self, i)

    def get_columns(self, i):
        r"""
        get_columns(self, i) -> vnl_matrixD

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_get_columns(self, i)

    def get_n_rows(self, rowstart, n):
        r"""
        get_n_rows(self, rowstart, n) -> vnl_matrixD

        Parameters
        ----------
        rowstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_get_n_rows(self, rowstart, n)

    def get_n_columns(self, colstart, n):
        r"""
        get_n_columns(self, colstart, n) -> vnl_matrixD

        Parameters
        ----------
        colstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_get_n_columns(self, colstart, n)

    def get_diagonal(self):
        r"""get_diagonal(self) -> vnl_vectorD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_get_diagonal(self)

    def flatten_row_major(self):
        r"""flatten_row_major(self) -> vnl_vector_fixed< double,12 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_flatten_row_major(self)

    def flatten_column_major(self):
        r"""flatten_column_major(self) -> vnl_vector_fixed< double,12 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_flatten_column_major(self)

    def set_identity(self):
        r"""set_identity(self) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_set_identity(self)

    def flipud(self):
        r"""flipud(self) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_flipud(self)

    def fliplr(self):
        r"""fliplr(self) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_fliplr(self)

    def normalize_rows(self):
        r"""normalize_rows(self) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_normalize_rows(self)

    def normalize_columns(self):
        r"""normalize_columns(self) -> vnl_matrix_fixedD_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_normalize_columns(self)

    def scale_row(self, row, value):
        r"""
        scale_row(self, row, value) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        row: unsigned int
        value: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_scale_row(self, row, value)

    def scale_column(self, col, value):
        r"""
        scale_column(self, col, value) -> vnl_matrix_fixedD_4_3

        Parameters
        ----------
        col: unsigned int
        value: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_scale_column(self, col, value)

    def swap(self, that):
        r"""
        swap(self, that)

        Parameters
        ----------
        that: vnl_matrix_fixedD_4_3 &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_swap(self, that)

    def array_one_norm(self):
        r"""array_one_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_array_one_norm(self)

    def array_two_norm(self):
        r"""array_two_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_array_two_norm(self)

    def array_inf_norm(self):
        r"""array_inf_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_array_inf_norm(self)

    def absolute_value_sum(self):
        r"""absolute_value_sum(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_absolute_value_sum(self)

    def absolute_value_max(self):
        r"""absolute_value_max(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_absolute_value_max(self)

    def operator_one_norm(self):
        r"""operator_one_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_operator_one_norm(self)

    def operator_inf_norm(self):
        r"""operator_inf_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_operator_inf_norm(self)

    def frobenius_norm(self):
        r"""frobenius_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_frobenius_norm(self)

    def fro_norm(self):
        r"""fro_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_fro_norm(self)

    def rms(self):
        r"""rms(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_rms(self)

    def min_value(self):
        r"""min_value(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_min_value(self)

    def max_value(self):
        r"""max_value(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_max_value(self)

    def arg_min(self):
        r"""arg_min(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_arg_min(self)

    def arg_max(self):
        r"""arg_max(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_arg_max(self)

    def mean(self):
        r"""mean(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_mean(self)

    def empty(self):
        r"""empty(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_empty(self)

    def is_identity(self, *args):
        r"""
        is_identity(self) -> bool
        is_identity(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_is_identity(self, *args)

    def is_zero(self, *args):
        r"""
        is_zero(self) -> bool
        is_zero(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_is_zero(self, *args)

    def is_equal(self, rhs, tol):
        r"""
        is_equal(self, rhs, tol) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedD_4_3 const &
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_is_equal(self, rhs, tol)

    def is_finite(self):
        r"""is_finite(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_is_finite(self)

    def has_nans(self):
        r"""has_nans(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_has_nans(self)

    def assert_size(self, arg0, arg1):
        r"""
        assert_size(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_assert_size(self, arg0, arg1)

    def assert_finite(self):
        r"""assert_finite(self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_assert_finite(self)

    def read_ascii(self, s):
        r"""
        read_ascii(self, s) -> bool

        Parameters
        ----------
        s: std::basic_istream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_read_ascii(self, s)

    def data_block(self, *args):
        r"""
        data_block(self) -> double const
        data_block(self) -> double *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_data_block(self, *args)

    def as_matrix(self):
        r"""as_matrix(self) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_as_matrix(self)

    def begin(self, *args):
        r"""
        begin(self) -> double
        begin(self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> double
        end(self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_end(self, *args)

    def operator_eq(self, rhs):
        r"""
        operator_eq(self, rhs) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedD_4_3 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_operator_eq(self, rhs)

    def __eq__(self, *args):
        r"""
        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedD_4_3 const &

        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedD_4_3 const &

        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3___ne__(self, *args)

    def _print(self, os):
        r"""
        _print(self, os)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3__print(self, os)

    @staticmethod
    def add(*args):
        r"""
        add(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        add(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_add(*args)

    @staticmethod
    def sub(*args):
        r"""
        sub(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        sub(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        sub(a, b, r)

        Parameters
        ----------
        a: double
        b: double const *
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_sub(*args)

    @staticmethod
    def mul(*args):
        r"""
        mul(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        mul(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_mul(*args)

    @staticmethod
    def div(*args):
        r"""
        div(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        div(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_div(*args)

    @staticmethod
    def equal(a, b):
        r"""
        equal(a, b) -> bool

        Parameters
        ----------
        a: double const *
        b: double const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_equal(a, b)

# Register vnl_matrix_fixedD_4_3 in _vnl_matrix_fixedPython:
_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_3_swigregister(vnl_matrix_fixedD_4_3)
class vnl_matrix_fixedD_4_4(object):
    r"""Proxy of C++ vnl_matrix_fixedD_4_4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedD_4_4

    def __init__(self, *args):
        r"""
        __init__(self) -> vnl_matrix_fixedD_4_4
        __init__(self, rhs) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        rhs: vnl_matrix_fixedD_4_4 const &

        __init__(self, arg0, arg1) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        __init__(self, value) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        value: double

        __init__(self, datablck) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        datablck: double const *

        __init__(self, rhs) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        rhs: vnl_matrixD const &

        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedD_4_4(*args))

    def size(self):
        r"""size(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_size(self)

    def rows(self):
        r"""rows(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_rows(self)

    def cols(self):
        r"""cols(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_cols(self)

    def columns(self):
        r"""columns(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_columns(self)

    def put(self, r, c, v):
        r"""
        put(self, r, c, v)

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: double const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_put(self, r, c, v)

    def get(self, r, c):
        r"""
        get(self, r, c) -> double

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_get(self, r, c)

    def __call__(self, *args):
        r"""
        __call__(self, r, c) -> double

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        __call__(self, r, c) -> double const &

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4___call__(self, *args)

    def fill(self, arg0):
        r"""
        fill(self, arg0) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        arg0: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_fill(self, arg0)

    def fill_diagonal(self, arg0):
        r"""
        fill_diagonal(self, arg0) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        arg0: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_fill_diagonal(self, arg0)

    def set_diagonal(self, arg0):
        r"""
        set_diagonal(self, arg0) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        arg0: vnl_vectorD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_set_diagonal(self, arg0)

    def copy_in(self, arg0):
        r"""
        copy_in(self, arg0) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        arg0: double const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_copy_in(self, arg0)

    def set(self, *args):
        r"""
        set(self, r, c, v) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: double const &

        set(self, d) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        d: double const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_set(self, *args)

    def copy_out(self, arg0):
        r"""
        copy_out(self, arg0)

        Parameters
        ----------
        arg0: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_copy_out(self, arg0)

    def inplace_transpose(self):
        r"""inplace_transpose(self) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_inplace_transpose(self)

    def __itruediv__(self, *args):
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, *args):
        r"""
        __iadd__(self, s) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        s: double

        __iadd__(self, m) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        m: vnl_matrix_fixedD_4_4 const &

        __iadd__(self, m) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        m: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(self, s) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        s: double

        __isub__(self, m) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        m: vnl_matrix_fixedD_4_4 const &

        __isub__(self, m) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        m: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4___isub__(self, *args)

    def __neg__(self):
        r"""__neg__(self) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4___neg__(self)

    def __imul__(self, *args):
        r"""
        __imul__(self, s) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        s: double

        __imul__(self, s) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        s: vnl_matrix_fixedD_4_4 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4___imul__(self, *args)

    def transpose(self):
        r"""transpose(self) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_transpose(self)

    def conjugate_transpose(self):
        r"""conjugate_transpose(self) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_conjugate_transpose(self)

    def update(self, *args):
        r"""
        update(self, arg0, top=0, left=0) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        arg0: vnl_matrixD const &
        top: unsigned int
        left: unsigned int

        update(self, m, top=0, left=0) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        m: vnl_matrix_fixedD_4_4 const &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_update(self, *args)

    def set_column(self, *args):
        r"""
        set_column(self, i, v) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        i: unsigned int
        v: double const *

        set_column(self, i, value) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        i: unsigned int
        value: double

        set_column(self, j, v) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        j: unsigned int
        v: vnl_vectorD const &

        set_column(self, j, v) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        j: unsigned int
        v: vnl_vector_fixed< double,4 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_set_column(self, *args)

    def set_columns(self, starting_column, M):
        r"""
        set_columns(self, starting_column, M) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        starting_column: unsigned int
        M: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_set_columns(self, starting_column, M)

    def set_row(self, *args):
        r"""
        set_row(self, i, v) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        i: unsigned int
        v: double const *

        set_row(self, i, value) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        i: unsigned int
        value: double

        set_row(self, i, arg1) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vectorD const &

        set_row(self, i, arg1) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vector_fixed< double,4 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_set_row(self, *args)

    def extract(self, *args):
        r"""
        extract(self, r, c, top=0, left=0) -> vnl_matrixD

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        top: unsigned int
        left: unsigned int

        extract(self, sub_matrix, top=0, left=0)

        Parameters
        ----------
        sub_matrix: vnl_matrixD &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_extract(self, *args)

    def get_row(self, row):
        r"""
        get_row(self, row) -> vnl_vector_fixed< double,4 >

        Parameters
        ----------
        row: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_get_row(self, row)

    def get_column(self, col):
        r"""
        get_column(self, col) -> vnl_vector_fixed< double,4 >

        Parameters
        ----------
        col: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_get_column(self, col)

    def get_rows(self, i):
        r"""
        get_rows(self, i) -> vnl_matrixD

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_get_rows(self, i)

    def get_columns(self, i):
        r"""
        get_columns(self, i) -> vnl_matrixD

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_get_columns(self, i)

    def get_n_rows(self, rowstart, n):
        r"""
        get_n_rows(self, rowstart, n) -> vnl_matrixD

        Parameters
        ----------
        rowstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_get_n_rows(self, rowstart, n)

    def get_n_columns(self, colstart, n):
        r"""
        get_n_columns(self, colstart, n) -> vnl_matrixD

        Parameters
        ----------
        colstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_get_n_columns(self, colstart, n)

    def get_diagonal(self):
        r"""get_diagonal(self) -> vnl_vectorD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_get_diagonal(self)

    def flatten_row_major(self):
        r"""flatten_row_major(self) -> vnl_vector_fixed< double,16 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_flatten_row_major(self)

    def flatten_column_major(self):
        r"""flatten_column_major(self) -> vnl_vector_fixed< double,16 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_flatten_column_major(self)

    def set_identity(self):
        r"""set_identity(self) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_set_identity(self)

    def flipud(self):
        r"""flipud(self) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_flipud(self)

    def fliplr(self):
        r"""fliplr(self) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_fliplr(self)

    def normalize_rows(self):
        r"""normalize_rows(self) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_normalize_rows(self)

    def normalize_columns(self):
        r"""normalize_columns(self) -> vnl_matrix_fixedD_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_normalize_columns(self)

    def scale_row(self, row, value):
        r"""
        scale_row(self, row, value) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        row: unsigned int
        value: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_scale_row(self, row, value)

    def scale_column(self, col, value):
        r"""
        scale_column(self, col, value) -> vnl_matrix_fixedD_4_4

        Parameters
        ----------
        col: unsigned int
        value: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_scale_column(self, col, value)

    def swap(self, that):
        r"""
        swap(self, that)

        Parameters
        ----------
        that: vnl_matrix_fixedD_4_4 &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_swap(self, that)

    def array_one_norm(self):
        r"""array_one_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_array_one_norm(self)

    def array_two_norm(self):
        r"""array_two_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_array_two_norm(self)

    def array_inf_norm(self):
        r"""array_inf_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_array_inf_norm(self)

    def absolute_value_sum(self):
        r"""absolute_value_sum(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_absolute_value_sum(self)

    def absolute_value_max(self):
        r"""absolute_value_max(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_absolute_value_max(self)

    def operator_one_norm(self):
        r"""operator_one_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_operator_one_norm(self)

    def operator_inf_norm(self):
        r"""operator_inf_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_operator_inf_norm(self)

    def frobenius_norm(self):
        r"""frobenius_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_frobenius_norm(self)

    def fro_norm(self):
        r"""fro_norm(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_fro_norm(self)

    def rms(self):
        r"""rms(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_rms(self)

    def min_value(self):
        r"""min_value(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_min_value(self)

    def max_value(self):
        r"""max_value(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_max_value(self)

    def arg_min(self):
        r"""arg_min(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_arg_min(self)

    def arg_max(self):
        r"""arg_max(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_arg_max(self)

    def mean(self):
        r"""mean(self) -> double"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_mean(self)

    def empty(self):
        r"""empty(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_empty(self)

    def is_identity(self, *args):
        r"""
        is_identity(self) -> bool
        is_identity(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_is_identity(self, *args)

    def is_zero(self, *args):
        r"""
        is_zero(self) -> bool
        is_zero(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_is_zero(self, *args)

    def is_equal(self, rhs, tol):
        r"""
        is_equal(self, rhs, tol) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedD_4_4 const &
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_is_equal(self, rhs, tol)

    def is_finite(self):
        r"""is_finite(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_is_finite(self)

    def has_nans(self):
        r"""has_nans(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_has_nans(self)

    def assert_size(self, arg0, arg1):
        r"""
        assert_size(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_assert_size(self, arg0, arg1)

    def assert_finite(self):
        r"""assert_finite(self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_assert_finite(self)

    def read_ascii(self, s):
        r"""
        read_ascii(self, s) -> bool

        Parameters
        ----------
        s: std::basic_istream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_read_ascii(self, s)

    def data_block(self, *args):
        r"""
        data_block(self) -> double const
        data_block(self) -> double *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_data_block(self, *args)

    def as_matrix(self):
        r"""as_matrix(self) -> vnl_matrixD"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_as_matrix(self)

    def begin(self, *args):
        r"""
        begin(self) -> double
        begin(self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> double
        end(self) -> double const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_end(self, *args)

    def operator_eq(self, rhs):
        r"""
        operator_eq(self, rhs) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedD_4_4 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_operator_eq(self, rhs)

    def __eq__(self, *args):
        r"""
        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedD_4_4 const &

        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedD_4_4 const &

        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixD const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4___ne__(self, *args)

    def _print(self, os):
        r"""
        _print(self, os)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4__print(self, os)

    @staticmethod
    def add(*args):
        r"""
        add(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        add(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_add(*args)

    @staticmethod
    def sub(*args):
        r"""
        sub(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        sub(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        sub(a, b, r)

        Parameters
        ----------
        a: double
        b: double const *
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_sub(*args)

    @staticmethod
    def mul(*args):
        r"""
        mul(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        mul(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_mul(*args)

    @staticmethod
    def div(*args):
        r"""
        div(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double const *
        r: double *

        div(a, b, r)

        Parameters
        ----------
        a: double const *
        b: double
        r: double *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_div(*args)

    @staticmethod
    def equal(a, b):
        r"""
        equal(a, b) -> bool

        Parameters
        ----------
        a: double const *
        b: double const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_equal(a, b)

# Register vnl_matrix_fixedD_4_4 in _vnl_matrix_fixedPython:
_vnl_matrix_fixedPython.vnl_matrix_fixedD_4_4_swigregister(vnl_matrix_fixedD_4_4)
class vnl_matrix_fixedF_2_2(object):
    r"""Proxy of C++ vnl_matrix_fixedF_2_2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedF_2_2

    def __init__(self, *args):
        r"""
        __init__(self) -> vnl_matrix_fixedF_2_2
        __init__(self, rhs) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_2_2 const &

        __init__(self, arg0, arg1) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        __init__(self, value) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        value: float

        __init__(self, datablck) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        datablck: float const *

        __init__(self, rhs) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        rhs: vnl_matrixF const &

        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedF_2_2(*args))

    def size(self):
        r"""size(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_size(self)

    def rows(self):
        r"""rows(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_rows(self)

    def cols(self):
        r"""cols(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_cols(self)

    def columns(self):
        r"""columns(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_columns(self)

    def put(self, r, c, v):
        r"""
        put(self, r, c, v)

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: float const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_put(self, r, c, v)

    def get(self, r, c):
        r"""
        get(self, r, c) -> float

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_get(self, r, c)

    def __call__(self, *args):
        r"""
        __call__(self, r, c) -> float

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        __call__(self, r, c) -> float const &

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2___call__(self, *args)

    def fill(self, arg0):
        r"""
        fill(self, arg0) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        arg0: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_fill(self, arg0)

    def fill_diagonal(self, arg0):
        r"""
        fill_diagonal(self, arg0) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        arg0: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_fill_diagonal(self, arg0)

    def set_diagonal(self, arg0):
        r"""
        set_diagonal(self, arg0) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        arg0: vnl_vectorF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_set_diagonal(self, arg0)

    def copy_in(self, arg0):
        r"""
        copy_in(self, arg0) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        arg0: float const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_copy_in(self, arg0)

    def set(self, *args):
        r"""
        set(self, r, c, v) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: float const &

        set(self, d) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        d: float const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_set(self, *args)

    def copy_out(self, arg0):
        r"""
        copy_out(self, arg0)

        Parameters
        ----------
        arg0: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_copy_out(self, arg0)

    def inplace_transpose(self):
        r"""inplace_transpose(self) -> vnl_matrix_fixedF_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_inplace_transpose(self)

    def __itruediv__(self, *args):
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, *args):
        r"""
        __iadd__(self, s) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        s: float

        __iadd__(self, m) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        m: vnl_matrix_fixedF_2_2 const &

        __iadd__(self, m) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        m: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(self, s) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        s: float

        __isub__(self, m) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        m: vnl_matrix_fixedF_2_2 const &

        __isub__(self, m) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        m: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2___isub__(self, *args)

    def __neg__(self):
        r"""__neg__(self) -> vnl_matrix_fixedF_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2___neg__(self)

    def __imul__(self, *args):
        r"""
        __imul__(self, s) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        s: float

        __imul__(self, s) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        s: vnl_matrix_fixedF_2_2 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2___imul__(self, *args)

    def transpose(self):
        r"""transpose(self) -> vnl_matrix_fixedF_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_transpose(self)

    def conjugate_transpose(self):
        r"""conjugate_transpose(self) -> vnl_matrix_fixedF_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_conjugate_transpose(self)

    def update(self, *args):
        r"""
        update(self, arg0, top=0, left=0) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        arg0: vnl_matrixF const &
        top: unsigned int
        left: unsigned int

        update(self, m, top=0, left=0) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        m: vnl_matrix_fixedF_2_2 const &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_update(self, *args)

    def set_column(self, *args):
        r"""
        set_column(self, i, v) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        i: unsigned int
        v: float const *

        set_column(self, i, value) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        i: unsigned int
        value: float

        set_column(self, j, v) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        j: unsigned int
        v: vnl_vectorF const &

        set_column(self, j, v) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        j: unsigned int
        v: vnl_vector_fixed< float,2 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_set_column(self, *args)

    def set_columns(self, starting_column, M):
        r"""
        set_columns(self, starting_column, M) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        starting_column: unsigned int
        M: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_set_columns(self, starting_column, M)

    def set_row(self, *args):
        r"""
        set_row(self, i, v) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        i: unsigned int
        v: float const *

        set_row(self, i, value) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        i: unsigned int
        value: float

        set_row(self, i, arg1) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vectorF const &

        set_row(self, i, arg1) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vector_fixed< float,2 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_set_row(self, *args)

    def extract(self, *args):
        r"""
        extract(self, r, c, top=0, left=0) -> vnl_matrixF

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        top: unsigned int
        left: unsigned int

        extract(self, sub_matrix, top=0, left=0)

        Parameters
        ----------
        sub_matrix: vnl_matrixF &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_extract(self, *args)

    def get_row(self, row):
        r"""
        get_row(self, row) -> vnl_vector_fixed< float,2 >

        Parameters
        ----------
        row: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_get_row(self, row)

    def get_column(self, col):
        r"""
        get_column(self, col) -> vnl_vector_fixed< float,2 >

        Parameters
        ----------
        col: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_get_column(self, col)

    def get_rows(self, i):
        r"""
        get_rows(self, i) -> vnl_matrixF

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_get_rows(self, i)

    def get_columns(self, i):
        r"""
        get_columns(self, i) -> vnl_matrixF

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_get_columns(self, i)

    def get_n_rows(self, rowstart, n):
        r"""
        get_n_rows(self, rowstart, n) -> vnl_matrixF

        Parameters
        ----------
        rowstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_get_n_rows(self, rowstart, n)

    def get_n_columns(self, colstart, n):
        r"""
        get_n_columns(self, colstart, n) -> vnl_matrixF

        Parameters
        ----------
        colstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_get_n_columns(self, colstart, n)

    def get_diagonal(self):
        r"""get_diagonal(self) -> vnl_vectorF"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_get_diagonal(self)

    def flatten_row_major(self):
        r"""flatten_row_major(self) -> vnl_vector_fixed< float,4 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_flatten_row_major(self)

    def flatten_column_major(self):
        r"""flatten_column_major(self) -> vnl_vector_fixed< float,4 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_flatten_column_major(self)

    def set_identity(self):
        r"""set_identity(self) -> vnl_matrix_fixedF_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_set_identity(self)

    def flipud(self):
        r"""flipud(self) -> vnl_matrix_fixedF_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_flipud(self)

    def fliplr(self):
        r"""fliplr(self) -> vnl_matrix_fixedF_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_fliplr(self)

    def normalize_rows(self):
        r"""normalize_rows(self) -> vnl_matrix_fixedF_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_normalize_rows(self)

    def normalize_columns(self):
        r"""normalize_columns(self) -> vnl_matrix_fixedF_2_2"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_normalize_columns(self)

    def scale_row(self, row, value):
        r"""
        scale_row(self, row, value) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        row: unsigned int
        value: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_scale_row(self, row, value)

    def scale_column(self, col, value):
        r"""
        scale_column(self, col, value) -> vnl_matrix_fixedF_2_2

        Parameters
        ----------
        col: unsigned int
        value: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_scale_column(self, col, value)

    def swap(self, that):
        r"""
        swap(self, that)

        Parameters
        ----------
        that: vnl_matrix_fixedF_2_2 &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_swap(self, that)

    def array_one_norm(self):
        r"""array_one_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_array_one_norm(self)

    def array_two_norm(self):
        r"""array_two_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_array_two_norm(self)

    def array_inf_norm(self):
        r"""array_inf_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_array_inf_norm(self)

    def absolute_value_sum(self):
        r"""absolute_value_sum(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_absolute_value_sum(self)

    def absolute_value_max(self):
        r"""absolute_value_max(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_absolute_value_max(self)

    def operator_one_norm(self):
        r"""operator_one_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_operator_one_norm(self)

    def operator_inf_norm(self):
        r"""operator_inf_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_operator_inf_norm(self)

    def frobenius_norm(self):
        r"""frobenius_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_frobenius_norm(self)

    def fro_norm(self):
        r"""fro_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_fro_norm(self)

    def rms(self):
        r"""rms(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_rms(self)

    def min_value(self):
        r"""min_value(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_min_value(self)

    def max_value(self):
        r"""max_value(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_max_value(self)

    def arg_min(self):
        r"""arg_min(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_arg_min(self)

    def arg_max(self):
        r"""arg_max(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_arg_max(self)

    def mean(self):
        r"""mean(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_mean(self)

    def empty(self):
        r"""empty(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_empty(self)

    def is_identity(self, *args):
        r"""
        is_identity(self) -> bool
        is_identity(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_is_identity(self, *args)

    def is_zero(self, *args):
        r"""
        is_zero(self) -> bool
        is_zero(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_is_zero(self, *args)

    def is_equal(self, rhs, tol):
        r"""
        is_equal(self, rhs, tol) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_2_2 const &
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_is_equal(self, rhs, tol)

    def is_finite(self):
        r"""is_finite(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_is_finite(self)

    def has_nans(self):
        r"""has_nans(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_has_nans(self)

    def assert_size(self, arg0, arg1):
        r"""
        assert_size(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_assert_size(self, arg0, arg1)

    def assert_finite(self):
        r"""assert_finite(self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_assert_finite(self)

    def read_ascii(self, s):
        r"""
        read_ascii(self, s) -> bool

        Parameters
        ----------
        s: std::basic_istream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_read_ascii(self, s)

    def data_block(self, *args):
        r"""
        data_block(self) -> float const
        data_block(self) -> float *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_data_block(self, *args)

    def as_matrix(self):
        r"""as_matrix(self) -> vnl_matrixF"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_as_matrix(self)

    def begin(self, *args):
        r"""
        begin(self) -> float
        begin(self) -> float const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> float
        end(self) -> float const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_end(self, *args)

    def operator_eq(self, rhs):
        r"""
        operator_eq(self, rhs) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_2_2 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_operator_eq(self, rhs)

    def __eq__(self, *args):
        r"""
        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedF_2_2 const &

        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedF_2_2 const &

        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2___ne__(self, *args)

    def _print(self, os):
        r"""
        _print(self, os)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2__print(self, os)

    @staticmethod
    def add(*args):
        r"""
        add(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        add(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_add(*args)

    @staticmethod
    def sub(*args):
        r"""
        sub(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        sub(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        sub(a, b, r)

        Parameters
        ----------
        a: float
        b: float const *
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_sub(*args)

    @staticmethod
    def mul(*args):
        r"""
        mul(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        mul(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_mul(*args)

    @staticmethod
    def div(*args):
        r"""
        div(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        div(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_div(*args)

    @staticmethod
    def equal(a, b):
        r"""
        equal(a, b) -> bool

        Parameters
        ----------
        a: float const *
        b: float const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_equal(a, b)

# Register vnl_matrix_fixedF_2_2 in _vnl_matrix_fixedPython:
_vnl_matrix_fixedPython.vnl_matrix_fixedF_2_2_swigregister(vnl_matrix_fixedF_2_2)
class vnl_matrix_fixedF_2_3(object):
    r"""Proxy of C++ vnl_matrix_fixedF_2_3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedF_2_3

    def __init__(self, *args):
        r"""
        __init__(self) -> vnl_matrix_fixedF_2_3
        __init__(self, rhs) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_2_3 const &

        __init__(self, arg0, arg1) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        __init__(self, value) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        value: float

        __init__(self, datablck) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        datablck: float const *

        __init__(self, rhs) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        rhs: vnl_matrixF const &

        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedF_2_3(*args))

    def size(self):
        r"""size(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_size(self)

    def rows(self):
        r"""rows(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_rows(self)

    def cols(self):
        r"""cols(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_cols(self)

    def columns(self):
        r"""columns(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_columns(self)

    def put(self, r, c, v):
        r"""
        put(self, r, c, v)

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: float const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_put(self, r, c, v)

    def get(self, r, c):
        r"""
        get(self, r, c) -> float

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_get(self, r, c)

    def __call__(self, *args):
        r"""
        __call__(self, r, c) -> float

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        __call__(self, r, c) -> float const &

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3___call__(self, *args)

    def fill(self, arg0):
        r"""
        fill(self, arg0) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        arg0: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_fill(self, arg0)

    def fill_diagonal(self, arg0):
        r"""
        fill_diagonal(self, arg0) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        arg0: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_fill_diagonal(self, arg0)

    def set_diagonal(self, arg0):
        r"""
        set_diagonal(self, arg0) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        arg0: vnl_vectorF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_set_diagonal(self, arg0)

    def copy_in(self, arg0):
        r"""
        copy_in(self, arg0) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        arg0: float const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_copy_in(self, arg0)

    def set(self, *args):
        r"""
        set(self, r, c, v) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: float const &

        set(self, d) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        d: float const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_set(self, *args)

    def copy_out(self, arg0):
        r"""
        copy_out(self, arg0)

        Parameters
        ----------
        arg0: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_copy_out(self, arg0)

    def inplace_transpose(self):
        r"""inplace_transpose(self) -> vnl_matrix_fixedF_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_inplace_transpose(self)

    def __itruediv__(self, *args):
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, *args):
        r"""
        __iadd__(self, s) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        s: float

        __iadd__(self, m) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        m: vnl_matrix_fixedF_2_3 const &

        __iadd__(self, m) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        m: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(self, s) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        s: float

        __isub__(self, m) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        m: vnl_matrix_fixedF_2_3 const &

        __isub__(self, m) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        m: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3___isub__(self, *args)

    def __neg__(self):
        r"""__neg__(self) -> vnl_matrix_fixedF_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3___neg__(self)

    def __imul__(self, *args):
        r"""
        __imul__(self, s) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        s: float

        __imul__(self, s) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        s: vnl_matrix_fixedF_3_3 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3___imul__(self, *args)

    def transpose(self):
        r"""transpose(self) -> vnl_matrix_fixed< float,3,2 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_transpose(self)

    def conjugate_transpose(self):
        r"""conjugate_transpose(self) -> vnl_matrix_fixed< float,3,2 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_conjugate_transpose(self)

    def update(self, *args):
        r"""
        update(self, arg0, top=0, left=0) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        arg0: vnl_matrixF const &
        top: unsigned int
        left: unsigned int

        update(self, m, top=0, left=0) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        m: vnl_matrix_fixedF_2_3 const &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_update(self, *args)

    def set_column(self, *args):
        r"""
        set_column(self, i, v) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        i: unsigned int
        v: float const *

        set_column(self, i, value) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        i: unsigned int
        value: float

        set_column(self, j, v) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        j: unsigned int
        v: vnl_vectorF const &

        set_column(self, j, v) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        j: unsigned int
        v: vnl_vector_fixed< float,2 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_set_column(self, *args)

    def set_columns(self, starting_column, M):
        r"""
        set_columns(self, starting_column, M) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        starting_column: unsigned int
        M: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_set_columns(self, starting_column, M)

    def set_row(self, *args):
        r"""
        set_row(self, i, v) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        i: unsigned int
        v: float const *

        set_row(self, i, value) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        i: unsigned int
        value: float

        set_row(self, i, arg1) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vectorF const &

        set_row(self, i, arg1) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vector_fixed< float,3 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_set_row(self, *args)

    def extract(self, *args):
        r"""
        extract(self, r, c, top=0, left=0) -> vnl_matrixF

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        top: unsigned int
        left: unsigned int

        extract(self, sub_matrix, top=0, left=0)

        Parameters
        ----------
        sub_matrix: vnl_matrixF &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_extract(self, *args)

    def get_row(self, row):
        r"""
        get_row(self, row) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        row: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_get_row(self, row)

    def get_column(self, col):
        r"""
        get_column(self, col) -> vnl_vector_fixed< float,2 >

        Parameters
        ----------
        col: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_get_column(self, col)

    def get_rows(self, i):
        r"""
        get_rows(self, i) -> vnl_matrixF

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_get_rows(self, i)

    def get_columns(self, i):
        r"""
        get_columns(self, i) -> vnl_matrixF

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_get_columns(self, i)

    def get_n_rows(self, rowstart, n):
        r"""
        get_n_rows(self, rowstart, n) -> vnl_matrixF

        Parameters
        ----------
        rowstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_get_n_rows(self, rowstart, n)

    def get_n_columns(self, colstart, n):
        r"""
        get_n_columns(self, colstart, n) -> vnl_matrixF

        Parameters
        ----------
        colstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_get_n_columns(self, colstart, n)

    def get_diagonal(self):
        r"""get_diagonal(self) -> vnl_vectorF"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_get_diagonal(self)

    def flatten_row_major(self):
        r"""flatten_row_major(self) -> vnl_vector_fixed< float,6 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_flatten_row_major(self)

    def flatten_column_major(self):
        r"""flatten_column_major(self) -> vnl_vector_fixed< float,6 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_flatten_column_major(self)

    def set_identity(self):
        r"""set_identity(self) -> vnl_matrix_fixedF_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_set_identity(self)

    def flipud(self):
        r"""flipud(self) -> vnl_matrix_fixedF_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_flipud(self)

    def fliplr(self):
        r"""fliplr(self) -> vnl_matrix_fixedF_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_fliplr(self)

    def normalize_rows(self):
        r"""normalize_rows(self) -> vnl_matrix_fixedF_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_normalize_rows(self)

    def normalize_columns(self):
        r"""normalize_columns(self) -> vnl_matrix_fixedF_2_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_normalize_columns(self)

    def scale_row(self, row, value):
        r"""
        scale_row(self, row, value) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        row: unsigned int
        value: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_scale_row(self, row, value)

    def scale_column(self, col, value):
        r"""
        scale_column(self, col, value) -> vnl_matrix_fixedF_2_3

        Parameters
        ----------
        col: unsigned int
        value: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_scale_column(self, col, value)

    def swap(self, that):
        r"""
        swap(self, that)

        Parameters
        ----------
        that: vnl_matrix_fixedF_2_3 &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_swap(self, that)

    def array_one_norm(self):
        r"""array_one_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_array_one_norm(self)

    def array_two_norm(self):
        r"""array_two_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_array_two_norm(self)

    def array_inf_norm(self):
        r"""array_inf_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_array_inf_norm(self)

    def absolute_value_sum(self):
        r"""absolute_value_sum(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_absolute_value_sum(self)

    def absolute_value_max(self):
        r"""absolute_value_max(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_absolute_value_max(self)

    def operator_one_norm(self):
        r"""operator_one_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_operator_one_norm(self)

    def operator_inf_norm(self):
        r"""operator_inf_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_operator_inf_norm(self)

    def frobenius_norm(self):
        r"""frobenius_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_frobenius_norm(self)

    def fro_norm(self):
        r"""fro_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_fro_norm(self)

    def rms(self):
        r"""rms(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_rms(self)

    def min_value(self):
        r"""min_value(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_min_value(self)

    def max_value(self):
        r"""max_value(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_max_value(self)

    def arg_min(self):
        r"""arg_min(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_arg_min(self)

    def arg_max(self):
        r"""arg_max(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_arg_max(self)

    def mean(self):
        r"""mean(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_mean(self)

    def empty(self):
        r"""empty(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_empty(self)

    def is_identity(self, *args):
        r"""
        is_identity(self) -> bool
        is_identity(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_is_identity(self, *args)

    def is_zero(self, *args):
        r"""
        is_zero(self) -> bool
        is_zero(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_is_zero(self, *args)

    def is_equal(self, rhs, tol):
        r"""
        is_equal(self, rhs, tol) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_2_3 const &
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_is_equal(self, rhs, tol)

    def is_finite(self):
        r"""is_finite(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_is_finite(self)

    def has_nans(self):
        r"""has_nans(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_has_nans(self)

    def assert_size(self, arg0, arg1):
        r"""
        assert_size(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_assert_size(self, arg0, arg1)

    def assert_finite(self):
        r"""assert_finite(self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_assert_finite(self)

    def read_ascii(self, s):
        r"""
        read_ascii(self, s) -> bool

        Parameters
        ----------
        s: std::basic_istream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_read_ascii(self, s)

    def data_block(self, *args):
        r"""
        data_block(self) -> float const
        data_block(self) -> float *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_data_block(self, *args)

    def as_matrix(self):
        r"""as_matrix(self) -> vnl_matrixF"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_as_matrix(self)

    def begin(self, *args):
        r"""
        begin(self) -> float
        begin(self) -> float const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> float
        end(self) -> float const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_end(self, *args)

    def operator_eq(self, rhs):
        r"""
        operator_eq(self, rhs) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_2_3 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_operator_eq(self, rhs)

    def __eq__(self, *args):
        r"""
        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedF_2_3 const &

        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedF_2_3 const &

        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3___ne__(self, *args)

    def _print(self, os):
        r"""
        _print(self, os)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3__print(self, os)

    @staticmethod
    def add(*args):
        r"""
        add(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        add(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_add(*args)

    @staticmethod
    def sub(*args):
        r"""
        sub(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        sub(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        sub(a, b, r)

        Parameters
        ----------
        a: float
        b: float const *
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_sub(*args)

    @staticmethod
    def mul(*args):
        r"""
        mul(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        mul(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_mul(*args)

    @staticmethod
    def div(*args):
        r"""
        div(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        div(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_div(*args)

    @staticmethod
    def equal(a, b):
        r"""
        equal(a, b) -> bool

        Parameters
        ----------
        a: float const *
        b: float const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_equal(a, b)

# Register vnl_matrix_fixedF_2_3 in _vnl_matrix_fixedPython:
_vnl_matrix_fixedPython.vnl_matrix_fixedF_2_3_swigregister(vnl_matrix_fixedF_2_3)
class vnl_matrix_fixedF_2_6(object):
    r"""Proxy of C++ vnl_matrix_fixedF_2_6 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedF_2_6

    def __init__(self, *args):
        r"""
        __init__(self) -> vnl_matrix_fixedF_2_6
        __init__(self, rhs) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_2_6 const &

        __init__(self, arg0, arg1) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        __init__(self, value) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        value: float

        __init__(self, datablck) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        datablck: float const *

        __init__(self, rhs) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        rhs: vnl_matrixF const &

        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedF_2_6(*args))

    def size(self):
        r"""size(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_size(self)

    def rows(self):
        r"""rows(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_rows(self)

    def cols(self):
        r"""cols(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_cols(self)

    def columns(self):
        r"""columns(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_columns(self)

    def put(self, r, c, v):
        r"""
        put(self, r, c, v)

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: float const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_put(self, r, c, v)

    def get(self, r, c):
        r"""
        get(self, r, c) -> float

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_get(self, r, c)

    def __call__(self, *args):
        r"""
        __call__(self, r, c) -> float

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        __call__(self, r, c) -> float const &

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6___call__(self, *args)

    def fill(self, arg0):
        r"""
        fill(self, arg0) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        arg0: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_fill(self, arg0)

    def fill_diagonal(self, arg0):
        r"""
        fill_diagonal(self, arg0) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        arg0: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_fill_diagonal(self, arg0)

    def set_diagonal(self, arg0):
        r"""
        set_diagonal(self, arg0) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        arg0: vnl_vectorF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_set_diagonal(self, arg0)

    def copy_in(self, arg0):
        r"""
        copy_in(self, arg0) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        arg0: float const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_copy_in(self, arg0)

    def set(self, *args):
        r"""
        set(self, r, c, v) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: float const &

        set(self, d) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        d: float const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_set(self, *args)

    def copy_out(self, arg0):
        r"""
        copy_out(self, arg0)

        Parameters
        ----------
        arg0: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_copy_out(self, arg0)

    def inplace_transpose(self):
        r"""inplace_transpose(self) -> vnl_matrix_fixedF_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_inplace_transpose(self)

    def __itruediv__(self, *args):
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, *args):
        r"""
        __iadd__(self, s) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        s: float

        __iadd__(self, m) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        m: vnl_matrix_fixedF_2_6 const &

        __iadd__(self, m) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        m: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(self, s) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        s: float

        __isub__(self, m) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        m: vnl_matrix_fixedF_2_6 const &

        __isub__(self, m) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        m: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6___isub__(self, *args)

    def __neg__(self):
        r"""__neg__(self) -> vnl_matrix_fixedF_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6___neg__(self)

    def __imul__(self, *args):
        r"""
        __imul__(self, s) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        s: float

        __imul__(self, s) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        s: vnl_matrix_fixed< float,6,6 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6___imul__(self, *args)

    def transpose(self):
        r"""transpose(self) -> vnl_matrix_fixed< float,6,2 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_transpose(self)

    def conjugate_transpose(self):
        r"""conjugate_transpose(self) -> vnl_matrix_fixed< float,6,2 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_conjugate_transpose(self)

    def update(self, *args):
        r"""
        update(self, arg0, top=0, left=0) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        arg0: vnl_matrixF const &
        top: unsigned int
        left: unsigned int

        update(self, m, top=0, left=0) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        m: vnl_matrix_fixedF_2_6 const &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_update(self, *args)

    def set_column(self, *args):
        r"""
        set_column(self, i, v) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        i: unsigned int
        v: float const *

        set_column(self, i, value) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        i: unsigned int
        value: float

        set_column(self, j, v) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        j: unsigned int
        v: vnl_vectorF const &

        set_column(self, j, v) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        j: unsigned int
        v: vnl_vector_fixed< float,2 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_set_column(self, *args)

    def set_columns(self, starting_column, M):
        r"""
        set_columns(self, starting_column, M) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        starting_column: unsigned int
        M: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_set_columns(self, starting_column, M)

    def set_row(self, *args):
        r"""
        set_row(self, i, v) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        i: unsigned int
        v: float const *

        set_row(self, i, value) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        i: unsigned int
        value: float

        set_row(self, i, arg1) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vectorF const &

        set_row(self, i, arg1) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vector_fixed< float,6 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_set_row(self, *args)

    def extract(self, *args):
        r"""
        extract(self, r, c, top=0, left=0) -> vnl_matrixF

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        top: unsigned int
        left: unsigned int

        extract(self, sub_matrix, top=0, left=0)

        Parameters
        ----------
        sub_matrix: vnl_matrixF &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_extract(self, *args)

    def get_row(self, row):
        r"""
        get_row(self, row) -> vnl_vector_fixed< float,6 >

        Parameters
        ----------
        row: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_get_row(self, row)

    def get_column(self, col):
        r"""
        get_column(self, col) -> vnl_vector_fixed< float,2 >

        Parameters
        ----------
        col: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_get_column(self, col)

    def get_rows(self, i):
        r"""
        get_rows(self, i) -> vnl_matrixF

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_get_rows(self, i)

    def get_columns(self, i):
        r"""
        get_columns(self, i) -> vnl_matrixF

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_get_columns(self, i)

    def get_n_rows(self, rowstart, n):
        r"""
        get_n_rows(self, rowstart, n) -> vnl_matrixF

        Parameters
        ----------
        rowstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_get_n_rows(self, rowstart, n)

    def get_n_columns(self, colstart, n):
        r"""
        get_n_columns(self, colstart, n) -> vnl_matrixF

        Parameters
        ----------
        colstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_get_n_columns(self, colstart, n)

    def get_diagonal(self):
        r"""get_diagonal(self) -> vnl_vectorF"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_get_diagonal(self)

    def flatten_row_major(self):
        r"""flatten_row_major(self) -> vnl_vector_fixed< float,12 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_flatten_row_major(self)

    def flatten_column_major(self):
        r"""flatten_column_major(self) -> vnl_vector_fixed< float,12 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_flatten_column_major(self)

    def set_identity(self):
        r"""set_identity(self) -> vnl_matrix_fixedF_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_set_identity(self)

    def flipud(self):
        r"""flipud(self) -> vnl_matrix_fixedF_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_flipud(self)

    def fliplr(self):
        r"""fliplr(self) -> vnl_matrix_fixedF_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_fliplr(self)

    def normalize_rows(self):
        r"""normalize_rows(self) -> vnl_matrix_fixedF_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_normalize_rows(self)

    def normalize_columns(self):
        r"""normalize_columns(self) -> vnl_matrix_fixedF_2_6"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_normalize_columns(self)

    def scale_row(self, row, value):
        r"""
        scale_row(self, row, value) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        row: unsigned int
        value: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_scale_row(self, row, value)

    def scale_column(self, col, value):
        r"""
        scale_column(self, col, value) -> vnl_matrix_fixedF_2_6

        Parameters
        ----------
        col: unsigned int
        value: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_scale_column(self, col, value)

    def swap(self, that):
        r"""
        swap(self, that)

        Parameters
        ----------
        that: vnl_matrix_fixedF_2_6 &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_swap(self, that)

    def array_one_norm(self):
        r"""array_one_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_array_one_norm(self)

    def array_two_norm(self):
        r"""array_two_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_array_two_norm(self)

    def array_inf_norm(self):
        r"""array_inf_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_array_inf_norm(self)

    def absolute_value_sum(self):
        r"""absolute_value_sum(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_absolute_value_sum(self)

    def absolute_value_max(self):
        r"""absolute_value_max(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_absolute_value_max(self)

    def operator_one_norm(self):
        r"""operator_one_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_operator_one_norm(self)

    def operator_inf_norm(self):
        r"""operator_inf_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_operator_inf_norm(self)

    def frobenius_norm(self):
        r"""frobenius_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_frobenius_norm(self)

    def fro_norm(self):
        r"""fro_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_fro_norm(self)

    def rms(self):
        r"""rms(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_rms(self)

    def min_value(self):
        r"""min_value(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_min_value(self)

    def max_value(self):
        r"""max_value(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_max_value(self)

    def arg_min(self):
        r"""arg_min(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_arg_min(self)

    def arg_max(self):
        r"""arg_max(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_arg_max(self)

    def mean(self):
        r"""mean(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_mean(self)

    def empty(self):
        r"""empty(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_empty(self)

    def is_identity(self, *args):
        r"""
        is_identity(self) -> bool
        is_identity(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_is_identity(self, *args)

    def is_zero(self, *args):
        r"""
        is_zero(self) -> bool
        is_zero(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_is_zero(self, *args)

    def is_equal(self, rhs, tol):
        r"""
        is_equal(self, rhs, tol) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_2_6 const &
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_is_equal(self, rhs, tol)

    def is_finite(self):
        r"""is_finite(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_is_finite(self)

    def has_nans(self):
        r"""has_nans(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_has_nans(self)

    def assert_size(self, arg0, arg1):
        r"""
        assert_size(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_assert_size(self, arg0, arg1)

    def assert_finite(self):
        r"""assert_finite(self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_assert_finite(self)

    def read_ascii(self, s):
        r"""
        read_ascii(self, s) -> bool

        Parameters
        ----------
        s: std::basic_istream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_read_ascii(self, s)

    def data_block(self, *args):
        r"""
        data_block(self) -> float const
        data_block(self) -> float *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_data_block(self, *args)

    def as_matrix(self):
        r"""as_matrix(self) -> vnl_matrixF"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_as_matrix(self)

    def begin(self, *args):
        r"""
        begin(self) -> float
        begin(self) -> float const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> float
        end(self) -> float const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_end(self, *args)

    def operator_eq(self, rhs):
        r"""
        operator_eq(self, rhs) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_2_6 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_operator_eq(self, rhs)

    def __eq__(self, *args):
        r"""
        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedF_2_6 const &

        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedF_2_6 const &

        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6___ne__(self, *args)

    def _print(self, os):
        r"""
        _print(self, os)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6__print(self, os)

    @staticmethod
    def add(*args):
        r"""
        add(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        add(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_add(*args)

    @staticmethod
    def sub(*args):
        r"""
        sub(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        sub(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        sub(a, b, r)

        Parameters
        ----------
        a: float
        b: float const *
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_sub(*args)

    @staticmethod
    def mul(*args):
        r"""
        mul(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        mul(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_mul(*args)

    @staticmethod
    def div(*args):
        r"""
        div(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        div(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_div(*args)

    @staticmethod
    def equal(a, b):
        r"""
        equal(a, b) -> bool

        Parameters
        ----------
        a: float const *
        b: float const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_equal(a, b)

# Register vnl_matrix_fixedF_2_6 in _vnl_matrix_fixedPython:
_vnl_matrix_fixedPython.vnl_matrix_fixedF_2_6_swigregister(vnl_matrix_fixedF_2_6)
class vnl_matrix_fixedF_3_12(object):
    r"""Proxy of C++ vnl_matrix_fixedF_3_12 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedF_3_12

    def __init__(self, *args):
        r"""
        __init__(self) -> vnl_matrix_fixedF_3_12
        __init__(self, rhs) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_3_12 const &

        __init__(self, arg0, arg1) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        __init__(self, value) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        value: float

        __init__(self, datablck) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        datablck: float const *

        __init__(self, rhs) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        rhs: vnl_matrixF const &

        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedF_3_12(*args))

    def size(self):
        r"""size(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_size(self)

    def rows(self):
        r"""rows(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_rows(self)

    def cols(self):
        r"""cols(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_cols(self)

    def columns(self):
        r"""columns(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_columns(self)

    def put(self, r, c, v):
        r"""
        put(self, r, c, v)

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: float const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_put(self, r, c, v)

    def get(self, r, c):
        r"""
        get(self, r, c) -> float

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_get(self, r, c)

    def __call__(self, *args):
        r"""
        __call__(self, r, c) -> float

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        __call__(self, r, c) -> float const &

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12___call__(self, *args)

    def fill(self, arg0):
        r"""
        fill(self, arg0) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        arg0: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_fill(self, arg0)

    def fill_diagonal(self, arg0):
        r"""
        fill_diagonal(self, arg0) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        arg0: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_fill_diagonal(self, arg0)

    def set_diagonal(self, arg0):
        r"""
        set_diagonal(self, arg0) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        arg0: vnl_vectorF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_set_diagonal(self, arg0)

    def copy_in(self, arg0):
        r"""
        copy_in(self, arg0) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        arg0: float const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_copy_in(self, arg0)

    def set(self, *args):
        r"""
        set(self, r, c, v) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: float const &

        set(self, d) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        d: float const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_set(self, *args)

    def copy_out(self, arg0):
        r"""
        copy_out(self, arg0)

        Parameters
        ----------
        arg0: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_copy_out(self, arg0)

    def inplace_transpose(self):
        r"""inplace_transpose(self) -> vnl_matrix_fixedF_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_inplace_transpose(self)

    def __itruediv__(self, *args):
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, *args):
        r"""
        __iadd__(self, s) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        s: float

        __iadd__(self, m) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        m: vnl_matrix_fixedF_3_12 const &

        __iadd__(self, m) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        m: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(self, s) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        s: float

        __isub__(self, m) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        m: vnl_matrix_fixedF_3_12 const &

        __isub__(self, m) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        m: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12___isub__(self, *args)

    def __neg__(self):
        r"""__neg__(self) -> vnl_matrix_fixedF_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12___neg__(self)

    def __imul__(self, *args):
        r"""
        __imul__(self, s) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        s: float

        __imul__(self, s) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        s: vnl_matrix_fixed< float,12,12 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12___imul__(self, *args)

    def transpose(self):
        r"""transpose(self) -> vnl_matrix_fixed< float,12,3 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_transpose(self)

    def conjugate_transpose(self):
        r"""conjugate_transpose(self) -> vnl_matrix_fixed< float,12,3 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_conjugate_transpose(self)

    def update(self, *args):
        r"""
        update(self, arg0, top=0, left=0) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        arg0: vnl_matrixF const &
        top: unsigned int
        left: unsigned int

        update(self, m, top=0, left=0) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        m: vnl_matrix_fixedF_3_12 const &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_update(self, *args)

    def set_column(self, *args):
        r"""
        set_column(self, i, v) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        i: unsigned int
        v: float const *

        set_column(self, i, value) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        i: unsigned int
        value: float

        set_column(self, j, v) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        j: unsigned int
        v: vnl_vectorF const &

        set_column(self, j, v) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        j: unsigned int
        v: vnl_vector_fixed< float,3 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_set_column(self, *args)

    def set_columns(self, starting_column, M):
        r"""
        set_columns(self, starting_column, M) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        starting_column: unsigned int
        M: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_set_columns(self, starting_column, M)

    def set_row(self, *args):
        r"""
        set_row(self, i, v) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        i: unsigned int
        v: float const *

        set_row(self, i, value) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        i: unsigned int
        value: float

        set_row(self, i, arg1) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vectorF const &

        set_row(self, i, arg1) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vector_fixed< float,12 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_set_row(self, *args)

    def extract(self, *args):
        r"""
        extract(self, r, c, top=0, left=0) -> vnl_matrixF

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        top: unsigned int
        left: unsigned int

        extract(self, sub_matrix, top=0, left=0)

        Parameters
        ----------
        sub_matrix: vnl_matrixF &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_extract(self, *args)

    def get_row(self, row):
        r"""
        get_row(self, row) -> vnl_vector_fixed< float,12 >

        Parameters
        ----------
        row: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_get_row(self, row)

    def get_column(self, col):
        r"""
        get_column(self, col) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        col: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_get_column(self, col)

    def get_rows(self, i):
        r"""
        get_rows(self, i) -> vnl_matrixF

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_get_rows(self, i)

    def get_columns(self, i):
        r"""
        get_columns(self, i) -> vnl_matrixF

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_get_columns(self, i)

    def get_n_rows(self, rowstart, n):
        r"""
        get_n_rows(self, rowstart, n) -> vnl_matrixF

        Parameters
        ----------
        rowstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_get_n_rows(self, rowstart, n)

    def get_n_columns(self, colstart, n):
        r"""
        get_n_columns(self, colstart, n) -> vnl_matrixF

        Parameters
        ----------
        colstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_get_n_columns(self, colstart, n)

    def get_diagonal(self):
        r"""get_diagonal(self) -> vnl_vectorF"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_get_diagonal(self)

    def flatten_row_major(self):
        r"""flatten_row_major(self) -> vnl_vector_fixed< float,36 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_flatten_row_major(self)

    def flatten_column_major(self):
        r"""flatten_column_major(self) -> vnl_vector_fixed< float,36 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_flatten_column_major(self)

    def set_identity(self):
        r"""set_identity(self) -> vnl_matrix_fixedF_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_set_identity(self)

    def flipud(self):
        r"""flipud(self) -> vnl_matrix_fixedF_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_flipud(self)

    def fliplr(self):
        r"""fliplr(self) -> vnl_matrix_fixedF_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_fliplr(self)

    def normalize_rows(self):
        r"""normalize_rows(self) -> vnl_matrix_fixedF_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_normalize_rows(self)

    def normalize_columns(self):
        r"""normalize_columns(self) -> vnl_matrix_fixedF_3_12"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_normalize_columns(self)

    def scale_row(self, row, value):
        r"""
        scale_row(self, row, value) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        row: unsigned int
        value: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_scale_row(self, row, value)

    def scale_column(self, col, value):
        r"""
        scale_column(self, col, value) -> vnl_matrix_fixedF_3_12

        Parameters
        ----------
        col: unsigned int
        value: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_scale_column(self, col, value)

    def swap(self, that):
        r"""
        swap(self, that)

        Parameters
        ----------
        that: vnl_matrix_fixedF_3_12 &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_swap(self, that)

    def array_one_norm(self):
        r"""array_one_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_array_one_norm(self)

    def array_two_norm(self):
        r"""array_two_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_array_two_norm(self)

    def array_inf_norm(self):
        r"""array_inf_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_array_inf_norm(self)

    def absolute_value_sum(self):
        r"""absolute_value_sum(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_absolute_value_sum(self)

    def absolute_value_max(self):
        r"""absolute_value_max(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_absolute_value_max(self)

    def operator_one_norm(self):
        r"""operator_one_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_operator_one_norm(self)

    def operator_inf_norm(self):
        r"""operator_inf_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_operator_inf_norm(self)

    def frobenius_norm(self):
        r"""frobenius_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_frobenius_norm(self)

    def fro_norm(self):
        r"""fro_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_fro_norm(self)

    def rms(self):
        r"""rms(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_rms(self)

    def min_value(self):
        r"""min_value(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_min_value(self)

    def max_value(self):
        r"""max_value(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_max_value(self)

    def arg_min(self):
        r"""arg_min(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_arg_min(self)

    def arg_max(self):
        r"""arg_max(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_arg_max(self)

    def mean(self):
        r"""mean(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_mean(self)

    def empty(self):
        r"""empty(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_empty(self)

    def is_identity(self, *args):
        r"""
        is_identity(self) -> bool
        is_identity(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_is_identity(self, *args)

    def is_zero(self, *args):
        r"""
        is_zero(self) -> bool
        is_zero(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_is_zero(self, *args)

    def is_equal(self, rhs, tol):
        r"""
        is_equal(self, rhs, tol) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_3_12 const &
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_is_equal(self, rhs, tol)

    def is_finite(self):
        r"""is_finite(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_is_finite(self)

    def has_nans(self):
        r"""has_nans(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_has_nans(self)

    def assert_size(self, arg0, arg1):
        r"""
        assert_size(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_assert_size(self, arg0, arg1)

    def assert_finite(self):
        r"""assert_finite(self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_assert_finite(self)

    def read_ascii(self, s):
        r"""
        read_ascii(self, s) -> bool

        Parameters
        ----------
        s: std::basic_istream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_read_ascii(self, s)

    def data_block(self, *args):
        r"""
        data_block(self) -> float const
        data_block(self) -> float *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_data_block(self, *args)

    def as_matrix(self):
        r"""as_matrix(self) -> vnl_matrixF"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_as_matrix(self)

    def begin(self, *args):
        r"""
        begin(self) -> float
        begin(self) -> float const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> float
        end(self) -> float const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_end(self, *args)

    def operator_eq(self, rhs):
        r"""
        operator_eq(self, rhs) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_3_12 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_operator_eq(self, rhs)

    def __eq__(self, *args):
        r"""
        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedF_3_12 const &

        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedF_3_12 const &

        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12___ne__(self, *args)

    def _print(self, os):
        r"""
        _print(self, os)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12__print(self, os)

    @staticmethod
    def add(*args):
        r"""
        add(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        add(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_add(*args)

    @staticmethod
    def sub(*args):
        r"""
        sub(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        sub(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        sub(a, b, r)

        Parameters
        ----------
        a: float
        b: float const *
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_sub(*args)

    @staticmethod
    def mul(*args):
        r"""
        mul(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        mul(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_mul(*args)

    @staticmethod
    def div(*args):
        r"""
        div(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        div(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_div(*args)

    @staticmethod
    def equal(a, b):
        r"""
        equal(a, b) -> bool

        Parameters
        ----------
        a: float const *
        b: float const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_equal(a, b)

# Register vnl_matrix_fixedF_3_12 in _vnl_matrix_fixedPython:
_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_12_swigregister(vnl_matrix_fixedF_3_12)
class vnl_matrix_fixedF_3_3(object):
    r"""Proxy of C++ vnl_matrix_fixedF_3_3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedF_3_3

    def __init__(self, *args):
        r"""
        __init__(self) -> vnl_matrix_fixedF_3_3
        __init__(self, rhs) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_3_3 const &

        __init__(self, arg0, arg1) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        __init__(self, value) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        value: float

        __init__(self, datablck) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        datablck: float const *

        __init__(self, rhs) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        rhs: vnl_matrixF const &

        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedF_3_3(*args))

    def size(self):
        r"""size(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_size(self)

    def rows(self):
        r"""rows(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_rows(self)

    def cols(self):
        r"""cols(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_cols(self)

    def columns(self):
        r"""columns(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_columns(self)

    def put(self, r, c, v):
        r"""
        put(self, r, c, v)

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: float const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_put(self, r, c, v)

    def get(self, r, c):
        r"""
        get(self, r, c) -> float

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_get(self, r, c)

    def __call__(self, *args):
        r"""
        __call__(self, r, c) -> float

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        __call__(self, r, c) -> float const &

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3___call__(self, *args)

    def fill(self, arg0):
        r"""
        fill(self, arg0) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        arg0: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_fill(self, arg0)

    def fill_diagonal(self, arg0):
        r"""
        fill_diagonal(self, arg0) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        arg0: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_fill_diagonal(self, arg0)

    def set_diagonal(self, arg0):
        r"""
        set_diagonal(self, arg0) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        arg0: vnl_vectorF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_set_diagonal(self, arg0)

    def copy_in(self, arg0):
        r"""
        copy_in(self, arg0) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        arg0: float const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_copy_in(self, arg0)

    def set(self, *args):
        r"""
        set(self, r, c, v) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: float const &

        set(self, d) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        d: float const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_set(self, *args)

    def copy_out(self, arg0):
        r"""
        copy_out(self, arg0)

        Parameters
        ----------
        arg0: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_copy_out(self, arg0)

    def inplace_transpose(self):
        r"""inplace_transpose(self) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_inplace_transpose(self)

    def __itruediv__(self, *args):
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, *args):
        r"""
        __iadd__(self, s) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        s: float

        __iadd__(self, m) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        m: vnl_matrix_fixedF_3_3 const &

        __iadd__(self, m) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        m: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(self, s) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        s: float

        __isub__(self, m) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        m: vnl_matrix_fixedF_3_3 const &

        __isub__(self, m) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        m: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3___isub__(self, *args)

    def __neg__(self):
        r"""__neg__(self) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3___neg__(self)

    def __imul__(self, *args):
        r"""
        __imul__(self, s) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        s: float

        __imul__(self, s) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        s: vnl_matrix_fixedF_3_3 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3___imul__(self, *args)

    def transpose(self):
        r"""transpose(self) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_transpose(self)

    def conjugate_transpose(self):
        r"""conjugate_transpose(self) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_conjugate_transpose(self)

    def update(self, *args):
        r"""
        update(self, arg0, top=0, left=0) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        arg0: vnl_matrixF const &
        top: unsigned int
        left: unsigned int

        update(self, m, top=0, left=0) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        m: vnl_matrix_fixedF_3_3 const &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_update(self, *args)

    def set_column(self, *args):
        r"""
        set_column(self, i, v) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        i: unsigned int
        v: float const *

        set_column(self, i, value) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        i: unsigned int
        value: float

        set_column(self, j, v) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        j: unsigned int
        v: vnl_vectorF const &

        set_column(self, j, v) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        j: unsigned int
        v: vnl_vector_fixed< float,3 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_set_column(self, *args)

    def set_columns(self, starting_column, M):
        r"""
        set_columns(self, starting_column, M) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        starting_column: unsigned int
        M: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_set_columns(self, starting_column, M)

    def set_row(self, *args):
        r"""
        set_row(self, i, v) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        i: unsigned int
        v: float const *

        set_row(self, i, value) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        i: unsigned int
        value: float

        set_row(self, i, arg1) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vectorF const &

        set_row(self, i, arg1) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vector_fixed< float,3 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_set_row(self, *args)

    def extract(self, *args):
        r"""
        extract(self, r, c, top=0, left=0) -> vnl_matrixF

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        top: unsigned int
        left: unsigned int

        extract(self, sub_matrix, top=0, left=0)

        Parameters
        ----------
        sub_matrix: vnl_matrixF &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_extract(self, *args)

    def get_row(self, row):
        r"""
        get_row(self, row) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        row: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_get_row(self, row)

    def get_column(self, col):
        r"""
        get_column(self, col) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        col: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_get_column(self, col)

    def get_rows(self, i):
        r"""
        get_rows(self, i) -> vnl_matrixF

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_get_rows(self, i)

    def get_columns(self, i):
        r"""
        get_columns(self, i) -> vnl_matrixF

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_get_columns(self, i)

    def get_n_rows(self, rowstart, n):
        r"""
        get_n_rows(self, rowstart, n) -> vnl_matrixF

        Parameters
        ----------
        rowstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_get_n_rows(self, rowstart, n)

    def get_n_columns(self, colstart, n):
        r"""
        get_n_columns(self, colstart, n) -> vnl_matrixF

        Parameters
        ----------
        colstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_get_n_columns(self, colstart, n)

    def get_diagonal(self):
        r"""get_diagonal(self) -> vnl_vectorF"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_get_diagonal(self)

    def flatten_row_major(self):
        r"""flatten_row_major(self) -> vnl_vector_fixed< float,9 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_flatten_row_major(self)

    def flatten_column_major(self):
        r"""flatten_column_major(self) -> vnl_vector_fixed< float,9 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_flatten_column_major(self)

    def set_identity(self):
        r"""set_identity(self) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_set_identity(self)

    def flipud(self):
        r"""flipud(self) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_flipud(self)

    def fliplr(self):
        r"""fliplr(self) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_fliplr(self)

    def normalize_rows(self):
        r"""normalize_rows(self) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_normalize_rows(self)

    def normalize_columns(self):
        r"""normalize_columns(self) -> vnl_matrix_fixedF_3_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_normalize_columns(self)

    def scale_row(self, row, value):
        r"""
        scale_row(self, row, value) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        row: unsigned int
        value: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_scale_row(self, row, value)

    def scale_column(self, col, value):
        r"""
        scale_column(self, col, value) -> vnl_matrix_fixedF_3_3

        Parameters
        ----------
        col: unsigned int
        value: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_scale_column(self, col, value)

    def swap(self, that):
        r"""
        swap(self, that)

        Parameters
        ----------
        that: vnl_matrix_fixedF_3_3 &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_swap(self, that)

    def array_one_norm(self):
        r"""array_one_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_array_one_norm(self)

    def array_two_norm(self):
        r"""array_two_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_array_two_norm(self)

    def array_inf_norm(self):
        r"""array_inf_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_array_inf_norm(self)

    def absolute_value_sum(self):
        r"""absolute_value_sum(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_absolute_value_sum(self)

    def absolute_value_max(self):
        r"""absolute_value_max(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_absolute_value_max(self)

    def operator_one_norm(self):
        r"""operator_one_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_operator_one_norm(self)

    def operator_inf_norm(self):
        r"""operator_inf_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_operator_inf_norm(self)

    def frobenius_norm(self):
        r"""frobenius_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_frobenius_norm(self)

    def fro_norm(self):
        r"""fro_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_fro_norm(self)

    def rms(self):
        r"""rms(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_rms(self)

    def min_value(self):
        r"""min_value(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_min_value(self)

    def max_value(self):
        r"""max_value(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_max_value(self)

    def arg_min(self):
        r"""arg_min(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_arg_min(self)

    def arg_max(self):
        r"""arg_max(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_arg_max(self)

    def mean(self):
        r"""mean(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_mean(self)

    def empty(self):
        r"""empty(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_empty(self)

    def is_identity(self, *args):
        r"""
        is_identity(self) -> bool
        is_identity(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_is_identity(self, *args)

    def is_zero(self, *args):
        r"""
        is_zero(self) -> bool
        is_zero(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_is_zero(self, *args)

    def is_equal(self, rhs, tol):
        r"""
        is_equal(self, rhs, tol) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_3_3 const &
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_is_equal(self, rhs, tol)

    def is_finite(self):
        r"""is_finite(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_is_finite(self)

    def has_nans(self):
        r"""has_nans(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_has_nans(self)

    def assert_size(self, arg0, arg1):
        r"""
        assert_size(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_assert_size(self, arg0, arg1)

    def assert_finite(self):
        r"""assert_finite(self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_assert_finite(self)

    def read_ascii(self, s):
        r"""
        read_ascii(self, s) -> bool

        Parameters
        ----------
        s: std::basic_istream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_read_ascii(self, s)

    def data_block(self, *args):
        r"""
        data_block(self) -> float const
        data_block(self) -> float *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_data_block(self, *args)

    def as_matrix(self):
        r"""as_matrix(self) -> vnl_matrixF"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_as_matrix(self)

    def begin(self, *args):
        r"""
        begin(self) -> float
        begin(self) -> float const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> float
        end(self) -> float const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_end(self, *args)

    def operator_eq(self, rhs):
        r"""
        operator_eq(self, rhs) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_3_3 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_operator_eq(self, rhs)

    def __eq__(self, *args):
        r"""
        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedF_3_3 const &

        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedF_3_3 const &

        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3___ne__(self, *args)

    def _print(self, os):
        r"""
        _print(self, os)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3__print(self, os)

    @staticmethod
    def add(*args):
        r"""
        add(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        add(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_add(*args)

    @staticmethod
    def sub(*args):
        r"""
        sub(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        sub(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        sub(a, b, r)

        Parameters
        ----------
        a: float
        b: float const *
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_sub(*args)

    @staticmethod
    def mul(*args):
        r"""
        mul(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        mul(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_mul(*args)

    @staticmethod
    def div(*args):
        r"""
        div(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        div(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_div(*args)

    @staticmethod
    def equal(a, b):
        r"""
        equal(a, b) -> bool

        Parameters
        ----------
        a: float const *
        b: float const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_equal(a, b)

# Register vnl_matrix_fixedF_3_3 in _vnl_matrix_fixedPython:
_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_3_swigregister(vnl_matrix_fixedF_3_3)
class vnl_matrix_fixedF_3_4(object):
    r"""Proxy of C++ vnl_matrix_fixedF_3_4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedF_3_4

    def __init__(self, *args):
        r"""
        __init__(self) -> vnl_matrix_fixedF_3_4
        __init__(self, rhs) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_3_4 const &

        __init__(self, arg0, arg1) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        __init__(self, value) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        value: float

        __init__(self, datablck) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        datablck: float const *

        __init__(self, rhs) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        rhs: vnl_matrixF const &

        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedF_3_4(*args))

    def size(self):
        r"""size(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_size(self)

    def rows(self):
        r"""rows(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_rows(self)

    def cols(self):
        r"""cols(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_cols(self)

    def columns(self):
        r"""columns(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_columns(self)

    def put(self, r, c, v):
        r"""
        put(self, r, c, v)

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: float const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_put(self, r, c, v)

    def get(self, r, c):
        r"""
        get(self, r, c) -> float

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_get(self, r, c)

    def __call__(self, *args):
        r"""
        __call__(self, r, c) -> float

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        __call__(self, r, c) -> float const &

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4___call__(self, *args)

    def fill(self, arg0):
        r"""
        fill(self, arg0) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        arg0: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_fill(self, arg0)

    def fill_diagonal(self, arg0):
        r"""
        fill_diagonal(self, arg0) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        arg0: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_fill_diagonal(self, arg0)

    def set_diagonal(self, arg0):
        r"""
        set_diagonal(self, arg0) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        arg0: vnl_vectorF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_set_diagonal(self, arg0)

    def copy_in(self, arg0):
        r"""
        copy_in(self, arg0) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        arg0: float const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_copy_in(self, arg0)

    def set(self, *args):
        r"""
        set(self, r, c, v) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: float const &

        set(self, d) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        d: float const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_set(self, *args)

    def copy_out(self, arg0):
        r"""
        copy_out(self, arg0)

        Parameters
        ----------
        arg0: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_copy_out(self, arg0)

    def inplace_transpose(self):
        r"""inplace_transpose(self) -> vnl_matrix_fixedF_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_inplace_transpose(self)

    def __itruediv__(self, *args):
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, *args):
        r"""
        __iadd__(self, s) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        s: float

        __iadd__(self, m) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        m: vnl_matrix_fixedF_3_4 const &

        __iadd__(self, m) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        m: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(self, s) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        s: float

        __isub__(self, m) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        m: vnl_matrix_fixedF_3_4 const &

        __isub__(self, m) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        m: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4___isub__(self, *args)

    def __neg__(self):
        r"""__neg__(self) -> vnl_matrix_fixedF_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4___neg__(self)

    def __imul__(self, *args):
        r"""
        __imul__(self, s) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        s: float

        __imul__(self, s) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        s: vnl_matrix_fixedF_4_4 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4___imul__(self, *args)

    def transpose(self):
        r"""transpose(self) -> vnl_matrix_fixedF_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_transpose(self)

    def conjugate_transpose(self):
        r"""conjugate_transpose(self) -> vnl_matrix_fixedF_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_conjugate_transpose(self)

    def update(self, *args):
        r"""
        update(self, arg0, top=0, left=0) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        arg0: vnl_matrixF const &
        top: unsigned int
        left: unsigned int

        update(self, m, top=0, left=0) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        m: vnl_matrix_fixedF_3_4 const &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_update(self, *args)

    def set_column(self, *args):
        r"""
        set_column(self, i, v) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        i: unsigned int
        v: float const *

        set_column(self, i, value) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        i: unsigned int
        value: float

        set_column(self, j, v) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        j: unsigned int
        v: vnl_vectorF const &

        set_column(self, j, v) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        j: unsigned int
        v: vnl_vector_fixed< float,3 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_set_column(self, *args)

    def set_columns(self, starting_column, M):
        r"""
        set_columns(self, starting_column, M) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        starting_column: unsigned int
        M: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_set_columns(self, starting_column, M)

    def set_row(self, *args):
        r"""
        set_row(self, i, v) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        i: unsigned int
        v: float const *

        set_row(self, i, value) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        i: unsigned int
        value: float

        set_row(self, i, arg1) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vectorF const &

        set_row(self, i, arg1) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vector_fixed< float,4 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_set_row(self, *args)

    def extract(self, *args):
        r"""
        extract(self, r, c, top=0, left=0) -> vnl_matrixF

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        top: unsigned int
        left: unsigned int

        extract(self, sub_matrix, top=0, left=0)

        Parameters
        ----------
        sub_matrix: vnl_matrixF &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_extract(self, *args)

    def get_row(self, row):
        r"""
        get_row(self, row) -> vnl_vector_fixed< float,4 >

        Parameters
        ----------
        row: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_get_row(self, row)

    def get_column(self, col):
        r"""
        get_column(self, col) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        col: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_get_column(self, col)

    def get_rows(self, i):
        r"""
        get_rows(self, i) -> vnl_matrixF

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_get_rows(self, i)

    def get_columns(self, i):
        r"""
        get_columns(self, i) -> vnl_matrixF

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_get_columns(self, i)

    def get_n_rows(self, rowstart, n):
        r"""
        get_n_rows(self, rowstart, n) -> vnl_matrixF

        Parameters
        ----------
        rowstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_get_n_rows(self, rowstart, n)

    def get_n_columns(self, colstart, n):
        r"""
        get_n_columns(self, colstart, n) -> vnl_matrixF

        Parameters
        ----------
        colstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_get_n_columns(self, colstart, n)

    def get_diagonal(self):
        r"""get_diagonal(self) -> vnl_vectorF"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_get_diagonal(self)

    def flatten_row_major(self):
        r"""flatten_row_major(self) -> vnl_vector_fixed< float,12 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_flatten_row_major(self)

    def flatten_column_major(self):
        r"""flatten_column_major(self) -> vnl_vector_fixed< float,12 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_flatten_column_major(self)

    def set_identity(self):
        r"""set_identity(self) -> vnl_matrix_fixedF_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_set_identity(self)

    def flipud(self):
        r"""flipud(self) -> vnl_matrix_fixedF_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_flipud(self)

    def fliplr(self):
        r"""fliplr(self) -> vnl_matrix_fixedF_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_fliplr(self)

    def normalize_rows(self):
        r"""normalize_rows(self) -> vnl_matrix_fixedF_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_normalize_rows(self)

    def normalize_columns(self):
        r"""normalize_columns(self) -> vnl_matrix_fixedF_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_normalize_columns(self)

    def scale_row(self, row, value):
        r"""
        scale_row(self, row, value) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        row: unsigned int
        value: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_scale_row(self, row, value)

    def scale_column(self, col, value):
        r"""
        scale_column(self, col, value) -> vnl_matrix_fixedF_3_4

        Parameters
        ----------
        col: unsigned int
        value: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_scale_column(self, col, value)

    def swap(self, that):
        r"""
        swap(self, that)

        Parameters
        ----------
        that: vnl_matrix_fixedF_3_4 &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_swap(self, that)

    def array_one_norm(self):
        r"""array_one_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_array_one_norm(self)

    def array_two_norm(self):
        r"""array_two_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_array_two_norm(self)

    def array_inf_norm(self):
        r"""array_inf_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_array_inf_norm(self)

    def absolute_value_sum(self):
        r"""absolute_value_sum(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_absolute_value_sum(self)

    def absolute_value_max(self):
        r"""absolute_value_max(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_absolute_value_max(self)

    def operator_one_norm(self):
        r"""operator_one_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_operator_one_norm(self)

    def operator_inf_norm(self):
        r"""operator_inf_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_operator_inf_norm(self)

    def frobenius_norm(self):
        r"""frobenius_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_frobenius_norm(self)

    def fro_norm(self):
        r"""fro_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_fro_norm(self)

    def rms(self):
        r"""rms(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_rms(self)

    def min_value(self):
        r"""min_value(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_min_value(self)

    def max_value(self):
        r"""max_value(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_max_value(self)

    def arg_min(self):
        r"""arg_min(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_arg_min(self)

    def arg_max(self):
        r"""arg_max(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_arg_max(self)

    def mean(self):
        r"""mean(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_mean(self)

    def empty(self):
        r"""empty(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_empty(self)

    def is_identity(self, *args):
        r"""
        is_identity(self) -> bool
        is_identity(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_is_identity(self, *args)

    def is_zero(self, *args):
        r"""
        is_zero(self) -> bool
        is_zero(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_is_zero(self, *args)

    def is_equal(self, rhs, tol):
        r"""
        is_equal(self, rhs, tol) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_3_4 const &
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_is_equal(self, rhs, tol)

    def is_finite(self):
        r"""is_finite(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_is_finite(self)

    def has_nans(self):
        r"""has_nans(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_has_nans(self)

    def assert_size(self, arg0, arg1):
        r"""
        assert_size(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_assert_size(self, arg0, arg1)

    def assert_finite(self):
        r"""assert_finite(self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_assert_finite(self)

    def read_ascii(self, s):
        r"""
        read_ascii(self, s) -> bool

        Parameters
        ----------
        s: std::basic_istream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_read_ascii(self, s)

    def data_block(self, *args):
        r"""
        data_block(self) -> float const
        data_block(self) -> float *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_data_block(self, *args)

    def as_matrix(self):
        r"""as_matrix(self) -> vnl_matrixF"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_as_matrix(self)

    def begin(self, *args):
        r"""
        begin(self) -> float
        begin(self) -> float const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> float
        end(self) -> float const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_end(self, *args)

    def operator_eq(self, rhs):
        r"""
        operator_eq(self, rhs) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_3_4 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_operator_eq(self, rhs)

    def __eq__(self, *args):
        r"""
        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedF_3_4 const &

        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedF_3_4 const &

        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4___ne__(self, *args)

    def _print(self, os):
        r"""
        _print(self, os)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4__print(self, os)

    @staticmethod
    def add(*args):
        r"""
        add(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        add(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_add(*args)

    @staticmethod
    def sub(*args):
        r"""
        sub(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        sub(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        sub(a, b, r)

        Parameters
        ----------
        a: float
        b: float const *
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_sub(*args)

    @staticmethod
    def mul(*args):
        r"""
        mul(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        mul(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_mul(*args)

    @staticmethod
    def div(*args):
        r"""
        div(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        div(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_div(*args)

    @staticmethod
    def equal(a, b):
        r"""
        equal(a, b) -> bool

        Parameters
        ----------
        a: float const *
        b: float const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_equal(a, b)

# Register vnl_matrix_fixedF_3_4 in _vnl_matrix_fixedPython:
_vnl_matrix_fixedPython.vnl_matrix_fixedF_3_4_swigregister(vnl_matrix_fixedF_3_4)
class vnl_matrix_fixedF_4_3(object):
    r"""Proxy of C++ vnl_matrix_fixedF_4_3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedF_4_3

    def __init__(self, *args):
        r"""
        __init__(self) -> vnl_matrix_fixedF_4_3
        __init__(self, rhs) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_4_3 const &

        __init__(self, arg0, arg1) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        __init__(self, value) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        value: float

        __init__(self, datablck) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        datablck: float const *

        __init__(self, rhs) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        rhs: vnl_matrixF const &

        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedF_4_3(*args))

    def size(self):
        r"""size(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_size(self)

    def rows(self):
        r"""rows(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_rows(self)

    def cols(self):
        r"""cols(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_cols(self)

    def columns(self):
        r"""columns(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_columns(self)

    def put(self, r, c, v):
        r"""
        put(self, r, c, v)

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: float const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_put(self, r, c, v)

    def get(self, r, c):
        r"""
        get(self, r, c) -> float

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_get(self, r, c)

    def __call__(self, *args):
        r"""
        __call__(self, r, c) -> float

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        __call__(self, r, c) -> float const &

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3___call__(self, *args)

    def fill(self, arg0):
        r"""
        fill(self, arg0) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        arg0: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_fill(self, arg0)

    def fill_diagonal(self, arg0):
        r"""
        fill_diagonal(self, arg0) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        arg0: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_fill_diagonal(self, arg0)

    def set_diagonal(self, arg0):
        r"""
        set_diagonal(self, arg0) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        arg0: vnl_vectorF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_set_diagonal(self, arg0)

    def copy_in(self, arg0):
        r"""
        copy_in(self, arg0) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        arg0: float const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_copy_in(self, arg0)

    def set(self, *args):
        r"""
        set(self, r, c, v) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: float const &

        set(self, d) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        d: float const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_set(self, *args)

    def copy_out(self, arg0):
        r"""
        copy_out(self, arg0)

        Parameters
        ----------
        arg0: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_copy_out(self, arg0)

    def inplace_transpose(self):
        r"""inplace_transpose(self) -> vnl_matrix_fixedF_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_inplace_transpose(self)

    def __itruediv__(self, *args):
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, *args):
        r"""
        __iadd__(self, s) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        s: float

        __iadd__(self, m) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        m: vnl_matrix_fixedF_4_3 const &

        __iadd__(self, m) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        m: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(self, s) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        s: float

        __isub__(self, m) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        m: vnl_matrix_fixedF_4_3 const &

        __isub__(self, m) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        m: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3___isub__(self, *args)

    def __neg__(self):
        r"""__neg__(self) -> vnl_matrix_fixedF_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3___neg__(self)

    def __imul__(self, *args):
        r"""
        __imul__(self, s) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        s: float

        __imul__(self, s) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        s: vnl_matrix_fixedF_3_3 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3___imul__(self, *args)

    def transpose(self):
        r"""transpose(self) -> vnl_matrix_fixedF_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_transpose(self)

    def conjugate_transpose(self):
        r"""conjugate_transpose(self) -> vnl_matrix_fixedF_3_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_conjugate_transpose(self)

    def update(self, *args):
        r"""
        update(self, arg0, top=0, left=0) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        arg0: vnl_matrixF const &
        top: unsigned int
        left: unsigned int

        update(self, m, top=0, left=0) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        m: vnl_matrix_fixedF_4_3 const &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_update(self, *args)

    def set_column(self, *args):
        r"""
        set_column(self, i, v) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        i: unsigned int
        v: float const *

        set_column(self, i, value) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        i: unsigned int
        value: float

        set_column(self, j, v) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        j: unsigned int
        v: vnl_vectorF const &

        set_column(self, j, v) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        j: unsigned int
        v: vnl_vector_fixed< float,4 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_set_column(self, *args)

    def set_columns(self, starting_column, M):
        r"""
        set_columns(self, starting_column, M) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        starting_column: unsigned int
        M: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_set_columns(self, starting_column, M)

    def set_row(self, *args):
        r"""
        set_row(self, i, v) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        i: unsigned int
        v: float const *

        set_row(self, i, value) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        i: unsigned int
        value: float

        set_row(self, i, arg1) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vectorF const &

        set_row(self, i, arg1) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vector_fixed< float,3 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_set_row(self, *args)

    def extract(self, *args):
        r"""
        extract(self, r, c, top=0, left=0) -> vnl_matrixF

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        top: unsigned int
        left: unsigned int

        extract(self, sub_matrix, top=0, left=0)

        Parameters
        ----------
        sub_matrix: vnl_matrixF &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_extract(self, *args)

    def get_row(self, row):
        r"""
        get_row(self, row) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        row: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_get_row(self, row)

    def get_column(self, col):
        r"""
        get_column(self, col) -> vnl_vector_fixed< float,4 >

        Parameters
        ----------
        col: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_get_column(self, col)

    def get_rows(self, i):
        r"""
        get_rows(self, i) -> vnl_matrixF

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_get_rows(self, i)

    def get_columns(self, i):
        r"""
        get_columns(self, i) -> vnl_matrixF

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_get_columns(self, i)

    def get_n_rows(self, rowstart, n):
        r"""
        get_n_rows(self, rowstart, n) -> vnl_matrixF

        Parameters
        ----------
        rowstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_get_n_rows(self, rowstart, n)

    def get_n_columns(self, colstart, n):
        r"""
        get_n_columns(self, colstart, n) -> vnl_matrixF

        Parameters
        ----------
        colstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_get_n_columns(self, colstart, n)

    def get_diagonal(self):
        r"""get_diagonal(self) -> vnl_vectorF"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_get_diagonal(self)

    def flatten_row_major(self):
        r"""flatten_row_major(self) -> vnl_vector_fixed< float,12 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_flatten_row_major(self)

    def flatten_column_major(self):
        r"""flatten_column_major(self) -> vnl_vector_fixed< float,12 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_flatten_column_major(self)

    def set_identity(self):
        r"""set_identity(self) -> vnl_matrix_fixedF_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_set_identity(self)

    def flipud(self):
        r"""flipud(self) -> vnl_matrix_fixedF_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_flipud(self)

    def fliplr(self):
        r"""fliplr(self) -> vnl_matrix_fixedF_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_fliplr(self)

    def normalize_rows(self):
        r"""normalize_rows(self) -> vnl_matrix_fixedF_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_normalize_rows(self)

    def normalize_columns(self):
        r"""normalize_columns(self) -> vnl_matrix_fixedF_4_3"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_normalize_columns(self)

    def scale_row(self, row, value):
        r"""
        scale_row(self, row, value) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        row: unsigned int
        value: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_scale_row(self, row, value)

    def scale_column(self, col, value):
        r"""
        scale_column(self, col, value) -> vnl_matrix_fixedF_4_3

        Parameters
        ----------
        col: unsigned int
        value: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_scale_column(self, col, value)

    def swap(self, that):
        r"""
        swap(self, that)

        Parameters
        ----------
        that: vnl_matrix_fixedF_4_3 &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_swap(self, that)

    def array_one_norm(self):
        r"""array_one_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_array_one_norm(self)

    def array_two_norm(self):
        r"""array_two_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_array_two_norm(self)

    def array_inf_norm(self):
        r"""array_inf_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_array_inf_norm(self)

    def absolute_value_sum(self):
        r"""absolute_value_sum(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_absolute_value_sum(self)

    def absolute_value_max(self):
        r"""absolute_value_max(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_absolute_value_max(self)

    def operator_one_norm(self):
        r"""operator_one_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_operator_one_norm(self)

    def operator_inf_norm(self):
        r"""operator_inf_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_operator_inf_norm(self)

    def frobenius_norm(self):
        r"""frobenius_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_frobenius_norm(self)

    def fro_norm(self):
        r"""fro_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_fro_norm(self)

    def rms(self):
        r"""rms(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_rms(self)

    def min_value(self):
        r"""min_value(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_min_value(self)

    def max_value(self):
        r"""max_value(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_max_value(self)

    def arg_min(self):
        r"""arg_min(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_arg_min(self)

    def arg_max(self):
        r"""arg_max(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_arg_max(self)

    def mean(self):
        r"""mean(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_mean(self)

    def empty(self):
        r"""empty(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_empty(self)

    def is_identity(self, *args):
        r"""
        is_identity(self) -> bool
        is_identity(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_is_identity(self, *args)

    def is_zero(self, *args):
        r"""
        is_zero(self) -> bool
        is_zero(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_is_zero(self, *args)

    def is_equal(self, rhs, tol):
        r"""
        is_equal(self, rhs, tol) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_4_3 const &
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_is_equal(self, rhs, tol)

    def is_finite(self):
        r"""is_finite(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_is_finite(self)

    def has_nans(self):
        r"""has_nans(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_has_nans(self)

    def assert_size(self, arg0, arg1):
        r"""
        assert_size(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_assert_size(self, arg0, arg1)

    def assert_finite(self):
        r"""assert_finite(self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_assert_finite(self)

    def read_ascii(self, s):
        r"""
        read_ascii(self, s) -> bool

        Parameters
        ----------
        s: std::basic_istream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_read_ascii(self, s)

    def data_block(self, *args):
        r"""
        data_block(self) -> float const
        data_block(self) -> float *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_data_block(self, *args)

    def as_matrix(self):
        r"""as_matrix(self) -> vnl_matrixF"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_as_matrix(self)

    def begin(self, *args):
        r"""
        begin(self) -> float
        begin(self) -> float const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> float
        end(self) -> float const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_end(self, *args)

    def operator_eq(self, rhs):
        r"""
        operator_eq(self, rhs) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_4_3 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_operator_eq(self, rhs)

    def __eq__(self, *args):
        r"""
        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedF_4_3 const &

        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedF_4_3 const &

        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3___ne__(self, *args)

    def _print(self, os):
        r"""
        _print(self, os)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3__print(self, os)

    @staticmethod
    def add(*args):
        r"""
        add(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        add(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_add(*args)

    @staticmethod
    def sub(*args):
        r"""
        sub(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        sub(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        sub(a, b, r)

        Parameters
        ----------
        a: float
        b: float const *
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_sub(*args)

    @staticmethod
    def mul(*args):
        r"""
        mul(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        mul(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_mul(*args)

    @staticmethod
    def div(*args):
        r"""
        div(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        div(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_div(*args)

    @staticmethod
    def equal(a, b):
        r"""
        equal(a, b) -> bool

        Parameters
        ----------
        a: float const *
        b: float const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_equal(a, b)

# Register vnl_matrix_fixedF_4_3 in _vnl_matrix_fixedPython:
_vnl_matrix_fixedPython.vnl_matrix_fixedF_4_3_swigregister(vnl_matrix_fixedF_4_3)
class vnl_matrix_fixedF_4_4(object):
    r"""Proxy of C++ vnl_matrix_fixedF_4_4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_matrix_fixedPython.delete_vnl_matrix_fixedF_4_4

    def __init__(self, *args):
        r"""
        __init__(self) -> vnl_matrix_fixedF_4_4
        __init__(self, rhs) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_4_4 const &

        __init__(self, arg0, arg1) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        __init__(self, value) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        value: float

        __init__(self, datablck) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        datablck: float const *

        __init__(self, rhs) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        rhs: vnl_matrixF const &

        """
        _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_swiginit(self, _vnl_matrix_fixedPython.new_vnl_matrix_fixedF_4_4(*args))

    def size(self):
        r"""size(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_size(self)

    def rows(self):
        r"""rows(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_rows(self)

    def cols(self):
        r"""cols(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_cols(self)

    def columns(self):
        r"""columns(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_columns(self)

    def put(self, r, c, v):
        r"""
        put(self, r, c, v)

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: float const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_put(self, r, c, v)

    def get(self, r, c):
        r"""
        get(self, r, c) -> float

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_get(self, r, c)

    def __call__(self, *args):
        r"""
        __call__(self, r, c) -> float

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        __call__(self, r, c) -> float const &

        Parameters
        ----------
        r: unsigned int
        c: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4___call__(self, *args)

    def fill(self, arg0):
        r"""
        fill(self, arg0) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        arg0: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_fill(self, arg0)

    def fill_diagonal(self, arg0):
        r"""
        fill_diagonal(self, arg0) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        arg0: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_fill_diagonal(self, arg0)

    def set_diagonal(self, arg0):
        r"""
        set_diagonal(self, arg0) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        arg0: vnl_vectorF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_set_diagonal(self, arg0)

    def copy_in(self, arg0):
        r"""
        copy_in(self, arg0) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        arg0: float const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_copy_in(self, arg0)

    def set(self, *args):
        r"""
        set(self, r, c, v) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        v: float const &

        set(self, d) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        d: float const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_set(self, *args)

    def copy_out(self, arg0):
        r"""
        copy_out(self, arg0)

        Parameters
        ----------
        arg0: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_copy_out(self, arg0)

    def inplace_transpose(self):
        r"""inplace_transpose(self) -> vnl_matrix_fixedF_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_inplace_transpose(self)

    def __itruediv__(self, *args):
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, *args):
        r"""
        __iadd__(self, s) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        s: float

        __iadd__(self, m) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        m: vnl_matrix_fixedF_4_4 const &

        __iadd__(self, m) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        m: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(self, s) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        s: float

        __isub__(self, m) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        m: vnl_matrix_fixedF_4_4 const &

        __isub__(self, m) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        m: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4___isub__(self, *args)

    def __neg__(self):
        r"""__neg__(self) -> vnl_matrix_fixedF_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4___neg__(self)

    def __imul__(self, *args):
        r"""
        __imul__(self, s) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        s: float

        __imul__(self, s) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        s: vnl_matrix_fixedF_4_4 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4___imul__(self, *args)

    def transpose(self):
        r"""transpose(self) -> vnl_matrix_fixedF_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_transpose(self)

    def conjugate_transpose(self):
        r"""conjugate_transpose(self) -> vnl_matrix_fixedF_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_conjugate_transpose(self)

    def update(self, *args):
        r"""
        update(self, arg0, top=0, left=0) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        arg0: vnl_matrixF const &
        top: unsigned int
        left: unsigned int

        update(self, m, top=0, left=0) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        m: vnl_matrix_fixedF_4_4 const &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_update(self, *args)

    def set_column(self, *args):
        r"""
        set_column(self, i, v) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        i: unsigned int
        v: float const *

        set_column(self, i, value) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        i: unsigned int
        value: float

        set_column(self, j, v) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        j: unsigned int
        v: vnl_vectorF const &

        set_column(self, j, v) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        j: unsigned int
        v: vnl_vector_fixed< float,4 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_set_column(self, *args)

    def set_columns(self, starting_column, M):
        r"""
        set_columns(self, starting_column, M) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        starting_column: unsigned int
        M: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_set_columns(self, starting_column, M)

    def set_row(self, *args):
        r"""
        set_row(self, i, v) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        i: unsigned int
        v: float const *

        set_row(self, i, value) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        i: unsigned int
        value: float

        set_row(self, i, arg1) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vectorF const &

        set_row(self, i, arg1) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        i: unsigned int
        arg1: vnl_vector_fixed< float,4 > const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_set_row(self, *args)

    def extract(self, *args):
        r"""
        extract(self, r, c, top=0, left=0) -> vnl_matrixF

        Parameters
        ----------
        r: unsigned int
        c: unsigned int
        top: unsigned int
        left: unsigned int

        extract(self, sub_matrix, top=0, left=0)

        Parameters
        ----------
        sub_matrix: vnl_matrixF &
        top: unsigned int
        left: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_extract(self, *args)

    def get_row(self, row):
        r"""
        get_row(self, row) -> vnl_vector_fixed< float,4 >

        Parameters
        ----------
        row: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_get_row(self, row)

    def get_column(self, col):
        r"""
        get_column(self, col) -> vnl_vector_fixed< float,4 >

        Parameters
        ----------
        col: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_get_column(self, col)

    def get_rows(self, i):
        r"""
        get_rows(self, i) -> vnl_matrixF

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_get_rows(self, i)

    def get_columns(self, i):
        r"""
        get_columns(self, i) -> vnl_matrixF

        Parameters
        ----------
        i: vnl_vectorUI const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_get_columns(self, i)

    def get_n_rows(self, rowstart, n):
        r"""
        get_n_rows(self, rowstart, n) -> vnl_matrixF

        Parameters
        ----------
        rowstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_get_n_rows(self, rowstart, n)

    def get_n_columns(self, colstart, n):
        r"""
        get_n_columns(self, colstart, n) -> vnl_matrixF

        Parameters
        ----------
        colstart: unsigned int
        n: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_get_n_columns(self, colstart, n)

    def get_diagonal(self):
        r"""get_diagonal(self) -> vnl_vectorF"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_get_diagonal(self)

    def flatten_row_major(self):
        r"""flatten_row_major(self) -> vnl_vector_fixed< float,16 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_flatten_row_major(self)

    def flatten_column_major(self):
        r"""flatten_column_major(self) -> vnl_vector_fixed< float,16 >"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_flatten_column_major(self)

    def set_identity(self):
        r"""set_identity(self) -> vnl_matrix_fixedF_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_set_identity(self)

    def flipud(self):
        r"""flipud(self) -> vnl_matrix_fixedF_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_flipud(self)

    def fliplr(self):
        r"""fliplr(self) -> vnl_matrix_fixedF_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_fliplr(self)

    def normalize_rows(self):
        r"""normalize_rows(self) -> vnl_matrix_fixedF_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_normalize_rows(self)

    def normalize_columns(self):
        r"""normalize_columns(self) -> vnl_matrix_fixedF_4_4"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_normalize_columns(self)

    def scale_row(self, row, value):
        r"""
        scale_row(self, row, value) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        row: unsigned int
        value: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_scale_row(self, row, value)

    def scale_column(self, col, value):
        r"""
        scale_column(self, col, value) -> vnl_matrix_fixedF_4_4

        Parameters
        ----------
        col: unsigned int
        value: float

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_scale_column(self, col, value)

    def swap(self, that):
        r"""
        swap(self, that)

        Parameters
        ----------
        that: vnl_matrix_fixedF_4_4 &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_swap(self, that)

    def array_one_norm(self):
        r"""array_one_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_array_one_norm(self)

    def array_two_norm(self):
        r"""array_two_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_array_two_norm(self)

    def array_inf_norm(self):
        r"""array_inf_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_array_inf_norm(self)

    def absolute_value_sum(self):
        r"""absolute_value_sum(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_absolute_value_sum(self)

    def absolute_value_max(self):
        r"""absolute_value_max(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_absolute_value_max(self)

    def operator_one_norm(self):
        r"""operator_one_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_operator_one_norm(self)

    def operator_inf_norm(self):
        r"""operator_inf_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_operator_inf_norm(self)

    def frobenius_norm(self):
        r"""frobenius_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_frobenius_norm(self)

    def fro_norm(self):
        r"""fro_norm(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_fro_norm(self)

    def rms(self):
        r"""rms(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_rms(self)

    def min_value(self):
        r"""min_value(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_min_value(self)

    def max_value(self):
        r"""max_value(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_max_value(self)

    def arg_min(self):
        r"""arg_min(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_arg_min(self)

    def arg_max(self):
        r"""arg_max(self) -> unsigned int"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_arg_max(self)

    def mean(self):
        r"""mean(self) -> float"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_mean(self)

    def empty(self):
        r"""empty(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_empty(self)

    def is_identity(self, *args):
        r"""
        is_identity(self) -> bool
        is_identity(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_is_identity(self, *args)

    def is_zero(self, *args):
        r"""
        is_zero(self) -> bool
        is_zero(self, tol) -> bool

        Parameters
        ----------
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_is_zero(self, *args)

    def is_equal(self, rhs, tol):
        r"""
        is_equal(self, rhs, tol) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_4_4 const &
        tol: double

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_is_equal(self, rhs, tol)

    def is_finite(self):
        r"""is_finite(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_is_finite(self)

    def has_nans(self):
        r"""has_nans(self) -> bool"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_has_nans(self)

    def assert_size(self, arg0, arg1):
        r"""
        assert_size(self, arg0, arg1)

        Parameters
        ----------
        arg0: unsigned int
        arg1: unsigned int

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_assert_size(self, arg0, arg1)

    def assert_finite(self):
        r"""assert_finite(self)"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_assert_finite(self)

    def read_ascii(self, s):
        r"""
        read_ascii(self, s) -> bool

        Parameters
        ----------
        s: std::basic_istream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_read_ascii(self, s)

    def data_block(self, *args):
        r"""
        data_block(self) -> float const
        data_block(self) -> float *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_data_block(self, *args)

    def as_matrix(self):
        r"""as_matrix(self) -> vnl_matrixF"""
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_as_matrix(self)

    def begin(self, *args):
        r"""
        begin(self) -> float
        begin(self) -> float const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_begin(self, *args)

    def end(self, *args):
        r"""
        end(self) -> float
        end(self) -> float const *
        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_end(self, *args)

    def operator_eq(self, rhs):
        r"""
        operator_eq(self, rhs) -> bool

        Parameters
        ----------
        rhs: vnl_matrix_fixedF_4_4 const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_operator_eq(self, rhs)

    def __eq__(self, *args):
        r"""
        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedF_4_4 const &

        __eq__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrix_fixedF_4_4 const &

        __ne__(self, that) -> bool

        Parameters
        ----------
        that: vnl_matrixF const &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4___ne__(self, *args)

    def _print(self, os):
        r"""
        _print(self, os)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4__print(self, os)

    @staticmethod
    def add(*args):
        r"""
        add(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        add(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_add(*args)

    @staticmethod
    def sub(*args):
        r"""
        sub(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        sub(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        sub(a, b, r)

        Parameters
        ----------
        a: float
        b: float const *
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_sub(*args)

    @staticmethod
    def mul(*args):
        r"""
        mul(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        mul(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_mul(*args)

    @staticmethod
    def div(*args):
        r"""
        div(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float const *
        r: float *

        div(a, b, r)

        Parameters
        ----------
        a: float const *
        b: float
        r: float *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_div(*args)

    @staticmethod
    def equal(a, b):
        r"""
        equal(a, b) -> bool

        Parameters
        ----------
        a: float const *
        b: float const *

        """
        return _vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_equal(a, b)

# Register vnl_matrix_fixedF_4_4 in _vnl_matrix_fixedPython:
_vnl_matrix_fixedPython.vnl_matrix_fixedF_4_4_swigregister(vnl_matrix_fixedF_4_4)

