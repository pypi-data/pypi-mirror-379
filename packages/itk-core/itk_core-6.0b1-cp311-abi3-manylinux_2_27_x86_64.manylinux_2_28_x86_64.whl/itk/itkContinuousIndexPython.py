# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkContinuousIndexPython
else:
    import _itkContinuousIndexPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
class itkContinuousIndexD2(itk.itkPointPython.itkPointD2):
    r"""Proxy of C++ itkContinuousIndexD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(self) -> itkContinuousIndexD2
        __init__(self, r) -> itkContinuousIndexD2

        Parameters
        ----------
        r: double const *

        __init__(self, index) -> itkContinuousIndexD2

        Parameters
        ----------
        index: itkIndex2 const &

        __init__(self, arg0) -> itkContinuousIndexD2

        Parameters
        ----------
        arg0: itkContinuousIndexD2 const &

        """
        _itkContinuousIndexPython.itkContinuousIndexD2_swiginit(self, _itkContinuousIndexPython.new_itkContinuousIndexD2(*args))
    __swig_destroy__ = _itkContinuousIndexPython.delete_itkContinuousIndexD2

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> double

        Parameters
        ----------
        d: unsigned long

        """
        return _itkContinuousIndexPython.itkContinuousIndexD2___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: double

        """
        return _itkContinuousIndexPython.itkContinuousIndexD2___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkContinuousIndexPython.itkContinuousIndexD2___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkContinuousIndexPython.itkContinuousIndexD2___repr__(self)

# Register itkContinuousIndexD2 in _itkContinuousIndexPython:
_itkContinuousIndexPython.itkContinuousIndexD2_swigregister(itkContinuousIndexD2)
class itkContinuousIndexD3(itk.itkPointPython.itkPointD3):
    r"""Proxy of C++ itkContinuousIndexD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(self) -> itkContinuousIndexD3
        __init__(self, r) -> itkContinuousIndexD3

        Parameters
        ----------
        r: double const *

        __init__(self, index) -> itkContinuousIndexD3

        Parameters
        ----------
        index: itkIndex3 const &

        __init__(self, arg0) -> itkContinuousIndexD3

        Parameters
        ----------
        arg0: itkContinuousIndexD3 const &

        """
        _itkContinuousIndexPython.itkContinuousIndexD3_swiginit(self, _itkContinuousIndexPython.new_itkContinuousIndexD3(*args))
    __swig_destroy__ = _itkContinuousIndexPython.delete_itkContinuousIndexD3

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> double

        Parameters
        ----------
        d: unsigned long

        """
        return _itkContinuousIndexPython.itkContinuousIndexD3___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: double

        """
        return _itkContinuousIndexPython.itkContinuousIndexD3___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkContinuousIndexPython.itkContinuousIndexD3___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkContinuousIndexPython.itkContinuousIndexD3___repr__(self)

# Register itkContinuousIndexD3 in _itkContinuousIndexPython:
_itkContinuousIndexPython.itkContinuousIndexD3_swigregister(itkContinuousIndexD3)
class itkContinuousIndexD4(itk.itkPointPython.itkPointD4):
    r"""Proxy of C++ itkContinuousIndexD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(self) -> itkContinuousIndexD4
        __init__(self, r) -> itkContinuousIndexD4

        Parameters
        ----------
        r: double const *

        __init__(self, index) -> itkContinuousIndexD4

        Parameters
        ----------
        index: itkIndex4 const &

        __init__(self, arg0) -> itkContinuousIndexD4

        Parameters
        ----------
        arg0: itkContinuousIndexD4 const &

        """
        _itkContinuousIndexPython.itkContinuousIndexD4_swiginit(self, _itkContinuousIndexPython.new_itkContinuousIndexD4(*args))
    __swig_destroy__ = _itkContinuousIndexPython.delete_itkContinuousIndexD4

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> double

        Parameters
        ----------
        d: unsigned long

        """
        return _itkContinuousIndexPython.itkContinuousIndexD4___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: double

        """
        return _itkContinuousIndexPython.itkContinuousIndexD4___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkContinuousIndexPython.itkContinuousIndexD4___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkContinuousIndexPython.itkContinuousIndexD4___repr__(self)

# Register itkContinuousIndexD4 in _itkContinuousIndexPython:
_itkContinuousIndexPython.itkContinuousIndexD4_swigregister(itkContinuousIndexD4)
class itkContinuousIndexD5(itk.itkPointPython.itkPointD5):
    r"""Proxy of C++ itkContinuousIndexD5 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(self) -> itkContinuousIndexD5
        __init__(self, r) -> itkContinuousIndexD5

        Parameters
        ----------
        r: double const *

        __init__(self, index) -> itkContinuousIndexD5

        Parameters
        ----------
        index: itkIndex5 const &

        __init__(self, arg0) -> itkContinuousIndexD5

        Parameters
        ----------
        arg0: itkContinuousIndexD5 const &

        """
        _itkContinuousIndexPython.itkContinuousIndexD5_swiginit(self, _itkContinuousIndexPython.new_itkContinuousIndexD5(*args))
    __swig_destroy__ = _itkContinuousIndexPython.delete_itkContinuousIndexD5

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> double

        Parameters
        ----------
        d: unsigned long

        """
        return _itkContinuousIndexPython.itkContinuousIndexD5___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: double

        """
        return _itkContinuousIndexPython.itkContinuousIndexD5___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkContinuousIndexPython.itkContinuousIndexD5___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkContinuousIndexPython.itkContinuousIndexD5___repr__(self)

# Register itkContinuousIndexD5 in _itkContinuousIndexPython:
_itkContinuousIndexPython.itkContinuousIndexD5_swigregister(itkContinuousIndexD5)
class itkContinuousIndexF2(itk.itkPointPython.itkPointF2):
    r"""Proxy of C++ itkContinuousIndexF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(self) -> itkContinuousIndexF2
        __init__(self, r) -> itkContinuousIndexF2

        Parameters
        ----------
        r: float const *

        __init__(self, index) -> itkContinuousIndexF2

        Parameters
        ----------
        index: itkIndex2 const &

        __init__(self, arg0) -> itkContinuousIndexF2

        Parameters
        ----------
        arg0: itkContinuousIndexF2 const &

        """
        _itkContinuousIndexPython.itkContinuousIndexF2_swiginit(self, _itkContinuousIndexPython.new_itkContinuousIndexF2(*args))
    __swig_destroy__ = _itkContinuousIndexPython.delete_itkContinuousIndexF2

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> float

        Parameters
        ----------
        d: unsigned long

        """
        return _itkContinuousIndexPython.itkContinuousIndexF2___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: float

        """
        return _itkContinuousIndexPython.itkContinuousIndexF2___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkContinuousIndexPython.itkContinuousIndexF2___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkContinuousIndexPython.itkContinuousIndexF2___repr__(self)

# Register itkContinuousIndexF2 in _itkContinuousIndexPython:
_itkContinuousIndexPython.itkContinuousIndexF2_swigregister(itkContinuousIndexF2)
class itkContinuousIndexF3(itk.itkPointPython.itkPointF3):
    r"""Proxy of C++ itkContinuousIndexF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(self) -> itkContinuousIndexF3
        __init__(self, r) -> itkContinuousIndexF3

        Parameters
        ----------
        r: float const *

        __init__(self, index) -> itkContinuousIndexF3

        Parameters
        ----------
        index: itkIndex3 const &

        __init__(self, arg0) -> itkContinuousIndexF3

        Parameters
        ----------
        arg0: itkContinuousIndexF3 const &

        """
        _itkContinuousIndexPython.itkContinuousIndexF3_swiginit(self, _itkContinuousIndexPython.new_itkContinuousIndexF3(*args))
    __swig_destroy__ = _itkContinuousIndexPython.delete_itkContinuousIndexF3

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> float

        Parameters
        ----------
        d: unsigned long

        """
        return _itkContinuousIndexPython.itkContinuousIndexF3___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: float

        """
        return _itkContinuousIndexPython.itkContinuousIndexF3___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkContinuousIndexPython.itkContinuousIndexF3___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkContinuousIndexPython.itkContinuousIndexF3___repr__(self)

# Register itkContinuousIndexF3 in _itkContinuousIndexPython:
_itkContinuousIndexPython.itkContinuousIndexF3_swigregister(itkContinuousIndexF3)
class itkContinuousIndexF4(itk.itkPointPython.itkPointF4):
    r"""Proxy of C++ itkContinuousIndexF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(self) -> itkContinuousIndexF4
        __init__(self, r) -> itkContinuousIndexF4

        Parameters
        ----------
        r: float const *

        __init__(self, index) -> itkContinuousIndexF4

        Parameters
        ----------
        index: itkIndex4 const &

        __init__(self, arg0) -> itkContinuousIndexF4

        Parameters
        ----------
        arg0: itkContinuousIndexF4 const &

        """
        _itkContinuousIndexPython.itkContinuousIndexF4_swiginit(self, _itkContinuousIndexPython.new_itkContinuousIndexF4(*args))
    __swig_destroy__ = _itkContinuousIndexPython.delete_itkContinuousIndexF4

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> float

        Parameters
        ----------
        d: unsigned long

        """
        return _itkContinuousIndexPython.itkContinuousIndexF4___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: float

        """
        return _itkContinuousIndexPython.itkContinuousIndexF4___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkContinuousIndexPython.itkContinuousIndexF4___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkContinuousIndexPython.itkContinuousIndexF4___repr__(self)

# Register itkContinuousIndexF4 in _itkContinuousIndexPython:
_itkContinuousIndexPython.itkContinuousIndexF4_swigregister(itkContinuousIndexF4)
class itkContinuousIndexF5(itk.itkPointPython.itkPointF5):
    r"""Proxy of C++ itkContinuousIndexF5 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(self) -> itkContinuousIndexF5
        __init__(self, r) -> itkContinuousIndexF5

        Parameters
        ----------
        r: float const *

        __init__(self, index) -> itkContinuousIndexF5

        Parameters
        ----------
        index: itkIndex5 const &

        __init__(self, arg0) -> itkContinuousIndexF5

        Parameters
        ----------
        arg0: itkContinuousIndexF5 const &

        """
        _itkContinuousIndexPython.itkContinuousIndexF5_swiginit(self, _itkContinuousIndexPython.new_itkContinuousIndexF5(*args))
    __swig_destroy__ = _itkContinuousIndexPython.delete_itkContinuousIndexF5

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> float

        Parameters
        ----------
        d: unsigned long

        """
        return _itkContinuousIndexPython.itkContinuousIndexF5___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: float

        """
        return _itkContinuousIndexPython.itkContinuousIndexF5___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkContinuousIndexPython.itkContinuousIndexF5___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkContinuousIndexPython.itkContinuousIndexF5___repr__(self)

# Register itkContinuousIndexF5 in _itkContinuousIndexPython:
_itkContinuousIndexPython.itkContinuousIndexF5_swigregister(itkContinuousIndexF5)

