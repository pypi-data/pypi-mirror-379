# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKVTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVTKImageImportPython
else:
    import _itkVTKImageImportPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageSourcePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython

def itkVTKImageImportICVF22_New():
    return itkVTKImageImportICVF22.New()

class itkVTKImageImportICVF22(itk.itkImageSourcePython.itkImageSourceICVF22):
    r"""Proxy of C++ itkVTKImageImportICVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportICVF22_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportICVF22_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF22_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportICVF22_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF22_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportICVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportICVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportICVF22_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportICVF22

        Create a new object of the class itkVTKImageImportICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportICVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportICVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportICVF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportICVF22 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportICVF22_swigregister(itkVTKImageImportICVF22)

def itkVTKImageImportICVF23_New():
    return itkVTKImageImportICVF23.New()

class itkVTKImageImportICVF23(itk.itkImageSourcePython.itkImageSourceICVF23):
    r"""Proxy of C++ itkVTKImageImportICVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportICVF23_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportICVF23_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF23_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportICVF23_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF23_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportICVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportICVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportICVF23_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportICVF23

        Create a new object of the class itkVTKImageImportICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportICVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportICVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportICVF23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportICVF23 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportICVF23_swigregister(itkVTKImageImportICVF23)

def itkVTKImageImportICVF32_New():
    return itkVTKImageImportICVF32.New()

class itkVTKImageImportICVF32(itk.itkImageSourcePython.itkImageSourceICVF32):
    r"""Proxy of C++ itkVTKImageImportICVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportICVF32_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF32___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportICVF32_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF32_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportICVF32_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF32_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportICVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportICVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportICVF32_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportICVF32

        Create a new object of the class itkVTKImageImportICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportICVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportICVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportICVF32.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportICVF32 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportICVF32_swigregister(itkVTKImageImportICVF32)

def itkVTKImageImportICVF33_New():
    return itkVTKImageImportICVF33.New()

class itkVTKImageImportICVF33(itk.itkImageSourcePython.itkImageSourceICVF33):
    r"""Proxy of C++ itkVTKImageImportICVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportICVF33_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportICVF33_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF33_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportICVF33_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF33_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportICVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportICVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportICVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportICVF33

        Create a new object of the class itkVTKImageImportICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportICVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportICVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportICVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportICVF33 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportICVF33_swigregister(itkVTKImageImportICVF33)

def itkVTKImageImportICVF42_New():
    return itkVTKImageImportICVF42.New()

class itkVTKImageImportICVF42(itk.itkImageSourcePython.itkImageSourceICVF42):
    r"""Proxy of C++ itkVTKImageImportICVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportICVF42_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF42___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportICVF42_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF42_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportICVF42_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF42_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportICVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportICVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportICVF42_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportICVF42

        Create a new object of the class itkVTKImageImportICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportICVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportICVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportICVF42.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportICVF42 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportICVF42_swigregister(itkVTKImageImportICVF42)

def itkVTKImageImportICVF43_New():
    return itkVTKImageImportICVF43.New()

class itkVTKImageImportICVF43(itk.itkImageSourcePython.itkImageSourceICVF43):
    r"""Proxy of C++ itkVTKImageImportICVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportICVF43_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportICVF43_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF43_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportICVF43_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportICVF43_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportICVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportICVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportICVF43_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportICVF43

        Create a new object of the class itkVTKImageImportICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportICVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportICVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportICVF43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportICVF43 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportICVF43_swigregister(itkVTKImageImportICVF43)

def itkVTKImageImportID2_New():
    return itkVTKImageImportID2.New()

class itkVTKImageImportID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkVTKImageImportID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportID2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportID2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportID2_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportID2_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportID2_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportID2

        Create a new object of the class itkVTKImageImportID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportID2 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportID2_swigregister(itkVTKImageImportID2)

def itkVTKImageImportID3_New():
    return itkVTKImageImportID3.New()

class itkVTKImageImportID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkVTKImageImportID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportID3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportID3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportID3_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportID3_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportID3_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportID3

        Create a new object of the class itkVTKImageImportID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportID3 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportID3_swigregister(itkVTKImageImportID3)

def itkVTKImageImportIF2_New():
    return itkVTKImageImportIF2.New()

class itkVTKImageImportIF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkVTKImageImportIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportIF2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportIF2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIF2_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIF2_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIF2_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIF2

        Create a new object of the class itkVTKImageImportIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIF2 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIF2_swigregister(itkVTKImageImportIF2)

def itkVTKImageImportIF3_New():
    return itkVTKImageImportIF3.New()

class itkVTKImageImportIF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkVTKImageImportIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportIF3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportIF3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIF3_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIF3_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIF3_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIF3

        Create a new object of the class itkVTKImageImportIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIF3 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIF3_swigregister(itkVTKImageImportIF3)

def itkVTKImageImportIRGBAUC2_New():
    return itkVTKImageImportIRGBAUC2.New()

class itkVTKImageImportIRGBAUC2(itk.itkImageSourcePython.itkImageSourceIRGBAUC2):
    r"""Proxy of C++ itkVTKImageImportIRGBAUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportIRGBAUC2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBAUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportIRGBAUC2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBAUC2_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIRGBAUC2_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBAUC2_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIRGBAUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportIRGBAUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIRGBAUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIRGBAUC2

        Create a new object of the class itkVTKImageImportIRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIRGBAUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIRGBAUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIRGBAUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIRGBAUC2 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIRGBAUC2_swigregister(itkVTKImageImportIRGBAUC2)

def itkVTKImageImportIRGBAUC3_New():
    return itkVTKImageImportIRGBAUC3.New()

class itkVTKImageImportIRGBAUC3(itk.itkImageSourcePython.itkImageSourceIRGBAUC3):
    r"""Proxy of C++ itkVTKImageImportIRGBAUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportIRGBAUC3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBAUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportIRGBAUC3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBAUC3_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIRGBAUC3_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBAUC3_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIRGBAUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportIRGBAUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIRGBAUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIRGBAUC3

        Create a new object of the class itkVTKImageImportIRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIRGBAUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIRGBAUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIRGBAUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIRGBAUC3 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIRGBAUC3_swigregister(itkVTKImageImportIRGBAUC3)

def itkVTKImageImportIRGBUC2_New():
    return itkVTKImageImportIRGBUC2.New()

class itkVTKImageImportIRGBUC2(itk.itkImageSourcePython.itkImageSourceIRGBUC2):
    r"""Proxy of C++ itkVTKImageImportIRGBUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportIRGBUC2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportIRGBUC2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBUC2_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIRGBUC2_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBUC2_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIRGBUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportIRGBUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIRGBUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIRGBUC2

        Create a new object of the class itkVTKImageImportIRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIRGBUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIRGBUC2 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIRGBUC2_swigregister(itkVTKImageImportIRGBUC2)

def itkVTKImageImportIRGBUC3_New():
    return itkVTKImageImportIRGBUC3.New()

class itkVTKImageImportIRGBUC3(itk.itkImageSourcePython.itkImageSourceIRGBUC3):
    r"""Proxy of C++ itkVTKImageImportIRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportIRGBUC3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportIRGBUC3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBUC3_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIRGBUC3_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIRGBUC3_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIRGBUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportIRGBUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIRGBUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIRGBUC3

        Create a new object of the class itkVTKImageImportIRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIRGBUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIRGBUC3 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIRGBUC3_swigregister(itkVTKImageImportIRGBUC3)

def itkVTKImageImportISS2_New():
    return itkVTKImageImportISS2.New()

class itkVTKImageImportISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkVTKImageImportISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportISS2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportISS2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportISS2_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportISS2_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportISS2_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportISS2

        Create a new object of the class itkVTKImageImportISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportISS2 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportISS2_swigregister(itkVTKImageImportISS2)

def itkVTKImageImportISS3_New():
    return itkVTKImageImportISS3.New()

class itkVTKImageImportISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkVTKImageImportISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportISS3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportISS3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportISS3_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportISS3_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportISS3_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportISS3

        Create a new object of the class itkVTKImageImportISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportISS3 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportISS3_swigregister(itkVTKImageImportISS3)

def itkVTKImageImportIUC2_New():
    return itkVTKImageImportIUC2.New()

class itkVTKImageImportIUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkVTKImageImportIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportIUC2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportIUC2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIUC2_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIUC2_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIUC2_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportIUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIUC2

        Create a new object of the class itkVTKImageImportIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIUC2 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIUC2_swigregister(itkVTKImageImportIUC2)

def itkVTKImageImportIUC3_New():
    return itkVTKImageImportIUC3.New()

class itkVTKImageImportIUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkVTKImageImportIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportIUC3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportIUC3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIUC3_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIUC3_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIUC3_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIUC3

        Create a new object of the class itkVTKImageImportIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIUC3 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIUC3_swigregister(itkVTKImageImportIUC3)

def itkVTKImageImportIUL2_New():
    return itkVTKImageImportIUL2.New()

class itkVTKImageImportIUL2(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkVTKImageImportIUL2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportIUL2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIUL2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportIUL2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIUL2_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIUL2_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIUL2_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIUL2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportIUL2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIUL2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIUL2

        Create a new object of the class itkVTKImageImportIUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIUL2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIUL2 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIUL2_swigregister(itkVTKImageImportIUL2)

def itkVTKImageImportIUL3_New():
    return itkVTKImageImportIUL3.New()

class itkVTKImageImportIUL3(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkVTKImageImportIUL3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportIUL3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIUL3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportIUL3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIUL3_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIUL3_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIUL3_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIUL3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportIUL3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIUL3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIUL3

        Create a new object of the class itkVTKImageImportIUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIUL3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIUL3 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIUL3_swigregister(itkVTKImageImportIUL3)

def itkVTKImageImportIUS2_New():
    return itkVTKImageImportIUS2.New()

class itkVTKImageImportIUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkVTKImageImportIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportIUS2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportIUS2_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIUS2_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIUS2_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIUS2_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportIUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIUS2

        Create a new object of the class itkVTKImageImportIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIUS2 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIUS2_swigregister(itkVTKImageImportIUS2)

def itkVTKImageImportIUS3_New():
    return itkVTKImageImportIUS3.New()

class itkVTKImageImportIUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkVTKImageImportIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportIUS3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportIUS3_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIUS3_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIUS3_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIUS3_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIUS3

        Create a new object of the class itkVTKImageImportIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIUS3 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIUS3_swigregister(itkVTKImageImportIUS3)

def itkVTKImageImportIVF22_New():
    return itkVTKImageImportIVF22.New()

class itkVTKImageImportIVF22(itk.itkImageSourcePython.itkImageSourceIVF22):
    r"""Proxy of C++ itkVTKImageImportIVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportIVF22_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportIVF22_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF22_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIVF22_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF22_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportIVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIVF22_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIVF22

        Create a new object of the class itkVTKImageImportIVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIVF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIVF22 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIVF22_swigregister(itkVTKImageImportIVF22)

def itkVTKImageImportIVF23_New():
    return itkVTKImageImportIVF23.New()

class itkVTKImageImportIVF23(itk.itkImageSourcePython.itkImageSourceIVF23):
    r"""Proxy of C++ itkVTKImageImportIVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportIVF23_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportIVF23_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF23_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIVF23_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF23_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportIVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIVF23_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIVF23

        Create a new object of the class itkVTKImageImportIVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIVF23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIVF23 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIVF23_swigregister(itkVTKImageImportIVF23)

def itkVTKImageImportIVF32_New():
    return itkVTKImageImportIVF32.New()

class itkVTKImageImportIVF32(itk.itkImageSourcePython.itkImageSourceIVF32):
    r"""Proxy of C++ itkVTKImageImportIVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportIVF32_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF32___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportIVF32_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF32_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIVF32_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF32_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportIVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIVF32_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIVF32

        Create a new object of the class itkVTKImageImportIVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIVF32.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIVF32 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIVF32_swigregister(itkVTKImageImportIVF32)

def itkVTKImageImportIVF33_New():
    return itkVTKImageImportIVF33.New()

class itkVTKImageImportIVF33(itk.itkImageSourcePython.itkImageSourceIVF33):
    r"""Proxy of C++ itkVTKImageImportIVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportIVF33_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportIVF33_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF33_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIVF33_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF33_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportIVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIVF33

        Create a new object of the class itkVTKImageImportIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIVF33 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIVF33_swigregister(itkVTKImageImportIVF33)

def itkVTKImageImportIVF42_New():
    return itkVTKImageImportIVF42.New()

class itkVTKImageImportIVF42(itk.itkImageSourcePython.itkImageSourceIVF42):
    r"""Proxy of C++ itkVTKImageImportIVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportIVF42_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF42___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportIVF42_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF42_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIVF42_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF42_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportIVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIVF42_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIVF42

        Create a new object of the class itkVTKImageImportIVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIVF42.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIVF42 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIVF42_swigregister(itkVTKImageImportIVF42)

def itkVTKImageImportIVF43_New():
    return itkVTKImageImportIVF43.New()

class itkVTKImageImportIVF43(itk.itkImageSourcePython.itkImageSourceIVF43):
    r"""Proxy of C++ itkVTKImageImportIVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkVTKImageImportIVF43_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkVTKImageImportIVF43_Pointer"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF43_Clone(self)

    def SetCallbackUserData(self, _arg):
        r"""
        SetCallbackUserData(self, _arg)

        Parameters
        ----------
        _arg: void *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIVF43_SetCallbackUserData(self, _arg)

    def GetCallbackUserData(self):
        r"""GetCallbackUserData(self) -> void *"""
        return _itkVTKImageImportPython.itkVTKImageImportIVF43_GetCallbackUserData(self)
    __swig_destroy__ = _itkVTKImageImportPython.delete_itkVTKImageImportIVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkVTKImageImportIVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkVTKImageImportPython.itkVTKImageImportIVF43_cast(obj)

    def New(*args, **kargs):
        """New() -> itkVTKImageImportIVF43

        Create a new object of the class itkVTKImageImportIVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageImportIVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageImportIVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageImportIVF43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageImportIVF43 in _itkVTKImageImportPython:
_itkVTKImageImportPython.itkVTKImageImportIVF43_swigregister(itkVTKImageImportIVF43)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def vtk_image_import(*args,  update_information_callback=..., pipeline_modified_callback=..., whole_extent_callback=..., spacing_callback=..., float_spacing_callback=..., origin_callback=..., float_origin_callback=..., direction_callback=..., scalar_type_callback=..., number_of_components_callback=..., propagate_update_extent_callback=..., update_data_callback=..., data_extent_callback=..., buffer_pointer_callback=..., callback_user_data=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for VTKImageImport"""
    import itk

    kwarg_typehints = { 'update_information_callback':update_information_callback,'pipeline_modified_callback':pipeline_modified_callback,'whole_extent_callback':whole_extent_callback,'spacing_callback':spacing_callback,'float_spacing_callback':float_spacing_callback,'origin_callback':origin_callback,'float_origin_callback':float_origin_callback,'direction_callback':direction_callback,'scalar_type_callback':scalar_type_callback,'number_of_components_callback':number_of_components_callback,'propagate_update_extent_callback':propagate_update_extent_callback,'update_data_callback':update_data_callback,'data_extent_callback':data_extent_callback,'buffer_pointer_callback':buffer_pointer_callback,'callback_user_data':callback_user_data }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.VTKImageImport.New(*args, **kwargs)

    return instance.__internal_call__()

def vtk_image_import_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKVTK.VTKImageImport
    vtk_image_import.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    vtk_image_import.__doc__ = filter_object.__doc__



