# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKStatisticsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHistogramToLogProbabilityImageFilterPython
else:
    import _itkHistogramToLogProbabilityImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkHistogramPython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkSamplePython
import itk.itkFixedArrayPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkImageSourcePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython

def itkHistogramToLogProbabilityImageFilterHDID2_Superclass_New():
    return itkHistogramToLogProbabilityImageFilterHDID2_Superclass.New()

class itkHistogramToLogProbabilityImageFilterHDID2_Superclass(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHDID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToLogProbabilityImageFilterHDID2_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToLogProbabilityImageFilterHDID2_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramD const *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramLogProbabilityFunction< unsigned long > const &

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long >
        GetFunctor(self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long > const &
        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHDID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToLogProbabilityImageFilterHDID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHDID2_Superclass

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHDID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHDID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHDID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHDID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHDID2_Superclass in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_Superclass_swigregister(itkHistogramToLogProbabilityImageFilterHDID2_Superclass)

def itkHistogramToLogProbabilityImageFilterHDID3_Superclass_New():
    return itkHistogramToLogProbabilityImageFilterHDID3_Superclass.New()

class itkHistogramToLogProbabilityImageFilterHDID3_Superclass(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHDID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToLogProbabilityImageFilterHDID3_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToLogProbabilityImageFilterHDID3_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramD const *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramLogProbabilityFunction< unsigned long > const &

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long >
        GetFunctor(self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long > const &
        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHDID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToLogProbabilityImageFilterHDID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHDID3_Superclass

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHDID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHDID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHDID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHDID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHDID3_Superclass in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_Superclass_swigregister(itkHistogramToLogProbabilityImageFilterHDID3_Superclass)

def itkHistogramToLogProbabilityImageFilterHDID4_Superclass_New():
    return itkHistogramToLogProbabilityImageFilterHDID4_Superclass.New()

class itkHistogramToLogProbabilityImageFilterHDID4_Superclass(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHDID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToLogProbabilityImageFilterHDID4_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToLogProbabilityImageFilterHDID4_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID4_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramD const *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID4_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID4_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramLogProbabilityFunction< unsigned long > const &

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID4_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long >
        GetFunctor(self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long > const &
        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID4_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID4_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHDID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToLogProbabilityImageFilterHDID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHDID4_Superclass

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHDID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHDID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHDID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHDID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHDID4_Superclass in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID4_Superclass_swigregister(itkHistogramToLogProbabilityImageFilterHDID4_Superclass)

def itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_New():
    return itkHistogramToLogProbabilityImageFilterHDIF2_Superclass.New()

class itkHistogramToLogProbabilityImageFilterHDIF2_Superclass(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHDIF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramD const *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramLogProbabilityFunction< unsigned long,float > const &

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long,float >
        GetFunctor(self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long,float > const &
        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHDIF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToLogProbabilityImageFilterHDIF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHDIF2_Superclass

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHDIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHDIF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHDIF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHDIF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHDIF2_Superclass in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_swigregister(itkHistogramToLogProbabilityImageFilterHDIF2_Superclass)

def itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_New():
    return itkHistogramToLogProbabilityImageFilterHDIF3_Superclass.New()

class itkHistogramToLogProbabilityImageFilterHDIF3_Superclass(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHDIF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramD const *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramLogProbabilityFunction< unsigned long,float > const &

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long,float >
        GetFunctor(self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long,float > const &
        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHDIF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToLogProbabilityImageFilterHDIF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHDIF3_Superclass

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHDIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHDIF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHDIF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHDIF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHDIF3_Superclass in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_swigregister(itkHistogramToLogProbabilityImageFilterHDIF3_Superclass)

def itkHistogramToLogProbabilityImageFilterHDIF4_Superclass_New():
    return itkHistogramToLogProbabilityImageFilterHDIF4_Superclass.New()

class itkHistogramToLogProbabilityImageFilterHDIF4_Superclass(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHDIF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToLogProbabilityImageFilterHDIF4_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToLogProbabilityImageFilterHDIF4_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF4_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramD const *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF4_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF4_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramLogProbabilityFunction< unsigned long,float > const &

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF4_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long,float >
        GetFunctor(self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long,float > const &
        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF4_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF4_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHDIF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToLogProbabilityImageFilterHDIF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHDIF4_Superclass

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHDIF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHDIF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHDIF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHDIF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHDIF4_Superclass in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF4_Superclass_swigregister(itkHistogramToLogProbabilityImageFilterHDIF4_Superclass)

def itkHistogramToLogProbabilityImageFilterHFID2_Superclass_New():
    return itkHistogramToLogProbabilityImageFilterHFID2_Superclass.New()

class itkHistogramToLogProbabilityImageFilterHFID2_Superclass(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHFID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToLogProbabilityImageFilterHFID2_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToLogProbabilityImageFilterHFID2_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramF const *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramLogProbabilityFunction< unsigned long > const &

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long >
        GetFunctor(self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long > const &
        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHFID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToLogProbabilityImageFilterHFID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHFID2_Superclass

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHFID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHFID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHFID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHFID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHFID2_Superclass in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_Superclass_swigregister(itkHistogramToLogProbabilityImageFilterHFID2_Superclass)

def itkHistogramToLogProbabilityImageFilterHFID3_Superclass_New():
    return itkHistogramToLogProbabilityImageFilterHFID3_Superclass.New()

class itkHistogramToLogProbabilityImageFilterHFID3_Superclass(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHFID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToLogProbabilityImageFilterHFID3_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToLogProbabilityImageFilterHFID3_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramF const *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramLogProbabilityFunction< unsigned long > const &

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long >
        GetFunctor(self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long > const &
        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHFID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToLogProbabilityImageFilterHFID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHFID3_Superclass

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHFID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHFID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHFID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHFID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHFID3_Superclass in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_Superclass_swigregister(itkHistogramToLogProbabilityImageFilterHFID3_Superclass)

def itkHistogramToLogProbabilityImageFilterHFID4_Superclass_New():
    return itkHistogramToLogProbabilityImageFilterHFID4_Superclass.New()

class itkHistogramToLogProbabilityImageFilterHFID4_Superclass(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHFID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToLogProbabilityImageFilterHFID4_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToLogProbabilityImageFilterHFID4_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID4_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramF const *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID4_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID4_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramLogProbabilityFunction< unsigned long > const &

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID4_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long >
        GetFunctor(self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long > const &
        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID4_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID4_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHFID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToLogProbabilityImageFilterHFID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHFID4_Superclass

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHFID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHFID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHFID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHFID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHFID4_Superclass in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID4_Superclass_swigregister(itkHistogramToLogProbabilityImageFilterHFID4_Superclass)

def itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_New():
    return itkHistogramToLogProbabilityImageFilterHFIF2_Superclass.New()

class itkHistogramToLogProbabilityImageFilterHFIF2_Superclass(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHFIF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramF const *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramLogProbabilityFunction< unsigned long,float > const &

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long,float >
        GetFunctor(self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long,float > const &
        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHFIF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToLogProbabilityImageFilterHFIF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHFIF2_Superclass

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHFIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHFIF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHFIF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHFIF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHFIF2_Superclass in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_swigregister(itkHistogramToLogProbabilityImageFilterHFIF2_Superclass)

def itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_New():
    return itkHistogramToLogProbabilityImageFilterHFIF3_Superclass.New()

class itkHistogramToLogProbabilityImageFilterHFIF3_Superclass(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHFIF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramF const *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramLogProbabilityFunction< unsigned long,float > const &

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long,float >
        GetFunctor(self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long,float > const &
        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHFIF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToLogProbabilityImageFilterHFIF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHFIF3_Superclass

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHFIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHFIF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHFIF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHFIF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHFIF3_Superclass in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_swigregister(itkHistogramToLogProbabilityImageFilterHFIF3_Superclass)

def itkHistogramToLogProbabilityImageFilterHFIF4_Superclass_New():
    return itkHistogramToLogProbabilityImageFilterHFIF4_Superclass.New()

class itkHistogramToLogProbabilityImageFilterHFIF4_Superclass(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHFIF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToLogProbabilityImageFilterHFIF4_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToLogProbabilityImageFilterHFIF4_Superclass_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF4_Superclass_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkHistogramF const *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF4_Superclass_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF4_Superclass_GetInput(self)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: itk::Function::HistogramLogProbabilityFunction< unsigned long,float > const &

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF4_Superclass_SetFunctor(self, functor)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long,float >
        GetFunctor(self) -> itk::Function::HistogramLogProbabilityFunction< unsigned long,float > const &
        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF4_Superclass_GetFunctor(self, *args)

    def SetTotalFrequency(self, n):
        r"""
        SetTotalFrequency(self, n)

        Parameters
        ----------
        n: unsigned long

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF4_Superclass_SetTotalFrequency(self, n)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHFIF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToLogProbabilityImageFilterHFIF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHFIF4_Superclass

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHFIF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHFIF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHFIF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHFIF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHFIF4_Superclass in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF4_Superclass_swigregister(itkHistogramToLogProbabilityImageFilterHFIF4_Superclass)

def itkHistogramToLogProbabilityImageFilterHDID2_New():
    return itkHistogramToLogProbabilityImageFilterHDID2.New()

class itkHistogramToLogProbabilityImageFilterHDID2(itkHistogramToLogProbabilityImageFilterHDID2_Superclass):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHDID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToLogProbabilityImageFilterHDID2_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToLogProbabilityImageFilterHDID2_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_Clone(self)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHDID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToLogProbabilityImageFilterHDID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHDID2

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHDID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHDID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHDID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHDID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHDID2 in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_swigregister(itkHistogramToLogProbabilityImageFilterHDID2)

def itkHistogramToLogProbabilityImageFilterHDID3_New():
    return itkHistogramToLogProbabilityImageFilterHDID3.New()

class itkHistogramToLogProbabilityImageFilterHDID3(itkHistogramToLogProbabilityImageFilterHDID3_Superclass):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHDID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToLogProbabilityImageFilterHDID3_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToLogProbabilityImageFilterHDID3_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_Clone(self)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHDID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToLogProbabilityImageFilterHDID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHDID3

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHDID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHDID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHDID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHDID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHDID3 in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_swigregister(itkHistogramToLogProbabilityImageFilterHDID3)

def itkHistogramToLogProbabilityImageFilterHDID4_New():
    return itkHistogramToLogProbabilityImageFilterHDID4.New()

class itkHistogramToLogProbabilityImageFilterHDID4(itkHistogramToLogProbabilityImageFilterHDID4_Superclass):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHDID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToLogProbabilityImageFilterHDID4_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToLogProbabilityImageFilterHDID4_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID4_Clone(self)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHDID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToLogProbabilityImageFilterHDID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHDID4

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHDID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHDID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHDID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHDID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHDID4 in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID4_swigregister(itkHistogramToLogProbabilityImageFilterHDID4)

def itkHistogramToLogProbabilityImageFilterHDIF2_New():
    return itkHistogramToLogProbabilityImageFilterHDIF2.New()

class itkHistogramToLogProbabilityImageFilterHDIF2(itkHistogramToLogProbabilityImageFilterHDIF2_Superclass):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHDIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToLogProbabilityImageFilterHDIF2_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToLogProbabilityImageFilterHDIF2_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Clone(self)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHDIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToLogProbabilityImageFilterHDIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHDIF2

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHDIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHDIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHDIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHDIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHDIF2 in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_swigregister(itkHistogramToLogProbabilityImageFilterHDIF2)

def itkHistogramToLogProbabilityImageFilterHDIF3_New():
    return itkHistogramToLogProbabilityImageFilterHDIF3.New()

class itkHistogramToLogProbabilityImageFilterHDIF3(itkHistogramToLogProbabilityImageFilterHDIF3_Superclass):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHDIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToLogProbabilityImageFilterHDIF3_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToLogProbabilityImageFilterHDIF3_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Clone(self)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHDIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToLogProbabilityImageFilterHDIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHDIF3

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHDIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHDIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHDIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHDIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHDIF3 in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_swigregister(itkHistogramToLogProbabilityImageFilterHDIF3)

def itkHistogramToLogProbabilityImageFilterHDIF4_New():
    return itkHistogramToLogProbabilityImageFilterHDIF4.New()

class itkHistogramToLogProbabilityImageFilterHDIF4(itkHistogramToLogProbabilityImageFilterHDIF4_Superclass):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHDIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToLogProbabilityImageFilterHDIF4_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToLogProbabilityImageFilterHDIF4_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF4_Clone(self)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHDIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToLogProbabilityImageFilterHDIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHDIF4

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHDIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHDIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHDIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHDIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHDIF4 in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF4_swigregister(itkHistogramToLogProbabilityImageFilterHDIF4)

def itkHistogramToLogProbabilityImageFilterHFID2_New():
    return itkHistogramToLogProbabilityImageFilterHFID2.New()

class itkHistogramToLogProbabilityImageFilterHFID2(itkHistogramToLogProbabilityImageFilterHFID2_Superclass):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHFID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToLogProbabilityImageFilterHFID2_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToLogProbabilityImageFilterHFID2_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_Clone(self)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHFID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToLogProbabilityImageFilterHFID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHFID2

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHFID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHFID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHFID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHFID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHFID2 in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_swigregister(itkHistogramToLogProbabilityImageFilterHFID2)

def itkHistogramToLogProbabilityImageFilterHFID3_New():
    return itkHistogramToLogProbabilityImageFilterHFID3.New()

class itkHistogramToLogProbabilityImageFilterHFID3(itkHistogramToLogProbabilityImageFilterHFID3_Superclass):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHFID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToLogProbabilityImageFilterHFID3_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToLogProbabilityImageFilterHFID3_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_Clone(self)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHFID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToLogProbabilityImageFilterHFID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHFID3

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHFID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHFID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHFID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHFID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHFID3 in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_swigregister(itkHistogramToLogProbabilityImageFilterHFID3)

def itkHistogramToLogProbabilityImageFilterHFID4_New():
    return itkHistogramToLogProbabilityImageFilterHFID4.New()

class itkHistogramToLogProbabilityImageFilterHFID4(itkHistogramToLogProbabilityImageFilterHFID4_Superclass):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHFID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToLogProbabilityImageFilterHFID4_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToLogProbabilityImageFilterHFID4_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID4_Clone(self)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHFID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToLogProbabilityImageFilterHFID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHFID4

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHFID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHFID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHFID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHFID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHFID4 in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID4_swigregister(itkHistogramToLogProbabilityImageFilterHFID4)

def itkHistogramToLogProbabilityImageFilterHFIF2_New():
    return itkHistogramToLogProbabilityImageFilterHFIF2.New()

class itkHistogramToLogProbabilityImageFilterHFIF2(itkHistogramToLogProbabilityImageFilterHFIF2_Superclass):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHFIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToLogProbabilityImageFilterHFIF2_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToLogProbabilityImageFilterHFIF2_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Clone(self)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHFIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToLogProbabilityImageFilterHFIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHFIF2

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHFIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHFIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHFIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHFIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHFIF2 in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_swigregister(itkHistogramToLogProbabilityImageFilterHFIF2)

def itkHistogramToLogProbabilityImageFilterHFIF3_New():
    return itkHistogramToLogProbabilityImageFilterHFIF3.New()

class itkHistogramToLogProbabilityImageFilterHFIF3(itkHistogramToLogProbabilityImageFilterHFIF3_Superclass):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHFIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToLogProbabilityImageFilterHFIF3_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToLogProbabilityImageFilterHFIF3_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Clone(self)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHFIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToLogProbabilityImageFilterHFIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHFIF3

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHFIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHFIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHFIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHFIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHFIF3 in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_swigregister(itkHistogramToLogProbabilityImageFilterHFIF3)

def itkHistogramToLogProbabilityImageFilterHFIF4_New():
    return itkHistogramToLogProbabilityImageFilterHFIF4.New()

class itkHistogramToLogProbabilityImageFilterHFIF4(itkHistogramToLogProbabilityImageFilterHFIF4_Superclass):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHFIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToLogProbabilityImageFilterHFIF4_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToLogProbabilityImageFilterHFIF4_Pointer"""
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF4_Clone(self)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHFIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToLogProbabilityImageFilterHFIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHFIF4

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHFIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHFIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHFIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHFIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHFIF4 in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF4_swigregister(itkHistogramToLogProbabilityImageFilterHFIF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def histogram_to_image_filter(*args,  functor=..., total_frequency: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for HistogramToImageFilter"""
    import itk

    kwarg_typehints = { 'functor':functor,'total_frequency':total_frequency }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.HistogramToImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def histogram_to_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKStatistics.HistogramToImageFilter
    histogram_to_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    histogram_to_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def histogram_to_log_probability_image_filter(*args,  functor=..., total_frequency: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for HistogramToLogProbabilityImageFilter"""
    import itk

    kwarg_typehints = { 'functor':functor,'total_frequency':total_frequency }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.HistogramToLogProbabilityImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def histogram_to_log_probability_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKStatistics.HistogramToLogProbabilityImageFilter
    histogram_to_log_probability_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    histogram_to_log_probability_image_filter.__doc__ = filter_object.__doc__



