# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImportImageFilterPython
else:
    import _itkImportImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkImageSourcePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython

def itkImportImageFilterD2_New():
    return itkImportImageFilterD2.New()

class itkImportImageFilterD2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImportImageFilterD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImportImageFilterD2_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImportImageFilterD2_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterD2_Clone(self)

    def GetImportPointer(self):
        r"""GetImportPointer(self) -> double *"""
        return _itkImportImageFilterPython.itkImportImageFilterD2_GetImportPointer(self)

    def SetImportPointer(self, ptr, num, LetImageContainerManageMemory):
        r"""
        SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

        Parameters
        ----------
        ptr: double *
        num: unsigned long
        LetImageContainerManageMemory: bool

        """
        return _itkImportImageFilterPython.itkImportImageFilterD2_SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterD2_SetRegion(self, region)

    def GetRegion(self):
        r"""GetRegion(self) -> itkImageRegion2"""
        return _itkImportImageFilterPython.itkImportImageFilterD2_GetRegion(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _itkImportImageFilterPython.itkImportImageFilterD2_GetSpacing(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD2

        SetSpacing(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterD2_SetSpacing(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _itkImportImageFilterPython.itkImportImageFilterD2_GetOrigin(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD2

        SetOrigin(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterD2_SetOrigin(self, *args)

    def SetDirection(self, direction):
        r"""
        SetDirection(self, direction)

        Parameters
        ----------
        direction: itkMatrixD22 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterD2_SetDirection(self, direction)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _itkImportImageFilterPython.itkImportImageFilterD2_GetDirection(self)
    __swig_destroy__ = _itkImportImageFilterPython.delete_itkImportImageFilterD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImportImageFilterD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImportImageFilterPython.itkImportImageFilterD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImportImageFilterD2

        Create a new object of the class itkImportImageFilterD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImportImageFilterD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImportImageFilterD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImportImageFilterD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImportImageFilterD2 in _itkImportImageFilterPython:
_itkImportImageFilterPython.itkImportImageFilterD2_swigregister(itkImportImageFilterD2)

def itkImportImageFilterD3_New():
    return itkImportImageFilterD3.New()

class itkImportImageFilterD3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImportImageFilterD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImportImageFilterD3_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImportImageFilterD3_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterD3_Clone(self)

    def GetImportPointer(self):
        r"""GetImportPointer(self) -> double *"""
        return _itkImportImageFilterPython.itkImportImageFilterD3_GetImportPointer(self)

    def SetImportPointer(self, ptr, num, LetImageContainerManageMemory):
        r"""
        SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

        Parameters
        ----------
        ptr: double *
        num: unsigned long
        LetImageContainerManageMemory: bool

        """
        return _itkImportImageFilterPython.itkImportImageFilterD3_SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterD3_SetRegion(self, region)

    def GetRegion(self):
        r"""GetRegion(self) -> itkImageRegion3"""
        return _itkImportImageFilterPython.itkImportImageFilterD3_GetRegion(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkImportImageFilterPython.itkImportImageFilterD3_GetSpacing(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD3

        SetSpacing(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterD3_SetSpacing(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkImportImageFilterPython.itkImportImageFilterD3_GetOrigin(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD3

        SetOrigin(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterD3_SetOrigin(self, *args)

    def SetDirection(self, direction):
        r"""
        SetDirection(self, direction)

        Parameters
        ----------
        direction: itkMatrixD33 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterD3_SetDirection(self, direction)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkImportImageFilterPython.itkImportImageFilterD3_GetDirection(self)
    __swig_destroy__ = _itkImportImageFilterPython.delete_itkImportImageFilterD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImportImageFilterD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImportImageFilterPython.itkImportImageFilterD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImportImageFilterD3

        Create a new object of the class itkImportImageFilterD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImportImageFilterD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImportImageFilterD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImportImageFilterD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImportImageFilterD3 in _itkImportImageFilterPython:
_itkImportImageFilterPython.itkImportImageFilterD3_swigregister(itkImportImageFilterD3)

def itkImportImageFilterD4_New():
    return itkImportImageFilterD4.New()

class itkImportImageFilterD4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImportImageFilterD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImportImageFilterD4_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImportImageFilterD4_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterD4_Clone(self)

    def GetImportPointer(self):
        r"""GetImportPointer(self) -> double *"""
        return _itkImportImageFilterPython.itkImportImageFilterD4_GetImportPointer(self)

    def SetImportPointer(self, ptr, num, LetImageContainerManageMemory):
        r"""
        SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

        Parameters
        ----------
        ptr: double *
        num: unsigned long
        LetImageContainerManageMemory: bool

        """
        return _itkImportImageFilterPython.itkImportImageFilterD4_SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterD4_SetRegion(self, region)

    def GetRegion(self):
        r"""GetRegion(self) -> itkImageRegion4"""
        return _itkImportImageFilterPython.itkImportImageFilterD4_GetRegion(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkImportImageFilterPython.itkImportImageFilterD4_GetSpacing(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD4

        SetSpacing(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterD4_SetSpacing(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkImportImageFilterPython.itkImportImageFilterD4_GetOrigin(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD4

        SetOrigin(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterD4_SetOrigin(self, *args)

    def SetDirection(self, direction):
        r"""
        SetDirection(self, direction)

        Parameters
        ----------
        direction: itkMatrixD44 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterD4_SetDirection(self, direction)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkImportImageFilterPython.itkImportImageFilterD4_GetDirection(self)
    __swig_destroy__ = _itkImportImageFilterPython.delete_itkImportImageFilterD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImportImageFilterD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImportImageFilterPython.itkImportImageFilterD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImportImageFilterD4

        Create a new object of the class itkImportImageFilterD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImportImageFilterD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImportImageFilterD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImportImageFilterD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImportImageFilterD4 in _itkImportImageFilterPython:
_itkImportImageFilterPython.itkImportImageFilterD4_swigregister(itkImportImageFilterD4)

def itkImportImageFilterF2_New():
    return itkImportImageFilterF2.New()

class itkImportImageFilterF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImportImageFilterF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImportImageFilterF2_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImportImageFilterF2_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterF2_Clone(self)

    def GetImportPointer(self):
        r"""GetImportPointer(self) -> float *"""
        return _itkImportImageFilterPython.itkImportImageFilterF2_GetImportPointer(self)

    def SetImportPointer(self, ptr, num, LetImageContainerManageMemory):
        r"""
        SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

        Parameters
        ----------
        ptr: float *
        num: unsigned long
        LetImageContainerManageMemory: bool

        """
        return _itkImportImageFilterPython.itkImportImageFilterF2_SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterF2_SetRegion(self, region)

    def GetRegion(self):
        r"""GetRegion(self) -> itkImageRegion2"""
        return _itkImportImageFilterPython.itkImportImageFilterF2_GetRegion(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _itkImportImageFilterPython.itkImportImageFilterF2_GetSpacing(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD2

        SetSpacing(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterF2_SetSpacing(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _itkImportImageFilterPython.itkImportImageFilterF2_GetOrigin(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD2

        SetOrigin(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterF2_SetOrigin(self, *args)

    def SetDirection(self, direction):
        r"""
        SetDirection(self, direction)

        Parameters
        ----------
        direction: itkMatrixD22 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterF2_SetDirection(self, direction)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _itkImportImageFilterPython.itkImportImageFilterF2_GetDirection(self)
    __swig_destroy__ = _itkImportImageFilterPython.delete_itkImportImageFilterF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImportImageFilterF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImportImageFilterPython.itkImportImageFilterF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImportImageFilterF2

        Create a new object of the class itkImportImageFilterF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImportImageFilterF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImportImageFilterF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImportImageFilterF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImportImageFilterF2 in _itkImportImageFilterPython:
_itkImportImageFilterPython.itkImportImageFilterF2_swigregister(itkImportImageFilterF2)

def itkImportImageFilterF3_New():
    return itkImportImageFilterF3.New()

class itkImportImageFilterF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImportImageFilterF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImportImageFilterF3_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImportImageFilterF3_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterF3_Clone(self)

    def GetImportPointer(self):
        r"""GetImportPointer(self) -> float *"""
        return _itkImportImageFilterPython.itkImportImageFilterF3_GetImportPointer(self)

    def SetImportPointer(self, ptr, num, LetImageContainerManageMemory):
        r"""
        SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

        Parameters
        ----------
        ptr: float *
        num: unsigned long
        LetImageContainerManageMemory: bool

        """
        return _itkImportImageFilterPython.itkImportImageFilterF3_SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterF3_SetRegion(self, region)

    def GetRegion(self):
        r"""GetRegion(self) -> itkImageRegion3"""
        return _itkImportImageFilterPython.itkImportImageFilterF3_GetRegion(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkImportImageFilterPython.itkImportImageFilterF3_GetSpacing(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD3

        SetSpacing(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterF3_SetSpacing(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkImportImageFilterPython.itkImportImageFilterF3_GetOrigin(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD3

        SetOrigin(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterF3_SetOrigin(self, *args)

    def SetDirection(self, direction):
        r"""
        SetDirection(self, direction)

        Parameters
        ----------
        direction: itkMatrixD33 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterF3_SetDirection(self, direction)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkImportImageFilterPython.itkImportImageFilterF3_GetDirection(self)
    __swig_destroy__ = _itkImportImageFilterPython.delete_itkImportImageFilterF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImportImageFilterF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImportImageFilterPython.itkImportImageFilterF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImportImageFilterF3

        Create a new object of the class itkImportImageFilterF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImportImageFilterF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImportImageFilterF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImportImageFilterF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImportImageFilterF3 in _itkImportImageFilterPython:
_itkImportImageFilterPython.itkImportImageFilterF3_swigregister(itkImportImageFilterF3)

def itkImportImageFilterF4_New():
    return itkImportImageFilterF4.New()

class itkImportImageFilterF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImportImageFilterF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImportImageFilterF4_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImportImageFilterF4_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterF4_Clone(self)

    def GetImportPointer(self):
        r"""GetImportPointer(self) -> float *"""
        return _itkImportImageFilterPython.itkImportImageFilterF4_GetImportPointer(self)

    def SetImportPointer(self, ptr, num, LetImageContainerManageMemory):
        r"""
        SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

        Parameters
        ----------
        ptr: float *
        num: unsigned long
        LetImageContainerManageMemory: bool

        """
        return _itkImportImageFilterPython.itkImportImageFilterF4_SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterF4_SetRegion(self, region)

    def GetRegion(self):
        r"""GetRegion(self) -> itkImageRegion4"""
        return _itkImportImageFilterPython.itkImportImageFilterF4_GetRegion(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkImportImageFilterPython.itkImportImageFilterF4_GetSpacing(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD4

        SetSpacing(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterF4_SetSpacing(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkImportImageFilterPython.itkImportImageFilterF4_GetOrigin(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD4

        SetOrigin(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterF4_SetOrigin(self, *args)

    def SetDirection(self, direction):
        r"""
        SetDirection(self, direction)

        Parameters
        ----------
        direction: itkMatrixD44 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterF4_SetDirection(self, direction)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkImportImageFilterPython.itkImportImageFilterF4_GetDirection(self)
    __swig_destroy__ = _itkImportImageFilterPython.delete_itkImportImageFilterF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImportImageFilterF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImportImageFilterPython.itkImportImageFilterF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImportImageFilterF4

        Create a new object of the class itkImportImageFilterF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImportImageFilterF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImportImageFilterF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImportImageFilterF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImportImageFilterF4 in _itkImportImageFilterPython:
_itkImportImageFilterPython.itkImportImageFilterF4_swigregister(itkImportImageFilterF4)

def itkImportImageFilterSS2_New():
    return itkImportImageFilterSS2.New()

class itkImportImageFilterSS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImportImageFilterSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImportImageFilterSS2_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImportImageFilterSS2_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterSS2_Clone(self)

    def GetImportPointer(self):
        r"""GetImportPointer(self) -> short *"""
        return _itkImportImageFilterPython.itkImportImageFilterSS2_GetImportPointer(self)

    def SetImportPointer(self, ptr, num, LetImageContainerManageMemory):
        r"""
        SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

        Parameters
        ----------
        ptr: short *
        num: unsigned long
        LetImageContainerManageMemory: bool

        """
        return _itkImportImageFilterPython.itkImportImageFilterSS2_SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterSS2_SetRegion(self, region)

    def GetRegion(self):
        r"""GetRegion(self) -> itkImageRegion2"""
        return _itkImportImageFilterPython.itkImportImageFilterSS2_GetRegion(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _itkImportImageFilterPython.itkImportImageFilterSS2_GetSpacing(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD2

        SetSpacing(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterSS2_SetSpacing(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _itkImportImageFilterPython.itkImportImageFilterSS2_GetOrigin(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD2

        SetOrigin(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterSS2_SetOrigin(self, *args)

    def SetDirection(self, direction):
        r"""
        SetDirection(self, direction)

        Parameters
        ----------
        direction: itkMatrixD22 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterSS2_SetDirection(self, direction)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _itkImportImageFilterPython.itkImportImageFilterSS2_GetDirection(self)
    __swig_destroy__ = _itkImportImageFilterPython.delete_itkImportImageFilterSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImportImageFilterSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImportImageFilterPython.itkImportImageFilterSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImportImageFilterSS2

        Create a new object of the class itkImportImageFilterSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImportImageFilterSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImportImageFilterSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImportImageFilterSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImportImageFilterSS2 in _itkImportImageFilterPython:
_itkImportImageFilterPython.itkImportImageFilterSS2_swigregister(itkImportImageFilterSS2)

def itkImportImageFilterSS3_New():
    return itkImportImageFilterSS3.New()

class itkImportImageFilterSS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImportImageFilterSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImportImageFilterSS3_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImportImageFilterSS3_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterSS3_Clone(self)

    def GetImportPointer(self):
        r"""GetImportPointer(self) -> short *"""
        return _itkImportImageFilterPython.itkImportImageFilterSS3_GetImportPointer(self)

    def SetImportPointer(self, ptr, num, LetImageContainerManageMemory):
        r"""
        SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

        Parameters
        ----------
        ptr: short *
        num: unsigned long
        LetImageContainerManageMemory: bool

        """
        return _itkImportImageFilterPython.itkImportImageFilterSS3_SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterSS3_SetRegion(self, region)

    def GetRegion(self):
        r"""GetRegion(self) -> itkImageRegion3"""
        return _itkImportImageFilterPython.itkImportImageFilterSS3_GetRegion(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkImportImageFilterPython.itkImportImageFilterSS3_GetSpacing(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD3

        SetSpacing(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterSS3_SetSpacing(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkImportImageFilterPython.itkImportImageFilterSS3_GetOrigin(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD3

        SetOrigin(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterSS3_SetOrigin(self, *args)

    def SetDirection(self, direction):
        r"""
        SetDirection(self, direction)

        Parameters
        ----------
        direction: itkMatrixD33 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterSS3_SetDirection(self, direction)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkImportImageFilterPython.itkImportImageFilterSS3_GetDirection(self)
    __swig_destroy__ = _itkImportImageFilterPython.delete_itkImportImageFilterSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImportImageFilterSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImportImageFilterPython.itkImportImageFilterSS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImportImageFilterSS3

        Create a new object of the class itkImportImageFilterSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImportImageFilterSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImportImageFilterSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImportImageFilterSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImportImageFilterSS3 in _itkImportImageFilterPython:
_itkImportImageFilterPython.itkImportImageFilterSS3_swigregister(itkImportImageFilterSS3)

def itkImportImageFilterSS4_New():
    return itkImportImageFilterSS4.New()

class itkImportImageFilterSS4(itk.itkImageSourcePython.itkImageSourceISS4):
    r"""Proxy of C++ itkImportImageFilterSS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImportImageFilterSS4_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterSS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImportImageFilterSS4_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterSS4_Clone(self)

    def GetImportPointer(self):
        r"""GetImportPointer(self) -> short *"""
        return _itkImportImageFilterPython.itkImportImageFilterSS4_GetImportPointer(self)

    def SetImportPointer(self, ptr, num, LetImageContainerManageMemory):
        r"""
        SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

        Parameters
        ----------
        ptr: short *
        num: unsigned long
        LetImageContainerManageMemory: bool

        """
        return _itkImportImageFilterPython.itkImportImageFilterSS4_SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterSS4_SetRegion(self, region)

    def GetRegion(self):
        r"""GetRegion(self) -> itkImageRegion4"""
        return _itkImportImageFilterPython.itkImportImageFilterSS4_GetRegion(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkImportImageFilterPython.itkImportImageFilterSS4_GetSpacing(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD4

        SetSpacing(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterSS4_SetSpacing(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkImportImageFilterPython.itkImportImageFilterSS4_GetOrigin(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD4

        SetOrigin(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterSS4_SetOrigin(self, *args)

    def SetDirection(self, direction):
        r"""
        SetDirection(self, direction)

        Parameters
        ----------
        direction: itkMatrixD44 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterSS4_SetDirection(self, direction)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkImportImageFilterPython.itkImportImageFilterSS4_GetDirection(self)
    __swig_destroy__ = _itkImportImageFilterPython.delete_itkImportImageFilterSS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImportImageFilterSS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImportImageFilterPython.itkImportImageFilterSS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImportImageFilterSS4

        Create a new object of the class itkImportImageFilterSS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImportImageFilterSS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImportImageFilterSS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImportImageFilterSS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImportImageFilterSS4 in _itkImportImageFilterPython:
_itkImportImageFilterPython.itkImportImageFilterSS4_swigregister(itkImportImageFilterSS4)

def itkImportImageFilterUC2_New():
    return itkImportImageFilterUC2.New()

class itkImportImageFilterUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImportImageFilterUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImportImageFilterUC2_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImportImageFilterUC2_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterUC2_Clone(self)

    def GetImportPointer(self):
        r"""GetImportPointer(self) -> unsigned char *"""
        return _itkImportImageFilterPython.itkImportImageFilterUC2_GetImportPointer(self)

    def SetImportPointer(self, ptr, num, LetImageContainerManageMemory):
        r"""
        SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

        Parameters
        ----------
        ptr: unsigned char *
        num: unsigned long
        LetImageContainerManageMemory: bool

        """
        return _itkImportImageFilterPython.itkImportImageFilterUC2_SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterUC2_SetRegion(self, region)

    def GetRegion(self):
        r"""GetRegion(self) -> itkImageRegion2"""
        return _itkImportImageFilterPython.itkImportImageFilterUC2_GetRegion(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _itkImportImageFilterPython.itkImportImageFilterUC2_GetSpacing(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD2

        SetSpacing(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterUC2_SetSpacing(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _itkImportImageFilterPython.itkImportImageFilterUC2_GetOrigin(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD2

        SetOrigin(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterUC2_SetOrigin(self, *args)

    def SetDirection(self, direction):
        r"""
        SetDirection(self, direction)

        Parameters
        ----------
        direction: itkMatrixD22 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterUC2_SetDirection(self, direction)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _itkImportImageFilterPython.itkImportImageFilterUC2_GetDirection(self)
    __swig_destroy__ = _itkImportImageFilterPython.delete_itkImportImageFilterUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImportImageFilterUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImportImageFilterPython.itkImportImageFilterUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImportImageFilterUC2

        Create a new object of the class itkImportImageFilterUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImportImageFilterUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImportImageFilterUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImportImageFilterUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImportImageFilterUC2 in _itkImportImageFilterPython:
_itkImportImageFilterPython.itkImportImageFilterUC2_swigregister(itkImportImageFilterUC2)

def itkImportImageFilterUC3_New():
    return itkImportImageFilterUC3.New()

class itkImportImageFilterUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImportImageFilterUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImportImageFilterUC3_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImportImageFilterUC3_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterUC3_Clone(self)

    def GetImportPointer(self):
        r"""GetImportPointer(self) -> unsigned char *"""
        return _itkImportImageFilterPython.itkImportImageFilterUC3_GetImportPointer(self)

    def SetImportPointer(self, ptr, num, LetImageContainerManageMemory):
        r"""
        SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

        Parameters
        ----------
        ptr: unsigned char *
        num: unsigned long
        LetImageContainerManageMemory: bool

        """
        return _itkImportImageFilterPython.itkImportImageFilterUC3_SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterUC3_SetRegion(self, region)

    def GetRegion(self):
        r"""GetRegion(self) -> itkImageRegion3"""
        return _itkImportImageFilterPython.itkImportImageFilterUC3_GetRegion(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkImportImageFilterPython.itkImportImageFilterUC3_GetSpacing(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD3

        SetSpacing(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterUC3_SetSpacing(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkImportImageFilterPython.itkImportImageFilterUC3_GetOrigin(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD3

        SetOrigin(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterUC3_SetOrigin(self, *args)

    def SetDirection(self, direction):
        r"""
        SetDirection(self, direction)

        Parameters
        ----------
        direction: itkMatrixD33 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterUC3_SetDirection(self, direction)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkImportImageFilterPython.itkImportImageFilterUC3_GetDirection(self)
    __swig_destroy__ = _itkImportImageFilterPython.delete_itkImportImageFilterUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImportImageFilterUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImportImageFilterPython.itkImportImageFilterUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImportImageFilterUC3

        Create a new object of the class itkImportImageFilterUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImportImageFilterUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImportImageFilterUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImportImageFilterUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImportImageFilterUC3 in _itkImportImageFilterPython:
_itkImportImageFilterPython.itkImportImageFilterUC3_swigregister(itkImportImageFilterUC3)

def itkImportImageFilterUC4_New():
    return itkImportImageFilterUC4.New()

class itkImportImageFilterUC4(itk.itkImageSourcePython.itkImageSourceIUC4):
    r"""Proxy of C++ itkImportImageFilterUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImportImageFilterUC4_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImportImageFilterUC4_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterUC4_Clone(self)

    def GetImportPointer(self):
        r"""GetImportPointer(self) -> unsigned char *"""
        return _itkImportImageFilterPython.itkImportImageFilterUC4_GetImportPointer(self)

    def SetImportPointer(self, ptr, num, LetImageContainerManageMemory):
        r"""
        SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

        Parameters
        ----------
        ptr: unsigned char *
        num: unsigned long
        LetImageContainerManageMemory: bool

        """
        return _itkImportImageFilterPython.itkImportImageFilterUC4_SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterUC4_SetRegion(self, region)

    def GetRegion(self):
        r"""GetRegion(self) -> itkImageRegion4"""
        return _itkImportImageFilterPython.itkImportImageFilterUC4_GetRegion(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkImportImageFilterPython.itkImportImageFilterUC4_GetSpacing(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD4

        SetSpacing(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterUC4_SetSpacing(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkImportImageFilterPython.itkImportImageFilterUC4_GetOrigin(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD4

        SetOrigin(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterUC4_SetOrigin(self, *args)

    def SetDirection(self, direction):
        r"""
        SetDirection(self, direction)

        Parameters
        ----------
        direction: itkMatrixD44 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterUC4_SetDirection(self, direction)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkImportImageFilterPython.itkImportImageFilterUC4_GetDirection(self)
    __swig_destroy__ = _itkImportImageFilterPython.delete_itkImportImageFilterUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImportImageFilterUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImportImageFilterPython.itkImportImageFilterUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImportImageFilterUC4

        Create a new object of the class itkImportImageFilterUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImportImageFilterUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImportImageFilterUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImportImageFilterUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImportImageFilterUC4 in _itkImportImageFilterPython:
_itkImportImageFilterPython.itkImportImageFilterUC4_swigregister(itkImportImageFilterUC4)

def itkImportImageFilterUS2_New():
    return itkImportImageFilterUS2.New()

class itkImportImageFilterUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImportImageFilterUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImportImageFilterUS2_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImportImageFilterUS2_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterUS2_Clone(self)

    def GetImportPointer(self):
        r"""GetImportPointer(self) -> unsigned short *"""
        return _itkImportImageFilterPython.itkImportImageFilterUS2_GetImportPointer(self)

    def SetImportPointer(self, ptr, num, LetImageContainerManageMemory):
        r"""
        SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

        Parameters
        ----------
        ptr: unsigned short *
        num: unsigned long
        LetImageContainerManageMemory: bool

        """
        return _itkImportImageFilterPython.itkImportImageFilterUS2_SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion2 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterUS2_SetRegion(self, region)

    def GetRegion(self):
        r"""GetRegion(self) -> itkImageRegion2"""
        return _itkImportImageFilterPython.itkImportImageFilterUS2_GetRegion(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _itkImportImageFilterPython.itkImportImageFilterUS2_GetSpacing(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD2

        SetSpacing(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterUS2_SetSpacing(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _itkImportImageFilterPython.itkImportImageFilterUS2_GetOrigin(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD2

        SetOrigin(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterUS2_SetOrigin(self, *args)

    def SetDirection(self, direction):
        r"""
        SetDirection(self, direction)

        Parameters
        ----------
        direction: itkMatrixD22 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterUS2_SetDirection(self, direction)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _itkImportImageFilterPython.itkImportImageFilterUS2_GetDirection(self)
    __swig_destroy__ = _itkImportImageFilterPython.delete_itkImportImageFilterUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImportImageFilterUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImportImageFilterPython.itkImportImageFilterUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImportImageFilterUS2

        Create a new object of the class itkImportImageFilterUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImportImageFilterUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImportImageFilterUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImportImageFilterUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImportImageFilterUS2 in _itkImportImageFilterPython:
_itkImportImageFilterPython.itkImportImageFilterUS2_swigregister(itkImportImageFilterUS2)

def itkImportImageFilterUS3_New():
    return itkImportImageFilterUS3.New()

class itkImportImageFilterUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImportImageFilterUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImportImageFilterUS3_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImportImageFilterUS3_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterUS3_Clone(self)

    def GetImportPointer(self):
        r"""GetImportPointer(self) -> unsigned short *"""
        return _itkImportImageFilterPython.itkImportImageFilterUS3_GetImportPointer(self)

    def SetImportPointer(self, ptr, num, LetImageContainerManageMemory):
        r"""
        SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

        Parameters
        ----------
        ptr: unsigned short *
        num: unsigned long
        LetImageContainerManageMemory: bool

        """
        return _itkImportImageFilterPython.itkImportImageFilterUS3_SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion3 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterUS3_SetRegion(self, region)

    def GetRegion(self):
        r"""GetRegion(self) -> itkImageRegion3"""
        return _itkImportImageFilterPython.itkImportImageFilterUS3_GetRegion(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkImportImageFilterPython.itkImportImageFilterUS3_GetSpacing(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD3

        SetSpacing(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterUS3_SetSpacing(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkImportImageFilterPython.itkImportImageFilterUS3_GetOrigin(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD3

        SetOrigin(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterUS3_SetOrigin(self, *args)

    def SetDirection(self, direction):
        r"""
        SetDirection(self, direction)

        Parameters
        ----------
        direction: itkMatrixD33 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterUS3_SetDirection(self, direction)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkImportImageFilterPython.itkImportImageFilterUS3_GetDirection(self)
    __swig_destroy__ = _itkImportImageFilterPython.delete_itkImportImageFilterUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImportImageFilterUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImportImageFilterPython.itkImportImageFilterUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImportImageFilterUS3

        Create a new object of the class itkImportImageFilterUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImportImageFilterUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImportImageFilterUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImportImageFilterUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImportImageFilterUS3 in _itkImportImageFilterPython:
_itkImportImageFilterPython.itkImportImageFilterUS3_swigregister(itkImportImageFilterUS3)

def itkImportImageFilterUS4_New():
    return itkImportImageFilterUS4.New()

class itkImportImageFilterUS4(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkImportImageFilterUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImportImageFilterUS4_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImportImageFilterUS4_Pointer"""
        return _itkImportImageFilterPython.itkImportImageFilterUS4_Clone(self)

    def GetImportPointer(self):
        r"""GetImportPointer(self) -> unsigned short *"""
        return _itkImportImageFilterPython.itkImportImageFilterUS4_GetImportPointer(self)

    def SetImportPointer(self, ptr, num, LetImageContainerManageMemory):
        r"""
        SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

        Parameters
        ----------
        ptr: unsigned short *
        num: unsigned long
        LetImageContainerManageMemory: bool

        """
        return _itkImportImageFilterPython.itkImportImageFilterUS4_SetImportPointer(self, ptr, num, LetImageContainerManageMemory)

    def SetRegion(self, region):
        r"""
        SetRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion4 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterUS4_SetRegion(self, region)

    def GetRegion(self):
        r"""GetRegion(self) -> itkImageRegion4"""
        return _itkImportImageFilterPython.itkImportImageFilterUS4_GetRegion(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkImportImageFilterPython.itkImportImageFilterUS4_GetSpacing(self)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD4

        SetSpacing(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterUS4_SetSpacing(self, *args)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkImportImageFilterPython.itkImportImageFilterUS4_GetOrigin(self)

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD4

        SetOrigin(self, data)

        Parameters
        ----------
        data: float const *

        """
        return _itkImportImageFilterPython.itkImportImageFilterUS4_SetOrigin(self, *args)

    def SetDirection(self, direction):
        r"""
        SetDirection(self, direction)

        Parameters
        ----------
        direction: itkMatrixD44 const &

        """
        return _itkImportImageFilterPython.itkImportImageFilterUS4_SetDirection(self, direction)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkImportImageFilterPython.itkImportImageFilterUS4_GetDirection(self)
    __swig_destroy__ = _itkImportImageFilterPython.delete_itkImportImageFilterUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImportImageFilterUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImportImageFilterPython.itkImportImageFilterUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImportImageFilterUS4

        Create a new object of the class itkImportImageFilterUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImportImageFilterUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImportImageFilterUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImportImageFilterUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImportImageFilterUS4 in _itkImportImageFilterPython:
_itkImportImageFilterPython.itkImportImageFilterUS4_swigregister(itkImportImageFilterUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def import_image_filter(*args,  import_pointer=..., region: itkt.ImageRegion=..., spacing: Sequence[float]=..., origin: Sequence[float]=..., direction=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ImportImageFilter"""
    import itk

    kwarg_typehints = { 'import_pointer':import_pointer,'region':region,'spacing':spacing,'origin':origin,'direction':direction }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ImportImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def import_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKCommon.ImportImageFilter
    import_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    import_image_filter.__doc__ = filter_object.__doc__



