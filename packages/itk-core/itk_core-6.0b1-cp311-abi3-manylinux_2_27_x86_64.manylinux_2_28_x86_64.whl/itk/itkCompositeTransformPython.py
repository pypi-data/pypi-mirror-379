# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKTransformPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkCompositeTransformPython
else:
    import _itkCompositeTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkArrayPython
import itk.itkVariableLengthVectorPython
import itk.itkMultiTransformPython
import itk.itkOptimizerParametersPython
import itk.itkTransformBasePython
import itk.itkArray2DPython
import itk.itkDiffusionTensor3DPython

def itkCompositeTransformD2_New():
    return itkCompositeTransformD2.New()

class itkCompositeTransformD2(itk.itkMultiTransformPython.itkMultiTransformD22):
    r"""Proxy of C++ itkCompositeTransformD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCompositeTransformD2_Pointer"""
        return _itkCompositeTransformPython.itkCompositeTransformD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCompositeTransformD2_Pointer"""
        return _itkCompositeTransformPython.itkCompositeTransformD2_Clone(self)

    def SetNthTransformToOptimize(self, i, state):
        r"""
        SetNthTransformToOptimize(self, i, state)

        Parameters
        ----------
        i: unsigned long
        state: bool

        """
        return _itkCompositeTransformPython.itkCompositeTransformD2_SetNthTransformToOptimize(self, i, state)

    def SetNthTransformToOptimizeOn(self, i):
        r"""
        SetNthTransformToOptimizeOn(self, i)

        Parameters
        ----------
        i: unsigned long

        """
        return _itkCompositeTransformPython.itkCompositeTransformD2_SetNthTransformToOptimizeOn(self, i)

    def SetNthTransformToOptimizeOff(self, i):
        r"""
        SetNthTransformToOptimizeOff(self, i)

        Parameters
        ----------
        i: unsigned long

        """
        return _itkCompositeTransformPython.itkCompositeTransformD2_SetNthTransformToOptimizeOff(self, i)

    def SetAllTransformsToOptimize(self, state):
        r"""
        SetAllTransformsToOptimize(self, state)

        Parameters
        ----------
        state: bool

        """
        return _itkCompositeTransformPython.itkCompositeTransformD2_SetAllTransformsToOptimize(self, state)

    def SetAllTransformsToOptimizeOn(self):
        r"""SetAllTransformsToOptimizeOn(self)"""
        return _itkCompositeTransformPython.itkCompositeTransformD2_SetAllTransformsToOptimizeOn(self)

    def SetAllTransformsToOptimizeOff(self):
        r"""SetAllTransformsToOptimizeOff(self)"""
        return _itkCompositeTransformPython.itkCompositeTransformD2_SetAllTransformsToOptimizeOff(self)

    def SetOnlyMostRecentTransformToOptimizeOn(self):
        r"""SetOnlyMostRecentTransformToOptimizeOn(self)"""
        return _itkCompositeTransformPython.itkCompositeTransformD2_SetOnlyMostRecentTransformToOptimizeOn(self)

    def GetNthTransformToOptimize(self, i):
        r"""
        GetNthTransformToOptimize(self, i) -> bool

        Parameters
        ----------
        i: unsigned long

        """
        return _itkCompositeTransformPython.itkCompositeTransformD2_GetNthTransformToOptimize(self, i)

    def GetTransformsToOptimizeFlags(self):
        r"""GetTransformsToOptimizeFlags(self) -> std::deque< bool > const &"""
        return _itkCompositeTransformPython.itkCompositeTransformD2_GetTransformsToOptimizeFlags(self)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkCompositeTransformD2 *

        """
        return _itkCompositeTransformPython.itkCompositeTransformD2_GetInverse(self, inverse)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorD2

        Parameters
        ----------
        arg0: itkVectorD2 const &

        TransformVector(self, inputVector) -> vnl_vector_fixed< double,2 >

        Parameters
        ----------
        inputVector: vnl_vector_fixed< double,2 > const &

        TransformVector(self, inputVector) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputVector: itkVariableLengthVectorD const &

        TransformVector(self, inputVector, inputPoint) -> itkVectorD2

        Parameters
        ----------
        inputVector: itkVectorD2 const &
        inputPoint: itkPointD2 const &

        TransformVector(self, inputVector, inputPoint) -> vnl_vector_fixed< double,2 >

        Parameters
        ----------
        inputVector: vnl_vector_fixed< double,2 > const &
        inputPoint: itkPointD2 const &

        TransformVector(self, inputVector, inputPoint) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputVector: itkVariableLengthVectorD const &
        inputPoint: itkPointD2 const &

        """
        return _itkCompositeTransformPython.itkCompositeTransformD2_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorD2

        Parameters
        ----------
        arg0: itkCovariantVectorD2 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformCovariantVector(self, inputVector, inputPoint) -> itkCovariantVectorD2

        Parameters
        ----------
        inputVector: itkCovariantVectorD2 const &
        inputPoint: itkPointD2 const &

        TransformCovariantVector(self, inputVector, inputPoint) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputVector: itkVariableLengthVectorD const &
        inputPoint: itkPointD2 const &

        """
        return _itkCompositeTransformPython.itkCompositeTransformD2_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, inputTensor) -> itkDiffusionTensor3DD

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DD const &

        TransformDiffusionTensor3D(self, inputTensor) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &

        TransformDiffusionTensor3D(self, inputTensor, inputPoint) -> itkDiffusionTensor3DD

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DD const &
        inputPoint: itkPointD2 const &

        TransformDiffusionTensor3D(self, inputTensor, inputPoint) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        inputPoint: itkPointD2 const &

        """
        return _itkCompositeTransformPython.itkCompositeTransformD2_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor) -> itkSymmetricSecondRankTensorD2

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorD2 const &

        TransformSymmetricSecondRankTensor(self, inputTensor) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &

        TransformSymmetricSecondRankTensor(self, inputTensor, inputPoint) -> itkSymmetricSecondRankTensorD2

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorD2 const &
        inputPoint: itkPointD2 const &

        TransformSymmetricSecondRankTensor(self, inputTensor, inputPoint) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        inputPoint: itkPointD2 const &

        """
        return _itkCompositeTransformPython.itkCompositeTransformD2_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkCompositeTransformPython.itkCompositeTransformD2_UpdateTransformParameters(self, update, factor)

    def FlattenTransformQueue(self):
        r"""FlattenTransformQueue(self)"""
        return _itkCompositeTransformPython.itkCompositeTransformD2_FlattenTransformQueue(self)
    __swig_destroy__ = _itkCompositeTransformPython.delete_itkCompositeTransformD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCompositeTransformD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCompositeTransformPython.itkCompositeTransformD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCompositeTransformD2

        Create a new object of the class itkCompositeTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCompositeTransformD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCompositeTransformD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCompositeTransformD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCompositeTransformD2 in _itkCompositeTransformPython:
_itkCompositeTransformPython.itkCompositeTransformD2_swigregister(itkCompositeTransformD2)

def itkCompositeTransformD3_New():
    return itkCompositeTransformD3.New()

class itkCompositeTransformD3(itk.itkMultiTransformPython.itkMultiTransformD33):
    r"""Proxy of C++ itkCompositeTransformD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCompositeTransformD3_Pointer"""
        return _itkCompositeTransformPython.itkCompositeTransformD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCompositeTransformD3_Pointer"""
        return _itkCompositeTransformPython.itkCompositeTransformD3_Clone(self)

    def SetNthTransformToOptimize(self, i, state):
        r"""
        SetNthTransformToOptimize(self, i, state)

        Parameters
        ----------
        i: unsigned long
        state: bool

        """
        return _itkCompositeTransformPython.itkCompositeTransformD3_SetNthTransformToOptimize(self, i, state)

    def SetNthTransformToOptimizeOn(self, i):
        r"""
        SetNthTransformToOptimizeOn(self, i)

        Parameters
        ----------
        i: unsigned long

        """
        return _itkCompositeTransformPython.itkCompositeTransformD3_SetNthTransformToOptimizeOn(self, i)

    def SetNthTransformToOptimizeOff(self, i):
        r"""
        SetNthTransformToOptimizeOff(self, i)

        Parameters
        ----------
        i: unsigned long

        """
        return _itkCompositeTransformPython.itkCompositeTransformD3_SetNthTransformToOptimizeOff(self, i)

    def SetAllTransformsToOptimize(self, state):
        r"""
        SetAllTransformsToOptimize(self, state)

        Parameters
        ----------
        state: bool

        """
        return _itkCompositeTransformPython.itkCompositeTransformD3_SetAllTransformsToOptimize(self, state)

    def SetAllTransformsToOptimizeOn(self):
        r"""SetAllTransformsToOptimizeOn(self)"""
        return _itkCompositeTransformPython.itkCompositeTransformD3_SetAllTransformsToOptimizeOn(self)

    def SetAllTransformsToOptimizeOff(self):
        r"""SetAllTransformsToOptimizeOff(self)"""
        return _itkCompositeTransformPython.itkCompositeTransformD3_SetAllTransformsToOptimizeOff(self)

    def SetOnlyMostRecentTransformToOptimizeOn(self):
        r"""SetOnlyMostRecentTransformToOptimizeOn(self)"""
        return _itkCompositeTransformPython.itkCompositeTransformD3_SetOnlyMostRecentTransformToOptimizeOn(self)

    def GetNthTransformToOptimize(self, i):
        r"""
        GetNthTransformToOptimize(self, i) -> bool

        Parameters
        ----------
        i: unsigned long

        """
        return _itkCompositeTransformPython.itkCompositeTransformD3_GetNthTransformToOptimize(self, i)

    def GetTransformsToOptimizeFlags(self):
        r"""GetTransformsToOptimizeFlags(self) -> std::deque< bool > const &"""
        return _itkCompositeTransformPython.itkCompositeTransformD3_GetTransformsToOptimizeFlags(self)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkCompositeTransformD3 *

        """
        return _itkCompositeTransformPython.itkCompositeTransformD3_GetInverse(self, inverse)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorD3

        Parameters
        ----------
        arg0: itkVectorD3 const &

        TransformVector(self, inputVector) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        inputVector: vnl_vector_fixed< double,3 > const &

        TransformVector(self, inputVector) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputVector: itkVariableLengthVectorD const &

        TransformVector(self, inputVector, inputPoint) -> itkVectorD3

        Parameters
        ----------
        inputVector: itkVectorD3 const &
        inputPoint: itkPointD3 const &

        TransformVector(self, inputVector, inputPoint) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        inputVector: vnl_vector_fixed< double,3 > const &
        inputPoint: itkPointD3 const &

        TransformVector(self, inputVector, inputPoint) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputVector: itkVariableLengthVectorD const &
        inputPoint: itkPointD3 const &

        """
        return _itkCompositeTransformPython.itkCompositeTransformD3_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorD3

        Parameters
        ----------
        arg0: itkCovariantVectorD3 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformCovariantVector(self, inputVector, inputPoint) -> itkCovariantVectorD3

        Parameters
        ----------
        inputVector: itkCovariantVectorD3 const &
        inputPoint: itkPointD3 const &

        TransformCovariantVector(self, inputVector, inputPoint) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputVector: itkVariableLengthVectorD const &
        inputPoint: itkPointD3 const &

        """
        return _itkCompositeTransformPython.itkCompositeTransformD3_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, inputTensor) -> itkDiffusionTensor3DD

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DD const &

        TransformDiffusionTensor3D(self, inputTensor) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &

        TransformDiffusionTensor3D(self, inputTensor, inputPoint) -> itkDiffusionTensor3DD

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DD const &
        inputPoint: itkPointD3 const &

        TransformDiffusionTensor3D(self, inputTensor, inputPoint) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        inputPoint: itkPointD3 const &

        """
        return _itkCompositeTransformPython.itkCompositeTransformD3_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorD3 const &

        TransformSymmetricSecondRankTensor(self, inputTensor) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &

        TransformSymmetricSecondRankTensor(self, inputTensor, inputPoint) -> itkSymmetricSecondRankTensorD3

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorD3 const &
        inputPoint: itkPointD3 const &

        TransformSymmetricSecondRankTensor(self, inputTensor, inputPoint) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        inputPoint: itkPointD3 const &

        """
        return _itkCompositeTransformPython.itkCompositeTransformD3_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkCompositeTransformPython.itkCompositeTransformD3_UpdateTransformParameters(self, update, factor)

    def FlattenTransformQueue(self):
        r"""FlattenTransformQueue(self)"""
        return _itkCompositeTransformPython.itkCompositeTransformD3_FlattenTransformQueue(self)
    __swig_destroy__ = _itkCompositeTransformPython.delete_itkCompositeTransformD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCompositeTransformD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCompositeTransformPython.itkCompositeTransformD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCompositeTransformD3

        Create a new object of the class itkCompositeTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCompositeTransformD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCompositeTransformD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCompositeTransformD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCompositeTransformD3 in _itkCompositeTransformPython:
_itkCompositeTransformPython.itkCompositeTransformD3_swigregister(itkCompositeTransformD3)

def itkCompositeTransformD4_New():
    return itkCompositeTransformD4.New()

class itkCompositeTransformD4(itk.itkMultiTransformPython.itkMultiTransformD44):
    r"""Proxy of C++ itkCompositeTransformD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCompositeTransformD4_Pointer"""
        return _itkCompositeTransformPython.itkCompositeTransformD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCompositeTransformD4_Pointer"""
        return _itkCompositeTransformPython.itkCompositeTransformD4_Clone(self)

    def SetNthTransformToOptimize(self, i, state):
        r"""
        SetNthTransformToOptimize(self, i, state)

        Parameters
        ----------
        i: unsigned long
        state: bool

        """
        return _itkCompositeTransformPython.itkCompositeTransformD4_SetNthTransformToOptimize(self, i, state)

    def SetNthTransformToOptimizeOn(self, i):
        r"""
        SetNthTransformToOptimizeOn(self, i)

        Parameters
        ----------
        i: unsigned long

        """
        return _itkCompositeTransformPython.itkCompositeTransformD4_SetNthTransformToOptimizeOn(self, i)

    def SetNthTransformToOptimizeOff(self, i):
        r"""
        SetNthTransformToOptimizeOff(self, i)

        Parameters
        ----------
        i: unsigned long

        """
        return _itkCompositeTransformPython.itkCompositeTransformD4_SetNthTransformToOptimizeOff(self, i)

    def SetAllTransformsToOptimize(self, state):
        r"""
        SetAllTransformsToOptimize(self, state)

        Parameters
        ----------
        state: bool

        """
        return _itkCompositeTransformPython.itkCompositeTransformD4_SetAllTransformsToOptimize(self, state)

    def SetAllTransformsToOptimizeOn(self):
        r"""SetAllTransformsToOptimizeOn(self)"""
        return _itkCompositeTransformPython.itkCompositeTransformD4_SetAllTransformsToOptimizeOn(self)

    def SetAllTransformsToOptimizeOff(self):
        r"""SetAllTransformsToOptimizeOff(self)"""
        return _itkCompositeTransformPython.itkCompositeTransformD4_SetAllTransformsToOptimizeOff(self)

    def SetOnlyMostRecentTransformToOptimizeOn(self):
        r"""SetOnlyMostRecentTransformToOptimizeOn(self)"""
        return _itkCompositeTransformPython.itkCompositeTransformD4_SetOnlyMostRecentTransformToOptimizeOn(self)

    def GetNthTransformToOptimize(self, i):
        r"""
        GetNthTransformToOptimize(self, i) -> bool

        Parameters
        ----------
        i: unsigned long

        """
        return _itkCompositeTransformPython.itkCompositeTransformD4_GetNthTransformToOptimize(self, i)

    def GetTransformsToOptimizeFlags(self):
        r"""GetTransformsToOptimizeFlags(self) -> std::deque< bool > const &"""
        return _itkCompositeTransformPython.itkCompositeTransformD4_GetTransformsToOptimizeFlags(self)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkCompositeTransformD4 *

        """
        return _itkCompositeTransformPython.itkCompositeTransformD4_GetInverse(self, inverse)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorD4

        Parameters
        ----------
        arg0: itkVectorD4 const &

        TransformVector(self, inputVector) -> vnl_vector_fixed< double,4 >

        Parameters
        ----------
        inputVector: vnl_vector_fixed< double,4 > const &

        TransformVector(self, inputVector) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputVector: itkVariableLengthVectorD const &

        TransformVector(self, inputVector, inputPoint) -> itkVectorD4

        Parameters
        ----------
        inputVector: itkVectorD4 const &
        inputPoint: itkPointD4 const &

        TransformVector(self, inputVector, inputPoint) -> vnl_vector_fixed< double,4 >

        Parameters
        ----------
        inputVector: vnl_vector_fixed< double,4 > const &
        inputPoint: itkPointD4 const &

        TransformVector(self, inputVector, inputPoint) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputVector: itkVariableLengthVectorD const &
        inputPoint: itkPointD4 const &

        """
        return _itkCompositeTransformPython.itkCompositeTransformD4_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorD4

        Parameters
        ----------
        arg0: itkCovariantVectorD4 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorD

        Parameters
        ----------
        arg0: itkVariableLengthVectorD const &

        TransformCovariantVector(self, inputVector, inputPoint) -> itkCovariantVectorD4

        Parameters
        ----------
        inputVector: itkCovariantVectorD4 const &
        inputPoint: itkPointD4 const &

        TransformCovariantVector(self, inputVector, inputPoint) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputVector: itkVariableLengthVectorD const &
        inputPoint: itkPointD4 const &

        """
        return _itkCompositeTransformPython.itkCompositeTransformD4_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, inputTensor) -> itkDiffusionTensor3DD

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DD const &

        TransformDiffusionTensor3D(self, inputTensor) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &

        TransformDiffusionTensor3D(self, inputTensor, inputPoint) -> itkDiffusionTensor3DD

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DD const &
        inputPoint: itkPointD4 const &

        TransformDiffusionTensor3D(self, inputTensor, inputPoint) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        inputPoint: itkPointD4 const &

        """
        return _itkCompositeTransformPython.itkCompositeTransformD4_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor) -> itkSymmetricSecondRankTensorD4

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorD4 const &

        TransformSymmetricSecondRankTensor(self, inputTensor) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &

        TransformSymmetricSecondRankTensor(self, inputTensor, inputPoint) -> itkSymmetricSecondRankTensorD4

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorD4 const &
        inputPoint: itkPointD4 const &

        TransformSymmetricSecondRankTensor(self, inputTensor, inputPoint) -> itkVariableLengthVectorD

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorD const &
        inputPoint: itkPointD4 const &

        """
        return _itkCompositeTransformPython.itkCompositeTransformD4_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkCompositeTransformPython.itkCompositeTransformD4_UpdateTransformParameters(self, update, factor)

    def FlattenTransformQueue(self):
        r"""FlattenTransformQueue(self)"""
        return _itkCompositeTransformPython.itkCompositeTransformD4_FlattenTransformQueue(self)
    __swig_destroy__ = _itkCompositeTransformPython.delete_itkCompositeTransformD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCompositeTransformD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCompositeTransformPython.itkCompositeTransformD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCompositeTransformD4

        Create a new object of the class itkCompositeTransformD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCompositeTransformD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCompositeTransformD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCompositeTransformD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCompositeTransformD4 in _itkCompositeTransformPython:
_itkCompositeTransformPython.itkCompositeTransformD4_swigregister(itkCompositeTransformD4)

def itkCompositeTransformF2_New():
    return itkCompositeTransformF2.New()

class itkCompositeTransformF2(itk.itkMultiTransformPython.itkMultiTransformF22):
    r"""Proxy of C++ itkCompositeTransformF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCompositeTransformF2_Pointer"""
        return _itkCompositeTransformPython.itkCompositeTransformF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCompositeTransformF2_Pointer"""
        return _itkCompositeTransformPython.itkCompositeTransformF2_Clone(self)

    def SetNthTransformToOptimize(self, i, state):
        r"""
        SetNthTransformToOptimize(self, i, state)

        Parameters
        ----------
        i: unsigned long
        state: bool

        """
        return _itkCompositeTransformPython.itkCompositeTransformF2_SetNthTransformToOptimize(self, i, state)

    def SetNthTransformToOptimizeOn(self, i):
        r"""
        SetNthTransformToOptimizeOn(self, i)

        Parameters
        ----------
        i: unsigned long

        """
        return _itkCompositeTransformPython.itkCompositeTransformF2_SetNthTransformToOptimizeOn(self, i)

    def SetNthTransformToOptimizeOff(self, i):
        r"""
        SetNthTransformToOptimizeOff(self, i)

        Parameters
        ----------
        i: unsigned long

        """
        return _itkCompositeTransformPython.itkCompositeTransformF2_SetNthTransformToOptimizeOff(self, i)

    def SetAllTransformsToOptimize(self, state):
        r"""
        SetAllTransformsToOptimize(self, state)

        Parameters
        ----------
        state: bool

        """
        return _itkCompositeTransformPython.itkCompositeTransformF2_SetAllTransformsToOptimize(self, state)

    def SetAllTransformsToOptimizeOn(self):
        r"""SetAllTransformsToOptimizeOn(self)"""
        return _itkCompositeTransformPython.itkCompositeTransformF2_SetAllTransformsToOptimizeOn(self)

    def SetAllTransformsToOptimizeOff(self):
        r"""SetAllTransformsToOptimizeOff(self)"""
        return _itkCompositeTransformPython.itkCompositeTransformF2_SetAllTransformsToOptimizeOff(self)

    def SetOnlyMostRecentTransformToOptimizeOn(self):
        r"""SetOnlyMostRecentTransformToOptimizeOn(self)"""
        return _itkCompositeTransformPython.itkCompositeTransformF2_SetOnlyMostRecentTransformToOptimizeOn(self)

    def GetNthTransformToOptimize(self, i):
        r"""
        GetNthTransformToOptimize(self, i) -> bool

        Parameters
        ----------
        i: unsigned long

        """
        return _itkCompositeTransformPython.itkCompositeTransformF2_GetNthTransformToOptimize(self, i)

    def GetTransformsToOptimizeFlags(self):
        r"""GetTransformsToOptimizeFlags(self) -> std::deque< bool > const &"""
        return _itkCompositeTransformPython.itkCompositeTransformF2_GetTransformsToOptimizeFlags(self)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkCompositeTransformF2 *

        """
        return _itkCompositeTransformPython.itkCompositeTransformF2_GetInverse(self, inverse)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorF2

        Parameters
        ----------
        arg0: itkVectorF2 const &

        TransformVector(self, inputVector) -> vnl_vector_fixed< float,2 >

        Parameters
        ----------
        inputVector: vnl_vector_fixed< float,2 > const &

        TransformVector(self, inputVector) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputVector: itkVariableLengthVectorF const &

        TransformVector(self, inputVector, inputPoint) -> itkVectorF2

        Parameters
        ----------
        inputVector: itkVectorF2 const &
        inputPoint: itkPointF2 const &

        TransformVector(self, inputVector, inputPoint) -> vnl_vector_fixed< float,2 >

        Parameters
        ----------
        inputVector: vnl_vector_fixed< float,2 > const &
        inputPoint: itkPointF2 const &

        TransformVector(self, inputVector, inputPoint) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputVector: itkVariableLengthVectorF const &
        inputPoint: itkPointF2 const &

        """
        return _itkCompositeTransformPython.itkCompositeTransformF2_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorF2

        Parameters
        ----------
        arg0: itkCovariantVectorF2 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformCovariantVector(self, inputVector, inputPoint) -> itkCovariantVectorF2

        Parameters
        ----------
        inputVector: itkCovariantVectorF2 const &
        inputPoint: itkPointF2 const &

        TransformCovariantVector(self, inputVector, inputPoint) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputVector: itkVariableLengthVectorF const &
        inputPoint: itkPointF2 const &

        """
        return _itkCompositeTransformPython.itkCompositeTransformF2_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, inputTensor) -> itkDiffusionTensor3DF

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DF const &

        TransformDiffusionTensor3D(self, inputTensor) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &

        TransformDiffusionTensor3D(self, inputTensor, inputPoint) -> itkDiffusionTensor3DF

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DF const &
        inputPoint: itkPointF2 const &

        TransformDiffusionTensor3D(self, inputTensor, inputPoint) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        inputPoint: itkPointF2 const &

        """
        return _itkCompositeTransformPython.itkCompositeTransformF2_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor) -> itkSymmetricSecondRankTensorF2

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorF2 const &

        TransformSymmetricSecondRankTensor(self, inputTensor) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &

        TransformSymmetricSecondRankTensor(self, inputTensor, inputPoint) -> itkSymmetricSecondRankTensorF2

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorF2 const &
        inputPoint: itkPointF2 const &

        TransformSymmetricSecondRankTensor(self, inputTensor, inputPoint) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        inputPoint: itkPointF2 const &

        """
        return _itkCompositeTransformPython.itkCompositeTransformF2_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayF const &
        factor: float

        """
        return _itkCompositeTransformPython.itkCompositeTransformF2_UpdateTransformParameters(self, update, factor)

    def FlattenTransformQueue(self):
        r"""FlattenTransformQueue(self)"""
        return _itkCompositeTransformPython.itkCompositeTransformF2_FlattenTransformQueue(self)
    __swig_destroy__ = _itkCompositeTransformPython.delete_itkCompositeTransformF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCompositeTransformF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCompositeTransformPython.itkCompositeTransformF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCompositeTransformF2

        Create a new object of the class itkCompositeTransformF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCompositeTransformF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCompositeTransformF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCompositeTransformF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCompositeTransformF2 in _itkCompositeTransformPython:
_itkCompositeTransformPython.itkCompositeTransformF2_swigregister(itkCompositeTransformF2)

def itkCompositeTransformF3_New():
    return itkCompositeTransformF3.New()

class itkCompositeTransformF3(itk.itkMultiTransformPython.itkMultiTransformF33):
    r"""Proxy of C++ itkCompositeTransformF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCompositeTransformF3_Pointer"""
        return _itkCompositeTransformPython.itkCompositeTransformF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCompositeTransformF3_Pointer"""
        return _itkCompositeTransformPython.itkCompositeTransformF3_Clone(self)

    def SetNthTransformToOptimize(self, i, state):
        r"""
        SetNthTransformToOptimize(self, i, state)

        Parameters
        ----------
        i: unsigned long
        state: bool

        """
        return _itkCompositeTransformPython.itkCompositeTransformF3_SetNthTransformToOptimize(self, i, state)

    def SetNthTransformToOptimizeOn(self, i):
        r"""
        SetNthTransformToOptimizeOn(self, i)

        Parameters
        ----------
        i: unsigned long

        """
        return _itkCompositeTransformPython.itkCompositeTransformF3_SetNthTransformToOptimizeOn(self, i)

    def SetNthTransformToOptimizeOff(self, i):
        r"""
        SetNthTransformToOptimizeOff(self, i)

        Parameters
        ----------
        i: unsigned long

        """
        return _itkCompositeTransformPython.itkCompositeTransformF3_SetNthTransformToOptimizeOff(self, i)

    def SetAllTransformsToOptimize(self, state):
        r"""
        SetAllTransformsToOptimize(self, state)

        Parameters
        ----------
        state: bool

        """
        return _itkCompositeTransformPython.itkCompositeTransformF3_SetAllTransformsToOptimize(self, state)

    def SetAllTransformsToOptimizeOn(self):
        r"""SetAllTransformsToOptimizeOn(self)"""
        return _itkCompositeTransformPython.itkCompositeTransformF3_SetAllTransformsToOptimizeOn(self)

    def SetAllTransformsToOptimizeOff(self):
        r"""SetAllTransformsToOptimizeOff(self)"""
        return _itkCompositeTransformPython.itkCompositeTransformF3_SetAllTransformsToOptimizeOff(self)

    def SetOnlyMostRecentTransformToOptimizeOn(self):
        r"""SetOnlyMostRecentTransformToOptimizeOn(self)"""
        return _itkCompositeTransformPython.itkCompositeTransformF3_SetOnlyMostRecentTransformToOptimizeOn(self)

    def GetNthTransformToOptimize(self, i):
        r"""
        GetNthTransformToOptimize(self, i) -> bool

        Parameters
        ----------
        i: unsigned long

        """
        return _itkCompositeTransformPython.itkCompositeTransformF3_GetNthTransformToOptimize(self, i)

    def GetTransformsToOptimizeFlags(self):
        r"""GetTransformsToOptimizeFlags(self) -> std::deque< bool > const &"""
        return _itkCompositeTransformPython.itkCompositeTransformF3_GetTransformsToOptimizeFlags(self)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkCompositeTransformF3 *

        """
        return _itkCompositeTransformPython.itkCompositeTransformF3_GetInverse(self, inverse)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorF3

        Parameters
        ----------
        arg0: itkVectorF3 const &

        TransformVector(self, inputVector) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        inputVector: vnl_vector_fixed< float,3 > const &

        TransformVector(self, inputVector) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputVector: itkVariableLengthVectorF const &

        TransformVector(self, inputVector, inputPoint) -> itkVectorF3

        Parameters
        ----------
        inputVector: itkVectorF3 const &
        inputPoint: itkPointF3 const &

        TransformVector(self, inputVector, inputPoint) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        inputVector: vnl_vector_fixed< float,3 > const &
        inputPoint: itkPointF3 const &

        TransformVector(self, inputVector, inputPoint) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputVector: itkVariableLengthVectorF const &
        inputPoint: itkPointF3 const &

        """
        return _itkCompositeTransformPython.itkCompositeTransformF3_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorF3

        Parameters
        ----------
        arg0: itkCovariantVectorF3 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformCovariantVector(self, inputVector, inputPoint) -> itkCovariantVectorF3

        Parameters
        ----------
        inputVector: itkCovariantVectorF3 const &
        inputPoint: itkPointF3 const &

        TransformCovariantVector(self, inputVector, inputPoint) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputVector: itkVariableLengthVectorF const &
        inputPoint: itkPointF3 const &

        """
        return _itkCompositeTransformPython.itkCompositeTransformF3_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, inputTensor) -> itkDiffusionTensor3DF

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DF const &

        TransformDiffusionTensor3D(self, inputTensor) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &

        TransformDiffusionTensor3D(self, inputTensor, inputPoint) -> itkDiffusionTensor3DF

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DF const &
        inputPoint: itkPointF3 const &

        TransformDiffusionTensor3D(self, inputTensor, inputPoint) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        inputPoint: itkPointF3 const &

        """
        return _itkCompositeTransformPython.itkCompositeTransformF3_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorF3 const &

        TransformSymmetricSecondRankTensor(self, inputTensor) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &

        TransformSymmetricSecondRankTensor(self, inputTensor, inputPoint) -> itkSymmetricSecondRankTensorF3

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorF3 const &
        inputPoint: itkPointF3 const &

        TransformSymmetricSecondRankTensor(self, inputTensor, inputPoint) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        inputPoint: itkPointF3 const &

        """
        return _itkCompositeTransformPython.itkCompositeTransformF3_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayF const &
        factor: float

        """
        return _itkCompositeTransformPython.itkCompositeTransformF3_UpdateTransformParameters(self, update, factor)

    def FlattenTransformQueue(self):
        r"""FlattenTransformQueue(self)"""
        return _itkCompositeTransformPython.itkCompositeTransformF3_FlattenTransformQueue(self)
    __swig_destroy__ = _itkCompositeTransformPython.delete_itkCompositeTransformF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCompositeTransformF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCompositeTransformPython.itkCompositeTransformF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCompositeTransformF3

        Create a new object of the class itkCompositeTransformF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCompositeTransformF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCompositeTransformF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCompositeTransformF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCompositeTransformF3 in _itkCompositeTransformPython:
_itkCompositeTransformPython.itkCompositeTransformF3_swigregister(itkCompositeTransformF3)

def itkCompositeTransformF4_New():
    return itkCompositeTransformF4.New()

class itkCompositeTransformF4(itk.itkMultiTransformPython.itkMultiTransformF44):
    r"""Proxy of C++ itkCompositeTransformF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkCompositeTransformF4_Pointer"""
        return _itkCompositeTransformPython.itkCompositeTransformF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkCompositeTransformF4_Pointer"""
        return _itkCompositeTransformPython.itkCompositeTransformF4_Clone(self)

    def SetNthTransformToOptimize(self, i, state):
        r"""
        SetNthTransformToOptimize(self, i, state)

        Parameters
        ----------
        i: unsigned long
        state: bool

        """
        return _itkCompositeTransformPython.itkCompositeTransformF4_SetNthTransformToOptimize(self, i, state)

    def SetNthTransformToOptimizeOn(self, i):
        r"""
        SetNthTransformToOptimizeOn(self, i)

        Parameters
        ----------
        i: unsigned long

        """
        return _itkCompositeTransformPython.itkCompositeTransformF4_SetNthTransformToOptimizeOn(self, i)

    def SetNthTransformToOptimizeOff(self, i):
        r"""
        SetNthTransformToOptimizeOff(self, i)

        Parameters
        ----------
        i: unsigned long

        """
        return _itkCompositeTransformPython.itkCompositeTransformF4_SetNthTransformToOptimizeOff(self, i)

    def SetAllTransformsToOptimize(self, state):
        r"""
        SetAllTransformsToOptimize(self, state)

        Parameters
        ----------
        state: bool

        """
        return _itkCompositeTransformPython.itkCompositeTransformF4_SetAllTransformsToOptimize(self, state)

    def SetAllTransformsToOptimizeOn(self):
        r"""SetAllTransformsToOptimizeOn(self)"""
        return _itkCompositeTransformPython.itkCompositeTransformF4_SetAllTransformsToOptimizeOn(self)

    def SetAllTransformsToOptimizeOff(self):
        r"""SetAllTransformsToOptimizeOff(self)"""
        return _itkCompositeTransformPython.itkCompositeTransformF4_SetAllTransformsToOptimizeOff(self)

    def SetOnlyMostRecentTransformToOptimizeOn(self):
        r"""SetOnlyMostRecentTransformToOptimizeOn(self)"""
        return _itkCompositeTransformPython.itkCompositeTransformF4_SetOnlyMostRecentTransformToOptimizeOn(self)

    def GetNthTransformToOptimize(self, i):
        r"""
        GetNthTransformToOptimize(self, i) -> bool

        Parameters
        ----------
        i: unsigned long

        """
        return _itkCompositeTransformPython.itkCompositeTransformF4_GetNthTransformToOptimize(self, i)

    def GetTransformsToOptimizeFlags(self):
        r"""GetTransformsToOptimizeFlags(self) -> std::deque< bool > const &"""
        return _itkCompositeTransformPython.itkCompositeTransformF4_GetTransformsToOptimizeFlags(self)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkCompositeTransformF4 *

        """
        return _itkCompositeTransformPython.itkCompositeTransformF4_GetInverse(self, inverse)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, arg0) -> itkVectorF4

        Parameters
        ----------
        arg0: itkVectorF4 const &

        TransformVector(self, inputVector) -> vnl_vector_fixed< float,4 >

        Parameters
        ----------
        inputVector: vnl_vector_fixed< float,4 > const &

        TransformVector(self, inputVector) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputVector: itkVariableLengthVectorF const &

        TransformVector(self, inputVector, inputPoint) -> itkVectorF4

        Parameters
        ----------
        inputVector: itkVectorF4 const &
        inputPoint: itkPointF4 const &

        TransformVector(self, inputVector, inputPoint) -> vnl_vector_fixed< float,4 >

        Parameters
        ----------
        inputVector: vnl_vector_fixed< float,4 > const &
        inputPoint: itkPointF4 const &

        TransformVector(self, inputVector, inputPoint) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputVector: itkVariableLengthVectorF const &
        inputPoint: itkPointF4 const &

        """
        return _itkCompositeTransformPython.itkCompositeTransformF4_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        r"""
        TransformCovariantVector(self, arg0) -> itkCovariantVectorF4

        Parameters
        ----------
        arg0: itkCovariantVectorF4 const &

        TransformCovariantVector(self, arg0) -> itkVariableLengthVectorF

        Parameters
        ----------
        arg0: itkVariableLengthVectorF const &

        TransformCovariantVector(self, inputVector, inputPoint) -> itkCovariantVectorF4

        Parameters
        ----------
        inputVector: itkCovariantVectorF4 const &
        inputPoint: itkPointF4 const &

        TransformCovariantVector(self, inputVector, inputPoint) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputVector: itkVariableLengthVectorF const &
        inputPoint: itkPointF4 const &

        """
        return _itkCompositeTransformPython.itkCompositeTransformF4_TransformCovariantVector(self, *args)

    def TransformDiffusionTensor3D(self, *args):
        r"""
        TransformDiffusionTensor3D(self, inputTensor) -> itkDiffusionTensor3DF

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DF const &

        TransformDiffusionTensor3D(self, inputTensor) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &

        TransformDiffusionTensor3D(self, inputTensor, inputPoint) -> itkDiffusionTensor3DF

        Parameters
        ----------
        inputTensor: itkDiffusionTensor3DF const &
        inputPoint: itkPointF4 const &

        TransformDiffusionTensor3D(self, inputTensor, inputPoint) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        inputPoint: itkPointF4 const &

        """
        return _itkCompositeTransformPython.itkCompositeTransformF4_TransformDiffusionTensor3D(self, *args)

    def TransformSymmetricSecondRankTensor(self, *args):
        r"""
        TransformSymmetricSecondRankTensor(self, inputTensor) -> itkSymmetricSecondRankTensorF4

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorF4 const &

        TransformSymmetricSecondRankTensor(self, inputTensor) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &

        TransformSymmetricSecondRankTensor(self, inputTensor, inputPoint) -> itkSymmetricSecondRankTensorF4

        Parameters
        ----------
        inputTensor: itkSymmetricSecondRankTensorF4 const &
        inputPoint: itkPointF4 const &

        TransformSymmetricSecondRankTensor(self, inputTensor, inputPoint) -> itkVariableLengthVectorF

        Parameters
        ----------
        inputTensor: itkVariableLengthVectorF const &
        inputPoint: itkPointF4 const &

        """
        return _itkCompositeTransformPython.itkCompositeTransformF4_TransformSymmetricSecondRankTensor(self, *args)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayF const &
        factor: float

        """
        return _itkCompositeTransformPython.itkCompositeTransformF4_UpdateTransformParameters(self, update, factor)

    def FlattenTransformQueue(self):
        r"""FlattenTransformQueue(self)"""
        return _itkCompositeTransformPython.itkCompositeTransformF4_FlattenTransformQueue(self)
    __swig_destroy__ = _itkCompositeTransformPython.delete_itkCompositeTransformF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkCompositeTransformF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkCompositeTransformPython.itkCompositeTransformF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkCompositeTransformF4

        Create a new object of the class itkCompositeTransformF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCompositeTransformF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCompositeTransformF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCompositeTransformF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCompositeTransformF4 in _itkCompositeTransformPython:
_itkCompositeTransformPython.itkCompositeTransformF4_swigregister(itkCompositeTransformF4)

