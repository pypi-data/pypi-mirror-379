# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKTransformPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMultiTransformPython
else:
    import _itkMultiTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkOptimizerParametersPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkTransformBasePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkArray2DPython
import itk.itkDiffusionTensor3DPython
class itkMultiTransformD22(itk.itkTransformBasePython.itkTransformD22):
    r"""Proxy of C++ itkMultiTransformD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def AddTransform(self, t):
        r"""
        AddTransform(self, t)

        Parameters
        ----------
        t: itkTransformD22 *

        """
        return _itkMultiTransformPython.itkMultiTransformD22_AddTransform(self, t)

    def AppendTransform(self, t):
        r"""
        AppendTransform(self, t)

        Parameters
        ----------
        t: itkTransformD22 *

        """
        return _itkMultiTransformPython.itkMultiTransformD22_AppendTransform(self, t)

    def PrependTransform(self, t):
        r"""
        PrependTransform(self, t)

        Parameters
        ----------
        t: itkTransformD22 *

        """
        return _itkMultiTransformPython.itkMultiTransformD22_PrependTransform(self, t)

    def RemoveTransform(self):
        r"""RemoveTransform(self)"""
        return _itkMultiTransformPython.itkMultiTransformD22_RemoveTransform(self)

    def GetFrontTransform(self):
        r"""GetFrontTransform(self) -> itkTransformD22"""
        return _itkMultiTransformPython.itkMultiTransformD22_GetFrontTransform(self)

    def GetBackTransform(self):
        r"""GetBackTransform(self) -> itkTransformD22"""
        return _itkMultiTransformPython.itkMultiTransformD22_GetBackTransform(self)

    def GetNthTransform(self, n):
        r"""
        GetNthTransform(self, n) -> itkTransformD22_Pointer const

        Parameters
        ----------
        n: unsigned long

        """
        return _itkMultiTransformPython.itkMultiTransformD22_GetNthTransform(self, n)

    def GetNthTransformModifiablePointer(self, n):
        r"""
        GetNthTransformModifiablePointer(self, n) -> itkTransformD22

        Parameters
        ----------
        n: unsigned long const

        """
        return _itkMultiTransformPython.itkMultiTransformD22_GetNthTransformModifiablePointer(self, n)

    def GetNthTransformConstPointer(self, n):
        r"""
        GetNthTransformConstPointer(self, n) -> itkTransformD22

        Parameters
        ----------
        n: unsigned long const

        """
        return _itkMultiTransformPython.itkMultiTransformD22_GetNthTransformConstPointer(self, n)

    def GetTransformQueue(self):
        r"""GetTransformQueue(self) -> std::deque< itkTransformD22_Pointer > const &"""
        return _itkMultiTransformPython.itkMultiTransformD22_GetTransformQueue(self)

    def IsTransformQueueEmpty(self):
        r"""IsTransformQueueEmpty(self) -> bool"""
        return _itkMultiTransformPython.itkMultiTransformD22_IsTransformQueueEmpty(self)

    def GetNumberOfTransforms(self):
        r"""GetNumberOfTransforms(self) -> unsigned long"""
        return _itkMultiTransformPython.itkMultiTransformD22_GetNumberOfTransforms(self)

    def ClearTransformQueue(self):
        r"""ClearTransformQueue(self)"""
        return _itkMultiTransformPython.itkMultiTransformD22_ClearTransformQueue(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkMultiTransformPython.itkMultiTransformD22_UpdateTransformParameters(self, update, factor)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkMultiTransformD22 *

        """
        return _itkMultiTransformPython.itkMultiTransformD22_GetInverse(self, inverse)
    __swig_destroy__ = _itkMultiTransformPython.delete_itkMultiTransformD22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiTransformD22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiTransformPython.itkMultiTransformD22_cast(obj)

# Register itkMultiTransformD22 in _itkMultiTransformPython:
_itkMultiTransformPython.itkMultiTransformD22_swigregister(itkMultiTransformD22)
class itkMultiTransformD33(itk.itkTransformBasePython.itkTransformD33):
    r"""Proxy of C++ itkMultiTransformD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def AddTransform(self, t):
        r"""
        AddTransform(self, t)

        Parameters
        ----------
        t: itkTransformD33 *

        """
        return _itkMultiTransformPython.itkMultiTransformD33_AddTransform(self, t)

    def AppendTransform(self, t):
        r"""
        AppendTransform(self, t)

        Parameters
        ----------
        t: itkTransformD33 *

        """
        return _itkMultiTransformPython.itkMultiTransformD33_AppendTransform(self, t)

    def PrependTransform(self, t):
        r"""
        PrependTransform(self, t)

        Parameters
        ----------
        t: itkTransformD33 *

        """
        return _itkMultiTransformPython.itkMultiTransformD33_PrependTransform(self, t)

    def RemoveTransform(self):
        r"""RemoveTransform(self)"""
        return _itkMultiTransformPython.itkMultiTransformD33_RemoveTransform(self)

    def GetFrontTransform(self):
        r"""GetFrontTransform(self) -> itkTransformD33"""
        return _itkMultiTransformPython.itkMultiTransformD33_GetFrontTransform(self)

    def GetBackTransform(self):
        r"""GetBackTransform(self) -> itkTransformD33"""
        return _itkMultiTransformPython.itkMultiTransformD33_GetBackTransform(self)

    def GetNthTransform(self, n):
        r"""
        GetNthTransform(self, n) -> itkTransformD33_Pointer const

        Parameters
        ----------
        n: unsigned long

        """
        return _itkMultiTransformPython.itkMultiTransformD33_GetNthTransform(self, n)

    def GetNthTransformModifiablePointer(self, n):
        r"""
        GetNthTransformModifiablePointer(self, n) -> itkTransformD33

        Parameters
        ----------
        n: unsigned long const

        """
        return _itkMultiTransformPython.itkMultiTransformD33_GetNthTransformModifiablePointer(self, n)

    def GetNthTransformConstPointer(self, n):
        r"""
        GetNthTransformConstPointer(self, n) -> itkTransformD33

        Parameters
        ----------
        n: unsigned long const

        """
        return _itkMultiTransformPython.itkMultiTransformD33_GetNthTransformConstPointer(self, n)

    def GetTransformQueue(self):
        r"""GetTransformQueue(self) -> std::deque< itkTransformD33_Pointer > const &"""
        return _itkMultiTransformPython.itkMultiTransformD33_GetTransformQueue(self)

    def IsTransformQueueEmpty(self):
        r"""IsTransformQueueEmpty(self) -> bool"""
        return _itkMultiTransformPython.itkMultiTransformD33_IsTransformQueueEmpty(self)

    def GetNumberOfTransforms(self):
        r"""GetNumberOfTransforms(self) -> unsigned long"""
        return _itkMultiTransformPython.itkMultiTransformD33_GetNumberOfTransforms(self)

    def ClearTransformQueue(self):
        r"""ClearTransformQueue(self)"""
        return _itkMultiTransformPython.itkMultiTransformD33_ClearTransformQueue(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkMultiTransformPython.itkMultiTransformD33_UpdateTransformParameters(self, update, factor)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkMultiTransformD33 *

        """
        return _itkMultiTransformPython.itkMultiTransformD33_GetInverse(self, inverse)
    __swig_destroy__ = _itkMultiTransformPython.delete_itkMultiTransformD33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiTransformD33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiTransformPython.itkMultiTransformD33_cast(obj)

# Register itkMultiTransformD33 in _itkMultiTransformPython:
_itkMultiTransformPython.itkMultiTransformD33_swigregister(itkMultiTransformD33)
class itkMultiTransformD44(itk.itkTransformBasePython.itkTransformD44):
    r"""Proxy of C++ itkMultiTransformD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def AddTransform(self, t):
        r"""
        AddTransform(self, t)

        Parameters
        ----------
        t: itkTransformD44 *

        """
        return _itkMultiTransformPython.itkMultiTransformD44_AddTransform(self, t)

    def AppendTransform(self, t):
        r"""
        AppendTransform(self, t)

        Parameters
        ----------
        t: itkTransformD44 *

        """
        return _itkMultiTransformPython.itkMultiTransformD44_AppendTransform(self, t)

    def PrependTransform(self, t):
        r"""
        PrependTransform(self, t)

        Parameters
        ----------
        t: itkTransformD44 *

        """
        return _itkMultiTransformPython.itkMultiTransformD44_PrependTransform(self, t)

    def RemoveTransform(self):
        r"""RemoveTransform(self)"""
        return _itkMultiTransformPython.itkMultiTransformD44_RemoveTransform(self)

    def GetFrontTransform(self):
        r"""GetFrontTransform(self) -> itkTransformD44"""
        return _itkMultiTransformPython.itkMultiTransformD44_GetFrontTransform(self)

    def GetBackTransform(self):
        r"""GetBackTransform(self) -> itkTransformD44"""
        return _itkMultiTransformPython.itkMultiTransformD44_GetBackTransform(self)

    def GetNthTransform(self, n):
        r"""
        GetNthTransform(self, n) -> itkTransformD44_Pointer const

        Parameters
        ----------
        n: unsigned long

        """
        return _itkMultiTransformPython.itkMultiTransformD44_GetNthTransform(self, n)

    def GetNthTransformModifiablePointer(self, n):
        r"""
        GetNthTransformModifiablePointer(self, n) -> itkTransformD44

        Parameters
        ----------
        n: unsigned long const

        """
        return _itkMultiTransformPython.itkMultiTransformD44_GetNthTransformModifiablePointer(self, n)

    def GetNthTransformConstPointer(self, n):
        r"""
        GetNthTransformConstPointer(self, n) -> itkTransformD44

        Parameters
        ----------
        n: unsigned long const

        """
        return _itkMultiTransformPython.itkMultiTransformD44_GetNthTransformConstPointer(self, n)

    def GetTransformQueue(self):
        r"""GetTransformQueue(self) -> std::deque< itkTransformD44_Pointer > const &"""
        return _itkMultiTransformPython.itkMultiTransformD44_GetTransformQueue(self)

    def IsTransformQueueEmpty(self):
        r"""IsTransformQueueEmpty(self) -> bool"""
        return _itkMultiTransformPython.itkMultiTransformD44_IsTransformQueueEmpty(self)

    def GetNumberOfTransforms(self):
        r"""GetNumberOfTransforms(self) -> unsigned long"""
        return _itkMultiTransformPython.itkMultiTransformD44_GetNumberOfTransforms(self)

    def ClearTransformQueue(self):
        r"""ClearTransformQueue(self)"""
        return _itkMultiTransformPython.itkMultiTransformD44_ClearTransformQueue(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayD const &
        factor: double

        """
        return _itkMultiTransformPython.itkMultiTransformD44_UpdateTransformParameters(self, update, factor)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkMultiTransformD44 *

        """
        return _itkMultiTransformPython.itkMultiTransformD44_GetInverse(self, inverse)
    __swig_destroy__ = _itkMultiTransformPython.delete_itkMultiTransformD44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiTransformD44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiTransformPython.itkMultiTransformD44_cast(obj)

# Register itkMultiTransformD44 in _itkMultiTransformPython:
_itkMultiTransformPython.itkMultiTransformD44_swigregister(itkMultiTransformD44)
class itkMultiTransformF22(itk.itkTransformBasePython.itkTransformF22):
    r"""Proxy of C++ itkMultiTransformF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def AddTransform(self, t):
        r"""
        AddTransform(self, t)

        Parameters
        ----------
        t: itkTransformF22 *

        """
        return _itkMultiTransformPython.itkMultiTransformF22_AddTransform(self, t)

    def AppendTransform(self, t):
        r"""
        AppendTransform(self, t)

        Parameters
        ----------
        t: itkTransformF22 *

        """
        return _itkMultiTransformPython.itkMultiTransformF22_AppendTransform(self, t)

    def PrependTransform(self, t):
        r"""
        PrependTransform(self, t)

        Parameters
        ----------
        t: itkTransformF22 *

        """
        return _itkMultiTransformPython.itkMultiTransformF22_PrependTransform(self, t)

    def RemoveTransform(self):
        r"""RemoveTransform(self)"""
        return _itkMultiTransformPython.itkMultiTransformF22_RemoveTransform(self)

    def GetFrontTransform(self):
        r"""GetFrontTransform(self) -> itkTransformF22"""
        return _itkMultiTransformPython.itkMultiTransformF22_GetFrontTransform(self)

    def GetBackTransform(self):
        r"""GetBackTransform(self) -> itkTransformF22"""
        return _itkMultiTransformPython.itkMultiTransformF22_GetBackTransform(self)

    def GetNthTransform(self, n):
        r"""
        GetNthTransform(self, n) -> itkTransformF22_Pointer const

        Parameters
        ----------
        n: unsigned long

        """
        return _itkMultiTransformPython.itkMultiTransformF22_GetNthTransform(self, n)

    def GetNthTransformModifiablePointer(self, n):
        r"""
        GetNthTransformModifiablePointer(self, n) -> itkTransformF22

        Parameters
        ----------
        n: unsigned long const

        """
        return _itkMultiTransformPython.itkMultiTransformF22_GetNthTransformModifiablePointer(self, n)

    def GetNthTransformConstPointer(self, n):
        r"""
        GetNthTransformConstPointer(self, n) -> itkTransformF22

        Parameters
        ----------
        n: unsigned long const

        """
        return _itkMultiTransformPython.itkMultiTransformF22_GetNthTransformConstPointer(self, n)

    def GetTransformQueue(self):
        r"""GetTransformQueue(self) -> std::deque< itkTransformF22_Pointer > const &"""
        return _itkMultiTransformPython.itkMultiTransformF22_GetTransformQueue(self)

    def IsTransformQueueEmpty(self):
        r"""IsTransformQueueEmpty(self) -> bool"""
        return _itkMultiTransformPython.itkMultiTransformF22_IsTransformQueueEmpty(self)

    def GetNumberOfTransforms(self):
        r"""GetNumberOfTransforms(self) -> unsigned long"""
        return _itkMultiTransformPython.itkMultiTransformF22_GetNumberOfTransforms(self)

    def ClearTransformQueue(self):
        r"""ClearTransformQueue(self)"""
        return _itkMultiTransformPython.itkMultiTransformF22_ClearTransformQueue(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayF const &
        factor: float

        """
        return _itkMultiTransformPython.itkMultiTransformF22_UpdateTransformParameters(self, update, factor)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkMultiTransformF22 *

        """
        return _itkMultiTransformPython.itkMultiTransformF22_GetInverse(self, inverse)
    __swig_destroy__ = _itkMultiTransformPython.delete_itkMultiTransformF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiTransformF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiTransformPython.itkMultiTransformF22_cast(obj)

# Register itkMultiTransformF22 in _itkMultiTransformPython:
_itkMultiTransformPython.itkMultiTransformF22_swigregister(itkMultiTransformF22)
class itkMultiTransformF33(itk.itkTransformBasePython.itkTransformF33):
    r"""Proxy of C++ itkMultiTransformF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def AddTransform(self, t):
        r"""
        AddTransform(self, t)

        Parameters
        ----------
        t: itkTransformF33 *

        """
        return _itkMultiTransformPython.itkMultiTransformF33_AddTransform(self, t)

    def AppendTransform(self, t):
        r"""
        AppendTransform(self, t)

        Parameters
        ----------
        t: itkTransformF33 *

        """
        return _itkMultiTransformPython.itkMultiTransformF33_AppendTransform(self, t)

    def PrependTransform(self, t):
        r"""
        PrependTransform(self, t)

        Parameters
        ----------
        t: itkTransformF33 *

        """
        return _itkMultiTransformPython.itkMultiTransformF33_PrependTransform(self, t)

    def RemoveTransform(self):
        r"""RemoveTransform(self)"""
        return _itkMultiTransformPython.itkMultiTransformF33_RemoveTransform(self)

    def GetFrontTransform(self):
        r"""GetFrontTransform(self) -> itkTransformF33"""
        return _itkMultiTransformPython.itkMultiTransformF33_GetFrontTransform(self)

    def GetBackTransform(self):
        r"""GetBackTransform(self) -> itkTransformF33"""
        return _itkMultiTransformPython.itkMultiTransformF33_GetBackTransform(self)

    def GetNthTransform(self, n):
        r"""
        GetNthTransform(self, n) -> itkTransformF33_Pointer const

        Parameters
        ----------
        n: unsigned long

        """
        return _itkMultiTransformPython.itkMultiTransformF33_GetNthTransform(self, n)

    def GetNthTransformModifiablePointer(self, n):
        r"""
        GetNthTransformModifiablePointer(self, n) -> itkTransformF33

        Parameters
        ----------
        n: unsigned long const

        """
        return _itkMultiTransformPython.itkMultiTransformF33_GetNthTransformModifiablePointer(self, n)

    def GetNthTransformConstPointer(self, n):
        r"""
        GetNthTransformConstPointer(self, n) -> itkTransformF33

        Parameters
        ----------
        n: unsigned long const

        """
        return _itkMultiTransformPython.itkMultiTransformF33_GetNthTransformConstPointer(self, n)

    def GetTransformQueue(self):
        r"""GetTransformQueue(self) -> std::deque< itkTransformF33_Pointer > const &"""
        return _itkMultiTransformPython.itkMultiTransformF33_GetTransformQueue(self)

    def IsTransformQueueEmpty(self):
        r"""IsTransformQueueEmpty(self) -> bool"""
        return _itkMultiTransformPython.itkMultiTransformF33_IsTransformQueueEmpty(self)

    def GetNumberOfTransforms(self):
        r"""GetNumberOfTransforms(self) -> unsigned long"""
        return _itkMultiTransformPython.itkMultiTransformF33_GetNumberOfTransforms(self)

    def ClearTransformQueue(self):
        r"""ClearTransformQueue(self)"""
        return _itkMultiTransformPython.itkMultiTransformF33_ClearTransformQueue(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayF const &
        factor: float

        """
        return _itkMultiTransformPython.itkMultiTransformF33_UpdateTransformParameters(self, update, factor)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkMultiTransformF33 *

        """
        return _itkMultiTransformPython.itkMultiTransformF33_GetInverse(self, inverse)
    __swig_destroy__ = _itkMultiTransformPython.delete_itkMultiTransformF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiTransformF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiTransformPython.itkMultiTransformF33_cast(obj)

# Register itkMultiTransformF33 in _itkMultiTransformPython:
_itkMultiTransformPython.itkMultiTransformF33_swigregister(itkMultiTransformF33)
class itkMultiTransformF44(itk.itkTransformBasePython.itkTransformF44):
    r"""Proxy of C++ itkMultiTransformF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def AddTransform(self, t):
        r"""
        AddTransform(self, t)

        Parameters
        ----------
        t: itkTransformF44 *

        """
        return _itkMultiTransformPython.itkMultiTransformF44_AddTransform(self, t)

    def AppendTransform(self, t):
        r"""
        AppendTransform(self, t)

        Parameters
        ----------
        t: itkTransformF44 *

        """
        return _itkMultiTransformPython.itkMultiTransformF44_AppendTransform(self, t)

    def PrependTransform(self, t):
        r"""
        PrependTransform(self, t)

        Parameters
        ----------
        t: itkTransformF44 *

        """
        return _itkMultiTransformPython.itkMultiTransformF44_PrependTransform(self, t)

    def RemoveTransform(self):
        r"""RemoveTransform(self)"""
        return _itkMultiTransformPython.itkMultiTransformF44_RemoveTransform(self)

    def GetFrontTransform(self):
        r"""GetFrontTransform(self) -> itkTransformF44"""
        return _itkMultiTransformPython.itkMultiTransformF44_GetFrontTransform(self)

    def GetBackTransform(self):
        r"""GetBackTransform(self) -> itkTransformF44"""
        return _itkMultiTransformPython.itkMultiTransformF44_GetBackTransform(self)

    def GetNthTransform(self, n):
        r"""
        GetNthTransform(self, n) -> itkTransformF44_Pointer const

        Parameters
        ----------
        n: unsigned long

        """
        return _itkMultiTransformPython.itkMultiTransformF44_GetNthTransform(self, n)

    def GetNthTransformModifiablePointer(self, n):
        r"""
        GetNthTransformModifiablePointer(self, n) -> itkTransformF44

        Parameters
        ----------
        n: unsigned long const

        """
        return _itkMultiTransformPython.itkMultiTransformF44_GetNthTransformModifiablePointer(self, n)

    def GetNthTransformConstPointer(self, n):
        r"""
        GetNthTransformConstPointer(self, n) -> itkTransformF44

        Parameters
        ----------
        n: unsigned long const

        """
        return _itkMultiTransformPython.itkMultiTransformF44_GetNthTransformConstPointer(self, n)

    def GetTransformQueue(self):
        r"""GetTransformQueue(self) -> std::deque< itkTransformF44_Pointer > const &"""
        return _itkMultiTransformPython.itkMultiTransformF44_GetTransformQueue(self)

    def IsTransformQueueEmpty(self):
        r"""IsTransformQueueEmpty(self) -> bool"""
        return _itkMultiTransformPython.itkMultiTransformF44_IsTransformQueueEmpty(self)

    def GetNumberOfTransforms(self):
        r"""GetNumberOfTransforms(self) -> unsigned long"""
        return _itkMultiTransformPython.itkMultiTransformF44_GetNumberOfTransforms(self)

    def ClearTransformQueue(self):
        r"""ClearTransformQueue(self)"""
        return _itkMultiTransformPython.itkMultiTransformF44_ClearTransformQueue(self)

    def UpdateTransformParameters(self, update, factor=1.):
        r"""
        UpdateTransformParameters(self, update, factor=1.)

        Parameters
        ----------
        update: itkArrayF const &
        factor: float

        """
        return _itkMultiTransformPython.itkMultiTransformF44_UpdateTransformParameters(self, update, factor)

    def GetInverse(self, inverse):
        r"""
        GetInverse(self, inverse) -> bool

        Parameters
        ----------
        inverse: itkMultiTransformF44 *

        """
        return _itkMultiTransformPython.itkMultiTransformF44_GetInverse(self, inverse)
    __swig_destroy__ = _itkMultiTransformPython.delete_itkMultiTransformF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMultiTransformF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMultiTransformPython.itkMultiTransformF44_cast(obj)

# Register itkMultiTransformF44 in _itkMultiTransformPython:
_itkMultiTransformPython.itkMultiTransformF44_swigregister(itkMultiTransformF44)

