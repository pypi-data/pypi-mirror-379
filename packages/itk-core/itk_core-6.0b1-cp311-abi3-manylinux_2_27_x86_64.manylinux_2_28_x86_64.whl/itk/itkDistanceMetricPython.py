# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKStatisticsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDistanceMetricPython
else:
    import _itkDistanceMetricPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkFunctionBasePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkImagePython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkContinuousIndexPython
class itkDistanceMetricVF2(itk.itkFunctionBasePython.itkFunctionBaseVF2D):
    r"""Proxy of C++ itkDistanceMetricVF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetOrigin(self, x):
        r"""
        SetOrigin(self, x)

        Parameters
        ----------
        x: itkArrayD const &

        """
        return _itkDistanceMetricPython.itkDistanceMetricVF2_SetOrigin(self, x)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkArrayD"""
        return _itkDistanceMetricPython.itkDistanceMetricVF2_GetOrigin(self)

    def Evaluate(self, *args):
        r"""
        Evaluate(self, x) -> double

        Parameters
        ----------
        x: itkVectorF2 const &

        Evaluate(self, x1, x2) -> double

        Parameters
        ----------
        x1: itkVectorF2 const &
        x2: itkVectorF2 const &

        """
        return _itkDistanceMetricPython.itkDistanceMetricVF2_Evaluate(self, *args)

    def SetMeasurementVectorSize(self, s):
        r"""
        SetMeasurementVectorSize(self, s)

        Parameters
        ----------
        s: unsigned int

        """
        return _itkDistanceMetricPython.itkDistanceMetricVF2_SetMeasurementVectorSize(self, s)

    def GetMeasurementVectorSize(self):
        r"""GetMeasurementVectorSize(self) -> unsigned int"""
        return _itkDistanceMetricPython.itkDistanceMetricVF2_GetMeasurementVectorSize(self)
    __swig_destroy__ = _itkDistanceMetricPython.delete_itkDistanceMetricVF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDistanceMetricVF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDistanceMetricPython.itkDistanceMetricVF2_cast(obj)

# Register itkDistanceMetricVF2 in _itkDistanceMetricPython:
_itkDistanceMetricPython.itkDistanceMetricVF2_swigregister(itkDistanceMetricVF2)
class itkDistanceMetricVF3(itk.itkFunctionBasePython.itkFunctionBaseVF3D):
    r"""Proxy of C++ itkDistanceMetricVF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetOrigin(self, x):
        r"""
        SetOrigin(self, x)

        Parameters
        ----------
        x: itkArrayD const &

        """
        return _itkDistanceMetricPython.itkDistanceMetricVF3_SetOrigin(self, x)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkArrayD"""
        return _itkDistanceMetricPython.itkDistanceMetricVF3_GetOrigin(self)

    def Evaluate(self, *args):
        r"""
        Evaluate(self, x) -> double

        Parameters
        ----------
        x: itkVectorF3 const &

        Evaluate(self, x1, x2) -> double

        Parameters
        ----------
        x1: itkVectorF3 const &
        x2: itkVectorF3 const &

        """
        return _itkDistanceMetricPython.itkDistanceMetricVF3_Evaluate(self, *args)

    def SetMeasurementVectorSize(self, s):
        r"""
        SetMeasurementVectorSize(self, s)

        Parameters
        ----------
        s: unsigned int

        """
        return _itkDistanceMetricPython.itkDistanceMetricVF3_SetMeasurementVectorSize(self, s)

    def GetMeasurementVectorSize(self):
        r"""GetMeasurementVectorSize(self) -> unsigned int"""
        return _itkDistanceMetricPython.itkDistanceMetricVF3_GetMeasurementVectorSize(self)
    __swig_destroy__ = _itkDistanceMetricPython.delete_itkDistanceMetricVF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDistanceMetricVF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDistanceMetricPython.itkDistanceMetricVF3_cast(obj)

# Register itkDistanceMetricVF3 in _itkDistanceMetricPython:
_itkDistanceMetricPython.itkDistanceMetricVF3_swigregister(itkDistanceMetricVF3)
class itkDistanceMetricVF4(itk.itkFunctionBasePython.itkFunctionBaseVF4D):
    r"""Proxy of C++ itkDistanceMetricVF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetOrigin(self, x):
        r"""
        SetOrigin(self, x)

        Parameters
        ----------
        x: itkArrayD const &

        """
        return _itkDistanceMetricPython.itkDistanceMetricVF4_SetOrigin(self, x)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkArrayD"""
        return _itkDistanceMetricPython.itkDistanceMetricVF4_GetOrigin(self)

    def Evaluate(self, *args):
        r"""
        Evaluate(self, x) -> double

        Parameters
        ----------
        x: itkVectorF4 const &

        Evaluate(self, x1, x2) -> double

        Parameters
        ----------
        x1: itkVectorF4 const &
        x2: itkVectorF4 const &

        """
        return _itkDistanceMetricPython.itkDistanceMetricVF4_Evaluate(self, *args)

    def SetMeasurementVectorSize(self, s):
        r"""
        SetMeasurementVectorSize(self, s)

        Parameters
        ----------
        s: unsigned int

        """
        return _itkDistanceMetricPython.itkDistanceMetricVF4_SetMeasurementVectorSize(self, s)

    def GetMeasurementVectorSize(self):
        r"""GetMeasurementVectorSize(self) -> unsigned int"""
        return _itkDistanceMetricPython.itkDistanceMetricVF4_GetMeasurementVectorSize(self)
    __swig_destroy__ = _itkDistanceMetricPython.delete_itkDistanceMetricVF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkDistanceMetricVF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkDistanceMetricPython.itkDistanceMetricVF4_cast(obj)

# Register itkDistanceMetricVF4 in _itkDistanceMetricPython:
_itkDistanceMetricPython.itkDistanceMetricVF4_swigregister(itkDistanceMetricVF4)

