# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKIOImageBasePython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ITKIOImageBaseBasePython
else:
    import _ITKIOImageBaseBasePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython

def itkArchetypeSeriesFileNames_New():
    return itkArchetypeSeriesFileNames.New()

class itkArchetypeSeriesFileNames(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkArchetypeSeriesFileNames class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkArchetypeSeriesFileNames_Pointer"""
        return _ITKIOImageBaseBasePython.itkArchetypeSeriesFileNames___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkArchetypeSeriesFileNames_Pointer"""
        return _ITKIOImageBaseBasePython.itkArchetypeSeriesFileNames_Clone(self)

    def SetArchetype(self, archetype):
        r"""
        SetArchetype(self, archetype)

        Parameters
        ----------
        archetype: std::string const &

        """
        return _ITKIOImageBaseBasePython.itkArchetypeSeriesFileNames_SetArchetype(self, archetype)

    def GetArchetype(self):
        r"""GetArchetype(self) -> char const *"""
        return _ITKIOImageBaseBasePython.itkArchetypeSeriesFileNames_GetArchetype(self)

    def GetNumberOfGroupings(self):
        r"""GetNumberOfGroupings(self) -> unsigned long"""
        return _ITKIOImageBaseBasePython.itkArchetypeSeriesFileNames_GetNumberOfGroupings(self)

    def GetFileNames(self, group=0):
        r"""
        GetFileNames(self, group=0) -> vectorstring

        Parameters
        ----------
        group: unsigned long

        """
        return _ITKIOImageBaseBasePython.itkArchetypeSeriesFileNames_GetFileNames(self, group)
    __swig_destroy__ = _ITKIOImageBaseBasePython.delete_itkArchetypeSeriesFileNames

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkArchetypeSeriesFileNames

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKIOImageBaseBasePython.itkArchetypeSeriesFileNames_cast(obj)

    def New(*args, **kargs):
        """New() -> itkArchetypeSeriesFileNames

        Create a new object of the class itkArchetypeSeriesFileNames and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkArchetypeSeriesFileNames.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkArchetypeSeriesFileNames.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkArchetypeSeriesFileNames.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkArchetypeSeriesFileNames in _ITKIOImageBaseBasePython:
_ITKIOImageBaseBasePython.itkArchetypeSeriesFileNames_swigregister(itkArchetypeSeriesFileNames)
class itkImageIOBase(itk.ITKCommonBasePython.itkLightProcessObject):
    r"""Proxy of C++ itkImageIOBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFileName(self, *args):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: char const *

        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string const &

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_SetFileName(self, *args)

    def GetFileName(self):
        r"""GetFileName(self) -> char const *"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetFileName(self)

    def SetNumberOfDimensions(self, arg0):
        r"""
        SetNumberOfDimensions(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_SetNumberOfDimensions(self, arg0)

    def GetNumberOfDimensions(self):
        r"""GetNumberOfDimensions(self) -> unsigned int"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetNumberOfDimensions(self)

    def SetDimensions(self, i, dim):
        r"""
        SetDimensions(self, i, dim)

        Parameters
        ----------
        i: unsigned int
        dim: unsigned long

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_SetDimensions(self, i, dim)

    def GetDimensions(self, i):
        r"""
        GetDimensions(self, i) -> unsigned long

        Parameters
        ----------
        i: unsigned int

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetDimensions(self, i)

    def SetOrigin(self, i, origin):
        r"""
        SetOrigin(self, i, origin)

        Parameters
        ----------
        i: unsigned int
        origin: double

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_SetOrigin(self, i, origin)

    def GetOrigin(self, i):
        r"""
        GetOrigin(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetOrigin(self, i)

    def SetSpacing(self, i, spacing):
        r"""
        SetSpacing(self, i, spacing)

        Parameters
        ----------
        i: unsigned int
        spacing: double

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_SetSpacing(self, i, spacing)

    def GetSpacing(self, i):
        r"""
        GetSpacing(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetSpacing(self, i)

    def SetDirection(self, *args):
        r"""
        SetDirection(self, i, direction)

        Parameters
        ----------
        i: unsigned int
        direction: std::vector< double,std::allocator< double > > const &

        SetDirection(self, i, direction)

        Parameters
        ----------
        i: unsigned int
        direction: vnl_vectorD const &

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_SetDirection(self, *args)

    def GetDirection(self, i):
        r"""
        GetDirection(self, i) -> vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetDirection(self, i)

    def GetDefaultDirection(self, k):
        r"""
        GetDefaultDirection(self, k) -> vectorD

        Parameters
        ----------
        k: unsigned int

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetDefaultDirection(self, k)

    def SetIORegion(self, _arg):
        r"""
        SetIORegion(self, _arg)

        Parameters
        ----------
        _arg: itkImageIORegion

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_SetIORegion(self, _arg)

    def GetIORegion(self):
        r"""GetIORegion(self) -> itkImageIORegion"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetIORegion(self)

    def SetPixelType(self, _arg):
        r"""
        SetPixelType(self, _arg)

        Parameters
        ----------
        _arg: enum itkCommonEnums::IOPixel const

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_SetPixelType(self, _arg)

    def GetPixelType(self):
        r"""GetPixelType(self) -> itkCommonEnums::IOPixel"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetPixelType(self)

    def SetComponentType(self, _arg):
        r"""
        SetComponentType(self, _arg)

        Parameters
        ----------
        _arg: enum itkCommonEnums::IOComponent const

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_SetComponentType(self, _arg)

    def GetComponentType(self):
        r"""GetComponentType(self) -> itkCommonEnums::IOComponent"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetComponentType(self)

    def SetNumberOfComponents(self, _arg):
        r"""
        SetNumberOfComponents(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_SetNumberOfComponents(self, _arg)

    def GetNumberOfComponents(self):
        r"""GetNumberOfComponents(self) -> unsigned int const &"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetNumberOfComponents(self)

    def SetUseCompression(self, _arg):
        r"""
        SetUseCompression(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_SetUseCompression(self, _arg)

    def GetUseCompression(self):
        r"""GetUseCompression(self) -> bool"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetUseCompression(self)

    def UseCompressionOn(self):
        r"""UseCompressionOn(self)"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_UseCompressionOn(self)

    def UseCompressionOff(self):
        r"""UseCompressionOff(self)"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_UseCompressionOff(self)

    def SetCompressionLevel(self, _arg):
        r"""
        SetCompressionLevel(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_SetCompressionLevel(self, _arg)

    def GetCompressionLevel(self):
        r"""GetCompressionLevel(self) -> int"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetCompressionLevel(self)

    def SetCompressor(self, _c):
        r"""
        SetCompressor(self, _c)

        Parameters
        ----------
        _c: std::string

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_SetCompressor(self, _c)

    def GetCompressor(self):
        r"""GetCompressor(self) -> std::string const &"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetCompressor(self)

    def SetUseStreamedReading(self, _arg):
        r"""
        SetUseStreamedReading(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_SetUseStreamedReading(self, _arg)

    def GetUseStreamedReading(self):
        r"""GetUseStreamedReading(self) -> bool"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetUseStreamedReading(self)

    def UseStreamedReadingOn(self):
        r"""UseStreamedReadingOn(self)"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_UseStreamedReadingOn(self)

    def UseStreamedReadingOff(self):
        r"""UseStreamedReadingOff(self)"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_UseStreamedReadingOff(self)

    def SetUseStreamedWriting(self, _arg):
        r"""
        SetUseStreamedWriting(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_SetUseStreamedWriting(self, _arg)

    def GetUseStreamedWriting(self):
        r"""GetUseStreamedWriting(self) -> bool"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetUseStreamedWriting(self)

    def UseStreamedWritingOn(self):
        r"""UseStreamedWritingOn(self)"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_UseStreamedWritingOn(self)

    def UseStreamedWritingOff(self):
        r"""UseStreamedWritingOff(self)"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_UseStreamedWritingOff(self)

    def SetExpandRGBPalette(self, _arg):
        r"""
        SetExpandRGBPalette(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_SetExpandRGBPalette(self, _arg)

    def GetExpandRGBPalette(self):
        r"""GetExpandRGBPalette(self) -> bool"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetExpandRGBPalette(self)

    def ExpandRGBPaletteOn(self):
        r"""ExpandRGBPaletteOn(self)"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_ExpandRGBPaletteOn(self)

    def ExpandRGBPaletteOff(self):
        r"""ExpandRGBPaletteOff(self)"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_ExpandRGBPaletteOff(self)

    def SetWritePalette(self, _arg):
        r"""
        SetWritePalette(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_SetWritePalette(self, _arg)

    def GetWritePalette(self):
        r"""GetWritePalette(self) -> bool"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetWritePalette(self)

    def WritePaletteOn(self):
        r"""WritePaletteOn(self)"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_WritePaletteOn(self)

    def WritePaletteOff(self):
        r"""WritePaletteOff(self)"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_WritePaletteOff(self)

    def GetIsReadAsScalarPlusPalette(self):
        r"""GetIsReadAsScalarPlusPalette(self) -> bool"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetIsReadAsScalarPlusPalette(self)

    @staticmethod
    def GetComponentTypeAsString(arg0):
        r"""
        GetComponentTypeAsString(arg0) -> std::string

        Parameters
        ----------
        arg0: enum itkCommonEnums::IOComponent

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetComponentTypeAsString(arg0)

    @staticmethod
    def IsComponentTypeFloatingPoint(componentEnum):
        r"""
        IsComponentTypeFloatingPoint(componentEnum) -> bool

        Parameters
        ----------
        componentEnum: enum itkCommonEnums::IOComponent const

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_IsComponentTypeFloatingPoint(componentEnum)

    @staticmethod
    def IsComponentTypeUnsigned(componentEnum):
        r"""
        IsComponentTypeUnsigned(componentEnum) -> bool

        Parameters
        ----------
        componentEnum: enum itkCommonEnums::IOComponent const

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_IsComponentTypeUnsigned(componentEnum)

    @staticmethod
    def GetNumberOfBitsOfComponentType(componentEnum):
        r"""
        GetNumberOfBitsOfComponentType(componentEnum) -> unsigned long

        Parameters
        ----------
        componentEnum: enum itkCommonEnums::IOComponent const

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetNumberOfBitsOfComponentType(componentEnum)

    @staticmethod
    def GetComponentTypeFromTypeTraits(isFloatingPoint, isUnsigned, numberOfBits):
        r"""
        GetComponentTypeFromTypeTraits(isFloatingPoint, isUnsigned, numberOfBits) -> itkCommonEnums::IOComponent

        Parameters
        ----------
        isFloatingPoint: bool const
        isUnsigned: bool const
        numberOfBits: unsigned long const

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetComponentTypeFromTypeTraits(isFloatingPoint, isUnsigned, numberOfBits)

    @staticmethod
    def GetComponentTypeFromString(typeString):
        r"""
        GetComponentTypeFromString(typeString) -> itkCommonEnums::IOComponent

        Parameters
        ----------
        typeString: std::string const &

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetComponentTypeFromString(typeString)

    @staticmethod
    def GetPixelTypeAsString(arg0):
        r"""
        GetPixelTypeAsString(arg0) -> std::string

        Parameters
        ----------
        arg0: enum itkCommonEnums::IOPixel

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetPixelTypeAsString(arg0)

    @staticmethod
    def GetPixelTypeFromString(pixelString):
        r"""
        GetPixelTypeFromString(pixelString) -> itkCommonEnums::IOPixel

        Parameters
        ----------
        pixelString: std::string const &

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetPixelTypeFromString(pixelString)

    def SetFileType(self, _arg):
        r"""
        SetFileType(self, _arg)

        Parameters
        ----------
        _arg: enum itkCommonEnums::IOFile const

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_SetFileType(self, _arg)

    def GetFileType(self):
        r"""GetFileType(self) -> itkCommonEnums::IOFile"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetFileType(self)

    def SetFileTypeToASCII(self):
        r"""SetFileTypeToASCII(self)"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_SetFileTypeToASCII(self)

    def SetFileTypeToBinary(self):
        r"""SetFileTypeToBinary(self)"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_SetFileTypeToBinary(self)

    def SetByteOrder(self, _arg):
        r"""
        SetByteOrder(self, _arg)

        Parameters
        ----------
        _arg: enum itkCommonEnums::IOByteOrder const

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_SetByteOrder(self, _arg)

    def GetByteOrder(self):
        r"""GetByteOrder(self) -> itkCommonEnums::IOByteOrder"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetByteOrder(self)

    def SetByteOrderToBigEndian(self):
        r"""SetByteOrderToBigEndian(self)"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_SetByteOrderToBigEndian(self)

    def SetByteOrderToLittleEndian(self):
        r"""SetByteOrderToLittleEndian(self)"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_SetByteOrderToLittleEndian(self)

    def GetFileTypeAsString(self, arg0):
        r"""
        GetFileTypeAsString(self, arg0) -> std::string

        Parameters
        ----------
        arg0: enum itkCommonEnums::IOFile

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetFileTypeAsString(self, arg0)

    def GetByteOrderAsString(self, arg0):
        r"""
        GetByteOrderAsString(self, arg0) -> std::string

        Parameters
        ----------
        arg0: enum itkCommonEnums::IOByteOrder

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetByteOrderAsString(self, arg0)

    def GetPixelStride(self):
        r"""GetPixelStride(self) -> long"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetPixelStride(self)

    def GetImageSizeInPixels(self):
        r"""GetImageSizeInPixels(self) -> long"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetImageSizeInPixels(self)

    def GetImageSizeInBytes(self):
        r"""GetImageSizeInBytes(self) -> long"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetImageSizeInBytes(self)

    def GetImageSizeInComponents(self):
        r"""GetImageSizeInComponents(self) -> long"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetImageSizeInComponents(self)

    def GetComponentSize(self):
        r"""GetComponentSize(self) -> unsigned int"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetComponentSize(self)

    def CanReadFile(self, arg0):
        r"""
        CanReadFile(self, arg0) -> bool

        Parameters
        ----------
        arg0: char const *

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_CanReadFile(self, arg0)

    def CanStreamRead(self):
        r"""CanStreamRead(self) -> bool"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_CanStreamRead(self)

    def ReadImageInformation(self):
        r"""ReadImageInformation(self)"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_ReadImageInformation(self)

    def Read(self, buffer):
        r"""
        Read(self, buffer)

        Parameters
        ----------
        buffer: void *

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_Read(self, buffer)

    def CanWriteFile(self, arg0):
        r"""
        CanWriteFile(self, arg0) -> bool

        Parameters
        ----------
        arg0: char const *

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_CanWriteFile(self, arg0)

    def CanStreamWrite(self):
        r"""CanStreamWrite(self) -> bool"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_CanStreamWrite(self)

    def WriteImageInformation(self):
        r"""WriteImageInformation(self)"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_WriteImageInformation(self)

    def Write(self, buffer):
        r"""
        Write(self, buffer)

        Parameters
        ----------
        buffer: void const *

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_Write(self, buffer)

    def SupportsDimension(self, dim):
        r"""
        SupportsDimension(self, dim) -> bool

        Parameters
        ----------
        dim: unsigned long

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_SupportsDimension(self, dim)

    def GenerateStreamableReadRegionFromRequestedRegion(self, requested):
        r"""
        GenerateStreamableReadRegionFromRequestedRegion(self, requested) -> itkImageIORegion

        Parameters
        ----------
        requested: itkImageIORegion const &

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_GenerateStreamableReadRegionFromRequestedRegion(self, requested)

    def GetActualNumberOfSplitsForWriting(self, numberOfRequestedSplits, pasteRegion, largestPossibleRegion):
        r"""
        GetActualNumberOfSplitsForWriting(self, numberOfRequestedSplits, pasteRegion, largestPossibleRegion) -> unsigned int

        Parameters
        ----------
        numberOfRequestedSplits: unsigned int
        pasteRegion: itkImageIORegion const &
        largestPossibleRegion: itkImageIORegion const &

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetActualNumberOfSplitsForWriting(self, numberOfRequestedSplits, pasteRegion, largestPossibleRegion)

    def GetSplitRegionForWriting(self, ithPiece, numberOfActualSplits, pasteRegion, largestPossibleRegion):
        r"""
        GetSplitRegionForWriting(self, ithPiece, numberOfActualSplits, pasteRegion, largestPossibleRegion) -> itkImageIORegion

        Parameters
        ----------
        ithPiece: unsigned int
        numberOfActualSplits: unsigned int
        pasteRegion: itkImageIORegion const &
        largestPossibleRegion: itkImageIORegion const &

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetSplitRegionForWriting(self, ithPiece, numberOfActualSplits, pasteRegion, largestPossibleRegion)

    def GetSupportedReadExtensions(self):
        r"""GetSupportedReadExtensions(self) -> vectorstring"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetSupportedReadExtensions(self)

    def GetSupportedWriteExtensions(self):
        r"""GetSupportedWriteExtensions(self) -> vectorstring"""
        return _ITKIOImageBaseBasePython.itkImageIOBase_GetSupportedWriteExtensions(self)
    __swig_destroy__ = _ITKIOImageBaseBasePython.delete_itkImageIOBase

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageIOBase

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKIOImageBaseBasePython.itkImageIOBase_cast(obj)

# Register itkImageIOBase in _ITKIOImageBaseBasePython:
_ITKIOImageBaseBasePython.itkImageIOBase_swigregister(itkImageIOBase)
class itkImageIOFactory(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkImageIOFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def CreateImageIO(path, mode):
        r"""
        CreateImageIO(path, mode) -> itkImageIOBase_Pointer

        Parameters
        ----------
        path: char const *
        mode: enum itkCommonEnums::IOFileMode

        """
        return _ITKIOImageBaseBasePython.itkImageIOFactory_CreateImageIO(path, mode)

# Register itkImageIOFactory in _ITKIOImageBaseBasePython:
_ITKIOImageBaseBasePython.itkImageIOFactory_swigregister(itkImageIOFactory)

def itkNumericSeriesFileNames_New():
    return itkNumericSeriesFileNames.New()

class itkNumericSeriesFileNames(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkNumericSeriesFileNames class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNumericSeriesFileNames_Pointer"""
        return _ITKIOImageBaseBasePython.itkNumericSeriesFileNames___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNumericSeriesFileNames_Pointer"""
        return _ITKIOImageBaseBasePython.itkNumericSeriesFileNames_Clone(self)

    def SetStartIndex(self, _arg):
        r"""
        SetStartIndex(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _ITKIOImageBaseBasePython.itkNumericSeriesFileNames_SetStartIndex(self, _arg)

    def GetStartIndex(self):
        r"""GetStartIndex(self) -> unsigned long"""
        return _ITKIOImageBaseBasePython.itkNumericSeriesFileNames_GetStartIndex(self)

    def SetEndIndex(self, _arg):
        r"""
        SetEndIndex(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _ITKIOImageBaseBasePython.itkNumericSeriesFileNames_SetEndIndex(self, _arg)

    def GetEndIndex(self):
        r"""GetEndIndex(self) -> unsigned long"""
        return _ITKIOImageBaseBasePython.itkNumericSeriesFileNames_GetEndIndex(self)

    def SetIncrementIndex(self, _arg):
        r"""
        SetIncrementIndex(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _ITKIOImageBaseBasePython.itkNumericSeriesFileNames_SetIncrementIndex(self, _arg)

    def GetIncrementIndex(self):
        r"""GetIncrementIndex(self) -> unsigned long"""
        return _ITKIOImageBaseBasePython.itkNumericSeriesFileNames_GetIncrementIndex(self)

    def SetSeriesFormat(self, *args):
        r"""
        SetSeriesFormat(self, _arg)

        Parameters
        ----------
        _arg: char const *

        SetSeriesFormat(self, _arg)

        Parameters
        ----------
        _arg: std::string const &

        """
        return _ITKIOImageBaseBasePython.itkNumericSeriesFileNames_SetSeriesFormat(self, *args)

    def GetSeriesFormat(self):
        r"""GetSeriesFormat(self) -> char const *"""
        return _ITKIOImageBaseBasePython.itkNumericSeriesFileNames_GetSeriesFormat(self)

    def GetFileNames(self):
        r"""GetFileNames(self) -> vectorstring"""
        return _ITKIOImageBaseBasePython.itkNumericSeriesFileNames_GetFileNames(self)
    __swig_destroy__ = _ITKIOImageBaseBasePython.delete_itkNumericSeriesFileNames

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNumericSeriesFileNames

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKIOImageBaseBasePython.itkNumericSeriesFileNames_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNumericSeriesFileNames

        Create a new object of the class itkNumericSeriesFileNames and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNumericSeriesFileNames.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNumericSeriesFileNames.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNumericSeriesFileNames.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNumericSeriesFileNames in _ITKIOImageBaseBasePython:
_ITKIOImageBaseBasePython.itkNumericSeriesFileNames_swigregister(itkNumericSeriesFileNames)

def itkRegularExpressionSeriesFileNames_New():
    return itkRegularExpressionSeriesFileNames.New()

class itkRegularExpressionSeriesFileNames(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkRegularExpressionSeriesFileNames class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkRegularExpressionSeriesFileNames_Pointer"""
        return _ITKIOImageBaseBasePython.itkRegularExpressionSeriesFileNames___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkRegularExpressionSeriesFileNames_Pointer"""
        return _ITKIOImageBaseBasePython.itkRegularExpressionSeriesFileNames_Clone(self)

    def SetDirectory(self, *args):
        r"""
        SetDirectory(self, _arg)

        Parameters
        ----------
        _arg: char const *

        SetDirectory(self, _arg)

        Parameters
        ----------
        _arg: std::string const &

        """
        return _ITKIOImageBaseBasePython.itkRegularExpressionSeriesFileNames_SetDirectory(self, *args)

    def GetDirectory(self):
        r"""GetDirectory(self) -> char const *"""
        return _ITKIOImageBaseBasePython.itkRegularExpressionSeriesFileNames_GetDirectory(self)

    def SetRegularExpression(self, *args):
        r"""
        SetRegularExpression(self, _arg)

        Parameters
        ----------
        _arg: char const *

        SetRegularExpression(self, _arg)

        Parameters
        ----------
        _arg: std::string const &

        """
        return _ITKIOImageBaseBasePython.itkRegularExpressionSeriesFileNames_SetRegularExpression(self, *args)

    def GetRegularExpression(self):
        r"""GetRegularExpression(self) -> char const *"""
        return _ITKIOImageBaseBasePython.itkRegularExpressionSeriesFileNames_GetRegularExpression(self)

    def SetSubMatch(self, _arg):
        r"""
        SetSubMatch(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _ITKIOImageBaseBasePython.itkRegularExpressionSeriesFileNames_SetSubMatch(self, _arg)

    def GetSubMatch(self):
        r"""GetSubMatch(self) -> unsigned int"""
        return _ITKIOImageBaseBasePython.itkRegularExpressionSeriesFileNames_GetSubMatch(self)

    def SetNumericSort(self, _arg):
        r"""
        SetNumericSort(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _ITKIOImageBaseBasePython.itkRegularExpressionSeriesFileNames_SetNumericSort(self, _arg)

    def GetNumericSort(self):
        r"""GetNumericSort(self) -> bool"""
        return _ITKIOImageBaseBasePython.itkRegularExpressionSeriesFileNames_GetNumericSort(self)

    def NumericSortOn(self):
        r"""NumericSortOn(self)"""
        return _ITKIOImageBaseBasePython.itkRegularExpressionSeriesFileNames_NumericSortOn(self)

    def NumericSortOff(self):
        r"""NumericSortOff(self)"""
        return _ITKIOImageBaseBasePython.itkRegularExpressionSeriesFileNames_NumericSortOff(self)

    def GetFileNames(self):
        r"""GetFileNames(self) -> vectorstring"""
        return _ITKIOImageBaseBasePython.itkRegularExpressionSeriesFileNames_GetFileNames(self)
    __swig_destroy__ = _ITKIOImageBaseBasePython.delete_itkRegularExpressionSeriesFileNames

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkRegularExpressionSeriesFileNames

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKIOImageBaseBasePython.itkRegularExpressionSeriesFileNames_cast(obj)

    def New(*args, **kargs):
        """New() -> itkRegularExpressionSeriesFileNames

        Create a new object of the class itkRegularExpressionSeriesFileNames and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegularExpressionSeriesFileNames.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegularExpressionSeriesFileNames.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegularExpressionSeriesFileNames.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegularExpressionSeriesFileNames in _ITKIOImageBaseBasePython:
_ITKIOImageBaseBasePython.itkRegularExpressionSeriesFileNames_swigregister(itkRegularExpressionSeriesFileNames)
class itkStreamingImageIOBase(itkImageIOBase):
    r"""Proxy of C++ itkStreamingImageIOBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ITKIOImageBaseBasePython.delete_itkStreamingImageIOBase

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkStreamingImageIOBase

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _ITKIOImageBaseBasePython.itkStreamingImageIOBase_cast(obj)

# Register itkStreamingImageIOBase in _ITKIOImageBaseBasePython:
_ITKIOImageBaseBasePython.itkStreamingImageIOBase_swigregister(itkStreamingImageIOBase)

