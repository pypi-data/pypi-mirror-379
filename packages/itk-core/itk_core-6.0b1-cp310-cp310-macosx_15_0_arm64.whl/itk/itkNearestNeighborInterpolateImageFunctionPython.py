# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageFunctionPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkNearestNeighborInterpolateImageFunctionPython
else:
    import _itkNearestNeighborInterpolateImageFunctionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkInterpolateImageFunctionPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBAPixelPython
import itk.itkContinuousIndexPython
import itk.itkImageFunctionBasePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkFunctionBasePython
import itk.itkArrayPython

def itkNearestNeighborInterpolateImageFunctionICVF22D_New():
    return itkNearestNeighborInterpolateImageFunctionICVF22D.New()

class itkNearestNeighborInterpolateImageFunctionICVF22D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF22D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionICVF22D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionICVF22D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionICVF22D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionICVF22D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionICVF22D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionICVF22D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionICVF22D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionICVF22D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionICVF22D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionICVF22D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionICVF22D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionICVF22D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionICVF22D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionICVF22D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionICVF22D_swigregister(itkNearestNeighborInterpolateImageFunctionICVF22D)

def itkNearestNeighborInterpolateImageFunctionICVF33D_New():
    return itkNearestNeighborInterpolateImageFunctionICVF33D.New()

class itkNearestNeighborInterpolateImageFunctionICVF33D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF33D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionICVF33D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionICVF33D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionICVF33D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionICVF33D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionICVF33D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionICVF33D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionICVF33D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionICVF33D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionICVF33D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionICVF33D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionICVF33D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionICVF33D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionICVF33D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionICVF33D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionICVF33D_swigregister(itkNearestNeighborInterpolateImageFunctionICVF33D)

def itkNearestNeighborInterpolateImageFunctionICVF44D_New():
    return itkNearestNeighborInterpolateImageFunctionICVF44D.New()

class itkNearestNeighborInterpolateImageFunctionICVF44D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionICVF44D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionICVF44D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionICVF44D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionICVF44D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionICVF44D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionICVF44D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionICVF44D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionICVF44D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionICVF44D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionICVF44D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionICVF44D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionICVF44D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionICVF44D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionICVF44D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionICVF44D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionICVF44D_swigregister(itkNearestNeighborInterpolateImageFunctionICVF44D)

def itkNearestNeighborInterpolateImageFunctionID2D_New():
    return itkNearestNeighborInterpolateImageFunctionID2D.New()

class itkNearestNeighborInterpolateImageFunctionID2D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionID2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionID2D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionID2D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionID2D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionID2D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionID2D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionID2D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionID2D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionID2D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionID2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionID2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionID2D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionID2D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionID2D_swigregister(itkNearestNeighborInterpolateImageFunctionID2D)

def itkNearestNeighborInterpolateImageFunctionID3D_New():
    return itkNearestNeighborInterpolateImageFunctionID3D.New()

class itkNearestNeighborInterpolateImageFunctionID3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionID3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionID3D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionID3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionID3D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionID3D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionID3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionID3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionID3D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionID3D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionID3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionID3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionID3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionID3D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionID3D_swigregister(itkNearestNeighborInterpolateImageFunctionID3D)

def itkNearestNeighborInterpolateImageFunctionID4D_New():
    return itkNearestNeighborInterpolateImageFunctionID4D.New()

class itkNearestNeighborInterpolateImageFunctionID4D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID4D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionID4D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionID4D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionID4D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionID4D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionID4D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionID4D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionID4D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionID4D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionID4D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionID4D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionID4D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionID4D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionID4D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionID4D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionID4D_swigregister(itkNearestNeighborInterpolateImageFunctionID4D)

def itkNearestNeighborInterpolateImageFunctionIF2D_New():
    return itkNearestNeighborInterpolateImageFunctionIF2D.New()

class itkNearestNeighborInterpolateImageFunctionIF2D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionIF2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionIF2D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIF2D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionIF2D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIF2D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionIF2D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionIF2D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIF2D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionIF2D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionIF2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionIF2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionIF2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionIF2D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionIF2D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIF2D_swigregister(itkNearestNeighborInterpolateImageFunctionIF2D)

def itkNearestNeighborInterpolateImageFunctionIF3D_New():
    return itkNearestNeighborInterpolateImageFunctionIF3D.New()

class itkNearestNeighborInterpolateImageFunctionIF3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionIF3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionIF3D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIF3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionIF3D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIF3D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionIF3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionIF3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIF3D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionIF3D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionIF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionIF3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionIF3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionIF3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionIF3D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIF3D_swigregister(itkNearestNeighborInterpolateImageFunctionIF3D)

def itkNearestNeighborInterpolateImageFunctionIF4D_New():
    return itkNearestNeighborInterpolateImageFunctionIF4D.New()

class itkNearestNeighborInterpolateImageFunctionIF4D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF4D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionIF4D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionIF4D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIF4D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionIF4D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIF4D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionIF4D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionIF4D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIF4D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionIF4D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionIF4D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionIF4D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionIF4D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionIF4D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionIF4D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIF4D_swigregister(itkNearestNeighborInterpolateImageFunctionIF4D)

def itkNearestNeighborInterpolateImageFunctionIRGBAUC2D_New():
    return itkNearestNeighborInterpolateImageFunctionIRGBAUC2D.New()

class itkNearestNeighborInterpolateImageFunctionIRGBAUC2D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC2D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionIRGBAUC2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionIRGBAUC2D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIRGBAUC2D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionIRGBAUC2D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIRGBAUC2D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionIRGBAUC2D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionIRGBAUC2D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIRGBAUC2D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionIRGBAUC2D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionIRGBAUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionIRGBAUC2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionIRGBAUC2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionIRGBAUC2D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionIRGBAUC2D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIRGBAUC2D_swigregister(itkNearestNeighborInterpolateImageFunctionIRGBAUC2D)

def itkNearestNeighborInterpolateImageFunctionIRGBAUC3D_New():
    return itkNearestNeighborInterpolateImageFunctionIRGBAUC3D.New()

class itkNearestNeighborInterpolateImageFunctionIRGBAUC3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC3D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionIRGBAUC3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionIRGBAUC3D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIRGBAUC3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionIRGBAUC3D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIRGBAUC3D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionIRGBAUC3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionIRGBAUC3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIRGBAUC3D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionIRGBAUC3D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionIRGBAUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionIRGBAUC3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionIRGBAUC3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionIRGBAUC3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionIRGBAUC3D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIRGBAUC3D_swigregister(itkNearestNeighborInterpolateImageFunctionIRGBAUC3D)

def itkNearestNeighborInterpolateImageFunctionIRGBAUC4D_New():
    return itkNearestNeighborInterpolateImageFunctionIRGBAUC4D.New()

class itkNearestNeighborInterpolateImageFunctionIRGBAUC4D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBAUC4D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionIRGBAUC4D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionIRGBAUC4D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIRGBAUC4D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionIRGBAUC4D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIRGBAUC4D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionIRGBAUC4D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionIRGBAUC4D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIRGBAUC4D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionIRGBAUC4D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionIRGBAUC4D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionIRGBAUC4D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionIRGBAUC4D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionIRGBAUC4D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionIRGBAUC4D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIRGBAUC4D_swigregister(itkNearestNeighborInterpolateImageFunctionIRGBAUC4D)

def itkNearestNeighborInterpolateImageFunctionIRGBUC2D_New():
    return itkNearestNeighborInterpolateImageFunctionIRGBUC2D.New()

class itkNearestNeighborInterpolateImageFunctionIRGBUC2D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC2D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionIRGBUC2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionIRGBUC2D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIRGBUC2D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionIRGBUC2D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIRGBUC2D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionIRGBUC2D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionIRGBUC2D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIRGBUC2D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionIRGBUC2D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionIRGBUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionIRGBUC2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionIRGBUC2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionIRGBUC2D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionIRGBUC2D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIRGBUC2D_swigregister(itkNearestNeighborInterpolateImageFunctionIRGBUC2D)

def itkNearestNeighborInterpolateImageFunctionIRGBUC3D_New():
    return itkNearestNeighborInterpolateImageFunctionIRGBUC3D.New()

class itkNearestNeighborInterpolateImageFunctionIRGBUC3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC3D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionIRGBUC3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionIRGBUC3D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIRGBUC3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionIRGBUC3D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIRGBUC3D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionIRGBUC3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionIRGBUC3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIRGBUC3D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionIRGBUC3D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionIRGBUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionIRGBUC3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionIRGBUC3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionIRGBUC3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionIRGBUC3D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIRGBUC3D_swigregister(itkNearestNeighborInterpolateImageFunctionIRGBUC3D)

def itkNearestNeighborInterpolateImageFunctionIRGBUC4D_New():
    return itkNearestNeighborInterpolateImageFunctionIRGBUC4D.New()

class itkNearestNeighborInterpolateImageFunctionIRGBUC4D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIRGBUC4D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionIRGBUC4D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionIRGBUC4D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIRGBUC4D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionIRGBUC4D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIRGBUC4D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionIRGBUC4D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionIRGBUC4D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIRGBUC4D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionIRGBUC4D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionIRGBUC4D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionIRGBUC4D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionIRGBUC4D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionIRGBUC4D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionIRGBUC4D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIRGBUC4D_swigregister(itkNearestNeighborInterpolateImageFunctionIRGBUC4D)

def itkNearestNeighborInterpolateImageFunctionISS2D_New():
    return itkNearestNeighborInterpolateImageFunctionISS2D.New()

class itkNearestNeighborInterpolateImageFunctionISS2D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionISS2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionISS2D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionISS2D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionISS2D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionISS2D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionISS2D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionISS2D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionISS2D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionISS2D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionISS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionISS2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionISS2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionISS2D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionISS2D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionISS2D_swigregister(itkNearestNeighborInterpolateImageFunctionISS2D)

def itkNearestNeighborInterpolateImageFunctionISS3D_New():
    return itkNearestNeighborInterpolateImageFunctionISS3D.New()

class itkNearestNeighborInterpolateImageFunctionISS3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionISS3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionISS3D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionISS3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionISS3D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionISS3D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionISS3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionISS3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionISS3D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionISS3D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionISS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionISS3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionISS3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionISS3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionISS3D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionISS3D_swigregister(itkNearestNeighborInterpolateImageFunctionISS3D)

def itkNearestNeighborInterpolateImageFunctionISS4D_New():
    return itkNearestNeighborInterpolateImageFunctionISS4D.New()

class itkNearestNeighborInterpolateImageFunctionISS4D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS4D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionISS4D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionISS4D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionISS4D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionISS4D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionISS4D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionISS4D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionISS4D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionISS4D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionISS4D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionISS4D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionISS4D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionISS4D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionISS4D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionISS4D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionISS4D_swigregister(itkNearestNeighborInterpolateImageFunctionISS4D)

def itkNearestNeighborInterpolateImageFunctionIUC2D_New():
    return itkNearestNeighborInterpolateImageFunctionIUC2D.New()

class itkNearestNeighborInterpolateImageFunctionIUC2D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionIUC2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionIUC2D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUC2D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionIUC2D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUC2D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionIUC2D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionIUC2D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUC2D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionIUC2D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionIUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionIUC2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionIUC2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionIUC2D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionIUC2D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUC2D_swigregister(itkNearestNeighborInterpolateImageFunctionIUC2D)

def itkNearestNeighborInterpolateImageFunctionIUC3D_New():
    return itkNearestNeighborInterpolateImageFunctionIUC3D.New()

class itkNearestNeighborInterpolateImageFunctionIUC3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionIUC3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionIUC3D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUC3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionIUC3D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUC3D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionIUC3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionIUC3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUC3D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionIUC3D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionIUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionIUC3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionIUC3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionIUC3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionIUC3D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUC3D_swigregister(itkNearestNeighborInterpolateImageFunctionIUC3D)

def itkNearestNeighborInterpolateImageFunctionIUC4D_New():
    return itkNearestNeighborInterpolateImageFunctionIUC4D.New()

class itkNearestNeighborInterpolateImageFunctionIUC4D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC4D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionIUC4D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionIUC4D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUC4D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionIUC4D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUC4D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionIUC4D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionIUC4D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUC4D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionIUC4D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionIUC4D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionIUC4D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionIUC4D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionIUC4D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionIUC4D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUC4D_swigregister(itkNearestNeighborInterpolateImageFunctionIUC4D)

def itkNearestNeighborInterpolateImageFunctionIUS2D_New():
    return itkNearestNeighborInterpolateImageFunctionIUS2D.New()

class itkNearestNeighborInterpolateImageFunctionIUS2D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionIUS2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionIUS2D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUS2D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionIUS2D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUS2D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionIUS2D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionIUS2D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUS2D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionIUS2D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionIUS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionIUS2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionIUS2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionIUS2D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionIUS2D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUS2D_swigregister(itkNearestNeighborInterpolateImageFunctionIUS2D)

def itkNearestNeighborInterpolateImageFunctionIUS3D_New():
    return itkNearestNeighborInterpolateImageFunctionIUS3D.New()

class itkNearestNeighborInterpolateImageFunctionIUS3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionIUS3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionIUS3D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUS3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionIUS3D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUS3D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionIUS3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionIUS3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUS3D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionIUS3D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionIUS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionIUS3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionIUS3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionIUS3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionIUS3D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUS3D_swigregister(itkNearestNeighborInterpolateImageFunctionIUS3D)

def itkNearestNeighborInterpolateImageFunctionIUS4D_New():
    return itkNearestNeighborInterpolateImageFunctionIUS4D.New()

class itkNearestNeighborInterpolateImageFunctionIUS4D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS4D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionIUS4D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionIUS4D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUS4D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionIUS4D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUS4D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionIUS4D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionIUS4D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUS4D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionIUS4D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionIUS4D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionIUS4D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionIUS4D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionIUS4D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionIUS4D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUS4D_swigregister(itkNearestNeighborInterpolateImageFunctionIUS4D)

def itkNearestNeighborInterpolateImageFunctionIVF22D_New():
    return itkNearestNeighborInterpolateImageFunctionIVF22D.New()

class itkNearestNeighborInterpolateImageFunctionIVF22D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF22D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionIVF22D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionIVF22D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIVF22D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionIVF22D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIVF22D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionIVF22D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionIVF22D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIVF22D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionIVF22D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionIVF22D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionIVF22D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionIVF22D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionIVF22D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionIVF22D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIVF22D_swigregister(itkNearestNeighborInterpolateImageFunctionIVF22D)

def itkNearestNeighborInterpolateImageFunctionIVF33D_New():
    return itkNearestNeighborInterpolateImageFunctionIVF33D.New()

class itkNearestNeighborInterpolateImageFunctionIVF33D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF33D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionIVF33D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionIVF33D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIVF33D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionIVF33D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIVF33D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionIVF33D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionIVF33D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIVF33D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionIVF33D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionIVF33D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionIVF33D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionIVF33D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionIVF33D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionIVF33D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIVF33D_swigregister(itkNearestNeighborInterpolateImageFunctionIVF33D)

def itkNearestNeighborInterpolateImageFunctionIVF44D_New():
    return itkNearestNeighborInterpolateImageFunctionIVF44D.New()

class itkNearestNeighborInterpolateImageFunctionIVF44D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIVF44D):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionIVF44D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionIVF44D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIVF44D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionIVF44D_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIVF44D_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionIVF44D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionIVF44D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIVF44D_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionIVF44D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionIVF44D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionIVF44D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionIVF44D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionIVF44D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionIVF44D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIVF44D_swigregister(itkNearestNeighborInterpolateImageFunctionIVF44D)

def itkNearestNeighborInterpolateImageFunctionPA3DSCIFD_New():
    return itkNearestNeighborInterpolateImageFunctionPA3DSCIFD.New()

class itkNearestNeighborInterpolateImageFunctionPA3DSCIFD(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionPA3DSCIFD):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionPA3DSCIFD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionPA3DSCIFD_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionPA3DSCIFD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionPA3DSCIFD_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionPA3DSCIFD_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionPA3DSCIFD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionPA3DSCIFD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionPA3DSCIFD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionPA3DSCIFD

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionPA3DSCIFD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionPA3DSCIFD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionPA3DSCIFD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionPA3DSCIFD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionPA3DSCIFD in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionPA3DSCIFD_swigregister(itkNearestNeighborInterpolateImageFunctionPA3DSCIFD)

def itkNearestNeighborInterpolateImageFunctionPA3DSCIUCD_New():
    return itkNearestNeighborInterpolateImageFunctionPA3DSCIUCD.New()

class itkNearestNeighborInterpolateImageFunctionPA3DSCIUCD(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionPA3DSCIUCD):
    r"""Proxy of C++ itkNearestNeighborInterpolateImageFunctionPA3DSCIUCD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkNearestNeighborInterpolateImageFunctionPA3DSCIUCD_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionPA3DSCIUCD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkNearestNeighborInterpolateImageFunctionPA3DSCIUCD_Pointer"""
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionPA3DSCIUCD_Clone(self)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionPA3DSCIUCD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkNearestNeighborInterpolateImageFunctionPA3DSCIUCD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionPA3DSCIUCD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionPA3DSCIUCD

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionPA3DSCIUCD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionPA3DSCIUCD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionPA3DSCIUCD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionPA3DSCIUCD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionPA3DSCIUCD in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionPA3DSCIUCD_swigregister(itkNearestNeighborInterpolateImageFunctionPA3DSCIUCD)

