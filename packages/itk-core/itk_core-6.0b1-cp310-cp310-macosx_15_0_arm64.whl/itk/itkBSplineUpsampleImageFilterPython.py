# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageGridPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBSplineUpsampleImageFilterPython
else:
    import _itkBSplineUpsampleImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkBSplineDownsampleImageFilterPython
import itk.itkSizePython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython

def itkBSplineUpsampleImageFilterID2ID2_New():
    return itkBSplineUpsampleImageFilterID2ID2.New()

class itkBSplineUpsampleImageFilterID2ID2(itk.itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID2ID2_Superclass):
    r"""Proxy of C++ itkBSplineUpsampleImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineUpsampleImageFilterID2ID2_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineUpsampleImageFilterID2ID2_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterID2ID2_Clone(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterID2ID2_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterID2ID2_GenerateInputRequestedRegion(self)
    DoubleConvertibleToOutputCheck = _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineUpsampleImageFilterPython.delete_itkBSplineUpsampleImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineUpsampleImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineUpsampleImageFilterID2ID2

        Create a new object of the class itkBSplineUpsampleImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineUpsampleImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineUpsampleImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineUpsampleImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineUpsampleImageFilterID2ID2 in _itkBSplineUpsampleImageFilterPython:
_itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterID2ID2_swigregister(itkBSplineUpsampleImageFilterID2ID2)

def itkBSplineUpsampleImageFilterID3ID3_New():
    return itkBSplineUpsampleImageFilterID3ID3.New()

class itkBSplineUpsampleImageFilterID3ID3(itk.itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID3ID3_Superclass):
    r"""Proxy of C++ itkBSplineUpsampleImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineUpsampleImageFilterID3ID3_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineUpsampleImageFilterID3ID3_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterID3ID3_Clone(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterID3ID3_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterID3ID3_GenerateInputRequestedRegion(self)
    DoubleConvertibleToOutputCheck = _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineUpsampleImageFilterPython.delete_itkBSplineUpsampleImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineUpsampleImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineUpsampleImageFilterID3ID3

        Create a new object of the class itkBSplineUpsampleImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineUpsampleImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineUpsampleImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineUpsampleImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineUpsampleImageFilterID3ID3 in _itkBSplineUpsampleImageFilterPython:
_itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterID3ID3_swigregister(itkBSplineUpsampleImageFilterID3ID3)

def itkBSplineUpsampleImageFilterID4ID4_New():
    return itkBSplineUpsampleImageFilterID4ID4.New()

class itkBSplineUpsampleImageFilterID4ID4(itk.itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID4ID4_Superclass):
    r"""Proxy of C++ itkBSplineUpsampleImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineUpsampleImageFilterID4ID4_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineUpsampleImageFilterID4ID4_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterID4ID4_Clone(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterID4ID4_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterID4ID4_GenerateInputRequestedRegion(self)
    DoubleConvertibleToOutputCheck = _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterID4ID4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineUpsampleImageFilterPython.delete_itkBSplineUpsampleImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineUpsampleImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineUpsampleImageFilterID4ID4

        Create a new object of the class itkBSplineUpsampleImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineUpsampleImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineUpsampleImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineUpsampleImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineUpsampleImageFilterID4ID4 in _itkBSplineUpsampleImageFilterPython:
_itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterID4ID4_swigregister(itkBSplineUpsampleImageFilterID4ID4)

def itkBSplineUpsampleImageFilterIF2IF2_New():
    return itkBSplineUpsampleImageFilterIF2IF2.New()

class itkBSplineUpsampleImageFilterIF2IF2(itk.itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF2IF2_Superclass):
    r"""Proxy of C++ itkBSplineUpsampleImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineUpsampleImageFilterIF2IF2_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineUpsampleImageFilterIF2IF2_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIF2IF2_Clone(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIF2IF2_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIF2IF2_GenerateInputRequestedRegion(self)
    DoubleConvertibleToOutputCheck = _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineUpsampleImageFilterPython.delete_itkBSplineUpsampleImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineUpsampleImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineUpsampleImageFilterIF2IF2

        Create a new object of the class itkBSplineUpsampleImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineUpsampleImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineUpsampleImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineUpsampleImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineUpsampleImageFilterIF2IF2 in _itkBSplineUpsampleImageFilterPython:
_itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIF2IF2_swigregister(itkBSplineUpsampleImageFilterIF2IF2)

def itkBSplineUpsampleImageFilterIF3IF3_New():
    return itkBSplineUpsampleImageFilterIF3IF3.New()

class itkBSplineUpsampleImageFilterIF3IF3(itk.itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF3IF3_Superclass):
    r"""Proxy of C++ itkBSplineUpsampleImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineUpsampleImageFilterIF3IF3_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineUpsampleImageFilterIF3IF3_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIF3IF3_Clone(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIF3IF3_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIF3IF3_GenerateInputRequestedRegion(self)
    DoubleConvertibleToOutputCheck = _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineUpsampleImageFilterPython.delete_itkBSplineUpsampleImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineUpsampleImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineUpsampleImageFilterIF3IF3

        Create a new object of the class itkBSplineUpsampleImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineUpsampleImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineUpsampleImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineUpsampleImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineUpsampleImageFilterIF3IF3 in _itkBSplineUpsampleImageFilterPython:
_itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIF3IF3_swigregister(itkBSplineUpsampleImageFilterIF3IF3)

def itkBSplineUpsampleImageFilterIF4IF4_New():
    return itkBSplineUpsampleImageFilterIF4IF4.New()

class itkBSplineUpsampleImageFilterIF4IF4(itk.itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF4IF4_Superclass):
    r"""Proxy of C++ itkBSplineUpsampleImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineUpsampleImageFilterIF4IF4_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineUpsampleImageFilterIF4IF4_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIF4IF4_Clone(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIF4IF4_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIF4IF4_GenerateInputRequestedRegion(self)
    DoubleConvertibleToOutputCheck = _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIF4IF4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineUpsampleImageFilterPython.delete_itkBSplineUpsampleImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineUpsampleImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineUpsampleImageFilterIF4IF4

        Create a new object of the class itkBSplineUpsampleImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineUpsampleImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineUpsampleImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineUpsampleImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineUpsampleImageFilterIF4IF4 in _itkBSplineUpsampleImageFilterPython:
_itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIF4IF4_swigregister(itkBSplineUpsampleImageFilterIF4IF4)

def itkBSplineUpsampleImageFilterISS2ISS2_New():
    return itkBSplineUpsampleImageFilterISS2ISS2.New()

class itkBSplineUpsampleImageFilterISS2ISS2(itk.itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS2ISS2_Superclass):
    r"""Proxy of C++ itkBSplineUpsampleImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineUpsampleImageFilterISS2ISS2_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineUpsampleImageFilterISS2ISS2_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterISS2ISS2_Clone(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterISS2ISS2_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterISS2ISS2_GenerateInputRequestedRegion(self)
    DoubleConvertibleToOutputCheck = _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineUpsampleImageFilterPython.delete_itkBSplineUpsampleImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineUpsampleImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineUpsampleImageFilterISS2ISS2

        Create a new object of the class itkBSplineUpsampleImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineUpsampleImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineUpsampleImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineUpsampleImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineUpsampleImageFilterISS2ISS2 in _itkBSplineUpsampleImageFilterPython:
_itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterISS2ISS2_swigregister(itkBSplineUpsampleImageFilterISS2ISS2)

def itkBSplineUpsampleImageFilterISS3ISS3_New():
    return itkBSplineUpsampleImageFilterISS3ISS3.New()

class itkBSplineUpsampleImageFilterISS3ISS3(itk.itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS3ISS3_Superclass):
    r"""Proxy of C++ itkBSplineUpsampleImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineUpsampleImageFilterISS3ISS3_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineUpsampleImageFilterISS3ISS3_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterISS3ISS3_Clone(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterISS3ISS3_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterISS3ISS3_GenerateInputRequestedRegion(self)
    DoubleConvertibleToOutputCheck = _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineUpsampleImageFilterPython.delete_itkBSplineUpsampleImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineUpsampleImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineUpsampleImageFilterISS3ISS3

        Create a new object of the class itkBSplineUpsampleImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineUpsampleImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineUpsampleImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineUpsampleImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineUpsampleImageFilterISS3ISS3 in _itkBSplineUpsampleImageFilterPython:
_itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterISS3ISS3_swigregister(itkBSplineUpsampleImageFilterISS3ISS3)

def itkBSplineUpsampleImageFilterISS4ISS4_New():
    return itkBSplineUpsampleImageFilterISS4ISS4.New()

class itkBSplineUpsampleImageFilterISS4ISS4(itk.itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS4ISS4_Superclass):
    r"""Proxy of C++ itkBSplineUpsampleImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineUpsampleImageFilterISS4ISS4_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineUpsampleImageFilterISS4ISS4_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterISS4ISS4_Clone(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterISS4ISS4_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterISS4ISS4_GenerateInputRequestedRegion(self)
    DoubleConvertibleToOutputCheck = _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterISS4ISS4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineUpsampleImageFilterPython.delete_itkBSplineUpsampleImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineUpsampleImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineUpsampleImageFilterISS4ISS4

        Create a new object of the class itkBSplineUpsampleImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineUpsampleImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineUpsampleImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineUpsampleImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineUpsampleImageFilterISS4ISS4 in _itkBSplineUpsampleImageFilterPython:
_itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterISS4ISS4_swigregister(itkBSplineUpsampleImageFilterISS4ISS4)

def itkBSplineUpsampleImageFilterIUC2IUC2_New():
    return itkBSplineUpsampleImageFilterIUC2IUC2.New()

class itkBSplineUpsampleImageFilterIUC2IUC2(itk.itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC2IUC2_Superclass):
    r"""Proxy of C++ itkBSplineUpsampleImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineUpsampleImageFilterIUC2IUC2_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineUpsampleImageFilterIUC2IUC2_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUC2IUC2_Clone(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUC2IUC2_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUC2IUC2_GenerateInputRequestedRegion(self)
    DoubleConvertibleToOutputCheck = _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineUpsampleImageFilterPython.delete_itkBSplineUpsampleImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineUpsampleImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineUpsampleImageFilterIUC2IUC2

        Create a new object of the class itkBSplineUpsampleImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineUpsampleImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineUpsampleImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineUpsampleImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineUpsampleImageFilterIUC2IUC2 in _itkBSplineUpsampleImageFilterPython:
_itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUC2IUC2_swigregister(itkBSplineUpsampleImageFilterIUC2IUC2)

def itkBSplineUpsampleImageFilterIUC3IUC3_New():
    return itkBSplineUpsampleImageFilterIUC3IUC3.New()

class itkBSplineUpsampleImageFilterIUC3IUC3(itk.itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC3IUC3_Superclass):
    r"""Proxy of C++ itkBSplineUpsampleImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineUpsampleImageFilterIUC3IUC3_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineUpsampleImageFilterIUC3IUC3_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUC3IUC3_Clone(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUC3IUC3_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUC3IUC3_GenerateInputRequestedRegion(self)
    DoubleConvertibleToOutputCheck = _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineUpsampleImageFilterPython.delete_itkBSplineUpsampleImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineUpsampleImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineUpsampleImageFilterIUC3IUC3

        Create a new object of the class itkBSplineUpsampleImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineUpsampleImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineUpsampleImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineUpsampleImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineUpsampleImageFilterIUC3IUC3 in _itkBSplineUpsampleImageFilterPython:
_itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUC3IUC3_swigregister(itkBSplineUpsampleImageFilterIUC3IUC3)

def itkBSplineUpsampleImageFilterIUC4IUC4_New():
    return itkBSplineUpsampleImageFilterIUC4IUC4.New()

class itkBSplineUpsampleImageFilterIUC4IUC4(itk.itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC4IUC4_Superclass):
    r"""Proxy of C++ itkBSplineUpsampleImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineUpsampleImageFilterIUC4IUC4_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineUpsampleImageFilterIUC4IUC4_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUC4IUC4_Clone(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUC4IUC4_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUC4IUC4_GenerateInputRequestedRegion(self)
    DoubleConvertibleToOutputCheck = _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUC4IUC4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineUpsampleImageFilterPython.delete_itkBSplineUpsampleImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineUpsampleImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineUpsampleImageFilterIUC4IUC4

        Create a new object of the class itkBSplineUpsampleImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineUpsampleImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineUpsampleImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineUpsampleImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineUpsampleImageFilterIUC4IUC4 in _itkBSplineUpsampleImageFilterPython:
_itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUC4IUC4_swigregister(itkBSplineUpsampleImageFilterIUC4IUC4)

def itkBSplineUpsampleImageFilterIUS2IUS2_New():
    return itkBSplineUpsampleImageFilterIUS2IUS2.New()

class itkBSplineUpsampleImageFilterIUS2IUS2(itk.itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS2IUS2_Superclass):
    r"""Proxy of C++ itkBSplineUpsampleImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineUpsampleImageFilterIUS2IUS2_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineUpsampleImageFilterIUS2IUS2_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUS2IUS2_Clone(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUS2IUS2_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUS2IUS2_GenerateInputRequestedRegion(self)
    DoubleConvertibleToOutputCheck = _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineUpsampleImageFilterPython.delete_itkBSplineUpsampleImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineUpsampleImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineUpsampleImageFilterIUS2IUS2

        Create a new object of the class itkBSplineUpsampleImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineUpsampleImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineUpsampleImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineUpsampleImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineUpsampleImageFilterIUS2IUS2 in _itkBSplineUpsampleImageFilterPython:
_itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUS2IUS2_swigregister(itkBSplineUpsampleImageFilterIUS2IUS2)

def itkBSplineUpsampleImageFilterIUS3IUS3_New():
    return itkBSplineUpsampleImageFilterIUS3IUS3.New()

class itkBSplineUpsampleImageFilterIUS3IUS3(itk.itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS3IUS3_Superclass):
    r"""Proxy of C++ itkBSplineUpsampleImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineUpsampleImageFilterIUS3IUS3_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineUpsampleImageFilterIUS3IUS3_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUS3IUS3_Clone(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUS3IUS3_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUS3IUS3_GenerateInputRequestedRegion(self)
    DoubleConvertibleToOutputCheck = _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineUpsampleImageFilterPython.delete_itkBSplineUpsampleImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineUpsampleImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineUpsampleImageFilterIUS3IUS3

        Create a new object of the class itkBSplineUpsampleImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineUpsampleImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineUpsampleImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineUpsampleImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineUpsampleImageFilterIUS3IUS3 in _itkBSplineUpsampleImageFilterPython:
_itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUS3IUS3_swigregister(itkBSplineUpsampleImageFilterIUS3IUS3)

def itkBSplineUpsampleImageFilterIUS4IUS4_New():
    return itkBSplineUpsampleImageFilterIUS4IUS4.New()

class itkBSplineUpsampleImageFilterIUS4IUS4(itk.itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS4IUS4_Superclass):
    r"""Proxy of C++ itkBSplineUpsampleImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineUpsampleImageFilterIUS4IUS4_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineUpsampleImageFilterIUS4IUS4_Pointer"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUS4IUS4_Clone(self)

    def GenerateOutputInformation(self):
        r"""GenerateOutputInformation(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUS4IUS4_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        r"""GenerateInputRequestedRegion(self)"""
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUS4IUS4_GenerateInputRequestedRegion(self)
    DoubleConvertibleToOutputCheck = _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUS4IUS4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineUpsampleImageFilterPython.delete_itkBSplineUpsampleImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineUpsampleImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineUpsampleImageFilterIUS4IUS4

        Create a new object of the class itkBSplineUpsampleImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineUpsampleImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineUpsampleImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineUpsampleImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineUpsampleImageFilterIUS4IUS4 in _itkBSplineUpsampleImageFilterPython:
_itkBSplineUpsampleImageFilterPython.itkBSplineUpsampleImageFilterIUS4IUS4_swigregister(itkBSplineUpsampleImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def b_spline_upsample_image_filter(*args: itkt.ImageLike,  spline_order: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for BSplineUpsampleImageFilter"""
    import itk

    kwarg_typehints = { 'spline_order':spline_order }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.BSplineUpsampleImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def b_spline_upsample_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageGrid.BSplineUpsampleImageFilter
    b_spline_upsample_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    b_spline_upsample_image_filter.__doc__ = filter_object.__doc__



