# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKStatisticsPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHistogramToRunLengthFeaturesFilterPython
else:
    import _itkHistogramToRunLengthFeaturesFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkArrayPython
import itk.itkHistogramPython
import itk.itkSamplePython
class itkHistogramToRunLengthFeaturesFilterEnums(object):
    r"""Proxy of C++ itkHistogramToRunLengthFeaturesFilterEnums class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    RunLengthFeature_ShortRunEmphasis = _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterEnums_RunLengthFeature_ShortRunEmphasis
    
    RunLengthFeature_LongRunEmphasis = _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterEnums_RunLengthFeature_LongRunEmphasis
    
    RunLengthFeature_GreyLevelNonuniformity = _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterEnums_RunLengthFeature_GreyLevelNonuniformity
    
    RunLengthFeature_RunLengthNonuniformity = _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterEnums_RunLengthFeature_RunLengthNonuniformity
    
    RunLengthFeature_LowGreyLevelRunEmphasis = _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterEnums_RunLengthFeature_LowGreyLevelRunEmphasis
    
    RunLengthFeature_HighGreyLevelRunEmphasis = _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterEnums_RunLengthFeature_HighGreyLevelRunEmphasis
    
    RunLengthFeature_ShortRunLowGreyLevelEmphasis = _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterEnums_RunLengthFeature_ShortRunLowGreyLevelEmphasis
    
    RunLengthFeature_ShortRunHighGreyLevelEmphasis = _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterEnums_RunLengthFeature_ShortRunHighGreyLevelEmphasis
    
    RunLengthFeature_LongRunLowGreyLevelEmphasis = _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterEnums_RunLengthFeature_LongRunLowGreyLevelEmphasis
    
    RunLengthFeature_LongRunHighGreyLevelEmphasis = _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterEnums_RunLengthFeature_LongRunHighGreyLevelEmphasis
    

    def __init__(self, *args):
        r"""
        __init__(self) -> itkHistogramToRunLengthFeaturesFilterEnums
        __init__(self, arg0) -> itkHistogramToRunLengthFeaturesFilterEnums

        Parameters
        ----------
        arg0: itkHistogramToRunLengthFeaturesFilterEnums const &

        """
        _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterEnums_swiginit(self, _itkHistogramToRunLengthFeaturesFilterPython.new_itkHistogramToRunLengthFeaturesFilterEnums(*args))
    __swig_destroy__ = _itkHistogramToRunLengthFeaturesFilterPython.delete_itkHistogramToRunLengthFeaturesFilterEnums

# Register itkHistogramToRunLengthFeaturesFilterEnums in _itkHistogramToRunLengthFeaturesFilterPython:
_itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterEnums_swigregister(itkHistogramToRunLengthFeaturesFilterEnums)

def itkHistogramToRunLengthFeaturesFilterHD_New():
    return itkHistogramToRunLengthFeaturesFilterHD.New()

class itkHistogramToRunLengthFeaturesFilterHD(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkHistogramToRunLengthFeaturesFilterHD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToRunLengthFeaturesFilterHD_Pointer"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToRunLengthFeaturesFilterHD_Pointer"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_Clone(self)

    def SetInput(self, histogram):
        r"""
        SetInput(self, histogram)

        Parameters
        ----------
        histogram: itkHistogramD const *

        """
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_SetInput(self, histogram)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramD"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_GetInput(self)

    def GetShortRunEmphasis(self):
        r"""GetShortRunEmphasis(self) -> double"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_GetShortRunEmphasis(self)

    def GetShortRunEmphasisOutput(self):
        r"""GetShortRunEmphasisOutput(self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_GetShortRunEmphasisOutput(self)

    def GetLongRunEmphasis(self):
        r"""GetLongRunEmphasis(self) -> double"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_GetLongRunEmphasis(self)

    def GetLongRunEmphasisOutput(self):
        r"""GetLongRunEmphasisOutput(self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_GetLongRunEmphasisOutput(self)

    def GetGreyLevelNonuniformity(self):
        r"""GetGreyLevelNonuniformity(self) -> double"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_GetGreyLevelNonuniformity(self)

    def GetGreyLevelNonuniformityOutput(self):
        r"""GetGreyLevelNonuniformityOutput(self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_GetGreyLevelNonuniformityOutput(self)

    def GetRunLengthNonuniformity(self):
        r"""GetRunLengthNonuniformity(self) -> double"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_GetRunLengthNonuniformity(self)

    def GetRunLengthNonuniformityOutput(self):
        r"""GetRunLengthNonuniformityOutput(self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_GetRunLengthNonuniformityOutput(self)

    def GetLowGreyLevelRunEmphasis(self):
        r"""GetLowGreyLevelRunEmphasis(self) -> double"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_GetLowGreyLevelRunEmphasis(self)

    def GetLowGreyLevelRunEmphasisOutput(self):
        r"""GetLowGreyLevelRunEmphasisOutput(self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_GetLowGreyLevelRunEmphasisOutput(self)

    def GetHighGreyLevelRunEmphasis(self):
        r"""GetHighGreyLevelRunEmphasis(self) -> double"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_GetHighGreyLevelRunEmphasis(self)

    def GetHighGreyLevelRunEmphasisOutput(self):
        r"""GetHighGreyLevelRunEmphasisOutput(self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_GetHighGreyLevelRunEmphasisOutput(self)

    def GetShortRunLowGreyLevelEmphasis(self):
        r"""GetShortRunLowGreyLevelEmphasis(self) -> double"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_GetShortRunLowGreyLevelEmphasis(self)

    def GetShortRunLowGreyLevelEmphasisOutput(self):
        r"""GetShortRunLowGreyLevelEmphasisOutput(self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_GetShortRunLowGreyLevelEmphasisOutput(self)

    def GetShortRunHighGreyLevelEmphasis(self):
        r"""GetShortRunHighGreyLevelEmphasis(self) -> double"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_GetShortRunHighGreyLevelEmphasis(self)

    def GetShortRunHighGreyLevelEmphasisOutput(self):
        r"""GetShortRunHighGreyLevelEmphasisOutput(self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_GetShortRunHighGreyLevelEmphasisOutput(self)

    def GetLongRunLowGreyLevelEmphasis(self):
        r"""GetLongRunLowGreyLevelEmphasis(self) -> double"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_GetLongRunLowGreyLevelEmphasis(self)

    def GetLongRunLowGreyLevelEmphasisOutput(self):
        r"""GetLongRunLowGreyLevelEmphasisOutput(self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_GetLongRunLowGreyLevelEmphasisOutput(self)

    def GetLongRunHighGreyLevelEmphasis(self):
        r"""GetLongRunHighGreyLevelEmphasis(self) -> double"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_GetLongRunHighGreyLevelEmphasis(self)

    def GetLongRunHighGreyLevelEmphasisOutput(self):
        r"""GetLongRunHighGreyLevelEmphasisOutput(self) -> itkSimpleDataObjectDecoratorD"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_GetLongRunHighGreyLevelEmphasisOutput(self)

    def GetTotalNumberOfRuns(self):
        r"""GetTotalNumberOfRuns(self) -> unsigned long"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_GetTotalNumberOfRuns(self)

    def GetFeature(self, feature):
        r"""
        GetFeature(self, feature) -> double

        Parameters
        ----------
        feature: enum itkHistogramToRunLengthFeaturesFilterEnums::RunLengthFeature

        """
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_GetFeature(self, feature)
    __swig_destroy__ = _itkHistogramToRunLengthFeaturesFilterPython.delete_itkHistogramToRunLengthFeaturesFilterHD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToRunLengthFeaturesFilterHD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToRunLengthFeaturesFilterHD

        Create a new object of the class itkHistogramToRunLengthFeaturesFilterHD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToRunLengthFeaturesFilterHD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToRunLengthFeaturesFilterHD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToRunLengthFeaturesFilterHD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToRunLengthFeaturesFilterHD in _itkHistogramToRunLengthFeaturesFilterPython:
_itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHD_swigregister(itkHistogramToRunLengthFeaturesFilterHD)

def itkHistogramToRunLengthFeaturesFilterHF_New():
    return itkHistogramToRunLengthFeaturesFilterHF.New()

class itkHistogramToRunLengthFeaturesFilterHF(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkHistogramToRunLengthFeaturesFilterHF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkHistogramToRunLengthFeaturesFilterHF_Pointer"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkHistogramToRunLengthFeaturesFilterHF_Pointer"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_Clone(self)

    def SetInput(self, histogram):
        r"""
        SetInput(self, histogram)

        Parameters
        ----------
        histogram: itkHistogramF const *

        """
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_SetInput(self, histogram)

    def GetInput(self):
        r"""GetInput(self) -> itkHistogramF"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_GetInput(self)

    def GetShortRunEmphasis(self):
        r"""GetShortRunEmphasis(self) -> float"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_GetShortRunEmphasis(self)

    def GetShortRunEmphasisOutput(self):
        r"""GetShortRunEmphasisOutput(self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_GetShortRunEmphasisOutput(self)

    def GetLongRunEmphasis(self):
        r"""GetLongRunEmphasis(self) -> float"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_GetLongRunEmphasis(self)

    def GetLongRunEmphasisOutput(self):
        r"""GetLongRunEmphasisOutput(self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_GetLongRunEmphasisOutput(self)

    def GetGreyLevelNonuniformity(self):
        r"""GetGreyLevelNonuniformity(self) -> float"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_GetGreyLevelNonuniformity(self)

    def GetGreyLevelNonuniformityOutput(self):
        r"""GetGreyLevelNonuniformityOutput(self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_GetGreyLevelNonuniformityOutput(self)

    def GetRunLengthNonuniformity(self):
        r"""GetRunLengthNonuniformity(self) -> float"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_GetRunLengthNonuniformity(self)

    def GetRunLengthNonuniformityOutput(self):
        r"""GetRunLengthNonuniformityOutput(self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_GetRunLengthNonuniformityOutput(self)

    def GetLowGreyLevelRunEmphasis(self):
        r"""GetLowGreyLevelRunEmphasis(self) -> float"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_GetLowGreyLevelRunEmphasis(self)

    def GetLowGreyLevelRunEmphasisOutput(self):
        r"""GetLowGreyLevelRunEmphasisOutput(self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_GetLowGreyLevelRunEmphasisOutput(self)

    def GetHighGreyLevelRunEmphasis(self):
        r"""GetHighGreyLevelRunEmphasis(self) -> float"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_GetHighGreyLevelRunEmphasis(self)

    def GetHighGreyLevelRunEmphasisOutput(self):
        r"""GetHighGreyLevelRunEmphasisOutput(self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_GetHighGreyLevelRunEmphasisOutput(self)

    def GetShortRunLowGreyLevelEmphasis(self):
        r"""GetShortRunLowGreyLevelEmphasis(self) -> float"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_GetShortRunLowGreyLevelEmphasis(self)

    def GetShortRunLowGreyLevelEmphasisOutput(self):
        r"""GetShortRunLowGreyLevelEmphasisOutput(self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_GetShortRunLowGreyLevelEmphasisOutput(self)

    def GetShortRunHighGreyLevelEmphasis(self):
        r"""GetShortRunHighGreyLevelEmphasis(self) -> float"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_GetShortRunHighGreyLevelEmphasis(self)

    def GetShortRunHighGreyLevelEmphasisOutput(self):
        r"""GetShortRunHighGreyLevelEmphasisOutput(self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_GetShortRunHighGreyLevelEmphasisOutput(self)

    def GetLongRunLowGreyLevelEmphasis(self):
        r"""GetLongRunLowGreyLevelEmphasis(self) -> float"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_GetLongRunLowGreyLevelEmphasis(self)

    def GetLongRunLowGreyLevelEmphasisOutput(self):
        r"""GetLongRunLowGreyLevelEmphasisOutput(self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_GetLongRunLowGreyLevelEmphasisOutput(self)

    def GetLongRunHighGreyLevelEmphasis(self):
        r"""GetLongRunHighGreyLevelEmphasis(self) -> float"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_GetLongRunHighGreyLevelEmphasis(self)

    def GetLongRunHighGreyLevelEmphasisOutput(self):
        r"""GetLongRunHighGreyLevelEmphasisOutput(self) -> itkSimpleDataObjectDecoratorF"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_GetLongRunHighGreyLevelEmphasisOutput(self)

    def GetTotalNumberOfRuns(self):
        r"""GetTotalNumberOfRuns(self) -> unsigned long"""
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_GetTotalNumberOfRuns(self)

    def GetFeature(self, feature):
        r"""
        GetFeature(self, feature) -> float

        Parameters
        ----------
        feature: enum itkHistogramToRunLengthFeaturesFilterEnums::RunLengthFeature

        """
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_GetFeature(self, feature)
    __swig_destroy__ = _itkHistogramToRunLengthFeaturesFilterPython.delete_itkHistogramToRunLengthFeaturesFilterHF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkHistogramToRunLengthFeaturesFilterHF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkHistogramToRunLengthFeaturesFilterHF

        Create a new object of the class itkHistogramToRunLengthFeaturesFilterHF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToRunLengthFeaturesFilterHF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToRunLengthFeaturesFilterHF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToRunLengthFeaturesFilterHF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToRunLengthFeaturesFilterHF in _itkHistogramToRunLengthFeaturesFilterPython:
_itkHistogramToRunLengthFeaturesFilterPython.itkHistogramToRunLengthFeaturesFilterHF_swigregister(itkHistogramToRunLengthFeaturesFilterHF)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def histogram_to_run_length_features_filter(*args, **kwargs):
    """Functional interface for HistogramToRunLengthFeaturesFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.HistogramToRunLengthFeaturesFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def histogram_to_run_length_features_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKStatistics.HistogramToRunLengthFeaturesFilter
    histogram_to_run_length_features_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    histogram_to_run_length_features_filter.__doc__ = filter_object.__doc__



