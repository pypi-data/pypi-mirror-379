# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKMeshPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSphereMeshSourcePython
else:
    import _itkSphereMeshSourcePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkMeshSourcePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkPointSetPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkArrayPython
import itk.itkMeshBasePython
import itk.itkBoundingBoxPython
import itk.itkMapContainerPython

def itkSphereMeshSourceMD2_New():
    return itkSphereMeshSourceMD2.New()

class itkSphereMeshSourceMD2(itk.itkMeshSourcePython.itkMeshSourceMD2):
    r"""Proxy of C++ itkSphereMeshSourceMD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSphereMeshSourceMD2_Pointer"""
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSphereMeshSourceMD2_Pointer"""
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD2_Clone(self)

    def SetResolutionX(self, _arg):
        r"""
        SetResolutionX(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD2_SetResolutionX(self, _arg)

    def SetResolutionY(self, _arg):
        r"""
        SetResolutionY(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD2_SetResolutionY(self, _arg)

    def SetCenter(self, _arg):
        r"""
        SetCenter(self, _arg)

        Parameters
        ----------
        _arg: itkPointF2

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD2_SetCenter(self, _arg)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: itkPointF2

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD2_SetScale(self, _arg)

    def SetSquareness1(self, _arg):
        r"""
        SetSquareness1(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD2_SetSquareness1(self, _arg)

    def SetSquareness2(self, _arg):
        r"""
        SetSquareness2(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD2_SetSquareness2(self, _arg)
    __swig_destroy__ = _itkSphereMeshSourcePython.delete_itkSphereMeshSourceMD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSphereMeshSourceMD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSphereMeshSourceMD2

        Create a new object of the class itkSphereMeshSourceMD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSphereMeshSourceMD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSphereMeshSourceMD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSphereMeshSourceMD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSphereMeshSourceMD2 in _itkSphereMeshSourcePython:
_itkSphereMeshSourcePython.itkSphereMeshSourceMD2_swigregister(itkSphereMeshSourceMD2)

def itkSphereMeshSourceMD3_New():
    return itkSphereMeshSourceMD3.New()

class itkSphereMeshSourceMD3(itk.itkMeshSourcePython.itkMeshSourceMD3):
    r"""Proxy of C++ itkSphereMeshSourceMD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSphereMeshSourceMD3_Pointer"""
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSphereMeshSourceMD3_Pointer"""
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD3_Clone(self)

    def SetResolutionX(self, _arg):
        r"""
        SetResolutionX(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD3_SetResolutionX(self, _arg)

    def SetResolutionY(self, _arg):
        r"""
        SetResolutionY(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD3_SetResolutionY(self, _arg)

    def SetCenter(self, _arg):
        r"""
        SetCenter(self, _arg)

        Parameters
        ----------
        _arg: itkPointF3

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD3_SetCenter(self, _arg)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: itkPointF3

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD3_SetScale(self, _arg)

    def SetSquareness1(self, _arg):
        r"""
        SetSquareness1(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD3_SetSquareness1(self, _arg)

    def SetSquareness2(self, _arg):
        r"""
        SetSquareness2(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD3_SetSquareness2(self, _arg)
    __swig_destroy__ = _itkSphereMeshSourcePython.delete_itkSphereMeshSourceMD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSphereMeshSourceMD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSphereMeshSourceMD3

        Create a new object of the class itkSphereMeshSourceMD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSphereMeshSourceMD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSphereMeshSourceMD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSphereMeshSourceMD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSphereMeshSourceMD3 in _itkSphereMeshSourcePython:
_itkSphereMeshSourcePython.itkSphereMeshSourceMD3_swigregister(itkSphereMeshSourceMD3)

def itkSphereMeshSourceMD4_New():
    return itkSphereMeshSourceMD4.New()

class itkSphereMeshSourceMD4(itk.itkMeshSourcePython.itkMeshSourceMD4):
    r"""Proxy of C++ itkSphereMeshSourceMD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSphereMeshSourceMD4_Pointer"""
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSphereMeshSourceMD4_Pointer"""
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD4_Clone(self)

    def SetResolutionX(self, _arg):
        r"""
        SetResolutionX(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD4_SetResolutionX(self, _arg)

    def SetResolutionY(self, _arg):
        r"""
        SetResolutionY(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD4_SetResolutionY(self, _arg)

    def SetCenter(self, _arg):
        r"""
        SetCenter(self, _arg)

        Parameters
        ----------
        _arg: itkPointF4

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD4_SetCenter(self, _arg)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: itkPointF4

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD4_SetScale(self, _arg)

    def SetSquareness1(self, _arg):
        r"""
        SetSquareness1(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD4_SetSquareness1(self, _arg)

    def SetSquareness2(self, _arg):
        r"""
        SetSquareness2(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD4_SetSquareness2(self, _arg)
    __swig_destroy__ = _itkSphereMeshSourcePython.delete_itkSphereMeshSourceMD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSphereMeshSourceMD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSphereMeshSourceMD4

        Create a new object of the class itkSphereMeshSourceMD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSphereMeshSourceMD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSphereMeshSourceMD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSphereMeshSourceMD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSphereMeshSourceMD4 in _itkSphereMeshSourcePython:
_itkSphereMeshSourcePython.itkSphereMeshSourceMD4_swigregister(itkSphereMeshSourceMD4)

def itkSphereMeshSourceMF2_New():
    return itkSphereMeshSourceMF2.New()

class itkSphereMeshSourceMF2(itk.itkMeshSourcePython.itkMeshSourceMF2):
    r"""Proxy of C++ itkSphereMeshSourceMF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSphereMeshSourceMF2_Pointer"""
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSphereMeshSourceMF2_Pointer"""
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF2_Clone(self)

    def SetResolutionX(self, _arg):
        r"""
        SetResolutionX(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF2_SetResolutionX(self, _arg)

    def SetResolutionY(self, _arg):
        r"""
        SetResolutionY(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF2_SetResolutionY(self, _arg)

    def SetCenter(self, _arg):
        r"""
        SetCenter(self, _arg)

        Parameters
        ----------
        _arg: itkPointF2

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF2_SetCenter(self, _arg)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: itkPointF2

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF2_SetScale(self, _arg)

    def SetSquareness1(self, _arg):
        r"""
        SetSquareness1(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF2_SetSquareness1(self, _arg)

    def SetSquareness2(self, _arg):
        r"""
        SetSquareness2(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF2_SetSquareness2(self, _arg)
    __swig_destroy__ = _itkSphereMeshSourcePython.delete_itkSphereMeshSourceMF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSphereMeshSourceMF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSphereMeshSourceMF2

        Create a new object of the class itkSphereMeshSourceMF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSphereMeshSourceMF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSphereMeshSourceMF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSphereMeshSourceMF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSphereMeshSourceMF2 in _itkSphereMeshSourcePython:
_itkSphereMeshSourcePython.itkSphereMeshSourceMF2_swigregister(itkSphereMeshSourceMF2)

def itkSphereMeshSourceMF3_New():
    return itkSphereMeshSourceMF3.New()

class itkSphereMeshSourceMF3(itk.itkMeshSourcePython.itkMeshSourceMF3):
    r"""Proxy of C++ itkSphereMeshSourceMF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSphereMeshSourceMF3_Pointer"""
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSphereMeshSourceMF3_Pointer"""
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF3_Clone(self)

    def SetResolutionX(self, _arg):
        r"""
        SetResolutionX(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF3_SetResolutionX(self, _arg)

    def SetResolutionY(self, _arg):
        r"""
        SetResolutionY(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF3_SetResolutionY(self, _arg)

    def SetCenter(self, _arg):
        r"""
        SetCenter(self, _arg)

        Parameters
        ----------
        _arg: itkPointF3

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF3_SetCenter(self, _arg)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: itkPointF3

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF3_SetScale(self, _arg)

    def SetSquareness1(self, _arg):
        r"""
        SetSquareness1(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF3_SetSquareness1(self, _arg)

    def SetSquareness2(self, _arg):
        r"""
        SetSquareness2(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF3_SetSquareness2(self, _arg)
    __swig_destroy__ = _itkSphereMeshSourcePython.delete_itkSphereMeshSourceMF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSphereMeshSourceMF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSphereMeshSourceMF3

        Create a new object of the class itkSphereMeshSourceMF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSphereMeshSourceMF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSphereMeshSourceMF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSphereMeshSourceMF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSphereMeshSourceMF3 in _itkSphereMeshSourcePython:
_itkSphereMeshSourcePython.itkSphereMeshSourceMF3_swigregister(itkSphereMeshSourceMF3)

def itkSphereMeshSourceMF4_New():
    return itkSphereMeshSourceMF4.New()

class itkSphereMeshSourceMF4(itk.itkMeshSourcePython.itkMeshSourceMF4):
    r"""Proxy of C++ itkSphereMeshSourceMF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkSphereMeshSourceMF4_Pointer"""
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkSphereMeshSourceMF4_Pointer"""
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF4_Clone(self)

    def SetResolutionX(self, _arg):
        r"""
        SetResolutionX(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF4_SetResolutionX(self, _arg)

    def SetResolutionY(self, _arg):
        r"""
        SetResolutionY(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF4_SetResolutionY(self, _arg)

    def SetCenter(self, _arg):
        r"""
        SetCenter(self, _arg)

        Parameters
        ----------
        _arg: itkPointF4

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF4_SetCenter(self, _arg)

    def SetScale(self, _arg):
        r"""
        SetScale(self, _arg)

        Parameters
        ----------
        _arg: itkPointF4

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF4_SetScale(self, _arg)

    def SetSquareness1(self, _arg):
        r"""
        SetSquareness1(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF4_SetSquareness1(self, _arg)

    def SetSquareness2(self, _arg):
        r"""
        SetSquareness2(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF4_SetSquareness2(self, _arg)
    __swig_destroy__ = _itkSphereMeshSourcePython.delete_itkSphereMeshSourceMF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkSphereMeshSourceMF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkSphereMeshSourcePython.itkSphereMeshSourceMF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkSphereMeshSourceMF4

        Create a new object of the class itkSphereMeshSourceMF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSphereMeshSourceMF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSphereMeshSourceMF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSphereMeshSourceMF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSphereMeshSourceMF4 in _itkSphereMeshSourcePython:
_itkSphereMeshSourcePython.itkSphereMeshSourceMF4_swigregister(itkSphereMeshSourceMF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def sphere_mesh_source(*args,  resolution_x: int=..., resolution_y: int=..., center: Sequence[float]=..., scale: Sequence[float]=..., squareness1: float=..., squareness2: float=..., output: itkt.Mesh=...,**kwargs)-> itkt.MeshSourceReturn:
    """Functional interface for SphereMeshSource"""
    import itk

    kwarg_typehints = { 'resolution_x':resolution_x,'resolution_y':resolution_y,'center':center,'scale':scale,'squareness1':squareness1,'squareness2':squareness2,'output':output }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.SphereMeshSource.New(*args, **kwargs)

    return instance.__internal_call__()

def sphere_mesh_source_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKMesh.SphereMeshSource
    sphere_mesh_source.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    sphere_mesh_source.__doc__ = filter_object.__doc__



