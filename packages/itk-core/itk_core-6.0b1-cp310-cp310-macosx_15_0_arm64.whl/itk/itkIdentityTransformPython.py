# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKTransformPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkIdentityTransformPython
else:
    import _itkIdentityTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkArray2DPython
import itk.itkVariableLengthVectorPython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython

def itkIdentityTransformD2_New():
    return itkIdentityTransformD2.New()

class itkIdentityTransformD2(itk.itkTransformBasePython.itkTransformD22):
    r"""Proxy of C++ itkIdentityTransformD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIdentityTransformD2_Pointer"""
        return _itkIdentityTransformPython.itkIdentityTransformD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIdentityTransformD2_Pointer"""
        return _itkIdentityTransformPython.itkIdentityTransformD2_Clone(self)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, vector) -> itkVectorD2

        Parameters
        ----------
        vector: itkVectorD2 const &

        TransformVector(self, vector) -> vnl_vector_fixed< double,2 >

        Parameters
        ----------
        vector: vnl_vector_fixed< double,2 > const &

        """
        return _itkIdentityTransformPython.itkIdentityTransformD2_TransformVector(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkIdentityTransformPython.itkIdentityTransformD2_SetIdentity(self)

    def GetInverse(self, inverseTransform):
        r"""
        GetInverse(self, inverseTransform) -> bool

        Parameters
        ----------
        inverseTransform: itkIdentityTransformD2 *

        """
        return _itkIdentityTransformPython.itkIdentityTransformD2_GetInverse(self, inverseTransform)
    __swig_destroy__ = _itkIdentityTransformPython.delete_itkIdentityTransformD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIdentityTransformD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIdentityTransformPython.itkIdentityTransformD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIdentityTransformD2

        Create a new object of the class itkIdentityTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIdentityTransformD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIdentityTransformD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIdentityTransformD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIdentityTransformD2 in _itkIdentityTransformPython:
_itkIdentityTransformPython.itkIdentityTransformD2_swigregister(itkIdentityTransformD2)

def itkIdentityTransformD3_New():
    return itkIdentityTransformD3.New()

class itkIdentityTransformD3(itk.itkTransformBasePython.itkTransformD33):
    r"""Proxy of C++ itkIdentityTransformD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIdentityTransformD3_Pointer"""
        return _itkIdentityTransformPython.itkIdentityTransformD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIdentityTransformD3_Pointer"""
        return _itkIdentityTransformPython.itkIdentityTransformD3_Clone(self)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, vector) -> itkVectorD3

        Parameters
        ----------
        vector: itkVectorD3 const &

        TransformVector(self, vector) -> vnl_vector_fixed< double,3 >

        Parameters
        ----------
        vector: vnl_vector_fixed< double,3 > const &

        """
        return _itkIdentityTransformPython.itkIdentityTransformD3_TransformVector(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkIdentityTransformPython.itkIdentityTransformD3_SetIdentity(self)

    def GetInverse(self, inverseTransform):
        r"""
        GetInverse(self, inverseTransform) -> bool

        Parameters
        ----------
        inverseTransform: itkIdentityTransformD3 *

        """
        return _itkIdentityTransformPython.itkIdentityTransformD3_GetInverse(self, inverseTransform)
    __swig_destroy__ = _itkIdentityTransformPython.delete_itkIdentityTransformD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIdentityTransformD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIdentityTransformPython.itkIdentityTransformD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIdentityTransformD3

        Create a new object of the class itkIdentityTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIdentityTransformD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIdentityTransformD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIdentityTransformD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIdentityTransformD3 in _itkIdentityTransformPython:
_itkIdentityTransformPython.itkIdentityTransformD3_swigregister(itkIdentityTransformD3)

def itkIdentityTransformD4_New():
    return itkIdentityTransformD4.New()

class itkIdentityTransformD4(itk.itkTransformBasePython.itkTransformD44):
    r"""Proxy of C++ itkIdentityTransformD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIdentityTransformD4_Pointer"""
        return _itkIdentityTransformPython.itkIdentityTransformD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIdentityTransformD4_Pointer"""
        return _itkIdentityTransformPython.itkIdentityTransformD4_Clone(self)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, vector) -> itkVectorD4

        Parameters
        ----------
        vector: itkVectorD4 const &

        TransformVector(self, vector) -> vnl_vector_fixed< double,4 >

        Parameters
        ----------
        vector: vnl_vector_fixed< double,4 > const &

        """
        return _itkIdentityTransformPython.itkIdentityTransformD4_TransformVector(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkIdentityTransformPython.itkIdentityTransformD4_SetIdentity(self)

    def GetInverse(self, inverseTransform):
        r"""
        GetInverse(self, inverseTransform) -> bool

        Parameters
        ----------
        inverseTransform: itkIdentityTransformD4 *

        """
        return _itkIdentityTransformPython.itkIdentityTransformD4_GetInverse(self, inverseTransform)
    __swig_destroy__ = _itkIdentityTransformPython.delete_itkIdentityTransformD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIdentityTransformD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIdentityTransformPython.itkIdentityTransformD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIdentityTransformD4

        Create a new object of the class itkIdentityTransformD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIdentityTransformD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIdentityTransformD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIdentityTransformD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIdentityTransformD4 in _itkIdentityTransformPython:
_itkIdentityTransformPython.itkIdentityTransformD4_swigregister(itkIdentityTransformD4)

def itkIdentityTransformF2_New():
    return itkIdentityTransformF2.New()

class itkIdentityTransformF2(itk.itkTransformBasePython.itkTransformF22):
    r"""Proxy of C++ itkIdentityTransformF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIdentityTransformF2_Pointer"""
        return _itkIdentityTransformPython.itkIdentityTransformF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIdentityTransformF2_Pointer"""
        return _itkIdentityTransformPython.itkIdentityTransformF2_Clone(self)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, vector) -> itkVectorF2

        Parameters
        ----------
        vector: itkVectorF2 const &

        TransformVector(self, vector) -> vnl_vector_fixed< float,2 >

        Parameters
        ----------
        vector: vnl_vector_fixed< float,2 > const &

        """
        return _itkIdentityTransformPython.itkIdentityTransformF2_TransformVector(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkIdentityTransformPython.itkIdentityTransformF2_SetIdentity(self)

    def GetInverse(self, inverseTransform):
        r"""
        GetInverse(self, inverseTransform) -> bool

        Parameters
        ----------
        inverseTransform: itkIdentityTransformF2 *

        """
        return _itkIdentityTransformPython.itkIdentityTransformF2_GetInverse(self, inverseTransform)
    __swig_destroy__ = _itkIdentityTransformPython.delete_itkIdentityTransformF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIdentityTransformF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIdentityTransformPython.itkIdentityTransformF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIdentityTransformF2

        Create a new object of the class itkIdentityTransformF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIdentityTransformF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIdentityTransformF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIdentityTransformF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIdentityTransformF2 in _itkIdentityTransformPython:
_itkIdentityTransformPython.itkIdentityTransformF2_swigregister(itkIdentityTransformF2)

def itkIdentityTransformF3_New():
    return itkIdentityTransformF3.New()

class itkIdentityTransformF3(itk.itkTransformBasePython.itkTransformF33):
    r"""Proxy of C++ itkIdentityTransformF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIdentityTransformF3_Pointer"""
        return _itkIdentityTransformPython.itkIdentityTransformF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIdentityTransformF3_Pointer"""
        return _itkIdentityTransformPython.itkIdentityTransformF3_Clone(self)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, vector) -> itkVectorF3

        Parameters
        ----------
        vector: itkVectorF3 const &

        TransformVector(self, vector) -> vnl_vector_fixed< float,3 >

        Parameters
        ----------
        vector: vnl_vector_fixed< float,3 > const &

        """
        return _itkIdentityTransformPython.itkIdentityTransformF3_TransformVector(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkIdentityTransformPython.itkIdentityTransformF3_SetIdentity(self)

    def GetInverse(self, inverseTransform):
        r"""
        GetInverse(self, inverseTransform) -> bool

        Parameters
        ----------
        inverseTransform: itkIdentityTransformF3 *

        """
        return _itkIdentityTransformPython.itkIdentityTransformF3_GetInverse(self, inverseTransform)
    __swig_destroy__ = _itkIdentityTransformPython.delete_itkIdentityTransformF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIdentityTransformF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIdentityTransformPython.itkIdentityTransformF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIdentityTransformF3

        Create a new object of the class itkIdentityTransformF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIdentityTransformF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIdentityTransformF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIdentityTransformF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIdentityTransformF3 in _itkIdentityTransformPython:
_itkIdentityTransformPython.itkIdentityTransformF3_swigregister(itkIdentityTransformF3)

def itkIdentityTransformF4_New():
    return itkIdentityTransformF4.New()

class itkIdentityTransformF4(itk.itkTransformBasePython.itkTransformF44):
    r"""Proxy of C++ itkIdentityTransformF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkIdentityTransformF4_Pointer"""
        return _itkIdentityTransformPython.itkIdentityTransformF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkIdentityTransformF4_Pointer"""
        return _itkIdentityTransformPython.itkIdentityTransformF4_Clone(self)

    def TransformVector(self, *args):
        r"""
        TransformVector(self, vector) -> itkVectorF4

        Parameters
        ----------
        vector: itkVectorF4 const &

        TransformVector(self, vector) -> vnl_vector_fixed< float,4 >

        Parameters
        ----------
        vector: vnl_vector_fixed< float,4 > const &

        """
        return _itkIdentityTransformPython.itkIdentityTransformF4_TransformVector(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkIdentityTransformPython.itkIdentityTransformF4_SetIdentity(self)

    def GetInverse(self, inverseTransform):
        r"""
        GetInverse(self, inverseTransform) -> bool

        Parameters
        ----------
        inverseTransform: itkIdentityTransformF4 *

        """
        return _itkIdentityTransformPython.itkIdentityTransformF4_GetInverse(self, inverseTransform)
    __swig_destroy__ = _itkIdentityTransformPython.delete_itkIdentityTransformF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkIdentityTransformF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkIdentityTransformPython.itkIdentityTransformF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkIdentityTransformF4

        Create a new object of the class itkIdentityTransformF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIdentityTransformF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIdentityTransformF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIdentityTransformF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIdentityTransformF4 in _itkIdentityTransformPython:
_itkIdentityTransformPython.itkIdentityTransformF4_swigregister(itkIdentityTransformF4)

