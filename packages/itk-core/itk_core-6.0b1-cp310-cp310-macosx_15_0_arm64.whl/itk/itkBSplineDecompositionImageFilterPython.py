# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageFunctionPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBSplineDecompositionImageFilterPython
else:
    import _itkBSplineDecompositionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageToImageFilterAPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython

def itkBSplineDecompositionImageFilterID2ID2_New():
    return itkBSplineDecompositionImageFilterID2ID2.New()

class itkBSplineDecompositionImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkBSplineDecompositionImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineDecompositionImageFilterID2ID2_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineDecompositionImageFilterID2ID2_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_Clone(self)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_GetSplineOrder(self)

    def GetSplinePoles(self):
        r"""GetSplinePoles(self) -> vectorD"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_GetSplinePoles(self)

    def GetNumberOfPoles(self):
        r"""GetNumberOfPoles(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_GetNumberOfPoles(self)
    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_DimensionCheck
    
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_InputConvertibleToOutputCheck
    
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineDecompositionImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterID2ID2

        Create a new object of the class itkBSplineDecompositionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDecompositionImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDecompositionImageFilterID2ID2 in _itkBSplineDecompositionImageFilterPython:
_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID2ID2_swigregister(itkBSplineDecompositionImageFilterID2ID2)

def itkBSplineDecompositionImageFilterID3ID3_New():
    return itkBSplineDecompositionImageFilterID3ID3.New()

class itkBSplineDecompositionImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkBSplineDecompositionImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineDecompositionImageFilterID3ID3_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineDecompositionImageFilterID3ID3_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_Clone(self)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_GetSplineOrder(self)

    def GetSplinePoles(self):
        r"""GetSplinePoles(self) -> vectorD"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_GetSplinePoles(self)

    def GetNumberOfPoles(self):
        r"""GetNumberOfPoles(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_GetNumberOfPoles(self)
    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_DimensionCheck
    
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_InputConvertibleToOutputCheck
    
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineDecompositionImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterID3ID3

        Create a new object of the class itkBSplineDecompositionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDecompositionImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDecompositionImageFilterID3ID3 in _itkBSplineDecompositionImageFilterPython:
_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID3ID3_swigregister(itkBSplineDecompositionImageFilterID3ID3)

def itkBSplineDecompositionImageFilterID4ID4_New():
    return itkBSplineDecompositionImageFilterID4ID4.New()

class itkBSplineDecompositionImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkBSplineDecompositionImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineDecompositionImageFilterID4ID4_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineDecompositionImageFilterID4ID4_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID4ID4_Clone(self)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID4ID4_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID4ID4_GetSplineOrder(self)

    def GetSplinePoles(self):
        r"""GetSplinePoles(self) -> vectorD"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID4ID4_GetSplinePoles(self)

    def GetNumberOfPoles(self):
        r"""GetNumberOfPoles(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID4ID4_GetNumberOfPoles(self)
    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID4ID4_DimensionCheck
    
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID4ID4_InputConvertibleToOutputCheck
    
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID4ID4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineDecompositionImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterID4ID4

        Create a new object of the class itkBSplineDecompositionImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDecompositionImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDecompositionImageFilterID4ID4 in _itkBSplineDecompositionImageFilterPython:
_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterID4ID4_swigregister(itkBSplineDecompositionImageFilterID4ID4)

def itkBSplineDecompositionImageFilterIF2IF2_New():
    return itkBSplineDecompositionImageFilterIF2IF2.New()

class itkBSplineDecompositionImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkBSplineDecompositionImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineDecompositionImageFilterIF2IF2_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineDecompositionImageFilterIF2IF2_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_Clone(self)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_GetSplineOrder(self)

    def GetSplinePoles(self):
        r"""GetSplinePoles(self) -> vectorD"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_GetSplinePoles(self)

    def GetNumberOfPoles(self):
        r"""GetNumberOfPoles(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_GetNumberOfPoles(self)
    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_DimensionCheck
    
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_InputConvertibleToOutputCheck
    
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineDecompositionImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterIF2IF2

        Create a new object of the class itkBSplineDecompositionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDecompositionImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDecompositionImageFilterIF2IF2 in _itkBSplineDecompositionImageFilterPython:
_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF2IF2_swigregister(itkBSplineDecompositionImageFilterIF2IF2)

def itkBSplineDecompositionImageFilterIF3IF3_New():
    return itkBSplineDecompositionImageFilterIF3IF3.New()

class itkBSplineDecompositionImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkBSplineDecompositionImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineDecompositionImageFilterIF3IF3_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineDecompositionImageFilterIF3IF3_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_Clone(self)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_GetSplineOrder(self)

    def GetSplinePoles(self):
        r"""GetSplinePoles(self) -> vectorD"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_GetSplinePoles(self)

    def GetNumberOfPoles(self):
        r"""GetNumberOfPoles(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_GetNumberOfPoles(self)
    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_DimensionCheck
    
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_InputConvertibleToOutputCheck
    
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineDecompositionImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterIF3IF3

        Create a new object of the class itkBSplineDecompositionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDecompositionImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDecompositionImageFilterIF3IF3 in _itkBSplineDecompositionImageFilterPython:
_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF3IF3_swigregister(itkBSplineDecompositionImageFilterIF3IF3)

def itkBSplineDecompositionImageFilterIF4IF4_New():
    return itkBSplineDecompositionImageFilterIF4IF4.New()

class itkBSplineDecompositionImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkBSplineDecompositionImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineDecompositionImageFilterIF4IF4_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineDecompositionImageFilterIF4IF4_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF4IF4_Clone(self)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF4IF4_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF4IF4_GetSplineOrder(self)

    def GetSplinePoles(self):
        r"""GetSplinePoles(self) -> vectorD"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF4IF4_GetSplinePoles(self)

    def GetNumberOfPoles(self):
        r"""GetNumberOfPoles(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF4IF4_GetNumberOfPoles(self)
    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF4IF4_DimensionCheck
    
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF4IF4_InputConvertibleToOutputCheck
    
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF4IF4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineDecompositionImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterIF4IF4

        Create a new object of the class itkBSplineDecompositionImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDecompositionImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDecompositionImageFilterIF4IF4 in _itkBSplineDecompositionImageFilterPython:
_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIF4IF4_swigregister(itkBSplineDecompositionImageFilterIF4IF4)

def itkBSplineDecompositionImageFilterISS2ISS2_New():
    return itkBSplineDecompositionImageFilterISS2ISS2.New()

class itkBSplineDecompositionImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkBSplineDecompositionImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineDecompositionImageFilterISS2ISS2_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineDecompositionImageFilterISS2ISS2_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_Clone(self)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_GetSplineOrder(self)

    def GetSplinePoles(self):
        r"""GetSplinePoles(self) -> vectorD"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_GetSplinePoles(self)

    def GetNumberOfPoles(self):
        r"""GetNumberOfPoles(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_GetNumberOfPoles(self)
    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_DimensionCheck
    
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_InputConvertibleToOutputCheck
    
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineDecompositionImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterISS2ISS2

        Create a new object of the class itkBSplineDecompositionImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDecompositionImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDecompositionImageFilterISS2ISS2 in _itkBSplineDecompositionImageFilterPython:
_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS2ISS2_swigregister(itkBSplineDecompositionImageFilterISS2ISS2)

def itkBSplineDecompositionImageFilterISS3ISS3_New():
    return itkBSplineDecompositionImageFilterISS3ISS3.New()

class itkBSplineDecompositionImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkBSplineDecompositionImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineDecompositionImageFilterISS3ISS3_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineDecompositionImageFilterISS3ISS3_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_Clone(self)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_GetSplineOrder(self)

    def GetSplinePoles(self):
        r"""GetSplinePoles(self) -> vectorD"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_GetSplinePoles(self)

    def GetNumberOfPoles(self):
        r"""GetNumberOfPoles(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_GetNumberOfPoles(self)
    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_DimensionCheck
    
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_InputConvertibleToOutputCheck
    
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineDecompositionImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterISS3ISS3

        Create a new object of the class itkBSplineDecompositionImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDecompositionImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDecompositionImageFilterISS3ISS3 in _itkBSplineDecompositionImageFilterPython:
_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS3ISS3_swigregister(itkBSplineDecompositionImageFilterISS3ISS3)

def itkBSplineDecompositionImageFilterISS4ISS4_New():
    return itkBSplineDecompositionImageFilterISS4ISS4.New()

class itkBSplineDecompositionImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkBSplineDecompositionImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineDecompositionImageFilterISS4ISS4_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineDecompositionImageFilterISS4ISS4_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS4ISS4_Clone(self)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS4ISS4_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS4ISS4_GetSplineOrder(self)

    def GetSplinePoles(self):
        r"""GetSplinePoles(self) -> vectorD"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS4ISS4_GetSplinePoles(self)

    def GetNumberOfPoles(self):
        r"""GetNumberOfPoles(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS4ISS4_GetNumberOfPoles(self)
    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS4ISS4_DimensionCheck
    
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS4ISS4_InputConvertibleToOutputCheck
    
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS4ISS4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineDecompositionImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterISS4ISS4

        Create a new object of the class itkBSplineDecompositionImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDecompositionImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDecompositionImageFilterISS4ISS4 in _itkBSplineDecompositionImageFilterPython:
_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterISS4ISS4_swigregister(itkBSplineDecompositionImageFilterISS4ISS4)

def itkBSplineDecompositionImageFilterIUC2IUC2_New():
    return itkBSplineDecompositionImageFilterIUC2IUC2.New()

class itkBSplineDecompositionImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkBSplineDecompositionImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineDecompositionImageFilterIUC2IUC2_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineDecompositionImageFilterIUC2IUC2_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_Clone(self)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_GetSplineOrder(self)

    def GetSplinePoles(self):
        r"""GetSplinePoles(self) -> vectorD"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_GetSplinePoles(self)

    def GetNumberOfPoles(self):
        r"""GetNumberOfPoles(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_GetNumberOfPoles(self)
    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_DimensionCheck
    
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineDecompositionImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterIUC2IUC2

        Create a new object of the class itkBSplineDecompositionImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDecompositionImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDecompositionImageFilterIUC2IUC2 in _itkBSplineDecompositionImageFilterPython:
_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC2IUC2_swigregister(itkBSplineDecompositionImageFilterIUC2IUC2)

def itkBSplineDecompositionImageFilterIUC3IUC3_New():
    return itkBSplineDecompositionImageFilterIUC3IUC3.New()

class itkBSplineDecompositionImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkBSplineDecompositionImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineDecompositionImageFilterIUC3IUC3_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineDecompositionImageFilterIUC3IUC3_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_Clone(self)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_GetSplineOrder(self)

    def GetSplinePoles(self):
        r"""GetSplinePoles(self) -> vectorD"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_GetSplinePoles(self)

    def GetNumberOfPoles(self):
        r"""GetNumberOfPoles(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_GetNumberOfPoles(self)
    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_DimensionCheck
    
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineDecompositionImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterIUC3IUC3

        Create a new object of the class itkBSplineDecompositionImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDecompositionImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDecompositionImageFilterIUC3IUC3 in _itkBSplineDecompositionImageFilterPython:
_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC3IUC3_swigregister(itkBSplineDecompositionImageFilterIUC3IUC3)

def itkBSplineDecompositionImageFilterIUC4IUC4_New():
    return itkBSplineDecompositionImageFilterIUC4IUC4.New()

class itkBSplineDecompositionImageFilterIUC4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkBSplineDecompositionImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineDecompositionImageFilterIUC4IUC4_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineDecompositionImageFilterIUC4IUC4_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC4IUC4_Clone(self)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC4IUC4_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC4IUC4_GetSplineOrder(self)

    def GetSplinePoles(self):
        r"""GetSplinePoles(self) -> vectorD"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC4IUC4_GetSplinePoles(self)

    def GetNumberOfPoles(self):
        r"""GetNumberOfPoles(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC4IUC4_GetNumberOfPoles(self)
    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC4IUC4_DimensionCheck
    
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC4IUC4_InputConvertibleToOutputCheck
    
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC4IUC4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineDecompositionImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterIUC4IUC4

        Create a new object of the class itkBSplineDecompositionImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDecompositionImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDecompositionImageFilterIUC4IUC4 in _itkBSplineDecompositionImageFilterPython:
_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUC4IUC4_swigregister(itkBSplineDecompositionImageFilterIUC4IUC4)

def itkBSplineDecompositionImageFilterIUS2IUS2_New():
    return itkBSplineDecompositionImageFilterIUS2IUS2.New()

class itkBSplineDecompositionImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkBSplineDecompositionImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineDecompositionImageFilterIUS2IUS2_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineDecompositionImageFilterIUS2IUS2_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_Clone(self)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_GetSplineOrder(self)

    def GetSplinePoles(self):
        r"""GetSplinePoles(self) -> vectorD"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_GetSplinePoles(self)

    def GetNumberOfPoles(self):
        r"""GetNumberOfPoles(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_GetNumberOfPoles(self)
    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_DimensionCheck
    
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineDecompositionImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterIUS2IUS2

        Create a new object of the class itkBSplineDecompositionImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDecompositionImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDecompositionImageFilterIUS2IUS2 in _itkBSplineDecompositionImageFilterPython:
_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS2IUS2_swigregister(itkBSplineDecompositionImageFilterIUS2IUS2)

def itkBSplineDecompositionImageFilterIUS3IUS3_New():
    return itkBSplineDecompositionImageFilterIUS3IUS3.New()

class itkBSplineDecompositionImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkBSplineDecompositionImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineDecompositionImageFilterIUS3IUS3_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineDecompositionImageFilterIUS3IUS3_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_Clone(self)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_GetSplineOrder(self)

    def GetSplinePoles(self):
        r"""GetSplinePoles(self) -> vectorD"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_GetSplinePoles(self)

    def GetNumberOfPoles(self):
        r"""GetNumberOfPoles(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_GetNumberOfPoles(self)
    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_DimensionCheck
    
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineDecompositionImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterIUS3IUS3

        Create a new object of the class itkBSplineDecompositionImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDecompositionImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDecompositionImageFilterIUS3IUS3 in _itkBSplineDecompositionImageFilterPython:
_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS3IUS3_swigregister(itkBSplineDecompositionImageFilterIUS3IUS3)

def itkBSplineDecompositionImageFilterIUS4IUS4_New():
    return itkBSplineDecompositionImageFilterIUS4IUS4.New()

class itkBSplineDecompositionImageFilterIUS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkBSplineDecompositionImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkBSplineDecompositionImageFilterIUS4IUS4_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkBSplineDecompositionImageFilterIUS4IUS4_Pointer"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS4IUS4_Clone(self)

    def SetSplineOrder(self, SplineOrder):
        r"""
        SetSplineOrder(self, SplineOrder)

        Parameters
        ----------
        SplineOrder: unsigned int

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS4IUS4_SetSplineOrder(self, SplineOrder)

    def GetSplineOrder(self):
        r"""GetSplineOrder(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS4IUS4_GetSplineOrder(self)

    def GetSplinePoles(self):
        r"""GetSplinePoles(self) -> vectorD"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS4IUS4_GetSplinePoles(self)

    def GetNumberOfPoles(self):
        r"""GetNumberOfPoles(self) -> unsigned int"""
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS4IUS4_GetNumberOfPoles(self)
    DimensionCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS4IUS4_DimensionCheck
    
    InputConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS4IUS4_InputConvertibleToOutputCheck
    
    DoubleConvertibleToOutputCheck = _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS4IUS4_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDecompositionImageFilterPython.delete_itkBSplineDecompositionImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkBSplineDecompositionImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkBSplineDecompositionImageFilterIUS4IUS4

        Create a new object of the class itkBSplineDecompositionImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDecompositionImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDecompositionImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDecompositionImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDecompositionImageFilterIUS4IUS4 in _itkBSplineDecompositionImageFilterPython:
_itkBSplineDecompositionImageFilterPython.itkBSplineDecompositionImageFilterIUS4IUS4_swigregister(itkBSplineDecompositionImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def b_spline_decomposition_image_filter(*args: itkt.ImageLike,  spline_order: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for BSplineDecompositionImageFilter"""
    import itk

    kwarg_typehints = { 'spline_order':spline_order }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.BSplineDecompositionImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def b_spline_decomposition_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageFunction.BSplineDecompositionImageFilter
    b_spline_decomposition_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    b_spline_decomposition_image_filter.__doc__ = filter_object.__doc__



