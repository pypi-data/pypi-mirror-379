# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKTransformPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkAzimuthElevationToCartesianTransformPython
else:
    import _itkAzimuthElevationToCartesianTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkArray2DPython
import itk.itkVariableLengthVectorPython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython

def itkAzimuthElevationToCartesianTransformD2_New():
    return itkAzimuthElevationToCartesianTransformD2.New()

class itkAzimuthElevationToCartesianTransformD2(itk.itkAffineTransformPython.itkAffineTransformD2):
    r"""Proxy of C++ itkAzimuthElevationToCartesianTransformD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAzimuthElevationToCartesianTransformD2_Pointer"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAzimuthElevationToCartesianTransformD2_Pointer"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD2_Clone(self)

    def SetAzimuthElevationToCartesianParameters(self, *args):
        r"""
        SetAzimuthElevationToCartesianParameters(self, sampleSize, firstSampleDistance, maxAzimuth, maxElevation, azimuthAngleSeparation, elevationAngleSeparation)

        Parameters
        ----------
        sampleSize: double const
        firstSampleDistance: double const
        maxAzimuth: long const
        maxElevation: long const
        azimuthAngleSeparation: double const
        elevationAngleSeparation: double const

        SetAzimuthElevationToCartesianParameters(self, sampleSize, firstSampleDistance, maxAzimuth, maxElevation)

        Parameters
        ----------
        sampleSize: double const
        firstSampleDistance: double const
        maxAzimuth: long const
        maxElevation: long const

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD2_SetAzimuthElevationToCartesianParameters(self, *args)

    def BackTransform(self, point):
        r"""
        BackTransform(self, point) -> itkPointD2

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD2_BackTransform(self, point)

    def BackTransformPoint(self, point):
        r"""
        BackTransformPoint(self, point) -> itkPointD2

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD2_BackTransformPoint(self, point)

    def SetForwardAzimuthElevationToCartesian(self):
        r"""SetForwardAzimuthElevationToCartesian(self)"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD2_SetForwardAzimuthElevationToCartesian(self)

    def SetForwardCartesianToAzimuthElevation(self):
        r"""SetForwardCartesianToAzimuthElevation(self)"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD2_SetForwardCartesianToAzimuthElevation(self)

    def TransformAzElToCartesian(self, point):
        r"""
        TransformAzElToCartesian(self, point) -> itkPointD2

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD2_TransformAzElToCartesian(self, point)

    def TransformCartesianToAzEl(self, point):
        r"""
        TransformCartesianToAzEl(self, point) -> itkPointD2

        Parameters
        ----------
        point: itkPointD2 const &

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD2_TransformCartesianToAzEl(self, point)

    def SetMaxAzimuth(self, _arg):
        r"""
        SetMaxAzimuth(self, _arg)

        Parameters
        ----------
        _arg: long

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD2_SetMaxAzimuth(self, _arg)

    def GetMaxAzimuth(self):
        r"""GetMaxAzimuth(self) -> long"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD2_GetMaxAzimuth(self)

    def SetMaxElevation(self, _arg):
        r"""
        SetMaxElevation(self, _arg)

        Parameters
        ----------
        _arg: long

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD2_SetMaxElevation(self, _arg)

    def GetMaxElevation(self):
        r"""GetMaxElevation(self) -> long"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD2_GetMaxElevation(self)

    def SetRadiusSampleSize(self, _arg):
        r"""
        SetRadiusSampleSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD2_SetRadiusSampleSize(self, _arg)

    def GetRadiusSampleSize(self):
        r"""GetRadiusSampleSize(self) -> double"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD2_GetRadiusSampleSize(self)

    def SetAzimuthAngularSeparation(self, _arg):
        r"""
        SetAzimuthAngularSeparation(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD2_SetAzimuthAngularSeparation(self, _arg)

    def GetAzimuthAngularSeparation(self):
        r"""GetAzimuthAngularSeparation(self) -> double"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD2_GetAzimuthAngularSeparation(self)

    def SetElevationAngularSeparation(self, _arg):
        r"""
        SetElevationAngularSeparation(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD2_SetElevationAngularSeparation(self, _arg)

    def GetElevationAngularSeparation(self):
        r"""GetElevationAngularSeparation(self) -> double"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD2_GetElevationAngularSeparation(self)

    def SetFirstSampleDistance(self, _arg):
        r"""
        SetFirstSampleDistance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD2_SetFirstSampleDistance(self, _arg)

    def GetFirstSampleDistance(self):
        r"""GetFirstSampleDistance(self) -> double"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD2_GetFirstSampleDistance(self)
    __swig_destroy__ = _itkAzimuthElevationToCartesianTransformPython.delete_itkAzimuthElevationToCartesianTransformD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAzimuthElevationToCartesianTransformD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAzimuthElevationToCartesianTransformD2

        Create a new object of the class itkAzimuthElevationToCartesianTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAzimuthElevationToCartesianTransformD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAzimuthElevationToCartesianTransformD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAzimuthElevationToCartesianTransformD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAzimuthElevationToCartesianTransformD2 in _itkAzimuthElevationToCartesianTransformPython:
_itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD2_swigregister(itkAzimuthElevationToCartesianTransformD2)

def itkAzimuthElevationToCartesianTransformD3_New():
    return itkAzimuthElevationToCartesianTransformD3.New()

class itkAzimuthElevationToCartesianTransformD3(itk.itkAffineTransformPython.itkAffineTransformD3):
    r"""Proxy of C++ itkAzimuthElevationToCartesianTransformD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAzimuthElevationToCartesianTransformD3_Pointer"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAzimuthElevationToCartesianTransformD3_Pointer"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD3_Clone(self)

    def SetAzimuthElevationToCartesianParameters(self, *args):
        r"""
        SetAzimuthElevationToCartesianParameters(self, sampleSize, firstSampleDistance, maxAzimuth, maxElevation, azimuthAngleSeparation, elevationAngleSeparation)

        Parameters
        ----------
        sampleSize: double const
        firstSampleDistance: double const
        maxAzimuth: long const
        maxElevation: long const
        azimuthAngleSeparation: double const
        elevationAngleSeparation: double const

        SetAzimuthElevationToCartesianParameters(self, sampleSize, firstSampleDistance, maxAzimuth, maxElevation)

        Parameters
        ----------
        sampleSize: double const
        firstSampleDistance: double const
        maxAzimuth: long const
        maxElevation: long const

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD3_SetAzimuthElevationToCartesianParameters(self, *args)

    def BackTransform(self, point):
        r"""
        BackTransform(self, point) -> itkPointD3

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD3_BackTransform(self, point)

    def BackTransformPoint(self, point):
        r"""
        BackTransformPoint(self, point) -> itkPointD3

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD3_BackTransformPoint(self, point)

    def SetForwardAzimuthElevationToCartesian(self):
        r"""SetForwardAzimuthElevationToCartesian(self)"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD3_SetForwardAzimuthElevationToCartesian(self)

    def SetForwardCartesianToAzimuthElevation(self):
        r"""SetForwardCartesianToAzimuthElevation(self)"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD3_SetForwardCartesianToAzimuthElevation(self)

    def TransformAzElToCartesian(self, point):
        r"""
        TransformAzElToCartesian(self, point) -> itkPointD3

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD3_TransformAzElToCartesian(self, point)

    def TransformCartesianToAzEl(self, point):
        r"""
        TransformCartesianToAzEl(self, point) -> itkPointD3

        Parameters
        ----------
        point: itkPointD3 const &

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD3_TransformCartesianToAzEl(self, point)

    def SetMaxAzimuth(self, _arg):
        r"""
        SetMaxAzimuth(self, _arg)

        Parameters
        ----------
        _arg: long

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD3_SetMaxAzimuth(self, _arg)

    def GetMaxAzimuth(self):
        r"""GetMaxAzimuth(self) -> long"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD3_GetMaxAzimuth(self)

    def SetMaxElevation(self, _arg):
        r"""
        SetMaxElevation(self, _arg)

        Parameters
        ----------
        _arg: long

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD3_SetMaxElevation(self, _arg)

    def GetMaxElevation(self):
        r"""GetMaxElevation(self) -> long"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD3_GetMaxElevation(self)

    def SetRadiusSampleSize(self, _arg):
        r"""
        SetRadiusSampleSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD3_SetRadiusSampleSize(self, _arg)

    def GetRadiusSampleSize(self):
        r"""GetRadiusSampleSize(self) -> double"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD3_GetRadiusSampleSize(self)

    def SetAzimuthAngularSeparation(self, _arg):
        r"""
        SetAzimuthAngularSeparation(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD3_SetAzimuthAngularSeparation(self, _arg)

    def GetAzimuthAngularSeparation(self):
        r"""GetAzimuthAngularSeparation(self) -> double"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD3_GetAzimuthAngularSeparation(self)

    def SetElevationAngularSeparation(self, _arg):
        r"""
        SetElevationAngularSeparation(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD3_SetElevationAngularSeparation(self, _arg)

    def GetElevationAngularSeparation(self):
        r"""GetElevationAngularSeparation(self) -> double"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD3_GetElevationAngularSeparation(self)

    def SetFirstSampleDistance(self, _arg):
        r"""
        SetFirstSampleDistance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD3_SetFirstSampleDistance(self, _arg)

    def GetFirstSampleDistance(self):
        r"""GetFirstSampleDistance(self) -> double"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD3_GetFirstSampleDistance(self)
    __swig_destroy__ = _itkAzimuthElevationToCartesianTransformPython.delete_itkAzimuthElevationToCartesianTransformD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAzimuthElevationToCartesianTransformD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAzimuthElevationToCartesianTransformD3

        Create a new object of the class itkAzimuthElevationToCartesianTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAzimuthElevationToCartesianTransformD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAzimuthElevationToCartesianTransformD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAzimuthElevationToCartesianTransformD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAzimuthElevationToCartesianTransformD3 in _itkAzimuthElevationToCartesianTransformPython:
_itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD3_swigregister(itkAzimuthElevationToCartesianTransformD3)

def itkAzimuthElevationToCartesianTransformD4_New():
    return itkAzimuthElevationToCartesianTransformD4.New()

class itkAzimuthElevationToCartesianTransformD4(itk.itkAffineTransformPython.itkAffineTransformD4):
    r"""Proxy of C++ itkAzimuthElevationToCartesianTransformD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkAzimuthElevationToCartesianTransformD4_Pointer"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkAzimuthElevationToCartesianTransformD4_Pointer"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD4_Clone(self)

    def SetAzimuthElevationToCartesianParameters(self, *args):
        r"""
        SetAzimuthElevationToCartesianParameters(self, sampleSize, firstSampleDistance, maxAzimuth, maxElevation, azimuthAngleSeparation, elevationAngleSeparation)

        Parameters
        ----------
        sampleSize: double const
        firstSampleDistance: double const
        maxAzimuth: long const
        maxElevation: long const
        azimuthAngleSeparation: double const
        elevationAngleSeparation: double const

        SetAzimuthElevationToCartesianParameters(self, sampleSize, firstSampleDistance, maxAzimuth, maxElevation)

        Parameters
        ----------
        sampleSize: double const
        firstSampleDistance: double const
        maxAzimuth: long const
        maxElevation: long const

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD4_SetAzimuthElevationToCartesianParameters(self, *args)

    def BackTransform(self, point):
        r"""
        BackTransform(self, point) -> itkPointD4

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD4_BackTransform(self, point)

    def BackTransformPoint(self, point):
        r"""
        BackTransformPoint(self, point) -> itkPointD4

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD4_BackTransformPoint(self, point)

    def SetForwardAzimuthElevationToCartesian(self):
        r"""SetForwardAzimuthElevationToCartesian(self)"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD4_SetForwardAzimuthElevationToCartesian(self)

    def SetForwardCartesianToAzimuthElevation(self):
        r"""SetForwardCartesianToAzimuthElevation(self)"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD4_SetForwardCartesianToAzimuthElevation(self)

    def TransformAzElToCartesian(self, point):
        r"""
        TransformAzElToCartesian(self, point) -> itkPointD4

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD4_TransformAzElToCartesian(self, point)

    def TransformCartesianToAzEl(self, point):
        r"""
        TransformCartesianToAzEl(self, point) -> itkPointD4

        Parameters
        ----------
        point: itkPointD4 const &

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD4_TransformCartesianToAzEl(self, point)

    def SetMaxAzimuth(self, _arg):
        r"""
        SetMaxAzimuth(self, _arg)

        Parameters
        ----------
        _arg: long

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD4_SetMaxAzimuth(self, _arg)

    def GetMaxAzimuth(self):
        r"""GetMaxAzimuth(self) -> long"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD4_GetMaxAzimuth(self)

    def SetMaxElevation(self, _arg):
        r"""
        SetMaxElevation(self, _arg)

        Parameters
        ----------
        _arg: long

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD4_SetMaxElevation(self, _arg)

    def GetMaxElevation(self):
        r"""GetMaxElevation(self) -> long"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD4_GetMaxElevation(self)

    def SetRadiusSampleSize(self, _arg):
        r"""
        SetRadiusSampleSize(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD4_SetRadiusSampleSize(self, _arg)

    def GetRadiusSampleSize(self):
        r"""GetRadiusSampleSize(self) -> double"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD4_GetRadiusSampleSize(self)

    def SetAzimuthAngularSeparation(self, _arg):
        r"""
        SetAzimuthAngularSeparation(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD4_SetAzimuthAngularSeparation(self, _arg)

    def GetAzimuthAngularSeparation(self):
        r"""GetAzimuthAngularSeparation(self) -> double"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD4_GetAzimuthAngularSeparation(self)

    def SetElevationAngularSeparation(self, _arg):
        r"""
        SetElevationAngularSeparation(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD4_SetElevationAngularSeparation(self, _arg)

    def GetElevationAngularSeparation(self):
        r"""GetElevationAngularSeparation(self) -> double"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD4_GetElevationAngularSeparation(self)

    def SetFirstSampleDistance(self, _arg):
        r"""
        SetFirstSampleDistance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD4_SetFirstSampleDistance(self, _arg)

    def GetFirstSampleDistance(self):
        r"""GetFirstSampleDistance(self) -> double"""
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD4_GetFirstSampleDistance(self)
    __swig_destroy__ = _itkAzimuthElevationToCartesianTransformPython.delete_itkAzimuthElevationToCartesianTransformD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkAzimuthElevationToCartesianTransformD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkAzimuthElevationToCartesianTransformD4

        Create a new object of the class itkAzimuthElevationToCartesianTransformD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAzimuthElevationToCartesianTransformD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAzimuthElevationToCartesianTransformD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAzimuthElevationToCartesianTransformD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAzimuthElevationToCartesianTransformD4 in _itkAzimuthElevationToCartesianTransformPython:
_itkAzimuthElevationToCartesianTransformPython.itkAzimuthElevationToCartesianTransformD4_swigregister(itkAzimuthElevationToCartesianTransformD4)

