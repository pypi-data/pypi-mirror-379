# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageGridPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkInterpolateImageFilterPython
else:
    import _itkInterpolateImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkInterpolateImageFunctionPython
import itk.itkContinuousIndexPython
import itk.itkImageFunctionBasePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkFunctionBasePython
import itk.itkArrayPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython

def itkInterpolateImageFilterID2ID2_New():
    return itkInterpolateImageFilterID2ID2.New()

class itkInterpolateImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkInterpolateImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInterpolateImageFilterID2ID2_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInterpolateImageFilterID2ID2_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageD2 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_SetInput1(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageD2"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_GetInput1(self)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD2 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_SetInput2(self, image)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD2"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_GetInput2(self)

    def SetDistance(self, _arg):
        r"""
        SetDistance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_SetDistance(self, _arg)

    def GetDistance(self):
        r"""GetDistance(self) -> double"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_GetDistance(self)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionID3D *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionID3D"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionID3D
        GetInterpolator(self) -> itkInterpolateImageFunctionID3D
        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_GetInterpolator(self, *args)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_BeforeThreadedGenerateData(self)

    def AfterThreadedGenerateData(self):
        r"""AfterThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_AfterThreadedGenerateData(self)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInterpolateImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterID2ID2

        Create a new object of the class itkInterpolateImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterID2ID2 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_swigregister(itkInterpolateImageFilterID2ID2)

def itkInterpolateImageFilterID3ID3_New():
    return itkInterpolateImageFilterID3ID3.New()

class itkInterpolateImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkInterpolateImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInterpolateImageFilterID3ID3_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInterpolateImageFilterID3ID3_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageD3 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_SetInput1(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageD3"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_GetInput1(self)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD3 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_SetInput2(self, image)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD3"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_GetInput2(self)

    def SetDistance(self, _arg):
        r"""
        SetDistance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_SetDistance(self, _arg)

    def GetDistance(self):
        r"""GetDistance(self) -> double"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_GetDistance(self)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionID4D *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionID4D"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionID4D
        GetInterpolator(self) -> itkInterpolateImageFunctionID4D
        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_GetInterpolator(self, *args)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_BeforeThreadedGenerateData(self)

    def AfterThreadedGenerateData(self):
        r"""AfterThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_AfterThreadedGenerateData(self)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInterpolateImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterID3ID3

        Create a new object of the class itkInterpolateImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterID3ID3 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_swigregister(itkInterpolateImageFilterID3ID3)

def itkInterpolateImageFilterID4ID4_New():
    return itkInterpolateImageFilterID4ID4.New()

class itkInterpolateImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkInterpolateImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInterpolateImageFilterID4ID4_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInterpolateImageFilterID4ID4_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID4ID4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageD4 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID4ID4_SetInput1(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageD4"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID4ID4_GetInput1(self)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageD4 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID4ID4_SetInput2(self, image)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD4"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID4ID4_GetInput2(self)

    def SetDistance(self, _arg):
        r"""
        SetDistance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID4ID4_SetDistance(self, _arg)

    def GetDistance(self):
        r"""GetDistance(self) -> double"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID4ID4_GetDistance(self)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itk::InterpolateImageFunction< itk::Image< double,5 > > *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID4ID4_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itk::InterpolateImageFunction< itk::Image< double,5 > > *"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID4ID4_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itk::InterpolateImageFunction< itk::Image< double,5 > > const
        GetInterpolator(self) -> itk::InterpolateImageFunction< itk::Image< double,5 > > *
        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID4ID4_GetInterpolator(self, *args)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID4ID4_BeforeThreadedGenerateData(self)

    def AfterThreadedGenerateData(self):
        r"""AfterThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID4ID4_AfterThreadedGenerateData(self)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterID4ID4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInterpolateImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterID4ID4

        Create a new object of the class itkInterpolateImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterID4ID4 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterID4ID4_swigregister(itkInterpolateImageFilterID4ID4)

def itkInterpolateImageFilterIF2IF2_New():
    return itkInterpolateImageFilterIF2IF2.New()

class itkInterpolateImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkInterpolateImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInterpolateImageFilterIF2IF2_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInterpolateImageFilterIF2IF2_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageF2 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_SetInput1(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageF2"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_GetInput1(self)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF2 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_SetInput2(self, image)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF2"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_GetInput2(self)

    def SetDistance(self, _arg):
        r"""
        SetDistance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_SetDistance(self, _arg)

    def GetDistance(self):
        r"""GetDistance(self) -> double"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_GetDistance(self)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIF3D *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionIF3D"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionIF3D
        GetInterpolator(self) -> itkInterpolateImageFunctionIF3D
        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_GetInterpolator(self, *args)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_BeforeThreadedGenerateData(self)

    def AfterThreadedGenerateData(self):
        r"""AfterThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_AfterThreadedGenerateData(self)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInterpolateImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterIF2IF2

        Create a new object of the class itkInterpolateImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterIF2IF2 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_swigregister(itkInterpolateImageFilterIF2IF2)

def itkInterpolateImageFilterIF3IF3_New():
    return itkInterpolateImageFilterIF3IF3.New()

class itkInterpolateImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkInterpolateImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInterpolateImageFilterIF3IF3_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInterpolateImageFilterIF3IF3_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageF3 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_SetInput1(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageF3"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_GetInput1(self)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF3 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_SetInput2(self, image)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF3"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_GetInput2(self)

    def SetDistance(self, _arg):
        r"""
        SetDistance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_SetDistance(self, _arg)

    def GetDistance(self):
        r"""GetDistance(self) -> double"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_GetDistance(self)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIF4D *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionIF4D"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionIF4D
        GetInterpolator(self) -> itkInterpolateImageFunctionIF4D
        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_GetInterpolator(self, *args)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_BeforeThreadedGenerateData(self)

    def AfterThreadedGenerateData(self):
        r"""AfterThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_AfterThreadedGenerateData(self)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInterpolateImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterIF3IF3

        Create a new object of the class itkInterpolateImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterIF3IF3 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_swigregister(itkInterpolateImageFilterIF3IF3)

def itkInterpolateImageFilterIF4IF4_New():
    return itkInterpolateImageFilterIF4IF4.New()

class itkInterpolateImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkInterpolateImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInterpolateImageFilterIF4IF4_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInterpolateImageFilterIF4IF4_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF4IF4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageF4 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF4IF4_SetInput1(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageF4"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF4IF4_GetInput1(self)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageF4 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF4IF4_SetInput2(self, image)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF4"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF4IF4_GetInput2(self)

    def SetDistance(self, _arg):
        r"""
        SetDistance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF4IF4_SetDistance(self, _arg)

    def GetDistance(self):
        r"""GetDistance(self) -> double"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF4IF4_GetDistance(self)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itk::InterpolateImageFunction< itk::Image< float,5 > > *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF4IF4_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itk::InterpolateImageFunction< itk::Image< float,5 > > *"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF4IF4_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itk::InterpolateImageFunction< itk::Image< float,5 > > const
        GetInterpolator(self) -> itk::InterpolateImageFunction< itk::Image< float,5 > > *
        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF4IF4_GetInterpolator(self, *args)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF4IF4_BeforeThreadedGenerateData(self)

    def AfterThreadedGenerateData(self):
        r"""AfterThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF4IF4_AfterThreadedGenerateData(self)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF4IF4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInterpolateImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterIF4IF4

        Create a new object of the class itkInterpolateImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterIF4IF4 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF4IF4_swigregister(itkInterpolateImageFilterIF4IF4)

def itkInterpolateImageFilterISS2ISS2_New():
    return itkInterpolateImageFilterISS2ISS2.New()

class itkInterpolateImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkInterpolateImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInterpolateImageFilterISS2ISS2_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInterpolateImageFilterISS2ISS2_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageSS2 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_SetInput1(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageSS2"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_GetInput1(self)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageSS2 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_SetInput2(self, image)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageSS2"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_GetInput2(self)

    def SetDistance(self, _arg):
        r"""
        SetDistance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_SetDistance(self, _arg)

    def GetDistance(self):
        r"""GetDistance(self) -> double"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_GetDistance(self)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionISS3D *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionISS3D"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionISS3D
        GetInterpolator(self) -> itkInterpolateImageFunctionISS3D
        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_GetInterpolator(self, *args)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_BeforeThreadedGenerateData(self)

    def AfterThreadedGenerateData(self):
        r"""AfterThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_AfterThreadedGenerateData(self)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInterpolateImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterISS2ISS2

        Create a new object of the class itkInterpolateImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterISS2ISS2 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_swigregister(itkInterpolateImageFilterISS2ISS2)

def itkInterpolateImageFilterISS3ISS3_New():
    return itkInterpolateImageFilterISS3ISS3.New()

class itkInterpolateImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkInterpolateImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInterpolateImageFilterISS3ISS3_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInterpolateImageFilterISS3ISS3_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageSS3 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_SetInput1(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageSS3"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_GetInput1(self)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageSS3 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_SetInput2(self, image)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageSS3"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_GetInput2(self)

    def SetDistance(self, _arg):
        r"""
        SetDistance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_SetDistance(self, _arg)

    def GetDistance(self):
        r"""GetDistance(self) -> double"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_GetDistance(self)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionISS4D *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionISS4D"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionISS4D
        GetInterpolator(self) -> itkInterpolateImageFunctionISS4D
        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_GetInterpolator(self, *args)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_BeforeThreadedGenerateData(self)

    def AfterThreadedGenerateData(self):
        r"""AfterThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_AfterThreadedGenerateData(self)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInterpolateImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterISS3ISS3

        Create a new object of the class itkInterpolateImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterISS3ISS3 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_swigregister(itkInterpolateImageFilterISS3ISS3)

def itkInterpolateImageFilterISS4ISS4_New():
    return itkInterpolateImageFilterISS4ISS4.New()

class itkInterpolateImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkInterpolateImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInterpolateImageFilterISS4ISS4_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInterpolateImageFilterISS4ISS4_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS4ISS4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageSS4 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS4ISS4_SetInput1(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageSS4"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS4ISS4_GetInput1(self)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageSS4 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS4ISS4_SetInput2(self, image)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageSS4"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS4ISS4_GetInput2(self)

    def SetDistance(self, _arg):
        r"""
        SetDistance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS4ISS4_SetDistance(self, _arg)

    def GetDistance(self):
        r"""GetDistance(self) -> double"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS4ISS4_GetDistance(self)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itk::InterpolateImageFunction< itk::Image< short,5 > > *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS4ISS4_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itk::InterpolateImageFunction< itk::Image< short,5 > > *"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS4ISS4_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itk::InterpolateImageFunction< itk::Image< short,5 > > const
        GetInterpolator(self) -> itk::InterpolateImageFunction< itk::Image< short,5 > > *
        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS4ISS4_GetInterpolator(self, *args)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS4ISS4_BeforeThreadedGenerateData(self)

    def AfterThreadedGenerateData(self):
        r"""AfterThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS4ISS4_AfterThreadedGenerateData(self)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS4ISS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInterpolateImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterISS4ISS4

        Create a new object of the class itkInterpolateImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterISS4ISS4 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS4ISS4_swigregister(itkInterpolateImageFilterISS4ISS4)

def itkInterpolateImageFilterIUC2IUC2_New():
    return itkInterpolateImageFilterIUC2IUC2.New()

class itkInterpolateImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkInterpolateImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInterpolateImageFilterIUC2IUC2_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInterpolateImageFilterIUC2IUC2_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUC2 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_SetInput1(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC2"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_GetInput1(self)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageUC2 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_SetInput2(self, image)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageUC2"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_GetInput2(self)

    def SetDistance(self, _arg):
        r"""
        SetDistance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_SetDistance(self, _arg)

    def GetDistance(self):
        r"""GetDistance(self) -> double"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_GetDistance(self)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIUC3D *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionIUC3D"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionIUC3D
        GetInterpolator(self) -> itkInterpolateImageFunctionIUC3D
        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_GetInterpolator(self, *args)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_BeforeThreadedGenerateData(self)

    def AfterThreadedGenerateData(self):
        r"""AfterThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_AfterThreadedGenerateData(self)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInterpolateImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterIUC2IUC2

        Create a new object of the class itkInterpolateImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterIUC2IUC2 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_swigregister(itkInterpolateImageFilterIUC2IUC2)

def itkInterpolateImageFilterIUC3IUC3_New():
    return itkInterpolateImageFilterIUC3IUC3.New()

class itkInterpolateImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkInterpolateImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInterpolateImageFilterIUC3IUC3_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInterpolateImageFilterIUC3IUC3_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUC3 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_SetInput1(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC3"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_GetInput1(self)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageUC3 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_SetInput2(self, image)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageUC3"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_GetInput2(self)

    def SetDistance(self, _arg):
        r"""
        SetDistance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_SetDistance(self, _arg)

    def GetDistance(self):
        r"""GetDistance(self) -> double"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_GetDistance(self)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIUC4D *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionIUC4D"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionIUC4D
        GetInterpolator(self) -> itkInterpolateImageFunctionIUC4D
        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_GetInterpolator(self, *args)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_BeforeThreadedGenerateData(self)

    def AfterThreadedGenerateData(self):
        r"""AfterThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_AfterThreadedGenerateData(self)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInterpolateImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterIUC3IUC3

        Create a new object of the class itkInterpolateImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterIUC3IUC3 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_swigregister(itkInterpolateImageFilterIUC3IUC3)

def itkInterpolateImageFilterIUC4IUC4_New():
    return itkInterpolateImageFilterIUC4IUC4.New()

class itkInterpolateImageFilterIUC4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkInterpolateImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInterpolateImageFilterIUC4IUC4_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInterpolateImageFilterIUC4IUC4_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC4IUC4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUC4 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC4IUC4_SetInput1(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC4"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC4IUC4_GetInput1(self)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageUC4 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC4IUC4_SetInput2(self, image)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageUC4"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC4IUC4_GetInput2(self)

    def SetDistance(self, _arg):
        r"""
        SetDistance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC4IUC4_SetDistance(self, _arg)

    def GetDistance(self):
        r"""GetDistance(self) -> double"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC4IUC4_GetDistance(self)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itk::InterpolateImageFunction< itk::Image< unsigned char,5 > > *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC4IUC4_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itk::InterpolateImageFunction< itk::Image< unsigned char,5 > > *"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC4IUC4_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itk::InterpolateImageFunction< itk::Image< unsigned char,5 > > const
        GetInterpolator(self) -> itk::InterpolateImageFunction< itk::Image< unsigned char,5 > > *
        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC4IUC4_GetInterpolator(self, *args)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC4IUC4_BeforeThreadedGenerateData(self)

    def AfterThreadedGenerateData(self):
        r"""AfterThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC4IUC4_AfterThreadedGenerateData(self)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC4IUC4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInterpolateImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterIUC4IUC4

        Create a new object of the class itkInterpolateImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterIUC4IUC4 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC4IUC4_swigregister(itkInterpolateImageFilterIUC4IUC4)

def itkInterpolateImageFilterIUS2IUS2_New():
    return itkInterpolateImageFilterIUS2IUS2.New()

class itkInterpolateImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkInterpolateImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInterpolateImageFilterIUS2IUS2_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInterpolateImageFilterIUS2IUS2_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUS2 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_SetInput1(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS2"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_GetInput1(self)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageUS2 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_SetInput2(self, image)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageUS2"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_GetInput2(self)

    def SetDistance(self, _arg):
        r"""
        SetDistance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_SetDistance(self, _arg)

    def GetDistance(self):
        r"""GetDistance(self) -> double"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_GetDistance(self)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIUS3D *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionIUS3D"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionIUS3D
        GetInterpolator(self) -> itkInterpolateImageFunctionIUS3D
        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_GetInterpolator(self, *args)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_BeforeThreadedGenerateData(self)

    def AfterThreadedGenerateData(self):
        r"""AfterThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_AfterThreadedGenerateData(self)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInterpolateImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterIUS2IUS2

        Create a new object of the class itkInterpolateImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterIUS2IUS2 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_swigregister(itkInterpolateImageFilterIUS2IUS2)

def itkInterpolateImageFilterIUS3IUS3_New():
    return itkInterpolateImageFilterIUS3IUS3.New()

class itkInterpolateImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkInterpolateImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInterpolateImageFilterIUS3IUS3_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInterpolateImageFilterIUS3IUS3_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUS3 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_SetInput1(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS3"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_GetInput1(self)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageUS3 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_SetInput2(self, image)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageUS3"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_GetInput2(self)

    def SetDistance(self, _arg):
        r"""
        SetDistance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_SetDistance(self, _arg)

    def GetDistance(self):
        r"""GetDistance(self) -> double"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_GetDistance(self)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itkInterpolateImageFunctionIUS4D *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itkInterpolateImageFunctionIUS4D"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itkInterpolateImageFunctionIUS4D
        GetInterpolator(self) -> itkInterpolateImageFunctionIUS4D
        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_GetInterpolator(self, *args)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_BeforeThreadedGenerateData(self)

    def AfterThreadedGenerateData(self):
        r"""AfterThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_AfterThreadedGenerateData(self)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInterpolateImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterIUS3IUS3

        Create a new object of the class itkInterpolateImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterIUS3IUS3 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_swigregister(itkInterpolateImageFilterIUS3IUS3)

def itkInterpolateImageFilterIUS4IUS4_New():
    return itkInterpolateImageFilterIUS4IUS4.New()

class itkInterpolateImageFilterIUS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkInterpolateImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkInterpolateImageFilterIUS4IUS4_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkInterpolateImageFilterIUS4IUS4_Pointer"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS4IUS4_Clone(self)

    def SetInput1(self, image):
        r"""
        SetInput1(self, image)

        Parameters
        ----------
        image: itkImageUS4 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS4IUS4_SetInput1(self, image)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS4"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS4IUS4_GetInput1(self)

    def SetInput2(self, image):
        r"""
        SetInput2(self, image)

        Parameters
        ----------
        image: itkImageUS4 const *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS4IUS4_SetInput2(self, image)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageUS4"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS4IUS4_GetInput2(self)

    def SetDistance(self, _arg):
        r"""
        SetDistance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS4IUS4_SetDistance(self, _arg)

    def GetDistance(self):
        r"""GetDistance(self) -> double"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS4IUS4_GetDistance(self)

    def SetInterpolator(self, _arg):
        r"""
        SetInterpolator(self, _arg)

        Parameters
        ----------
        _arg: itk::InterpolateImageFunction< itk::Image< unsigned short,5 > > *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS4IUS4_SetInterpolator(self, _arg)

    def GetModifiableInterpolator(self):
        r"""GetModifiableInterpolator(self) -> itk::InterpolateImageFunction< itk::Image< unsigned short,5 > > *"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS4IUS4_GetModifiableInterpolator(self)

    def GetInterpolator(self, *args):
        r"""
        GetInterpolator(self) -> itk::InterpolateImageFunction< itk::Image< unsigned short,5 > > const
        GetInterpolator(self) -> itk::InterpolateImageFunction< itk::Image< unsigned short,5 > > *
        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS4IUS4_GetInterpolator(self, *args)

    def BeforeThreadedGenerateData(self):
        r"""BeforeThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS4IUS4_BeforeThreadedGenerateData(self)

    def AfterThreadedGenerateData(self):
        r"""AfterThreadedGenerateData(self)"""
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS4IUS4_AfterThreadedGenerateData(self)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS4IUS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkInterpolateImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterIUS4IUS4

        Create a new object of the class itkInterpolateImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterIUS4IUS4 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS4IUS4_swigregister(itkInterpolateImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Union
from collections.abc import Sequence

@helpers.accept_array_like_xarray_torch
def interpolate_image_filter(*args: itkt.ImageLike,  distance: float=..., interpolator: itkt.InterpolateImageFunction=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for InterpolateImageFilter"""
    import itk

    kwarg_typehints = { 'distance':distance,'interpolator':interpolator }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.InterpolateImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def interpolate_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageGrid.InterpolateImageFilter
    interpolate_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    interpolate_image_filter.__doc__ = filter_object.__doc__



