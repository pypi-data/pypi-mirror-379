# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkIndexPython
else:
    import _itkIndexPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
class itkIndex1(object):
    r"""Proxy of C++ itkIndex1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetIndexDimension():
        r"""GetIndexDimension() -> unsigned int"""
        return _itkIndexPython.itkIndex1_GetIndexDimension()

    def __add__(self, *args):
        r"""
        __add__(self, sz) -> itkIndex1

        Parameters
        ----------
        sz: itkSize1 const &

        __add__(self, offset) -> itkIndex1

        Parameters
        ----------
        offset: itkOffset1 const &

        """
        return _itkIndexPython.itkIndex1___add__(self, *args)

    def __iadd__(self, *args):
        r"""
        __iadd__(self, sz) -> itkIndex1

        Parameters
        ----------
        sz: itkSize1 const &

        __iadd__(self, offset) -> itkIndex1

        Parameters
        ----------
        offset: itkOffset1 const &

        """
        return _itkIndexPython.itkIndex1___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(self, sz) -> itkIndex1

        Parameters
        ----------
        sz: itkSize1 const &

        __isub__(self, offset) -> itkIndex1

        Parameters
        ----------
        offset: itkOffset1 const &

        """
        return _itkIndexPython.itkIndex1___isub__(self, *args)

    def __sub__(self, *args):
        r"""
        __sub__(self, sz) -> itkIndex1

        Parameters
        ----------
        sz: itkSize1 const &

        __sub__(self, off) -> itkIndex1

        Parameters
        ----------
        off: itkOffset1 const &

        __sub__(self, vec) -> itkOffset1

        Parameters
        ----------
        vec: itkIndex1 const &

        """
        return _itkIndexPython.itkIndex1___sub__(self, *args)

    def __mul__(self, vec):
        r"""
        __mul__(self, vec) -> itkIndex1

        Parameters
        ----------
        vec: itkSize1 const &

        """
        return _itkIndexPython.itkIndex1___mul__(self, vec)

    def GetIndex(self):
        r"""GetIndex(self) -> long const *"""
        return _itkIndexPython.itkIndex1_GetIndex(self)

    def SetIndex(self, val):
        r"""
        SetIndex(self, val)

        Parameters
        ----------
        val: long const *

        """
        return _itkIndexPython.itkIndex1_SetIndex(self, val)

    def SetElement(self, element, val):
        r"""
        SetElement(self, element, val)

        Parameters
        ----------
        element: unsigned int
        val: long

        """
        return _itkIndexPython.itkIndex1_SetElement(self, element, val)

    def GetElement(self, element):
        r"""
        GetElement(self, element) -> long

        Parameters
        ----------
        element: unsigned int

        """
        return _itkIndexPython.itkIndex1_GetElement(self, element)

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: long

        """
        return _itkIndexPython.itkIndex1_Fill(self, value)

    @staticmethod
    def GetBasisIndex(dim):
        r"""
        GetBasisIndex(dim) -> itkIndex1

        Parameters
        ----------
        dim: unsigned int

        """
        return _itkIndexPython.itkIndex1_GetBasisIndex(dim)

    def assign(self, newValue):
        r"""
        assign(self, newValue)

        Parameters
        ----------
        newValue: long const &

        """
        return _itkIndexPython.itkIndex1_assign(self, newValue)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkIndex1 &

        """
        return _itkIndexPython.itkIndex1_swap(self, other)

    def cbegin(self):
        r"""cbegin(self) -> long const *"""
        return _itkIndexPython.itkIndex1_cbegin(self)

    def begin(self, *args):
        r"""
        begin(self) -> long
        begin(self) -> long const *
        """
        return _itkIndexPython.itkIndex1_begin(self, *args)

    def cend(self):
        r"""cend(self) -> long const *"""
        return _itkIndexPython.itkIndex1_cend(self)

    def end(self, *args):
        r"""
        end(self) -> long
        end(self) -> long const *
        """
        return _itkIndexPython.itkIndex1_end(self, *args)

    def rbegin(self, *args):
        r"""
        rbegin(self) -> std::reverse_iterator< long * >
        rbegin(self) -> std::reverse_iterator< long const * >
        """
        return _itkIndexPython.itkIndex1_rbegin(self, *args)

    def rend(self, *args):
        r"""
        rend(self) -> std::reverse_iterator< long * >
        rend(self) -> std::reverse_iterator< long const * >
        """
        return _itkIndexPython.itkIndex1_rend(self, *args)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkIndexPython.itkIndex1_size(self)

    def max_size(self):
        r"""max_size(self) -> unsigned int"""
        return _itkIndexPython.itkIndex1_max_size(self)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkIndexPython.itkIndex1_empty(self)

    def at(self, *args):
        r"""
        at(self, pos) -> long

        Parameters
        ----------
        pos: unsigned int

        at(self, pos) -> long const &

        Parameters
        ----------
        pos: unsigned int

        """
        return _itkIndexPython.itkIndex1_at(self, *args)

    def front(self, *args):
        r"""
        front(self) -> long
        front(self) -> long const &
        """
        return _itkIndexPython.itkIndex1_front(self, *args)

    def back(self, *args):
        r"""
        back(self) -> long
        back(self) -> long const &
        """
        return _itkIndexPython.itkIndex1_back(self, *args)

    def data(self, *args):
        r"""
        data(self) -> long
        data(self) -> long const *
        """
        return _itkIndexPython.itkIndex1_data(self, *args)

    @staticmethod
    def Filled(value):
        r"""
        Filled(value) -> itkIndex1

        Parameters
        ----------
        value: long const

        """
        return _itkIndexPython.itkIndex1_Filled(value)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkIndex1
        __init__(self, arg0) -> itkIndex1

        Parameters
        ----------
        arg0: itkIndex1 const &

        """
        _itkIndexPython.itkIndex1_swiginit(self, _itkIndexPython.new_itkIndex1(*args))
    __swig_destroy__ = _itkIndexPython.delete_itkIndex1

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> long

        Parameters
        ----------
        d: unsigned long

        """
        return _itkIndexPython.itkIndex1___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: long

        """
        return _itkIndexPython.itkIndex1___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkIndexPython.itkIndex1___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkIndexPython.itkIndex1___repr__(self)

    def __eq__(self, other):
        return tuple(self) == tuple(other)


# Register itkIndex1 in _itkIndexPython:
_itkIndexPython.itkIndex1_swigregister(itkIndex1)
class itkIndex2(object):
    r"""Proxy of C++ itkIndex2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetIndexDimension():
        r"""GetIndexDimension() -> unsigned int"""
        return _itkIndexPython.itkIndex2_GetIndexDimension()

    def __add__(self, *args):
        r"""
        __add__(self, sz) -> itkIndex2

        Parameters
        ----------
        sz: itkSize2 const &

        __add__(self, offset) -> itkIndex2

        Parameters
        ----------
        offset: itkOffset2 const &

        """
        return _itkIndexPython.itkIndex2___add__(self, *args)

    def __iadd__(self, *args):
        r"""
        __iadd__(self, sz) -> itkIndex2

        Parameters
        ----------
        sz: itkSize2 const &

        __iadd__(self, offset) -> itkIndex2

        Parameters
        ----------
        offset: itkOffset2 const &

        """
        return _itkIndexPython.itkIndex2___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(self, sz) -> itkIndex2

        Parameters
        ----------
        sz: itkSize2 const &

        __isub__(self, offset) -> itkIndex2

        Parameters
        ----------
        offset: itkOffset2 const &

        """
        return _itkIndexPython.itkIndex2___isub__(self, *args)

    def __sub__(self, *args):
        r"""
        __sub__(self, sz) -> itkIndex2

        Parameters
        ----------
        sz: itkSize2 const &

        __sub__(self, off) -> itkIndex2

        Parameters
        ----------
        off: itkOffset2 const &

        __sub__(self, vec) -> itkOffset2

        Parameters
        ----------
        vec: itkIndex2 const &

        """
        return _itkIndexPython.itkIndex2___sub__(self, *args)

    def __mul__(self, vec):
        r"""
        __mul__(self, vec) -> itkIndex2

        Parameters
        ----------
        vec: itkSize2 const &

        """
        return _itkIndexPython.itkIndex2___mul__(self, vec)

    def GetIndex(self):
        r"""GetIndex(self) -> long const *"""
        return _itkIndexPython.itkIndex2_GetIndex(self)

    def SetIndex(self, val):
        r"""
        SetIndex(self, val)

        Parameters
        ----------
        val: long const *

        """
        return _itkIndexPython.itkIndex2_SetIndex(self, val)

    def SetElement(self, element, val):
        r"""
        SetElement(self, element, val)

        Parameters
        ----------
        element: unsigned int
        val: long

        """
        return _itkIndexPython.itkIndex2_SetElement(self, element, val)

    def GetElement(self, element):
        r"""
        GetElement(self, element) -> long

        Parameters
        ----------
        element: unsigned int

        """
        return _itkIndexPython.itkIndex2_GetElement(self, element)

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: long

        """
        return _itkIndexPython.itkIndex2_Fill(self, value)

    @staticmethod
    def GetBasisIndex(dim):
        r"""
        GetBasisIndex(dim) -> itkIndex2

        Parameters
        ----------
        dim: unsigned int

        """
        return _itkIndexPython.itkIndex2_GetBasisIndex(dim)

    def assign(self, newValue):
        r"""
        assign(self, newValue)

        Parameters
        ----------
        newValue: long const &

        """
        return _itkIndexPython.itkIndex2_assign(self, newValue)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkIndex2 &

        """
        return _itkIndexPython.itkIndex2_swap(self, other)

    def cbegin(self):
        r"""cbegin(self) -> long const *"""
        return _itkIndexPython.itkIndex2_cbegin(self)

    def begin(self, *args):
        r"""
        begin(self) -> long
        begin(self) -> long const *
        """
        return _itkIndexPython.itkIndex2_begin(self, *args)

    def cend(self):
        r"""cend(self) -> long const *"""
        return _itkIndexPython.itkIndex2_cend(self)

    def end(self, *args):
        r"""
        end(self) -> long
        end(self) -> long const *
        """
        return _itkIndexPython.itkIndex2_end(self, *args)

    def rbegin(self, *args):
        r"""
        rbegin(self) -> std::reverse_iterator< long * >
        rbegin(self) -> std::reverse_iterator< long const * >
        """
        return _itkIndexPython.itkIndex2_rbegin(self, *args)

    def rend(self, *args):
        r"""
        rend(self) -> std::reverse_iterator< long * >
        rend(self) -> std::reverse_iterator< long const * >
        """
        return _itkIndexPython.itkIndex2_rend(self, *args)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkIndexPython.itkIndex2_size(self)

    def max_size(self):
        r"""max_size(self) -> unsigned int"""
        return _itkIndexPython.itkIndex2_max_size(self)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkIndexPython.itkIndex2_empty(self)

    def at(self, *args):
        r"""
        at(self, pos) -> long

        Parameters
        ----------
        pos: unsigned int

        at(self, pos) -> long const &

        Parameters
        ----------
        pos: unsigned int

        """
        return _itkIndexPython.itkIndex2_at(self, *args)

    def front(self, *args):
        r"""
        front(self) -> long
        front(self) -> long const &
        """
        return _itkIndexPython.itkIndex2_front(self, *args)

    def back(self, *args):
        r"""
        back(self) -> long
        back(self) -> long const &
        """
        return _itkIndexPython.itkIndex2_back(self, *args)

    def data(self, *args):
        r"""
        data(self) -> long
        data(self) -> long const *
        """
        return _itkIndexPython.itkIndex2_data(self, *args)

    @staticmethod
    def Filled(value):
        r"""
        Filled(value) -> itkIndex2

        Parameters
        ----------
        value: long const

        """
        return _itkIndexPython.itkIndex2_Filled(value)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkIndex2
        __init__(self, arg0) -> itkIndex2

        Parameters
        ----------
        arg0: itkIndex2 const &

        """
        _itkIndexPython.itkIndex2_swiginit(self, _itkIndexPython.new_itkIndex2(*args))
    __swig_destroy__ = _itkIndexPython.delete_itkIndex2

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> long

        Parameters
        ----------
        d: unsigned long

        """
        return _itkIndexPython.itkIndex2___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: long

        """
        return _itkIndexPython.itkIndex2___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkIndexPython.itkIndex2___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkIndexPython.itkIndex2___repr__(self)

    def __eq__(self, other):
        return tuple(self) == tuple(other)


# Register itkIndex2 in _itkIndexPython:
_itkIndexPython.itkIndex2_swigregister(itkIndex2)
class itkIndex3(object):
    r"""Proxy of C++ itkIndex3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetIndexDimension():
        r"""GetIndexDimension() -> unsigned int"""
        return _itkIndexPython.itkIndex3_GetIndexDimension()

    def __add__(self, *args):
        r"""
        __add__(self, sz) -> itkIndex3

        Parameters
        ----------
        sz: itkSize3 const &

        __add__(self, offset) -> itkIndex3

        Parameters
        ----------
        offset: itkOffset3 const &

        """
        return _itkIndexPython.itkIndex3___add__(self, *args)

    def __iadd__(self, *args):
        r"""
        __iadd__(self, sz) -> itkIndex3

        Parameters
        ----------
        sz: itkSize3 const &

        __iadd__(self, offset) -> itkIndex3

        Parameters
        ----------
        offset: itkOffset3 const &

        """
        return _itkIndexPython.itkIndex3___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(self, sz) -> itkIndex3

        Parameters
        ----------
        sz: itkSize3 const &

        __isub__(self, offset) -> itkIndex3

        Parameters
        ----------
        offset: itkOffset3 const &

        """
        return _itkIndexPython.itkIndex3___isub__(self, *args)

    def __sub__(self, *args):
        r"""
        __sub__(self, sz) -> itkIndex3

        Parameters
        ----------
        sz: itkSize3 const &

        __sub__(self, off) -> itkIndex3

        Parameters
        ----------
        off: itkOffset3 const &

        __sub__(self, vec) -> itkOffset3

        Parameters
        ----------
        vec: itkIndex3 const &

        """
        return _itkIndexPython.itkIndex3___sub__(self, *args)

    def __mul__(self, vec):
        r"""
        __mul__(self, vec) -> itkIndex3

        Parameters
        ----------
        vec: itkSize3 const &

        """
        return _itkIndexPython.itkIndex3___mul__(self, vec)

    def GetIndex(self):
        r"""GetIndex(self) -> long const *"""
        return _itkIndexPython.itkIndex3_GetIndex(self)

    def SetIndex(self, val):
        r"""
        SetIndex(self, val)

        Parameters
        ----------
        val: long const *

        """
        return _itkIndexPython.itkIndex3_SetIndex(self, val)

    def SetElement(self, element, val):
        r"""
        SetElement(self, element, val)

        Parameters
        ----------
        element: unsigned int
        val: long

        """
        return _itkIndexPython.itkIndex3_SetElement(self, element, val)

    def GetElement(self, element):
        r"""
        GetElement(self, element) -> long

        Parameters
        ----------
        element: unsigned int

        """
        return _itkIndexPython.itkIndex3_GetElement(self, element)

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: long

        """
        return _itkIndexPython.itkIndex3_Fill(self, value)

    @staticmethod
    def GetBasisIndex(dim):
        r"""
        GetBasisIndex(dim) -> itkIndex3

        Parameters
        ----------
        dim: unsigned int

        """
        return _itkIndexPython.itkIndex3_GetBasisIndex(dim)

    def assign(self, newValue):
        r"""
        assign(self, newValue)

        Parameters
        ----------
        newValue: long const &

        """
        return _itkIndexPython.itkIndex3_assign(self, newValue)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkIndex3 &

        """
        return _itkIndexPython.itkIndex3_swap(self, other)

    def cbegin(self):
        r"""cbegin(self) -> long const *"""
        return _itkIndexPython.itkIndex3_cbegin(self)

    def begin(self, *args):
        r"""
        begin(self) -> long
        begin(self) -> long const *
        """
        return _itkIndexPython.itkIndex3_begin(self, *args)

    def cend(self):
        r"""cend(self) -> long const *"""
        return _itkIndexPython.itkIndex3_cend(self)

    def end(self, *args):
        r"""
        end(self) -> long
        end(self) -> long const *
        """
        return _itkIndexPython.itkIndex3_end(self, *args)

    def rbegin(self, *args):
        r"""
        rbegin(self) -> std::reverse_iterator< long * >
        rbegin(self) -> std::reverse_iterator< long const * >
        """
        return _itkIndexPython.itkIndex3_rbegin(self, *args)

    def rend(self, *args):
        r"""
        rend(self) -> std::reverse_iterator< long * >
        rend(self) -> std::reverse_iterator< long const * >
        """
        return _itkIndexPython.itkIndex3_rend(self, *args)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkIndexPython.itkIndex3_size(self)

    def max_size(self):
        r"""max_size(self) -> unsigned int"""
        return _itkIndexPython.itkIndex3_max_size(self)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkIndexPython.itkIndex3_empty(self)

    def at(self, *args):
        r"""
        at(self, pos) -> long

        Parameters
        ----------
        pos: unsigned int

        at(self, pos) -> long const &

        Parameters
        ----------
        pos: unsigned int

        """
        return _itkIndexPython.itkIndex3_at(self, *args)

    def front(self, *args):
        r"""
        front(self) -> long
        front(self) -> long const &
        """
        return _itkIndexPython.itkIndex3_front(self, *args)

    def back(self, *args):
        r"""
        back(self) -> long
        back(self) -> long const &
        """
        return _itkIndexPython.itkIndex3_back(self, *args)

    def data(self, *args):
        r"""
        data(self) -> long
        data(self) -> long const *
        """
        return _itkIndexPython.itkIndex3_data(self, *args)

    @staticmethod
    def Filled(value):
        r"""
        Filled(value) -> itkIndex3

        Parameters
        ----------
        value: long const

        """
        return _itkIndexPython.itkIndex3_Filled(value)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkIndex3
        __init__(self, arg0) -> itkIndex3

        Parameters
        ----------
        arg0: itkIndex3 const &

        """
        _itkIndexPython.itkIndex3_swiginit(self, _itkIndexPython.new_itkIndex3(*args))
    __swig_destroy__ = _itkIndexPython.delete_itkIndex3

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> long

        Parameters
        ----------
        d: unsigned long

        """
        return _itkIndexPython.itkIndex3___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: long

        """
        return _itkIndexPython.itkIndex3___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkIndexPython.itkIndex3___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkIndexPython.itkIndex3___repr__(self)

    def __eq__(self, other):
        return tuple(self) == tuple(other)


# Register itkIndex3 in _itkIndexPython:
_itkIndexPython.itkIndex3_swigregister(itkIndex3)
class itkIndex4(object):
    r"""Proxy of C++ itkIndex4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetIndexDimension():
        r"""GetIndexDimension() -> unsigned int"""
        return _itkIndexPython.itkIndex4_GetIndexDimension()

    def __add__(self, *args):
        r"""
        __add__(self, sz) -> itkIndex4

        Parameters
        ----------
        sz: itkSize4 const &

        __add__(self, offset) -> itkIndex4

        Parameters
        ----------
        offset: itkOffset4 const &

        """
        return _itkIndexPython.itkIndex4___add__(self, *args)

    def __iadd__(self, *args):
        r"""
        __iadd__(self, sz) -> itkIndex4

        Parameters
        ----------
        sz: itkSize4 const &

        __iadd__(self, offset) -> itkIndex4

        Parameters
        ----------
        offset: itkOffset4 const &

        """
        return _itkIndexPython.itkIndex4___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(self, sz) -> itkIndex4

        Parameters
        ----------
        sz: itkSize4 const &

        __isub__(self, offset) -> itkIndex4

        Parameters
        ----------
        offset: itkOffset4 const &

        """
        return _itkIndexPython.itkIndex4___isub__(self, *args)

    def __sub__(self, *args):
        r"""
        __sub__(self, sz) -> itkIndex4

        Parameters
        ----------
        sz: itkSize4 const &

        __sub__(self, off) -> itkIndex4

        Parameters
        ----------
        off: itkOffset4 const &

        __sub__(self, vec) -> itkOffset4

        Parameters
        ----------
        vec: itkIndex4 const &

        """
        return _itkIndexPython.itkIndex4___sub__(self, *args)

    def __mul__(self, vec):
        r"""
        __mul__(self, vec) -> itkIndex4

        Parameters
        ----------
        vec: itkSize4 const &

        """
        return _itkIndexPython.itkIndex4___mul__(self, vec)

    def GetIndex(self):
        r"""GetIndex(self) -> long const *"""
        return _itkIndexPython.itkIndex4_GetIndex(self)

    def SetIndex(self, val):
        r"""
        SetIndex(self, val)

        Parameters
        ----------
        val: long const *

        """
        return _itkIndexPython.itkIndex4_SetIndex(self, val)

    def SetElement(self, element, val):
        r"""
        SetElement(self, element, val)

        Parameters
        ----------
        element: unsigned int
        val: long

        """
        return _itkIndexPython.itkIndex4_SetElement(self, element, val)

    def GetElement(self, element):
        r"""
        GetElement(self, element) -> long

        Parameters
        ----------
        element: unsigned int

        """
        return _itkIndexPython.itkIndex4_GetElement(self, element)

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: long

        """
        return _itkIndexPython.itkIndex4_Fill(self, value)

    @staticmethod
    def GetBasisIndex(dim):
        r"""
        GetBasisIndex(dim) -> itkIndex4

        Parameters
        ----------
        dim: unsigned int

        """
        return _itkIndexPython.itkIndex4_GetBasisIndex(dim)

    def assign(self, newValue):
        r"""
        assign(self, newValue)

        Parameters
        ----------
        newValue: long const &

        """
        return _itkIndexPython.itkIndex4_assign(self, newValue)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkIndex4 &

        """
        return _itkIndexPython.itkIndex4_swap(self, other)

    def cbegin(self):
        r"""cbegin(self) -> long const *"""
        return _itkIndexPython.itkIndex4_cbegin(self)

    def begin(self, *args):
        r"""
        begin(self) -> long
        begin(self) -> long const *
        """
        return _itkIndexPython.itkIndex4_begin(self, *args)

    def cend(self):
        r"""cend(self) -> long const *"""
        return _itkIndexPython.itkIndex4_cend(self)

    def end(self, *args):
        r"""
        end(self) -> long
        end(self) -> long const *
        """
        return _itkIndexPython.itkIndex4_end(self, *args)

    def rbegin(self, *args):
        r"""
        rbegin(self) -> std::reverse_iterator< long * >
        rbegin(self) -> std::reverse_iterator< long const * >
        """
        return _itkIndexPython.itkIndex4_rbegin(self, *args)

    def rend(self, *args):
        r"""
        rend(self) -> std::reverse_iterator< long * >
        rend(self) -> std::reverse_iterator< long const * >
        """
        return _itkIndexPython.itkIndex4_rend(self, *args)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkIndexPython.itkIndex4_size(self)

    def max_size(self):
        r"""max_size(self) -> unsigned int"""
        return _itkIndexPython.itkIndex4_max_size(self)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkIndexPython.itkIndex4_empty(self)

    def at(self, *args):
        r"""
        at(self, pos) -> long

        Parameters
        ----------
        pos: unsigned int

        at(self, pos) -> long const &

        Parameters
        ----------
        pos: unsigned int

        """
        return _itkIndexPython.itkIndex4_at(self, *args)

    def front(self, *args):
        r"""
        front(self) -> long
        front(self) -> long const &
        """
        return _itkIndexPython.itkIndex4_front(self, *args)

    def back(self, *args):
        r"""
        back(self) -> long
        back(self) -> long const &
        """
        return _itkIndexPython.itkIndex4_back(self, *args)

    def data(self, *args):
        r"""
        data(self) -> long
        data(self) -> long const *
        """
        return _itkIndexPython.itkIndex4_data(self, *args)

    @staticmethod
    def Filled(value):
        r"""
        Filled(value) -> itkIndex4

        Parameters
        ----------
        value: long const

        """
        return _itkIndexPython.itkIndex4_Filled(value)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkIndex4
        __init__(self, arg0) -> itkIndex4

        Parameters
        ----------
        arg0: itkIndex4 const &

        """
        _itkIndexPython.itkIndex4_swiginit(self, _itkIndexPython.new_itkIndex4(*args))
    __swig_destroy__ = _itkIndexPython.delete_itkIndex4

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> long

        Parameters
        ----------
        d: unsigned long

        """
        return _itkIndexPython.itkIndex4___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: long

        """
        return _itkIndexPython.itkIndex4___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkIndexPython.itkIndex4___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkIndexPython.itkIndex4___repr__(self)

    def __eq__(self, other):
        return tuple(self) == tuple(other)


# Register itkIndex4 in _itkIndexPython:
_itkIndexPython.itkIndex4_swigregister(itkIndex4)
class itkIndex5(object):
    r"""Proxy of C++ itkIndex5 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetIndexDimension():
        r"""GetIndexDimension() -> unsigned int"""
        return _itkIndexPython.itkIndex5_GetIndexDimension()

    def __add__(self, *args):
        r"""
        __add__(self, sz) -> itkIndex5

        Parameters
        ----------
        sz: itkSize5 const &

        __add__(self, offset) -> itkIndex5

        Parameters
        ----------
        offset: itkOffset5 const &

        """
        return _itkIndexPython.itkIndex5___add__(self, *args)

    def __iadd__(self, *args):
        r"""
        __iadd__(self, sz) -> itkIndex5

        Parameters
        ----------
        sz: itkSize5 const &

        __iadd__(self, offset) -> itkIndex5

        Parameters
        ----------
        offset: itkOffset5 const &

        """
        return _itkIndexPython.itkIndex5___iadd__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(self, sz) -> itkIndex5

        Parameters
        ----------
        sz: itkSize5 const &

        __isub__(self, offset) -> itkIndex5

        Parameters
        ----------
        offset: itkOffset5 const &

        """
        return _itkIndexPython.itkIndex5___isub__(self, *args)

    def __sub__(self, *args):
        r"""
        __sub__(self, sz) -> itkIndex5

        Parameters
        ----------
        sz: itkSize5 const &

        __sub__(self, off) -> itkIndex5

        Parameters
        ----------
        off: itkOffset5 const &

        __sub__(self, vec) -> itkOffset5

        Parameters
        ----------
        vec: itkIndex5 const &

        """
        return _itkIndexPython.itkIndex5___sub__(self, *args)

    def __mul__(self, vec):
        r"""
        __mul__(self, vec) -> itkIndex5

        Parameters
        ----------
        vec: itkSize5 const &

        """
        return _itkIndexPython.itkIndex5___mul__(self, vec)

    def GetIndex(self):
        r"""GetIndex(self) -> long const *"""
        return _itkIndexPython.itkIndex5_GetIndex(self)

    def SetIndex(self, val):
        r"""
        SetIndex(self, val)

        Parameters
        ----------
        val: long const *

        """
        return _itkIndexPython.itkIndex5_SetIndex(self, val)

    def SetElement(self, element, val):
        r"""
        SetElement(self, element, val)

        Parameters
        ----------
        element: unsigned int
        val: long

        """
        return _itkIndexPython.itkIndex5_SetElement(self, element, val)

    def GetElement(self, element):
        r"""
        GetElement(self, element) -> long

        Parameters
        ----------
        element: unsigned int

        """
        return _itkIndexPython.itkIndex5_GetElement(self, element)

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: long

        """
        return _itkIndexPython.itkIndex5_Fill(self, value)

    @staticmethod
    def GetBasisIndex(dim):
        r"""
        GetBasisIndex(dim) -> itkIndex5

        Parameters
        ----------
        dim: unsigned int

        """
        return _itkIndexPython.itkIndex5_GetBasisIndex(dim)

    def assign(self, newValue):
        r"""
        assign(self, newValue)

        Parameters
        ----------
        newValue: long const &

        """
        return _itkIndexPython.itkIndex5_assign(self, newValue)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkIndex5 &

        """
        return _itkIndexPython.itkIndex5_swap(self, other)

    def cbegin(self):
        r"""cbegin(self) -> long const *"""
        return _itkIndexPython.itkIndex5_cbegin(self)

    def begin(self, *args):
        r"""
        begin(self) -> long
        begin(self) -> long const *
        """
        return _itkIndexPython.itkIndex5_begin(self, *args)

    def cend(self):
        r"""cend(self) -> long const *"""
        return _itkIndexPython.itkIndex5_cend(self)

    def end(self, *args):
        r"""
        end(self) -> long
        end(self) -> long const *
        """
        return _itkIndexPython.itkIndex5_end(self, *args)

    def rbegin(self, *args):
        r"""
        rbegin(self) -> std::reverse_iterator< long * >
        rbegin(self) -> std::reverse_iterator< long const * >
        """
        return _itkIndexPython.itkIndex5_rbegin(self, *args)

    def rend(self, *args):
        r"""
        rend(self) -> std::reverse_iterator< long * >
        rend(self) -> std::reverse_iterator< long const * >
        """
        return _itkIndexPython.itkIndex5_rend(self, *args)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkIndexPython.itkIndex5_size(self)

    def max_size(self):
        r"""max_size(self) -> unsigned int"""
        return _itkIndexPython.itkIndex5_max_size(self)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkIndexPython.itkIndex5_empty(self)

    def at(self, *args):
        r"""
        at(self, pos) -> long

        Parameters
        ----------
        pos: unsigned int

        at(self, pos) -> long const &

        Parameters
        ----------
        pos: unsigned int

        """
        return _itkIndexPython.itkIndex5_at(self, *args)

    def front(self, *args):
        r"""
        front(self) -> long
        front(self) -> long const &
        """
        return _itkIndexPython.itkIndex5_front(self, *args)

    def back(self, *args):
        r"""
        back(self) -> long
        back(self) -> long const &
        """
        return _itkIndexPython.itkIndex5_back(self, *args)

    def data(self, *args):
        r"""
        data(self) -> long
        data(self) -> long const *
        """
        return _itkIndexPython.itkIndex5_data(self, *args)

    @staticmethod
    def Filled(value):
        r"""
        Filled(value) -> itkIndex5

        Parameters
        ----------
        value: long const

        """
        return _itkIndexPython.itkIndex5_Filled(value)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkIndex5
        __init__(self, arg0) -> itkIndex5

        Parameters
        ----------
        arg0: itkIndex5 const &

        """
        _itkIndexPython.itkIndex5_swiginit(self, _itkIndexPython.new_itkIndex5(*args))
    __swig_destroy__ = _itkIndexPython.delete_itkIndex5

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> long

        Parameters
        ----------
        d: unsigned long

        """
        return _itkIndexPython.itkIndex5___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: long

        """
        return _itkIndexPython.itkIndex5___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkIndexPython.itkIndex5___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkIndexPython.itkIndex5___repr__(self)

    def __eq__(self, other):
        return tuple(self) == tuple(other)


# Register itkIndex5 in _itkIndexPython:
_itkIndexPython.itkIndex5_swigregister(itkIndex5)

